-- -------------------------------------------------------------
-- TablePlus 5.5.2(512)
--
-- https://tableplus.com/
--
-- Database: syntaxfm
-- Generation Time: 2023-11-30 11:11:22.7000
-- -------------------------------------------------------------


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

INSERT INTO `AiShowNote` (`id`, `show_number`, `title`, `description`, `provider`) VALUES
(2, 675, 'Potluck: Bun JS, APIs, Rust, Documentation, and More', 'In this potluck episode, Scott and Wes answer audience questions on web development topics like Bun JS, REST vs GraphQL APIs, learning Rust, documenting code, WordPress APIs, becoming a podcast guest, and using home gym equipment.', 'anthropic'),
(3, 674, 'Proper Heading Hierarchy for Accessible Websites', 'Discussion on proper semantic usage of h1 through h6 headings for accessibility, SEO, and screen reader navigation.', 'anthropic'),
(4, 673, 'Getting Hired as a Developer in 2023', 'Taylor Desseyn discusses strategies for engineers to stand out in the hiring process, including the importance of social proofing through content creation. He also provides insights into current trends like the developer hiring recession and shift towards back end engineers.', 'anthropic'),
(5, 672, 'Variable Fonts and The State of CSS', 'Wes and Scott discuss the State of CSS developer survey results, covering usage of new CSS features like subgrid, aspect ratio, relative colors, variable fonts, accessibility preferences, and more.', 'anthropic'),
(6, 671, 'Tori vs Electron - The Web Dev Desktop App Smackdown', 'Discussion comparing Tori and Electron for building desktop apps using web technologies. Covers differences in bundle sizes, developer experience, maturity and more.', 'anthropic'),
(7, 670, 'Managing Anxiety and Uncertainty with a Clinical Psychologist', 'Dr. Courtney Tolinski discusses anxiety disorders, symptoms, causes and healthy ways to manage anxiety. She answers questions on recognizing triggers, career anxiety in web development, and making big life decisions.', 'anthropic'),
(8, 669, 'Revisiting Svelte and SvelteKit', 'Wes and Scott discuss their experiences building apps with Svelte and SvelteKit. They cover templating, data fetching, state management, actions, layouts, styling and more.', 'anthropic'),
(9, 668, 'Hacking the Tonal workout device by proxying network requests', 'Scott proxies requests from his Tonal workout device to reverse engineer the API and build custom community workouts since Tonal has limited functionality.', 'anthropic'),
(10, 667, 'From Family Business to Coding: How Stuart Learned Web Development and Landed His First Dev Job', 'Stuart discusses his journey from working in a family business to becoming a self-taught web developer, including how he prepared for interviews, built projects, and made time for learning while having a family.', 'anthropic'),
(11, 666, 'Building Fun Stuff During Hack Week at Sentry', 'Scott and Wes discuss the projects they built during a hack week at Sentry, including a real-time markdown editor and an automated recording button.', 'anthropic'),
(12, 665, 'CSS Nesting is Here! Tips for Avoiding Spaghetti Code', 'Wes and Scott discuss the new CSS nesting syntax that is now supported across all major browsers. They cover how it works, best practices, use cases compared to Sass, browser support via transpiling, and more.', 'anthropic'),
(13, 664, 'Astro 3.0 Launch with Fred Schott', 'In this episode, Fred Schott discusses the Astro 3.0 release and new features like view transitions, image optimization, open source sustainability, and more.', 'anthropic'),
(14, 663, 'Q&A on TypeScript, CMS, web performance, code organization, and more', 'In this episode Scott and Wes answer developer questions on various web development topics like TypeScript, performance, CMS, and more. They also discuss personal topics like dog DNA tests and how they organize their code.', 'anthropic'),
(15, 662, 'Closures Demystified - A Podcast Episode Guide', 'Scott and Wes explain JavaScript closures, scoping, and give examples of how closures can be useful.', 'anthropic'),
(16, 661, 'The Trials and Tribulations of Publishing ES Modules', 'Mark Erikson explains the complexity of shipping JavaScript packages that work across many environments,tools and module systems, with details on his work updating Redux libraries to add ESM support.', 'anthropic'),
(17, 659, 'Next Level Open Graph Images', 'Scott and Wes discuss techniques for dynamically generating social media preview images known as open graph or OG images using services like Satori, Cloudinary, and Puppeteer.', 'anthropic'),
(18, 660, 'Fitness Goals, Home Projects, and Non-Coding Hobbies', 'Scott and Wes catch up on life outside of coding including concerts, home projects, fitness goals, and more. They also recommend a steam cleaner and a sci-fi kids book.', 'anthropic'),
(19, 658, 'Supersonic React Performance with Million.js', 'Aiden Bai discusses Million.js, a library that makes React rendering up to 70% faster by replacing the virtual DOM diffing process. He shares how it works, use cases, and his motivations for improving web performance.', 'anthropic'),
(20, 657, 'Diving Deeper into Rust\'s Type System', 'In part 2 of Rust for JavaScript developers, Scott and Wes dive deeper into Rust\'s type system, talking about integer types, strings, string slices, arrays, tuples, and other collection types. They also cover defining structs, adding methods, and other fundamentals.', 'anthropic'),
(21, 656, '8 Hands-On Fetch API Tricks to Level Up Your JavaScript Skills', 'Wes shares 8 tricks for using the JavaScript Fetch API including streaming responses, tracking download progress, and handling errors.', 'anthropic'),
(22, 655, 'Building a next-gen video editor in the browser with Web Codecs, Radix UI, and AI voice cloning', 'Andrew Lizowski discusses how video editor Descript is built with web technology like Web Codecs and XState. He covers the AI transcription and voice features, using Radix and Tailwind for components, and reliable end-to-end testing with Playwright.', 'anthropic'),
(23, 654, 'Freshly Baked JavaScript APIs', 'Overview of 6 new approved and proposed JavaScript APIs in various stages - ranging from shipped to just proposed. Covers Promise resolvers, immutable arrays, array grouping, observable events, import assertions, Map.emplace(), decorators and pattern matching.', 'anthropic'),
(24, 653, 'Decorating Classes in JavaScript with Wes & Scott', 'Scott and Wes discuss JavaScript decorators - what they are, how to use them, their current status, and potential future use cases.', 'anthropic'),
(25, 652, 'Deploying Full-Stack Apps to Your AWS Account', 'Brandon Bayer, creator of Blitz JS, discusses Flight Control which lets you deploy apps on your AWS account with a great developer experience. Covers serverless deployment, preview environments, Docker, build caches, and more.', 'anthropic'),
(26, 651, 'Fancy TypeScript Duct Tape and No-Back-Pain Programming', 'Scott and Wes answer listener questions about TypeScript, preventing back pain while programming, and options for limiting cloud service costs.', 'anthropic'),
(27, 650, 'Why Facebook\'s HTML and CSS is a Mess', 'Discussion on why Facebook and Instagram HTML/CSS is messy - random CSS class names and excessive div wrappers.', 'anthropic'),
(28, 649, 'Remix creator Ryan Florence joins to discuss the web framework\'s unique architecture and licensing journey', 'Ryan Florence discusses Remix, a React web framework he created with Michael Jackson. Topics include Remix\'s architecture, licensing model, adoption, and how it pioneered concepts like serverless functions.', 'anthropic'),
(29, 648, 'Server-Side JavaScript Just Got Standardized', 'Overview of standard APIs for JavaScript that work across server side runtimes like Node, Deno and Cloudflare workers.', 'anthropic'),
(30, 647, 'Re-rusting Your JS Skills - Node vs Rust Concepts', 'Compares JavaScript and Rust at a high level, including cargo, documentation, async/await, error handling, syntax differences, and more.', 'anthropic'),
(31, 646, 'Nodemailer Creator Talks Email History, Authentication, Deliverability', 'Andres Reinman discusses the history and complexity of email protocols and clients, building Nodemailer, DMARC authentication, avoiding spam filters, and his email products Email Engine and Ethereal Email.', 'anthropic'),
(32, 645, 'The Ultimate Guide to Polyfilling, Transpiling, and Monkey Patching', 'Wes and Scott discuss polyfilling, transpiling, and monkey patching - what they are, when to use each, and tools that can help.', 'anthropic'),
(33, 644, 'Toast Up Your User Feedback', 'Scott and Wes discuss best practices for user feedback UI like toasts, flash messages and form validation.', 'anthropic'),
(34, 643, 'WebAssembly, Fastly Edge Computing, and Polyfill.io with Jake Champion', 'Discussion with Jake Champion about WebAssembly, Fastly ComputeEdge, and Polyfill.io.', 'anthropic'),
(35, 642, 'Potluck × CSS Variables in React × JS Notebooks × Selling a Domain', 'Wes and Scott answer listener questions on topics like React and CSS, JavaScript notebooks, selling domains, balancing learning as a new parent, and more.', 'anthropic'),
(36, 641, 'How to Ask for Help like a Pro', 'Wes and Scott discuss best practices for asking for help with libraries and open source projects like providing reproductions, being responsive and respectful, searching existing issues first, and sharing code context.', 'anthropic'),
(37, 640, 'Code Snippets As a Service', 'Steve Krause introduces val.town, a social platform for writing and running code snippets. He discusses the inspiration behind val.town, using Deno and Render for the backend, common use cases like IoT and webhooks, recommendations for learning coding, and building an engaged community.', 'anthropic'),
(38, 639, 'Stump\'d × JavaScript × GraphQL × Memory Safety × Web History', 'Scott and Wes use AI to generate challenging interview questions and quiz each other on web development topics ranging from JavaScript to CSS history.', 'anthropic'),
(39, 638, 'AI Coding Tools Every Developer Should Try', 'Discussion on using AI tools like CodeAI, CodeWhisperer, Copilot, lintrule, opencommit, Ghostwriter, Codegeeks, Codeum AI, TabNine, and ChatGPT for tasks like documentation, optimization, code generation, data formatting, commit messages and more. Notes the importance of validating any AI-generated code before use in production.', 'anthropic'),
(40, 637, 'Cloudinary\'s AI Media Tools and Framework SDKs', 'Scott and Wes chat with Colby Fayock about Cloudinary\'s developer experience, AI media capabilities like image filling and background removal, building SDKs and components for frameworks like Next.js and Svelte, Colby\'s own YouTube channel and creative process, and advice for beginners.', 'anthropic'),
(41, 636, 'Headless UIs for the Headstrong Developer', 'Scott and Wes discuss headless components - reusable components that provide functionality without any UI. They talk about various headless component libraries, building accessible components, using headless WordPress, running headless Chrome, and more.', 'anthropic'),
(42, 635, 'Lightning Fast Styles with Lightning CSS', 'Wes and Scott discuss Lightning CSS - a fast CSS parser, transformer, bundler and minifier from the creator of Parcel. They cover the benefits of Lightning CSS including improved performance, support for future CSS syntax like nesting and color spaces, and more.', 'anthropic'),
(43, 634, 'Inside Sentry\'s Massive Event Queues with Armin Ronacher', 'Armin Ronacher discusses designing performant queues and backpressure systems to handle massive scale at Sentry. He also shares his views on Python, JavaScript, Rust and staying up to date.', 'anthropic'),
(44, 633, 'WTF is an ORM?', 'Wes and Scott discuss what ORMs are, popular options like Prisma and Drizzle, schema vs models, and migrations. They also joke about dentists, pronunciation in tech, and share recommendations.', 'anthropic'),
(45, 632, 'Best Domain Registrars in 2023', 'Wes and Scott discuss top domain name registrars in light of Google Domains closing down. They compare pricing, features, UX and more across Namecheap, GoDaddy, Gandhi, Hover, Name.com, Cloudflare and others.', 'anthropic'),
(46, 631, 'Gatsby, Valhalla and GraphQL with Dustin Schau', 'Dustin Schau discusses leading the Gatsby and Valhalla teams, using GraphQL as a data layer, low-code solutions for CMS editing, thoughts on React server components, and plans for improving Gatsby performance and integration. He also shares his editor setup, what tech stack he would use today, and his Ubuntu home theater setup.', 'anthropic'),
(47, 630, 'Conquering Rate Limits and Computer Glitches to Get to the Conference', 'Wes and Scott discuss upcoming conferences, computer issues, and strategies for working with rate limited APIs.', 'anthropic'),
(48, 629, 'Async Contexts - The Future of State Management?', 'Discussion on AsyncLocalStorage and Async Context API in JavaScript which allow accessing context down the call stack without passing references explicitly.', 'anthropic'),
(49, 628, 'Running Full JavaScript on $5 Microcontrollers?!', 'Nick Hehr discusses running JavaScript on microcontrollers with ESP32 and Raspberry Pi Pico using the Excess engine, challenges around tooling and standards, and how he builds projects with it.', 'anthropic'),
(50, 627, 'Become an Electronics Wizard - Syntax Podcast', 'Wes gives an overview of basic electronics concepts like voltage, amperage, microcontrollers, coding, and projects he has built.', 'anthropic'),
(51, 626, 'Level Up Your GitHub Project Management', 'Wes and Scott discuss using GitHub Projects, Milestones, Labels, and Actions to organize and automate your workflow.', 'anthropic'),
(52, 625, 'Behind the Scenes of ChatGPT and Aiming for AGI', 'Andrey Mashenko from OpenAI discusses developing plugins for ChatGPT, training language models, the future of programming and work, and aiming for artificial general intelligence.', 'anthropic'),
(53, 624, 'Svelte ditches TypeScript for JSDoc and the web explodes', 'In this episode Scott and Wes discuss Svelte\'s recent move from TypeScript to using JSDoc for typing, explaining what JSDoc is and its benefits over regular TypeScript.', 'anthropic'),
(54, 623, 'Nothing in CSS - 0 vs 0px, none, no, hidden, initial and unset', 'Discussion on values like none, 0, and hidden that essentially remove or undo something in CSS and HTML.', 'anthropic'),
(55, 622, 'GitHub Next - Forging Developer Superpowers with AI', 'GitHub\'s R&D team discusses pioneering AI developer tools like Copilot and shares insights on creating reliable, intuitive experiences. They examine challenges like latency, trust, feedback and rethinking workflows in light of AI capabilities.', 'anthropic'),
(56, 621, 'Building the New Syntax Website Infrastructure with SvelteKit, Prisma, and AI Transcription', 'Scott and Wes discuss building the infrastructure and backend for the new Syntax.fm website. Topics include choosing SvelteKit, setting up GitHub OAuth, integrating PostCSS, and leveraging AI for automated podcast transcription.', 'anthropic'),
(57, 620, 'JavaScript goes portable with standalone executables', 'Scott and Wes discuss JavaScript executables - standalone, portable executables containing your Node app, dependencies, and the runtime. They cover use cases, criticisms of large executable sizes, and potential ways to shrink executables.', 'anthropic'),
(58, 619, 'The Future of CSS', 'Bramus Van Damme from the Chrome team discusses the latest in CSS including scroll-linked animations, scope styling, view transitions, nesting and more.', 'anthropic'),
(59, 618, 'SvelteKit x Astro × CSS Custom Props × React Native Deps', 'In this episode, Wes and Scott answer listener questions on topics like using SvelteKit with Astro, what can be put in CSS custom properties, driving code quality on a team, and working with deprecated dependencies in React Native. They also share picks.', 'anthropic'),
(60, 617, 'Why is node_modules So Big?', 'Discussion on why Node.js node_modules folders get so large and what actually takes up most of the space inside them.', 'anthropic'),
(61, 616, 'What\'s New in CSS', 'Adam Argyle discusses all the latest updates in CSS including new units, gradients, animations, custom properties, and more.', 'anthropic'),
(62, 615, 'The Ultimate Hosting Providers Smack Down', 'Compares popular hosting providers like Vercel, DigitalOcean, and AWS services. Looks at features, pricing models, and opinions.', 'anthropic'),
(63, 614, 'WTF are Signals and Why is Everyone So Hot on Them All of a Sudden?', 'Discussion on what signals are, why frameworks are adopting them, and whether you need to use them in your apps.', 'anthropic'),
(64, 613, 'Simplify Streaming - Mux and Video Infrastructure', 'Dylan Javeri from Mux discusses their developer platform for powering professional video on the web. Topics include video players, streaming, codecs, analytics, AI, web components, and the future of video.', 'anthropic'),
(65, 612, 'UI Elements - The Good, Bad, and Future', 'Wes and Scott discuss browser native UI elements, issues with their lack of flexibility, and research into better customizable options via the Open UI community group.', 'anthropic'),
(66, 611, 'Bluesky and the AT Protocol - The Future of Twitter?', 'Scott and Wes discuss the new Blue Sky social network and AT protocol, comparing it to Twitter, Mastodon and other decentralized social networks.', 'anthropic'),
(67, 610, 'Reinventing the Terminal with Warp Creator Zach Lloyd', 'Scott and Wes interview Zach Lloyd, creator of the Warp terminal app, about building Warp in Rust, efforts to reinvent the terminal UX, integrating AI assistants, and his background working on Google Docs.', 'anthropic'),
(68, 609, 'Building the Syntax Swag Giveaway Site - Productivity, Performance, and Fun', 'Scott and Wes discuss building the Syntax merch giveaway site using SvelteKit, Prisma, and PlanetScale, handling heavy traffic, security considerations, and why it was an enjoyable developer experience.', 'anthropic'),
(69, 608, 'RPC Explained for JS Devs', 'Wes and Scott explain RPC and discuss its growing popularity due to server-side React, key concepts, use cases, standards, comparisons to REST, and considerations.', 'anthropic'),
(70, 607, 'Navigating Website Privacy Policies and Terms for Your Online Business', 'A discussion with lawyers about the details of privacy policies, terms of service, GDPR compliance, cookie consent, and more for websites and online businesses.', 'anthropic'),
(71, 606, 'Scott\'s Exciting New Audio Gear', 'Scott talks about his new Neumann MT48 audio interface and how it will improve his podcast audio setup.', 'anthropic'),
(72, 605, 'Level Up Your Style with Practical CSS Color Functions', 'This episode covers practical uses of new CSS color functions like relative color, color contrast, and color mixing. Wes and Scott are excited about the possibilities enabled by modifying colors dynamically in CSS.', 'anthropic'),
(73, 604, 'Nicholas Zakas on the Past and Future of ESLint', 'Nicholas Zakas discusses creating ESLint 10 years ago, how it works, improving the config system, and why communication skills matter more as you become a senior engineer.', 'anthropic'),
(74, 603, 'Has CSS killed Sass yet?', 'Wes and Scott discuss whether vanilla CSS has all the features of Sass these days, going through variables, nesting, colors, looping, mixins, imports, math functions, custom functions, and BEM syntax.', 'anthropic'),
(75, 602, 'All About Modals: Popups, Dialogs, Escape Handling, and More', 'Discussion on terminology, HTML elements, and implementation details around modal popups, dialogs, and popovers.', 'anthropic'),
(76, 601, 'Unifying React Native and Web with Tomagui', 'Discussion of Tomagui - a tool that unifies React Native and web development with consistent styling. Covers React Native styling, optimizations, animations, layout, and more.', 'anthropic'),
(77, 600, 'Syntax is Joining Sentry! More Video, Authenticity, and Big Plans', 'Scott and Wes announce that Syntax is joining Sentry. They discuss the partnership, how it started, and what it means for the future of the podcast.', 'anthropic'),
(78, 599, 'Demystifying the Magic Behind Logging In With GitHub', 'This episode explains OAuth, the standard for logging in via services like GitHub and accessing user data. OAuth uses various tokens like client ID, client secret, authorization code, access token, and refresh token.', 'anthropic'),
(79, 598, 'Inside Modern WordPress Development in 2023', 'A deep dive into modern WordPress development covering block editors, headless CMS, developer workflows, editing experience and more.', 'anthropic'),
(80, 597, 'Stump\'d By ChatGPT: Can AI Ask Better Dev Interview Questions Than Humans?', 'Scott and Wes play a gameshow where ChatGPT asks them web development interview questions of increasing difficulty and obscurity on topics like JavaScript, CSS, GraphQL, TypeScript, Svelte, and Deno.', 'anthropic'),
(81, 596, 'Import Maps Explained - The New JavaScript Alias Standard', 'Explains the new import maps standard for aliasing files and paths in JavaScript projects. Covers how to use them and browser support.', 'anthropic'),
(82, 595, 'Everything you wanted to know about web components', 'Discussion with Justin Fagnani of Google about web components, how they work, the intent behind their creation, and how libraries like Lit integrate with them.', 'anthropic'),
(83, 594, 'Freelancing, Testing, Frameworks, Functions, Learning, and CSS Grid', 'In this potluck episode, Scott and Wes answer developer questions about freelancing tips, testing animations, choosing frameworks, writing small functions, learning strategies, and using CSS grid.', 'anthropic'),
(84, 592, 'Designing Humanistic AI Tools and Interfaces with Travis Neilson', 'Travis Nielsen joins to discuss his perspective on AI tools as a designer and creator, including the importance of treating AI tools like collaborators, keeping the human element in interfaces, articulating ideas effectively, and customizing models to your needs and priorities.', 'anthropic'),
(85, 591, 'Career changes, coding quickly, web design, and SPAs', 'In this potluck episode, Scott and Wes discuss topics like switching careers, writing code quickly, learning web development with limited time, improving web design skills, and whether you really need to use a single page application.', 'anthropic'),
(86, 590, 'Tunnel Your Localhost Over HTTPS for Fun and Profit', 'Discussion on using HTTPS and tunneling services like Cloudflare Tunnel and ngrok to securely expose a local dev server and allow outside traffic for testing.', 'anthropic'),
(87, 589, 'Hosting Next.js Anywhere with Serverless - AWS, Vercel, Cloudflare', 'Wes Bos and Scott Tolinski talk with Dax Raad about modern hosting platforms and serverless technology, including using Next.js with Vercel vs self-hosting on AWS, Cloudflare\'s edge platform, and optimizing costs with thoughtful architecture.', 'anthropic'),
(88, 588, 'New Syntax Website Brainstorm! IRL!', 'In this fun IRL episode, Wes and Scott brainstorm creative ideas for improving the Syntax podcast website, including search, transcripts, video components, surfacing old content, and more.', 'anthropic'),
(89, 587, 'All About Web Streams', 'Wes and Scott discuss web streams, how they work, and examples of using them for performance and working with large data.', 'anthropic'),
(90, 586, 'Around the World Coding - Digital Nomad Shares Tips', 'Scott and Wes interview Eric Sartorius, a developer and digital nomad who has traveled the world while working full time as a freelancer and mentor.', 'anthropic'),
(91, 585, 'What Makes a Website Slow? Tips for Debugging Performance', 'Discussion on identifying performance issues that cause websites to be slow and potential solutions.', 'anthropic'),
(92, 584, 'Node in Browser is a Game Changer for Learning and Sharing Code', 'Discussion on running Node.js in the browser via web containers and Nodebox, enabling server-side code in the browser for demos, tutorials and interactivity.', 'anthropic'),
(93, 583, 'Visually Build UIs with Any Framework using Builder.io', 'Steve Sewell discusses Builder.io, a visual programming tool that allows composing UIs from React components via a drag and drop interface', 'anthropic'),
(94, 582, 'AI Encoders and Image Generators: How Will They Change Development?', 'Scott and Wes discuss AI encoders like ChatGPT and image generators like Midjourney, including capabilities, limitations, implications, and how it will impact developers.', 'anthropic'),
(95, 581, 'The Battle Against Sloppy Code', 'Discussion on establishing codebase rules and conventions to enforce clean code vs sloppy code through formatting, linting, naming conventions, documentation, and automation.', 'anthropic'),
(96, 580, 'Fred Schott reviews Astro 2.0 - Web framework for content sites with HTML-first islands', 'Fred Schott discusses Astro 2.0, a framework for content-focused sites that defaults to HTML with interactive JS islands. Covers use cases, routing, markdown support, edge runtimes and top-level data fetching.', 'anthropic'),
(97, 579, 'Revolutionizing terminals with Warp on Mac', 'In this episode of Syntax, Scott and Wes provide an overview of the new Warp terminal for Mac, discussing its features, benefits over traditional terminals, and technology behind it.', 'anthropic'),
(98, 578, 'The Treasure Trail of Logging', 'Wes and Scott discuss the value of comprehensive logging in web development and some best practices.', 'anthropic'),
(99, 577, 'Inside Solid JS and the future of front-end frameworks', 'Ryan Carniato discusses the history and concepts behind SolidJS. Covers reactivity, signals, differences from React, web components support, and introducing Solid Start.', 'anthropic'),
(100, 593, 'JavaScript and the OpenAI API', 'Scott and Wes discuss how to work with the OpenAI API and ChatGPT in JavaScript. They go over the different APIs available, pricing, token limits, prompt tuning, and share tips for saving money.', 'anthropic'),
(101, 576, 'Listener Q&A on Smart Homes, Web Dev, and More', 'In this potluck episode, Scott and Wes answer submitted listener questions on topics like setting up a smart home, using web components, JavaScript mixins, and more.', 'anthropic'),
(102, 575, 'Save us from config file hell!', 'Wes and Scott discuss config files in web development projects - how they are necessary but can clutter your codebase. They talk through different formats like JSON, JavaScript and YAML, tools to hide/organize them, and ideas for standardization.', 'anthropic'),
(103, 574, 'Resumable UIs for Free with Qwik framework', 'Discussion with Mishko Hevery, creator of Angular, about his new framework Qwik and its resumability feature for improved performance without extra effort from developers.', 'anthropic'),
(104, 573, 'From Wiring to Typing - Converting JS to TS', 'Scott and Wes discuss their experiences installing smart switches and converting their JavaScript code bases to TypeScript. They talk through the wiring challenges, refactoring benefits, and how TypeScript helps catch bugs.', 'anthropic'),
(105, 572, 'Polish and Perf: Making Your Site Speedy and Shiny Post-Launch', 'Wes and Scott discuss strategies for improving performance and polish after launching a web app, from auditing network requests to optimizing images, caching, removing unnecessary code, and iteratively enhancing the user experience.', 'anthropic'),
(106, 571, 'Making Rust approachable for new developers', 'This episode covers the history of Rust, how it aims to be more approachable for new developers, the steep learning curve, good introductory projects like command line utilities and games, performance and efficiency benefits, terminology like crates and cargo, and running Rust via WebAssembly.', 'anthropic'),
(107, 570, 'Migrating to ECMAScript Modules in Node.js', 'Discussion on moving from CommonJS modules to ECMAScript modules in Node.js - the benefits, challenges and steps for transitioning a project.', 'anthropic'),
(108, 569, 'Scott and Wes’ CSS Wishlist - Mixins, Grid Rows, Color Functions, and More!', 'In this episode Scott and Wes discuss their wishlist for future CSS features including mixins, grid row selection, range selectors, first/last selectors, fit-text, overflow control, color functions, lighten/darken colors, resize handles on divs, and overflow styles.', 'anthropic'),
(109, 568, 'Developer from Canada discusses Buffalo\'s secret Canadian side', 'Wes Bos and Scott Tolinski interview web developer Caleb Porzio about growing up in Canada near Buffalo and the cultural similarities between the two.', 'anthropic'),
(110, 567, 'Hot Takes on the Spicy State of JS 2022 Survey', 'Wes and Scott discuss the results of the State of JS 2022 survey, analyzing trends in frameworks, libraries, developer demographics, salaries, and more.', 'anthropic'),
(111, 566, 'Container queries land in browsers - explained with examples!', 'Wes and Scott provide an intro to container queries, explaining the syntax, use cases, and browser support. They share examples for styling based on parent width and height, replacing JS with CSS, and dynamically sizing fonts and elements.', 'anthropic'),
(112, 565, 'Deep Dive into Sanity CMS with the Syntax Podcast', 'Scott and Wes from Syntax podcast chat with Simons and Espin from Sanity about the Sanity content platform, Grok query language, and the new Sanity Studio 3 release.', 'anthropic'),
(113, 564, 'Knee injuries, recession woes, and the future of JS modules', 'Wes and Scott answer listener questions about HTML tags, recession impacts, budgeting, expensive cars, and the state of JS modules.', 'anthropic'),
(114, 563, 'Buy It or Build It? Service Decisions', 'Discussion on evaluating whether to buy or build services for your application.', 'anthropic'),
(115, 562, 'From literature to founding engineer at sustainable building startup', 'Katherine Mello discusses her journey from French literature major to founding engineer at sustainable building startup Tangible, touching on coding bootcamps, data visualization, and working at WeWork during its dramatic fall.', 'anthropic'),
(116, 561, 'New Tools and Skills: Wes and Scott\'s 2023 Resolution Repertoire ', 'Wes and Scott discuss their goals for 2023 including code goals like using new technologies, improving courses, fitness goals like losing weight and doing more cardio, and podcast goals like conducting better interviews.', 'anthropic'),
(117, 560, 'Freeze Your Types and Satisfy Your Cravings with TypeScript', 'Scott and Wes discuss new TypeScript techniques like \'as const\' to create frozen read-only types from data and \'satisfies\' to allow better inference for unknown metadata objects.', 'anthropic'),
(118, 559, 'Sarah Drasner on Writing Engineering Management for the Rest of Us', 'Sarah Drasner discusses writing her new book Engineering Management for the Rest of Us. She covers her transition from engineer to management at companies like Google, key responsibilities as a manager, writing and publishing the book, and staying motivated by helping others learn.', 'anthropic'),
(119, 558, '2023 Web Development Trend Predictions - Server Side Rendering, Browser APIs, Frameworks, Rust, and More', 'In this episode, Wes and Scott make predictions for trends and changes in web development during 2023.', 'anthropic'),
(120, 557, 'Narrow Those Types Down in TypeScript', 'Discussion on TypeScript fundamentals like type narrowing, guards and predicates which narrow types from general to specific.', 'anthropic'),
(121, 556, 'The Polypane Browser - A Supercharged Dev Tool for Faster Accessible Development', 'Kilian Valkhof discusses Polypane, the developer tool browser he created to speed up development and make accessibility testing easy. He covers Polypane\'s multi-pane view, custom dev tools focused on the multi-pane experience, extensive accessibility testing features, and more.', 'anthropic'),
(122, 555, '2022 Web Dev Predictions - Right or Wrong?', 'Wes Bos and Scott Tolinski review their 2022 web development predictions from last year\'s episode to see what they got right and wrong.', 'anthropic'),
(123, 554, 'Desktop Apps in JS with Electron and Tori', 'Scott and Wes discuss building desktop applications using JavaScript and frameworks like Electron and Tori.', 'anthropic'),
(124, 553, 'From Aerospace Machinist to Two Full-Time Remote Web Dev Jobs', 'Kenneth Lyerly shares his journey switching careers into web development, leading teams in ecommerce and marketing, and now working two full-time remote jobs.', 'anthropic'),
(125, 676, 'Coding in the Cloud with Google\'s Project IDX', 'David East discusses Google\'s new online IDE Project IDX, which allows coding directly in the browser with AI assistance. He talks about the motivation, benefits, and technology behind IDX.', 'anthropic'),
(126, 552, 'Potluck Podcast Episode on Web Dev Tips and Tricks', 'Potluck Q&A show covering website improvements, managing notifications, JavaScript testing, routers, freelancing tips, smart home automation and more.', 'anthropic'),
(127, 551, 'Serverless showdown: Database options for your next JAMstack project', 'Discussion on using databases with serverless architectures and the unique challenges around connection pooling, edge locations, and scaling.', 'anthropic'),
(128, 550, 'Generating Videos with Code using Remotion and React', 'Johnny Burger explains how he created Remotion, a tool for programmatically generating videos with React and common web technologies. He talks about the motivation, technical implementation, and use cases.', 'anthropic'),
(129, 549, 'Navigating the JavaScript Web Almanac', 'Scott and Wes discuss the JavaScript chapter of the Web Almanac, covering topics like framework usage, script loading, and JS payloads. Wes also shares about recovering from a nasty flu.', 'anthropic'),
(130, 548, 'Web Rendering Methods Explained', 'Scott and Wes discuss different rendering methods for web applications based on the State of JS survey results. They provide overviews and examples of SPA, MPA, SSG, SSR, partial and progressive hydration, island architecture, progressive enhancement, ISG, streaming SSR, resumability, and edge rendering.', 'anthropic'),
(131, 547, 'The secret tools powering Disney\'s massive content workflow', 'Vu Le shares insights into building internal CMS and tools at Disney to manage massive amounts of content and enable complex workflows for Disney Plus, ABC News, National Geographic and more.', 'anthropic'),
(132, 546, 'Code Styles: Readable Rules or Petty Preferences?', 'Scott and Wes discuss their code style preferences, focusing on readability over being fancy. They also chat about prepping for a site launch.', 'anthropic'),
(133, 545, 'GitHub unveils exciting new AI-powered developer tools', 'Scott and Wes discuss GitHub\'s latest announcements and upcoming products revealed on the GitHub Next website, including GitHub Copilot integrations, voice coding, collaborative workflows, and more.', 'anthropic'),
(134, 544, 'Inside Bun: A Faster JavaScript Runtime Alternative to Node', 'Jared Sumner discusses creating the Bun JavaScript runtime, focusing on performance, integrating tools, and potential use cases compared to Node and in embedded systems.', 'anthropic'),
(135, 543, 'Navigating the Twittersphere and Understanding Real-Time Data', 'Wes and Scott answer listener questions about using Twitter, the difference between CRUD operations and real-time protocols like WebSockets, and share updates on projects they are working on.', 'anthropic'),
(136, 542, 'Serverless Limitations - What to watch out for', 'Wes and Scott discuss limitations of serverless functions and how to work around them.', 'anthropic'),
(137, 541, 'Scott and Wes talk about anything but coding on the Syntax Supper Club', 'Scott and Wes have a casual conversation touching on various topics like reality TV shows, holidays, home renovation shows and more.', 'anthropic'),
(138, 540, 'Mastering the Art of Responsive Web Design', 'Discussion on different techniques for making websites responsive across devices like mobile, tablets, and desktop screens.', 'anthropic'),
(139, 539, 'React Use hook - Game Changer or Footgun City?', 'Scott and Wes discuss the new React Use hook proposal for handling promises and asynchronous data fetching in React components. They cover the basics, comparisons to React Query, concerns around complexity and fragmentation in React.', 'anthropic'),
(140, 538, 'Ryan Dahl on Why He Still Believes in JavaScript and How He Built Deno', 'Ryan Dahl discusses the origins and goals of Deno, his new JavaScript/TypeScript runtime, and why he believes JavaScript will remain the language of the web.', 'anthropic'),
(141, 537, 'CSS Trends Almanac 2022 Wrap-Up', 'Scott and Wes continue their analysis of CSS usage trends from the HTTP archive almanac, discussing topics like box model, columns, animations, blend modes, and responsive design.', 'anthropic'),
(142, 536, 'Hot tips for spicy short-form dev content', 'Wes and Scott discuss creating short-form video content for platforms like TikTok, Instagram Reels, and YouTube Shorts. They cover repurposing existing content, making custom videos, platform algorithms, tips for capturing viewers\' attention quickly, challenges of showing code, and using text-based editing tools.', 'anthropic'),
(143, 535, 'Crashing layouts, turbocharged bundling, and a live audience: A jam-packed web dev podcast', 'Wes and Scott discuss site bugs, Vercel announcements like TurboPack, the post-Webpack era, and take audience questions in a live stream podcast.', 'anthropic'),
(144, 534, 'Syntax Podcast Potluck × Meeting IRL × SSG vs SSR × Domain Privacy', 'The Syntax podcast hosted by Scott Talinski and Wes Boss covers tasty web development topics.', 'anthropic'),
(145, 533, 'Zod Schema Validation and Type Generation', 'Discussion of Zod, a TypeScript-first schema validation and inference library. Covers features like type inference, runtime validation, integration, and comparisons to alternatives.', 'anthropic'),
(146, 532, 'ADHD and Coding Careers: Managing Symptoms and Staying Productive', 'Dr. Courtney Talinski discusses ADHD, including common symptoms and strategies for managing it as an adult, especially in tech careers.', 'anthropic'),
(147, 531, 'Web dev horror stories - placeholders gone wrong, accidental deletions, and more', 'Discussion of spooky web development stories involving accidents, bugs, and things gone wrong submitted by listeners.', 'anthropic'),
(148, 530, 'Buzzwords DEMYSTIFIED - Schema, Promises, Async/Await, DOM, Methods vs Functions, Props, Stateless Requests', 'Scott and Wes explain web development buzzwords and concepts like schema, promises, async/await, DOM, methods vs functions, props, and stateless HTTP requests.', 'anthropic'),
(149, 529, 'GraphQL for Data Aggregation at Sky', 'Philippe Ferreira from Sky discusses how they use GraphQL as an aggregation layer across their streaming platform and apps.', 'anthropic'),
(150, 528, 'Web dev nightmares -  accidentally losing orders, crashing apps, and costing companies millions!', 'Scott and Wes share cringey, scary stories submitted by developers about mistakes they\'ve made in production that caused big problems.', 'anthropic'),
(151, 527, 'Hydration Hurts! Meet Quick - The No-Hydration Framework', 'This episode discusses Quick, a new web development framework created by the inventor of Angular that eliminates hydration by serializing state to HTML. It also covers topics like JSX, SSR, edge functions, and more.', 'anthropic'),
(152, 526, 'tRPC - TypeScript Remote Procedure Calls', 'Alex Johansen discusses tRPC, an alternative to REST and GraphQL for calling functions between client and server using TypeScript for type safety.', 'anthropic'),
(153, 525, 'Web Stats Show Surprisingly High Mobile Usage', 'Scott and Wes discuss mobile vs desktop usage based on stats from the Web Almanac report, cleaning tips, sponsors, and more.', 'anthropic'),
(154, 524, 'Bring back bookmarklets!', 'Wes and Scott discuss bookmarklets - JavaScript snippets that run on any page when clicked. They explain what bookmarklets are, how to use them, and share examples.', 'anthropic'),
(155, 523, 'Neovim vs Vim and Lua Integration with TJ DeVries', 'TJ DeVries discusses Neovim, Lua integration, and the difference between Neovim and Vim.', 'anthropic'),
(156, 522, 'Forget Frameworks, Just Use the Platform!', 'Wes and Scott discuss using browser APIs and vanilla JavaScript instead of frameworks and libraries.', 'anthropic'),
(157, 521, 'JavaScript Jargon Explained', 'Scott and Wes explain common JavaScript jargon like syntactic sugar, declarative programming, and more.', 'anthropic'),
(158, 520, 'From Graphcool to Prisma - The Evolution of an ORM', 'Nicholas Burke from Prisma discusses the evolution of Prisma from Graphcool to Prisma 1 to Prisma today, which is now a general purpose ORM.', 'anthropic'),
(159, 519, 'Emoji CSS Areas & Project Estimation', 'Wes and Scott answer listener questions about using emoji in CSS, estimating project timelines, going to football games, and more.', 'anthropic'),
(160, 518, 'Defeating Project Blahs: 9 Hacks to Finally Ship It', 'Wes and Scott discuss tips for pushing through the last 10% of a project when you get project blahs and start to lose motivation.', 'anthropic'),
(161, 517, 'Making Open Source Sauce with B Dougie', 'Scott and Wes interview Brian Douglas about his background in engineering and open source and his project Open Sauce to make open source more approachable. They also discuss GitHub\'s GraphQL API and Brian\'s experience with live streaming.', 'anthropic'),
(162, 516, 'Wes\' Extreme DIY Soundproof Office Build', 'Wes details building his new soundproof basement office from scratch including framing, wiring, soundproofing materials and tradeoffs.', 'anthropic'),
(163, 515, 'Enhance JS: A New Web Standards HTML Framework', 'A new HTML framework called Enhance JS that uses web standards and provides lightweight components, file-based routing, server-side rendering, and easy to write components.', 'anthropic'),
(164, 514, 'Reinventing Browsers for the 2020s with Arc Browser', 'Hirsch Agarwal discusses founding the Arc browser company, focusing on reinventing the browser UI/UX, building with Swift, designing for delight, and planning for subscriptions without compromising user experience.', 'anthropic'),
(165, 513, 'GTD Systems, Task Prioritization, and Productivity Techniques', 'Scott and Wes discuss productivity techniques like the Getting Things Done system and Pomodoro technique, as well as tips for managing tasks, prioritizing work, and making time for creative exploration.', 'anthropic'),
(166, 512, 'AI Coding: Is GitHub Copilot Worth It?', 'Discussion of GitHub Copilot and other AI coding tools - how they work, concerns, pricing, and whether they help or hurt developers.', 'anthropic'),
(167, 511, 'Inside Raycast: Building a Native Productivity App with a Declarative Extension API', 'Discussion with Thomas from Raycast about building the productivity app and its native architecture, React-based extension API, and local storage using SQLite.', 'anthropic'),
(168, 510, 'How to Build an API in 2022', 'This podcast episode provides a comprehensive overview of building a web API, covering topics like the various layers and components involved, popular API types like REST and GraphQL, authentication and permissions, caching, database options, and more.', 'anthropic'),
(169, 509, 'Using PostCSS to Write Next-Gen CSS Today', 'This episode covers using PostCSS to write next generation CSS today including topics like postcss plugins, imports, nesting, custom media queries, env vars, and color functions.', 'anthropic'),
(170, 508, 'Interview with Twitch streamer Primogen on live coding, skateboarding, and Turok', 'Scott and Wes interview Primogen, a Twitch streamer and Vim user who talks about where his name comes from, the different types of coding streamers, and why people watch live coding.', 'anthropic'),
(171, 507, 'Potluck: Objects, Testing, Standing Desks, and VSCode Tips', 'In this potluck episode, Scott and Wes answer questions on object creation performance, VSCode types, standing desks, and more.', 'anthropic'),
(172, 506, 'Deno Challenges Node with NPM Support and Speed', 'Deno has announced compatibility with Node and NPM, making it easier to use existing packages. They also have the fastest JS web server and good TypeScript support, so Node may fall behind.', 'anthropic'),
(173, 505, 'From Digital Ink to TLDraw: Making a React Canvas', 'Steve Ruiz discusses the development of his open source React drawing canvas TLDraw, explaining the inspiration and technology behind it.', 'anthropic'),
(174, 504, 'Back to School: Kindergarten, New Offices, Soundproofing, and Portfolio Reviews', 'Wes and Scott discuss the first day of kindergarten, setting up Wes\' new office, soundproofing with acoustic panels, and then transition to reviewing developer portfolios.', 'anthropic'),
(175, 503, 'The ultimate margin showdown', 'Discussion of various techniques for handling margins and layout in CSS including collapsing margins, padding vs margins, flexbox, grid, and using spacer divs.', 'anthropic'),
(176, 502, 'The Open Source Firebase Alternative for Your Next Project', 'Brandon Roberts discusses AppRight, an open source self-hosted backend for web and mobile apps. It provides database, auth, storage, functions and more out of the box.', 'anthropic'),
(177, 501, 'The School Runaround and Getting Off the Main Thread', 'In this episode, Wes and Scott discuss the differences between public and private schools in Denver and the challenges of getting kids into preferred schools. They then provide an overview of threads, concurrency and parallelism in programming languages and how JavaScript only has a single thread. They use examples like green screening webcams to demonstrate when you may need to offload work to other threads using web workers.', 'anthropic'),
(178, 500, 'Syntax Turns 500! Milestones, Faves, and YOUR Questions!', 'Scott and Wes celebrate 500 episodes by looking back at milestones, favorite moments and episodes, and answering listener questions.', 'anthropic'),
(179, 499, 'Svelte creator Rich Harrison on Svelte\'s benefits over React', 'In this episode, Rich Harrison provides an intro to Svelte and discusses its developer experience benefits, templating language, immutability, compilation process, lack of virtual DOM, and more.', 'anthropic'),
(180, 498, 'Web Dev Job Types - Agency vs Startup vs Corporate', 'Scott and Wes discuss the pros and cons of different web development jobs like agencies, tech companies, startups and freelancing.', 'anthropic'),
(181, 497, 'New CSS proposals bring if/else, masonry, caret styling, nesting, env vars, and better media queries!', 'In this episode Scott and Wes discuss upcoming CSS proposals like at win/else, masonry layout, caret styling, nesting, env variables, and improvements to media queries.', 'anthropic'),
(182, 496, 'Shopify\'s Hydrogen allows SSR React ecommerce sites to deploy anywhere', 'Josh Larson from Shopify discusses their new Hydrogen framework for building custom headless ecommerce stores using React and Shopify. He covers topics like server side rendering, React Server Components, and deploying the same code to multiple JavaScript environments.', 'anthropic'),
(183, 495, 'Caching, PDFs, SvelteKit, and Stripe vs PayPal', 'In this potluck episode, Wes and Scott answer developer questions on topics like caching slow APIs, generating PDFs from HTML, whether to learn SvelteKit before it hits v1, and more.', 'anthropic'),
(184, 494, 'Do you really need to worry about supporting every browser?', 'Overview of major browser engines like Chromium, Gecko, WebKit and dive into lesser known mobile browsers to see if you need to support them.', 'anthropic'),
(185, 493, 'React Suspense and Next.js Perf with Lee Robinson', 'Lee Robinson from Vercel discusses React Suspense, selective hydration, Next.js, and performance techniques.', 'anthropic'),
(186, 492, 'Web Dev Wish List: Things We Wish Just Worked Better', 'Scott and Wes discuss frustrations with web development and wish for better defaults and APIs.', 'anthropic'),
(187, 491, 'Exciting New Fart Apps! Learn By Building Silly Stuff', 'Wes and Scott discuss ways to spark creativity and excitement in coding through fun side projects that serve no purpose.', 'anthropic'),
(188, 490, 'From Blog to SaaS Empire - The AwesomeMotive Story', 'Saeed Balkhi discusses growing his company AwesomeMotive from a WordPress tutorial blog into a suite of over 30 web services and software tools.', 'anthropic'),
(189, 489, 'Potluck! Old Node Projects, Package Versions, and More', 'Wes and Scott discuss resolving NPM errors when starting old projects, compatibility across Node versions, and specifying required versions in package.json.', 'anthropic'),
(190, 488, 'What is Bun? The Speedy New JS Runtime', 'This episode covers Bun, a new JavaScript runtime focused on performance and batteries included tools like a bundler and transpiler.', 'anthropic'),
(191, 487, 'Graph Databases Explained', 'Adam Cowley from Neo4j explains graph databases, how they work, use cases, and how to query data with Cypher. He discusses how Neo4j can be used in web development.', 'anthropic'),
(192, 486, 'Our Takes on Tabs vs Spaces, Semicolons, Naming Conventions, and More - Syntax #486', 'In this episode of Syntax, Wes and Scott discuss their coding styles and preferences in JavaScript and CSS.', 'anthropic'),
(193, 485, 'Playing Stumped - Tasty Web Dev Interview Questions', 'Wes and Scott play a game of Stumped, asking each other random interview questions and trying to explain the answers.', 'anthropic'),
(194, 484, 'From Mainframes to 70,000 Serverless Functions with Christy Perreault', 'Christy Perreault from Liberty Mutual discusses how they leverage serverless to support 5000 developers building customer-facing and internal apps. She covers Liberty Mutual\'s journey from on-prem to serverless, the costs savings and auto-scaling benefits, supporting developer preferences, and local development recommendations.', 'anthropic'),
(195, 483, 'Peer Dependencies, NAS Woes, Home Assistant, and Vite + Vitest Clarified', 'In this potluck episode, Wes and Scott discuss NAS networking, Home Assistant, peer dependencies in npm, and transpilation when using Vite and Vitest.', 'anthropic'),
(196, 482, 'Take Control of Values with Clamping & Interpolating Numbers', 'Scott explains numeric clamping and interpolation, demonstrating how these techniques can help control values and create animations. He highlights the d3-interpolate library for interpolating numbers, colors, dates, and more.', 'anthropic'),
(197, 481, 'Voice Coding to Avoid RSI with Talon and CursorList', 'Pokey Rule discusses coding by voice with Talon instead of keyboard due to RSI, creating grammars to map voice commands to actions, and demonstrates voice coding.', 'anthropic'),
(198, 480, 'How Conference Speaking Can Boost Your Career and Connections', 'Wes and Scott discuss their experiences with conference speaking over the past 10 years, including the benefits like gaining legitimacy, improving public speaking skills, making connections, and traveling.', 'anthropic'),
(199, 479, 'CSS Color Level 5 Will Change How You Work With Color in CSS', 'In this episode, Wes and Scott discuss upcoming CSS color functions that will allow developers to programmatically modify colors, including mixing colors, getting color contrasts, and altering color properties like hue, saturation, and lightness.', 'anthropic'),
(200, 478, 'Demystifying Developer Experience with Sean Wang aka Swyx', 'In this SX dinner club episode, Sean Wang aka Swyx discusses developer experience (DX) - what it is, why it matters, how tools like React and Svelte compare, and how DevRel roles are evolving.', 'anthropic'),
(201, 477, '7 Easy Communication Tips to Level Up Your Skills', 'Communication tips for email, meetings, code reviews, spanning topics like numbering questions, bolding important parts, using paragraphs, and recognizing when you\'re asking a lot.', 'anthropic'),
(202, 476, 'New Browser Page Transitions API for Smooth Web Animations', 'Discussion of a new browser API proposal for smooth page transitions on the web, allowing for animated transitions between pages similar to native mobile apps.', 'anthropic'),
(203, 475, 'Building Browser Extensions and Tools Like a Weather Extension and t.ly URL Shortener', 'Discussion with Tim Leland who has built several successful browser extensions like a weather extension using Dark Sky and a URL shortener called t.ly. He talks about how he builds and monetizes the extensions.', 'anthropic'),
(204, 474, 'The Look Ahead at Home Automation: Protocols, Software Hacks, and the Quest for Family Buy-in', 'An overview of home automation protocols, software options like Homebridge, how it leads to family buy-in, and the ways automation can improve upon analog problems.', 'anthropic'),
(205, 473, 'New viewport units to rescue us from the shifting elements of mobile browsers', 'Wes and Scott discuss new viewport units in CSS that help deal with things like the URL bar shifting on mobile browsers.', 'anthropic'),
(206, 472, 'Edge Functions and Deno with Eduardo Bouças of Netlify', 'Discussion with Eduardo Bocas from Netlify about edge functions, Deno, serverless, and more.', 'anthropic'),
(207, 471, 'Potluck - Databases, Languages, CSS, and Anime Villains', 'Wes and Scott answer listener questions on topics like hosting databases, learning new programming languages, fitness goals, CSS environment variables, and more.', 'anthropic'),
(208, 470, 'I can has() new CSS selectors?! ', 'Wes and Scott discuss new CSS selectors like has(), where() and is() that allow powerful new ways to select elements.', 'anthropic'),
(209, 469, 'Will no code take our jobs? A discussion on the no code movement', 'Connor Finlayson discusses the no code movement, whether it will replace developers, popular no code tools like Webflow and Airtable, resources for learning, and advice for beginners.', 'anthropic'),
(210, 468, 'Live Podcast with Debates and Audience Participation at Reactathon', 'Wes Bos and Scott Tolinski host a live podcast episode from Reactathon, featuring debates, old code, syntax errors, JS or NAS, and audience Q&A.', 'anthropic'),
(211, 467, 'Stopping Malicious Actors from Abusing Your Website', 'Wes Bos and Scott Tolinski discuss ways that malicious actors can abuse your web application, and different techniques to prevent abuse like rate limiting, shadow banning, tokens, CAPTCHA, and more.', 'anthropic'),
(212, 466, 'From Developer to Farmer: Escaping Burnout Through Gardening', 'Wes and Scott talk with Anselm Hannemann about how he transitioned from web developer to gardener to avoid burnout, the joys of growing your own food, and tips for avoiding burnout in the tech industry.', 'anthropic'),
(213, 465, 'Git Workflow in VS Code', 'Wes and Scott discuss using Git version control in VS Code, including built-in features and extensions that enhance the developer workflow.', 'anthropic'),
(214, 464, 'A deep dive into cache control headers', 'Discussion on how cache control headers work and how they can be used to improve website performance.', 'anthropic'),
(215, 463, 'Fullstack Framework for Scaling from Side Project to Startup', 'Tom Preston-Werner, founder of GitHub, discusses his work on RedwoodJS, an opinionated fullstack JS framework to help developers build and scale web apps faster.', 'anthropic'),
(216, 462, 'TypeScript Tooling Explained: Compilers, Build Tools, IDEs, and More', 'Overview of the various TypeScript tooling options including type checkers, compilers, build tools, IDEs, configs, and recommendations for server-side usage.', 'anthropic'),
(217, 461, 'Tour of Scott\'s Home Office: The LevelUp Lodge', 'In this episode, Scott gives a tour of his home office setup called the LevelUp Lodge, going over all the gear, lighting, audio equipment, tech and other elements that make it an ideal workspace.', 'anthropic'),
(218, 460, 'Simplify Monorepos and Builds with Turborepo', 'Jared Palmer discusses Turborepo, monorepos, efficient workflows, and getting acquired by Vercel.', 'anthropic'),
(219, 459, 'Next.js Benefits, Game Logic, NoSQL Databases, and OSS Protestware', 'Wes and Scott answer listener questions about Next.js, database options, build tools, protestware packages, and game development.', 'anthropic'),
(220, 458, 'Making JavaScript Just WorkTM Across Environments', 'Wes and Scott discuss a new initiative by Cloudflare and others to improve web interoperability across various JavaScript runtime environments like browsers, Node.js and edge functions.', 'anthropic'),
(221, 457, 'Mastering Monorepos with NX', 'Victor Savkin discusses NX, a development environment and build system designed for monorepos. He covers the core orchestration features, optional plugins, caching, distribution, migrations, and more.', 'anthropic'),
(222, 456, '10 Nifty Browser APIs for Fun Side Projects', 'Discussion of 10 interesting browser APIs for accessing user data and hardware like webcam, geolocation, animations, speech, and more.', 'anthropic'),
(223, 455, 'Narrowing Down Problems in TypeScript', 'An episode discussing TypeScript fundamentals like type narrowing, discriminated unions, and strategies for type guards.', 'anthropic'),
(224, 454, 'WTF is Edge Computing', 'Discussion on what edge computing is, how it works, use cases, upsides and downsides.', 'anthropic'),
(225, 453, 'The REAL Reasons Developers Still Use Axios Over Fetch', 'Wes and Scott discuss why developers still use the Axios library instead of the native fetch API for network requests in JavaScript. They go over various features like interceptors, progress events, and adapters that make Axios powerful.', 'anthropic'),
(226, 452, 'The Great JavaScript Stumpening', 'Wes and Scott quiz each other on random JavaScript interview questions and discuss techniques and concepts like weak maps, promises, and variable swapping.', 'anthropic'),
(227, 451, 'Coupon Code Chaos: Building Custom Coupon Engines', 'Scott and Wes discuss strategies and challenges around building custom coupon logic and engines for ecommerce sites and course platforms. They share tips on implementing constraints, conditional rules, tracking, expiration, and more.', 'anthropic'),
(228, 450, 'Teamwork, Imposter Syndrome, Icons, Service Workers, Next.js, Bad Clients - Syntax #450', 'Scott and Wes answer listener questions about working on a development team, dealing with imposter syndrome, using icon libraries, fixing broken service workers, building fullstack apps in Next.js, when to move a project to production, and dealing with bad clients.', 'anthropic'),
(229, 449, 'Spinning cubes and physics in the browser with Svelte Cubed', 'Scott discusses generating 3D visualizations, animations, and physics simulations in the browser using Svelte Cubed and Three.js.', 'anthropic'),
(230, 448, 'Cruising into the future in a new EV', 'In this episode of Syntax, Scott talks about his new Hyundai Ioniq 5 electric vehicle and its features. Wes and Scott also answer listener questions about adding interactivity to a Drupal site and whether presentational React components can be non-leaf components.', 'anthropic'),
(231, 447, '18 Hacks for Being Consistent at Coding, Content Creation, and Life Goals', 'Wes and Scott share tips for maintaining consistency with producing content, coding projects, exercising, and other life goals. They discuss the importance of committing to a reasonable schedule, planning time to work on goals, being accountable to others, breaking big tasks down, and measuring progress.', 'anthropic'),
(232, 446, 'Wes and Scott on Generating and Structuring Content', 'In this Making Content × What is our Process? episode, Wes and Scott share their strategies for developing ideas and structuring content across mediums like YouTube, conferences, courses, blogs, and podcasts.', 'anthropic'),
(233, 445, 'Types in JS? Breaking down new proposal to add TypeScript syntax to JavaScript', 'Discussion on new proposal to add optional TypeScript-style types to JavaScript for improved developer experience.', 'anthropic'),
(234, 444, 'Syntax Highlight: Reviewing Developer Portfolios', 'Wes and Scott review developer portfolio sites, providing feedback on design, user experience, and accessibility.', 'anthropic'),
(235, 443, 'What\'s Up With Vitest? A Blazing Fast Modern Test Runner', 'Scott and Wes discuss Vitest, a new fast and modern JavaScript test runner that aims to replace Jest. They cover Vitest\'s features like built-in TypeScript support, compatibility with Jest, mocking, filtering, snapshots, code coverage, DOM mocking, in-file testing, and easy setup.', 'anthropic'),
(236, 442, 'Our Updated Course Platform Tech Stacks Explained and Compared', 'Wes Boss and Scott Tolinski explain and compare the tech stacks they use for their online course platforms, which have changed over the years but accomplish similar goals in different ways.', 'anthropic'),
(237, 441, 'Untangling Render, Let\'s Encrypt, and Cloudflare', 'Discussion on moving hosting to Render and using Cloudflare\'s proxy service with auto-generated SSL certificates.', 'anthropic'),
(238, 440, 'Handling Auth and Git Conflicts - Potluck', 'Scott and Wes answer listener questions submitted on a variety of web development topics including authentication, motivation, tools, and favorite products.', 'anthropic'),
(239, 439, 'SSR vs Jamstack vs Serverless? We Break Down the Letters', 'Explains the differences between server side rendering, Jamstack, and serverless web development approaches.', 'anthropic'),
(240, 438, 'The Tastiest Parts of the State of JS 2021', 'Wes and Scott discuss the results of the 2021 State of JS survey covering topics like languages, testing, pain points and more.', 'anthropic'),
(241, 437, 'Wes Bos shares sticker mogul secrets after massive 165k unit drop', 'Wes talks about the logistics of his recent giant sticker drop, including printing, packing, selling, shipping, costs and more.', 'anthropic'),
(242, 436, 'Hot Takes on the State of JS in 2022', 'Scott and Wes review highlights from the latest State of JS survey results, covering developer demographics, language features, frameworks, build tools and more.', 'anthropic'),
(243, 435, 'JavaScript & CSS: This vs That', 'Wes and Scott discuss and compare JavaScript and CSS features like array methods, looping, object properties, positioning, and more.', 'anthropic'),
(244, 434, 'Ben Vinegar on Distributed Tracing, Career Paths, Open Source and Sentry', 'Ben Vinegar joins to discuss his work in web development and open source, distributed tracing, Sentry\'s evolution, remote work impacts and more.', 'anthropic'),
(245, 433, 'New JavaScript Features in 2022', 'Discussion of new and proposed JavaScript features in 2022 including the Fetch API in Node.js, pipeline operator, JSON modules, BigInt math methods and more.', 'anthropic'),
(246, 432, 'Webpack, HTML, TypeScript, 2FA, JS Alternatives, Remix vs SvelteKit, Tutorials, Frameworks, New Technologies', 'In this potluck episode, Scott and Wes answer questions on Webpack, HTML tags, TypeScript, 2FA recovery codes, JavaScript alternatives, React frameworks like Remix and SvelteKit, getting unstuck from tutorial purgatory, whether frameworks abstract away too much complexity, and strategies for keeping up with new web technologies.', 'anthropic'),
(247, 431, 'Spelunking OSS Repos for Fun and Profit', 'Scott and Wes discuss how to stay up-to-date on changes and new features in open source projects you use by looking at RFCs, issues, pull requests, and following project contributors on Twitter.', 'anthropic'),
(248, 430, 'Creator of Wordle - Josh Wardle | Syntax Podcast #430', 'Josh Wardle, creator of Wordle, joins to discuss building the insanely viral web game using vanilla JavaScript and web components. He shares the origins, growth timeline, technology decisions, and sale to The New York Times.', 'anthropic'),
(249, 429, 'JavaScript Servers Smackdown', 'Discussion of pros and cons of different JavaScript server options like traditional hosting, serverless functions and Cloudflare Workers.', 'anthropic'),
(250, 428, 'Syntax Highlight - Reviewing your portfolio sites', 'Scott and Wes review listener submitted portfolio sites, talking through design, code quality, accessibility, and more. They also discuss trying too hard to use the latest tech trends.', 'anthropic'),
(251, 427, 'Teamwork Tips for Web Developers', 'Tips for working effectively in teams, handling conflict, listening, and celebrating wins together.', 'anthropic'),
(252, 426, 'Monorepos! Workspaces, pnpm, Turborepo + more!', 'Wes and Scott discuss monorepos - managing multiple packages and projects within a single Git repository. They cover benefits like sharing code, tools like Turborepo, NX, Lerna and more.', 'anthropic'),
(253, 425, 'Updating Project Dependencies: Patches, Minors, Majors, and Breaking Changes', 'Wes Bos and Scott Tolinski discuss strategies and best practices for updating dependencies and managing breaking changes in a Node.js project.', 'anthropic'),
(254, 424, 'Level up your skills in 2022', 'Scott and Wes give coding, soft skills, and random skill focuses for beginner, intermediate, and advanced developers for 2022.', 'anthropic'),
(255, 423, '10 Web Dev Hacks We\'re Totally Fine With', 'Wes and Scott discuss common web development techniques that seem hacky but are actually valid ways to solve problems.', 'anthropic'),
(256, 422, 'Potluck! Protecting Images, Learning TypeScript, Auth, Time Zones, Prettier, Monorepos, Retool', 'In this potluck episode, Scott and Wes answer questions about protecting images, learning TypeScript, staying focused, backend languages, media queries in Svelte, implementing auth and payments, tools for debugging, working across time zones, introducing Prettier, monorepos, and using Retool to build internal tools.', 'anthropic'),
(257, 421, 'Remix - A Tasty New Framework for Modern Web Development', 'Scott and Wes discuss Remix, the new web development framework created by the makers of React Router. They talk about its benefits like server side rendering, simplified data fetching, and excellent developer experience.', 'anthropic'),
(258, 420, 'Web development predictions for 2022', 'Wes Bos and Scott Tolinski discuss their predictions for web development trends in 2022, covering topics like Svelte, Tailwind CSS, Rust, GraphQL, TypeScript, payment platforms and more.', 'anthropic'),
(259, 419, 'Level up your JS game with 12 handy one-liners', 'Wes and Scott discuss handy JavaScript one-liners for common use cases like generating IDs, pausing execution, speeding up media playback, and more.', 'anthropic'),
(260, 418, 'Syntax 2021: 104 Episodes, Svelte Rewrites, TypeScript Course, and More', 'Scott and Wes recap the highlights from 2021 including moving houses, course updates, and tech experiments.', 'anthropic'),
(261, 417, 'Holiday Snackluck Q&A', 'Wes and Scott do a holiday themed snackluck episode where they answer shorter questions sent in by listeners.', 'anthropic'),
(262, 416, 'Coding in the Cloud, Blockchains, NFTs, and Living in a Van', 'In this episode Wes and Scott are joined by Pauline and Jeff from Gitpod to discuss coding in the cloud, blockchain, NFTs, remote work and more.', 'anthropic'),
(263, 415, 'Gatsby 4: Faster Builds and Parity with Next.js', 'In this episode Scott and Wes discuss the new features in Gatsby 4 including deferred static generation, server side rendering and parallel queries for performance.', 'anthropic'),
(264, 414, 'Chrome UX, REST vs GraphQL, ADHD, Redirects, and More!', 'Scott and Wes answer questions on Chrome UX metrics, REST vs GraphQL, using enums in TypeScript, WebAssembly, ADHD as a developer, redirect status codes, and more.', 'anthropic'),
(265, 413, 'Transitioning from React to Svelte', 'Covers building a Svelte app including local state, reactivity, conditional rendering, input binding, and child components.', 'anthropic'),
(266, 412, 'JavaScript Running The World - Industral Automation with Ant Rogen', 'Ant Rogen joins to discuss his experience with industrial automation and using JavaScript and web technology to interface with PLCs, sensors, factories and more.', 'anthropic'),
(267, 411, 'Mastering Meta Tags for Better Websites', 'Wes and Scott discuss various meta tags used in web development including character encoding, viewport, SEO, social sharing, and mobile customization.', 'anthropic'),
(268, 410, 'Everything in Web Development is SO Much Better Now', 'Wes and Scott talk about how much web development tools, languages and infrastructure have improved over the past 5-10 years, making developers\' lives easier and code simpler and more powerful.', 'anthropic'),
(269, 409, 'GitHub Copilot - Your New AI Pair Programmer', 'Wes Bos and Scott Tolinski discuss their experiences using GitHub Copilot, an AI pair programmer that suggests code as you type.', 'anthropic'),
(270, 408, 'Troubleshooting Tips for Web Developers', 'Wes and Scott discuss techniques and tips for troubleshooting code and software systems.', 'anthropic'),
(271, 407, 'The 16-inch M1 Max MacBook Pro Review', 'Wes and Scott discuss their experiences switching to the new 16-inch M1 Max MacBook Pro for development and creative work', 'anthropic'),
(272, 406, 'GitHub Copilot, Eye Care, Stress Management & More!', 'Potluck episode covering GitHub Copilot, glasses, stress, company sizes, design, CMS, security and more.', 'anthropic'),
(273, 405, 'Next.js 12 Brings Faster Builds, Middleware, and More Sweet New Features', 'Scott and Wes discuss the new features in Next.js 12 including a new Rust compiler, middleware support, React 18 support, AVIF image support, bot detection for ISR, ES modules, and more.', 'anthropic'),
(274, 404, 'Running Node in the Browser with Web Containers', 'Tomac joins to discuss StackBlitz, an online IDE powered by web containers and running environments like Node directly in the browser via WebAssembly.', 'anthropic'),
(275, 403, 'What\'s the Deal with Astro? A New Framework for Fast Static Sites', 'Wes and Scott discuss Astro, a new framework for building fast static websites using components and minimal client-side JavaScript.', 'anthropic'),
(276, 402, 'Master CSS interview questions by getting Stumped', 'Scott and Wes play a game of Stumped focused on CSS interview questions to quiz each other\'s knowledge.', 'anthropic'),
(277, 401, 'Faster NPM with PNPM Monorepos', 'Scott explains how to set up a monorepo using PNPM workspaces, with benefits like faster installs and easier sharing of code between projects.', 'anthropic'),
(278, 400, 'Spooky Web Dev Stories - Werewolf Edition', 'Scott and Wes share horror stories submitted by developers about production bugs, data loss, performance issues, and more.', 'anthropic'),
(279, 399, 'Spooky Dev Horror Stories - The Hasty Treat', 'Scott and Wes read funny and cringeworthy stories submitted by developers about mistakes they\'ve made that caused bugs, crashes, and other issues.', 'anthropic'),
(280, 398, 'Potluck - Coding for Kids × MongoDB Hosting × CSS Values × Package Security × and More!', 'Scott and Wes answer questions on policies, teaching, hubs, GraphQL, code, CSS, MongoDB, services, security, upgrades, sites, values, backup and images in a fun potluck show.', 'anthropic'),
(281, 397, 'Handy JavaScript Utilities for Every Dev', 'Scott and Wes discuss JUST, a small JavaScript utility function library, its use cases and benefits over larger libraries like Lodash.', 'anthropic'),
(282, 396, 'The Potluck Podcast on Podcasting', 'Covers how Wes and Scott run every aspect of the Syntax podcast from recording, planning, editing, promoting, sponsors, and more.', 'anthropic'),
(283, 395, 'The Tastiest New CSS Color Features', 'Discussion of current and upcoming CSS color features like contrast functions, accent colors, color mixing, new color spaces and alpha transparency options.', 'anthropic'),
(284, 394, 'Potluck: Portfolios × Svelte Testing × MDX × WordPress Hosting', 'Scott and Wes answer listener questions on a variety of web development topics including building portfolio sites, Svelte testing, MDX, WordPress hosting strategies, and more.', 'anthropic'),
(285, 393, 'Hot take: Modern JS is basically recreating PHP', 'Wes and Scott discuss the merits of PHP and how modern JavaScript frameworks are reinventing many of its features like mixing logic and templates, hot reloading, and more.', 'anthropic'),
(286, 392, 'Web Dev Podcast Hosts Compete in Front End Feud', 'Web development podcast hosts compete in a game show testing their knowledge of frontend development.', 'anthropic'),
(287, 391, 'New Hot Tech - Lucylang, MD Specs, Fig, Warp, Raycast, Obsidian, and Descript', 'Scott and Wes discuss new and popular developer tools and apps like Lucylang state machines, MD Specs for Svelte, Fig terminal autocomplete, Warp terminal in Rust, Raycast app launcher, Obsidian note taking app, and Descript audio/video editor.', 'anthropic'),
(288, 390, 'From React to SvelteKit', 'Scott rewrote his Level Up Tutorials site from React to SvelteKit and discusses his experience with the transition.', 'anthropic'),
(289, 389, 'Webhooks Demystified - How They Work and How to Test Them', 'Wes and Scott explain what webhooks are and how to use them for communication between servers and services.', 'anthropic'),
(290, 388, 'New in JavaScript - ES2022', 'Overview of new JavaScript language features added in ECMAScript 2022 including top level await, the array .at() method, private fields and methods in classes, regex indices and more.', 'anthropic'),
(291, 387, 'Wes Bos FINALLY Gets Fast Internet at his Cottage Thanks to SpaceX\'s Starlink Satellites', 'Wes Bos describes his experience getting Starlink satellite internet installed at his rural cottage, reviewing the speeds, latency, equipment, and networking setup.', 'anthropic'),
(292, 386, 'Farewell Syntax Studio! Sass, No JS, Solid, Bartering Skills, Linux Laptops, GraphQL Svelte, Prisma MongoDB, Webpack Future', 'In this potluck episode, Scott and Wes bid farewell to the Syntax studio while discussing Sass, Houdini, building without JS, decentralized data with Solid, bartering skills, DRM, Linux laptops, using React and GraphQL with Svelte, MongoDB with Prisma, and predictions for Webpack\'s future.', 'anthropic'),
(293, 687, 'Hosting NextJS × Spicy Sidedishes × Modern Forms × Abandoning TypeScript', 'The guys answer your questions about hosting options for Next.js apps, share some spicy takes about Firefox and CSS, lament the lack of good form options for modern web apps, and clarify some confusion around SvelteKit and Turborepo abandoning TypeScript.', 'anthropic'),
(294, 686, 'Syntax Website Secret Sauce', 'Wes and Scott discuss the technology stack and services powering the new Syntax.fm website.', 'anthropic'),
(295, 684, 'Spooky Coding Horror Stories 2023', 'Web development horror stories about bugs, mistakes, and disasters', 'anthropic'),
(296, 683, 'Cringe-Worthy Tales of Deleted Databases, Exposed Data, and More', 'Developers share horror stories of catastrophic mistakes like deleting databases, breaking site functionality, exposing data, and more.', 'anthropic'),
(297, 679, 'Creator of Swift unveils Mojo - a new Python language for AI', 'Chris Lattner, creator of Swift and senior director at Google TensorFlow, discusses Mojo - a new Python-inspired language for AI and ML. He covers the history of GPUs, how machine learning models work, the fragmented AI dev landscape, and goals when designing a new programming language.', 'anthropic'),
(298, 682, 'Building Design Systems and Component Libraries with Brad Frost', 'Brad Frost discusses design systems, component libraries, design tokens, developer experience, and using web components to build scalable front-end architecture.', 'anthropic'),
(299, 681, 'The Latest Advancements in AI Tools for Web Developers', 'Wes and Scott discuss new advancements in AI tools and services for developers, including vzero.dev from Vercel to generate React UI, Anthropic\'s Claude chatbot, and new AI services from Cloudflare Workers.', 'anthropic'),
(300, 680, 'The Honorable Deaths of Web Dev Libraries', 'In this episode Scott and Wes discuss various libraries and tools that have been replaced by standardized browser APIs and JavaScript features over the years, like jQuery, Express, Underscore, 960 Grid System, Sass, Socket.IO, Left Pad, etc.', 'anthropic'),
(301, 678, 'Devs react to most wanted CSS features in 2023', 'Discussion of the 2023 State of CSS survey results covering frameworks, tools, features, pain points and more.', 'anthropic'),
(302, 677, 'Pimp Your Crib: Web Dev Home Office Hacks', 'Tips for optimizing your home office space for productivity and comfort as a developer working from home.', 'anthropic'),
(303, 385, 'Type Strict: Explaining TypeScript\'s Strict Mode Settings', 'Wes and Scott discuss the different strict mode settings in TypeScript and why they can prevent bugs.', 'anthropic'),
(304, 384, 'STUMP\'D - JavaScript Coding Interview Questions', 'Scott and Wes go through a series of JavaScript coding interview questions, testing each other\'s knowledge on topics like first class functions, preventing default behavior, weak maps and more.', 'anthropic'),
(305, 383, 'How to Spot Toxic Clients Before Agreeing to Work with Them', 'Wes and Scott discuss signs of toxic clients for freelancers like unclear project vision, scope creep, poor communication, rudeness, and bragging.', 'anthropic'),
(306, 382, '15 Must-Know Tips for New Developers', 'Scott and Wes share tips and advice for new developers just starting out, covering topics like learning fundamentals, debugging, soft skills, struggles all developers face, and more.', 'anthropic'),
(307, 381, 'Hating on CSS is dumb - here\'s how to fix common CSS problems', 'Wes and Scott discuss common complaints about CSS and solutions like using Flexbox and Grid, avoiding IDs and !important, debugging in dev tools, and planning CSS structure.', 'anthropic'),
(308, 380, 'Moist Code: Dealing with Tricky Freelance Projects, Funny Questions, Font Tools, and More!', 'Wes and Scott answer listener questions on React components, freelancing, ethics, moist code, debugging fonts, and more during a fun potluck episode.', 'anthropic'),
(309, 379, 'The Weird and Wonderful Link Tag', 'Discussion on the various uses of the link HTML tag beyond just linking.', 'anthropic'),
(310, 378, 'How to Build Your First Website From Scratch - For Total Beginners', 'Emailer asks Wes and Scott to explain the basics of building a website from scratch using HTML, CSS and JavaScript for beginners with no experience.', 'anthropic'),
(311, 377, 'TypeScript\'s Secret Utility Types to Write Better Code', 'Scott and Wes discuss TypeScript utility types, explaining what they are and why you might use them.', 'anthropic'),
(312, 376, 'Potluck - WordPress, Backends, Job Prep, and Cooling Fans', 'Wes and Scott answer developer questions about WordPress vs advanced tech for clients, backend hosting, Drupal, CSS strategies, preparing for job interviews, home cooling fan setups, and podcast recommendations.', 'anthropic'),
(313, 375, 'Hot New Web Dev Treats - GitHub Copilot, Next.js 11, Astro, and More!', 'Wes and Scott discuss the latest and greatest in web development including GitHub Copilot, Next.js 11, Astro, Notion API, Petite Vue, Stackblitz, Solid JS 1.0, Stately, and Web3.', 'anthropic'),
(314, 374, 'ShopTalk and Syntax crossover: Podcasting, web dev stacks', 'Wes and Scott from Syntax podcast join Chris and Dave from ShopTalk podcast for a crossover episode. They discuss their podcast goals, current web development stacks they use and like such as Next.js and SvelteKit, how WordPress compares, and more.', 'anthropic'),
(315, 373, 'The Surprisingly Exciting World of Favicons', 'This episode covers different techniques and best practices for favicons, including file formats, sizes, optimization, animation, dark mode support, and more.', 'anthropic'),
(316, 372, 'Potluck: Svelte, Permissions, Rescript, and More', 'In today\'s potluck episode, Scott and Wes answer listener questions on topics like Svelte vs React, severing project ties, permissions-based APIs, Rescript, and more.', 'anthropic'),
(317, 371, 'Level up your CSS game with the almighty Stylelint', 'Scott and Wes discuss Stylelint, a powerful linting tool for CSS that helps enforce code quality and consistency.', 'anthropic'),
(318, 370, 'React 18\'s Suspense, SSR, and More', 'React 18 is introducing automatic batching, suspense, strict mode, useTransition hook, SSR streaming, and more. There are great explainers on the React docs.', 'anthropic'),
(319, 369, 'Blazingly Fast Builds with Vite and Parcel 2', 'Wes and Scott discuss the next generation of build tools like Vite and Parcel 2 that use modern techniques for incredibly fast reloads and bundle times.', 'anthropic'),
(320, 368, 'Portfolio Panopticon - Reviewing Your Websites and Resumes', 'Scott and Wes review listener submitted websites and portfolios, providing feedback on design, code, accessibility, and more. They also discuss Scott\'s upcoming move, funny kid stories, and share picks for lever wire connectors, podcasts, and web dev courses.', 'anthropic'),
(321, 367, 'Hasty Treat - JavaScript Event Buzzwords', 'Discussion of JavaScript timing buzzwords like synchronous, asynchronous, blocking, callbacks, and lazy loading.', 'anthropic'),
(322, 366, 'Mastering the Elements Tab in Dev Tools', 'Scott and Wes dive deep into the elements tab in dev tools, explaining all the tips, tricks and lesser-known features for inspecting HTML and CSS. They cover manipulating the DOM, debugging styles and layouts, previewing animations, compatibility checking, and customizing the dev tools.', 'anthropic'),
(323, 365, '7 Wild JavaScript Proposals - Async Do, JSON Modules, Immutable Arrays, Temporal, and More!', 'Scott and Wes discuss 7 interesting JavaScript language proposals that may be added in the future, covering new ways to work with modules, dates, async code, arrays, destructuring, and pattern matching.', 'anthropic'),
(324, 364, 'Potluck on Web Components, Coding Setups, Python, Docker, and More', 'Scott and Wes answer listener questions covering web components, minimum coding setup, Python frameworks, Docker, code prediction, storing audio files, and more.', 'anthropic'),
(325, 363, 'Hackers Can Steal Your Cookies! Learn How CSRF Works and How to Stop It', 'Wes and Scott explain cross-site request forgery (CSRF) and different ways to prevent it like cookies, tokens, and headers.', 'anthropic'),
(326, 362, 'Mastering Container Queries and More Magic CSS with Miriam Suzanne', 'Discussion on how container queries will allow styling based on available space by measuring elements instead of viewport. Other topics include cascade layers to control specificity order, scope for addressing naming conflicts, and Miriam\'s work with the CSS Working Group.', 'anthropic'),
(327, 361, 'What is SvelteKit? A New Framework for Building Web Apps', 'SvelteKit provides a fast, flexible, and powerful way to build web apps with Svelte. It works anywhere, has multiple rendering options, includes useful features out of the box, and focuses on HTML/JS. Worth trying for your next Svelte project.', 'anthropic'),
(328, 360, 'Audience Q&A on React, TypeScript, CMS Tools, Caching, Scaffolding, Sleep Habits, and Blender Bottles', 'Wes and Scott answer audience questions about React, TypeScript, problem solving, first jobs, Svelte, sleep habits, CMS tools, caching, scaffolding generators, spice organization, and stainless steel blender bottles.', 'anthropic'),
(329, 359, 'How I Used JavaScript to Book My COVID Vaccine Appointment', 'Wes talks about how he built a Telegram bot using Node.js that constantly polled COVID vaccine availability APIs and notified him when appointments became available so he could quickly book one.', 'anthropic'),
(330, 358, 'Supercharge Your React Apps with TypeScript', 'Discussion on setting up React with TypeScript, typing components, props, state, hooks, and other common patterns when using the two technologies together.', 'anthropic'),
(331, 357, 'How to Make Money as a Developer Creator', 'Wes Bos and Scott Tolinski discuss the various ways developers can make money as creators through selling products, services, training, sponsorships, donations and more.', 'anthropic'),
(332, 356, 'Hot takes on tabs, themes, exports, and foobarbaz!', 'Wes Bos and Scott Tolinski discuss controversial developer opinions including naming conventions, code editors, themes, exports, and more.', 'anthropic'),
(333, 355, 'Hauling JavaScript\'s Native Drag and Drop API Over the Finish Line', 'Wes and Scott discuss using the native drag and drop API in JavaScript to enable dragging elements between web apps and customizing the drag experience.', 'anthropic'),
(334, 354, 'The Surprisingly Exciting World of HTML Elements', 'Scott and Wes have a fun discussion about HTML tags including semantic HTML, accessibility, SEO, default styling, and lesser known tags. They also talk about what tags they wish existed natively like textarea autosize and animated accordions.', 'anthropic'),
(335, 353, 'Stylin\' the Unstylables: Customizing Stubborn HTML Elements', 'Discussion of difficulties styling default HTML elements like inputs and media players, techniques like overlapping DOM elements to customize, and new initiatives like Open UI to standardize native UI components.', 'anthropic'),
(336, 352, 'Freelancing advice, career moves, React migration tips, and more in this web dev Q&A bonanza', 'Wes and Scott answer listener questions on freelancing, component design, debouncing vs throttling, career moves, integrating React into legacy systems, and more.', 'anthropic'),
(337, 351, 'Managing Technical Debt', 'Scott and Wes discuss what technical debt is, why it happens, and strategies to avoid it or work around it.', 'anthropic'),
(338, 350, 'Browsers, freelancing, and fighting piracy! Wisdom from the Syntax potluck.', 'Wes and Scott answer audience questions about web development topics like WordPress, browser testing, course building, and more.', 'anthropic'),
(339, 349, 'Hot new web frameworks - Astro, Vitkit, SvelteKit and Remix', 'Discussion of 4 new frameworks - Astro, Vitkit, SvelteKit and Remix. All are focused on server-side rendering and simplicity.', 'anthropic'),
(340, 348, 'Deeping our TypeScript fundamentals', 'Getting deeper into TypeScript fundamentals like any vs unknown, generics, inference, definitions, and assertions.', 'anthropic'),
(341, 347, 'All About Git Rebase - A Podcast Deep Dive', 'Discussion on Git rebase - what it is, when and why to use it, and how it can help with workflows, tidying commits and resolving merge conflicts.', 'anthropic'),
(342, 346, 'Selling and Shipping T-Shirts with TypeScript', 'Wes goes through his journey of designing, selling, and shipping his own t-shirts using various technologies to optimize the process.', 'anthropic'),
(343, 345, 'Container Queries Incoming!?', 'Discussion of the new CSS container queries feature recently added to Chrome Canary. Details on syntax, usage, why needed, resize observer issues, contain property, inline/block sizes, logical properties, best practices, and trying it out today.', 'anthropic'),
(344, 344, 'Mastering Browser Dev Tools Tabs', 'Scott and Wes bos explain the dev tools tabs in Chrome and Firefox, detailing what each one does and providing tips and tricks for using them effectively.', 'anthropic'),
(345, 343, 'New CSS nesting feature draft allows nesting like Sass', 'Wes Bos and Scott Tolinski discuss a new CSS draft feature for CSS nesting. They explain the benefits, proper usage, and syntax of CSS nesting. They also discuss how it can be used with media queries and ensure backwards compatibility.', 'anthropic'),
(346, 342, 'Potluck of web dev questions', 'The hosts answer listener questions about various web development topics including APIs, video hosting, personal projects, imposter syndrome, and monorepos.', 'anthropic'),
(347, 341, 'Must-Have VSCode Extensions and Tips for Faster Web Dev Workflows', 'Scott and Wes discuss their favorite VSCode extensions, tips and workflows including Easy Snippet, Error Lens, File Utils, GitLens, Better Comments, Emmet and more.', 'anthropic'),
(348, 340, 'Automating certificates, proxies and more with Caddy web server', 'Matt Holt discusses creating the Caddy web server to easily handle TLS certificates, proxies, load balancing and more. He talks about the flaws with existing web servers and how Go enabled building a better solution.', 'anthropic'),
(349, 339, 'What is the n+1 database query problem and how can we solve it?', 'Wes and Scott discuss the n+1 database query problem, explaining what it is and solutions like batching IDs, DataLoader, and Prisma.', 'anthropic'),
(350, 338, 'Syntax Highlight - Developer Portfolio Critiques', 'Scott and Wes provide portfolio feedback for developers looking for jobs. They review designs, code, content and accessibility. They also discuss explosive gases, VR mini golf, and guess the location games.', 'anthropic'),
(351, 337, 'Effortless Custom GraphQL Code Generation', 'Scott and Wes discuss GraphQL code generation tools like GraphQL Code Generator and Pericles that can generate typed code, React hooks, forms, and more from GraphQL schemas.', 'anthropic'),
(352, 336, 'DIY Authentication: Sessions, JWTs, Cookies, CORS, CSRF', 'Scott and Wes discuss implementing authentication from scratch using sessions, JWT, cookies, CORS, CSRF and related concepts.', 'anthropic'),
(353, 335, 'The Ins and Outs of Environment Variables', 'Scott and Wes have an in-depth discussion about managing environment variables for web development projects.', 'anthropic'),
(354, 334, 'Potluck of web dev questions - VSCode, hosting, React, GraphQL, testing, templates and more!', 'Wes and Scott answer audience questions on a variety of web development topics including developer tools, hosting, frameworks, testing, best practices and more.', 'anthropic'),
(355, 333, 'Ask Wes and Scott Anything', 'Wes and Scott answer questions submitted by listeners about their work, backgrounds, tools, and opinions on topics like office culture, recruiting, JavaScript frameworks, and the Clubhouse app.', 'anthropic'),
(356, 332, 'Web dev gear extravaganza - desk setups, keyboards, cameras and more!', 'In this podcast episode, web developers Wes Bos and Scott Tolinski discuss their desk setups and gear they use for coding, video editing and podcast recording.', 'anthropic'),
(357, 331, 'The Top Skills for Landing a Web Dev Job in 2021', 'Scott and Wes discuss skills developers should focus on in 2021 to be hireable, covering code fundamentals, real-world libraries and frameworks, and soft skills.', 'anthropic'),
(358, 330, 'React Query Creator Deep Dives Fetching, Caching, APIs + More', 'Tanner Linsley discusses React Query - a data fetching and caching tool. Covers React Query features, building dev tools, using context, server components and more.', 'anthropic'),
(359, 329, 'The Future of Testing with Cypress', 'Scott and Wes discuss Cypress, an end-to-end testing framework. They cover its ability to test across browsers, debug issues in a real browser, record test runs, mock data, and integrate with plugins.', 'anthropic'),
(360, 328, 'Potluck: Rollbacks, GitHub, Learning, Deno, and more', 'Scott and Wes answer listener questions about JavaScript, web development, React, career advice, and more in a potluck episode.', 'anthropic'),
(361, 327, 'TypeScript Compilers vs. Bundlers - Do you still need Webpack?', 'Scott and Wes discuss the difference between TypeScript compilers like TSC and SWC versus bundlers like Webpack, and whether you still need bundlers when using TypeScript.', 'anthropic'),
(362, 326, 'Reviewing your resumes and online presence', 'Wes and Scott review resumes, websites, and online presences from developers and designers who submitted them.', 'anthropic'),
(363, 325, 'Master Browser Keyboard Events and Shortcuts', 'Scott and Wes provide an in-depth look at keyboard events in the browser, explaining the different events that fire, metadata available, and best practices for using keyboard shortcuts in web apps.', 'anthropic'),
(364, 324, 'TypeScript Fundamentals', 'An overview of TypeScript fundamentals including types, benefits, compilation and more.', 'anthropic'),
(365, 323, 'Rebuilding the LevelUpTutorials site with a modern JavaScript stack', 'Scott discusses moving the LevelUpTutorials site to a new tech stack using Node, React, Snowpack, Render, and more.', 'anthropic'),
(366, 322, 'All About Deno!', 'Scott and Wes introduce Deno, a new runtime for JavaScript and TypeScript. They compare it to Node.js and discuss features like built-in TypeScript support, ESM modules, sandboxing, running scripts from URLs, and more.', 'anthropic'),
(367, 321, 'New Image Format AVIF is Unreal!', 'Wes and Scott discuss the new AVIF image format - how it works, why it\'s better than JPEG and WebP, browser support, and how to implement it.', 'anthropic'),
(368, 320, 'From Bartender to $100k+ JS Dev Job in 3 Years?!?', 'Scott and Wes answer listener questions on topics like transitioning to a high paying development job, building UI libraries, overcoming imposter syndrome, and more.', 'anthropic'),
(369, 319, 'Creating rock solid font and typography systems with CSS', 'Scott and Wes discuss approaches for creating consistent, maintainable CSS font size and typography systems using tools like type-scale.com and CSS variables.', 'anthropic'),
(370, 318, 'React Wishlist and Hot Takes at Reactathon', 'Live podcast episode recorded at Reactathon 2020 conference. Scott and Wes discuss React wishlist items, play JS or Nay guessing game, share JavaScript hot takes from Twitter, and answer audience questions.', 'anthropic'),
(371, 317, 'Much Ado About Nothing: Exploring Null, Undefined, Void & More in JavaScript', 'Hosts Scott and Wes discuss concepts around nothingness in JavaScript including undefined, null, void, never, falsey values, empty arrays, and more.', 'anthropic'),
(372, 316, 'The Future is Clear - 2021 Web Development Predictions', 'Scott and Wes share their 2021 web development predictions including the growth of Deno, TypeScript, MDX, Jamstack, and more.', 'anthropic'),
(373, 315, 'Must-Have Keyboard Shortcuts for Crazy Fast Coding', 'Scott and Wes discuss their favorite keyboard shortcuts and window management tools for boosting productivity on Mac', 'anthropic'),
(374, 314, 'Looking back on web development trends in 2020', 'Scott and Wes discuss the web development predictions and trends from 2020 including the rise of ES modules, improvements in frameworks like React, Vue, Next.js, Gatsby, and tools like NPM, Snowpack, serverless functions and headless CMS.', 'anthropic'),
(375, 313, 'Demystifying Hosting and Web Service Pricing Models', 'This episode explains different pricing models for hosting and web services like paying per time used, resources, bandwidth, users, apps, and work performed.', 'anthropic'),
(376, 312, 'New Macs for Web Devs', 'Scott and Wes discuss the new Apple Silicon Macs and whether they will be good for web development. They also answer questions from listeners.', 'anthropic'),
(377, 311, 'Outsmarting the PS5 Scalper Bots', 'Wes and Scott discuss bot strategies for buying popular, hard to find items like the PlayStation 5, including scraping retailer sites, avoiding bot-prone retailers, and using tools like Puppeteer and LowDB.', 'anthropic'),
(378, 310, 'Serverless with Brian Leroux', 'Brian Leroux joins to discuss serverless, covering its characteristics, use cases, challenges, and tools like AWS, Architect, Begin, Node, Deno, and TypeScript.', 'anthropic'),
(379, 309, 'Inside the Tech of the Syntax 300 Live Episode', 'Wes and Scott discuss the behind-the-scenes tech used to record Syntax episode 300 with live guest appearances.', 'anthropic'),
(380, 308, 'Gatsby vs Next Smackdown 2021: Who Will Win?', 'Compares Gatsby and Next.js for features like server vs static rendering, data management, dynamic pages, and more.', 'anthropic'),
(381, 307, 'React Hooks FTW - Ditching Classes for Pure Functions', 'Wes and Scott discuss why they prefer React hooks over class components - hooks allow decoupling state from components, reduce duplication, improve ref handling and more.', 'anthropic'),
(382, 306, 'The 2020 Web Developer Gift Guide', 'Wes Bos and Scott Tolinski discuss their 2020 web developer gift guide with recommendations for home, cooking, games, tech, smart home, desk accessories, live streaming gear, fitness equipment, and clothing.', 'anthropic'),
(383, 305, 'Take the Guesswork Out of Git Commits with Conventional Commits', 'Wes and Scott discuss using conventional commits to improve commit messages and enable automatic versioning.', 'anthropic'),
(384, 304, 'Listener Questions on Web Dev Topics', 'Scotty and Wesbos answer developer questions submitted by podcast listeners on topics like WebRTC, debugging, Rust, Sanity CMS, and more.', 'anthropic'),
(385, 303, 'Don\'t Trust Client Validation', 'Discussion on validating data on the client vs the server, with examples of manipulating client validation and the importance of server-side validation for security.', 'anthropic'),
(386, 302, 'From Passion Project to Premier Conference: The Reactathon Origin Story', 'Benjamin Dunphy discusses how he started and grew the Reactathon conference based on his passion for React and events. He covers the motivation, target audience, and transparency needed, as well as expanding the event based on demand.', 'anthropic'),
(387, 301, 'CSS Masonry Closing the Layout Gap', 'This episode covers CSS Grid Level 3, which adds masonry layout capabilities natively to CSS. This allows Pinterest-style responsive layouts without JavaScript.', 'anthropic'),
(388, 690, 'How to Implement Dark Mode and Theming in Web Development', 'Scott and Wes discuss how to implement dark mode and theming in web development, including topics like using color variables, overriding system preferences, solving contrast issues, theming components, and more.', 'anthropic'),
(389, 685, 'Inside Jason\'s New Studio Setup for Engaging Web Dev Content', 'Jason Langsdorf discusses his new studio setup, thoughts on AI, the React ecosystem, and keys to creating engaging content consistently.', 'anthropic'),
(390, 691, 'Running Serverless Code at the Edge with Cloudflare Workers', 'This episode covers Cloudflare Workers for running serverless code at the edge. The guests explain the use cases, benefits, and how Workers provides a standardized runtime model. Other topics include the Winter CG group for collaboration on web standards, using Wrangler CLI for local dev, and new AI integration.', 'anthropic'),
(391, 688, 'Ex-npm CTO Building the Google of Packages', 'Darcy Clarke discusses his career journey through agencies, open source, and companies like npm. He introduces his new project Volt, a next generation package manager and registry aiming to be the Google of packages.', 'anthropic'),
(392, 689, 'You Should Be Using Maps & Sets in JavaScript', 'Wes and Scott discuss JavaScript maps and sets - how they differ from arrays and objects, unique use cases, and when to reach for maps/sets over arrays/objects.', 'anthropic'),
(393, 692, 'You NEED Stale While Revalidate Caching for Faster Websites', 'Scott and Wes explain the stale while revalidate caching technique, when you would use it, and how it allows you to serve cached content while asynchronously generating fresh content.', 'anthropic'),
(394, 693, 'Lessons learned from launching the new Syntax.fm site', 'Scott and Wes discuss launching the new Syntax.fm site, including database timeouts from too much data, the importance of error monitoring, dark mode UI bugs, using AI for show notes, managing background jobs with serverless, launching with TypeScript errors, having fast local development, being mindful of payload sizes, taking advantage of new browser APIs, and how Wes helped improve the overall design.', 'anthropic'),
(395, 696, 'How to Build a Website or Web App from Start to Finish', 'This podcast episode covers a wide range of topics related to building a website or web application from start to finish.', 'anthropic'),
(396, 694, 'What\'s New in Angular 17', 'Mark Techson from the Angular team discusses the latest with Angular 17 including the rebrand, new website, control flow syntax, deferred loading, state management and more.', 'anthropic'),
(397, 695, '5 New CSS Features You Should Know', 'This episode covers 5 interesting new CSS features including nth child microsyntax, CSS motion path, scroll snap, scroll driven animations, and margin trim.', 'anthropic'),
(398, 699, 'Potluck: TypeScript, Flutter, WordPress, Rust, MongoDB, + More', 'In this potluck episode, Scott and Wes answer listener questions on various web dev topics including TypeScript\'s future, Flutter for web, WordPress workflows, Rust projects, MongoDB for AI search, and more.', 'anthropic'),
(399, 698, 'Control CSS Specificity Issues with CSS Layers', 'Wes and Scott discuss CSS Layers - a new way to control cascading and specificity by defining layers of CSS.', 'anthropic'),
(400, 697, 'Everything You Need To Know About Getting Into Developer Relations', 'Covers a wide range of DevRel topics including what DevRel is, how to get into it, important skills like writing and public speaking, challenges like blog post quotas, and more.', 'anthropic'),
(401, 702, 'New JS APIs to Learn in 2024', 'Covers new and proposed JavaScript APIs for 2024 including source maps, temporal, array methods and more.', 'anthropic'),
(402, 700, 'Payload CMS for Flexible TypeScript Apps', 'Discussion with James Mikrut creator of Payload CMS about its features, architecture using Drizzle ORM, building open source sustainable products, plans to position itself as a Laravel style all-in-one platform for TypeScript web apps and more.', 'anthropic'),
(403, 701, 'Amp up accessibility with ARIA treats', 'Discussion on using ARIA roles and labels to make web apps more accessible, including legal requirements, providing context for UI elements, and testing tools.', 'anthropic'),
(404, 705, 'Is Running Random npm Code Safe? Parsing Packages with socket.dev', 'Discussion on whether npm packages can be trusted and tools like socket.dev to scan packages for security issues. Also covers misuse of open source packages and peer-to-peer web technologies.', 'anthropic'),
(405, 703, 'Devs! Learn the observer pattern and level up your game', 'Discussion on the observer pattern, its use in game dev and JavaScript frameworks, differences from observables, and its relation to promises and streams.', 'anthropic');

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(2, '02:38', 'This podcast is sponsored by Century', 'Sponsor', 2),
(3, '02:47', 'Asking for thoughts on Bun JS runtime', 'Bun JS', 2),
(4, '11:49', 'Adding auth header to image requests', 'Image auth', 2),
(5, '17:34', 'Differences between tRPC, REST and GraphQL', 'APIs', 2),
(6, '28:15', 'Opportunities to be a podcast guest', 'Guests', 2),
(7, '32:21', 'Documenting intricate code and business logic', 'Documentation', 2),
(8, '39:01', 'Learning Rust as a web developer', 'Rust', 2),
(9, '43:54', 'Using a home gym equipment consistently', 'Home gym', 2),
(10, '44:49', 'Troubleshooting 404 response from WordPress API', 'WordPress API', 2),
(11, '00:34', 'Talking about headings and their usage on webpages', 'Headings', 3),
(12, '01:57', 'Headings important for accessibility', 'Accessibility', 3),
(13, '02:55', 'Headings act as landmarks for screen readers and search engine crawlers', 'SEO', 3),
(14, '03:31', 'Think of headings as outlining website content', 'Outline', 3),
(15, '04:27', 'Headings should match nested outline structure', 'Outline order', 3),
(16, '05:20', 'Don\'t skip heading levels', 'No skipping', 3),
(17, '06:02', 'Don\'t omit headings just for visual design', 'No omitting', 3),
(18, '08:41', 'Headings will be read by screen readers', 'Screen readers', 3),
(19, '09:50', 'Separate structure from visual styles', 'Separate styles', 3),
(20, '11:28', 'Logo should not be h1', 'No logo h1', 3),
(21, '13:06', 'Can use ARIA roles for headings', 'ARIA roles', 3),
(22, '13:56', 'Multiple h1s rare but possible', 'Multiple h1s', 3),
(23, '16:38', 'Multiple other headings are okay', 'Multiple headings', 3),
(24, '18:39', 'Use clip path for visually hidden', 'Clip path', 3),
(25, '19:01', 'Visually hide headings sparingly', 'Visually hide', 3),
(26, '21:21', 'Headings help screen reader navigation', 'Navigation', 3),
(27, '22:34', 'Headings map extensions are useful', 'Extensions', 3),
(28, '02:25', 'Taylor worked as an agency recruiter for 11 years', 'agency recruiting', 4),
(29, '05:01', 'Agency recruiting focuses on activity over productivity', 'agency recruiting', 4),
(30, '06:27', 'We are currently in a developer recession after a period of overhiring', 'developer recession', 4),
(31, '09:59', 'Developers should use social proofing like content creation to stand out', 'stand out', 4),
(32, '15:07', 'Companies are being extra picky in hiring right now', 'extra picky hiring', 4),
(33, '24:17', 'Frame \'tell me about yourself\' to relate to the interviewers', '\'tell me about yourself\'', 4),
(34, '32:17', 'In demand skills include React, Python, JavaScript, AWS', 'in demand skills', 4),
(35, '35:21', 'LinkedIn is important for being found by recruiters', 'LinkedIn importance', 4),
(36, '44:15', 'Using AI generated content comes across as inauthentic', 'no AI content', 4),
(37, '53:11', 'Taylor stays up to date by following top engineers on social media', 'staying up to date', 4),
(38, '00:01', 'Announcer intro', 'Intro', 5),
(39, '00:21', 'Introducing the State of CSS survey', 'CSS survey', 5),
(40, '01:21', 'Kids\' soccer stories', 'Kids soccer', 5),
(41, '02:54', 'No picking up rule for kids', 'No picking up', 5),
(42, '03:51', 'How\'s CSS been going?', 'CSS going', 5),
(43, '03:59', 'Sponsor - Sentry', 'Sponsor', 5),
(44, '04:32', 'Guessing the top 5 CSS features', 'Top 5 features', 5),
(45, '07:32', 'More guessing top CSS features', 'More features', 5),
(46, '08:20', 'Aspect ratio usage', 'Aspect ratio', 5),
(47, '10:42', 'CSS hue rotate demos', 'Hue rotate', 5),
(48, '12:23', 'Hologram stickers', 'Hologram stickers', 5),
(49, '12:59', 'Recap of CSS quiz', 'CSS quiz recap', 5),
(50, '13:51', 'Discussing subgrid support', 'Subgrid support', 5),
(51, '16:33', 'Samsung browser support', 'Samsung browser', 5),
(52, '17:25', 'Improving caniuse website', 'Caniuse', 5),
(53, '18:16', 'Browser usage stats', 'Browser stats', 5),
(54, '18:43', 'New baseline on web.dev', 'Web.dev baseline', 5),
(55, '20:10', 'Logical CSS properties usage', 'Logical properties', 5),
(56, '20:54', 'CSS media range syntax', 'Media range syntax', 5),
(57, '21:14', 'CSS object viewbox', 'Object viewbox', 5),
(58, '22:53', 'Using object viewbox for images', 'Viewbox images', 5),
(59, '23:11', 'Avoiding jQuery with viewbox', 'Avoid jQuery', 5),
(60, '23:22', 'Anchor positioning usage', 'Anchor positioning', 5),
(61, '25:29', 'Anchor positioning polyfill issues', 'Anchor polyfill', 5),
(62, '26:12', 'Anchor positioning example', 'Anchor example', 5),
(63, '27:15', 'Using anchor positioning on Syntax site', 'Anchor on Syntax', 5),
(64, '28:09', 'CSS shape and graphics usage', 'Shapes and graphics', 5),
(65, '29:20', 'Wide gamut color browser support', 'Wide gamut support', 5),
(66, '30:12', 'Relative color usage', 'Relative color', 5),
(67, '31:45', 'Excited about CSS relative color', 'Relative color excited', 5),
(68, '32:33', 'Safari\'s color support', 'Safari color', 5),
(69, '33:46', 'Downloading variable fonts', 'Variable fonts', 5),
(70, '36:23', 'Using CSS currentColor', 'currentColor', 5),
(71, '37:10', 'Using CSS scroll-snap', 'scroll-snap', 5),
(72, '37:19', 'CSS overscroll-behavior', 'overscroll-behavior', 5),
(73, '39:36', 'touch-action to prevent pinching/zooming', 'touch-action', 5),
(74, '40:15', 'Using touch-action for maps', 'touch-action maps', 5),
(75, '41:13', 'Using variable fonts', 'Using variable fonts', 5),
(76, '42:26', 'Changing variable font settings', 'Font settings', 5),
(77, '43:04', 'Variable font expression range', 'Expression range', 5),
(78, '43:38', 'Using variable fonts for text effects', 'Text effects', 5),
(79, '44:55', 'Painting with variable fonts', 'Painting fonts', 5),
(80, '45:09', 'Planning part 2 of CSS survey', 'Part 2 plan', 5),
(81, '45:20', 'Decline in CSS framework usage', 'Framework decline', 5),
(82, '45:26', 'Decline in JS framework usage', 'JS decline', 5),
(83, '46:05', 'Dark mode usage increase', 'Dark mode increase', 5),
(84, '46:34', 'Increase in accessibility features', 'Accessibility increase', 5),
(85, '47:08', 'Browsers should force colors', 'Browsers force color', 5),
(86, '47:34', 'Using forced colors media query', 'Forced colors media', 5),
(87, '48:13', 'Forced colors implementation issues', 'Forced colors issues', 5),
(88, '48:30', 'Testing accessibility with Polypane', 'Polypane testing', 5),
(89, '49:16', 'Disbelief in CSS :has() usage', 'CSS :has skepticism', 5),
(90, '50:04', 'Using @property in CSS', '@property', 5),
(91, '51:01', 'CSS property types', 'Property types', 5),
(92, '52:33', 'Using CSS angle units', 'Angle units', 5),
(93, '53:06', 'Print CSS usage', 'Print CSS', 5),
(94, '53:15', 'Printing books with CSS', 'Print books CSS', 5),
(95, '53:36', 'Print styles for invoices', 'Print invoices', 5),
(96, '53:51', 'Plan for print CSS episode', 'Print CSS episode', 5),
(97, '54:05', 'Standardized containers', 'Standard containers', 5),
(98, '55:29', 'Beba Clip containers', 'Beba Clip containers', 5),
(99, '56:09', 'Kodiak Cakes protein oatmeal', 'Kodiak oatmeal', 5),
(100, '57:39', 'Adding protein to oatmeal', 'Oatmeal protein', 5),
(101, '58:25', 'Speaking at FITC Web Unleashed', 'FITC conference', 5),
(102, '59:15', 'Discount code for FITC conference', 'FITC discount', 5),
(103, '59:50', 'FITC talk on AI', 'FITC AI talk', 5),
(104, '01:00:08', 'Shameless plug for Syntax TikTok', 'Syntax TikTok', 5),
(105, '04:46', 'Tori uses OS webviews, Electron bundles Chromium', 'Webview difference', 6),
(106, '05:26', 'Tori apps smaller since using OS webviews', 'Tori app size', 6),
(107, '06:14', 'macOS Tori apps use WebKit webview', 'macOS webview', 6),
(108, '06:37', 'Windows Tori apps use Edge webview', 'Windows webview', 6),
(109, '10:34', 'OS webviews lack some browser features', 'Webview limitations', 6),
(110, '15:10', 'Tori faster, smaller\; Electron more info', 'Tori vs Electron', 6),
(111, '16:12', 'Tori better dev experience, easier setup', 'Tori dev experience', 6),
(112, '18:17', 'Electron more mature, more solutions', 'Electron maturity', 6),
(113, '24:25', 'Tori easier than Xcode for desktop dev', 'Tori vs Xcode', 6),
(114, '00:00', 'Intro to podcast and guest', 'Intro', 7),
(115, '02:33', 'Discussion on anxiety disorders and symptoms', 'Anxiety disorders', 7),
(116, '04:38', 'Definition and criteria for generalized anxiety disorder', 'GAD definition', 7),
(117, '09:17', 'Physical symptoms of anxiety', 'Physical symptoms', 7),
(118, '15:08', 'Genetic and environmental causes of anxiety', 'Causes', 7),
(119, '16:02', 'Long-term health effects of untreated anxiety', 'Health effects', 7),
(120, '17:32', 'When does anxiety become a clinical problem', 'Clinical problem', 7),
(121, '21:26', 'Healthy ways to manage anxiety', 'Manage anxiety', 7),
(122, '30:23', 'Recognizing personal anxiety triggers', 'Triggers', 7),
(123, '37:57', 'Dealing with anxiety over changing web development landscape', 'Career anxiety', 7),
(124, '43:50', 'Making big life decisions with anxiety', 'Big decisions', 7),
(125, '00:02:33', 'Svelte compiles to vanilla JS', 'Svelte', 8),
(126, '00:03:21', 'SvelteKit for routing and server-side rendering', 'SvelteKit', 8),
(127, '00:05:23', 'Svelte is mostly just JavaScript', 'JS in Svelte', 8),
(128, '00:08:49', 'Svelte templating is like Handlebars', 'Templating', 8),
(129, '00:10:52', 'Multiple components per file in React is nice', 'Single file', 8),
(130, '00:17:26', 'Making variables reactive with $', 'Reactivity', 8),
(131, '00:20:17', 'Load data directly in Loaders', 'Loaders', 8),
(132, '00:23:34', 'Type inference from server to client', 'TypeScript', 8),
(133, '00:29:14', 'State management is easy in Svelte', 'State mgmt', 8),
(134, '00:32:42', 'Global state detached from components', 'Global state', 8),
(135, '00:35:10', 'Easy form binding with values', 'Form binding', 8),
(136, '00:36:21', 'Bind to DOM nodes and browser APIs', 'DOM binding', 8),
(137, '00:38:35', 'Helper methods for JSON responses', 'JSON responses', 8),
(138, '00:40:42', 'Svelte actions similar to Angular directives', 'Svelte actions', 8),
(139, '00:48:44', 'Layouts and slots avoid re-rendering', 'Layouts', 8),
(140, '00:51:13', 'Scoped CSS avoids naming collisions', 'Scoped CSS', 8),
(141, '00:53:24', 'Pass JS vars to CSS with CSS vars', 'CSS vars', 8),
(142, '00:56:11', 'SvelteKit is enjoyable, mostly just JS', 'Enjoyable', 8),
(143, '02:33', 'Scott has a workout device called Tonal', 'Tonal workout device', 9),
(144, '03:06', 'Tonal has limited custom workout functionality', 'Limited Tonal custom workouts', 9),
(145, '04:39', 'Scott proxied Tonal network requests to understand the API', 'Proxied Tonal requests', 9),
(146, '08:47', 'HTTP requests contain headers with authentication info', 'HTTP headers contain auth', 9),
(147, '13:00', 'Turning on a proxy can break requests without certs', 'Proxies break requests without certs', 9),
(148, '16:40', 'Charles proxy app used for traffic inspection', 'Charles proxy app', 9),
(149, '17:02', 'Browser dev tools have reduced Charles popularity', 'Dev tools over Charles', 9),
(150, '22:51', 'Some services use cert pinning to prevent proxying', 'Services prevent proxying', 9),
(151, '25:25', 'Proxyman proxy app detects sending applications', 'Proxyman detects apps', 9),
(152, '32:17', 'Some apps use cert pinning to prevent interception', 'Cert pinning prevents proxying', 9),
(153, '02:31', 'Worked in family betting shop business', 'Betting shop', 10),
(154, '03:27', 'Wanted a job to work remotely after visiting Thailand', 'Remote job', 10),
(155, '04:04', 'Got into coding after researching ways to make money online', 'Coding research', 10),
(156, '04:31', 'Has listened to Syntax podcast for 5+ years while working', 'Syntax listener', 10),
(157, '09:06', 'Quit construction job despite good pay to focus on coding', 'Quit job', 10),
(158, '12:00', 'Interview process focused on soft skills like time management', 'Soft skills', 10),
(159, '18:10', 'Felt prepared for interviews after dedicated learning time', 'Interview prep', 10),
(160, '26:29', 'Portfolio site is stuartblockson.tech', 'Portfolio', 10),
(161, '28:27', 'Learned by watching tutorials and building own projects', 'Project based', 10),
(162, '38:02', 'Found time to learn through communication and compromising with family', 'Family time', 10),
(163, '44:36', 'Advice is to stick with learning coding despite difficulties', 'Stick with it', 10),
(164, '00:52', 'Scott and Wes discuss doing a hack week at Sentry', 'hack week', 11),
(165, '03:39', 'Scott built a real-time collaborative markdown editor', 'Scott\'s project', 11),
(166, '19:59', 'Wes built a recording button to control office lighting and devices', 'Wes\'s project', 11),
(167, '27:58', 'Wes used BetterTouchTool to map button presses to actions', 'Wes\'s automation', 11),
(168, '31:15', 'Scott and Wes discuss home automation possibilities', 'home automation', 11),
(169, '35:47', 'Discussion of other hack week projects like games and tools', 'other projects', 11),
(170, '42:24', 'Wes and Scott lament having too many hobbies and interests', 'too many hobbies', 11),
(171, '45:54', 'Wes\'s sick pick is the Better Display Mac app', 'Wes\'s pick', 11),
(172, '46:45', 'Scott\'s sick pick is heavy duty magnets', 'Scott\'s pick', 11),
(173, '02:31', 'CSS Nesting overview', 'Overview', 12),
(174, '03:16', 'Ideal CSS nesting syntax', 'Syntax', 12),
(175, '04:15', 'How CSS nesting works', 'How it works', 12),
(176, '05:58', 'When to use CSS nesting', 'When to use', 12),
(177, '08:15', 'Avoid over-nesting selectors', 'Avoid over-nesting', 12),
(178, '09:21', 'Ampersand parent selector', 'Ampersand', 12),
(179, '12:28', 'Breakout selector with ampersand', 'Breakout', 12),
(180, '14:01', 'Element selectors don\'t need ampersand', 'Elements', 12),
(181, '16:48', 'Sibling selectors with nesting', 'Siblings', 12),
(182, '18:29', 'Previous sibling selector', 'Previous sibling', 12),
(183, '19:36', ':has pseudo selector with nesting', ':has', 12),
(184, '21:15', 'Nesting media queries', 'Media queries', 12),
(185, '22:56', 'Nesting container queries', 'Container queries', 12),
(186, '24:16', 'Naming grid areas for reusability', 'Grid areas', 12),
(187, '25:59', 'Browser support via transpiling', 'Transpiling', 12),
(188, '27:23', 'Benefits over Sass', 'vs Sass', 12),
(189, '29:39', 'Lightning CSS alternative', 'Lightning CSS', 12),
(190, '00:04', 'Astro 3.0 launch and new features', 'Astro 3', 13),
(191, '01:22', 'Astro framework allows any UI framework', 'Astro framework', 13),
(192, '02:35', 'Fred is first 3-time Syntax guest', '3-time guest', 13),
(193, '04:38', 'Overview of Astro framework', 'Astro overview', 13),
(194, '05:30', 'Astro focused on content sites', 'Astro content sites', 13),
(195, '08:14', 'Browser view transitions in Astro', 'View transitions', 13),
(196, '10:30', 'Polyfilling for browser support', 'Polyfilling support', 13),
(197, '18:18', 'Image optimization and speed improvements in Astro 3', 'Astro optimizations', 13),
(198, '23:25', 'Astro open source sustainability', 'Astro sustainability', 13),
(199, '26:15', 'Astro open source funding', 'Astro funding', 13),
(200, '30:27', 'Astro 3.0 launch week announcements', 'Launch week', 13),
(201, '37:36', 'Astro release cadence', 'Astro cadence', 13),
(202, '40:11', 'Astro powered by Vite', 'Powered by Vite', 13),
(203, '43:55', 'Challenges of open source marketing', 'Open source marketing', 13),
(204, '47:48', 'Keeping up with browser APIs', 'Browser APIs', 13),
(205, '48:30', 'Announcing the Vast Stack', 'Vast Stack', 13),
(206, '52:06', 'Factorio space expansion announcement', 'Factorio expansion', 13),
(207, '00:19', 'Rid questions on TypeScript files, directives, and coercion', 'TypeScript Q&A', 14),
(208, '02:36', 'Scott did a dog DNA test', 'Dog DNA test', 14),
(209, '07:34', 'Discussion on soft skills for developers', 'Soft skills', 14),
(210, '13:41', 'Using conventional commits for release notes', 'Conventional commits', 14),
(211, '16:19', 'Headless CMS use cases and implementations', 'Headless CMS', 14),
(212, '20:48', 'Debugging web component performance issues', 'Debugging performance', 14),
(213, '23:12', 'Resources for understanding browser performance', 'Performance resources', 14),
(214, '26:01', 'Purpose and usage of .d.ts files in TypeScript', '.d.ts files', 14),
(215, '30:35', 'Using the inset property for position and layout', 'inset property', 14),
(216, '35:12', 'Using AI to understand technical documentation', 'AI for docs', 14),
(217, '40:23', 'ChatGPT plugins for querying codebases', 'ChatGPT plugins', 14),
(218, '41:26', 'JavaScript type coercion with .includes()', 'Type coercion', 14),
(219, '44:05', 'Scott and Wes\'s code directory organization', 'Code organization', 14),
(220, '49:04', 'Async vs defer for script loading', 'Async vs defer', 14),
(221, '02:33', 'Introduction to local scope', 'local scope', 15),
(222, '03:00', 'Global scope in JS', 'global scope', 15),
(223, '04:40', 'Local vs global scope', 'scope types', 15),
(224, '06:06', 'let/const vs var for block scoping', 'variable types', 15),
(225, '07:31', 'Block scope syntax', 'block syntax', 15),
(226, '11:01', 'Lexical vs dynamic scoping', 'lexical scoping', 15),
(227, '12:03', 'Function scope creates closure', 'function scope', 15),
(228, '13:11', 'Inner functions maintain outer scopes', 'inner functions', 15),
(229, '14:35', 'Closures allow inner functions to access outer scopes', 'closures', 15),
(230, '16:06', 'Dynamic scoping is uncommon in modern languages', 'dynamic scoping', 15),
(231, '17:13', 'Closure for private variables', 'private variables', 15),
(232, '17:55', 'Closure example with Svelte', 'Svelte example', 15),
(233, '19:15', 'Modules use closure', 'module closure', 15),
(234, '20:18', 'Closure for caching', 'caching', 15),
(235, '21:59', 'Closure for reusable logger', 'reusable logger', 15),
(236, '23:20', 'Closures used more in functional programming', 'functional programming', 15),
(237, '02:29', 'Explains how package authors rely on assumptions and guesses when shipping code', 'Shipping code', 16),
(238, '07:17', 'Gives a history lesson on JavaScript module formats like AMD, CommonJS, UMD, etc.', 'Module history', 16),
(239, '12:41', 'Describes how package authors have to build for the lowest common denominator when publishing', 'Lowest denominator', 16),
(240, '16:23', 'The benefit of ESM is static analysis for things like tree shaking', 'ESM benefits', 16),
(241, '19:26', 'Ships around 5-10 build artifacts per package to support different environments', 'Build artifacts', 16),
(242, '23:17', 'Had to make changes for Webpack 4 compatibility since it is still widely used', 'Webpack 4', 16),
(243, '30:22', 'Suggests a \"test my package\" service to try publishing in multiple environments', 'Test service', 16),
(244, '35:21', 'For full correctness, ESM vs CJS builds need separate type definitions', 'Type definitions', 16),
(245, '43:22', 'Some people have switched to ESM-only but it causes pain for users not ready', 'ESM only', 16),
(246, '48:19', 'Getting source maps working properly can be finicky', 'Source maps', 16),
(247, '52:08', 'React still doesn\'t ship with ESM or types after years of requests', 'React ESM/types', 16),
(248, '01:06:45', 'Redux Toolkit 2.0 beta is available, requesting user feedback before final release', 'RTK beta', 16),
(249, '00:01', 'Introducing Syntax podcast', 'Intro', 17),
(250, '00:12', 'OG images overview', 'Overview', 17),
(251, '00:44', 'OG image sizes', 'Sizes', 17),
(252, '01:21', 'Sentry sponsors Syntax', 'Sponsor', 17),
(253, '02:18', 'Open Graph protocol overview', 'Open Graph', 17),
(254, '03:24', 'OG images defined in meta tags', 'Meta tags', 17),
(255, '04:21', 'Open Graph metadata options', 'Metadata', 17),
(256, '05:13', 'Recommended OG image sizes', 'Dimensions', 17),
(257, '06:11', 'OG image size discussion', 'Size debate', 17),
(258, '06:52', 'Testing OG images', 'Testing', 17),
(259, '07:54', 'Debugging OG images', 'Debugging', 17),
(260, '08:28', 'Basic OG image setup', 'Basic setup', 17),
(261, '09:41', 'Dynamic OG images overview', 'Dynamic images', 17),
(262, '11:14', 'Satori/Vercel for generating OG images', 'Satori', 17),
(263, '13:10', 'Satori limitations discussed', 'Satori limits', 17),
(264, '14:22', 'Cloudinary for OG images', 'Cloudinary', 17),
(265, '15:55', 'Level Up Tutorials OG image approach', 'Level Up approach', 17),
(266, '16:53', 'HTML to Canvas for OG images', 'HTML to Canvas', 17),
(267, '17:54', 'Performance of dynamic OG images', 'Performance', 17),
(268, '18:05', 'Puppeteer for screenshot OG images', 'Puppeteer', 17),
(269, '21:38', 'Wes\' Puppeteer OG image approach', 'Wes\' approach', 17),
(270, '24:45', 'Caching OG images in memory', 'Caching images', 17),
(271, '25:50', 'Benefits of Puppeteer discussed', 'Puppeteer benefits', 17),
(272, '26:37', 'Considering Playwright', 'Playwright', 17),
(273, '28:26', 'Other OG image techniques', 'Other techniques', 17),
(274, '29:08', 'Canva API for OG images', 'Canva API', 17),
(275, '29:23', 'Outro', 'Outro', 17),
(276, '00:30', 'Scott and Wes discuss joining Sentry and ramping up new Syntax content.', 'Joined Sentry', 18),
(277, '01:48', 'Scott went to a Strokes concert at Red Rocks. Wes asks how he\'s feeling the day after.', 'Strokes concert', 18),
(278, '05:53', 'Wes and Scott discuss landscaping projects like installing sprinklers and reseeding grass.', 'Landscaping', 18),
(279, '11:37', 'Wes talks about building a home gym in his basement with equipment imported from China.', 'Home gym', 18),
(280, '17:11', 'Scott discusses his fitness goals including getting into cardio and tracking calories.', 'Fitness goals', 18),
(281, '19:17', 'Wes talks about rewiring an old sewing machine motor for his wife\'s new office.', 'Sewing machine', 18),
(282, '23:25', 'Scott considers materials like Teflon to help him learn continuous headspins.', 'Learning headspins', 18),
(283, '24:54', 'Wes found an industrial sewing machine at a yard sale to build his wife\'s office.', 'Wife\'s office', 18),
(284, '26:42', 'Wes plans to upgrade the old sewing machine motor with a modern electronic one.', 'Upgrading sewing machine', 18),
(285, '29:13', 'Scott tries to find the right carpet cleaner for his wool rugs.', 'Cleaning wool rugs', 18),
(286, '31:21', 'Wes and Scott complain about declining Google search quality.', 'Declining Google quality', 18),
(287, '32:57', 'Scott sets up an outdoor projector and screen for movie nights.', 'Outdoor projector', 18),
(288, '35:51', 'Wes considers options like foam instead of concrete for fence posts.', 'Fence posts', 18),
(289, '37:49', 'Wes used screw piles instead of concrete for his cottage deck.', 'Cottage deck', 18),
(290, '40:49', 'Wes ran Ethernet to his cottage office and extended WiFi range.', 'Cottage Ethernet', 18),
(291, '43:02', 'Wes easily dug a shallow trench for Ethernet conduit in sandy soil.', 'Digging Ethernet trench', 18),
(292, '44:21', 'Scott\'s kids enjoyed making their first circuits with an electronics kit.', 'Kids\' electronics kit', 18),
(293, '46:24', 'Wes cautions about the difficulty of quality control at huge YouTube channels.', 'YouTube quality control', 18),
(294, '49:23', 'Wes rewired a broken kids ATV bought cheap on Facebook Marketplace.', 'Rewiring ATV', 18),
(295, '50:23', 'The cheap ATV replacement wiring harness worked, until Wes blew the stator.', 'ATV stator blew', 18),
(296, '51:44', 'Wes and Scott discuss watching Formula 1 and tennis documentaries.', 'Documentaries', 18),
(297, '56:11', 'Scott competes with his wife guessing winners on reality competition shows.', 'Reality shows', 18),
(298, '59:50', 'Wes sick picks a versatile steam cleaner for household cleaning.', 'Steam cleaner', 18),
(299, '01:03:11', 'Scott sick picks a kids book called The First Cat in Space Ate Pizza.', 'Kids book', 18),
(300, '00:38', 'Introducing guest Aiden Bai and his Million.js library to make React 70% faster', 'Guest intro', 19),
(301, '01:38', 'Aiden explains Million.js replaces React\'s rendering engine for optimized components', 'Million.js overview', 19),
(302, '02:55', 'Million.js optimizes the reconciliation process in React', 'Reconciliation optimization', 19),
(303, '03:30', 'Aiden explains how React rendering currently works with virtual DOM diffing', 'React rendering', 19),
(304, '04:35', 'Million.js avoids diffing the entire virtual DOM tree', 'Avoids diffing', 19),
(305, '05:56', 'Million.js follows a component model like React unlike Svelte templates', 'Component model', 19),
(306, '06:39', 'The Million.js compiler is the key to optimizing components', 'Compiler key', 19),
(307, '08:02', 'The compiler walks the AST to collect info on components', 'AST walking', 19),
(308, '10:42', 'Aiden started coding in 5th grade and is now 18 years old', 'Coding background', 19),
(309, '11:51', 'Aiden interned at Wyze and worked on their WebRTC streaming', 'Wyze internship', 19),
(310, '14:08', 'Million.js uses the JS Framework Benchmark for testing', 'JS Framework Benchmark', 19),
(311, '15:05', 'Aiden is motivated by making sites faster for lower-end devices', 'Motivation', 19),
(312, '18:33', 'Aiden gives an example of slow rendering affecting real world use cases', 'Slow rendering example', 19),
(313, '20:48', 'Wes and Aiden discuss examples of laggy text editor performance', 'Text editor examples', 19),
(314, '23:04', 'Aiden explains how VS Code can quickly render large files', 'VS Code rendering', 19),
(315, '25:36', 'The 70% faster claim is based on a reconcillation benchmark score', '70% benchmark', 19),
(316, '26:29', 'Million.js works best for components with lots of DOM diffs like tables', 'Use cases', 19),
(317, '27:41', 'The Million.js for component optimizes looping', 'For component optimization', 19),
(318, '31:12', 'Million.js works with any bundler that supports Babel plugins', 'Bundler support', 19),
(319, '33:22', 'Million.js supports server components', 'Server component support', 19),
(320, '34:59', 'Possibility of using Sentry data to inform Million.js optimizations', 'Sentry integration', 19),
(321, '36:17', 'Aiden stays on top of issues by live streaming work sessions', 'Issue management', 19),
(322, '39:07', 'Aiden cares about developer experience and user experience', 'Developer and user experience', 19),
(323, '40:08', 'Aiden created his VCR aesthetic website without ever using a VCR', 'Personal website', 19),
(324, '45:41', 'Aiden recommends beginners build projects they find interesting', 'Advice for beginners', 19),
(325, '47:53', 'Aiden is excited about the RSC for SolidJS signals proposal', 'Excited about signals', 19),
(326, '00:13', 'Rust for JS Devs Part 2', 'Episode intro', 20),
(327, '00:53', 'Audio interface issues in Chromium', 'Bug discussion', 20),
(328, '02:18', 'Let keyword for immutable variables', 'Immutable variables', 20),
(329, '02:44', 'Mut keyword for mutable variables', 'Mutable variables', 20),
(330, '03:21', 'Const variables in Rust', 'Const variables', 20),
(331, '04:41', 'Debugging Rust apps with Sentry', 'Sentry ad', 20),
(332, '06:11', 'Signed and unsigned integer types', 'Integer types', 20),
(333, '07:08', 'Using the as keyword for type conversions', 'as keyword', 20),
(334, '08:33', 'Const variables in Rust', 'Const variables', 20),
(335, '09:16', 'Type inference in Rust', 'Type inference', 20),
(336, '10:47', 'Statically typed and strongly typed', 'Type system', 20),
(337, '11:11', 'Compile-time type checking', 'Type checking', 20),
(338, '11:43', 'Ownership and borrowing', 'Ownership', 20),
(339, '12:19', 'Type inference in Rust', 'Type inference', 20),
(340, '13:38', 'Memory management in Rust', 'Memory management', 20),
(341, '14:11', 'Pattern matching with Rust types', 'Pattern matching', 20),
(342, '14:59', 'Generics in Rust', 'Generics', 20),
(343, '15:53', 'Zero-cost abstractions', 'Abstractions', 20),
(344, '16:03', 'Basic types in JavaScript', 'JS types', 20),
(345, '17:09', 'Signed vs unsigned integers', 'Signed integers', 20),
(346, '18:15', 'Integer sizes and performance', 'Integer sizes', 20),
(347, '19:04', 'Unsigned integer range', 'Unsigned integers', 20),
(348, '20:27', 'Signed integer ranges', 'Signed integers', 20),
(349, '21:33', 'Choosing integer sizes', 'Choosing integers', 20),
(350, '23:08', 'Floating point types', 'Floating points', 20),
(351, '23:37', 'String types', 'Strings', 20),
(352, '24:50', 'Slice references with &str', '&str', 20),
(353, '25:07', 'Arrays, tuples and vectors', 'Collections', 20),
(354, '26:22', 'Option and Result types', 'Option & Result', 20),
(355, '27:09', 'Structs, enums and hashmaps', 'Structs & enums', 20),
(356, '28:20', 'Vectors vs arrays', 'Vectors & arrays', 20),
(357, '29:51', 'Memory overhead of hashmaps', 'Hashmap perf', 20),
(358, '31:19', 'Benefits of Map in JavaScript', 'JS Map benefits', 20),
(359, '33:10', 'Signed vs unsigned integers', 'Signed integers', 20),
(360, '35:25', 'Type inference with generics', 'Generics', 20),
(361, '36:16', 'The as keyword', 'as keyword', 20),
(362, '37:57', 'Use cases for &str', '&str examples', 20),
(363, '40:24', 'When to use &str vs str', 'str vs &str', 20),
(364, '42:35', 'for loops with &str', 'for loop &str', 20),
(365, '43:33', 'Debugging &str issues', 'Debugging &str', 20),
(366, '46:02', 'Defining structs in Rust', 'Structs', 20),
(367, '47:31', 'Adding methods to Rust structs', 'Struct methods', 20),
(368, '48:36', 'HashMap for dynamic structures', 'HashMaps', 20),
(369, '49:20', 'Sick picks', 'Picks intro', 20),
(370, '00:51', 'Fetch API tricks', 'tips', 21),
(371, '01:08', 'Streaming fetch results', 'stream', 21),
(372, '03:33', 'Piping streams', 'pipe', 21),
(373, '06:04', 'Download progress', 'progress', 21),
(374, '09:45', 'Cancelling streams', 'cancel', 21),
(375, '12:00', 'Testing JSON responses', 'test', 21),
(376, '13:28', 'Async/await with fetch', 'async', 21),
(377, '14:43', 'Error handling with fetch', 'errors', 21),
(378, '17:13', 'Copy as fetch in devtools', 'devtools', 21),
(379, '00:39', 'Andrew Lizowski from Descript discusses building a video editor with web tech', 'Descript overview', 22),
(380, '01:03', 'Descript focuses on making AI useful rather than just generating random stuff', 'Descript AI', 22),
(381, '02:36', 'Andrew always had a passion for building consumer facing apps and side projects', 'Andrew\'s background', 22),
(382, '03:16', 'Andrew wanted to move from platform work to being hands on with products', 'Andrew joins Descript', 22),
(383, '04:22', 'Descript converts timeline editing to script editing for more natural workflow', 'Script editing', 22),
(384, '05:08', 'Descript uses Web Codecs and relies heavily on running in the browser', 'Browser tech stack', 22),
(385, '06:30', 'Native app is Electron, Web app uses Web Codecs and streams media as needed', 'Streaming media', 22),
(386, '07:48', 'Canvas is used for video processing with Web Codecs', 'Canvas usage', 22),
(387, '08:28', 'Web Codecs allows reading video frames without Canvas', 'Web Codecs benefits', 22),
(388, '09:55', 'Web streams help with fast start up by loading only needed media', 'Web streams', 22),
(389, '11:24', 'libavjs compiled from FFmpeg handles video processing', 'libavjs', 22),
(390, '13:23', 'Riverside stores high quality video in IndexedDB', 'Riverside storage', 22),
(391, '14:31', 'IndexedDB usage is high but varies across browsers', 'IndexedDB limits', 22),
(392, '15:11', 'Recorder handles failures gracefully with backup of backups', 'Avoiding data loss', 22),
(393, '18:41', 'Uses Radix for components like popovers, dropdowns, context menus', 'Radix components', 22),
(394, '19:57', 'State machines help manage complex components like drag and drop', 'Using XState', 22),
(395, '21:58', 'State machines prevent bugs by disallowing impossible states', 'Benefits of XState', 22),
(396, '24:36', 'Uses Tailwind for layout styling and CSS Modules for components', 'Styling approach', 22),
(397, '25:46', 'Components don\'t set width or margin, handled in parent with Tailwind', 'Tailwind usage', 22),
(398, '26:25', 'Radix is headless so components can be styled with Tailwind, CSS Modules etc', 'Radix flexibility', 22),
(399, '27:15', 'Radix helps avoid recreating accessibility functionality from scratch', 'Radix accessibility', 22),
(400, '31:35', 'Uses Jest, React, TypeScript, Webpack, and adopted Playwright for testing', 'Frontend stack', 22),
(401, '32:52', 'Playwright helps create reliable tests by waiting until actions are possible', 'Playwright benefits', 22),
(402, '36:18', 'Critical to thoroughly test core design system components', 'Testing priorities', 22),
(403, '38:14', 'Webpack is powerful and flexible though not the most user friendly', 'Webpack pros/cons', 22),
(404, '39:23', 'Once you learn something obtuse like Webpack, it becomes a superpower', 'Obtuse skills', 22),
(405, '40:30', 'Some AI processing had to move backend due to browser constraints', 'AI backend', 22),
(406, '42:17', 'Descript focuses on making AI enhance creators rather than replace them', 'AI approach', 22),
(407, '43:51', 'Working on using AI voices to smooth audio edits seamlessly', 'Audio editing', 22),
(408, '45:04', 'Most AI processing happens in the cloud due to GPU constraints', 'Cloud processing', 22),
(409, '47:18', ' Andrew\'s podcast Dev Tools FM features interviews with developer tool makers', 'Dev Tools FM', 22),
(410, '51:58', 'Uses Iosevka font optimized for horizontal space', 'Preferred font', 22),
(411, '53:55', 'GitHub home page shows what\'s trending among people you follow', 'Staying updated', 22),
(412, '56:34', 'Lexical for building text editors, from React\'s Dominic Gannaway', 'Lexical', 22),
(413, '58:27', 'Shad CN generates Tailwind styled Radix components', 'Shad CN', 22),
(414, '00:34', 'Syntax podcast presented by Sentry', 'Sentry sponsor', 23),
(415, '00:39', 'Sentry overview', 'Sentry', 23),
(416, '01:14', 'More on Sentry features', 'Sentry features', 23),
(417, '01:37', 'Promise.withResolvers overview', 'Promise resolvers', 23),
(418, '02:23', 'Scott back from vacation with vacation brain', 'Vacation brain', 23),
(419, '02:38', 'Where Scott went on vacation', 'Vacation spot', 23),
(420, '03:12', 'Driving on the left side of the road', 'Left side driving', 23),
(421, '04:08', 'Array.at() method overview', 'Array.at()', 23),
(422, '05:40', 'Status of immutable array methods', 'Array methods status', 23),
(423, '06:11', 'Benefits of immutable array methods', 'Immutable benefits', 23),
(424, '07:12', 'Promise.withResolvers use cases', 'Promise use cases', 23),
(425, '08:25', 'Portability benefit of Promise.withResolvers', 'Promise portability', 23),
(426, '09:44', 'Array.at() benefits over bracket syntax', 'Array.at benefits', 23),
(427, '11:18', 'Debate over Array.at() vs bracket syntax', 'Array.at debate', 23),
(428, '12:36', 'Array.at() integer conversion benefit', 'Array.at integers', 23),
(429, '13:00', 'Array.at() benefit for random array access', 'Array.at random', 23),
(430, '13:20', 'Bracket syntax backward compatibility issue', 'Bracket compatibility', 23),
(431, '14:42', 'Why negative indexes weren\'t added to bracket syntax', 'Negative index reason', 23),
(432, '15:56', 'Type safety of Array.at()', 'Array.at typing', 23),
(433, '16:17', 'New immutable array methods', 'New array methods', 23),
(434, '17:12', 'Naming of new array methods', 'Method naming', 23),
(435, '18:11', 'Use case for Array.splice() immutable method', 'Splice use case', 23),
(436, '19:09', 'Benefit of immutable methods to avoid copying arrays', 'Immutable copying benefit', 23),
(437, '20:22', 'Potential for more immutable array methods', 'More array methods', 23),
(438, '21:26', 'Use Array.at() instead of mutable methods', 'Use Array.at', 23),
(439, '21:51', 'Array.fromAsync overview', 'Array.fromAsync', 23),
(440, '22:25', 'Problem Array.fromAsync solves', 'Array.fromAsync problem', 23),
(441, '23:00', 'Iterable and generator overview', 'Iterables and generators', 23),
(442, '24:16', 'Array.fromAsync use case example', 'fromAsync example', 23),
(443, '25:28', 'Benefit of Array.fromAsync over Promise.all()', 'fromAsync vs Promise.all', 23),
(444, '25:46', 'Use Array.fromAsync when array length is unknown', 'fromAsync unknown length', 23),
(445, '26:23', 'Should do deep dive on iterables and generators', 'Iterable generator deep dive', 23),
(446, '27:21', 'Array grouping overview', 'Array grouping', 23),
(447, '28:48', 'Array grouping reduces boilerplate', 'Grouping reduces boilerplate', 23),
(448, '30:10', 'Map grouping allows non-string keys', 'Map grouping keys', 23),
(449, '30:37', 'Hope array grouping makes it to standard', 'Hope grouping approved', 23),
(450, '31:17', 'Observable events overview', 'Observable events', 23),
(451, '32:06', 'Benefits of observable events', 'Observable benefits', 23),
(452, '32:30', 'Like declarative promises for events', 'Declarative events', 23),
(453, '32:56', 'Observable takeUntil example', 'takeUntil example', 23),
(454, '33:26', 'Hope observable events get approved', 'Approve observables', 23),
(455, '33:45', 'Should do observable fundamentals episode', 'Observable episode', 23),
(456, '35:18', 'Import assertions overview', 'Import assertions', 23),
(457, '36:29', 'Use import assertions for JSON now', 'Import JSON', 23),
(458, '37:05', 'Benefit over native import in bundlers', 'Import benefit', 23),
(459, '37:29', 'Potential future import types', 'Future imports', 23),
(460, '38:25', 'Question over more complex import values', 'Complex imports', 23),
(461, '39:25', 'Map.emplace() overview', 'Map.emplace()', 23),
(462, '39:56', 'Map.emplace() upsert use case', 'Map upsert', 23),
(463, '40:53', 'Map.emplace() chaining benefit', 'Map chaining', 23),
(464, '41:31', 'Progress of decorators proposal', 'Decorator progress', 23),
(465, '41:53', 'Should do decorators fundamentals episode', 'Decorator episode', 23),
(466, '42:43', 'Error handling and pattern matching proposals', 'Error proposals', 23),
(467, '43:49', 'Pattern matching overview', 'Pattern matching', 23),
(468, '44:52', 'Pattern matching similar to Rust match', 'Rust matching', 23),
(469, '45:02', 'Daniel Rosenwasser championing pattern matching', 'Rosenwasser champion', 23),
(470, '00:33', 'Overview of decorators in JavaScript', 'intro', 24),
(471, '01:11', 'Decorators currently at stage 3, implemented in Firefox but not yet Chromium/Safari', 'status', 24),
(472, '02:21', 'Difference between TypeScript decorators and spec decorators', 'typescript', 24),
(473, '03:33', 'Potential for third version of decorators in the future', 'future', 24),
(474, '04:06', 'Extensions to decorators beyond classes', 'extensions', 24),
(475, '05:01', 'Decorators wrap/extend class functionality', 'wrap classes', 24),
(476, '05:36', 'Decorators add functionality to classes/properties/methods', 'add functionality', 24),
(477, '05:48', 'Examples of decorator use cases - logging, reactivity', 'examples', 24),
(478, '06:15', 'Decorators reference a function', 'reference function', 24),
(479, '06:27', 'Can decorate class, methods, getters/setters', 'use cases', 24),
(480, '07:01', 'Use cases - logging, initialization', 'more examples', 24),
(481, '08:02', 'Other use cases - reactivity, event listeners', 'more use cases', 24),
(482, '08:54', 'Initializing web components with decorators', 'web components', 24),
(483, '09:12', 'Decorators similar to higher order functions', 'higher order', 24),
(484, '10:23', 'Wish list: decorators for functions in React', 'react', 24),
(485, '11:09', 'How decorators are evaluated and called', 'evaluation', 24),
(486, '11:51', 'Parameters passed to decorator functions', 'parameters', 24),
(487, '12:06', 'Applying decorators syntax', 'syntax', 24),
(488, '13:02', 'Defining decorators as normal functions', 'normal functions', 24),
(489, '13:25', 'Syntax for decorating classes vs properties', 'class vs prop syntax', 24),
(490, '14:04', 'Syntax likely required, not just convention', 'required syntax', 24),
(491, '14:31', 'Auto accessors syntactic sugar for private variables', 'auto accessors', 24),
(492, '15:34', 'Benefits of auto accessors with decorators', 'accessor benefits', 24),
(493, '16:10', 'Example of auto accessor decorator', 'accessor example', 24),
(494, '17:04', 'Benefits of getters/setters to end user', 'getter/setter benefits', 24),
(495, '17:37', 'Plan to explore classes more due to decorator power', 'explore classes', 24),
(496, '18:29', 'AngularJS vs Angular version clarification', 'angular versions', 24),
(497, '19:35', 'npm installs for AngularJS vs Angular packages', 'npm analytics', 24),
(498, '20:14', 'Many old AngularJS apps not using npm', 'old angular apps', 24),
(499, '21:15', 'AngularJS 1.2 released 10 years ago', 'angular history', 24),
(500, '01:33', 'Creator of Blitz JS', 'Blitz JS', 25),
(501, '02:34', 'Flight control aesthetic with airplane animations', 'Flight control', 25);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(502, '03:09', 'Started pilot training at 15, got license at 17', 'Pilot license', 25),
(503, '04:46', 'Can fly plane to conferences for lunch', 'Flying planes', 25),
(504, '06:15', 'Flight control brings your own cloud to retain control', 'BYOC', 25),
(505, '07:37', 'Reaching scale, companies move from Heroku to own infrastructure', 'Heroku scale limit', 25),
(506, '08:21', 'Future is bring your own cloud platforms', 'BYOC future', 25),
(507, '10:22', 'Amplify fully abstracts AWS, losing control', 'Amplify abstraction', 25),
(508, '11:32', 'Let AWS handle primitives, tools fill gaps', 'AWS philosophy', 25),
(509, '13:04', 'Code build with GitHub Actions or CircleCI', 'Code building', 25),
(510, '14:38', 'Flight control builds code or use pre-built image', 'Code building options', 25),
(511, '15:00', 'Create infrastructure with CDN, load balancer, Fargate', 'Infrastructure', 25),
(512, '15:53', 'ECS is AWS Kubernetes', 'ECS', 25),
(513, '16:23', 'Kubernetes handles containers, scaling, health', 'Kubernetes', 25),
(514, '19:40', 'Flight control handles preview environments', 'Preview environments', 25),
(515, '21:02', 'Full backend and database for environments', 'Full stack environments', 25),
(516, '23:45', 'Adding one-off commands like Heroku', 'One-off commands', 25),
(517, '24:22', 'Simple cron jobs by running scripts', 'Cron jobs', 25),
(518, '25:31', 'Temporal is powerful workflow orchestration', 'Temporal workflows', 25),
(519, '26:51', 'Temporal simplifies complex async processes', 'Temporal simplifies', 25),
(520, '27:48', 'Change DNS to redirect traffic for no lock-in', 'No lock-in', 25),
(521, '28:36', 'Make platform composable and pluggable', 'Composable platform', 25),
(522, '29:22', 'Heroku buildpacks define app dependencies', 'Buildpacks', 25),
(523, '30:27', 'Nix Packs improves on buildpacks', 'Nix Packs', 25),
(524, '31:21', 'Nix Packs detects dependencies automatically', 'Dependency detection', 25),
(525, '32:10', 'Nix Packs optimizes Docker caching', 'Docker caching', 25),
(526, '34:00', 'Takes time to provision infrastructure', 'Provisioning time', 25),
(527, '34:24', 'Optimizing caching improves build speeds', 'Caching speeds', 25),
(528, '00:12', 'Scott and Wes introduce themselves and the podcast episode', 'Introductions', 26),
(529, '00:39', 'Scott talks about needing a beach vacation next week to refresh his brain', 'Beach plans', 26),
(530, '02:33', 'Wes says they just had an exciting interview about email that got him excited to get back into work', 'Exciting email interview', 26),
(531, '02:45', 'Scott likes to get back into work after vacations, and talks about ways he prepares on Sundays', 'Back to work routine', 26),
(532, '04:16', 'Wes says he doesn\'t get Sunday night anxiety about going back to work since he works for himself', 'No Sunday anxiety', 26),
(533, '05:13', 'Scott details his Sunday routine to set himself up for a successful work week', 'Sunday routine', 26),
(534, '06:02', 'Scott reads a question asking if TypeScript is just fancy duct tape', 'TypeScript question', 26),
(535, '11:28', 'Scott concludes TypeScript is a helpful tool but not a perfect all-knowing system', 'TypeScript not perfect', 26),
(536, '12:34', 'Wes reads a question asking for tips on programming without back pain', 'Back pain tips', 26),
(537, '14:22', 'Scott talks about the importance of posture and provides tips for improving posture at a computer', 'Posture tips', 26),
(538, '18:31', 'Scott suggests dynamic stretching in the morning to help prevent back pain', 'Dynamic stretching', 26),
(539, '20:10', 'Wes refers back to a previous episode on stretching for more tips', 'Past stretching tips', 26),
(540, '20:40', 'Wes and Scott discuss pillows and mattresses for proper spinal alignment', 'Pillows for posture', 26),
(541, '23:40', 'Scott notes how quickly breakdancing has professionalized now that it\'s going to be an Olympic sport', 'Breakdancing professionalization', 26),
(542, '24:03', 'Scott reads a question asking why cloud services don\'t automatically shut off when spending limits are reached', 'Cloud service spending limits', 26),
(543, '25:31', 'Wes suggests a regular server instead of serverless to set hard limits on resource usage', 'Regular server option', 26),
(544, '00:41', 'Tweet about too many divs on Threads launch went viral', 'Threads div tweet', 27),
(545, '03:10', 'CSS classes are for scoping styles', 'CSS scoping', 27),
(546, '08:30', 'Avoids CSS specificity issues', 'Avoids specificity', 27),
(547, '16:14', 'Too many divs makes CSS targeting difficult', 'Too many divs', 27),
(548, '23:16', 'Facebook tracks everything you do', 'Tracks everything', 27),
(549, '00:00', 'Intro banter about food', 'Intro', 28),
(550, '00:48', 'Ryan Florence joins to discuss Remix', 'Remix intro', 28),
(551, '01:04', 'Wes describes setting up his new office', 'Office setup', 28),
(552, '01:55', 'Wes describes breaking his collarbone on a surf simulator', 'Injury story', 28),
(553, '04:10', 'How Wes\' broken collarbone was surgically repaired', 'Surgery', 28),
(554, '05:45', 'Scott gets queasy hearing about injuries', 'Scott queasy', 28),
(555, '06:50', 'Ryan gives an overview of Remix', 'Remix overview', 28),
(556, '08:54', 'Remix uses standard web APIs for network layer', 'Web APIs', 28),
(557, '11:55', 'Remix server actions similar to Vercel serverless functions', 'Server actions', 28),
(558, '13:12', 'Remix form submission and data revalidation', 'Form revalidation', 28),
(559, '15:35', 'React adopting similar APIs to Remix', 'React adopting', 28),
(560, '15:56', 'History of Remix\'s licensing model', 'Licensing history', 28),
(561, '18:50', 'Remix licensing revenue', 'Licensing revenue', 28),
(562, '19:58', 'Venture capital interest during COVID', 'VC interest', 28),
(563, '00:39', 'Discussion on rid server side JavaScript runtimes', 'Runtimes', 29),
(564, '02:31', 'Wes\' wife loses her glasses often', 'Lost glasses', 29),
(565, '02:57', 'Glasses industry is a scam', 'Glasses scam', 29),
(566, '03:11', 'Scott gets fancy custom glasses', 'Fancy glasses', 29),
(567, '04:15', 'Overview of various server side JavaScript runtimes', 'Runtime overview', 29),
(568, '23:00', 'Web streams allow streaming data as it becomes available', 'Web streams', 29),
(569, '24:37', 'Canceling a fetch request with abort controller', 'Abort controller', 29),
(570, '26:19', 'Structured clone for deep cloning objects', 'Structured clone', 29),
(571, '31:22', 'Structured JSON maintains types when stringifying', 'Structured JSON', 29),
(572, '32:35', 'Would be nice to replace JSON with something that supports more types', 'Replace JSON?', 29),
(573, '38:55', 'File system API useful even if some runtimes don\'t support it', 'File system API', 29),
(574, '02:33', 'Red Green was a hilarious Canadian TV show about duct taping everything together', 'Red Green show', 30),
(575, '05:13', 'Found a $700 snare drum for $100 at a pawn shop in Montana', 'Snare drum find', 30),
(576, '10:27', 'Rust community seems to have standardized on using Cargo, unlike Python/JS communities', 'Cargo standard', 30),
(577, '14:07', 'Rust documentation is very code-heavy and functional, less hand-holdy than JS', 'Rust docs', 30),
(578, '18:17', 'Async/await in Rust is single-threaded like JavaScript, not multi-threaded', 'Async/await', 30),
(579, '20:45', 'Rust error handling via pattern matching is similar to JavaScript promise handlers', 'Error handling', 30),
(580, '23:38', 'Wish JS imports worked like Rust\'s use statements, specifying package first', 'Use statements', 30),
(581, '29:28', 'Double colon in Rust is like dot in JS, but for static methods vs instance methods', 'Double colon', 30),
(582, '02:20', 'Andres Reinman started Node Mailer 13 years ago', 'Node Mailer history', 31),
(583, '03:21', 'Node Mailer gets 2.7 million npm downloads per week', 'Node Mailer popularity', 31),
(584, '04:51', 'Email predates the web and was an early system needing to scale', 'Email history', 31),
(585, '05:58', 'Email and web evolved separately, hard to change email now', 'Email vs web', 31),
(586, '08:27', 'IMAP uses complex Lisp syntax unlike JSON in HTTP APIs', 'IMAP vs HTTP', 31),
(587, '09:57', 'SMTP requires many back-and-forth commands vs HTTP single request', 'SMTP vs HTTP', 31),
(588, '10:30', 'Email authentication standards like SPF and DKIM emerged over time', 'Email auth', 31),
(589, '15:35', 'DMARC checks sender address and validates SPF and DKIM', 'DMARC', 31),
(590, '23:04', 'Limited CSS support in email to prevent breaking client UIs', 'CSS issues', 31),
(591, '27:09', 'Unlikely email will change much due to backward compatibility needs', 'Email sticking around', 31),
(592, '29:49', 'Most email cost is for services/UX, not the sending itself', 'Email pricing', 31),
(593, '33:13', 'Big email users go through provider gateways, small users scrutinized', 'Spam prevention', 31),
(594, '35:18', 'Use major provider, contact support to resolve deliverability issues', 'Avoiding spam filters', 31),
(595, '36:36', 'Email Engine provides an API for sending and receiving email', 'Email Engine', 31),
(596, '38:09', 'Email Engine used by CRMs to sync user mailboxes', 'Email Engine use cases', 31),
(597, '42:23', 'Ethereal Email started as a way to test Nodemailer', 'Ethereal Email origin', 31),
(598, '45:25', 'Ethereal Email costs low by deleting messages quickly', 'Ethereal Email cost', 31),
(599, '47:31', 'Mac Mail useful for debugging with IMAP/SMTP logging', 'Mac Mail debugging', 31),
(600, '49:17', 'Andres has accounts with most major email providers', 'Andres\' accounts', 31),
(601, '50:05', 'Asian email providers can be tricky with custom systems', 'Asian email issues', 31),
(602, '00:43', 'Wes introduces himself and Scott', 'Intros', 32),
(603, '01:02', 'Scott spent July 4th with family outdoors', 'July 4th', 32),
(604, '02:33', 'Wes is at his cottage working', 'Wes at cottage', 32),
(605, '03:06', 'Transpiling converts newer syntax to older syntax', 'Transpiling', 32),
(606, '04:16', 'Scott explains polyfill vs ponyfill', 'Polyfills', 32),
(607, '05:26', 'Transpiling converts language to same language - JS to JS', 'Transpiling JS', 32),
(608, '07:08', 'Transpile JS features with new syntax like arrow functions', 'Transpile syntax', 32),
(609, '08:19', 'Transpile TypeScript to JavaScript', 'TypeScript', 32),
(610, '09:06', 'Be careful transpling unapproved features', 'Transpiling caution', 32),
(611, '12:01', 'Transpile CSS by replacing properties', 'Transpile CSS', 32),
(612, '13:12', 'Polyfilling CSS is harder than JS polyfilling', 'CSS polyfills', 32),
(613, '15:08', 'Polyfills add runtime functionality missing in environment', 'Polyfills', 32),
(614, '16:21', 'Polyfill array methods and promises vs transpile async/await', 'Polyfill examples', 32),
(615, '17:14', 'Prefer immutability over mutating data', 'Immutability', 32),
(616, '18:23', 'Scott advocates avoiding mutations', 'Avoid mutations', 32),
(617, '20:26', 'Polyfilling CSS can impact performance', 'CSS performance', 32),
(618, '21:13', 'Scott polyfilled popover API on Syntax site', 'Popover polyfill', 32),
(619, '23:22', 'Polyfills require minimal code', 'Minimal polyfills', 32),
(620, '24:58', 'HTML needs polyfills for details and picture tags', 'HTML polyfills', 32),
(621, '27:50', 'Transpile with Babel, TypeScript, CoffeeScript', 'Transpilers', 32),
(622, '31:14', 'Civet is advanced alternative to CoffeeScript', 'Civet', 32),
(623, '32:18', 'JSX Transformer compiles JSX', 'JSX Transformer', 32),
(624, '33:04', 'Svelte compiles to JS', 'Svelte', 32),
(625, '34:13', 'Polyfill with Polyfill.io based on user agent', 'Polyfill.io', 32),
(626, '35:00', 'CoreJS polyfills environment differences', 'CoreJS', 32),
(627, '35:08', 'Polyfill promises, transpile async/await', 'Promise polyfill', 32),
(628, '37:10', 'HTML5 shim was renamed to shiv', 'HTML5 shim/shiv', 32),
(629, '38:40', 'Monkey patching modifies code without merging', 'Monkey patching', 32),
(630, '39:37', 'Patch node_modules or overwrite module functions', 'Patching methods', 32),
(631, '41:11', 'Some dislike monkey patching', 'Patching dislike', 32),
(632, '43:37', 'Best to fork and modify vs monkey patch', 'Fork instead', 32),
(633, '44:00', 'Wes added method to Node console', 'Console patching', 32),
(634, '45:15', 'Patching has risks but can be useful', 'Patching risks', 32),
(635, '46:33', 'Some consider patching bad practice', 'Patching warnings', 32),
(636, '47:34', 'MooTools modified native prototypes dangerously', 'MooTools prototypes', 32),
(637, '49:13', 'Wes recommends a Miro air purifier', 'Miro purifier', 32),
(638, '51:28', 'Scott advocates cable sleeves for organization', 'Cable sleeves', 32),
(639, '55:13', 'Get cheap sleeves on AliExpress', 'Cheap sleeves', 32),
(640, '57:26', 'Wes plugs his courses', 'Wes courses', 32),
(641, '57:41', 'Scott plugs Sentry', 'Sentry', 32),
(642, '00:36', 'Toast, flash and form validation', 'Feedback', 33),
(643, '02:04', 'WordPress contact form issue', 'Form feedback', 33),
(644, '04:17', 'Scott\'s embarrassing ATM check story', 'ATM', 33),
(645, '05:40', 'Types of toast messages', 'Toast types', 33),
(646, '07:47', 'Client vs server side flash messages', 'Flash messages', 33),
(647, '12:20', 'Using icons in toasts', 'Toast icons', 33),
(648, '14:14', 'Friendly error messages for users', 'Error messages', 33),
(649, '19:16', 'Auto closing toast messages', 'Toast timeouts', 33),
(650, '20:27', 'Stacking / queuing toast messages', 'Stacked toasts', 33),
(651, '26:58', 'Form validation best practices', 'Form validation', 33),
(652, '29:19', 'Indicating form errors clearly', 'Form errors', 33),
(653, '31:44', 'Specifying the error clearly', 'Error specificity', 33),
(654, '34:34', 'Using HTML5 input validation', 'HTML validation', 33),
(655, '36:40', 'Custom form validation messages', 'Custom validation', 33),
(656, '00:51', 'Jake Champion works at Fastly.', 'Intro', 34),
(657, '02:33', 'Jake helps maintain Polyfill.io.', 'Jake', 34),
(658, '02:54', 'Polyfill.io serves browser polyfills.', 'Polyfill.io', 34),
(659, '04:15', 'Polyfill.io serves a lot of traffic.', 'Traffic', 34),
(660, '06:09', 'Fastly ComputeEdge runs WebAssembly.', 'ComputeEdge', 34),
(661, '07:58', 'Fastly has official SDKs for languages.', 'SDKs', 34),
(662, '09:50', 'WASM provides good security guarantees.', 'Security', 34),
(663, '14:08', 'Edge functions help with IoT latency.', 'IoT', 34),
(664, '21:37', 'WASI extends what WASM can do.', 'WASI', 34),
(665, '25:04', 'WebAssembly is well suited for everything.', 'WASM', 34),
(666, '27:54', 'Browsers don\'t implement WASI yet.', 'Browsers', 34),
(667, '31:43', 'Nothing is inherently bad for WASM in browsers.', 'Limitations', 34),
(668, '37:18', 'Preferred stack is Fastly + Hono + Worker Tools.', 'Stack', 34),
(669, '40:38', 'Vite could be run on-demand on edge.', 'Vite', 34),
(670, '42:22', 'Fastly pre-initializes JS runtimes.', 'Initialization', 34),
(671, '00:20', 'New feedback and clarifications section', 'New segment', 35),
(672, '00:38', 'Scott terrorized by man in monster truck', 'Scott story', 35),
(673, '03:27', 'Feedback on electronics episode', 'Episode feedback', 35),
(674, '04:45', 'Corrections on CSS initial vs unset', 'CSS corrections', 35),
(675, '15:05', 'Modifying CSS variables from React', 'React CSS question', 35),
(676, '19:18', 'JavaScript notebooks', 'Notebooks', 35),
(677, '23:55', 'Domain broker wants to buy listener\'s domain', 'Domain question', 35),
(678, '28:06', 'Syntax podcast transcription update', 'Transcriptions', 35),
(679, '29:25', 'Tips for learning web development as a new parent', 'Learning tips', 35),
(680, '36:50', 'How to determine fair price when selling a domain', 'Selling domains', 35),
(681, '00:35', 'Famous things not to do when asking for help', 'Help tips', 36),
(682, '02:00', 'Provide reproduction of the issue', 'Reproduce bug', 36),
(683, '03:28', 'Reproducing illuminates the problem', 'Debugging help', 36),
(684, '04:08', 'Post code so others can run it', 'Share code', 36),
(685, '05:21', 'Have reproduction ready when asking', 'Have repro ready', 36),
(686, '06:18', 'Online reproduction is most helpful', 'Online repro best', 36),
(687, '07:24', 'Be responsive in chat for quick help', 'Respond in chat', 36),
(688, '08:11', 'Where to ask for help on libraries', 'Where to ask', 36),
(689, '09:25', 'Don\'t just +1 an existing issue', 'Don\'t just +1', 36),
(690, '10:32', 'Search for similar issues first', 'Search first', 36),
(691, '10:58', 'Be nice even when frustrated', 'Be nice', 36),
(692, '12:25', 'You\'re borrowing others\' code', 'Borrowing code', 36),
(693, '13:34', 'Frustration doesn\'t help anyone', 'Frustration unhelpful', 36),
(694, '14:26', 'Provide lots of context', 'Provide context', 36),
(695, '15:03', 'Always be respectful', 'Be respectful', 36),
(696, '00:39', 'This episode talks Supper Club × val.town with Steve Krause', 'val.town', 37),
(697, '01:27', 'Introduction of guest Steve Krause and val.town platform', 'intro', 37),
(698, '03:16', 'Val town is social website to write and run code', 'val.town', 37),
(699, '05:17', 'val is function that runs when hit', 'val', 37),
(700, '08:00', 'val town inspired by simplicity of Twitter', 'twitter', 37),
(701, '09:18', 'val town research into programming languages', 'research', 37),
(702, '12:09', 'Val town code runs on Deno', 'deno', 37),
(703, '18:27', 'APIs automatically generated for each val', 'APIs', 37),
(704, '23:28', 'Data store limitations of val town', 'data', 37),
(705, '26:53', 'Careful approach to UI in val town', 'UI', 37),
(706, '32:11', 'Val town runs on Render servers', 'render', 37),
(707, '34:31', 'Uses Render Postgres database', 'postgres', 37),
(708, '37:36', 'Common val town use case is IoT and home automation', 'IoT', 37),
(709, '40:19', 'Pull jobs and webhooks are common use case', 'webhooks', 37),
(710, '44:11', 'Recommended books - Seymour Papert, Brett Victor, Dynamic Land', 'books', 37),
(711, '47:41', 'Teaching kids to code - start with Scratch', 'teaching', 37),
(712, '52:03', 'Learning coding is personal - customize based on goals', 'personalized', 37),
(713, '57:29', 'Try out val town and join Discord community', 'community', 37),
(714, '00:20', 'Scott and Wes use AI to generate interview questions to ask each other', 'AI interview questions', 38),
(715, '02:39', 'Discussion on the history of Netflix launching DVD rentals before streaming', 'Netflix history', 38),
(716, '03:04', 'Question on which HTTP status code indicates a resource was not found', 'HTTP status codes', 38),
(717, '05:18', 'Question on the JavaScript function to delay execution', 'Delay function', 38),
(718, '06:13', 'Question on who first proposed CSS as a separate style sheet language', 'CSS history', 38),
(719, '09:13', 'Discussion on event driven programming in Node.js', 'Node.js events', 38),
(720, '10:36', 'Question on JavaScript memory safety and managing memory', 'Memory safety', 38),
(721, '13:21', 'Discussion on JavaScript prototype inheritance', 'JS inheritance', 38),
(722, '16:07', 'Question on closures in JavaScript', 'JS closures', 38),
(723, '18:22', 'Question on Node.js modules for asynchronous file I/O', 'Node.js async', 38),
(724, '21:37', 'Discussion on optimization techniques for HTML5 video', 'HTML5 video tips', 38),
(725, '23:12', 'Question on HTTP/2 and multiplexing', 'HTTP/2', 38),
(726, '31:05', 'Question on the value of this in arrow functions', 'Arrow functions', 38),
(727, '33:11', 'Question on JavaScript task execution order', 'JS task order', 38),
(728, '35:13', 'Discussion on history of ECMAScript versions', 'JS history', 38),
(729, '39:26', 'Discussion on abandoned ECMAScript 4 proposal', 'ES4 history', 38),
(730, '41:42', 'Discussion on loose equality and type coercion in JS', 'JS equality', 38),
(731, '43:51', 'Question on early criticisms of CSS', 'CSS history', 38),
(732, '02:34', 'AI used for finding equivalent bolts and diagnosing TV issues', 'AI productivity', 39),
(733, '03:02', 'Using AI to generate SSL certificate for home server', 'AI certificates', 39),
(734, '04:16', 'CodeAI VSCode extension by Sourcegraph', 'CodeAI', 39),
(735, '05:16', 'CodeAI optimizes and documents code', 'CodeAI features', 39),
(736, '09:59', 'Amazon CodeWhisperer VSCode extension', 'CodeWhisperer', 39),
(737, '10:48', 'GitHub Copilot Labs VSCode extension', 'Copilot Labs', 39),
(738, '14:32', 'lintrule.com reviews code using AI', 'lintrule.com', 39),
(739, '15:27', 'lintrule.com is expensive at $1 per 1000 lines changed', 'lintrule pricing', 39),
(740, '18:15', 'opencommit.com generates Git commit messages with AI', 'opencommit', 39),
(741, '19:36', 'opencommit uses your OpenAI key for a small monthly cost', 'opencommit cost', 39),
(742, '21:15', 'Replit Ghostwriter is Replit\'s Copilot alternative', 'Ghostwriter', 39),
(743, '22:17', 'Replit released an open source AI model called Anthropic', 'Anthropic model', 39),
(744, '24:05', 'Codegeeks is an open source Copilot alternative', 'Codegeeks', 39),
(745, '26:37', 'Codeum AI is a Copilot alternative with on-premise option', 'Codeum AI', 39),
(746, '27:50', 'Codeum AI allows avoiding uploading code snippets to third parties', 'Codeum privacy', 39),
(747, '31:12', 'TabNine focuses on enterprise privacy-compliant AI coding', 'TabNine', 39),
(748, '32:26', 'ChatGPT can be prompted to provide formatted code and data', 'ChatGPT prompts', 39),
(749, '34:38', 'AI coding tools help accomplish tasks but don\'t write full code', 'AI limitations', 39),
(750, '35:08', 'Always validate AI-generated code before shipping', 'Validate AI code', 39),
(751, '00:17', 'Intro to Colby Fayock', 'Introduction', 40),
(752, '01:24', 'Colby\'s background in contracting and teaching', 'Background', 40),
(753, '02:01', 'Overview of Cloudinary as an image/video platform', 'Cloudinary', 40),
(754, '02:37', 'Cloudinary\'s URL based image transformations', 'Transformations', 40),
(755, '03:50', 'Colby\'s personal brand Space Jellyfish', 'Space Jellyfish', 40),
(756, '05:14', 'Cloudinary\'s AI image filling feature', 'AI fill', 40),
(757, '06:31', 'Cloudinary using Stable Diffusion for image generation', 'Stable Diffusion', 40),
(758, '08:58', 'Using AI to create custom video intros and outros', 'AI video', 40),
(759, '10:27', 'Cloudinary\'s stitching API to combine videos', 'Stitching API', 40),
(760, '13:17', 'Cloudinary\'s auto-tagging for media searchability', 'Auto-tagging', 40),
(761, '15:50', 'Most impressive Cloudinary AI feature is generative fill', 'Generative fill', 40),
(762, '17:10', 'Cloudinary\'s background removal feature', 'Background removal', 40),
(763, '19:52', 'Generating tweets from images using Cloudinary APIs', 'Image tweets', 40),
(764, '22:32', 'Creating Spotify Wrapped style yearly recap videos', 'Recap videos', 40),
(765, '26:21', 'Inconsistencies in AI responses over time', 'AI inconsistencies', 40),
(766, '28:19', 'Controlling randomness in AI responses', 'AI randomness', 40),
(767, '31:07', 'The unpick library for standardizing image components', 'Unpick', 40),
(768, '34:36', 'Keeping examples and documentation up-to-date', 'Documentation', 40),
(769, '36:31', 'Power of URL-based image transformations', 'URL transformations', 40),
(770, '38:45', 'Colby\'s video creation process and tools', 'Video process', 40),
(771, '41:20', 'Colby\'s video recording setup', 'Recording setup', 40),
(772, '45:12', 'Colby\'s dev environment and staying up to date', 'Dev environment', 40),
(773, '47:18', 'Advice for new parents on sleep deprivation ', 'Parenting advice', 40),
(774, '47:52', 'Advice for beginners to keep building projects', 'Beginner advice', 40),
(775, '49:44', 'Creating evergreen tutorial content', 'Evergreen content', 40),
(776, '51:34', 'Most popular YouTube videos', 'Popular videos', 40),
(777, '02:33', 'Wes talks about hailstorm damage in Colorado', 'Hailstorms', 41),
(778, '03:27', 'Wes discusses the Tailwind Connect conference in Cambridge', 'Tailwind conference', 41),
(779, '05:39', 'Wes explains the struggle between functionality and customization with built-in browser components', 'Browser components', 41),
(780, '07:41', 'Wes gives an example of customizing a country dropdown component', 'Country dropdown', 41),
(781, '09:16', 'Wes demonstrates accessibility features of dropdowns using VoiceOver', 'Accessibility', 41),
(782, '10:49', 'Wes explains headless components provide accessibility for free', 'Accessibility', 41),
(783, '11:35', 'Wes introduces Downshift as an example of a headless dropdown component', 'Downshift', 41),
(784, '19:23', 'Wes mentions Parcel is building headless components', 'Parcel components', 41),
(785, '20:11', 'Wes talks about Tanner Linsley\'s TanStack table and virtualization libraries', 'TanStack', 41),
(786, '22:04', 'Scott notes the benefit of TanStack being framework-agnostic', 'Framework-agnostic', 41),
(787, '23:00', 'Wes says Headless UI provides unstyled components', 'Headless UI', 41),
(788, '25:08', 'Wes and Scott discuss why headless components aren\'t built as web components', 'Web components', 41),
(789, '26:32', 'Wes introduces the Shoelace web component library', 'Shoelace', 41),
(790, '32:31', 'Wes explains using WordPress headlessly', 'Headless WordPress', 41),
(791, '34:11', 'Wes talks about running headless Chrome in serverless functions', 'Serverless headless', 41),
(792, '36:18', 'Scott and Wes joke about ridiculous browser sizes', 'Browser sizes', 41),
(793, '39:02', 'Scott sick picks the Hacker News Recap podcast', 'Hacker News podcast', 41),
(794, '41:38', 'Wes and Scott listen to Spotify\'s AI-generated playlists', 'AI DJ', 41),
(795, '00:27', 'Introducing Lightning CSS', 'Intro', 42),
(796, '01:01', 'Lightning CSS overview', 'Overview', 42),
(797, '01:24', 'Lightning CSS features', 'Features', 42),
(798, '01:59', 'Lightning CSS vs Esbuild', 'Vs Esbuild', 42),
(799, '02:36', 'Why Lightning CSS is useful', 'Useful', 42),
(800, '03:03', 'Parcel background', 'Parcel', 42),
(801, '03:30', 'Replacing PostCSS with Lightning CSS', 'PostCSS', 42),
(802, '04:17', 'Lightning CSS performance', 'Performance', 42),
(803, '04:47', 'Lightning CSS efficiency', 'Efficiency', 42),
(804, '05:08', 'Color spaces in Lightning CSS', 'Color spaces', 42),
(805, '06:18', 'Improved color quality discussion', 'Color quality', 42),
(806, '07:27', 'CSS nesting in Lightning CSS', 'Nesting', 42),
(807, '07:46', 'CSS nesting limitations', 'Nesting limits', 42),
(808, '08:05', 'Future CSS nesting changes', 'Future nesting', 42),
(809, '08:35', 'Using PostCSS plugins with Lightning CSS', 'PostCSS plugins', 42),
(810, '09:00', 'Browserlist support', 'Browserlist', 42),
(811, '09:52', 'Vendor prefix handling', 'Vendor prefixes', 42),
(812, '10:23', 'Opera prefix discussion', 'Opera prefixes', 42),
(813, '10:40', 'Vendor prefix requirements', 'Vendor prefixes', 42),
(814, '10:54', 'Custom media queries', 'Custom media queries', 42),
(815, '11:42', 'Media query range support', 'Media query range', 42),
(816, '12:16', 'Media query range browser support', 'Range support', 42),
(817, '12:28', 'Transpiling frustration', 'Transpiling', 42),
(818, '13:06', 'Browser support complaints', 'Complaints', 42),
(819, '13:23', 'Transpilable features value', 'Transpilable value', 42),
(820, '14:36', 'Excitement about new CSS features', 'CSS excitement', 42),
(821, '15:08', 'Relative color functions', 'Relative colors', 42),
(822, '15:19', 'Relative color limitations', 'Relative color limits', 42),
(823, '15:28', 'Transpiling variables', 'Transpiling variables', 42),
(824, '15:56', 'CSS modules support', 'CSS modules', 42),
(825, '16:07', 'CSS modules adoption', 'CSS modules adoption', 42),
(826, '16:17', 'Single file component styles', 'SFC styles', 42),
(827, '16:48', 'CSS inlining', 'CSS inlining', 42),
(828, '17:37', 'CSS imports', 'CSS imports', 42),
(829, '18:02', 'CSS bundling', 'CSS bundling', 42),
(830, '18:42', 'Abandoned APIs episode idea', 'Abandoned APIs', 42),
(831, '19:36', 'Unused browser APIs', 'Unused APIs', 42),
(832, '19:48', 'Chrome flag usage', 'Chrome flags', 42),
(833, '20:06', 'Jonathan Neill tweet on attribute CSS', 'Attribute CSS', 42),
(834, '20:26', 'Conditional imports', 'Conditional imports', 42),
(835, '20:41', 'Conditional import implementation', 'Conditional imports implementation', 42),
(836, '21:24', 'Lightning CSS compilation', 'Compilation', 42),
(837, '21:37', 'Live CSS compilation issues', 'Live compilation issues', 42),
(838, '21:49', 'CSS layers', 'CSS layers', 42),
(839, '22:27', 'CSS layers overview', 'Layers overview', 42),
(840, '23:08', 'CSS layers use cases', 'Layers use cases', 42),
(841, '23:41', 'CSS specificity issues', 'Specificity issues', 42),
(842, '23:51', 'CSS selector discussion', 'CSS selectors', 42),
(843, '24:17', 'Merging CSS rules', 'Merging rules', 42),
(844, '24:58', 'Future CSS functions', 'Future functions', 42),
(845, '25:02', 'Text decoration thickness', 'Text decoration thickness', 42),
(846, '25:21', 'Text decoration tips', 'Text decoration tips', 42),
(847, '25:29', 'Text decoration browser support', 'Text decoration support', 42),
(848, '26:07', 'Text decoration units', 'Text decoration units', 42),
(849, '26:21', 'Text decoration recommendations', 'Text decoration recommendations', 42),
(850, '27:14', 'Lightning CSS summary', 'Summary', 42),
(851, '27:33', 'Lightning CSS in Vite', 'In Vite', 42),
(852, '28:50', 'Devin Abbott guest appearance', 'Devin Abbott', 42),
(853, '02:33', 'Guest built Flask and other popular Python libraries', 'Guest background', 43),
(854, '04:32', 'Queues allow postponing work by putting it into a queue to be processed later', 'Queues intro', 43),
(855, '05:18', 'Queues help distribute work to workers and prevent request handler overload', 'Queue benefits', 43),
(856, '06:15', 'Queues can run on separate infrastructure but often run on same servers', 'Queue infrastructure', 43),
(857, '07:11', 'Python Celery runs queued functions as tasks on the same servers', 'Python queues', 43),
(858, '08:41', 'Kafka queues require planning for scaling while RabbitMQ queues autoscale', 'Queue scaling', 43),
(859, '10:17', 'Amazon queues transactions to smooth workload', 'Amazon queues', 43),
(860, '13:34', 'Queues help retry failed external requests and smooth workload', 'Queue benefits', 43),
(861, '18:44', 'Queue design depends on the specific problem to solve', 'Queue design', 43),
(862, '20:22', 'Need to add queues when one queue overloads next queue downstream', 'Add queues', 43),
(863, '22:46', 'Backpressure throttles incoming load to prevent downstream overload', 'Backpressure', 43),
(864, '27:09', 'Sentry processes 300,000 requests per second, filtering with SDK backpressure', 'Sentry scale', 43),
(865, '30:34', 'Sentry queues route events by type - errors go to Kafka, metrics aggregated', 'Sentry queues', 43),
(866, '36:10', 'Sentry lacks visibility into complex queues and data flow', 'Sentry queues', 43),
(867, '37:25', 'Mobile SDKs are distributed queues outside Sentry\'s control', 'Mobile SDKs', 43),
(868, '40:13', 'Sentry lied to SDKs about quota to clear distributed queue backlog', 'Clear queues', 43),
(869, '44:25', 'Python leads in AI due to existing data science libraries', 'Python & AI', 43),
(870, '47:56', 'JavaScript ecosystem has high churn increasing SDK maintenance', 'JS ecosystem', 43),
(871, '51:55', 'Open source motivation follows project adoption more than passion', 'Open source', 43),
(872, '53:55', 'Ride hype cycles - master one thing until it\'s back in favor again', 'Learning advice', 43),
(873, '57:15', 'Python packaging is fragmented without clear standards', 'Python packaging', 43),
(874, '00:33', 'Scott went to the dentist early in the morning', 'dentist appt', 44),
(875, '01:57', 'Wes and Scott dread going to the dentist', 'hate dentist', 44),
(876, '02:43', 'Scott started tracking his flossing to improve his dental hygiene', 'floss tracking', 44),
(877, '03:04', 'Wes asks Scott what an ORM (Object Relational Mapper) is', 'what is orm', 44),
(878, '03:20', 'Scott explains ORM is a translation layer between a database and application code', 'orm explanation', 44),
(879, '04:35', 'Scott explains he removed Mongoose but ended up rebuilding a mini ORM', 'mini orm', 44),
(880, '05:01', 'Wes says he often removes packages but ends up rebuilding them', 'removing packages', 44),
(881, '05:28', 'Scott has a tendency to want to build things himself instead of using existing packages', 'build vs reuse', 44),
(882, '06:08', 'Wes says ORMs allow writing the same database code across different database types', 'orm portability', 44),
(883, '06:45', 'Wes guesses the first ORM was developed in 1971 by IBM', 'first orm', 44),
(884, '07:01', 'Scott says one of the earliest ORMs was in the 1960s by SDC', 'early orm', 44),
(885, '08:15', 'Wes used to write SQL Server queries but now prefers ORMs', 'prefer orm', 44),
(886, '09:07', 'Scott isn\'t confident writing raw SQL queries without an ORM', 'avoid raw sql', 44),
(887, '09:15', 'Scott says ORMs provide abstraction and ease of use for databases', 'orm abstraction', 44),
(888, '10:16', 'Scott had difficulty getting Mongoose schemas to integrate with GraphQL types', 'mongo graphql', 44),
(889, '11:09', 'Wes asks if ORM schemas are written in the ORM\'s language', 'orm schemas', 44),
(890, '11:11', 'Scott explains models define the data and generate schemas', 'models to schemas', 44),
(891, '12:26', 'Scott finds blurred lines between models, schemas, and other ORM concepts', 'model schema blurred', 44),
(892, '12:37', 'Scott says you model your data to fit the database with an ORM', 'data modeling', 44),
(893, '13:26', 'Wes explains some ORMs have validation beyond basic types', 'orm validation', 44),
(894, '14:40', 'Scott likes Prisma\'s ability to lint schemas for database compatibility', 'prisma linting', 44),
(895, '15:34', 'Wes says sharing schema types with GraphQL avoids duplication', 'shared types', 44),
(896, '16:19', 'Scott warns about creating deeply nested GraphQL schemas without DB understanding', 'graphql nested schemas', 44),
(897, '17:23', 'Scott ran into issues modeling roles as an iterable primitive in MySQL', 'mysql iterable primitive', 44),
(898, '18:12', 'Wes says WordPress doesn\'t use raw SQL queries', 'wordpress orm', 44),
(899, '18:35', 'Scott says Laravel has the Eloquent ORM', 'laravel orm', 44),
(900, '18:40', 'Scott says mature systems tend to have good ORMs', 'mature orm', 44),
(901, '19:24', 'Wes likes that Prisma generates types from the schema', 'prisma types', 44),
(902, '20:14', 'Scott had difficulty sharing types between Mongoose, GraphQL, and UI', 'sharing types difficulty', 44),
(903, '20:45', 'Scott now shares Prisma types between server and client', 'sharing prisma types', 44),
(904, '22:33', 'Scott wonders if typing subcomponents differently is ever beneficial', 'subcomponent types', 44),
(905, '24:41', 'Scott explains Prisma strengths like schema linting and nice docs', 'prisma strengths', 44),
(906, '25:24', 'Wes explains Drizzle\'s PlanetScale implementation', 'drizzle planetscale', 44),
(907, '26:19', 'Wes says many solutions will suffice for smaller use cases', 'simpler use cases', 44),
(908, '27:15', 'Scott clarifies Prisma has type validation, not custom validation', 'prisma validation', 44),
(909, '28:47', 'Wes says most databases today are MySQL, Postgres or MongoDB', 'common databases', 44),
(910, '29:17', 'Wes uses SQLite and Sequelize for quick demos without installations', 'sqlite demos', 44),
(911, '30:36', 'Wes sometimes uses SQLite instead of JSON for more control', 'sqlite vs json', 44),
(912, '31:29', 'Scott hasn\'t used Sequelize but it\'s popular and often updated', 'sequelize popular', 44),
(913, '32:30', 'Scott and Wes joke about unclear pronunciation in tech', 'pronunciation jokes', 44),
(914, '33:40', 'Wes says non-native English speakers speak better than them', 'non-native speakers', 44),
(915, '34:01', 'Scott doesn\'t like tools that require pronunciation guides', 'dislikes pronunciation guides', 44),
(916, '35:51', 'Wes is intrigued by Drizzle\'s serverless and inferencing capabilities', 'drizzle intrigued', 44),
(917, '37:11', 'Wes discusses building standards-based instead of Node specific', 'standards vs node', 44),
(918, '37:49', 'Scott says Figma had massive scale on a single Postgres instance', 'figma postgres', 44),
(919, '38:18', 'Wes suggests a show on supporting multiple JavaScript environments', 'javascript environments', 44),
(920, '39:27', 'Scott prefers Mongo aggregations to Mongoose populate', 'mongo aggregations', 44),
(921, '40:41', 'Wes finds Mongo aggregations very difficult compared to ORMs', 'mongo difficult', 44),
(922, '41:50', 'Scott regrets not using migrations for database changes', 'regret no migrations', 44),
(923, '43:26', 'Scott has run into issues debugging vague Prisma errors', 'prisma debugging', 44),
(924, '44:43', 'Wes keeps researching Drizzle\'s capabilities', 'researching drizzle', 44),
(925, '45:53', 'Scott introduces topic of database schemas', 'db schemas', 44),
(926, '46:50', 'Wes looks up the difference between schema and model', 'schema vs model', 44),
(927, '47:29', 'Scott says models define data structure and schemas represent it', 'models schemas', 44),
(928, '48:18', 'Scott explains migrations keep the database updated over time', 'db migrations', 44),
(929, '49:02', 'Scott has never looked at how Prisma handles migrations', 'prisma migrations', 44),
(930, '49:18', 'Wes says Prisma generates SQL migration files', 'prisma sql migrations', 44),
(931, '50:36', 'Wes has used virtual fields to transition old properties', 'virtual fields', 44),
(932, '51:14', 'Wes says some ORMs support middleware for hooks and events', 'orm middleware', 44),
(933, '52:03', 'Scott asks listeners for their preferred ORMs and why', 'favorite orms', 44),
(934, '52:32', 'Wes mentions new show I Think You Should Leave', 'new show', 44),
(935, '53:49', 'Scott loves I Think You Should Leave though his wife hates it', 'loves new show', 44),
(936, '54:58', 'Wes says show humor is hit or miss if you don\'t get it', 'show humor', 44),
(937, '55:20', 'Scott praises brilliance and comedy of I Think You Should Leave', 'praises show', 44),
(938, '55:55', 'Wes suggests Wise cards for easy travel currency conversion', 'wise cards', 44),
(939, '57:14', 'Scott jokes about the number of companies with owl logos', 'owl logos', 44),
(940, '57:30', 'Wes jokes about racing to get a pull request in first', 'racing prs', 44),
(941, '59:02', 'Scott says the show\'s humor is specific and not for everyone', 'specific humor', 44),
(942, '00:33', 'Google Domains is closing', 'Registrar closing', 45),
(943, '01:03', 'Discussing domain registrar features', 'Registrar features', 45),
(944, '12:07', 'Overview of top domain registrars', 'Registrars overview', 45),
(945, '13:18', 'Namecheap has fast support', 'Namecheap support', 45),
(946, '18:50', 'GoDaddy has poor UX', 'GoDaddy UX', 45),
(947, '23:19', 'Hover has phone support', 'Hover phone support', 45),
(948, '24:26', 'Name.com has old UI', 'Name.com UI', 45),
(949, '27:00', 'Cloudflare has cheap domains', 'Cloudflare pricing', 45),
(950, '28:13', 'How to transfer domains', 'Transfer domains', 45),
(951, '33:08', 'Domain name search tools', 'Domain search', 45),
(952, '38:17', 'Best registrar recommendations', 'Registrar recs', 45),
(953, '41:29', 'Overview of top registrars', 'Top registrars', 45),
(954, '01:14', 'Dustin introduces himself and talks about leading team at Gatsby, now at Netlify managing Valhalla/Netlify Connect', 'Dustin intro', 46),
(955, '02:18', 'Dustin has a 4 month old baby', 'New dad', 46),
(956, '02:46', 'Valhalla comes directly from Gatsby, not Netlify originally', 'Valhalla origin', 46),
(957, '04:10', 'GraphQL useful as unified data layer, especially for large companies', 'GraphQL benefits', 46),
(958, '05:07', 'Building apps with multiple CMS data sources is very challenging', 'CMS data challenges', 46),
(959, '08:17', 'Can establish relationships between different data sources', 'Data relationships', 46),
(960, '09:39', 'Webhooks used for updating data on changes, encourages teams to use them', 'Webhook updates', 46),
(961, '10:40', 'User authentication not supported at Valhalla launch', 'No auth support', 46),
(962, '13:40', 'Valhalla will have paid tiers but plans to open source SDK', 'Open source SDK', 46),
(963, '18:04', 'Won\'t prescribe GraphQL client initially, can use what you want', 'Any GraphQL client', 46),
(964, '26:09', 'Currently read-only data but want to expand to mutations in future', 'Future mutations', 46),
(965, '31:16', 'Low-code solutions are the future middle ground between pure dev and no-code', 'Low code future', 46),
(966, '36:32', 'React server components feel like a hard fork, upgrade is challenging', 'React server components', 46),
(967, '43:35', 'Gatsby focusing on performance, integrating with CMS data sources', 'Gatsby plans', 46),
(968, '50:06', 'Dustin uses Dracula Pro theme and Dank Mono font in VS Code', 'Editor setup', 46),
(969, '51:12', 'For new project, Dustin would use React and the web', 'New project stack', 46),
(970, '54:04', 'Dustin\'s home theater setup uses Ubuntu on old Intel NUC', 'Home theater setup', 46),
(971, '00:11', 'Potluck of questions', 'Potluck', 47),
(972, '00:20', 'Rate limiting, enums, authentication', 'Questions', 47),
(973, '00:29', 'Edge functions', 'Edge functions', 47),
(974, '01:14', 'Computer issues', 'Issues', 47),
(975, '01:56', 'JS Nation conference', 'Conference', 47),
(976, '02:38', 'Render Atlanta conference', 'Conference', 47),
(977, '04:01', 'Consuming rate limited APIs', 'Rate limiting', 47),
(978, '04:33', 'Exceeding rate limits', 'Rate limits', 47),
(979, '04:55', 'OpenAI API rate limits', 'API limits', 47),
(980, '02:05', 'AsyncLocalStorage added in Node 13', 'Node 13', 48),
(981, '02:13', 'Gaining momentum due to Async Context API proposal', 'Async Context API', 48),
(982, '02:38', 'Allows accessing context down call stack without passing refs', 'Access context', 48),
(983, '03:26', 'Example of passing context through nested functions', 'Nested context', 48),
(984, '04:06', 'Current way is passing references down call stack', 'Passing refs', 48),
(985, '04:25', 'Why frameworks don\'t use it yet for middleware', 'Middleware usage', 48),
(986, '05:00', 'Examples in SvelteKit and React', 'Examples', 48),
(987, '06:30', 'Use case: populating user from database in middleware', 'Middleware use case', 48),
(988, '07:02', 'Alternative is passing context object with issues', 'Context object issues', 48),
(989, '08:46', 'Not in other runtimes yet, needs JS proposal', 'JS proposal needed', 48),
(990, '10:18', 'Next.js uses it for cookies and headers', 'Next.js usage', 48),
(991, '10:46', 'Use cases: request IDs, user prefs, logging', 'Use cases', 48),
(992, '11:39', 'Example of logging show numbers without passing refs', 'Logging example', 48),
(993, '12:59', 'Can store anything - objects, maps, sets, timers', 'Store anything', 48),
(994, '13:33', 'Useful for promise chaining instead of passing data', 'Promise chaining', 48),
(995, '14:22', 'Downside is hard to test code relying on external data', 'Testing downside', 48),
(996, '15:00', 'Can also cause memory leaks if not cleaned up properly', 'Memory leaks', 48),
(997, '15:55', 'Useful for browser events instead of passing data around', 'Browser events', 48),
(998, '16:43', 'Expect best practices to emerge over next year', 'Emerging practices', 48),
(999, '00:26', 'Intro to Syntax Supper Club podcast', 'Intro', 49),
(1000, '00:50', 'Guest Nick Hehr talks JavaScript on microcontrollers', 'Guest intro', 49),
(1001, '02:02', 'Guest is a web developer who got into microcontrollers as a hobby', 'Guest background', 49);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(1002, '04:14', 'Overview of running JavaScript on devices vs Linux computers', 'JS environments', 49),
(1003, '06:34', 'Guest\'s first microcontroller project was running a Node server on a device', 'First project', 49),
(1004, '08:59', 'Guest started maintaining open source microcontroller projects', 'Open source', 49),
(1005, '11:54', 'Challenges of running latest Node.js on constrained devices', 'Node challenges', 49),
(1006, '13:27', 'Overview of Raspberry Pi Pico microcontroller', 'Pico intro', 49),
(1007, '15:04', 'Where to buy microcontroller boards', 'Buying boards', 49),
(1008, '16:23', 'Different versions of ESP32 boards', 'ESP32 versions', 49),
(1009, '18:16', 'Excess JavaScript engine targets 99% of JS spec', 'Excess engine', 49),
(1010, '20:07', 'Excess adds web-like APIs like web workers', 'Excess APIs', 49),
(1011, '21:30', 'Excess provides custom APIs instead of browser APIs', 'Excess browser APIs', 49),
(1012, '22:39', 'Standard for JS on embedded - ECMA-419', 'ECMA-419 standard', 49),
(1013, '24:03', 'Networking APIs being added to standard', 'Networking APIs', 49),
(1014, '25:45', 'Tool to simplify getting started with Excess', 'Excess CLI tool', 49),
(1015, '26:31', 'Overview of Arduino boards and platform', 'Arduino intro', 49),
(1016, '27:19', 'Library to simplify hardware APIs', 'Hardware library', 49),
(1017, '28:28', 'Fetch API implemented for microcontrollers', 'Fetch API', 49),
(1018, '30:16', 'CLI tool to setup Excess environment', 'Setup CLI', 49),
(1019, '32:13', 'Challenges around getting started as a beginner', 'Beginner challenges', 49),
(1020, '00:23', 'Talking about electronics for beginners', 'Electronics', 50),
(1021, '01:31', 'Scott is interested in learning more about electronics', 'Scott electronics', 50),
(1022, '02:17', 'Tip for using AirTags to track kids', 'AirTag kids', 50),
(1023, '04:02', 'Back to electronics discussion', 'Electronics', 50),
(1024, '05:10', 'Wes\' LED mirror project', 'LED mirror', 50),
(1025, '09:54', 'Wes\' Bluetooth boombox project', 'Bluetooth boombox', 50),
(1026, '12:04', 'Wes\' project fixing a broken dryer', 'Dryer project', 50),
(1027, '14:06', 'Wes hacked kids\' electric cars', 'Kids cars', 50),
(1028, '15:13', 'Wes converted a massage gun to battery power', 'Massage gun', 50),
(1029, '16:26', 'Overview of microcontrollers', 'Microcontrollers', 50),
(1030, '20:05', 'ESP32 microcontroller recommendation', 'ESP32', 50),
(1031, '20:27', 'Overview of DC and AC voltage', 'Voltage', 50),
(1032, '25:51', 'Overview of amperage and watts', 'Amps and watts', 50),
(1033, '32:22', 'Overview of GPIO pins', 'GPIO', 50),
(1034, '36:32', 'Overview of resistors', 'Resistors', 50),
(1035, '41:01', 'Overview of sensors', 'Sensors', 50),
(1036, '46:49', 'Overview of relays', 'Relays', 50),
(1037, '48:37', 'Coding microcontrollers', 'Coding', 50),
(1038, '50:19', 'Microcontroller coding resources', 'Resources', 50),
(1039, '51:16', 'Rust support for microcontrollers', 'Rust', 50),
(1040, '00:40', 'GitHub Projects overview', 'Projects', 51),
(1041, '02:26', 'Kids using adult lingo', 'Kids lingo', 51),
(1042, '04:13', 'GitHub Projects benefits', 'Projects benefits', 51),
(1043, '06:34', 'GitHub Projects views', 'Project views', 51),
(1044, '08:44', 'GitHub Projects like Notion', 'Like Notion', 51),
(1045, '10:23', 'Gantt charts', 'Gantt', 51),
(1046, '12:00', 'Using GitHub milestones', 'Milestones', 51),
(1047, '14:31', 'Using GitHub labels', 'Labels', 51),
(1048, '18:58', 'GitHub discussions', 'Discussions', 51),
(1049, '19:25', 'GitHub wiki', 'Wiki', 51),
(1050, '20:01', 'GitHub actions', 'Actions', 51),
(1051, '02:30', 'Joined OpenAI 8 months ago, started plugins project', 'Background', 52),
(1052, '03:25', 'Studied circle packing in math PhD', 'Math background', 52),
(1053, '06:26', 'Plugins allow adding integrations to ChatGPT', 'Plugins', 52),
(1054, '09:29', 'Models trained on predicting next word', 'Model training', 52),
(1055, '12:32', 'Models don\'t learn what people like without human feedback', 'Human feedback', 52),
(1056, '16:39', 'Mostly Python and React for development', 'Languages used', 52),
(1057, '20:05', 'Team working hard when ChatGPT blew up', 'ChatGPT launch', 52),
(1058, '25:49', 'Math teaches thinking in abstractions like programming', 'Math and programming', 52),
(1059, '31:30', 'Future could be crafts that don\'t scale like gardening', 'Future of work', 52),
(1060, '37:35', 'Higher level abstractions still need lower level code', 'Abstractions', 52),
(1061, '41:40', 'Randomness in outputs is a feature', 'Output randomness', 52),
(1062, '43:13', 'AGI is AI better than humans at all tasks', 'AGI definition', 52),
(1063, '00:33', 'Why Svelte moved from TypeScript to JSDoc', 'Svelte', 53),
(1064, '03:00', 'JSDoc provides full typing like TypeScript', 'Typing', 53),
(1065, '05:40', 'JSDoc can generate documentation', 'Docs', 53),
(1066, '08:11', 'JSDoc has no compile step', 'Compile', 53),
(1067, '09:14', 'JSDoc works in non-TS projects', 'Non-TS', 53),
(1068, '13:21', 'JSDoc can type thrown errors', 'Throws', 53),
(1069, '17:18', 'JSDoc supports inline examples', 'Examples', 53),
(1070, '20:16', 'JSDoc supports more descriptive comments', 'Comments', 53),
(1071, '22:02', 'JSDoc supports all TS features', 'TS Features', 53),
(1072, '26:08', 'Wes & Scott will keep using TS', 'Keep TS', 53),
(1073, '31:50', 'Use JSDoc with TS for more docs', 'JSDoc on TS', 53),
(1074, '03:45', 'Display none hides element and screen readers', 'Display none', 54),
(1075, '03:52', 'Visibility hidden hides visually but not screen readers', 'Visibility hidden', 54),
(1076, '04:12', 'Aria-hidden true hides from screen readers', 'Aria-hidden', 54),
(1077, '04:32', 'Opacity 0 visually hides like visibility hidden', 'Opacity 0', 54),
(1078, '05:34', 'Pointer events none prevents mouse interaction', 'Pointer events', 54),
(1079, '05:49', 'User select none prevents text selection', 'User select', 54),
(1080, '10:56', 'Font size 0 on parent removes inline element ghost space', 'Font size 0', 54),
(1081, '11:32', 'None explicitly states no value rather than 0 value', 'None vs 0', 54),
(1082, '18:18', 'Collapsing margins act as 0 margin', 'Collapsing margins', 54),
(1083, '18:36', '0 versus 0 units can break some CSS properties', '0 units', 54),
(1084, '23:03', 'HSLA needs 0% unit, can\'t take 0', 'HSLA 0%', 54),
(1085, '24:01', 'Unset inherits, initial is default browser style', 'Unset vs initial', 54),
(1086, '27:55', 'HTML no, none, false attributes need no value', 'HTML attributes', 54),
(1087, '02:39', 'GitHub Next started as the Office of the CTO to explore risky, long-term technology bets for GitHub.', 'GitHub Next origin', 55),
(1088, '03:44', 'GitHub Next explores technologies that engineering teams avoid due to risk, like AI that can write code.', 'GitHub Next purpose', 55),
(1089, '06:50', 'Copilot started small but exploded in popularity when released publicly in June 2021.', 'Copilot\'s growth', 55),
(1090, '09:04', 'The team was initially skeptical Copilot would be useful but were convinced after solving problems like reliability and latency.', 'Solving Copilot issues', 55),
(1091, '11:00', 'Larger AI models enable conversation-like persistence of context and information.', 'Larger model benefits', 55),
(1092, '13:21', 'Fast response time was critical for Copilot adoption as people wouldn\'t wait for suggestions.', 'Copilot latency', 55),
(1093, '18:05', 'Code structuring like hoisting is done to prompt models effectively.', 'Prompt crafting tricks', 55),
(1094, '21:11', 'Prompt crafting is an art with trial and error, not pure deterministic programming.', 'Prompt crafting challenges', 55),
(1095, '23:15', 'Smaller models can be better for some uses like Copilot where latency is critical.', 'Small model benefits', 55),
(1096, '26:33', 'The team tries not to take negative feedback personally but sees it as input to improve.', 'Addressing feedback', 55),
(1097, '30:00', 'New VS Code APIs were needed to enable Copilot features like ghost text.', 'VS Code API needs', 55),
(1098, '33:11', 'AI will augment developers, not replace them, by assisting on tedious tasks.', 'AI\'s future role', 55),
(1099, '37:37', 'Copilot for pull requests summarizes changes and generates descriptions to help collaboration.', 'Copilot pull requests', 55),
(1100, '39:02', 'Reliability remains a challenge for more ambitious AI tasks like full PR generation.', 'AI reliability challenges', 55),
(1101, '41:53', 'Workflow improvements may require rethinking existing software practices in light of new AI capabilities.', 'Rethinking software practices', 55),
(1102, '45:23', 'GitHub Next establishes trust and delivers value to bring other teams on board with their ideas.', 'Establishing trust', 55),
(1103, '49:31', 'They use a variety of keyboards, themes and terminals but value speed and usability.', 'Preferred tools', 55),
(1104, '53:34', 'They highlighted accessibility improvements and collaborative editing as areas for AI assistance.', 'AI opportunities', 55),
(1105, '57:48', 'Many are innovating in CLI AI space and sharing ideas openly.', 'CLI AI innovations', 55),
(1106, '00:17', 'Wes and Scott discuss website infrastructure', 'Website', 56),
(1107, '02:53', 'Scott switched to light mode', 'Light mode', 56),
(1108, '03:58', 'Website is built with SvelteKit', 'SvelteKit', 56),
(1109, '08:59', 'Using Prisma and PlanetScale for the database', 'Database', 56),
(1110, '17:04', 'Using PostCSS and import glob plugin', 'PostCSS', 56),
(1111, '18:27', 'Built custom OAuth authentication with GitHub', 'Auth', 56),
(1112, '23:15', 'Wes explains transcription process', 'Transcription', 56),
(1113, '00:28', 'JavaScript executables discussion', 'Executables', 57),
(1114, '01:10', 'What JavaScript executables are', 'Defining', 57),
(1115, '02:48', 'Use cases for JavaScript executables', 'Use cases', 57),
(1116, '04:40', 'Running JavaScript on non-JS servers', 'Non-JS servers', 57),
(1117, '05:44', 'Reaching Node from other languages', 'Reaching Node', 57),
(1118, '08:26', 'Criticisms and defense of executable size', 'Size defense', 57),
(1119, '10:22', 'Executable size comparisons to other languages', 'Size comparisons', 57),
(1120, '12:20', 'Potential for smaller JavaScript executables', 'Shrinking size', 57),
(1121, '13:46', 'Dino and Bun executables', 'Other runtimes', 57),
(1122, '02:33', 'Bramus Van Damme works at Google on the CSS team', 'Bramus intro', 58),
(1123, '03:49', 'The CSS Working Group creates CSS specifications', 'CSSWG', 58),
(1124, '04:13', 'Flexbox and Grid layout came from ideas in the CSSWG', 'Flexbox/Grid', 58),
(1125, '06:27', 'CSS Working Group finds issues from conferences and surveys', 'Finding issues', 58),
(1126, '07:57', 'CSS Nesting is now available in Chrome stable', 'Nesting', 58),
(1127, '12:10', 'Bramus started blogging in 1997 and has blogged for over 20 years', 'Bramus blogging', 58),
(1128, '14:21', 'Scroll-linked animations allow animations based on scrolling', 'Scroll animations', 58),
(1129, '15:52', 'Scroll animations can be done with just CSS', 'CSS scroll animations', 58),
(1130, '23:29', 'CSS foundations like Flexbox are key for new developers', 'Learning foundations', 58),
(1131, '30:28', 'Scope styling scopes selectors to components', 'Scope styling', 58),
(1132, '37:20', 'View transition API allows smooth DOM transitions', 'View transitions', 58),
(1133, '40:04', 'View transitions may work for multi-page apps soon', 'MPA transitions', 58),
(1134, '41:12', 'CSS nesting removed need for CSS preprocessors', 'Nesting benefits', 58),
(1135, '44:41', 'CSS mistakes wiki lists CSS decisions in hindsight', 'CSS mistakes', 58),
(1136, '00:02', 'Wes and Scott introduce the show', 'intro', 59),
(1137, '00:29', 'Wes talks about attending Reactathon conference', 'Reactathon', 59),
(1138, '05:12', 'Answering a question about using SvelteKit with Astro', 'SvelteKit & Astro', 59),
(1139, '07:51', 'Joke question about phone changing email password', 'joke question', 59),
(1140, '08:20', 'Answering a question about what can be put in CSS custom properties', 'CSS custom props', 59),
(1141, '16:38', 'Most exciting and challenging things about teaching programming', 'teaching programming', 59),
(1142, '22:01', 'Value of certifications for JavaScript developers', 'certifications', 59),
(1143, '26:54', 'Driving a culture of code quality on a team', 'code quality', 59),
(1144, '30:47', 'When to add Sentry to a new project', 'Sentry', 59),
(1145, '35:05', 'Why box-sizing border-box is not the default in CSS', 'box-sizing', 59),
(1146, '37:55', 'Using Lodash in Next.js applications', 'Lodash', 59),
(1147, '43:55', 'Converting AJAX requests to fetch API', 'AJAX to fetch', 59),
(1148, '45:18', 'Working with deprecated dependencies in React Native project', 'React Native dependencies', 59),
(1149, '50:57', 'Sick picks', 'sick picks', 59),
(1150, '00:21', 'Node modules folder size', 'Node modules', 60),
(1151, '01:31', 'What\'s in node_modules', 'Node modules content', 60),
(1152, '02:06', 'Shipping source files', 'Source files', 60),
(1153, '02:28', 'Syntax podcast transcripts', 'Transcripts', 60),
(1154, '02:35', 'Gzipping reduces size', 'Gzipping', 60),
(1155, '03:09', 'Text files are large', 'Text files', 60),
(1156, '04:30', 'Using DaisyDisk to analyze', 'DaisyDisk', 60),
(1157, '05:07', 'Publishing ESM vs CJS', 'Publishing', 60),
(1158, '06:24', 'Keeping source files', 'Source files', 60),
(1159, '08:06', 'AWS SDK types size', 'AWS SDK types', 60),
(1160, '08:42', 'TypeScript types for auto-complete', 'TypeScript types', 60),
(1161, '09:38', 'Polyfills for browser compatibility', 'Polyfills', 60),
(1162, '10:11', 'core-js polyfill size', 'core-js', 60),
(1163, '13:33', 'Babel plugins have large types', 'Babel types', 60),
(1164, '14:04', 'Shipping CJS, ESM and browser builds', 'Multiple builds', 60),
(1165, '15:08', 'Markdown files are large', 'Markdown', 60),
(1166, '15:51', 'Licenses must be included', 'Licenses', 60),
(1167, '15:58', 'Translation strings take space', 'Translations', 60),
(1168, '16:57', 'Floppy disk size reference', 'Floppy disk', 60),
(1169, '18:34', 'Bundling reduces size', 'Bundling', 60),
(1170, '19:42', 'Actual runtime code is small', 'Runtime code', 60),
(1171, '21:01', 'Use npm ignore', 'npm ignore', 60),
(1172, '21:44', 'Mable Preset Env reduces polyfills', 'Mable Preset Env', 60),
(1173, '23:00', 'npkill finds old unused modules', 'npkill', 60),
(1174, '23:35', 'Find and remove node_modules', 'Remove node_modules', 60),
(1175, '24:45', 'npkill UI for removing modules', 'npkill UI', 60),
(1176, '02:33', 'Introduction of Adam Argyle', 'Intro', 61),
(1177, '03:04', 'Discussion of new CSS units like Rex, Rick, and RLH', 'CSS Units', 61),
(1178, '04:53', 'Using root units for scaling based on user preferences', 'Root Units', 61),
(1179, '06:33', 'CSS has many relative units now', 'CSS Units', 61),
(1180, '08:25', 'Adam\'s new site gradient.style for designing CSS gradients', 'gradient.style', 61),
(1181, '11:13', 'Adding grain effects to gradients', 'Grain Effects', 61),
(1182, '12:45', 'Using HDR colors makes gradients look smooth', 'HDR Colors', 61),
(1183, '14:21', 'Style queries let you query custom property values', 'Style Queries', 61),
(1184, '15:45', 'Style queries for theming and component variations', 'Style Query Uses', 61),
(1185, '17:20', 'Style queries have partial browser support currently', 'Style Query Support', 61),
(1186, '19:09', 'Using Disney animation principles with CSS trig functions', 'Trig Functions', 61),
(1187, '20:53', 'Adam\'s live-transitions.pages.dev demo', 'Live Transitions', 61),
(1188, '23:49', 'View transitions for page transition animations', 'View Transitions', 61),
(1189, '26:15', 'Text wrap balance for harmonious text wrapping', 'Text Wrap Balance', 61),
(1190, '27:44', 'Text wrap pretty prevents widows and orphans', 'Text Wrap Pretty', 61),
(1191, '28:43', 'Cascade layers help organize styles', 'Cascade Layers', 61),
(1192, '31:12', 'Browser competition leads to new features', 'Browser Competition', 61),
(1193, '32:00', 'CSS pseudo-classes opened up new hook points', 'CSS Pseudo-classes', 61),
(1194, '33:25', 'CSS mixins being worked on', 'CSS Mixins', 61),
(1195, '35:24', 'Nesting divs without ampersand coming soon', 'Nesting Divs', 61),
(1196, '37:53', 'Frustrations with PostCSS configurations', 'PostCSS Frustrations', 61),
(1197, '39:34', 'Animating discrete properties like display', 'Animating Properties', 61),
(1198, '41:58', 'Using media query range syntax', 'Media Query Ranges', 61),
(1199, '42:52', 'No variable support in media query ranges yet', 'No MQ Variables', 61),
(1200, '44:16', 'Scroll start positions with CSS', 'Scroll Start', 61),
(1201, '45:25', 'Using custom properties for media queries', 'Custom MQ Properties', 61),
(1202, '47:26', 'Animation composition with keyframes', 'Animation Composition', 61),
(1203, '49:15', 'Motion blur with CSS proposal', 'Motion Blur', 61),
(1204, '50:27', 'New customizable select menu element', 'Select Menu Element', 61),
(1205, '51:53', 'Select menu will have slots', 'Select Menu Slots', 61),
(1206, '54:05', 'OneWheel electric skateboards', 'OneWheel', 61),
(1207, '55:11', 'Adam\'s website nerdy.dev', 'nerdy.dev', 61),
(1208, '55:14', 'Adam on Twitter @argyleink', '@argyleink', 61),
(1209, '00:38', 'Hosts Syntax website on various providers and his own misery', 'Testing providers', 62),
(1210, '01:31', '3 types of servers: Serverless, Serverfull, Edge', 'Server types', 62),
(1211, '02:14', 'Serverless explanation: code dormant until needed', 'Serverless', 62),
(1212, '03:51', 'Serverfull explanation: long running like local dev', 'Serverfull', 62),
(1213, '04:15', 'Edge explanation: runs closer to user location', 'Edge', 62),
(1214, '04:38', 'CICD and CDN explanation', 'CICD and CDN', 62),
(1215, '06:48', 'Cron jobs run scheduled tasks', 'Cron jobs', 62),
(1216, '07:19', 'Scaling explanation', 'Scaling', 62),
(1217, '07:58', 'Deploy previews explanation', 'Previews', 62),
(1218, '08:16', 'Serverless billing: runtime duration', 'Serverless billing', 62),
(1219, '09:49', 'Serverfull billing: provisioned resources', 'Serverfull billing', 62),
(1220, '10:08', 'Bandwidth billing', 'Bandwidth billing', 62),
(1221, '11:13', 'Major backend providers: AWS, Azure, GCP', 'Major providers', 62),
(1222, '12:01', 'FlightControl overview', 'FlightControl', 62),
(1223, '13:05', 'FlightControl deploys to your AWS account', 'FlightControl AWS', 62),
(1224, '13:39', 'FlightControl provides Vercel-like interface', 'FlightControl interface', 62),
(1225, '14:43', 'FlightControl manages AWS resources', 'FlightControl AWS resources', 62),
(1226, '15:31', 'FlightControl billing based on AWS usage', 'FlightControl billing', 62),
(1227, '16:26', 'Render good for Node.js apps', 'Render Node.js', 62),
(1228, '17:26', 'Render has CI, easy databases, auto-scaling', 'Render features', 62),
(1229, '18:32', 'Render instance migration caused issues', 'Render migration', 62),
(1230, '19:55', 'Node version mismatch caused Render crash', 'Render crash', 62),
(1231, '20:52', 'Multiple Render instances prevented downtime', 'Render redundancy', 62),
(1232, '23:46', 'Overall happy with Render', 'Render opinion', 62),
(1233, '24:01', 'Vercel popular for Next.js apps', 'Vercel Next.js', 62),
(1234, '24:53', 'Vercel has great developer experience', 'Vercel DX', 62),
(1235, '25:49', 'Vercel has performance optimizations', 'Vercel performance', 62),
(1236, '26:12', 'Vercel provides usage analytics', 'Vercel analytics', 62),
(1237, '26:35', 'Vercel billing per seat', 'Vercel billing', 62),
(1238, '27:14', 'Begin previously for serverless, now fullstack', 'Begin pivot', 62),
(1239, '27:48', 'Begin uses Arc standard', 'Begin Arc', 62),
(1240, '28:44', 'Heroku early lead, now fallen behind', 'Heroku outdated', 62),
(1241, '29:31', 'Heroku lacking innovation and reliability', 'Heroku lackluster', 62),
(1242, '30:51', 'Heroku pioneered auto-scale', 'Heroku auto-scale', 62),
(1243, '31:59', 'DigitalOcean provides full control VMs', 'DigitalOcean VMs', 62),
(1244, '32:18', 'DigitalOcean has CLI and UI to control VMs', 'DigitalOcean control', 62),
(1245, '33:13', 'DigitalOcean App Platform not great', 'DigitalOcean apps', 62),
(1246, '34:01', 'DigitalOcean has additional services', 'DigitalOcean services', 62),
(1247, '34:46', 'Some issues with DigitalOcean App Platform', 'DigitalOcean issues', 62),
(1248, '00:29', 'Introducing signals', 'Intro', 63),
(1249, '01:14', 'Signals are messages between app parts', 'Overview', 63),
(1250, '02:36', 'Signals are like browser events', 'Events', 63),
(1251, '04:08', 'Signals send messages from one app part to another', 'Messages', 63),
(1252, '04:43', 'Elsewhere a signal is received and does something', 'Received', 63),
(1253, '05:15', 'Signals are like browser event listeners', 'Listeners', 63),
(1254, '06:19', 'Signals alert parts of an app of changes', 'Alerts', 63),
(1255, '07:06', 'Signals are for alerting, not state management', 'Not State', 63),
(1256, '07:55', 'Signals allow sharing state more easily', 'Sharing', 63),
(1257, '09:37', 'Signals vs. Svelte stores', 'Svelte', 63),
(1258, '11:10', 'New frameworks using signals by default', 'New Frameworks', 63),
(1259, '11:30', 'Signals help you look outside React bubble', 'React Bubble', 63),
(1260, '12:34', 'Vanilla JS signals example', 'Vanilla JS', 63),
(1261, '15:59', 'Signals superpower vanilla JS', 'Superpower', 63),
(1262, '16:31', 'Vue and Svelte don\'t need signals', 'Vue & Svelte', 63),
(1263, '17:18', 'Signals don\'t have to change everything', 'No Need to Change', 63),
(1264, '18:13', 'Keep using what works for you', 'Use What Works', 63),
(1265, '01:55', 'Dylan works at Mux building video infrastructure for developers', 'Dylan\'s intro', 64),
(1266, '02:45', 'Mux Video abstracts away video processing complexity for developers', 'Mux Video', 64),
(1267, '03:20', 'Mux built their own video player as an easier solution for developers', 'Mux Player', 64),
(1268, '05:44', 'Mux processes videos quickly using just-in-time transcoding', 'Fast processing', 64),
(1269, '06:29', 'Mux chose web components for cross-framework compatibility', 'Web components', 64),
(1270, '08:16', 'Safari natively supports HLS, other browsers require MSE support', 'HLS support', 64),
(1271, '09:21', 'FFmpeg is used for video processing', 'FFmpeg', 64),
(1272, '13:17', 'Mux Data monitors video playback quality and metrics', 'Mux Data', 64),
(1273, '14:33', 'Mux integrates with CDNs for video delivery', 'CDN integration', 64),
(1274, '19:30', 'HLS streaming is the only good way to deliver video now', 'HLS streaming', 64),
(1275, '21:14', 'TikTok aggressively preloads video for fast scrolling', 'TikTok preloading', 64),
(1276, '23:40', 'Mux uses just-in-time transcoding to avoid wasted bandwidth', 'Just-in-time transcoding', 64),
(1277, '26:48', 'GPU transcoding is not much faster than CPU currently', 'GPU transcoding', 64),
(1278, '28:20', 'Mux powers video applications built with AI', 'Mux & AI', 64),
(1279, '30:30', 'Mux is foundational video infrastructure, hard to disrupt', 'Foundational service', 64),
(1280, '32:56', 'Mux exploring browser-based video clipping and streaming', 'Browser capabilities', 64),
(1281, '35:00', 'Mux Web Broadcaster records browser streams', 'Web Broadcaster', 64),
(1282, '37:43', 'Mux supports all input and optimized HLS output formats', 'Input/output formats', 64),
(1283, '40:22', 'MediaChrome provides modular web components for video players', 'MediaChrome', 64),
(1284, '43:27', 'MediaChrome can also be used to build audio players', 'Audio support', 64),
(1285, '45:06', 'Mux Data monitors video playback metrics and performance', 'Playback metrics', 64),
(1286, '47:40', 'Ad blockers prevent collecting playback metrics', 'Ad blockers', 64),
(1287, '51:23', 'Docs migrated to Next.js 13 and Tailwind', 'Next.js migration', 64),
(1288, '55:01', 'Self-driving taxis are live in San Francisco with Cruise', 'Self-driving taxis', 64),
(1289, '02:18', 'Wes and Scott discuss enjoying exploring new tech and coding experiments', 'Exploring new tech', 65),
(1290, '03:02', 'Wes and Scott agree the browser needs more customizable UI primitives', 'Browser UI primitives', 65),
(1291, '04:06', 'Wes dislikes the browser\'s date picker for its lack of flexibility and customization', 'Date picker issues', 65),
(1292, '05:31', 'Scott dislikes the video and audio elements for their lack of styleability', 'Video/audio issues', 65),
(1293, '08:13', 'Wes finds native alert/prompt/confirm modals frustrating on mobile when needing data from other apps', 'Mobile modal issues', 65),
(1294, '11:56', 'Scott found the dialog element pleasant to work with for its JavaScript API', 'Dialog JS API', 65),
(1295, '12:41', 'Scott finds the progress element simple and easy to add animated progress bars', 'Progress element', 65),
(1296, '14:32', 'Wes likes the range input for its built-in features like labels and ticks', 'Range input', 65),
(1297, '17:48', 'Wes discusses usefulness of checkbox/label pairing and :has selector', 'Checkbox tricks', 65),
(1298, '20:15', 'Scott explains Open UI is a community researching web UI controls and patterns', 'Open UI intro', 65),
(1299, '23:32', 'Open UI Component Matrix shows naming consistency across frameworks', 'Component matrix', 65),
(1300, '26:45', 'Wes and Scott discuss most common component names like button and modal', 'Common components', 65),
(1301, '30:42', 'Wes contrasts Open UI\'s collaborative research to browser\'s unilateral decisions ', 'Open UI benefits', 65),
(1302, '32:11', 'Wes examines Open UI\'s checkbox proposal including new indeterminate attribute', 'Checkbox proposal', 65),
(1303, '33:25', 'Scott learns of exclusive accordion pattern useful in product customization UIs', 'Exclusive accordian', 65),
(1304, '36:15', 'Wes demonstrates using CSS :has for accordion selection and deselection', ':has for accordions', 65),
(1305, '40:53', 'Scott finds Open UI select menu proposal allows for custom markup and styling', 'Select menu proposal', 65),
(1306, '42:43', 'Wes notes Open UI\'s focus on accessibility through standards instead of retrofitting', 'Accessibility focus', 65),
(1307, '44:39', 'Scott appreciates Open UI\'s design examples for various components', 'Design examples', 65),
(1308, '45:47', 'Scott wishes for standard switch component given mobile prevalence', 'Add switch standard', 65),
(1309, '46:15', 'Scott picks textured skins from FishSkyn for phones, laptops and tablets', 'FishSkyn skins', 65),
(1310, '48:23', 'Wes picks Flavacol popcorn seasoning and coconut oil for theater taste at home', 'Flavacol seasoning', 65),
(1311, '50:17', 'Scott likes adding M&Ms to popcorn', 'Popcorn toppings', 65),
(1312, '51:34', 'Wes now uses a saucepan instead of Whirly Pop for easier popcorn making', 'Saucepan popcorn', 65),
(1313, '03:03', 'Summary of other Twitter clones, including Mastadon, Nostr, Notes, Hello, Substack and Damo', 'Twitter clones', 66),
(1314, '03:18', 'Twitter clones often don\'t gain traction', 'Clones don\'t gain traction', 66),
(1315, '04:00', 'Blue Sky may not necessarily be the next Twitter', 'Blue Sky may not be next Twitter', 66),
(1316, '04:20', 'Elon Musk\'s takeover of Twitter is controversial', 'Elon\'s Twitter takeover', 66),
(1317, '05:25', 'Wes paid for Twitter blue checkmark for features like longer video uploads', 'Wes paid for blue check', 66),
(1318, '06:57', 'Twitter is now pay to play which is frustrating', 'Twitter pay to play', 66),
(1319, '08:04', 'Blue Sky app is built with React Native', 'React Native app', 66),
(1320, '08:24', 'React Native for web is a cool project', 'React Native web', 66),
(1321, '10:02', 'Blue Sky took off rapidly on Twitter', 'Blue Sky takes off', 66),
(1322, '11:43', 'Early Twitter was mostly devs, Blue Sky has similar feel', 'Blue Sky dev feel', 66),
(1323, '13:13', 'Jack Dorsey is an investor in Blue Sky', 'Jack Dorsey investor', 66),
(1324, '14:10', 'Blue Sky built on AT Protocol, an open standard', 'AT Protocol', 66),
(1325, '15:25', 'AT Protocol is decentralized and distributed', 'Decentralized protocol', 66),
(1326, '18:57', 'AT Protocol allows custom schemas', 'Custom schemas', 66),
(1327, '19:50', 'Federated servers possible with AT Protocol', 'Federated servers', 66),
(1328, '20:14', 'People want a single sign up place but ability to move data', 'Single sign up wanted', 66),
(1329, '22:27', 'Algorithms can be frustrating but also useful like TikTok', 'Algorithm pros and cons', 66),
(1330, '23:43', 'Standards struggle when people want custom features', 'Standards vs features', 66),
(1331, '24:05', 'Federated social media is next evolution', 'Federated social media', 66),
(1332, '27:50', 'No media, DMs yet on Blue Sky', 'No media or DMs', 66),
(1333, '28:41', 'Reporting system already in place on Blue Sky', 'Reporting system', 66),
(1334, '29:55', 'No blocking yet on Blue Sky', 'No blocking yet', 66),
(1335, '31:30', 'Blue Sky uses custom XRPC protocol', 'Custom XRPC', 66),
(1336, '32:37', 'Wes built Blue Sky bots and scrapers', 'Bots and scrapers', 66),
(1337, '34:08', 'Some users already exploiting following', 'Exploiting follows', 66),
(1338, '35:24', 'Early Twitter worms', 'Twitter worms', 66),
(1339, '36:18', 'Blue Sky could disappear or could be future of social', 'Uncertain future', 66),
(1340, '00:00', 'Intro to Syntax Supper Club podcast with guest Zach Lloyd, creator of Warp terminal', 'Intro', 67),
(1341, '01:14', 'Guest intro - Zach is a software engineer, former Google engineering lead, Warp founder', 'Guest intro', 67),
(1342, '02:30', 'Zach has worked at Google, startups, music studio, law school dropout', 'Zach\'s background', 67),
(1343, '03:31', 'Discussion of building Google Docs - client-server architecture, offline support, code sharing', 'Building Google Docs', 67),
(1344, '08:50', 'Google Docs moved to canvas rendering for performance instead of HTML', 'Google Docs canvas rendering', 67),
(1345, '13:31', 'Overview of Warp - reinventing terminal to be more intuitive and work better out of the box', 'Warp overview', 67),
(1346, '16:10', 'Warp built in Rust for performance instead of Electron, allows control over rendering', 'Warp in Rust', 67),
(1347, '18:16', 'Warp uses custom UI framework inspired by Flutter, may open source it', 'Warp UI framework', 67),
(1348, '23:22', 'Plan to compile Warp to WebAssembly for web version, challenges around threads and text layout', 'Warp on the web', 67),
(1349, '26:06', 'Warp integrates with existing shells using hooks, allows structured output with blocks', 'Warp shell integration', 67),
(1350, '31:25', 'Discussion of Warp design decisions like mouse support and inline command suggestions', 'Warp design decisions', 67),
(1351, '38:04', 'Possibility of Warp creating own fully integrated shell environment in the future', 'Warp custom shell', 67),
(1352, '39:38', 'Discussion of Warp\'s context-aware autocomplete and integrations with AI', 'Warp AI features', 67),
(1353, '46:49', 'Bullish on AI assistants in Warp to help with workflows and tasks', 'Warp AI assistants', 67),
(1354, '51:41', 'Upcoming Warp features for team collaboration and knowledge sharing', 'Warp team features', 67),
(1355, '52:21', 'Guest uses iMac, Microsoft split keyboard, VSCode', 'Guest\'s gear', 67),
(1356, '54:02', 'Guest is interested in using AI for music education', 'Guest\'s side project idea', 67),
(1357, '57:17', 'Guest\'s sick pick is the Tonal home fitness system', 'Guest\'s sick pick', 67),
(1358, '58:39', 'Guest plugs Warp hiring - designers, engineers, growth', 'Guest\'s shameless plug', 67),
(1359, '01:11', 'How codes distributed fairly', 'Fair code giveaway', 68),
(1360, '01:56', 'Admin features added quickly', 'Fast iteration', 68),
(1361, '02:35', 'Couldn\'t lose data', 'Reliable data', 68),
(1362, '02:40', 'Unique coupon codes important', 'Unique codes', 68),
(1363, '03:19', 'Needed to prevent code conflicts', 'No code conflicts', 68),
(1364, '03:39', 'Considered existing services initially', 'Existing services', 68),
(1365, '05:26', 'Success page captured hosts\' tone', 'Personalized tone', 68),
(1366, '05:57', 'Chose new stack to try out', 'New stack', 68),
(1367, '06:01', 'First time using PlanetScale', 'PlanetScale', 68),
(1368, '06:19', 'Ported utilities from other projects', 'Code reuse', 68),
(1369, '06:34', 'Prisma recommended for stack', 'Prisma recommended', 68),
(1370, '06:43', 'Hadn\'t used Prisma in years', 'New Prisma', 68),
(1371, '07:25', 'New favorite stack', 'Favorite stack', 68),
(1372, '07:32', 'Everything worked smoothly', 'Smooth workflow', 68),
(1373, '08:13', 'Schema design considerations', 'Schema design', 68),
(1374, '09:40', 'Middleware for auth, database, errors', 'Helpful middlewares', 68),
(1375, '10:05', 'High serverless usage on Vercel', 'Vercel usage', 68),
(1376, '10:20', 'Site got heavy traffic', 'Heavy traffic', 68),
(1377, '11:29', 'Effortless SvelteKit deployment', 'Easy deploy', 68),
(1378, '12:05', 'Avoided deployment issues', 'No deploy issues', 68),
(1379, '12:39', 'Quick domain setup', 'Fast domains', 68),
(1380, '13:16', 'Database schema design', 'Schema design', 68),
(1381, '14:01', 'Basic auth implementation', 'Basic auth', 68),
(1382, '15:49', 'Server hooks for auth', 'Auth hooks', 68),
(1383, '16:09', 'Helpful middlewares', 'Helpful middlewares', 68),
(1384, '16:24', 'Prisma middleware', 'Prisma middleware', 68),
(1385, '17:09', 'Client-server communication', 'Client-server', 68),
(1386, '18:12', 'PlanetScale connection pooling', 'Connection pooling', 68),
(1387, '18:22', 'PlanetScale eased scaling', 'Scaling eased', 68),
(1388, '18:37', 'Many concurrent instances', 'Concurrency', 68),
(1389, '19:30', 'Simple codebase', 'Simple code', 68),
(1390, '20:06', 'Unique coupon code generation', 'Unique codes', 68),
(1391, '20:27', 'Code format considerations', 'Code format', 68),
(1392, '20:53', 'Code status management', 'Code status', 68),
(1393, '21:50', 'Code distribution tracking', 'Code tracking', 68),
(1394, '22:30', 'Unpredictable IDs', 'Unpredictable IDs', 68),
(1395, '23:28', 'Address form improvements', 'Address form', 68),
(1396, '24:17', 'International order requirements', 'International orders', 68),
(1397, '25:39', 'Schema flexibility', 'Flexible schema', 68),
(1398, '26:14', 'Type safety', 'Type safety', 68),
(1399, '26:36', 'Quick ramp up', 'Quick ramp up', 68),
(1400, '27:47', 'Redirect handling', 'Redirects', 68),
(1401, '28:25', 'Built-in type safety', 'Built-in types', 68),
(1402, '29:10', 'Global state management', 'Global state', 68),
(1403, '29:58', 'Form submission handling', 'Form handling', 68),
(1404, '31:20', 'Progressive enhancement', 'Progressive enhancement', 68),
(1405, '31:53', 'Reusable form logic', 'Reusable forms', 68),
(1406, '32:57', 'Files kept in sync', 'Synced files', 68),
(1407, '33:28', 'Database getting hammered', 'Database load', 68),
(1408, '34:33', 'Blocking invalid requests', 'Block requests', 68),
(1409, '35:00', 'Small database usage', 'Low usage', 68),
(1410, '36:03', 'Not actually a heavy load', 'Moderate load', 68),
(1411, '36:29', 'Code permutation limits', 'Code permutations', 68),
(1412, '37:31', 'Checking codes against list', 'Code checklist', 68),
(1413, '38:13', 'Funny error messages', 'Funny errors', 68),
(1414, '38:37', 'Possible improvements', 'Possible improvements', 68),
(1415, '39:15', 'Cheap database pricing', 'Cheap db', 68),
(1416, '39:52', 'Minimal database usage', 'Low usage', 68),
(1417, '40:08', 'Database sharding', 'Sharding', 68),
(1418, '41:37', 'Handled unexpected load', 'Handled load', 68),
(1419, '42:03', 'Quick live updates', 'Live updates', 68),
(1420, '43:01', 'Botnets used', 'Botnets', 68),
(1421, '43:45', 'Security improvements', 'Security', 68),
(1422, '44:33', 'Reliability observations', 'Reliability', 68),
(1423, '45:09', 'Reasons for delayed open source', 'Delayed open source', 68),
(1424, '45:23', 'Minimal costs', 'Low costs', 68),
(1425, '45:39', 'No server costs', 'No server costs', 68),
(1426, '45:50', 'Free services used', 'Free services', 68),
(1427, '46:07', 'Framework productivity', 'Framework productivity', 68),
(1428, '00:35', 'Wes introduces RPC', 'intro', 69),
(1429, '01:56', 'Wes defines RPC', 'define', 69),
(1430, '02:41', 'Wes explains client-server RPC', 'client-server', 69),
(1431, '03:12', 'Scott clarifies RPC is a concept, not a spec', 'concept', 69),
(1432, '03:57', 'Wes says there are RPC standards/specs', 'standards', 69),
(1433, '04:59', 'Scott says RPC is gaining popularity due to React server components', 'React popularity', 69),
(1434, '06:00', 'Wes says React doesn\'t have RPC yet but it\'s being discussed', 'React RPC', 69),
(1435, '06:27', 'Wes explains calling server functions from client with RPC', 'call server', 69),
(1436, '07:00', 'Scott says Meteor used RPC', 'Meteor RPC', 69),
(1437, '08:45', 'Wes explains directly calling server functions from client', 'direct functions', 69),
(1438, '10:04', 'Wes mentions Solid JS server functions for RPC', 'Solid JS', 69),
(1439, '11:13', 'Wes compares RPC to REST', 'vs REST', 69),
(1440, '12:26', 'Wes gives drone control example', 'drone example', 69),
(1441, '13:27', 'Scott asks about multiple clients with RPC', 'multiple clients', 69),
(1442, '14:48', 'Wes explains multiple connections like websockets', 'multiple connections', 69),
(1443, '15:06', 'Scott asks about third party API access', 'third party access', 69),
(1444, '15:57', 'Wes talks about authentication options', 'authentication', 69),
(1445, '16:16', 'Scott explains trpc blurs RPC/REST', 'trpc', 69),
(1446, '17:23', 'Scott mentions great trpc episode', 'trpc episode', 69),
(1447, '17:46', 'Wes talks security considerations', 'security', 69),
(1448, '18:24', 'Scott says he likes RPC developer experience', 'dev experience', 69),
(1449, '00:39', 'Privacy policies and terms of service are needed for businesses with customers online', 'Policies needed', 70),
(1450, '03:54', 'Privacy policy explains how data is collected and used, terms of service sets rules for using a website', 'Difference in policies', 70),
(1451, '07:39', 'Terms of service apply when using a website, don\'t need explicit agreement', 'Terms of service', 70),
(1452, '23:10', 'Google Analytics 4 may be GDPR compliant but still high risk', 'GA4 GDPR risk', 70),
(1453, '48:31', 'Fined for using Google Fonts since not needed to display fonts', 'Google Fonts fined', 70),
(1454, '00:47', 'Wes intro question segment', 'Intro', 71),
(1455, '01:00', 'Scott has ear infection', 'Scott update', 71),
(1456, '01:31', 'Scott excited for new audio interface', 'New gear', 71),
(1457, '02:50', 'Scott getting Neumann MT48 audio interface', 'MT48', 71),
(1458, '03:23', 'New interface replaces multiple pieces of gear', 'Replaces gear', 71),
(1459, '04:33', 'Interface has presets and snapshots', 'Presets', 71),
(1460, '04:46', 'Interface uses Ethernet', 'Ethernet', 71),
(1461, '05:18', 'Interface is Thunderbolt', 'Thunderbolt', 71),
(1462, '06:22', 'Future processing with GPUs', 'GPU processing', 71),
(1463, '06:59', 'Plugins and subscriptions', 'Plugins', 71),
(1464, '07:13', 'Comparing audio interfaces', 'Comparisons', 71),
(1465, '00:29', 'CSS color functions', 'topic', 72),
(1466, '00:37', 'Practical CSS color functions', 'practical', 72),
(1467, '00:49', 'Excited about CSS color functions', 'excited', 72),
(1468, '01:01', 'Background on color profiles and specs', 'background', 72),
(1469, '01:42', 'Dynamic color generation', 'dynamic', 72),
(1470, '02:00', 'Benefits of dynamic color generation', 'benefits', 72),
(1471, '02:32', 'Full color systems from variables', 'systems', 72),
(1472, '03:14', 'Relative color syntax', 'relative', 72),
(1473, '03:30', 'Color spaces like RGB, HSL, LCH', 'spaces', 72),
(1474, '03:55', 'New color spaces reduce banding', 'banding', 72),
(1475, '04:09', 'Make colors lighter, darker, add opacity', 'modify', 72),
(1476, '05:15', 'Dream of dynamic color modification', 'dream', 72),
(1477, '05:41', 'Complementary and triadic color schemes', 'schemes', 72),
(1478, '06:24', 'Game changer for dynamic color gen', 'gamechanger', 72),
(1479, '06:51', 'Ensure text and background contrast', 'contrast', 72),
(1480, '07:15', 'Color contrast syntax', 'contrast', 72),
(1481, '07:49', 'Pick highest contrast automatically', 'highest', 72),
(1482, '08:17', 'Minimum contrast accessibility options', 'accessibility', 72),
(1483, '08:48', 'Color contrast fully in Safari', 'safari', 72),
(1484, '09:35', 'Color mix syntax', 'mix', 72),
(1485, '09:57', 'Color mix coming soon', 'coming soon', 72),
(1486, '11:07', 'Color level 5 module status', 'level 5', 72),
(1487, '11:36', 'Theming with new color features', 'theming', 72),
(1488, '11:58', 'Color space input vs output', 'input/output', 72),
(1489, '12:37', 'Wrapping color functions', 'wrapping', 72),
(1490, '13:33', 'Converting between color spaces', 'converting', 72),
(1491, '14:10', 'Wanting better color spaces automatically', 'better spaces', 72),
(1492, '14:54', 'Using feature queries', 'queries', 72),
(1493, '15:17', 'Color space comparison tools', 'comparison', 72),
(1494, '02:02', 'Nicholas Zakas created ESLint 10 years ago', 'ESLint history', 73),
(1495, '02:33', 'Zakas has contributed to dozens of JavaScript books over his career', 'Zakas career', 73),
(1496, '03:41', 'ESLint parses code into an AST and rules inspect the nodes they care about', 'How ESLint works', 73),
(1497, '04:04', 'Zakas created ESLint after facing an IE bug JSHint couldn\'t prevent', 'ESLint origin story', 73),
(1498, '08:41', 'ESLint was created to parse JS and analyze syntax to avoid bugs', 'ESLint purpose', 73),
(1499, '11:11', 'ESLint does scope analysis on top of AST traversal to enable some rules', 'Scope analysis', 73),
(1500, '20:48', 'ESLint config started simple but added features like extends made it complex', 'Config history', 73),
(1501, '26:28', 'Shareable config issues arose when npm stopped auto-installing peerDeps', 'Shareable config issues', 73);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(1502, '47:43', 'After coding skills matter less, soft skills like communication become critical', 'Soft skills matter', 73),
(1503, '52:22', 'Senior ICs must learn to communicate and lead, not just write more code', 'Senior IC skills', 73),
(1504, '00:11', 'Can vanilla CSS replace all Sass features?', 'Sass vs CSS', 74),
(1505, '00:59', 'Discussion on Easter weekend', 'Weekend chat', 74),
(1506, '02:32', 'Talking about Easter egg hunts', 'Egg hunts', 74),
(1507, '03:20', 'Seeing bunnies and other wildlife', 'Bunnies & wildlife', 74),
(1508, '04:13', 'Starting discussion on Sass features', 'Sass features', 74),
(1509, '09:57', 'CSS variables are better than Sass variables', 'Variables', 74),
(1510, '14:55', 'Native CSS nesting is here and good', 'Nesting', 74),
(1511, '23:22', 'CSS color functions are coming soon', 'Colors', 74),
(1512, '30:17', 'Looping not really needed nowadays', 'Looping', 74),
(1513, '39:07', 'Mixins can be replaced in CSS', 'Mixins', 74),
(1514, '44:12', 'CSS imports cause performance problems', 'Imports', 74),
(1515, '49:26', 'Lots of math functions now in CSS', 'Math', 74),
(1516, '55:23', 'No custom functions yet in CSS', 'Functions', 74),
(1517, '57:14', 'BEM syntax only in Sass for now', 'BEM syntax', 74),
(1518, '02:33', 'Intro to modals, popups, popovers', 'Intro', 75),
(1519, '03:43', 'Modals with own URLs', 'Modal URLs', 75),
(1520, '05:05', 'Reddit modal usage', 'Reddit modals', 75),
(1521, '07:19', 'Handling escape key press in modal', 'Escape handling', 75),
(1522, '08:15', 'Modals as bad UI excuse', 'Modals as UI excuse', 75),
(1523, '11:25', 'Modal dismiss types', 'Dismiss types', 75),
(1524, '15:25', 'Inert attribute', 'Inert', 75),
(1525, '17:28', 'Backdrop pseudo-element', 'Backdrop', 75),
(1526, '23:38', 'Animating dialog element', 'Animating dialog', 75),
(1527, '00:30', 'Guest introduces himself and Tomagui', 'Intro', 76),
(1528, '04:11', 'How styling works in React Native', 'Styling', 76),
(1529, '05:30', 'What is React Native Web', 'RN Web', 76),
(1530, '08:31', 'Surface area of Tomagui', 'Tomagui', 76),
(1531, '09:59', 'How Tomagui optimizes styles', 'Optimization', 76),
(1532, '13:20', 'CSS classes generated by Tomagui', 'CSS classes', 76),
(1533, '16:56', 'How the Tomagui docs are built', 'Docs', 76),
(1534, '23:11', 'How animations work in Tomagui', 'Animations', 76),
(1535, '26:39', 'Layout in React Native', 'Layout', 76),
(1536, '31:23', 'React Server Components and React Native', 'SSR', 76),
(1537, '37:29', 'Building native vs web apps', 'Native vs Web', 76),
(1538, '41:17', 'How guest stays up to date', 'Staying updated', 76),
(1539, '42:19', 'Advice for beginners', 'Advice', 76),
(1540, '45:27', 'Excited about future of web dev', 'Future', 76),
(1541, '00:43', 'Scott got a penguin tattoo', 'tattoo', 77),
(1542, '01:16', 'Syntax podcast joining Sentry', 'Sentry', 77),
(1543, '02:33', 'How the Sentry partnership started', 'partnership', 77),
(1544, '04:22', 'Wes has used Sentry for a long time', 'longtime user', 77),
(1545, '05:27', 'Podcast can now have Scott\'s full effort', 'full effort', 77),
(1546, '06:48', 'Podcast will remain free for all', 'stay free', 77),
(1547, '08:10', 'More video content coming', 'video coming', 77),
(1548, '09:31', 'Authenticity attracted Sentry to Syntax', 'authenticity', 77),
(1549, '12:00', 'Similar vibes between Sentry and Syntax', 'similar vibes', 77),
(1550, '16:25', 'Scott joining Sentry full-time', 'Scott full-time', 77),
(1551, '19:17', 'Can now think much bigger', 'think bigger', 77),
(1552, '22:26', 'Syntax vibe not changing', 'vibe stays', 77),
(1553, '24:02', 'David\'s background', 'David\'s background', 77),
(1554, '27:14', 'David still codes at Sentry', 'David codes', 77),
(1555, '30:23', 'Scott relates to David\'s passion', 'shared passion', 77),
(1556, '00:30', 'OAuth explained', 'OAuth', 78),
(1557, '02:02', 'OAuth allows authentication via another service', 'Auth', 78),
(1558, '05:28', 'OAuth involves multiple tokens for access', 'Tokens', 78),
(1559, '06:04', 'GitHub used as OAuth example', 'GitHub', 78),
(1560, '07:52', 'OAuth gives access to user data', 'Access', 78),
(1561, '11:20', 'Authorization code exchanged for access token', 'Exchange', 78),
(1562, '11:54', 'Access token used like API key', 'API key', 78),
(1563, '12:24', 'Refresh token gets new access token', 'Refresh', 78),
(1564, '13:34', 'Access token has expiration', 'Expires', 78),
(1565, '19:02', 'OAuth complex but better than custom auth', 'Better', 78),
(1566, '02:33', 'WordPress has changed a lot in the past 5 years', 'WordPress Changes', 79),
(1567, '05:27', 'Windows dev has gotten easier for WordPress', 'Windows Dev', 79),
(1568, '08:19', 'Most WordPress sites still use themes, but block editors are changing front-end', 'Themes vs Blocks', 79),
(1569, '10:25', 'Developers create custom blocks that correspond to editor blocks', 'Custom Blocks', 79),
(1570, '12:19', 'Theme JSON defines styles and presets for blocks', 'Theme JSON', 79),
(1571, '14:05', 'Headless WordPress works for some use cases, but can be limiting editorially', 'Headless WordPress', 79),
(1572, '16:26', 'Headless WordPress shines when content is reused across platforms', 'Cross-Platform Content', 79),
(1573, '17:43', 'WordPress can be used for applications, but may not always be the right tool', 'WordPress Apps', 79),
(1574, '20:05', 'Standard Git workflows used for most WordPress projects', 'Git Workflows', 79),
(1575, '21:45', 'Database migrated down from production, not up from local', 'Database Workflow', 79),
(1576, '23:41', 'WordPress moving away from jQuery dependence', 'jQuery Use', 79),
(1577, '25:17', 'Page speed optimizations allow sites to load quickly despite legacy scripts', 'Page Speed', 79),
(1578, '26:05', 'Webpack and other modern tools used for custom work', 'Build Tools', 79),
(1579, '27:40', 'Plugins handle their own dependencies and enqueuing', 'Plugin JavaScript', 79),
(1580, '28:30', 'WordPress can be hosted on most standard PHP hosts', 'Hosting Options', 79),
(1581, '30:06', 'Block editor provides WYSIWYG-like editing experience', 'Editing Experience', 79),
(1582, '31:40', 'Full site editing allows customizing all areas with blocks ', 'Full Site Editing', 79),
(1583, '32:08', 'Collaborative editing coming in next phase of block editor', 'Collaborative Editing', 79),
(1584, '00:51', 'Discussing how to prime ChatGPT to generate good interview questions', 'Priming ChatGPT', 80),
(1585, '02:33', 'ChatGPT asks a question on difference between for and while loops in JS', 'Loops question', 80),
(1586, '11:08', 'ChatGPT asks a question on difference between rem and em in CSS', 'CSS units', 80),
(1587, '13:22', 'ChatGPT asks a callback vs promise question claimed as expert level', 'Callback vs Promise', 80),
(1588, '15:03', 'ChatGPT asks a hoisting related function question claimed as expert level', 'Hoisting functions', 80),
(1589, '18:32', 'ChatGPT asks a GraphQL scalar types question', 'GraphQL scalars', 80),
(1590, '21:40', 'ChatGPT asks a Deno unstable APIs question', 'Deno unstable APIs', 80),
(1591, '26:50', 'More priming of ChatGPT for hard and obscure questions', 'Priming questions', 80),
(1592, '28:03', 'ChatGPT asks an aspect ratio CSS question', 'Aspect ratio CSS', 80),
(1593, '30:29', 'ChatGPT asks a Svelte beforeUpdate lifecycle hook question', 'Svelte lifecycle', 80),
(1594, '32:34', 'Asking ChatGPT for a hard TypeScript question', 'Priming TypeScript', 80),
(1595, '33:30', 'ChatGPT asks about differences between unknown and any in TS', 'unknown vs any', 80),
(1596, '34:46', 'ChatGPT asks a question on mapped types in TS', 'Mapped types TS', 80),
(1597, '02:17', 'import maps explained', 'import maps', 81),
(1598, '02:39', 'aliasing paths', 'alias paths', 81),
(1599, '03:01', 'aliasing node modules', 'alias node', 81),
(1600, '05:33', 'defining aliases in JSON', 'JSON aliases', 81),
(1601, '06:03', 'import maps are like directions', 'directions', 81),
(1602, '06:50', 'syntax thoughts', 'syntax', 81),
(1603, '07:11', 'import map syntax details', 'syntax details', 81),
(1604, '08:03', 'distinguishing local vs external', 'local vs external', 81),
(1605, '09:24', 'dependency resolution discussion', 'dependencies', 81),
(1606, '10:30', 'bundlers discussion', 'bundlers', 81),
(1607, '12:11', 'import maps work with bundlers', 'work with bundlers', 81),
(1608, '12:59', 'standard across tools is good', 'standardization', 81),
(1609, '14:13', 'how import maps work in Deno', 'Deno', 81),
(1610, '15:04', 'import maps and DEPSTAT', 'DEPSTAT', 81),
(1611, '15:51', 'SemVer in Deno import maps', 'SemVer', 81),
(1612, '16:26', 'standards over conventions', 'standards', 81),
(1613, '16:35', 'Node package.json in Deno', 'Node in Deno', 81),
(1614, '17:46', 'new filesystem API discussion', 'filesystem API', 81),
(1615, '18:31', 'filesystem API concerns', 'API concerns', 81),
(1616, '19:40', 'filesystem API use cases', 'API uses', 81),
(1617, '20:13', 'Node and subpath imports', 'subpath imports', 81),
(1618, '21:10', 'getting subpath into Node', 'subpath in Node', 81),
(1619, '21:37', 'Pathaliases in TypeScript', 'TypeScript', 81),
(1620, '22:23', 'Vite plugin for import maps', 'Vite plugin', 81),
(1621, '22:59', 'tree shaking concerns', 'tree shaking', 81),
(1622, '23:48', 'integrity hashes concern', 'integrity', 81),
(1623, '25:22', 'integrity proposal', 'integrity proposal', 81),
(1624, '25:35', 'ESLint resolver plugin', 'ESLint resolver', 81),
(1625, '26:09', 'VSCode auto import issue', 'VSCode import', 81),
(1626, '00:52', 'Introduction of Justin Fagnani', 'Intro', 82),
(1627, '02:33', 'Discussion on popularity of React vs web components', 'React/WC', 82),
(1628, '05:03', 'Explanation of what web components are', 'WC intro', 82),
(1629, '09:34', 'Were web components intended for direct use or with a layer like Lit', 'WC intent', 82),
(1630, '13:30', 'Overview of what Lit is', 'Lit intro', 82),
(1631, '18:39', 'Benefits of using a library with web components', 'WC lib', 82),
(1632, '23:14', 'Using web components in frameworks that don\'t use virtual DOM', 'WC frameworks', 82),
(1633, '24:35', 'How CSS scoping works in web components', 'WC CSS', 82),
(1634, '00:27', 'Sponsor: Sentry error tracking', 'Sponsor', 83),
(1635, '01:42', 'Apologizing for audio quality issues', 'Audio issues', 83),
(1636, '02:07', 'Should freelancers offer hosting and support?', 'Freelancing tips', 83),
(1637, '05:05', 'Pros and cons of offering continued support', 'Client support', 83),
(1638, '10:11', 'Testing animations in components', 'Testing animations', 83),
(1639, '10:39', 'Strategies for testing animations', 'Animation testing', 83),
(1640, '17:17', 'Choosing a front-end framework', 'Frameworks', 83),
(1641, '17:32', 'Criteria for evaluating frameworks', 'Framework criteria', 83),
(1642, '21:12', 'Using small functions for organization', 'Small functions', 83),
(1643, '21:37', 'Pros and cons of small vs large functions', 'Function sizes', 83),
(1644, '26:06', 'Taking notes while learning coding', 'Learning strategies', 83),
(1645, '26:24', 'Using Markdown files for note taking', 'Note taking', 83),
(1646, '30:20', 'Using CSS grid and gap properties', 'CSS grid', 83),
(1647, '01:16', 'Travis has decades of experience as a designer and thought leader', 'Travis background', 84),
(1648, '03:20', 'Travis worked at Google Search leading UX for crisis response', 'Travis at Google', 84),
(1649, '04:22', 'Travis discussing his modular synth hobby and YouTube channel', 'Travis hobbies', 84),
(1650, '05:49', 'Travis previously hosted Google Method podcast on design', 'Travis podcast', 84),
(1651, '06:43', 'Travis is redesigning the LevelUpTutorials website', 'Travis project', 84),
(1652, '07:53', 'Discussion on making AI tools feel more human', 'Humanizing AI', 84),
(1653, '11:53', 'Example of AI hallucinating extra content when transcribing a podcast', 'AI hallucinations', 84),
(1654, '13:00', 'Travis discusses context as key for quality AI outputs', 'AI and context', 84),
(1655, '14:08', 'Lowering the technical bar for artistry with AI tools', 'AI for art', 84),
(1656, '16:24', 'Travis becoming obsolete as developer after years away from coding', 'Obsolete developers', 84),
(1657, '17:22', 'AI giving Travis engineering skills back through natural language', 'AI for engineering', 84),
(1658, '19:48', 'Travis using AI in his work at YouTube Music for suggestions', 'YouTube Music AI', 84),
(1659, '23:18', 'Importance of positive context when working with AI tools', 'Positivity with AI', 84),
(1660, '26:18', 'Keeping humanity in interfaces as AI enhances capabilities', 'Humanity in interfaces', 84),
(1661, '30:50', 'Helping users articulate ideas to AI through thoughtful interfaces', 'Articulating ideas to AI', 84),
(1662, '34:06', 'Building context over time with AI assistants', 'Context with assistants', 84),
(1663, '36:01', 'Ways to customize AI models and tools to your needs', 'Customizing AI', 84),
(1664, '38:29', 'Putting your priorities into AI will shape the experience', 'Shaping AI experience', 84),
(1665, '00:37', 'Sentry for error tracking', 'Sentry', 85),
(1666, '01:38', 'Daylight savings impact', 'Daylight savings', 85),
(1667, '02:56', 'Should older developers switch careers?', 'Career change', 85),
(1668, '04:08', 'Advice for busy parent wanting to learn web dev', 'Learn web dev', 85),
(1669, '05:54', 'Well-paying but unhappy jobs', 'Unhappy jobs', 85),
(1670, '09:46', 'Feeling stuck in a high-paying job', 'Stuck jobs', 85),
(1671, '10:30', 'Write code quickly despite knowing solutions', 'Write code fast', 85),
(1672, '11:39', 'Typing speed and editor tips for faster coding', 'Code faster tips', 85),
(1673, '14:41', 'Tips for better web design with no design experience', 'Better web design', 85),
(1674, '19:16', 'Do you really need a SPA?', 'Need SPA?', 85),
(1675, '02:33', 'Discussing why you may need HTTPS locally', 'HTTPS locally', 86),
(1676, '05:17', 'Sentry sponsor ad', 'Sentry ad', 86),
(1677, '07:04', 'Localhost is a secure context by default', 'Localhost secure', 86),
(1678, '13:56', 'APIs requiring a secure context', 'Secure APIs', 86),
(1679, '15:02', 'Tunneling local dev server for outside access', 'Tunneling', 86),
(1680, '20:53', 'Popular tunneling tools like ngrok', 'Tunnel tools', 86),
(1681, '23:24', 'Cloudflare Tunnel details', 'Cloudflare Tunnel', 86),
(1682, '26:02', 'Custom domains with Cloudflare Tunnel', 'Custom domains', 86),
(1683, '02:21', 'Wes looking at server costs, eyeing AWS but finding it too complicated', 'AWS complexity', 87),
(1684, '02:45', 'AWS has many attempts at easier deployments but not in their DNA; focused on infrastructure not developers', 'AWS focus', 87),
(1685, '03:19', 'Dax\'s SST framework makes AWS approachable by handling complexity for users', 'SST framework', 87),
(1686, '04:14', 'Wes tweets asking if AWS improved in 12 years he\'s used it; gets mixed responses', 'AWS over time', 87),
(1687, '04:26', 'Wes wants to deploy serverless function to AWS but no easy build pipeline', 'AWS deployments', 87),
(1688, '04:51', 'AWS has many fragmented attempts at simplifying deployments', 'AWS simplifying', 87),
(1689, '05:18', 'AWS focused on infrastructure not day-to-day developer experience', 'AWS focus', 87),
(1690, '05:26', 'AWS scope is massive trying to serve every business unlike focused competitors', 'AWS scope', 87),
(1691, '07:06', 'Next.js hugely popular React framework, tied to Vercel hosting platform', 'Next.js overview', 87),
(1692, '07:43', 'Hosting Next.js anywhere but Vercel not always straightforward', 'Next.js hosting', 87),
(1693, '07:59', 'Open Next.js project enables self-hosting Next.js apps like on AWS', 'Open Next.js', 87),
(1694, '08:39', 'Fully serverless Next.js deployment has challenges vs. Vercel hosting', 'Serverless challenges', 87),
(1695, '09:09', 'Big gap deploying serverless Next.js yourself vs. Vercel\'s managed service', 'Self-managed gap', 87),
(1696, '09:45', 'Took lots of work to achieve 1:1 parity self-hosting Next.js', 'Parity work', 87),
(1697, '10:50', 'Open Next.js team doesn\'t actually use Next.js themselves, rely on community', 'Community reliance', 87),
(1698, '11:35', 'Next.js build outputs single function bundling all routes, not separate ones', 'Single function', 87),
(1699, '12:33', 'Bundling all routes into one function isn\'t ideal long-term', 'Bundle drawbacks', 87),
(1700, '13:14', 'At build time don\'t think about discrete functions, split later', 'Delay splitting', 87),
(1701, '14:44', 'Edge functions run on Cloudflare, not AWS, unlike main Next.js app', 'Edge locations', 87),
(1702, '15:03', 'To self-host edge must run in AWS with different constraints than Cloudflare', 'Edge constraints', 87),
(1703, '15:34', 'Vercel uses ideal architecture without constraints of self-hosting', 'Vercel flexibility', 87),
(1704, '16:12', 'Edge functions have limitations compared to Node.js environments', 'Edge limitations', 87),
(1705, '16:26', 'Edge functions have fast worldwide locations despite limitations', 'Edge benefits', 87),
(1706, '17:10', 'Cloudflare billing only for compute time, not waits like network I/O', 'Cloudflare billing', 87),
(1707, '17:50', 'Cloudflare billing seems limited at first but works at scale', 'Billing scale', 87),
(1708, '18:25', 'Cloudflare billing model allows serving multiple customers per second', 'Billing model', 87),
(1709, '19:29', 'Serverless pricing unintuitive, shift mindset from monthly to unit costs', 'Pricing mindset', 87),
(1710, '20:21', 'Serverless pricing very cheap in practice despite appearing expensive', 'Cheap pricing', 87),
(1711, '20:58', 'AWS serverless prices tend to go down over time, not up', 'AWS pricing', 87),
(1712, '05:41', 'Wes and Scott brainstorm ideas for a new Syntax website', 'Ideas', 88),
(1713, '12:44', 'Discussion on building a great search experience', 'Search', 88),
(1714, '19:29', 'Adding video components to Syntax', 'Video', 88),
(1715, '26:02', 'Integrating transcripts with the podcast player', 'Transcripts', 88),
(1716, '34:31', 'Surfacing good old Syntax content', 'Old content', 88),
(1717, '02:33', 'Web streams intro', 'Intro', 89),
(1718, '05:13', 'Web streams working group', 'WG', 89),
(1719, '09:31', 'Streaming large data', 'Data', 89),
(1720, '11:21', 'Streaming for performance', 'Perf', 89),
(1721, '15:33', 'Fetch API and streams', 'Fetch', 89),
(1722, '17:29', 'Readable streams', 'Readable', 89),
(1723, '18:13', 'File reader stream', 'File', 89),
(1724, '21:18', 'Media streams', 'Media', 89),
(1725, '22:07', 'Readable and writable streams', 'RW', 89),
(1726, '23:09', 'HTML rewriter API', 'HTML', 89),
(1727, '24:30', 'Stream locking', 'Locking', 89),
(1728, '27:19', 'Streams and fluid dynamics', 'Fluid', 89),
(1729, '28:26', 'Creating writable streams', 'Creating', 89),
(1730, '29:00', 'Text decoder stream', 'Text', 89),
(1731, '31:27', 'Awaiting entire stream', 'Await', 89),
(1732, '32:22', 'Compression stream API', 'Compression', 89),
(1733, '00:26', 'Introducing the Syntax Supper Club podcast', 'Intro', 90),
(1734, '00:39', 'Guest Eric Sartorius introduced', 'Guest intro', 90),
(1735, '01:03', 'Eric and Wes have known each other for a long time', 'Guest background', 90),
(1736, '01:33', 'Eric and Wes met through dance and have been coding together', 'Dance and coding', 90),
(1737, '01:40', 'Eric talks about his work and travel history', 'Eric\'s work', 90),
(1738, '02:00', 'Eric started coding 9 years ago to travel', 'Coding for travel', 90),
(1739, '02:10', 'Eric was a digital nomad for years traveling to 40 countries', 'Digital nomad', 90),
(1740, '02:50', 'Eric rarely stays in one place, always traveling', 'Always traveling', 90),
(1741, '03:00', 'Eric has traveled to 40 countries on all continents except Antarctica', '40 countries traveled', 90),
(1742, '03:50', 'Eric wants to climb the highest mountain in Antarctica', 'Climb Antarctica mountain', 90),
(1743, '04:20', 'Eric works while traveling, managing time zones and WiFi', 'Working while traveling', 90),
(1744, '04:53', 'Eric works with team members around the world', 'Global team', 90),
(1745, '05:16', 'Flexibility is key when working across time zones', 'Time zone flexibility', 90),
(1746, '06:00', 'Discussion on Eric\'s work habits and routines while traveling', 'Work habits while traveling', 90),
(1747, '06:41', 'Eric works from cafes, homes, wherever he can find WiFi and space', 'Finding workspaces', 90),
(1748, '07:14', 'Eric gives example of working in South Korea with good WiFi and cafes', 'Working in South Korea', 90),
(1749, '07:33', 'Eric was an English teacher overseas before coding and traveling', 'English teacher abroad', 90),
(1750, '07:56', 'Eric\'s work habits depend on the country he\'s visiting', 'Country-dependent habits', 90),
(1751, '08:17', 'In Korea Eric worked from different cafes every day', 'Cafes in Korea', 90),
(1752, '08:37', 'When Eric first started, he had a shoestring budget', 'Shoestring budget', 90),
(1753, '08:54', 'In Japan, cafes often don\'t have WiFi so Eric worked from home more', 'Japan work habits', 90),
(1754, '09:11', 'Discussion on how Eric researches places to work and live when traveling', 'Researching places to work', 90),
(1755, '09:37', 'Pre-pandemic Eric traveled with just a suitcase for years', 'Minimalist traveling', 90),
(1756, '10:14', 'Eric often booked one-way flights and figured out details after arriving', 'Booking one-way flights', 90),
(1757, '10:32', 'Now Eric bases in one place but travels 1 month at a time', 'Current travel habits', 90),
(1758, '10:54', 'Examples of Eric\'s spontaneous travel decisions and destinations', 'Spontaneous travel', 90),
(1759, '11:00', 'Eric\'s unpredictable location was surprising but didn\'t affect productivity', 'Unpredictable location', 90),
(1760, '11:22', 'Eric created routines not tied to environment for productivity', 'Routines for productivity', 90),
(1761, '12:00', 'Having a routine helps Eric work anywhere', 'Routine helps productivity', 90),
(1762, '12:20', 'Eric is currently based in Phoenix, Arizona', 'Based in Phoenix', 90),
(1763, '12:30', 'When Eric was in Denver, he only had basic exercise equipment', 'Minimalism in Denver', 90),
(1764, '13:00', 'The kettlebell Eric left in Denver is still being used', 'Leftover kettlebell', 90),
(1765, '13:29', 'Discussion on how Eric handles travel while interviewing for jobs', 'Interviewing and travel', 90),
(1766, '13:38', 'Some digital nomads hide their location but can get fired', 'Hiding location', 90),
(1767, '14:26', 'Eric works on contract through his company for more travel flexibility', 'Contract work', 90),
(1768, '14:50', 'Discussion on costs and budgeting while continually traveling', 'Budgeting while traveling', 90),
(1769, '15:28', 'Instagram portrayal of luxurious digital nomad life is not always realistic', 'Instagram vs reality', 90),
(1770, '15:44', 'When Eric started, he had a very small budget but visited 10+ countries in one year', 'Small budget', 90),
(1771, '16:12', 'One year Eric spent only $10k while visiting 10+ countries', '$10k budget', 90),
(1772, '16:43', 'It\'s possible to travel very cheaply and efficiently', 'Cheap efficient travel', 90),
(1773, '17:02', 'Food and healthcare are cheap in Southeast Asia', 'SE Asia costs', 90),
(1774, '17:12', 'In US and Europe food and healthcare are more expensive', 'US/Europe costs', 90),
(1775, '17:56', 'AirBnBs used to be very cheap for long term stays', 'Cheap AirBnBs', 90),
(1776, '00:17', 'Discussing website performance issues', 'Performance', 91),
(1777, '00:41', 'Scott\'s new split keyboard is causing typing issues', 'Keyboard', 91),
(1778, '01:37', 'Scott explains benefits of split keyboard', 'Ergonomics', 91),
(1779, '02:29', 'Custom macros and shortcuts on new keyboard', 'Macros', 91),
(1780, '03:03', 'Sentry can monitor website performance', 'Sentry', 91),
(1781, '03:43', 'Sentry performance metrics help identify slow pages', 'Metrics', 91),
(1782, '04:26', 'Sentry profiling helps debug server performance', 'Profiling', 91),
(1783, '05:23', 'What causes websites to be slow?', 'Causes', 91),
(1784, '05:42', 'Large homepage with 700 users causes slowness', 'Large Page', 91),
(1785, '06:16', 'Identifying the root cause of a slow website', 'Debugging', 91),
(1786, '06:53', 'Website request flow from client to server', 'Request Flow', 91),
(1787, '07:19', 'Serverless functions have cold start delays', 'Cold Start', 91),
(1788, '07:52', 'Server generates HTML and sends it back', 'HTML Generation', 91),
(1789, '08:03', 'Complexity of loading a modern website', 'Complexity', 91),
(1790, '09:17', 'Caching database queries can improve speed', 'Caching', 91),
(1791, '09:44', 'Concurrent database requests speed things up', 'Concurrency', 91),
(1792, '10:43', 'Using console.time to measure server speed', 'Console Time', 91),
(1793, '12:48', 'Right server hardware improves performance', 'Hardware', 91),
(1794, '13:06', 'Upgrading server resources if overloaded', 'Upgrading', 91),
(1795, '13:24', 'Bigger server equals faster performance', 'Bigger Server', 91),
(1796, '13:51', 'Large 1.3MB HTML payload before compression', 'Large Payload', 91),
(1797, '28:12', 'Running Node in browser gives good onboarding experience for full stack frameworks', 'Onboarding', 92),
(1798, '26:25', '2 companies have proven you can run Node in browser, with different approaches', 'Proof of concept', 92),
(1799, '24:58', 'Limitations due to browser restrictions compared to Node', 'Limitations', 92),
(1800, '23:17', 'PenPod open source Figma alternative', 'PenPod', 92),
(1801, '20:24', 'Notebooks uses newer APIs, works on all browsers', 'Notebooks implementation', 92),
(1802, '17:26', 'CodeSandbox likely knew Stackblitz was launching', 'Competition', 92),
(1803, '16:39', 'Critical parts not open source', 'Not open source', 92),
(1804, '15:09', 'Web containers uses Turbo for npm proxy', 'Turbo', 92),
(1805, '13:40', 'Mocks Linux APIs in browser', 'Mocking APIs', 92),
(1806, '12:33', 'Runs via WASM in iframe', 'WASM in iframe', 92),
(1807, '10:36', 'Avoids security issues of remote VMs', 'Security', 92),
(1808, '08:26', 'Great for code demos and playgrounds', 'Use cases', 92),
(1809, '06:52', 'Why run Node in browser?', 'Why?', 92),
(1810, '02:30', 'Realized quickly wanted to work on cool tech, not ecommerce', 'Career pivot', 93),
(1811, '02:35', 'Ecommerce is marketing driven, not tech driven', 'Ecommerce challenges', 93),
(1812, '03:54', 'Wanted to give marketing a drag and drop interface on top of framework components', 'Builder origin', 93),
(1813, '04:42', 'Builder allows configuring UI via JSON that describes components', 'How Builder works', 93),
(1814, '07:27', 'Marketing can fully compose UIs or just edit sections made with Builder', 'Builder flexibility', 93),
(1815, '08:11', 'Builder doesn\'t host anything, it integrates into your existing site', 'Builder integration', 93),
(1816, '09:43', 'Some Builder sites are 80% controlled by Builder', 'Builder adoption', 93),
(1817, '13:01', 'Builder is built in React and uses MobX for state management', 'Builder tech stack', 93),
(1818, '13:42', 'MobX is great for performance in interactive apps like Builder', 'MobX benefits', 93),
(1819, '15:02', 'Builder outputs agnostic JSON format that can render UIs on any framework', 'Framework agnostic', 93),
(1820, '18:29', 'Figma integration allows designing UIs visually then exporting to Builder', 'Figma integration', 93),
(1821, '21:40', 'Builder overlays guess component positions, then verifies after interactions', 'Overlay rendering', 93),
(1822, '26:38', 'Use reactive state management like MobX, not Redux, for drag and drop', 'Drag and drop tips', 93),
(1823, '00:20', 'AI encoding overview', 'AI encoding', 94),
(1824, '01:23', 'Scott\'s snowboarding story', 'Snowboarding', 94),
(1825, '02:00', 'Ad for Sentry error tracker', 'Sentry ad', 94),
(1826, '03:26', 'AI taking jobs discussion', 'AI jobs', 94),
(1827, '04:15', 'AI intensity in communities', 'AI communities', 94),
(1828, '06:29', 'AI as a solution or non-solution', 'AI nuance', 94),
(1829, '07:26', 'AI use cases discussion', 'AI use cases', 94),
(1830, '08:29', 'Github Copilot overview', 'Github Copilot', 94),
(1831, '09:48', 'OpenAI and Github Copilot', 'OpenAI', 94),
(1832, '10:17', 'Midjourney image generator', 'Midjourney', 94),
(1833, '11:13', 'AI art ethics issues', 'AI art ethics', 94),
(1834, '11:40', 'AI marketing copy issues', 'AI marketing', 94),
(1835, '12:27', 'AI usage attribution issues', 'AI attribution', 94),
(1836, '13:15', 'AI competitive advantage issues', 'AI competition', 94),
(1837, '13:44', 'Constantly raising quality bars', 'Quality bars', 94),
(1838, '14:11', 'AI going off rails examples', 'AI off rails', 94),
(1839, '14:35', 'Microsoft Bing issues', 'Bing issues', 94),
(1840, '15:06', 'Google Bard announcement', 'Google Bard', 94),
(1841, '15:17', 'Many companies doing AI', 'AI companies', 94),
(1842, '15:43', 'AI model explanations', 'AI models', 94),
(1843, '17:19', 'How models are trained', 'Model training', 94),
(1844, '18:17', 'Models as black boxes', 'Model black boxes', 94),
(1845, '18:36', 'TensorFlow overview', 'TensorFlow', 94),
(1846, '00:33', 'Talking about clean and sloppy code', 'Topic', 95),
(1847, '01:19', 'Sentry session replay introduction', 'Sentry', 95),
(1848, '02:16', 'Wes performance issue on uses.tech', 'Performance', 95),
(1849, '04:23', 'Definition of sloppy code', 'Sloppy code', 95),
(1850, '05:12', 'Examples of sloppy code', 'Examples', 95),
(1851, '06:37', 'Marie Kondo on organization', 'Organization', 95),
(1852, '13:14', 'Establishing codebase rules', 'Rules', 95),
(1853, '14:38', 'When to add new packages/configs', 'Packages', 95),
(1854, '15:40', 'Scaffolding tools for consistency', 'Scaffolding', 95),
(1855, '16:42', 'Refactoring unrelated code', 'Refactoring', 95),
(1856, '18:27', 'Branch strategy for clean code', 'Branching', 95),
(1857, '20:39', 'Code rules with linters/formatters', 'Linters', 95),
(1858, '21:41', 'Naming conventions', 'Naming', 95),
(1859, '23:03', 'Commenting code', 'Comments', 95),
(1860, '24:08', 'Enforcing rules with GitHub Actions', 'Enforcing', 95),
(1861, '25:02', 'Automating formatting/linting fixes', 'Automating', 95),
(1862, '27:14', 'Documenting coding standards', 'Documenting', 95),
(1863, '02:29', 'Astro is a web framework focusing on HTML first with interactive JS islands.', 'Astro intro', 96),
(1864, '04:02', 'Astro started as a static site generator but now supports full SSR and hybrid rendering.', 'Astro SSG->SSR', 96),
(1865, '05:29', 'Astro is best for content-focused sites like blogs, docs, portfolios. Not interactive apps.', 'Astro use cases', 96),
(1866, '06:56', 'Astro defaults to HTML everywhere with interactive JS islands. Unlike SPAs shipping everything as JS.', 'Island architecture', 96),
(1867, '10:05', 'Astro uses file-based routing like Next.js with .astro files defining pages.', 'Routing', 96),
(1868, '12:25', 'Astro 2.0 focuses on markdown authoring with frontmatter type safety.', 'Markdown', 96),
(1869, '13:37', 'Astro supports MDX for components in markdown but added type safety to frontmatter.', 'MDX', 96),
(1870, '14:56', 'Astro builds adapter-based apps to run on Node, Deno, Cloudflare Workers and more.', 'Edge runtimes', 96),
(1871, '18:43', 'Astro components can directly await data fetching using top-level await.', 'Data fetching', 96),
(1872, '19:58', '.astro files run data fetching in component frontmatter before template.', 'Frontmatter', 96),
(1873, '00:24', 'Warp terminal overview', 'Warp', 97),
(1874, '00:57', 'Scott is sick', 'Sick', 97),
(1875, '02:13', 'Not sponsored by Warp', 'Sponsored', 97),
(1876, '02:41', 'Warp built with Rust', 'Rust', 97),
(1877, '03:24', 'Evolution of terminals', 'Evolution', 97),
(1878, '04:20', 'Terminal annoyances', 'Annoyances', 97),
(1879, '05:58', 'Warp only on Mac currently', 'Mac only', 97),
(1880, '07:00', 'Terminals they\'ve used', 'Used', 97),
(1881, '09:16', 'Builtin Mac terminal', 'Builtin', 97),
(1882, '09:28', 'Alacriti terminal', 'Alacriti', 97),
(1883, '09:53', 'Windows terminal', 'Windows', 97),
(1884, '10:25', 'VS Code terminal', 'VS Code', 97),
(1885, '11:17', 'Terminal terminology', 'Terminology', 97),
(1886, '12:55', 'Windows PowerShell', 'PowerShell', 97),
(1887, '00:30', 'Logging overview and basics', 'Logging basics', 98),
(1888, '01:48', 'Sentry sponsor ad', 'Sentry ad', 98),
(1889, '02:33', 'What logging is and basic usage', 'What is logging', 98),
(1890, '03:53', 'Why log things', 'Why log', 98),
(1891, '04:36', 'Logging vs error handling', 'Logging vs errors', 98),
(1892, '05:56', 'What to log in development vs production', 'Dev vs prod logging', 98),
(1893, '08:43', 'Importance of timestamps in logs', 'Timestamps', 98),
(1894, '09:16', 'Other useful log metadata', 'Log metadata', 98),
(1895, '10:32', 'Logging request data', 'Logging requests', 98),
(1896, '13:30', 'Logging descriptive messages', 'Descriptive logging', 98),
(1897, '13:52', 'Avoiding logging personal data', 'No PII logging', 98),
(1898, '15:21', 'Log levels from error to verbose', 'Log levels', 98),
(1899, '16:05', 'Production vs development logging', 'Prod vs dev logs', 98),
(1900, '17:38', 'Logging security events', 'Security logging', 98),
(1901, '18:18', 'Logging bot access attempts', 'Bot logging', 98),
(1902, '18:52', 'Logging rate limiting', 'Rate limiting logs', 98),
(1903, '20:16', 'Log storage and retention', 'Log storage', 98),
(1904, '21:18', 'Third party logging services', 'Third party logging', 98),
(1905, '22:54', 'Using logging libraries like Winston', 'Logging libraries', 98),
(1906, '24:05', 'Custom middleware for logging', 'Middleware logging', 98),
(1907, '02:03', 'Ryan Carniato intro', 'Intro', 99),
(1908, '04:02', 'First commit for Solid in 2016', 'History', 99),
(1909, '05:00', 'KnockoutJS history', 'KnockoutJS', 99),
(1910, '06:17', 'Using React at previous company', 'React', 99),
(1911, '07:33', 'MarcoJS at eBay', 'MarcoJS', 99),
(1912, '09:14', 'What is Solid JS?', 'Solid JS', 99),
(1913, '10:20', 'Reactive primitives in Solid', 'Reactivity', 99),
(1914, '11:47', 'Solid philosophy on components', 'Components', 99),
(1915, '12:10', 'Solid JSX compiler', 'Compiler', 99),
(1916, '13:07', 'Compiles JSX to vanilla JS', 'Compilation', 99),
(1917, '14:53', 'Solid runtime vs compilation', 'Runtime', 99),
(1918, '15:06', 'Looking at compiled output', 'Output', 99),
(1919, '15:39', 'Detecting reactive parts', 'Detect reactive', 99),
(1920, '18:15', 'Context API in Solid', 'Context API', 99),
(1921, '18:39', 'Animations in context', 'Animations', 99),
(1922, '19:38', 'Patterns from React work in Solid', 'React patterns', 99),
(1923, '19:54', 'Origin of signals name', 'Signals name', 99),
(1924, '20:45', 'Differentiating signals from RxJS', 'Vs RxJS', 99),
(1925, '21:52', 'Signals vs PubSub', 'Signals vs PubSub', 99),
(1926, '23:08', 'Explanation of signals', 'Signals explained', 99),
(1927, '24:29', 'Derived values and side effects', 'Derived values', 99),
(1928, '25:12', 'Differences from observables', 'Observables', 99),
(1929, '25:46', 'Avoiding cascade updates', 'Cascades', 99),
(1930, '27:09', 'Tracing reactive dependencies', 'Tracing', 99),
(1931, '29:19', 'Web components support', 'Web components', 99),
(1932, '29:51', 'Why not using web components', 'Not using WC', 99),
(1933, '31:53', 'Web components vs frameworks', 'WC vs frameworks', 99),
(1934, '32:31', 'When to use web components', 'Use cases', 99),
(1935, '32:45', 'Introducing Solid Start', 'Solid Start', 99),
(1936, '00:30', 'Talking about the OpenAI and ChatGPT APIs', 'APIs', 100),
(1937, '00:45', 'Stumbling over saying OpenAI API', 'Stumbling', 100),
(1938, '01:06', 'Wes excited to talk about coding with the API', 'Coding', 100),
(1939, '01:24', 'Sentry sponsor', 'Sponsor', 100),
(1940, '03:20', 'Start talking about the OpenAI API', 'OpenAI API', 100),
(1941, '03:47', 'Axios used in the API', 'Axios', 100),
(1942, '04:15', 'Transcripts summarized with OpenAI API', 'Summarized', 100),
(1943, '04:50', 'Scott playing around with the API', 'Playing around', 100),
(1944, '07:42', 'Most data sent to OpenAI is text', 'Text data', 100),
(1945, '08:13', '1000 tokens is about 750 words', 'Token count', 100),
(1946, '08:44', 'Costs a fraction of a cent per 1000 tokens', 'Pricing', 100),
(1947, '09:51', 'Output length affects cost', 'Output cost', 100),
(1948, '10:38', 'Cheap for one podcast but adds up at scale', 'Cost at scale', 100),
(1949, '11:45', 'Other companies adding OpenAI APIs', 'Other APIs', 100),
(1950, '13:04', 'GPT pricing very fluid', 'Pricing changes', 100),
(1951, '15:11', 'Chunking transcripts to stay under token limit', 'Chunking', 100),
(1952, '16:09', 'Must send full context each request', 'Full context', 100),
(1953, '19:01', 'Fine tuning models not possible yet', 'Fine tuning', 100),
(1954, '21:12', 'Chat completion most popular API', 'Chat API', 100),
(1955, '22:28', 'Text completion similar to chat completion', 'Text API', 100),
(1956, '22:53', 'Image generation API', 'Images API', 100),
(1957, '24:37', 'Speech to text API', 'Speech API', 100),
(1958, '26:17', 'Embedding API for relatedness', 'Embedding', 100),
(1959, '27:38', 'Langchain JavaScript library', 'Langchain', 100),
(1960, '29:54', 'Prompt tuning takes work', 'Prompt tuning', 100),
(1961, '31:22', 'Anticipating future misinformation', 'Misinformation', 100),
(1962, '32:24', 'Tip to save responses', 'Save responses', 100),
(1963, '33:33', 'Curious about training on old tweets', 'Old tweets', 100),
(1964, '00:11', 'Potluck episode', 'Potluck', 101),
(1965, '00:40', 'Submit questions', 'Questions', 101),
(1966, '01:02', 'Sponsor read', 'Sponsor', 101),
(1967, '02:16', 'Electrical work', 'Electrical', 101),
(1968, '03:03', 'Installing dimmers', 'Dimmers', 101),
(1969, '04:12', 'Setting up smart home', 'Smart home', 101),
(1970, '05:00', 'Wire connectors', 'Connectors', 101),
(1971, '05:58', 'Wire strippers', 'Strippers', 101),
(1972, '07:30', 'Installing switches', 'Switches', 101),
(1973, '07:57', 'Custom podcast browser', 'Browser', 101),
(1974, '09:32', 'Web component usage', 'Components', 101),
(1975, '10:18', 'Web components vs frameworks', 'Frameworks', 101),
(1976, '13:10', 'Web component routing', 'Routing', 101),
(1977, '13:54', 'Web component SSR', 'SSR', 101),
(1978, '15:15', 'JavaScript mixins', 'Mixins', 101),
(1979, '01:08', 'Config files aren\'t all related to front end', 'Config files', 102),
(1980, '01:57', 'Scott went skiing and got a sunburn', 'Skiing', 102),
(1981, '03:12', 'Electric cars regenerate battery going downhill', 'Electric cars', 102),
(1982, '05:18', 'Config files describe infrastructure', 'Infrastructure', 102),
(1983, '07:50', 'JavaScript config files are nice', 'JavaScript configs', 102),
(1984, '11:27', 'Node has failed on config file standards', 'Node failure', 102),
(1985, '13:55', 'Some configs are YAML', 'YAML', 102),
(1986, '15:29', 'Hard to change config locations once working', 'Config locations', 102),
(1987, '16:45', 'VSCode file nesting hides configs', 'VSCode nesting', 102),
(1988, '18:34', 'File nesting groups related files', 'File nesting', 102),
(1989, '19:36', 'Configs are a necessary evil', 'Necessary evil', 102),
(1990, '21:19', 'Scott will standardize config formats', 'Standardize configs', 102),
(1991, '00:39', 'Introduction to resumability', 'Intro', 103),
(1992, '01:14', 'Mishko Hevery creator of Angular and Qwik', 'Guest intro', 103),
(1993, '02:02', 'Scott summarizes his understanding of resumability', 'Resumability summary', 103),
(1994, '02:48', 'Mishko confirms Scott\'s understanding is correct', 'Confirm understanding', 103),
(1995, '04:03', 'Mishko explains resumability through virtual machine example', 'VM example', 103),
(1996, '05:15', 'Qwik compared to React and Next.js', 'Qwik overview', 103),
(1997, '06:18', 'Qwik uses familiar JSX and Hooks like React', 'Qwik details', 103),
(1998, '07:08', 'Examples of components to make resumable', 'Resumable components', 103),
(1999, '08:52', 'Qwik handles optimizations for you', 'Built-in optimizations', 103),
(2000, '09:16', 'Example of lazy loading components in React vs Qwik', 'Lazy loading comparison', 103),
(2001, '00:39', 'Sentry\'s session replay feature', 'Sentry', 104);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(2002, '02:26', 'Installing smart switches', 'Switches', 104),
(2003, '03:26', 'Color coding wires for three-way switches', 'Wires', 104),
(2004, '05:08', 'Confusion over three-way vs four-way switch wiring', 'Wiring', 104),
(2005, '05:55', 'Using approved electrical connectors', 'Connectors', 104),
(2006, '08:18', 'Converting JavaScript to TypeScript', 'TypeScript', 104),
(2007, '09:45', 'Migrating GraphQL API to SvelteKit', 'Migrating', 104),
(2008, '12:00', 'Refactoring benefits of TypeScript', 'Refactoring', 104),
(2009, '13:17', 'Catching edge case bugs', 'Bugs', 104),
(2010, '14:59', 'Better developer experience', 'Developer experience', 104),
(2011, '00:30', 'Talking about polish and perf', 'Topic intro', 105),
(2012, '00:34', 'Pushed out the thing, now improve UX', 'Post-launch goals', 105),
(2013, '01:08', 'Performance tuning is key for users', 'Performance importance', 105),
(2014, '02:09', 'Balance page speed and functionality', 'Page speed vs features', 105),
(2015, '02:53', 'Use devtools network tab for visibility', 'Network tab', 105),
(2016, '03:51', 'Removing unnecessary embeds for speed', 'Embeds', 105),
(2017, '05:11', 'Removing heavy Discord embed for speed', 'Discord embed', 105),
(2018, '05:41', 'Proxying images to avoid tracking', 'Image proxy', 105),
(2019, '06:58', 'Lighthouse identifies optimization areas', 'Lighthouse', 105),
(2020, '08:33', 'Image compression has big impact', 'Image compression', 105),
(2021, '09:33', 'Caching assets speeds up subsequent loads', 'Caching', 105),
(2022, '10:50', 'Caching queries can improve server speed', 'Query caching', 105),
(2023, '12:01', 'Audit network requests to identify large files', 'Audit requests', 105),
(2024, '13:33', 'Iteratively optimizing page speed over time', 'Iterative optimization', 105),
(2025, '14:18', 'Faster sites improve user experience', 'UX', 105),
(2026, '15:26', 'Avoid unnecessary network requests', 'Unneeded requests', 105),
(2027, '16:10', 'Click around site to catch odd requests', 'Odd requests', 105),
(2028, '16:23', 'Use tools over guesses for improvements', 'Use tools', 105),
(2029, '17:31', 'No specific speed target, improve experience', 'No target', 105),
(2030, '19:01', 'Faster build times aid development', 'Build times', 105),
(2031, '19:37', 'Serverless deployment improves edit speed', 'Serverless deploys', 105),
(2032, '02:30', 'Rust teaches low level computer concepts', 'Rust education', 106),
(2033, '03:43', 'Rust in Action aims to make Rust more approachable', 'Approachable book', 106),
(2034, '08:04', 'First learned about Rust in 2012', 'Rust history', 106),
(2035, '13:04', 'Rust can have a steep learning curve', 'Steep learning', 106),
(2036, '22:02', 'Good first Rust projects are command line utilities', 'CLI utilities', 106),
(2037, '24:09', 'Interactive games are a great way to learn Rust', 'Games to learn', 106),
(2038, '25:16', 'Rust provides performance and efficiency benefits', 'Performance benefits', 106),
(2039, '40:47', 'Crates are packages, Cargo is the package manager', 'Crates and Cargo', 106),
(2040, '44:33', 'WebAssembly allows running Rust code in the browser', 'WebAssembly', 106),
(2041, '00:31', 'ECMAScript modules are breaking things if you don\'t use them', 'ESM breaking', 107),
(2042, '01:06', 'Converted app to ESM, deployed, waited for Sentry errors but only 1 minor issue', 'ESM deploy', 107),
(2043, '02:39', 'ECMAScript modules are now a spec so implemented consistently across platforms', 'ESM spec', 107),
(2044, '03:12', 'Meteor used import syntax by default which made transition easier', 'Meteor import', 107),
(2045, '05:06', 'ECMAScript modules have some benefits but also some downsides over CommonJS', 'ESM pros/cons', 107),
(2046, '07:30', 'CommonJS was good when it was the only option but now we have interop issues', 'CJS History', 107),
(2047, '07:50', 'ECMAScript modules being a spec means implementations have to follow it', 'ESM spec', 107),
(2048, '10:48', 'ECMAScript modules enable better tree shaking since dependencies are static', 'ESM tree shake', 107),
(2049, '11:01', 'ESM allows import syntax natively in the browser', 'ESM browser', 107),
(2050, '12:37', 'Top level await in ESM modules avoids needing wrappers', 'TopLevel await', 107),
(2051, '13:25', 'Queues can help manage async side effects from purchases', 'Queues', 107),
(2052, '16:14', 'Logging is complex - what/where/how long to keep logs', 'Logging', 107),
(2053, '16:27', 'Eventually ESM will allow imports from URLs without local modules', 'Remote ESM', 107),
(2054, '18:09', 'Import assertions will allow importing non-JS files like JSON', 'Import assertions', 107),
(2055, '19:38', 'Currently require JSON in CJS but have to use APIs in ESM', 'ESM import JSON', 107),
(2056, '21:05', 'Flipping to ESM requires changing package.json type and extensions', 'Flipping to ESM', 107),
(2057, '22:35', '.mjs extensions help gradually move existing CJS to ESM', 'mjs extensions', 107),
(2058, '23:01', 'ESM can import CJS but CJS cannot import ESM without wrappers', 'CJS import ESM', 107),
(2059, '23:45', 'Some packages going ESM only so forcing switch for consumers', 'ESM only packages', 107),
(2060, '24:05', 'Used codemod to automatically convert requires to imports', 'Codemod', 107),
(2061, '03:03', 'Scott wants mixins in CSS', 'mixins', 108),
(2062, '05:20', 'Wes wants to select CSS grid rows', 'grid rows', 108),
(2063, '06:15', 'Scott wants a range selector in CSS', 'range selector', 108),
(2064, '09:37', 'Wes wants first/last column/row selectors', 'first/last', 108),
(2065, '12:17', 'Scott wants native fit-text in CSS', 'fit-text', 108),
(2066, '13:46', 'Scott wants overflow scroll and visible', 'overflow', 108),
(2067, '18:19', 'Scott wants color functions', 'color funcs', 108),
(2068, '20:38', 'Wes wants native lighten/darken colors', 'lighten/darken', 108),
(2069, '22:40', 'Wes wants resize handles on divs', 'resize handles', 108),
(2070, '27:14', 'Wes wants overflow styles', 'overflow styles', 108),
(2071, '00:26', 'Announcer introduces Syntax supper club podcast', 'Intro', 109),
(2072, '00:47', 'Caleb Porzio is the guest', 'Guest intro', 109),
(2073, '01:15', 'Caleb is from Canada near Buffalo but Canada doesn\'t have Target or Trader Joe\'s', 'Canada', 109),
(2074, '02:37', 'Wes used to work at Target', 'Wes at Target', 109),
(2075, '02:51', 'Buffalo is very Canadian with Tim Hortons and Labatt Blue', 'Buffalo Canadian', 109),
(2076, '03:37', 'Michigan is also very Canadian culturally', 'Michigan Canadian', 109),
(2077, '03:52', 'Underage drinking trips to Canada', 'Underage drinking', 109),
(2078, '04:07', 'Caleb used to mail stickers from Buffalo for cheaper postage', 'Sticker mailing', 109),
(2079, '05:14', 'Watching Buffalo TV channels growing up in Canada', 'Buffalo TV', 109),
(2080, '00:31', 'Overview of State of JS survey', 'Survey overview', 110),
(2081, '01:17', 'Take survey results with grain of salt', 'Caution', 110),
(2082, '02:41', 'Don\'t judge libraries by survey fluctuation', 'No judging', 110),
(2083, '03:14', 'Shout out to creator Sasha for great work', 'Sasha shoutout', 110),
(2084, '03:58', 'Data visualizations are inspiration for devs', 'Inspiration', 110),
(2085, '04:35', 'Compare survey countries to Syntax countries', 'Country compare', 110),
(2086, '05:20', 'Survey countries different than Syntax', 'Countries differ', 110),
(2087, '05:38', 'India top free, Germany paid listener', 'India vs Germany', 110),
(2088, '07:04', 'Most salaries 50k-100k, then 100k-200k', 'Salary ranges', 110),
(2089, '07:48', 'Cool salary vs experience data explorer', 'Data explorer', 110),
(2090, '08:10', 'Filter US salary by experience trends', 'Salary trends', 110),
(2091, '00:45', 'Container queries intro', 'Intro', 111),
(2092, '01:31', 'Use cases for container queries', 'Use cases', 111),
(2093, '04:00', 'Reusability with container queries', 'Reuse', 111),
(2094, '05:07', 'Requested CSS feature', 'Requested', 111),
(2095, '06:08', 'Containment context', 'Context', 111),
(2096, '07:52', 'Container perf', 'Perf', 111),
(2097, '08:00', 'Container type and name', 'Type/name', 111),
(2098, '09:20', 'Container type normal', 'Normal', 111),
(2099, '10:04', 'Container style queries', 'Style queries', 111),
(2100, '13:10', 'Vertical text layout', 'Vertical', 111),
(2101, '14:16', 'New container query units', 'Units', 111),
(2102, '15:41', 'Font sizing with container queries', 'Fonts', 111),
(2103, '17:00', 'Replace JS with CSS', 'Replace JS', 111),
(2104, '17:40', 'Range media query syntax', 'Range syntax', 111),
(2105, '18:46', 'Syntax examples', 'Examples', 111),
(2106, '19:26', 'Border radius example', 'Radius', 111),
(2107, '21:08', 'Code block width example', 'Code block', 111),
(2108, '21:57', 'Variables in queries', 'Variables', 111),
(2109, '22:18', 'Excitement about container queries', 'Excitement', 111),
(2110, '22:37', 'Browser support', 'Support', 111),
(2111, '23:23', 'Safari auto updates', 'Safari updates', 111),
(2112, '24:32', 'Container query polyfill', 'Polyfill', 111),
(2113, '00:26', 'Intro to Syntax Supper Club podcast with Sanity', 'Intro', 112),
(2114, '00:39', 'Guests are Espin Hovlandsall and Simonsfell from Sanity', 'Guest intro', 112),
(2115, '01:55', 'Espin gives a quick intro - works at Sanity. Simons gives a quick intro - CTO and cofounder', 'Guest intros', 112),
(2116, '02:44', 'Simons explains Sanity is a customizable, open source content platform', 'Sanity overview', 112),
(2117, '05:52', 'Sanity can power websites, apps, signage - unified content', 'Use cases', 112),
(2118, '07:30', 'Discussion of Sanity Studio 3 - a customizable editing experience', 'Studio 3 intro', 112),
(2119, '08:01', 'Studio is built in React for customizability', 'React studio', 112),
(2120, '10:41', 'Example of building Syntax podcast functionality into Sanity Studio', 'Syntax demo', 112),
(2121, '13:13', 'Sanity provides content APIs, but you choose how to fetch in your app', 'Content APIs', 112),
(2122, '14:50', 'Explanation of Sanity\'s Grok query language', 'Grok explained', 112),
(2123, '18:32', 'Grok has been surprisingly popular compared to expectations', 'Grok popularity', 112),
(2124, '19:11', 'Power and flexibility of Grok for queries', 'Grok benefits', 112),
(2125, '21:09', 'Discussion about popularity and use cases of GraphQL', 'GraphQL discussion', 112),
(2126, '25:11', 'GraphQL encourages more holistic data fetching vs REST', 'GraphQL vs REST', 112),
(2127, '00:33', 'Scott injured his knee slipping on socks', 'Knee injury', 113),
(2128, '01:24', 'Introduction to first potluck question on HTML tags', 'HTML question', 113),
(2129, '02:37', 'HTML tags like article/section are just \"fancy\" divs', 'HTML tags', 113),
(2130, '03:16', 'Section groups elements, article for standalone content', 'Sections vs Articles', 113),
(2131, '05:33', 'Semantic structure important despite fancy divs', 'HTML semantics', 113),
(2132, '06:51', 'Sections shouldn\'t just be styling wrappers', 'Section usage', 113),
(2133, '08:05', 'Recession impacts most businesses including ours', 'Recession woes', 113),
(2134, '09:31', 'Haven\'t raised prices due to recession despite inflation', 'No price raises', 113),
(2135, '10:32', 'Always run business conservatively to prepare for downturns', 'Conservative business', 113),
(2136, '12:40', 'Shocking that someone making $120K buys a $120K car', 'Expensive cars', 113),
(2137, '14:04', 'Dave\'s philosophy on buying cars with cash, not just payments', 'Cash cars', 113),
(2138, '14:50', 'Pay employees instead of fancy cars for bosses', 'No boss cars', 113),
(2139, '15:47', 'Question about personal budgeting tools and methods', 'Budgeting question', 113),
(2140, '17:01', 'Scott uses YNAB currently but trying out Copilot', 'YNAB and Copilot', 113),
(2141, '19:24', 'Wes doesn\'t track detailed budget, just balances', 'No fancy budget', 113),
(2142, '20:54', 'Question about JS module bundlers/module formats', 'JS modules question', 113),
(2143, '21:36', 'AMD/UMD more legacy, ES Modules is modern standard', 'ES Modules standard', 113),
(2144, '23:06', 'Don\'t use old systems like Bower anymore', 'No Bower', 113),
(2145, '02:33', 'Overview of buy vs build services', 'Overview', 114),
(2146, '03:40', 'Cost of services vs cost of building', 'Cost', 114),
(2147, '04:05', 'Financial burden of services', 'Burden', 114),
(2148, '07:12', 'Evaluate time to build vs use service', 'Evaluate', 114),
(2149, '09:51', 'Company\'s core business vs maintaing service', 'Business', 114),
(2150, '10:03', 'Escapability from services', 'Escapability', 114),
(2151, '15:17', 'Hosted APIs pros and cons', 'APIs', 114),
(2152, '19:39', 'Cron jobs as a service', 'Cron jobs', 114),
(2153, '20:48', 'Checkout services', 'Checkout', 114),
(2154, '24:30', 'Hosting services', 'Hosting', 114),
(2155, '26:10', 'Open graph image services', 'OG Images', 114),
(2156, '27:28', 'Search services', 'Search', 114),
(2157, '30:32', 'Custom search vs dedicated service', 'Custom search', 114),
(2158, '33:36', 'Auth services', 'Auth', 114),
(2159, '36:59', 'Image services', 'Images', 114),
(2160, '37:53', 'Video hosting services', 'Video', 114),
(2161, '02:33', 'Katherine talked about how she couldn\'t make a website look right when first learning HTML/CSS', 'Learning pains', 115),
(2162, '08:01', 'Katherine majored in French literature in college before transitioning to coding', 'Career change', 115),
(2163, '10:24', 'Katherine recommends coding bootcamps but notes varying quality across programs', 'Bootcamp recommendation', 115),
(2164, '20:50', 'Katherine got interested in data visualization after using D3 for a simple chart', 'Discovering data viz', 115),
(2165, '27:36', 'Katherine worked at WeWork during its decline but was insulated from the chaos', 'WeWork chaos', 115),
(2166, '31:26', 'Katherine notes data visualization is being used for compelling news stories', 'Data viz journalism', 115),
(2167, '35:10', 'Tangible uses Django on the backend and React on the frontend', 'Stack overview', 115),
(2168, '42:35', 'Katherine doesn\'t know much about sustainable website hosting but suggests Scope3', 'Sustainable hosting', 115),
(2169, '02:33', 'Puts all his tools in a cold room in the basement called the Cantina', 'Cold room', 116),
(2170, '03:57', 'Took kids skiing over holidays and had them do indoor ski lessons on treadmills', 'Indoor skiing', 116),
(2171, '07:18', 'Want to make container queries his default mode of working responsively this year', 'Container queries', 116),
(2172, '09:13', 'Wants to ship something with Rust this year', 'Rust app', 116),
(2173, '09:38', 'Has never done any machine learning but wants to ship something using it', 'Machine learning', 116),
(2174, '10:39', 'Wants to ship his breaking app using Touri this year', 'Touri app', 116),
(2175, '14:52', 'Wes plans to create a course on container queries', 'Container course', 116),
(2176, '15:27', 'Wes wants to build a larger production app in Svelte', 'Svelte app', 116),
(2177, '23:48', 'Wes built a Vite plugin to list directory contents', 'Vite plugin', 116),
(2178, '31:15', 'Scott is going to focus on cardio training this year', 'Cardio training', 116),
(2179, '33:03', 'Scott plans to enter dance battles and competitions this year', 'Dance battles', 116),
(2180, '36:07', 'Wes wants to lose 20 pounds this year', 'Lose weight', 116),
(2181, '37:14', 'Wes was diagnosed with ADHD and is figuring out medication', 'ADHD diagnosis', 116),
(2182, '42:07', 'Scott wants to improve his interview skills on the podcast this year', 'Interview skills', 116),
(2183, '02:04', 'TypeScript fundamentals and the satisfies and \'as const\' techniques', 'TypeScript', 117),
(2184, '04:07', 'Explain \'as const\' to create read-only frozen objects and infer types', '\'as const\'', 117),
(2185, '08:47', 'Use of \'as const\' for objects, arrays and generating types from data', '\'as const\' examples', 117),
(2186, '14:17', 'Introducing the new \'satisfies\' syntax in TypeScript 4.9', '\'satisfies\'', 117),
(2187, '15:36', 'Use cases for \'satisfies\' with \'record\' types and unknown metadata', '\'satisfies\' metadata', 117),
(2188, '18:47', 'How \'satisfies\' allows better type inference and IntelliSense', '\'satisfies\' benefits', 117),
(2189, '20:51', '\'as const\' is only at compile time, need Object.freeze() at runtime', '\'as const\' runtime', 117),
(2190, '01:35', 'Sarah Drasner discusses writing new book Engineering Management for the Rest of Us', 'Book discussion', 118),
(2191, '02:33', 'Sarah is Director of Engineering at Google working on web infrastructure', 'Sarah\'s job', 118),
(2192, '05:00', 'Transition from engineer to management is difficult', 'Transition to management', 118),
(2193, '07:56', 'Manager\'s job is to help engineers be productive', 'Manager responsibilities', 118),
(2194, '10:12', 'Align employee\'s interests with company needs', 'Employee alignment', 118),
(2195, '13:21', 'Learn from good and bad managers', 'Learning from managers', 118),
(2196, '16:07', 'Manager coding depends on company needs', 'Managers coding', 118),
(2197, '21:20', 'Employees often leave due to poor managers', 'Why employees leave', 118),
(2198, '23:04', 'Conflict management is an unexpected manager duty', 'Conflict management', 118),
(2199, '26:36', 'Process should help not hinder productivity', 'Evaluating process', 118),
(2200, '31:29', 'Sarah wrote book over 2 years using Scrivener', 'Writing the book', 118),
(2201, '35:26', 'Published through Egghead\'s Skills Recordings', 'Publishing the book', 118),
(2202, '37:47', 'Typed book in Scrivener instead of Word', 'Book writing tool', 118),
(2203, '39:35', 'Sarah improved writing working with Chris Coyier', 'Improved writing', 118),
(2204, '41:30', 'Sarah stays motivated by helping others learn', 'Staying motivated', 118),
(2205, '43:36', 'Align people to the why for motivation', 'Motivation alignment', 118),
(2206, '00:28', 'Wes and Scott introduce themselves and the podcast episode topic of web development predictions for 2023', 'Intro', 119),
(2207, '01:30', 'Server side rendering with JavaScript will become more popular', 'SSR JS', 119),
(2208, '02:35', 'Using core browser features and sticking to web standards will increase', 'Browser APIs', 119),
(2209, '03:38', 'React will improve form handling', 'React forms', 119),
(2210, '04:42', 'Other frameworks utilizing browser APIs better than React', 'Frameworks', 119),
(2211, '05:43', 'TypeScript \'inferred\' types will become more popular', 'Inferred types', 119),
(2212, '08:08', 'Deno will continue to gain adoption and become more usable', 'Deno adoption', 119),
(2213, '11:04', 'Node.js will be able to run TypeScript natively', 'Node TS', 119),
(2214, '12:51', 'JavaScript runtimes like Node, Deno and Bun will mature', 'JS runtimes', 119),
(2215, '13:43', 'Bun could become the recommended runtime for many libraries by end of 2023', 'Bun popular', 119),
(2216, '15:02', 'A new TypeScript bundler written in Rust will emerge', 'Rust TS bundler', 119),
(2217, '19:08', 'Progress on standardizing JavaScript APIs like Temporal', 'JS APIs progress', 119),
(2218, '23:30', 'Browsers implementing the page transitions API', 'Page transitions API', 119),
(2219, '24:18', 'The Winter CG spec for standardizing web backends will gain adoption', 'Winter CG spec', 119),
(2220, '27:47', 'Alternative JS frameworks like Solid and Quick will gain popularity', 'Alt frameworks', 119),
(2221, '31:29', 'SvelteKit will see major adoption increases', 'SvelteKit popular', 119),
(2222, '34:25', 'The Rust programming language will continue to gain popularity', 'Rust popular', 119),
(2223, '37:28', 'The React beta docs will finally launch after a multi-year dev cycle', 'React docs', 119),
(2224, '38:38', 'CSS container queries will start being used in production', 'Container queries', 119),
(2225, '03:41', 'Response types success or failure', 'Union types', 120),
(2226, '04:12', 'Narrowing from wide to specific type', 'Type narrowing', 120),
(2227, '05:23', 'querySelector can return undefined or element', 'Query example', 120),
(2228, '06:26', 'Narrow type from multiple to one option', 'Narrow options', 120),
(2229, '08:20', 'Type guards do the narrowing', 'Type guards', 120),
(2230, '09:47', 'typeof checks type', 'typeof operator', 120),
(2231, '10:13', 'Check if property exists on type', 'Property check', 120),
(2232, '10:43', 'Truthy falsy checks', 'Truthy falsy', 120),
(2233, '15:20', 'Custom utility methods for checking type', 'Utility methods', 120),
(2234, '15:43', 'If/else narrows types', 'If else narrowing', 120),
(2235, '16:22', 'Predicates explicitly narrow types', 'Type predicates', 120),
(2236, '18:47', 'Predicates return narrowed type', 'Predicate return types', 120),
(2237, '01:02', 'Tool for web developers called Polypane', 'Polypane intro', 121),
(2238, '05:43', 'Started working on Polypane in 2015', 'Polypane origin', 121),
(2239, '08:35', 'Polypane helped speed up implementing designs by 60%', 'Polypane benefits', 121),
(2240, '09:47', 'Polypane browser built with Electron and React', 'Polypane tech stack', 121),
(2241, '14:19', 'Polypane URL bar and other browser features are custom built', 'Custom browser features', 121),
(2242, '15:30', 'Polypane dev tools are custom built for multi-pane experience', 'Custom dev tools', 121),
(2243, '16:44', 'Polypane dev tools allow custom overlays like accessibility alt text', 'Dev tool overlays', 121),
(2244, '21:37', 'Polypane has visual outline mode showing tab order', 'Tab order outline', 121),
(2245, '23:33', 'Polypane tools are focused on accessibility testing', 'Accessibility tools', 121),
(2246, '26:56', 'Polypane written in JavaScript, not much native code', 'JavaScript focused', 121),
(2247, '30:24', 'Rulers, guides, and overlays inspired by Sketch', 'Sketch inspiration', 121),
(2248, '32:10', 'Hover and focus syncing across panes speeds up workflow', 'Hover sync', 121),
(2249, '35:23', 'One-click tools to disable CSS, JS, images for testing', 'One-click testing', 121),
(2250, '36:31', 'Simulators for various disabilities built-in', 'Disability simulators', 121),
(2251, '43:05', 'Hover effects sync across panes automatically', 'Hover sync', 121),
(2252, '44:40', 'Polypane available for free and paid plans', 'Pricing', 121),
(2253, '00:01', 'Reviewing 2022 predictions', 'predictions review', 122),
(2254, '01:50', 'Reviewing prediction that Svelte and SvelteKit would gain popularity', 'svelte prediction', 122),
(2255, '02:26', 'SvelteKit 1.0 released recently showing prediction was right', 'sveltekit released', 122),
(2256, '04:59', 'Next.js didn\'t release data layer but got nested routing', 'nextjs prediction', 122),
(2257, '05:10', 'Web components like OpenUI got more popular', 'web components', 122),
(2258, '06:19', 'Rust language continued gaining popularity', 'rust popular', 122),
(2259, '07:01', 'Rome tools didn\'t take off as predicted', 'rome tools', 122),
(2260, '08:32', 'Deno exploded in popularity this year', 'deno popular', 122),
(2261, '09:12', 'TypeScript definitively became the winner', 'typescript won', 122),
(2262, '10:01', 'Serverless and cloud functions grew in popularity', 'serverless popular', 122),
(2263, '10:58', 'Tailwind CSS doubled its installs', 'tailwind popular', 122),
(2264, '11:25', 'Open props didn\'t take off yet', 'open props', 122),
(2265, '13:40', 'Debate around Tailwind remains divisive', 'tailwind debate', 122),
(2266, '15:51', 'GraphQL remained steady without much change', 'graphql steady', 122),
(2267, '18:13', 'Next gen dev tools like GitHub Copilot emerged', 'dev tools emerged', 122),
(2268, '19:12', 'Big year for dev tools like those for Rust', 'dev tools big year', 122),
(2269, '20:33', 'CSS container queries shipped', 'container queries shipped', 122),
(2270, '21:48', 'GraphQL didn\'t see big changes', 'graphql not changed', 122),
(2271, '26:27', 'Deno exploded in popularity as predicted', 'deno exploded', 122),
(2272, '32:38', 'TypeScript has become dominant', 'typescript dominant', 122),
(2273, '35:13', 'Server-side development regained popularity', 'server-side popular again', 122),
(2274, '36:25', 'Payment processors remained mostly the same', 'payment processors unchanged', 122),
(2275, '37:46', 'Alternative platforms like Lemon Squeezy emerging', 'alternative payment platforms', 122),
(2276, '43:56', 'Auth0 powered ChatGPT signups successfully', 'auth0 handled chatgpt traffic', 122),
(2277, '46:37', 'Temporal API not shipped yet but progress made', 'temporal api progress', 122),
(2278, '47:08', 'Remote dev through GitHub features became popular', 'remote github dev popular', 122),
(2279, '04:04', 'Discussing building desktop applications', 'Desktop apps', 123),
(2280, '04:16', 'Scott\'s experience building Electron desktop apps', 'Scott Electron', 123),
(2281, '05:30', 'Scott\'s interest in Tori for desktop apps', 'Scott Tori', 123),
(2282, '06:34', 'Wes building a desktop app with Electron', 'Wes Electron', 123),
(2283, '08:14', 'The process of building the Electron app', 'Building Electron', 123),
(2284, '10:17', 'What Electron is and how it works', 'Electron overview', 123),
(2285, '11:05', 'Overview of Tori and how it differs from Electron', 'Tori overview', 123),
(2286, '15:43', 'Tori uses browser APIs instead of separate processes', 'Tori APIs', 123),
(2287, '17:58', 'How Electron uses separate processes', 'Electron processes', 123),
(2288, '18:33', 'Communication between processes in Electron', 'Electron IPC', 123),
(2289, '19:04', 'Tori runs everything in the client', 'Tori client', 123),
(2290, '20:05', 'Drawback is less docs/community for Tori', 'Tori drawbacks', 123),
(2291, '21:27', 'Challenges of shipping desktop apps to stores', 'Shipping apps', 123),
(2292, '23:42', 'Tooling to get started with Electron', 'Electron tooling', 123),
(2293, '25:15', 'Scott\'s experience with Electron tooling', 'Scott tooling', 123),
(2294, '02:33', 'Started working in aerospace as machinists', 'Aerospace machinists', 124),
(2295, '03:11', 'Bought a home at 23 in Orange County', 'Early homeowner', 124),
(2296, '03:51', 'Started learning web development on the side', 'Self-taught web dev', 124),
(2297, '04:34', 'Led team managing marketing and ecommerce', 'Marketing leader', 124),
(2298, '05:29', 'Built Shopify theme from scratch while doing ERP implementation', 'Shopify developer', 124),
(2299, '06:36', 'Realized coding was true passion after building Shopify theme', 'Passion for coding', 124),
(2300, '08:23', 'COVID shutdowns changed plans in March 2020', 'COVID shutdowns', 124),
(2301, '10:14', 'Had to rebuild team after COVID shutdowns', 'Rebuilding team', 124),
(2302, '11:08', 'Took second full-time job at ResortPass while burnt out', 'Second full-time job', 124),
(2303, '13:01', 'Offered to train replacement but company wanted him to stay', 'Company wanted to keep', 124),
(2304, '14:23', 'Works mornings for ResortPass, afternoons for pomade company', 'Two full-time jobs', 124),
(2305, '00:26', 'David East introduces himself and talks about working on Firebase for 10 years', 'Introduction', 125),
(2306, '05:20', 'IDX allows you to create new projects and makes development environment setup easier', 'IDX overview', 125),
(2307, '08:00', 'Teaching workshops is difficult when participants have trouble with environment setup', 'Workshop challenges', 125),
(2308, '14:25', 'IDX uses Nix for package management instead of Docker', 'Nix package manager', 125),
(2309, '17:23', 'Many companies use cloud-based development environments instead of local setups', 'Cloud dev environments', 125),
(2310, '23:04', 'Performance and speed are critical for IDX to provide a local-like experience', 'Importance of performance', 125),
(2311, '26:48', 'Closing browser tabs closes IDX workspace which can be confusing', 'Browser tab closing', 125),
(2312, '31:09', 'Mesh networks are difficult to setup properly', 'Mesh network troubles', 125),
(2313, '35:11', 'IDX could use less memory than local VS Code since background tasks run remotely', 'Memory usage', 125),
(2314, '44:33', 'iPhone and Android emulator support allows testing mobile apps', 'Mobile emulators', 125),
(2315, '50:31', 'David has worked at Google on Firebase for 8 years', 'Product longevity', 125),
(2316, '00:31', 'Potluck Q&A questions', 'Q&A', 126),
(2317, '01:50', 'Website feedback and improvements', 'Website', 126),
(2318, '02:48', 'LevelUp Tutorials redesign rationale', 'Redesign', 126),
(2319, '05:18', 'Rewriting systems and APIs', 'Rewrites', 126),
(2320, '06:57', 'Transitioning LevelUp to new tech stacks', 'Transitions', 126),
(2321, '08:17', 'Evolving subscription model', 'Subscriptions', 126),
(2322, '10:16', 'Intentional tech decisions over time', 'Decisions', 126),
(2323, '11:45', 'Incremental TypeScript adoption', 'TypeScript', 126),
(2324, '19:36', 'Improving site performance', 'Performance', 126),
(2325, '20:10', 'Value of Twitter community', 'Twitter', 126),
(2326, '23:24', 'Thoughts on Twitter Blue subscription', 'Twitter Blue', 126),
(2327, '25:29', 'Future of social media communities', 'Social media', 126),
(2328, '26:41', 'Mastodon as a Twitter alternative', 'Mastodon', 126),
(2329, '31:30', 'Benefits of standalone course model', 'Courses', 126),
(2330, '32:53', 'Challenges of standalone course model', 'Challenges', 126),
(2331, '38:52', 'Transitioning to freelancing', 'Freelancing', 126),
(2332, '41:08', 'Traits of senior developers', 'Senior devs', 126),
(2333, '43:30', 'Gaining confidence as a senior dev', 'Confidence', 126),
(2334, '44:38', 'Notification management strategies', 'Notifications', 126),
(2335, '47:06', 'Scheduling focused work time', 'Focus time', 126),
(2336, '48:27', 'Hazel for automated file management', 'Hazel', 126),
(2337, '49:57', 'Dealing with HEIC image formats', 'HEIC images', 126),
(2338, '51:27', 'Label makers for organization', 'Label makers', 126),
(2339, '54:29', 'Freshbooks cloud accounting', 'Freshbooks', 126),
(2340, '55:12', 'Popular JS testing frameworks', 'Testing', 126),
(2341, '56:28', 'Vitest for faster testing', 'Vitest', 126),
(2342, '57:19', 'Tanstack router overview', 'Tanstack', 126),
(2343, '59:49', 'Preferred frameworks and routers', 'Frameworks', 126),
(2344, '01:00:15', 'Tanstack Query overview', 'Tanstack Query', 126),
(2345, '01:01:12', 'Scott\'s label maker sick pick', 'Label maker', 126),
(2346, '01:01:20', 'Scott\'s thermostat automation', 'Thermostat', 126),
(2347, '01:03:22', 'Wes\'s WeCrashed show pick', 'WeCrashed', 126),
(2348, '01:05:33', 'Scott\'s LevelUp plug', 'LevelUp', 126),
(2349, '01:06:09', 'Wes\'s course plug', 'Courses', 126),
(2350, '00:30', 'Talking about serverless databases', 'serverless databases', 127),
(2351, '01:46', 'Overview of Prismic as a headless CMS', 'Prismic CMS', 127),
(2352, '02:39', 'Examples and demos on the Prismic website', 'Prismic demos', 127),
(2353, '02:49', 'Redirecting traffic from wrong domain names', 'domain redirect', 127),
(2354, '03:27', 'Benefits of serverless computing', 'serverless benefits', 127),
(2355, '05:13', 'Server rendered website with Deno and PlanetScale', 'Deno server render', 127),
(2356, '06:39', 'Using a Node package with Deno for MySQL access', 'Deno MySQL', 127),
(2357, '08:05', 'Fast deployment times with Deno Deploy', 'Deno Deploy', 127),
(2358, '10:45', 'PlanetScale handles MySQL connection pooling', 'PlanetScale pooling', 127),
(2359, '11:58', 'Stateless databases for serverless', 'stateless databases', 127),
(2360, '12:36', 'Edge database replication is tricky', 'edge database', 127),
(2361, '13:48', 'PlanetScale focuses on scaling and performance', 'PlanetScale perf', 127),
(2362, '15:03', 'Stress testing serverless database setup', 'stress test', 127),
(2363, '17:40', 'Serverless database options', 'database options', 127),
(2364, '18:23', 'Benefits of open standard databases', 'open databases', 127),
(2365, '19:06', 'Overview of Fauna serverless database', 'Fauna database', 127),
(2366, '20:47', 'Other proprietary and open source options', 'more options', 127),
(2367, '24:18', 'MongoDB Atlas serverless offering', 'MongoDB serverless', 127),
(2368, '25:19', 'Challenges converting existing apps', 'conversion challenges', 127),
(2369, '26:50', 'Preferred solutions for new serverless projects', 'preferred solutions', 127),
(2370, '00:36', 'Making videos programmatically with React', 'Remotion intro', 128),
(2371, '01:23', 'Johnny excited to be on Syntax podcast', 'Excited guest', 128),
(2372, '02:18', 'Johnny created Remotion 18 months ago', 'Remotion origin', 128),
(2373, '04:05', 'Johnny motivated to make videos in code instead of After Effects', 'After Effects motivation', 128),
(2374, '07:00', 'Successful products often come from solving dev problems', 'Solving dev problems', 128),
(2375, '08:35', 'Remotion used for marathon finish videos', 'Marathon videos', 128),
(2376, '12:10', 'Remotion uses Puppeteer and FFmpeg to render React components', 'Stack overview', 128),
(2377, '15:07', 'Remotion has no constraints, anything that works in browser can be used', 'No constraints', 128),
(2378, '16:40', 'Each frame must be idempotent for parallel rendering', 'Idempotent frames', 128),
(2379, '19:46', 'Video is a function from time to image', 'Video as function', 128),
(2380, '21:45', 'Helper packages add functionality beyond core Remotion', 'Helper packages', 128),
(2381, '00:26', 'Overview of JavaScript results from Web Almanac', 'Overview', 129),
(2382, '02:33', 'Michigan beat Ohio State in football', 'Football', 129),
(2383, '03:48', 'Wes recovering from bad flu', 'Sick', 129),
(2384, '04:09', 'Web Almanac JS is just chapter 2 of 23', 'Web Almanac', 129),
(2385, '05:15', 'Median JS payload is 509kb on desktop', 'JS payload', 129),
(2386, '00:29', 'Discussion on different rendering methods from State of JS survey', 'Rendering methods', 130),
(2387, '00:45', 'Overview of list of rendering methods', 'List overview', 130),
(2388, '02:26', 'Single Page Application (SPA)', 'SPA', 130),
(2389, '07:36', 'Multi-Page Application (MPA)', 'MPA', 130),
(2390, '08:38', 'Static Site Generation (SSG)', 'SSG', 130),
(2391, '11:42', 'Server-side Rendering (SSR)', 'SSR', 130),
(2392, '13:08', 'Partial Hydration', 'Partial Hydration', 130),
(2393, '14:24', 'Progressive Hydration', 'Progressive Hydration', 130),
(2394, '15:56', 'Island Architecture', 'Island Architecture', 130),
(2395, '16:35', 'Progressive Enhancement', 'Progressive Enhancement', 130),
(2396, '18:31', 'Incremental Static Generation (ISG)', 'ISG', 130),
(2397, '19:51', 'Streaming SSR', 'Streaming SSR', 130),
(2398, '19:56', 'Resumability', 'Resumability', 130),
(2399, '22:05', 'Edge Rendering', 'Edge Rendering', 130),
(2400, '02:33', 'Vu Le works at Disney building internal CMS and tools', 'Internal Tools', 131),
(2401, '03:33', 'Vu transitioned from marketing to coding via online resources and projects', 'Career Change', 131),
(2402, '05:13', 'Vu was recruited by Disney for a contract role initially', 'Recruited by Disney', 131),
(2403, '07:52', 'Vu works on tools for direct to consumer products like Disney Plus', 'Consumer Products', 131),
(2404, '09:02', 'Vu builds CMS tools on legacy systems using modern stacks', 'Legacy Systems', 131),
(2405, '12:33', 'They use federated GraphQL APIs', 'GraphQL APIs', 131),
(2406, '15:22', 'UX focused on usability for complex workflows', 'UX Focused', 131),
(2407, '19:02', 'Frontend built in React with component library', 'React Stack', 131),
(2408, '24:12', 'Focus on testing for reliability', 'Reliability Testing', 131),
(2409, '31:01', 'Distributed team working remotely', 'Remote Team', 131),
(2410, '33:41', 'Flexible work policies up to teams and managers', 'Flexible Work', 131),
(2411, '35:15', 'Employees get Disney Plus bundle', 'Disney Perks', 131),
(2412, '38:35', 'Vu uses MacBook Pro and custom mechanical keyboard', 'Hardware Setup', 131),
(2413, '00:11', 'Discussing petty preferences and readable code', 'Preferences', 132),
(2414, '00:54', 'Sponsored by Linode, LogRocket and FreshBooks', 'Sponsors', 132),
(2415, '01:06', 'Scott launching a site this week', 'Site launch', 132),
(2416, '02:13', 'Getting feedback before launch vs after', 'Feedback', 132),
(2417, '02:23', 'Feeling exhausted from prepping for launch', 'Exhausted', 132),
(2418, '02:33', 'Function definitions vs arrow functions', 'Functions', 132),
(2419, '03:10', 'Prefer named functions over arrow in variables', 'Named functions', 132),
(2420, '03:35', 'TypeScript makes arrow functions convenient', 'TypeScript', 132),
(2421, '00:01', 'GitHub Next projects', 'GitHub upcoming projects', 133),
(2422, '02:15', 'Firefox enables container queries', 'Firefox container queries', 133),
(2423, '05:34', 'Sponsors: Linode and LogRocket', 'Sponsors', 133),
(2424, '07:56', 'GitHub Next website overview', 'GitHub Next', 133),
(2425, '09:03', 'GitHub Copilot CLI', 'Copilot CLI', 133),
(2426, '13:53', 'GitHub voice coding', 'Voice coding', 133),
(2427, '16:57', 'GitHub Blocks', 'GitHub Blocks', 133),
(2428, '18:57', 'GitHub code search', 'Code search', 133),
(2429, '22:03', 'GitHub collaborative workspaces', 'Collaborative workspaces', 133),
(2430, '24:01', 'GitHub Copilot for own codebase', 'Copilot own code', 133),
(2431, '25:13', 'GitHub Copilot Radar', 'Copilot Radar', 133),
(2432, '26:48', 'GitHub Copilot Labs', 'Copilot Labs', 133),
(2433, '29:25', 'GitHub AI for pull requests', 'AI pull requests', 133),
(2434, '02:33', 'Bun is faster than Node', 'Bun vs Node', 134),
(2435, '04:10', 'Bun has a plugin system like Esbuild', 'Bun plugins', 134),
(2436, '05:25', 'Safari team optimizes JavaScriptCore engine', 'JavaScriptCore', 134),
(2437, '08:51', 'Bun name comes from creator\'s friend\'s bunny', 'Bun name', 134),
(2438, '12:12', 'No immediate plans for linting in Bun', 'No linting', 134),
(2439, '15:45', 'Bun optimized WebStreams API', 'Fast streams', 134),
(2440, '18:41', 'Bun has custom JSX transform', 'JSX transform', 134),
(2441, '21:14', 'Recreating VS Code takes massive effort', 'VS Code effort', 134),
(2442, '25:15', 'Creator learned Ruby, Objective-C, JavaScript', 'Creator background', 134),
(2443, '29:18', 'Bun architecture works for embedded systems', 'Embedded systems', 134),
(2444, '30:14', 'Package.json is like an import map', 'Package.json', 134),
(2445, '31:45', 'Hard to make existing projects much faster', 'Legacy speed', 134),
(2446, '33:23', 'Bun testing library 40x faster than Jest', 'Fast testing', 134),
(2447, '00:11', 'Potluck questions on Twitter usage, CRUD vs WebSockets, if CRUD is amateur, Playwright testing', 'Topics', 135),
(2448, '00:33', 'Sponsors: Prismic, Sanity, LogRocket', 'Sponsors', 135),
(2449, '01:02', 'Scott launching Level Up Tutorials site soon', 'Scott update', 135),
(2450, '01:55', 'Wes recording TypeScript course and making TikToks', 'Wes update', 135),
(2451, '02:23', 'Finding creativity through making short-form content', 'Short-form content', 135),
(2452, '02:51', 'How to use Twitter to stay updated in web dev', 'Using Twitter', 135),
(2453, '03:52', 'Curate who you follow, check blog post authors', 'Curate follows', 135),
(2454, '04:30', 'Follow then unfollow if bad content', 'Unfollow', 135),
(2455, '04:55', 'Avoid using Twitter topics and suggestions', 'Avoid topics', 135),
(2456, '05:13', 'Use mute liberally on people, topics, keywords', 'Use mute', 135),
(2457, '05:34', 'Use TweetDeck for viewing tweets', 'TweetDeck', 135),
(2458, '05:52', 'Concerns about TweetDeck\'s future', 'TweetDeck future', 135),
(2459, '06:41', 'Twitter turmoil may change landscape', 'Twitter turmoil', 135),
(2460, '08:22', 'Canadian block (block then unblock) to unfollow', 'Canadian block', 135),
(2461, '09:02', 'Follow people posting demos, not influencers', 'Follow demos', 135),
(2462, '10:32', 'Look at replies to Wes and Scott\'s questions for experts', 'Reply experts', 135),
(2463, '10:48', 'Future episode on amazing Twitter follows', 'Twitter follows episode', 135),
(2464, '12:12', 'CRUD is request/response, real-time is constant connection', 'CRUD vs real-time', 135),
(2465, '12:59', 'WebSockets allow real-time data push and listen', 'WebSockets', 135),
(2466, '15:07', 'Humorous breakdown of Google\'s messaging history', 'Google messaging', 135),
(2467, '00:30', 'Discussing limitations of serverless functions', 'Serverless limits', 136),
(2468, '00:46', 'Function size limits', 'Size limits', 136),
(2469, '01:03', 'Sponsor - Sentry error monitoring', 'Sentry ad', 136),
(2470, '02:05', 'Sponsor - Magic Bell notifications', 'Magic Bell ad', 136),
(2471, '03:24', 'Serverless use cases and tradeoffs', 'Tradeoffs', 136),
(2472, '04:26', 'Serverless constraints vs traditional servers', 'Constraints', 136),
(2473, '04:45', 'Function code size limits', 'Code size', 136),
(2474, '05:14', 'Node module sizes add up quickly', 'Node modules', 136),
(2475, '05:32', 'Puppeteer hits size limit', 'Puppeteer', 136),
(2476, '06:30', 'Chromium is too big for functions now', 'Chromium size', 136),
(2477, '07:30', 'Layers can workaround size limits', 'Layers', 136),
(2478, '08:54', 'Limited Node support in Cloudflare Workers', 'Node support', 136),
(2479, '09:51', 'Database access not straightforward', 'Database access', 136),
(2480, '10:31', 'Not all providers support cron jobs', 'Cron jobs', 136),
(2481, '11:23', 'Local dev environments differ', 'Local dev', 136),
(2482, '11:48', 'Sharing code can be difficult', 'Sharing code', 136),
(2483, '12:51', 'Bundling doesn\'t always optimize', 'Bundling', 136),
(2484, '13:31', 'Environment variable size limits', 'Env vars', 136),
(2485, '14:39', 'Execution timeouts are short', 'Timeouts', 136),
(2486, '15:49', 'Additional services add up in cost', 'Costs', 136),
(2487, '16:14', 'Need to know AWS well', 'Learn AWS', 136),
(2488, '17:01', 'Account costs even before usage', 'Account costs', 136),
(2489, '17:58', 'Infrastructure as code is crucial', 'Infra as code', 136),
(2490, '18:35', 'Cold start issues can happen', 'Cold starts', 136),
(2491, '19:18', 'Search offerings not ideal', 'Search issues', 136),
(2492, '19:49', 'Algolia is expensive at scale', 'Algolia cost', 136),
(2493, '00:00', 'Intro to Syntax Supper Club', 'Intro', 137),
(2494, '00:37', 'Welcome from Scott', 'Welcome', 137),
(2495, '00:52', 'Talking about non-coding topics', 'Non-coding', 137),
(2496, '02:08', 'Sponsor spots', 'Sponsors', 137),
(2497, '02:52', 'Holiday plans discussion', 'Holidays', 137),
(2498, '03:23', 'Wes family plans for holidays', 'Wes plans', 137),
(2499, '04:25', 'Discussion of Saskatoon berries', 'Berries', 137),
(2500, '05:00', 'Reality TV draft game explanation', 'Draft game', 137),
(2501, '06:15', 'Strategy for reality TV draft picks', 'Draft strategy', 137);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(2502, '07:16', 'Amazing Race Canada discussion', 'Amazing Race', 137),
(2503, '08:02', 'Discussion of movie Rat Race', 'Rat Race', 137),
(2504, '08:16', 'Other reality shows watched', 'Other shows', 137),
(2505, '09:00', 'Discussion of home reno shows', 'Home reno', 137),
(2506, '09:31', 'Behind the scenes of reality shows', 'Behind scenes', 137),
(2507, '10:33', 'Friend\'s experience on dance show', 'Friend\'s experience', 137),
(2508, '11:13', 'Asked to be on HGTV show', 'Asked for show', 137),
(2509, '00:11', 'Responsive design techniques', 'Topic', 138),
(2510, '00:23', 'Sponsors', 'Ads', 138),
(2511, '00:42', 'Introduction', 'Intro', 138),
(2512, '00:50', 'Cleaning house', 'Chitchat', 138),
(2513, '02:21', 'Vacuum talk', 'Chitchat', 138),
(2514, '04:00', 'Responsive design talk', 'Topic', 138),
(2515, '05:04', 'Basic responsive technique', 'Responsive', 138),
(2516, '05:12', 'Definition of responsive design', 'Responsive', 138),
(2517, '05:21', 'Responsive on devices', 'Responsive', 138),
(2518, '05:33', 'Older adaptive techniques', 'History', 138),
(2519, '00:35', 'Introducing React Use hook for handling promises', 'React Use', 139),
(2520, '01:41', 'Sentry sponsor', 'Sentry', 139),
(2521, '02:45', 'Auth0 sponsor', 'Auth0', 139),
(2522, '05:29', 'Basics of React Use hook', 'Basics', 139),
(2523, '07:20', 'React Suspense and server components', 'Suspense', 139),
(2524, '08:26', 'Examples in Next.js 13', 'Next.js', 139),
(2525, '09:07', 'Footguns like checking for null data', 'Footguns', 139),
(2526, '10:11', 'Handling data on server side', 'Server side', 139),
(2527, '11:05', 'Similarities to React Query', 'React Query', 139),
(2528, '11:45', 'Why do we want React Use hook', 'Why Use', 139),
(2529, '13:00', 'Client vs server component APIs differences', 'API differences', 139),
(2530, '14:09', 'Concerns around hook exceptions', 'Hook exceptions', 139),
(2531, '15:00', 'Modifying built-ins like fetch and promises', 'Modifying built-ins', 139),
(2532, '16:24', 'MooTools and Smooshgate', 'Smooshgate', 139),
(2533, '18:08', 'Infinite loop footgun', 'Infinite loop', 139),
(2534, '19:08', 'Svelte compiler makes APIs nicer', 'Svelte compiler', 139),
(2535, '20:16', 'Fragmentation in React ecosystem', 'Fragmentation', 139),
(2536, '00:00', 'Introduction', 'Intro', 140),
(2537, '00:37', 'Wes introduces the podcast with Ryan Dahl', 'Intros', 140),
(2538, '01:05', 'Wes and Ryan talk about Node\'s early days', 'Node history', 140),
(2539, '02:37', 'Ryan discusses why he still believes in JavaScript', 'JS future', 140),
(2540, '03:05', 'Ryan talks about the uncertain future of web in 2012', 'Web uncertainty', 140),
(2541, '04:06', 'Ryan says JavaScript will still be here in 5-20 years', 'JS longevity', 140),
(2542, '04:39', 'Ryan calls JS the default programming language', 'JS default', 140),
(2543, '05:38', 'Wes asks Ryan why he made Deno', 'Why Deno?', 140),
(2544, '05:49', 'Ryan talks about handing off Node to Linux Foundation', 'Node handoff', 140),
(2545, '06:03', 'Ryan discusses Node\'s outdated C++ codebase', 'Node outdated', 140),
(2546, '06:40', 'Ryan says Rust has replaced C++', 'Rust replaces C++', 140),
(2547, '06:54', 'Wes agrees on Rust hype', 'Rust hype', 140),
(2548, '07:02', 'Ryan clarifies Rust no faster than C++', 'Rust vs C++', 140),
(2549, '07:13', 'Ryan praises Rust\'s architecture', 'Rust architecture', 140),
(2550, '07:28', 'Ryan wanted to improve JS security', 'JS security', 140),
(2551, '07:48', 'Ryan regrets lack of security in Node', 'Node security', 140),
(2552, '08:06', 'Deno started as Node 2.0 experiment', 'Deno experiment', 140),
(2553, '08:16', 'Goals of Deno', 'Deno goals', 140),
(2554, '08:39', 'Scott asks about Deno\'s bet on TypeScript', 'Deno and TS', 140),
(2555, '08:48', 'Scott says TS is how we write JS now', 'TS popularity', 140),
(2556, '09:16', 'Wes asks Ryan\'s thoughts on TypeScript', 'Thoughts on TS', 140),
(2557, '09:25', 'Ryan sees TS as JS 2.0', 'TS as JS 2.0', 140),
(2558, '09:41', 'Ryan praises conservative design of TS', 'TS design', 140),
(2559, '09:54', 'Ryan discusses adding types to JS spec', 'Types in JS', 140),
(2560, '10:49', 'Wes jokes about CoffeeScript revival', 'CoffeeScript', 140),
(2561, '10:52', 'Ryan dislikes CoffeeScript syntax', 'CoffeeScript syntax', 140),
(2562, '11:02', 'Wes asks if TS will be added to browsers', 'TS in browsers', 140),
(2563, '11:18', 'Ryan doesn\'t think browsers will do type checking', 'No type checking', 140),
(2564, '11:27', 'Ryan thinks browsers will support TS comments', 'TS comments', 140),
(2565, '11:52', 'Wes asks how Deno is made', 'Making Deno', 140),
(2566, '11:59', 'Ryan explains using V8 and Rust', 'V8 and Rust', 140),
(2567, '12:22', 'Ryan talks about Deno\'s async runtime', 'Deno async', 140),
(2568, '12:31', 'Deno uses Tokio instead of libuv', 'Tokio not libuv', 140),
(2569, '12:41', 'Ryan optimized binding JS to native code', 'Binding optimizations', 140),
(2570, '12:52', 'Ryan says Deno supports NPM modules', 'NPM support', 140),
(2571, '13:14', 'Ryan talks about benchmarking Deno vs Node', 'Benchmarking', 140),
(2572, '00:21', 'CSS trends from HTTP archive that show actual web usage', 'CSS trends', 141),
(2573, '01:33', 'Installing smart light switches and dealing with unlabeled breaker boxes', 'Breakers', 141),
(2574, '03:57', 'Box sizing border box usage and techniques', 'Box Model', 141),
(2575, '05:41', 'CSS columns have specific use cases and are increasing in usage', 'Columns', 141),
(2576, '09:25', 'Aspect ratio usagestats and browser support issues', 'Aspect Ratio', 141),
(2577, '09:57', 'Transition property usage and best practices', 'Transitions', 141),
(2578, '13:04', 'Using individual transform properties like translate and rotate', 'Transforms', 141),
(2579, '15:14', 'Long transition durations and keyframe amounts', 'Animation Stats', 141),
(2580, '16:04', 'CSS sprite techniques with steps timing function', 'Sprites', 141),
(2581, '18:40', 'Use cases and options for CSS blend modes', 'Blend Modes', 141),
(2582, '23:59', 'Responsive design trends and anticipating container queries', 'Responsive Design', 141),
(2583, '00:28', 'Talking about short form content', 'Intro', 142),
(2584, '01:44', 'Century sponsors web development podcasts', 'Century ad', 142),
(2585, '02:50', 'Freshbooks provides good customer support', 'Freshbooks ad', 142),
(2586, '04:09', 'Popularity of short form video content', 'Short form', 142),
(2587, '05:15', 'Repurposing existing content for short videos', 'Repurposing', 142),
(2588, '06:42', 'Creating custom short videos from scratch', 'Custom videos', 142),
(2589, '08:08', 'TikTok algorithm surfaces varied content', 'TikTok algorithm', 142),
(2590, '09:31', 'Avoid manipulating algorithms with low quality content', 'Avoid manipulation', 142),
(2591, '12:10', 'Fake content performs well on platforms like Facebook', 'Fake content', 142),
(2592, '14:06', 'Share genuinely useful tips and explanations', 'Useful tips', 142),
(2593, '17:18', 'Discussion on repurposing vs custom content', 'Repurposing vs custom', 142),
(2594, '21:37', 'Get right into the content, no intro', 'No intro', 142),
(2595, '22:20', 'Use on-screen text for thumbnails', 'On-screen text', 142),
(2596, '23:14', 'Avoid unnecessary music', 'No music', 142),
(2597, '24:38', 'Challenges of vertical video for code', 'Vertical video', 142),
(2598, '25:52', 'Strategies for showing code on small screens', 'Showing code', 142),
(2599, '26:48', 'Difficulty explaining details in 1 minute', '1 minute limit', 142),
(2600, '28:16', 'YouTube Shorts limited to 60 seconds', 'YouTube limit', 142),
(2601, '31:55', 'Moving to text-based video editor Descript', 'Descript editor', 142),
(2602, '00:31', 'Wes and Scott introduce live stream', 'Intro', 143),
(2603, '01:16', 'Encouraging audience participation', 'Participate', 143),
(2604, '01:32', 'Scott working on site redesign, fixing bugs', 'Redesign', 143),
(2605, '02:06', 'Safari aspect ratio bug crashing site', 'Bug', 143),
(2606, '03:22', 'Flexbox causing navigation wrapping bug', 'Bug', 143),
(2607, '04:04', 'Asking for audience questions', 'Questions', 143),
(2608, '04:30', 'Discussing Vercel announcements', 'Vercel', 143),
(2609, '05:06', 'Vercel\'s new TurboPack bundler', 'TurboPack', 143),
(2610, '05:29', 'Entering post-Webpack era', 'Webpack', 143),
(2611, '05:51', 'Less plugin reliance in Vercel', 'Plugins', 143),
(2612, '06:10', 'TurboPackfaster than Vite', 'TurboPack', 143),
(2613, '06:43', 'Possibility of switching Vite\'s engine', 'Vite', 143),
(2614, '00:01', 'Podcast intro', 'Intro', 144),
(2615, '00:01', 'Announcer introduces Syntax podcast', 'Announcer', 144),
(2616, '00:28', 'Introducing Zod schema validation', 'Zod intro', 145),
(2617, '01:15', 'What is Zod and why use it?', 'Zod overview', 145),
(2618, '01:37', 'Sponsor spots', 'Sponsors', 145),
(2619, '02:52', 'LogRocket can help debug Zod errors', 'LogRocket', 145),
(2620, '04:00', 'Linode sponsor spot', 'Linode', 145),
(2621, '04:05', 'Thanking Linode for sponsoring', 'Thanks Linode', 145),
(2622, '04:17', 'Running Minecraft server on Linode', 'Minecraft on Linode', 145),
(2623, '07:18', 'Back to Zod topic', 'Zod again', 145),
(2624, '07:33', 'Zod provides schema validation and type inference', 'Zod features', 145),
(2625, '08:59', 'Zod defines data shape', 'Zod data shape', 145),
(2626, '09:30', 'Zod generates types from validation', 'Zod type inference', 145),
(2627, '10:09', 'Zod validates data before generating types', 'Zod validate first', 145),
(2628, '10:21', 'Zod can validate strings and numbers', 'Zod validations', 145),
(2629, '11:45', 'Zod types are required by default', 'Zod default required', 145),
(2630, '12:10', 'Zod type inference is very useful', 'Zod inference useful', 145),
(2631, '13:45', 'Using Zod for DB and API validation', 'Zod for DB and API', 145),
(2632, '14:28', 'Zod as single source of truth', 'Zod single source', 145),
(2633, '14:44', 'Can export Zod to MongoDB JSON schema', 'Zod to MongoDB', 145),
(2634, '15:38', 'Adapting Zod to MongoDB JSON schema', 'Adapting Zod to MongoDB', 145),
(2635, '16:16', 'Zod plugins for APIs and integrations', 'Zod plugins', 145),
(2636, '16:27', 'Zod integrates across app', 'Zod integrates app', 145),
(2637, '17:29', 'Zod as single source of truth', 'Zod single source', 145),
(2638, '17:48', 'Zod provides runtime validation', 'Zod runtime validation', 145),
(2639, '18:35', 'Zod has useful helpers', 'Zod helpers', 145),
(2640, '19:00', 'Zod is fully featured', 'Zod full featured', 145),
(2641, '19:49', 'Comparing Zod to Joi', 'Zod vs Joi', 145),
(2642, '20:10', 'Comparing Zod to Yup', 'Zod vs Yup', 145),
(2643, '20:44', 'Comparing Zod to io-ts', 'Zod vs io-ts', 145),
(2644, '21:11', 'Zod is small but full featured', 'Zod small full featured', 145),
(2645, '21:41', 'Zod download stats', 'Zod downloads', 145),
(2646, '22:39', 'Zod has async validation', 'Zod async validation', 145),
(2647, '23:02', 'Where to learn more about Zod', 'Learn Zod', 145),
(2648, '23:34', 'Conclusion and recommendation', 'Conclusion', 145),
(2649, '02:27', 'Dr. Courtney Talinski introduces herself', 'Intro', 146),
(2650, '03:12', 'Many programmers seem to have ADHD', 'ADHD programmers', 146),
(2651, '04:51', 'Difference between ADHD and just being energetic or distracted', 'ADHD vs energetic', 146),
(2652, '09:29', 'ADHD symptoms need to significantly interrupt everyday life', 'ADHD criteria', 146),
(2653, '11:45', 'ADHD symptoms in adults working in offices', 'Adult ADHD', 146),
(2654, '15:31', 'Trouble with planning and staying on track', 'Planning struggles', 146),
(2655, '17:22', 'Tips for structuring your day with ADHD', 'Structuring tips', 146),
(2656, '00:20', 'First spooky story about using profane placeholder text', 'Bad text', 147),
(2657, '02:45', 'Story about enabling compression and crashing site', 'Site crash', 147),
(2658, '05:15', 'Sending same email hundreds of times to one user', 'Email flood', 147),
(2659, '13:00', 'Using deprecated framework and lack of documentation', 'Old code', 147),
(2660, '19:55', 'Changing GitHub username brought down Docker and more', 'Mass outage', 147),
(2661, '22:05', 'Deleting Mongo records on user delete', 'Data loss', 147),
(2662, '29:15', 'Deleting production database accidentally', 'DB deleted', 147),
(2663, '30:10', 'Accidentally streaming .env variables on Twitch', 'Stream leak', 147),
(2664, '04:07', 'Discussing buzzwords', 'buzzwords', 148),
(2665, '04:21', 'Defining schema', 'schema', 148),
(2666, '05:31', 'Schema in JS vs JSON', 'schema types', 148),
(2667, '06:43', 'Other schema languages', 'schema languages', 148),
(2668, '07:30', 'Explaining promises', 'promises', 148),
(2669, '08:57', 'Asynchronous vs synchronous', 'async vs sync', 148),
(2670, '12:24', 'Concurrent vs parallel', 'concurrent vs parallel', 148),
(2671, '13:18', 'DOM vs Shadow DOM vs HTML', 'DOM', 148),
(2672, '16:20', 'Methods vs functions', 'methods vs functions', 148),
(2673, '18:20', 'What are props?', 'props', 148),
(2674, '21:19', 'HTTP requests are stateless', 'stateless requests', 148),
(2675, '01:00', 'Sky uses GraphQL as aggregation and filtering layer for existing APIs', 'GraphQL Usage', 149),
(2676, '02:18', 'Philippe works at Sky UK, supports products like Sky Showtime, Peacock', 'Guest Intro', 149),
(2677, '03:31', 'GraphQL abstracts calling multiple APIs into one response', 'GraphQL Benefits', 149),
(2678, '04:11', 'Frontend only sees one GraphQL API instead of multiple REST APIs', 'Frontend View', 149),
(2679, '06:39', 'Sky has one central GraphQL team, other teams can optionally federate', 'Central GraphQL', 149),
(2680, '07:05', 'Frontend only interacts with the central GraphQL API', 'Single API', 149),
(2681, '11:13', 'GraphQL servers co-located with databases for fast network calls', 'Co-located Servers', 149),
(2682, '11:41', 'Frontend is standard React/Redux app', 'Frontend Stack', 149),
(2683, '13:28', 'Apollo client handles frontend GraphQL caching', 'Frontend Caching', 149),
(2684, '18:50', 'Built Apple TV and Desktop apps with React Native and Electron', 'Client Apps', 149),
(2685, '19:59', 'Desktop app uses Electron, React and proprietary video player', 'Desktop Stack', 149),
(2686, '21:43', 'Video stored in S3, distributed via CDNs like Akamai', 'Video Infrastructure', 149),
(2687, '25:01', 'Support live events by monitoring and reporting metrics', 'Live Event Support', 149),
(2688, '27:33', 'Auto-scale GraphQL functions to handle demand spikes', 'Auto Scaling', 149),
(2689, '30:27', 'GraphQL API written in TypeScript', 'TypeScript API', 149),
(2690, '00:36', 'Discussion of cringey web dev stories', 'Cringey stories', 150),
(2691, '01:04', 'Mention of Scott taking last episode solo', 'Last episode', 150),
(2692, '02:49', 'Sponsorships from Sentry, Prismic, and Freshbooks', 'Sponsors', 150),
(2693, '03:11', 'First story about accidentally deleting exam questions', 'Exam questions', 150),
(2694, '04:42', 'Using global state caused performance issues', 'Global state', 150),
(2695, '06:18', 'Exams with too many questions overloaded the app', 'Overloaded app', 150),
(2696, '08:14', 'Suggestion to use React Virtualized for large lists', 'Virtualized lists', 150),
(2697, '09:23', 'Story about 404 alerts flooding phone with notifications', '404 alerts', 150),
(2698, '13:12', 'Story about deleting orders instead of fixing them', 'Deleting orders', 150),
(2699, '14:27', 'Tiny database field caused form errors', 'Tiny database field', 150),
(2700, '16:54', 'Manager may have hid cost of tiny database mistake', 'Hid database mistake', 150),
(2701, '18:48', 'Story about lack of testing and code review at company', 'No testing or review', 150),
(2702, '20:53', 'Accidentally moved form button, costing $1 million in sales', '$1 million mistake', 150),
(2703, '01:14', 'Quick uses React patterns', 'Quick React', 151),
(2704, '02:05', 'Sentry helps track bugs', 'Sentry bugs', 151),
(2705, '02:53', 'Sanity is a content lake', 'Sanity content', 151),
(2706, '05:19', 'Quick created by Angular inventor', 'Quick Angular', 151),
(2707, '05:59', 'Quick uses JSX', 'Quick JSX', 151),
(2708, '06:36', 'JSX popular in frameworks', 'JSX popular', 151),
(2709, '06:49', 'Scott doesn\'t like JSX', 'Scott no JSX', 151),
(2710, '08:29', 'SSR means server-side rendering', 'SSR', 151),
(2711, '09:15', 'Quick uses Vite', 'Quick Vite', 151),
(2712, '09:33', 'Quick eliminates hydration', 'No hydration', 151),
(2713, '12:11', 'Hydration is slow', 'Slow hydration', 151),
(2714, '12:43', 'Quick serializes state to HTML', 'Serialized state', 151),
(2715, '13:45', 'Quick ships HTML and JS', 'HTML and JS', 151),
(2716, '15:07', 'More logic on server', 'Server logic', 151),
(2717, '15:37', 'Lazy loading built-in', 'Lazy loading', 151),
(2718, '15:55', 'Selective re-rendering', 'Selective rendering', 151),
(2719, '16:35', 'Quick Optimizer tool', 'Optimizer tool', 151),
(2720, '17:21', 'No need to memoize', 'No memoization', 151),
(2721, '18:23', 'Adapter middleware model', 'Middleware model', 151),
(2722, '19:51', 'Quick City adds routing, data', 'Quick City', 151),
(2723, '21:24', 'Using browser fundamentals', 'Browser fundamentals', 151),
(2724, '00:00', 'Intro', 'Intro', 152),
(2725, '00:37', 'Overview of tRPC', 'Overview', 152),
(2726, '02:52', 'tRPC functions call endpoints', 'Endpoints', 152),
(2727, '04:13', 'Caching similar to REST', 'Caching', 152),
(2728, '04:57', 'Configurable communication', 'Communication', 152),
(2729, '06:16', 'Has subscription support', 'Subscriptions', 152),
(2730, '06:33', 'Calling functions without requests', 'Functions', 152),
(2731, '07:28', 'Avoiding GraphQL spec generation', 'GraphQL', 152),
(2732, '09:15', 'Editor awareness across project', 'Editor', 152),
(2733, '09:39', 'No runtime info sent to client', 'Runtime', 152),
(2734, '10:39', 'Sponsor break - Polypane', 'Sponsor', 152),
(2735, '13:35', 'Role of Zod validation library', 'Zod', 152),
(2736, '14:40', 'Zod not required for tRPC', 'Not required', 152),
(2737, '15:00', 'Zod maps to TypeScript types', 'TypeScript', 152),
(2738, '16:16', 'Found Zod 2 years ago', 'Found Zod', 152),
(2739, '16:55', 'Required by default', 'Required', 152),
(2740, '00:12', 'Web Almanac provides web usage stats', 'Web stats', 153),
(2741, '00:41', 'Difference between developer survey stats and actual web usage stats', 'Usage stats', 153),
(2742, '01:27', 'Sponsors: Prismic, LogRocket, FreshBooks', 'Sponsors', 153),
(2743, '02:18', 'Cleaning office on Fridays sets you up for success', 'Office cleaning', 153),
(2744, '02:47', 'Deep cleaning a vintage wolf stove', 'Cleaning stove', 153),
(2745, '03:58', 'Barkeeper\'s Friend for cleaning pans and sinks', 'Cleaning tips', 153),
(2746, '04:36', 'Web Almanac methodology - scraping tons of websites', 'Methodology', 153),
(2747, '05:19', 'More mobile websites in dataset than desktop', 'Mobile vs desktop', 153),
(2748, '05:34', 'Surprised by high mobile usage compared to desktop', 'Mobile usage', 153),
(2749, '06:09', 'Many people never use computers anymore', 'No computer usage', 153),
(2750, '06:21', 'How do iPad coders use dev tools?', 'iPad coding', 153),
(2751, '02:33', 'Bookmarklets are JavaScript run on page click', 'Bookmarklets', 154),
(2752, '02:51', 'Store JavaScript snippets as browser bookmarks', 'Definition', 154),
(2753, '03:59', 'Can select elements, loop, apply styles with bookmarklets', 'Use cases', 154),
(2754, '04:34', 'Examples: find duplicate IDs, show hidden fields', 'Examples', 154),
(2755, '04:51', 'Use immediately invoked function expressions (IIFEs)', 'IIFEs', 154),
(2756, '05:23', 'Used for printing, removing header/footer, etc', 'Print CSS', 154),
(2757, '06:14', 'More transparent than extensions, just JavaScript', 'Vs extensions', 154),
(2758, '07:19', 'Bookmarks toolbar not as popular anymore', 'Drawbacks', 154),
(2759, '07:42', 'Bookmarklet maker tool to generate code', 'Bookmarklet maker', 154),
(2760, '08:09', 'Can take user input with prompt() too', 'User input', 154),
(2761, '08:34', 'Forgotten technique but very useful', 'Forgotten but useful', 154),
(2762, '09:08', 'CSS Tricks - 6 useful bookmarklets', 'CSS Tricks post', 154),
(2763, '09:55', 'Like userscripts e.g. Greasemonkey', 'Greasemonkey', 154),
(2764, '00:57', 'Sponsored by 3 companies', 'Sponsors', 155),
(2765, '01:25', 'Guest is Dutch and from Michigan', 'Guest intro', 155),
(2766, '03:45', 'Difference between Vim and Neovim', 'Vim vs Neovim', 155),
(2767, '06:15', 'Why Neovim added Lua integration', 'Lua integration', 155),
(2768, '09:27', 'Benefits of Lua for non-web devs', 'Lua benefits', 155),
(2769, '11:55', 'Lua simplicity compared to JavaScript', 'Lua simplicity', 155),
(2770, '13:38', 'Neovim goal of adaptive UIs', 'Adaptive UIs', 155),
(2771, '17:56', 'Discussion of LunarVim Neovim distribution', 'LunarVim', 155),
(2772, '00:02', 'Welcome to Syntax podcast', 'Intro', 156),
(2773, '00:12', 'Using browser APIs instead of frameworks', 'Topic', 156),
(2774, '00:28', 'Sponsors: Prismic, Sanity, LogRocket', 'Sponsors', 156),
(2775, '01:05', 'Scott\'s been socializing with parents at kid\'s school', 'Scott update', 156),
(2776, '03:13', 'Wes ran popcorn machine at school event', 'Wes update', 156),
(2777, '04:29', 'Using browser APIs instead of frameworks', 'Topic', 156),
(2778, '05:26', 'Build with browser basics instead of frameworks', 'Browser basics', 156),
(2779, '06:54', 'URLSearchParams for query strings', 'URLSearchParams', 156),
(2780, '08:22', 'URLSearchParams has useful methods', 'URLSearchParams methods', 156),
(2781, '10:20', 'History API and pushState', 'History API', 156),
(2782, '11:41', 'Client-side routing uses History API', 'Client routing', 156),
(2783, '12:56', 'Hashbang URLs workaround before History API', 'Hashbang', 156),
(2784, '14:14', 'Internationalization API for formatting', 'Intl API', 156),
(2785, '15:15', 'Intl for formatting lists', 'Intl lists', 156),
(2786, '15:51', 'Intl useful even with one language', 'Intl', 156),
(2787, '17:19', 'FormData API gets form values', 'FormData API', 156),
(2788, '18:04', 'FormData turns form into data object', 'FormData object', 156),
(2789, '18:25', 'FormData frustrations with TypeScript', 'FormData TypeScript', 156),
(2790, '20:45', 'Sponsor: Prismic', 'Sponsor', 156),
(2791, '21:43', 'DOM API for elements on page', 'DOM API', 156),
(2792, '22:48', 'DOM better than jQuery', 'DOM > jQuery', 156),
(2793, '24:11', 'DOM great for vanilla JS', 'DOM vanilla JS', 156),
(2794, '24:42', 'Firing custom DOM events', 'Custom DOM events', 156),
(2795, '03:00', 'Everything is object in JS', 'Objects', 157),
(2796, '04:51', 'Syntactic sugar explained', 'Sugar', 157),
(2797, '06:33', 'Pros and cons of syntactic sugar', 'Sugar debate', 157),
(2798, '09:10', 'Functions as first class citizens', 'Functions', 157),
(2799, '10:08', 'Object literals explained', 'Objects', 157),
(2800, '11:29', 'Declarative vs imperative code', 'Declarative', 157),
(2801, '02:29', 'Graphcool became popular for quick GraphQL prototyping', 'Graphcool', 158),
(2802, '03:41', 'Nicholas has worked at Prisma for 6 years', 'Prisma History', 158),
(2803, '05:25', 'Prisma is no longer tightly coupled to GraphQL', 'Prisma Today', 158),
(2804, '07:01', 'Graph.cool was an amazing domain name', 'Graph.cool Domain', 158),
(2805, '08:29', 'Graphcool users would leave the service as apps grew', 'Graphcool Limitations', 158),
(2806, '10:45', 'Prisma 1 provided a GraphQL database proxy', 'Prisma 1', 158),
(2807, '14:02', 'Prisma 1 was confusing compared to other ORMs', 'Prisma 1 Confusing', 158),
(2808, '14:27', 'Prisma today competes directly with ORMs', 'Prisma Today', 158),
(2809, '00:11', 'Welcome to Syntax podcast', 'Intro', 159),
(2810, '00:41', 'Sponsored by Linode, LogRocket, Sanity', 'Sponsors', 159),
(2811, '01:16', 'Wes introduces himself', 'Wes intro', 159),
(2812, '01:18', 'Scott introduces himself', 'Scott intro', 159),
(2813, '02:13', 'Wes knows football is not hockey', 'Sports talk', 159),
(2814, '03:06', 'Wes wants to attend a Bills game', 'Bills game', 159),
(2815, '03:53', 'Scott\'s neighbor was talking to Ciara without knowing', 'Neighbor story', 159),
(2816, '04:05', 'Moving on to first question', 'First question', 159),
(2817, '04:29', 'Question about using emojis for CSS grid areas', 'Emoji CSS', 159),
(2818, '06:28', 'Scott\'s take on emoji CSS areas', 'Scott\'s take', 159),
(2819, '08:34', 'Next question about project timelines', 'Project timelines', 159),
(2820, '01:28', 'Tips for getting past project blahs', 'tips', 160),
(2821, '02:13', 'Linode sponsor', 'sponsor', 160),
(2822, '03:02', 'LogRocket sponsor', 'sponsor', 160),
(2823, '03:55', 'Last 10% of project is hard', 'hard', 160),
(2824, '04:24', 'Ready for next project, need to finish current one', 'finish', 160),
(2825, '05:23', 'Break tasks into smaller pieces', 'breakdown', 160),
(2826, '06:49', 'Do easy tasks first for motivation', 'motivation', 160),
(2827, '07:36', 'Prioritize and estimate tasks', 'prioritize', 160),
(2828, '08:13', 'Just start working', 'start', 160),
(2829, '08:43', 'Give yourself rewards', 'rewards', 160),
(2830, '09:58', 'Wes likes slushies as rewards', 'slushies', 160),
(2831, '11:34', 'Good and launched better than perfect', 'launched', 160),
(2832, '12:45', 'Ask if bugs will matter in 2 weeks', 'bugs', 160),
(2833, '13:10', 'Features should be good enough', 'good enough', 160),
(2834, '14:21', 'Keep end goal in sight', 'end goal', 160),
(2835, '15:49', 'Do tasks quick-a-minute', 'quick', 160),
(2836, '16:38', 'Do a downtown job quick-a-minute', 'downtown', 160),
(2837, '19:14', 'Make a todo list', 'todo', 160),
(2838, '20:36', 'Incline metaphor', 'incline', 160),
(2839, '00:26', 'Intro to Syntax supper club episode with guests Scott, Wes, and Brian Douglas aka B Dougie', 'Intro', 161),
(2840, '00:57', 'Brian talking about meeting Scott and Wes at Jamstack Conf and his background in engineering and open source', 'Guest intro', 161),
(2841, '02:33', 'Brian started Open Sauce to help people learn to contribute to open source', 'Open Sauce origin', 161),
(2842, '05:43', 'Brian has been live streaming development on Open Sauce to build a community', 'Live streaming', 161),
(2843, '08:16', 'Open Sauce aims to provide tools for open source project maintainers', 'Open Sauce goals', 161),
(2844, '11:48', 'GitHub GraphQL API is stagnant due to teams moving around', 'GitHub API', 161),
(2845, '14:44', 'Brian is trying out tRPC, Tailwind, TypeScript, Next.js stack for new projects', 'New stack', 161),
(2846, '18:42', 'Goal of Open Sauce is to make open source more approachable and diverse', 'Open Sauce end goal', 161),
(2847, '20:26', 'Brian live streams Open Sauce development and has built a community', 'Live streaming setup', 161),
(2848, '00:48', 'Prismic sponsors podcast', 'Sponsors', 162),
(2849, '00:56', 'LogRocket and FreshBooks sponsor podcast', 'Sponsors', 162),
(2850, '01:13', 'Scott built office himself', 'Office build', 162),
(2851, '02:18', 'Feed speakers through ceiling', 'Office setup', 162),
(2852, '03:03', 'Chose basement for new office', 'Office location', 162),
(2853, '03:49', 'Teens destroy drop ceilings', 'Teenagers', 162),
(2854, '04:07', 'Framed out basement office', 'Office setup', 162),
(2855, '04:25', 'Did work himself for soundproofing', 'DIY reasoning', 162),
(2856, '05:13', 'Experts helped with soundproofing', 'Soundproofing help', 162),
(2857, '05:28', 'Contractors avoid small jobs', 'Contractor availability', 162),
(2858, '06:00', 'Mistakes ruin soundproofing', 'Soundproofing importance', 162),
(2859, '06:17', 'Did it himself to understand', 'DIY reasoning', 162),
(2860, '06:36', 'Soundproofing needs isolation', 'Soundproofing basics', 162),
(2861, '06:58', 'Old office had noise issues', 'Previous office', 162),
(2862, '07:45', 'Lost ceiling height for soundproofing', 'Soundproofing sacrifice', 162),
(2863, '09:45', 'Goals for dream office', 'Office goals', 162),
(2864, '00:30', 'New HTML framework called Enhance JS', 'Enhance JS', 163),
(2865, '01:06', 'Enhance JS is web standards based, provides lightweight components', 'Lightweight', 163),
(2866, '02:11', 'Sanity.io sponsors segment', 'Sanity sponsor', 163),
(2867, '03:39', 'Enhance JS overview', 'Overview', 163),
(2868, '04:49', 'File based routing with HTML pages', 'Routing', 163),
(2869, '06:36', 'Write components in pure functions', 'Pure functions', 163),
(2870, '07:06', 'No built-in state management', 'No state', 163),
(2871, '08:03', 'HTML tag template literals for components', 'Tag templates', 163),
(2872, '09:35', 'No templating language, just HTML', 'No templates', 163),
(2873, '11:09', 'Enhanced store for complex state', 'Enhanced store', 163),
(2874, '11:49', 'Server data via JSON into store', 'Server data', 163),
(2875, '13:12', 'Deployable serverless functions', 'Serverless deploy', 163),
(2876, '13:48', 'Provides SSR, easier components, routing', 'Features', 163),
(2877, '15:27', 'Using web standards', 'Web standards', 163),
(2878, '02:33', 'Started a company called Branch', 'Branch', 164),
(2879, '03:10', 'Saw a trend of productivity software taking a product lens', 'Productivity trend', 164),
(2880, '04:09', 'Realized browsers hadn\'t changed much from a UX perspective', 'Browser UX', 164),
(2881, '04:49', 'Other browsers like Chrome and Firefox haven\'t innovated UI much', 'Lack of browser UI innovation', 164),
(2882, '05:35', 'Focused on interactions and details in Arc browser', 'Arc interactions', 164),
(2883, '06:50', 'Iterated quickly on prototypes to refine Arc browser', 'Fast iteration', 164),
(2884, '07:14', 'Solved tab overload by improving product, not technology', 'Tab overload', 164),
(2885, '08:11', 'Auto-archiving gets rid of old tabs users won\'t miss', 'Auto-archiving', 164),
(2886, '09:13', 'Arc takes responsibility for helping users manage information overload', 'Managing overload', 164),
(2887, '10:56', 'Building a browser is incredibly complex', 'Browser complexity', 164),
(2888, '13:03', 'Arc UI is built in Swift instead of JavaScript', 'Swift UI', 164),
(2889, '14:32', 'Design and interactions were a huge focus for Arc', 'Design focus', 164),
(2890, '16:25', 'Arc\'s command T opens a command palette', 'Command T', 164),
(2891, '18:08', 'Arc command palette good for discovering features', 'Command palette', 164),
(2892, '19:56', 'Shortcut system was challenging with websites using shortcuts', 'Shortcut challenges', 164),
(2893, '24:27', 'Plan to make money without compromising user experience', 'Revenue plan', 164),
(2894, '25:30', 'Revenue model likely a subscription', 'Subscription model', 164),
(2895, '26:54', 'Browser company benefits from Google payments to browsers', 'Google payments', 164),
(2896, '28:14', 'No plans currently to customize user agent string', 'User agent string', 164),
(2897, '29:49', 'Considering Arc mobile as app vs mobile browser', 'Mobile strategy', 164),
(2898, '31:11', 'Feedback driven development', 'Feedback driven', 164),
(2899, '32:41', 'Team dogfooding and feedback are key', 'Dogfooding', 164),
(2900, '34:54', 'Fun, customizable theme options', 'Themes', 164),
(2901, '37:55', 'Flat keyboards ideal to avoid RSI', 'Keyboards and RSI', 164),
(2902, '38:46', 'Using Warp terminal', 'Warp terminal', 164),
(2903, '39:20', 'Would learn JavaScript first if starting today', 'Learn JavaScript', 164),
(2904, '40:10', 'Hacker News and newsletters for learning', 'Learning resources', 164),
(2905, '40:46', 'Excited about potential of WebAssembly', 'WebAssembly potential', 164),
(2906, '42:07', 'Follow Arc at @ArcInternet on Twitter', '@ArcInternet', 164),
(2907, '00:51', 'Scott improving office lighting', 'Office lights', 165),
(2908, '01:17', 'Facebook shuts down Scott\'s account for selling shelf', 'Facebook shutdown', 165),
(2909, '02:05', 'Scott nearly done setting up his office', 'Office setup', 165),
(2910, '02:19', 'Wes will do office tour podcast once done', 'Office podcast', 165),
(2911, '02:36', 'Wes suggests naming his office \"The Boss House\"', 'Boss House', 165),
(2912, '02:43', 'Starting tips for being productive', 'Productivity tips', 165),
(2913, '03:06', 'Scott\'s productive day is checking off important tasks', 'Checking tasks', 165),
(2914, '04:02', 'Wes\'s productive day is completing 2-3 big things', 'Completing big tasks', 165),
(2915, '04:49', 'Scott\'s unproductive day involves wasted time', 'Wasted time', 165),
(2916, '05:57', 'Wes\'s frustrating day is wasted time down rabbit holes', 'Rabbit holes', 165),
(2917, '07:18', 'Moving into productivity techniques and tips', 'Techniques', 165),
(2918, '07:33', 'Wes uses Getting Things Done system', 'GTD system', 165),
(2919, '08:01', 'GTD involves capturing everything to organize and do', 'GTD capture', 165),
(2920, '09:32', 'GTD helps Wes stay focused on next task', 'GTD focus', 165),
(2921, '10:31', 'Scott uses system to know what to pick up next', 'Scott\'s system', 165),
(2922, '11:46', 'Scott logs fleeting ideas to possibly revisit later', 'Logging ideas', 165),
(2923, '13:10', 'GTD and Eat That Frog are great productivity books', 'Productivity books', 165),
(2924, '13:41', 'Still make time for creative exploration', 'Creative time', 165),
(2925, '14:25', 'Schedule unstructured time to explore ideas', 'Unstructured time', 165),
(2926, '14:50', 'Have lists of things to explore when needing inspiration', 'Exploration lists', 165),
(2927, '15:01', 'Scott assigns points and due dates to prioritize tasks', 'Task points', 165),
(2928, '15:53', 'Sprint methodology influences Scott\'s point system', 'Sprint points', 165),
(2929, '16:26', 'Scott sorts tasks by urgency and difficulty with points', 'Sorting tasks', 165),
(2930, '17:27', 'Wes should consider implementing point system', 'Wes points', 165),
(2931, '17:58', 'Hardest part is initial system setup', 'System setup', 165),
(2932, '18:30', 'Introducing Pomodoro technique', 'Pomodoro intro', 165),
(2933, '18:54', 'Pomodoro involves 25 minute work cycles', '25 minutes', 165),
(2934, '19:02', 'Short breaks between Pomodoros, longer after several', 'Pomodoro breaks', 165),
(2935, '00:30', 'Discussing AI coding tools', 'AI coding', 166),
(2936, '03:20', 'Overview of GitHub Copilot', 'Copilot overview', 166),
(2937, '06:00', 'Ethical concerns of Copilot', 'Ethics', 166),
(2938, '08:00', 'Security concerns of Copilot', 'Security', 166),
(2939, '10:00', 'Will AI take coding jobs?', 'Jobs', 166),
(2940, '12:30', 'Pricing concerns of Copilot', 'Pricing', 166),
(2941, '16:00', 'Copilot worth the cost?', 'Worth it?', 166),
(2942, '18:00', 'Does Copilot make you a worse coder?', 'Makes worse?', 166),
(2943, '20:40', 'Alternatives to GitHub Copilot', 'Alternatives', 166),
(2944, '02:33', 'Introduction of Raycast as an app launcher, calculator, converter, etc', 'Intro to Raycast', 167),
(2945, '05:21', 'Raycast uses Apple\'s Spotlight index for file search instead of building its own', 'File search', 167),
(2946, '07:12', 'Raycast provides an end-to-end solution with store for extensions similar to app stores', 'Extensions', 167),
(2947, '10:35', 'Raycast is built with native Apple technologies like Swift instead of web technologies', 'Native app', 167),
(2948, '13:26', 'The Raycast extension API is built with React, Node.js and TypeScript for developer experience', 'Extension API', 167),
(2949, '18:27', 'A custom React reconciler was built for Raycast to render UI natively instead of HTML/CSS', 'React reconciler', 167),
(2950, '22:06', 'Inspiration for Raycast features comes from developer\'s own problems they want to solve', 'Feature inspiration', 167),
(2951, '26:21', 'Raycast uses SQLite database for local storage of snippets, clipboard, etc', 'SQLite DB', 167),
(2952, '00:11', 'How to build an API', 'API overview', 168),
(2953, '02:33', 'What is an API and why you need one', 'API intro', 168),
(2954, '06:22', 'Types of APIs - REST, GraphQL, gRPC, TRPC', 'API types', 168),
(2955, '20:46', 'Database layer of API', 'Database', 168),
(2956, '26:56', 'Server layer of API', 'Server', 168),
(2957, '34:53', 'Authentication layer of API', 'Auth', 168),
(2958, '43:51', 'Caching layer of API', 'Caching', 168),
(2959, '47:55', 'Client layer of API', 'Client', 168),
(2960, '00:27', 'Intro about postcss', 'Postcss intro', 169),
(2961, '02:56', 'Sponsor 1: Prismic', 'Sponsor', 169),
(2962, '03:34', 'Sponsor 2: Sentry event', 'Sponsor', 169),
(2963, '03:54', 'Using postcss', 'Postcss usage', 169),
(2964, '07:18', 'Postcss imports vs native imports', 'Imports', 169),
(2965, '10:13', 'Postcss nesting plugins', 'Nesting', 169),
(2966, '17:25', 'Postcss custom media queries', 'Media queries', 169),
(2967, '19:07', 'Postcss env vars', 'Env vars', 169),
(2968, '20:18', 'Postcss color functions', 'Color functions', 169),
(2969, '22:51', 'List of postcss plugins', 'Plugin list', 169),
(2970, '23:46', 'Browser support and new CSS features', 'Browser support', 169),
(2971, '02:24', 'Primogen chose his name from video game Turok 2', 'Primogen name origin', 170),
(2972, '03:57', 'Everyone played Tony Hawk Pro Skater growing up', 'Tony Hawk popularity', 170),
(2973, '04:22', 'Skateboarding was not always mainstream culture', 'Skateboarding subculture', 170),
(2974, '05:47', 'Scott recently dropped in on a skateboard for the first time in years', 'Scott drops in', 170),
(2975, '06:00', 'Primogen works at Netflix which he says is the most boring thing he does', 'Works at Netflix', 170),
(2976, '07:19', 'There are different styles of coding streamers', 'Streamer styles', 170),
(2977, '08:46', 'Different stream watchers come for education or entertainment', 'Why watch streams', 170),
(2978, '09:44', 'Primogen\'s streams are educational but mostly memes', 'Primogen\'s style', 170),
(2979, '10:05', 'This episode sponsored by Hasura for auto-generating GraphQL APIs', 'Hasura sponsor', 170),
(2980, '00:18', 'Potluck episode with questions on objects, testing, and more', 'Intro', 171),
(2981, '00:51', 'Sponsors: Linode, LogRocket, Auth0', 'Sponsors', 171),
(2982, '01:13', 'Discussion on standing desks', 'Standing desks', 171),
(2983, '02:39', 'Measuring performance of objects with JSPerf', 'JSPerf', 171),
(2984, '05:09', 'Only optimize when needed', 'Optimizing', 171),
(2985, '05:38', 'Using dev tools to measure memory usage', 'Memory profiling', 171),
(2986, '06:46', 'Idea for JSPerf mistakes episode', 'Episode idea', 171),
(2987, '07:40', 'Why VSCode sometimes only shows type names on hover', 'VSCode types', 171),
(2988, '08:36', 'TS Quick Fixes extension to scaffold types', 'TS extension', 171),
(2989, '02:33', 'LogRocket lets you see how errors happen with video replays', 'LogRocket', 172),
(2990, '04:38', 'Node.js, Deno, and Bun are JavaScript runtimes that can run JS outside the browser', 'JS runtimes', 172),
(2991, '05:43', 'We may eventually be able to hot swap between JS runtimes like Node, Deno, and Bun', 'Hot swappable JS', 172),
(2992, '07:19', 'Before this, Deno imported code directly from URLs instead of using NPM', 'Imported from URLs', 172),
(2993, '09:30', 'Using NPM packages makes these JS runtimes interchangeable', 'Interchangeable runtimes', 172),
(2994, '11:00', 'In the future we may have tools to easily swap between runtimes', 'Swap tooling', 172),
(2995, '12:52', 'Deno allows importing NPM packages without installing them', 'Import NPM no install', 172),
(2996, '13:11', 'Deno doesn\'t mention competitor Bun in their blog post', 'No Bun mention', 172),
(2997, '14:11', 'Deno has the fastest JS web server ever built', 'Fastest web server', 172),
(2998, '15:50', 'Node seems behind Deno and Bun in supporting TypeScript and speed', 'Node falling behind', 172),
(2999, '17:15', 'A year ago Bun was just getting started, now it\'s a real competitor', 'Bun competing', 172),
(3000, '17:59', 'Deno will support up to 80-90% of NPM packages', 'NPM package support', 172),
(3001, '18:25', 'Maybe Node could improve TypeScript support to stay competitive', 'Node TS support', 172);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(3002, '19:32', 'Next year Node may be the least compelling option compared to Deno and Bun', 'Node least compelling', 172),
(3003, '20:15', 'Tools like Vite could have runtimes for Deno, Bun, etc', 'Vite runtimes', 172),
(3004, '20:59', 'SvelteKit can output to Deno or Bun which could be the future', 'SvelteKit runtimes', 172),
(3005, '22:24', 'Deno now supports enterprise features businesses want', 'Enterprise support', 172),
(3006, '22:35', 'Deno allows searching documentation of all Deno third party code', 'Deno code search', 172),
(3007, '03:27', 'Steve\'s journey from designer to developer via prototyping and open source projects', 'Steve\'s background', 173),
(3008, '04:56', 'Introducing TLDraw - an impressive React and SVG drawing canvas', 'TLDraw intro', 173),
(3009, '05:30', 'Steve was inspired by variable width ink algorithms and previous canvas interactions', 'TLDraw inspiration', 173),
(3010, '10:02', 'Steve built TLDraw in a few months and open sourced it, gaining contributors and integrations', 'TLDraw timeline', 173),
(3011, '11:13', 'TLDraw uses DOM and SVG instead of Canvas for easier custom components', 'TLDraw tech', 173),
(3012, '13:32', 'Canvas is painful for overlays and animations - TLDraw\'s approach is better', 'Canvas vs TLDraw', 173),
(3013, '00:11', 'Reviewing portfolios', 'Portfolios', 174),
(3014, '01:08', 'First day of kindergarten', 'Kindergarten', 174),
(3015, '01:52', 'Wes\' new echoey office', 'Office', 174),
(3016, '02:14', 'Plans for office sound treatment', 'Soundproofing', 174),
(3017, '03:50', 'Scott\'s sound panels', 'Panels', 174),
(3018, '04:50', 'More on Scott\'s panels', 'Panels', 174),
(3019, '05:48', 'Construction of panels', 'Construction', 174),
(3020, '06:11', 'Transition to portfolio review', 'Transition', 174),
(3021, '00:28', 'Talking about margins and CSS layout techniques', 'margins', 175),
(3022, '01:40', 'Sentry sponsor', 'sponsor', 175),
(3023, '02:52', 'Auth0 sponsor', 'sponsor', 175),
(3024, '04:33', 'Issues with collapsing margins', 'margins', 175),
(3025, '05:02', 'Nonbreaking spaces in WYSIWYG editors', 'WYSIWYG', 175),
(3026, '07:24', 'Issues with overriding margins', 'margins', 175),
(3027, '08:15', 'Using padding instead of margins', 'padding', 175),
(3028, '09:01', 'Only using padding in components', 'padding', 175),
(3029, '09:29', 'Downsides of padding only', 'padding', 175),
(3030, '11:06', 'Putting margin/padding only on bottom', 'bottom', 175),
(3031, '12:51', 'Issues with flexbox for layout', 'flexbox', 175),
(3032, '13:21', 'Using CSS grid for layout', 'grid', 175),
(3033, '14:28', 'Issues with grid layout', 'grid', 175),
(3034, '14:45', 'Using spacer divs', 'spacer', 175),
(3035, '15:46', 'Benefits of spacer divs', 'spacer', 175),
(3036, '16:30', 'Making spacer divs a component', 'spacer', 175),
(3037, '18:06', 'Why a component instead of CSS class', 'component', 175),
(3038, '19:46', 'No best solution, combo conversation', 'margins', 175),
(3039, '02:31', 'AppRight is a open source back end as a service', 'AppRight overview', 176),
(3040, '03:19', 'AppRight provides APIs for database, authentication, storage, functions', 'AppRight features', 176),
(3041, '06:11', 'Hasura provides GraphQL APIs on top of Postgres like AppRight', 'Hasura comparison', 176),
(3042, '10:11', 'AppRight SDKs for client and server side development', 'AppRight SDKs', 176),
(3043, '15:39', 'LightStep Incident Response for DevOps', 'LightStep ad', 176),
(3044, '20:17', 'AppRight offers realtime APIs via WebSockets', 'Realtime APIs', 176),
(3045, '23:16', 'AppRight Cloud Functions for serverless code', 'Cloud Functions', 176),
(3046, '27:51', 'AppRight popular for web and Flutter developers', 'AppRight users', 176),
(3047, '35:14', 'Hasura provides instant GraphQL APIs for Postgres', 'Hasura ad', 176),
(3048, '00:11', 'Discussing Landon getting into preferred public school', 'School', 177),
(3049, '02:00', 'Choosing schools in Denver', 'Schools', 177),
(3050, '03:18', 'Private vs public school', 'Schools', 177),
(3051, '04:33', 'Threads in programming', 'Threads', 177),
(3052, '05:30', 'JavaScript is single threaded', 'Threads', 177),
(3053, '06:36', 'Concurrency vs parallelism', 'Threads', 177),
(3054, '07:28', 'Blocking the main thread', 'Threads', 177),
(3055, '08:40', 'Async/await and main thread', 'Threads', 177),
(3056, '09:18', 'Web frameworks and main thread', 'Threads', 177),
(3057, '09:59', 'Green screen example', 'Example', 177),
(3058, '12:08', 'Highway analogy for threads', 'Threads', 177),
(3059, '00:03', 'Opening jingle', 'jingle', 178),
(3060, '00:29', 'Welcome to 500th episode', 'intro', 178),
(3061, '00:35', 'Scott introduces himself and Wes', 'intros', 178),
(3062, '00:52', 'Wes excited for 500 episodes', 'milestone', 178),
(3063, '01:32', 'Sentry sponsor', 'sponsor', 178),
(3064, '03:29', 'PaymentsHub sponsor', 'sponsor', 178),
(3065, '04:37', '20 million downloads milestone', 'milestone', 178),
(3066, '05:47', 'Discuss podcast recording process', 'process', 178),
(3067, '09:17', 'Top 10 most popular episodes', 'top episodes', 178),
(3068, '18:02', 'Favorite episodes', 'faves', 178),
(3069, '22:13', 'Favorite guests', 'fave guests', 178),
(3070, '23:15', 'Audience questions', 'questions', 178),
(3071, '32:03', 'Thanks and sign off', 'outro', 178),
(3072, '02:33', 'Rich Harrison intro', 'intro', 179),
(3073, '03:10', 'Svelte 101 explanation', 'svelte intro', 179),
(3074, '04:02', 'Svelte improves developer experience', 'dev experience', 179),
(3075, '05:39', 'Svelte doesn\'t compromise user experience', 'user experience', 179),
(3076, '06:42', 'Svelte templating language background', 'templating', 179),
(3077, '09:23', 'Handlebars influence on Svelte templating', 'handlebars', 179),
(3078, '10:47', 'Using const in Svelte templates', 'const', 179),
(3079, '12:14', 'Immutability in Svelte vs React', 'immutability', 179),
(3080, '15:03', 'What Svelte compilation means', 'compilation', 179),
(3081, '17:29', 'Compiled size benefits', 'size', 179),
(3082, '18:14', 'Rich\'s thoughts on web components', 'web components', 179),
(3083, '20:43', 'Authoring web components is difficult', 'authoring', 179),
(3084, '22:14', 'Svelte doesn\'t need a virtual DOM', 'virtual dom', 179),
(3085, '25:50', 'Svelte avoids React render overhead', 'render overhead', 179),
(3086, '26:37', 'Computers should handle performance', 'performance', 179),
(3087, '29:09', 'Rich\'s favorite Svelte feature', 'favorite feature', 179),
(3088, '31:12', 'Constraints lead to creativity', 'constraints', 179),
(3089, '00:11', 'Intro', 'Intro', 180),
(3090, '00:35', 'Sponsors', 'Ads', 180),
(3091, '00:53', 'Check-in', 'Update', 180),
(3092, '01:47', 'Agency Work', 'Agency', 180),
(3093, '02:28', 'Agency Overview', 'Agency', 180),
(3094, '02:59', 'Agency Experience', 'Experience', 180),
(3095, '03:44', 'Agency Sizes', 'Sizes', 180),
(3096, '04:19', 'Large Agencies', 'Large', 180),
(3097, '04:41', 'Agency Examples', 'Examples', 180),
(3098, '00:16', 'CSS proposals', 'proposals', 181),
(3099, '00:32', 'CSS at win and at else', 'at win/else', 181),
(3100, '00:53', 'CSS Grid 3 masonry', 'masonry', 181),
(3101, '09:06', 'CSS caret', 'caret', 181),
(3102, '10:40', 'CSS nesting', 'nesting', 181),
(3103, '13:18', 'CSS env variables', 'env vars', 181),
(3104, '14:00', 'CSS media queries', 'media queries', 181),
(3105, '02:19', 'Josh talks about working on the new Hydrogen project at Shopify', 'Hydrogen', 182),
(3106, '04:44', 'Hydrogen is not a static site generator, it renders on the server', 'SSR', 182),
(3107, '09:51', 'Hydrogen started with a component library but found it was too rigid', 'Components', 182),
(3108, '10:42', 'Hydrogen allows adding ecommerce to an existing React app', 'React', 182),
(3109, '11:24', 'Online store still best for most merchants, Hydrogen lowers penalty of going headless', 'Headless', 182),
(3110, '13:48', 'Hydrogen + Oxygen provides a headless experience like using Shopify\'s Liquid', 'Liquid', 182),
(3111, '15:28', 'Building with React components provides better reusability', 'Reusability', 182),
(3112, '19:17', 'Hydrogen started in April 2021 using experimental React tech like Server Components', 'Server Components', 182),
(3113, '23:58', 'Hydrogen\'s server component bet will benefit the ecosystem of reusable components', 'Ecosystem', 182),
(3114, '25:42', 'Most of Hydrogen is tied to React but they may support Vue/Svelte in the future', 'Frameworks', 182),
(3115, '27:18', 'Being on the JS standards committee allows Hydrogen to run anywhere', 'Standards', 182),
(3116, '31:06', 'Using API adapters allows Hydrogen to run on different JS environments', 'Adapters', 182),
(3117, '00:33', 'Caching API data', 'API caching', 183),
(3118, '00:41', 'Generating PDFs', 'PDF generation', 183),
(3119, '00:48', 'Stripe vs PayPal', 'Payment', 183),
(3120, '03:01', 'Caching slow API requests', 'API caching', 183),
(3121, '03:40', 'Caching strategies', 'Caching', 183),
(3122, '06:59', 'Learning SvelteKit before v1', 'SvelteKit', 183),
(3123, '10:31', 'Generating PDFs from HTML', 'PDF generation', 183),
(3124, '15:48', 'Sponsor spot - Prismic', 'Sponsor', 183),
(3125, '04:39', 'Browser engines', 'Chromium Blink Gecko', 184),
(3126, '07:01', 'Opera engine history', 'Own engine', 184),
(3127, '08:11', 'New browser Arc', 'Reinvented browser', 184),
(3128, '11:31', 'Browser engine clarifications', 'JavaScript engines', 184),
(3129, '13:21', 'Chromium vs Blink', 'Interchangeable', 184),
(3130, '13:34', 'iOS browsers', 'WebKit based', 184),
(3131, '15:37', 'Android browsers', 'Choice available', 184),
(3132, '18:48', 'Samsung Internet', 'Chromium based', 184),
(3133, '19:29', 'Tor browser', 'Chromium based', 184),
(3134, '20:46', 'Opera Mini', 'Proxy browser', 184),
(3135, '22:57', 'UC Browser', 'Popular in China', 184),
(3136, '23:39', 'Baidu browser', 'Discontinued', 184),
(3137, '24:59', 'KaiOS browser', 'Linux phones', 184),
(3138, '25:27', 'Browser history', 'Feature phones', 184),
(3139, '02:32', 'Syntax site built on Next.js years ago', 'Syntax site', 185),
(3140, '03:28', 'Syntax site used to load show notes for all episodes', 'Perf issue', 185),
(3141, '04:09', 'What is React Suspense?', 'React Suspense', 185),
(3142, '05:43', 'Selective hydration unlocks perf possibilities', 'Selective hydration', 185),
(3143, '07:34', 'Next.js makes hydration easy compared to custom React', 'Next.js hydration', 185),
(3144, '08:57', 'Deferring JavaScript with Suspense improves interactivity', 'Deferring JavaScript', 185),
(3145, '10:58', 'Rogers website loads fast if you hide initial loader', 'Rogers website', 185),
(3146, '13:15', 'Sponsor: LightStep Incident Response', 'Sponsor', 185),
(3147, '00:19', 'Web dev wish list / ugh just do it for me', 'Topic', 186),
(3148, '01:01', 'Complaining in crime', 'Joke', 186),
(3149, '02:00', 'Understand reasons for things not working', 'Preface', 186),
(3150, '02:30', 'Want things different despite reasons', 'Point', 186),
(3151, '03:33', 'Date input translates to JS date', 'HTML', 186),
(3152, '05:46', 'Better date picker input', 'HTML', 186),
(3153, '06:55', 'Smooth animated drag and drop', 'HTML', 186),
(3154, '08:40', 'TypeScript interfaces faster than types', 'JS', 186),
(3155, '10:09', 'One type system construct', 'JS', 186),
(3156, '10:59', 'Browser handle animations', 'JS', 186),
(3157, '13:29', 'Native data binding', 'JS', 186),
(3158, '13:59', 'Built-in auth', 'JS', 186),
(3159, '18:06', 'One React effect hook', 'React', 186),
(3160, '19:52', 'No dependency array', 'React', 186),
(3161, '02:33', 'Talks about sponsored projects like Linode and LogRocket', 'sponsors', 187),
(3162, '04:29', 'Introduces topic of getting excited about coding', 'topic intro', 187),
(3163, '05:07', 'Having fun learning code is more important than end product', 'fun learning', 187),
(3164, '09:46', 'Finding a tech you want to learn or an itch to scratch gets you excited', 'finding ideas', 187),
(3165, '10:43', 'Wes scraped store clearance pages - fun project to learn web scraping', 'Wes\' project', 187),
(3166, '11:40', 'Fart app idea - silly but could teach audio manipulation', 'fart app', 187),
(3167, '02:33', 'Sayeed\'s software used by over 20 million websites', 'Software reach', 188),
(3168, '04:08', 'Blogging for over a decade leads to thriving business', 'Longevity', 188),
(3169, '06:18', 'WordPress keeps evolving with new features to write about', 'WordPress growth', 188),
(3170, '08:27', 'Each AwesomeMotive brand has content team producing tutorials', 'Content teams', 188),
(3171, '10:29', 'Products built to solve Sayeed\'s own business problems', 'Internal solutions', 188),
(3172, '11:43', 'Products acquired to fill portfolio gaps based on user surveys', 'Acquisitions', 188),
(3173, '13:21', 'No business background, focused on marketing and monetization', 'Marketing skills', 188),
(3174, '16:37', 'Each brand uses GitHub, some share code and APIs', 'Code sharing', 188),
(3175, '18:50', '274,000 YouTube subscribers for WPBeginner channel', 'YouTube following', 188),
(3176, '19:51', 'Viral YouTube channel with over 1M subscribers in the past', 'Viral content', 188),
(3177, '22:55', 'YouTube great for discovery, but need your own site to own users', 'User ownership', 188),
(3178, '25:54', 'Functionality and solving user needs most important, not code', 'User focus', 188),
(3179, '00:21', 'Sponsored by Prismic, Sentry, FreshBooks', 'Sponsors', 189),
(3180, '02:38', 'Resolving NPM errors in old projects', 'NPM errors', 189),
(3181, '03:58', 'Reinstall dependencies and node modules', 'Reinstall', 189),
(3182, '04:10', 'Deleting package-lock.json', 'Package lock', 189),
(3183, '05:02', 'Node version compatibility', 'Node version', 189),
(3184, '05:08', 'Old projects working on new Node versions', 'Backwards compatibility', 189),
(3185, '05:27', 'Gatsby and Node version issues', 'Gatsby issues', 189),
(3186, '06:37', 'Specifying Node version in package.json', 'Node version spec', 189),
(3187, '07:23', 'Setting \'engineStrict\' in .npmrc', 'engineStrict flag', 189),
(3188, '00:27', 'Introducing Bun', 'Intro', 190),
(3189, '01:08', 'Sponsors', 'Ads', 190),
(3190, '03:32', 'What is Bun?', 'Overview', 190),
(3191, '04:22', 'Comparing Bun to Node and Deno', 'Compare', 190),
(3192, '05:34', 'Bun focuses on performance', 'Perf', 190),
(3193, '06:04', 'Bun has batteries included', 'Batteries', 190),
(3194, '06:47', 'Bun implements common APIs', 'APIs', 190),
(3195, '08:17', 'Bun builds on Zig language', 'Zig', 190),
(3196, '09:36', 'Bun supports web server out of the box', 'Web Server', 190),
(3197, '10:58', 'Bun supports async code', 'Async', 190),
(3198, '15:13', 'APIs not yet implemented in Bun', 'Missing APIs', 190),
(3199, '17:10', 'Bun uses TOML for config', 'TOML', 190),
(3200, '18:27', 'Bun has a public roadmap', 'Roadmap', 190),
(3201, '20:23', 'Why do we need another JS runtime?', 'Why Bun?', 190),
(3202, '23:06', 'Conclusion and call to try Bun', 'Conclusion', 190),
(3203, '02:33', 'Adam Cowley has worked with Neo4j for 5 years', 'Work history', 191),
(3204, '02:57', 'Adam Cowley used Netscape browser in school to be different', 'Browser history', 191),
(3205, '05:05', 'Graph databases use nodes and relationships instead of tables and rows', 'Graph databases', 191),
(3206, '07:41', 'Nodes are like documents that can contain any data', 'Nodes', 191),
(3207, '09:04', 'Schema is optional but key entities need to be defined upfront', 'Schema', 191),
(3208, '10:32', 'Graph databases are good for real-time recommendations', 'Use cases', 191),
(3209, '13:18', 'Neo4j is the underlying technology, AuraDB is the database service', 'Neo4j vs AuraDB', 191),
(3210, '14:22', 'There are official drivers for Java, JavaScript, Python, Go and .NET', 'Drivers', 191),
(3211, '15:39', 'Learning Cypher querying is a paradigm shift but intuitive', 'Cypher', 191),
(3212, '19:00', 'GraphQL and Neo4j work well together with custom GraphQL library', 'GraphQL', 191),
(3213, '22:58', 'Neo4j GraphQL library translates GraphQL to Cypher queries', 'Neo4j GraphQL', 191),
(3214, '23:46', 'Data can be synced between MongoDB and Neo4j', 'Syncing data', 191),
(3215, '00:01', 'Announcer introduces Syntax podcast', 'Intro', 192),
(3216, '00:11', 'Wes announces today\'s show on coding styles', 'Announce', 192),
(3217, '00:54', 'Wes asks Scott how he\'s doing', 'Chit chat', 192),
(3218, '01:04', 'Scott says he\'s good and has nothing to report', 'Good', 192),
(3219, '01:16', 'Wes says they\'re recording ahead before he moves', 'Recording', 192),
(3220, '01:29', 'Scott is pumped for Wes\' new space', 'New space', 192),
(3221, '01:38', 'Wes talks about work needed on his new office', 'Office work', 192),
(3222, '01:52', 'Wes suggests starting with JS styles then CSS', 'JS then CSS', 192),
(3223, '02:01', 'Scott talks about functional vs object oriented JS', 'Functional vs OO', 192),
(3224, '02:30', 'Scott likes functional for easier testing', 'Functional testing', 192),
(3225, '02:45', 'Wes also mainly uses functional programming', 'Wes functional', 192),
(3226, '02:51', 'Wes uses OO for tutorials occasionally', 'OO tutorials', 192),
(3227, '03:13', 'Wes gives timer class example for OO', 'Timer class', 192),
(3228, '03:23', 'Timer class has start, stop, pause methods', 'Timer methods', 192),
(3229, '03:39', 'Wes leans functional, frameworks are functional', 'Functional frameworks', 192),
(3230, '03:44', 'Scott asks about TypeScript interfaces vs types', 'TS interfaces', 192),
(3231, '03:52', 'Scott now uses interfaces over types', 'Scott interfaces', 192),
(3232, '04:18', 'Wes has gone back and forth between interfaces and types', 'Wes on interfaces', 192),
(3233, '04:36', 'Wes shows both in TypeScript course', 'Both in course', 192),
(3234, '04:50', 'Wes less confident on interface first recommendation', 'Less confident', 192),
(3235, '05:10', 'Wes heard interfaces compile faster', 'Faster compile', 192),
(3236, '05:17', 'But compile speed not a reason to choose', 'Not a reason', 192),
(3237, '05:27', 'Wes says it doesn\'t really matter', 'Doesn\'t matter', 192),
(3238, '05:29', 'Scott agrees it likely doesn\'t matter much', 'Doesn\'t matter', 192),
(3239, '05:33', 'Scott says it feels like the grass is greener', 'Grass greener', 192),
(3240, '06:04', 'Wes explains tabs as one character displayed by editor', 'Tabs explanation', 192),
(3241, '06:11', 'Tab width is an editor setting', 'Tab width', 192),
(3242, '06:24', 'Wes says that\'s a good argument for tabs', 'Tabs argument', 192),
(3243, '06:24', 'Spaces argument is consistent indentation', 'Spaces argument', 192),
(3244, '07:05', 'Scott is passionate against semicolons', 'No semicolons', 192),
(3245, '07:06', 'Scott sees no need for semicolons ever', 'No need', 192),
(3246, '07:36', 'Wes says linters now fix semicolon issues', 'Linters fix', 192),
(3247, '07:46', 'Wes uses semicolons and likes them', 'Wes pro semicolon', 192),
(3248, '07:51', 'Scott strongly dislikes semicolons', 'Scott anti semicolon', 192),
(3249, '08:09', 'Scott asks about let vs const', 'Let vs const', 192),
(3250, '08:13', 'Scott uses const unless reassignment needed', 'Scott const default', 192),
(3251, '08:35', 'Wes uses const and rarely needs let', 'Wes const default', 192),
(3252, '08:48', 'Const allows changing object properties', 'Const flexibility', 192),
(3253, '09:03', 'Wes likes block scoping of let and const', 'Block scoping', 192),
(3254, '09:16', 'Scott explains var function vs block scope', 'Var scoping', 192),
(3255, '09:36', 'Scott asks about explicit vs inferred types in TS', 'Explicit types', 192),
(3256, '09:43', 'Wes started with inferred but now explicit types', 'Wes explicit types', 192),
(3257, '10:12', 'Wes says explicit types for exports, inferred internally', 'Explicit exports', 192),
(3258, '11:02', 'Scott finds explicit catches more bugs', 'Catches bugs', 192),
(3259, '11:36', 'Scott asks about naming conventions', 'Naming conventions', 192),
(3260, '11:50', 'Wes uses camelCase in JS, kebab-case in CSS', 'Wes conventions', 192),
(3261, '12:05', 'Wes likes kebab-case in HTML', 'Kebab HTML', 192),
(3262, '12:08', 'Wes uses snake_case by convention like GraphQL', 'Snake convention', 192),
(3263, '12:20', 'Screaming snake case seems standard for GraphQL', 'GraphQL snake case', 192),
(3264, '12:49', 'Scott explains screaming case for constants', 'Screaming constants', 192),
(3265, '13:00', 'Scott saw study on faster snake case reading', 'Snake case study', 192),
(3266, '13:14', 'Scott now uses snake case for everything', 'Scott snake case', 192),
(3267, '13:36', 'Except upper camel case for components', 'Camel components', 192),
(3268, '13:44', 'Wes jokes Scott should get a snake case tattoo', 'Snake tattoo', 192),
(3269, '13:46', 'Scott likes the snake case name', 'Likes name', 192),
(3270, '13:55', 'Wes mentions Wikipedia naming conventions page', 'Wikipedia conventions', 192),
(3271, '14:08', 'Wes lists alternate names like dromedaryCase', 'Alternate names', 192),
(3272, '14:19', 'Dromedary case is camelCase', 'Dromedary', 192),
(3273, '14:31', 'Flat case is all lowercase', 'Flat case', 192),
(3274, '14:36', 'PascalCase', 'PascalCase', 192),
(3275, '14:39', 'underscore_case', 'underscore', 192),
(3276, '14:41', 'kebab-case', 'kebab-case', 192),
(3277, '14:49', 'Train-Case', 'Train-Case', 192),
(3278, '14:54', 'HTTP-Header-Case', 'HTTP-Header-Case', 192),
(3279, '15:02', 'Wes says it\'s fun to look at naming cases', 'Fun names', 192),
(3280, '15:14', 'Scott agrees it\'s fun', 'Fun', 192),
(3281, '15:16', 'Scott asks about looping styles', 'Looping styles', 192),
(3282, '15:53', 'Scott uses array methods instead of for loops', 'Array methods', 192),
(3283, '16:12', 'Wes defaults to array methods like forEach', 'Wes array methods', 192),
(3284, '16:17', 'Wes likes for-in loops', 'for-in loops', 192),
(3285, '16:26', 'for-in allows async/await', 'Async await', 192),
(3286, '16:32', 'for-in pauses for await', 'Await pause', 192),
(3287, '16:37', 'for-in works on objects and iterables', 'Objects & iterables', 192),
(3288, '16:43', 'for-in allows continue and break', 'Loop control', 192),
(3289, '16:54', 'Wes uses for-in instead of array methods sometimes', 'for-in vs methods', 192),
(3290, '17:09', 'Scott uses for-in for that control flow', 'Scott for-in control', 192),
(3291, '17:12', 'Scott rarely needs for loops now', 'Rare for', 192),
(3292, '17:19', 'Wes shows object.entries with for-in example', 'object.entries', 192),
(3293, '17:53', 'Destructuring is nicer than index access', 'Destructuring', 192),
(3294, '17:55', 'Scott reminisces of past for loop pain', 'Loop pain', 192),
(3295, '18:01', 'Scott agrees for loops were a pain', 'Painful for', 192),
(3296, '00:28', 'Playing a game of Stumped interview questions', 'Stumped game', 193),
(3297, '01:28', 'Sponsored by Sentry and LightStep', 'Sponsors', 193),
(3298, '04:07', 'Question: What is a higher order component?', 'HOC question', 193),
(3299, '05:14', 'Answer: Component that runs at higher level, passes info to lower level component', 'HOC answer', 193),
(3300, '05:45', 'Question: What is functional programming?', 'FP question', 193),
(3301, '07:45', 'Answer: Using pure functions instead of classes, no side effects', 'FP answer', 193),
(3302, '09:00', 'Question: What\'s cache busting and how to achieve it?', 'Cache busting', 193),
(3303, '10:33', 'Answer: Force new resource download, add query params or random strings', 'Cache busting answer', 193),
(3304, '10:39', 'Question: What is short circuit evaluation in JS?', 'Short circuiting', 193),
(3305, '13:19', 'Answer: Optional chaining', 'Short circuit answer', 193),
(3306, '13:20', 'Question: What is a closure?', 'Closure question', 193),
(3307, '15:18', 'Answer: Function scope maintaining state', 'Closure answer', 193),
(3308, '15:47', 'Question: Purpose of immediately invoked function expression?', 'IIFE question', 193),
(3309, '17:29', 'Answer: Creates closure, runs immediately', 'IIFE answer', 193),
(3310, '17:42', 'Question: How does CSS specificity work?', 'Specificity', 193),
(3311, '18:44', 'Answer: Inline, ID, Class, Tag - add up points', 'Specificity answer', 193),
(3312, '20:19', 'Question: How does prototypal inheritance work?', 'Prototype question', 193),
(3313, '23:08', 'Answer: Chain of prototypes, shared methods', 'Prototype answer', 193),
(3314, '23:57', 'Question: Difference between parameter and argument?', 'Params vs args', 193),
(3315, '24:55', 'Answer: Parameters are placeholders, arguments are values', 'Params vs args answer', 193),
(3316, '02:33', 'Liberty Mutual has 5000 developers', 'large team', 194),
(3317, '03:38', 'Christy is a principal software engineer and AWS Serverless Hero at Liberty Mutual', 'Christy\'s role', 194),
(3318, '04:57', 'Liberty Mutual has 5000 developers working on a variety of projects', 'dev team size', 194),
(3319, '06:13', 'Liberty Mutual builds customer-facing apps like insurance quotes as well as internal tools', 'app types', 194),
(3320, '07:05', 'Liberty Mutual previously used mainframes and on-prem servers before adopting serverless', 'on-prem history', 194),
(3321, '09:11', 'Serverless aligns with Liberty Mutual\'s \'only pay for what you need\' motto', 'cost savings', 194),
(3322, '10:04', 'Serverless auto-scaling handles fluctuating traffic levels', 'auto scaling', 194),
(3323, '13:01', 'Liberty Mutual allows developers to use their preferred languages like TypeScript and Python', 'language flexibility', 194),
(3324, '18:33', 'Infrastructure is defined based on system requirements like uptime needs', 'infra considerations', 194),
(3325, '23:02', 'Christy recommends AWS CDK for local serverless development', 'CDK recommendation', 194),
(3326, '25:10', 'Christy has a computer engineering degree and built an autonomous vehicle in college', 'Christy\'s background', 194),
(3327, '00:59', 'Wes Bos introduces himself', 'Wes intro', 195),
(3328, '01:01', 'Scott introduces himself', 'Scott intro', 195),
(3329, '01:23', 'Scott talks about issues with his NAS drive', 'NAS issues', 195),
(3330, '02:31', 'Scott configured PPPoE to get NAS working externally', 'PPPoE config', 195),
(3331, '03:19', 'Wes talks about dealing with ISP provided routers', 'ISP routers', 195),
(3332, '04:51', 'Scott got Home Assistant running on a Raspberry Pi', 'Home Assistant', 195),
(3333, '05:53', 'Discussion on updating the look and feel of Home Assistant', 'Updating UI', 195),
(3334, '07:59', 'Question from listener on peer dependencies', 'Peer deps question', 195),
(3335, '08:50', 'Explanation of peer dependencies in npm packages', 'Peer deps explained', 195),
(3336, '11:36', 'Discussion on issues with peer dependencies and version conflicts', 'Peer deps issues', 195),
(3337, '12:33', 'More discussion on pros/cons and edge cases of peer dependencies', 'Peer deps pros/cons', 195),
(3338, '13:14', 'Mention of escape hatch config to ignore peer dependency errors', 'Escape hatch config', 195),
(3339, '14:13', 'Clarifying transpilation setup when using Vite and Vitest', 'Transpilation questions', 195),
(3340, '00:51', 'Clamping and interpolating numbers', 'Topics', 196),
(3341, '03:51', 'Animating elements horizontally when scrolling', 'Example', 196),
(3342, '05:45', 'Clamp returns the number if within min and max, else returns min or max', 'Clamp', 196),
(3343, '08:36', 'Clamp function available on npm', 'Clamp lib', 196),
(3344, '09:08', 'Interpolation infers data within a range', 'Interpolate', 196),
(3345, '10:34', 'd3-interpolate library for interpolating numbers, colors, dates, etc.', 'd3 library', 196),
(3346, '12:45', 'Interpolating to split a range into even steps', 'Use case', 196),
(3347, '14:38', 'd3.quantize splits a range into a specified number of even steps', 'Quantize', 196),
(3348, '18:08', 'These functions are useful but may be unknown', 'Takeaway', 196),
(3349, '00:36', 'Wes introduces guest Pokey Rule', 'Intro', 197),
(3350, '01:20', 'Scott asks Pokey about background', 'Background', 197),
(3351, '02:15', 'Pokey talks about coding history and RSI', 'RSI', 197),
(3352, '03:13', 'Emily Shea\'s voice coding video inspiration', 'Video', 197),
(3353, '03:47', 'Pokey quit job to start company in 2020', 'Quit job', 197),
(3354, '05:03', 'Wes asks how voice coding works', 'How it works', 197),
(3355, '06:44', 'Pokey explains Talon and community grammar', 'Talon', 197),
(3356, '07:47', 'Scott asks about creating grammars', 'Grammars', 197),
(3357, '09:51', 'Accidental voice command triggers', 'Misrecognitions', 197),
(3358, '12:35', 'Pokey demonstrates voice coding', 'Demo', 197),
(3359, '00:31', '10 year anniversary of webcam demo', 'anniversary', 198),
(3360, '00:50', 'Wes has been speaking for 10 years', '10 years speaking', 198),
(3361, '01:01', 'Scott has been speaking for 4 years', 'Scott 4 years', 198),
(3362, '01:17', 'Scott did lots of YouTube videos', 'YouTube', 198),
(3363, '02:38', 'Exciting for Avalanche to win Stanley Cup', 'Avalanche win', 198),
(3364, '04:13', 'Speaking provides legitimacy', 'legitimacy', 198),
(3365, '05:21', 'Speaking helps you become a better speaker', 'better speaking', 198),
(3366, '05:52', 'Speaking events allow you to meet the right people', 'meet people', 198),
(3367, '07:15', 'Speaking can get you well-paying jobs', 'jobs', 198),
(3368, '07:48', 'Meeting people leads to connections and referrals', 'connections', 198),
(3369, '09:39', 'Speaking allows you to travel for free', 'free travel', 198),
(3370, '12:56', 'Major benefits to speaking besides money', 'non-money benefits', 198),
(3371, '15:57', 'Submit talk proposals to conference CFPs', 'submit proposals', 198),
(3372, '14:51', 'Que reacts API design philosophy is about parsimony - keeping it simple but not too simple', 'React API design', 200),
(3373, '06:50', 'Developer experience bridges the gap between code and humans', 'Defining DX', 200),
(3374, '08:29', 'Internal DX improves productivity of your own devs. External DX improves dev tools for external devs.', 'Internal vs external DX', 200),
(3375, '17:05', 'DX is about enhancing creativity through better productivity', 'DX goals', 200),
(3376, '23:51', 'For sites Svelte, for apps React. Svelte avoids some React DX issues.', 'Svelte vs React DX', 200),
(3377, '33:00', 'DevRel roles becoming more influential by working directly on docs and product', 'Evolving DevRel roles', 200),
(3378, '00:17', 'Communication tips for email, meetings, code reviews', 'Tips', 201),
(3379, '00:49', 'Sponsors: Sentry, Sanity, Auth0', 'Sponsors', 201),
(3380, '01:09', 'Scott recently rewired furnace for ecobee thermostat', 'Furnace', 201),
(3381, '05:54', 'Email tip: Number your asks', 'Email tips', 201),
(3382, '07:33', 'Email tip: Bold important parts', 'Bold', 201),
(3383, '10:34', 'Email tip: Use paragraphs ', 'Paragraphs', 201),
(3384, '15:14', 'Recognize when you\'re making a big ask', 'Big ask', 201),
(3385, '00:28', 'Introducing new browser page transitions API', 'New API', 202),
(3386, '02:33', 'Prismic sponsor ad read', 'Ad read', 202),
(3387, '02:53', 'LogRocket sponsor ad read', 'Ad read', 202),
(3388, '05:11', 'Explaining native app transitions vs web transitions', 'App transitions', 202),
(3389, '06:32', 'Overview of use cases for new API', 'Use cases', 202),
(3390, '08:26', 'Benefits of shared element transitions', 'Shared elements', 202),
(3391, '12:54', 'Overview of JS API and callbacks', 'JS API', 202),
(3392, '14:04', 'Expecting wrappers and libraries on top of API', 'Wrappers', 202),
(3393, '15:14', 'History of proprietary transitions API in Edge', 'Edge history', 202),
(3394, '17:28', 'Can try API in Chrome flags today', 'Chrome flags', 202),
(3395, '18:35', 'Speculating on timeline for implementation', 'Timeline', 202),
(3396, '03:54', 'Tim built a weather extension in 2015 which kickstarted his interest in browser extensions', 'Weather extension start', 203),
(3397, '06:02', 'The weather extension uses the Dark Sky API which Tim had to get a paid plan for due to the number of users', 'Dark Sky API', 203),
(3398, '07:24', 'Tim has had people try to hack and take over the account that controls his extensions', 'Account hacking', 203),
(3399, '08:19', 'The weather extension grew from a few hundred to 10000 users after getting shared on Lifehacker', 'Lifehacker share', 203),
(3400, '14:38', 'Tim built a URL shortener extension after Google shut down theirs which allowed him to gain users', 'URL shortener extension', 203),
(3401, '16:49', 'Tim purchased the t.ly domain from a domain reseller for around $50k', 't.ly purchase', 203),
(3402, '18:14', 'The t.ly URL shortener service offers paid plans for advanced features like custom domains', 't.ly paid plans', 203),
(3403, '23:48', 'The t.ly URL shortener service was abused by malicious actors when it first launched', 'Malicious abuse', 203),
(3404, '26:01', 'Tim built a tool called link unshortener to help detect malicious URLs', 'Link unshortener', 203),
(3405, '29:30', 'Tim\'s first successful monetization was from Amazon affiliate links on a Raspberry Pi blog post', 'Affiliate links', 203),
(3406, '43:00', 'Tim stays up to date by listening to podcasts, YouTube, blogs', 'Staying current', 203),
(3407, '45:22', 'Tim recommends a coffee maker called Chibo for cold brew', 'Chibo coffee', 203),
(3408, '47:27', 'Check out t.ly for URL shortening', 't.ly plug', 203),
(3409, '00:16', 'Look ahead at home automation', 'Home automation', 204),
(3410, '02:48', 'Overview of home automation protocols: Zigbee, Zwave, WiFi', 'Protocols', 204),
(3411, '06:17', 'Phillips Hue uses Zigbee protocol with hub and WiFi', 'Hue lights', 204),
(3412, '07:00', 'New standard Matter aims to unify protocols', 'Matter standard', 204),
(3413, '07:37', 'Developers like to customize and tweak systems', 'Tweak systems', 204),
(3414, '08:01', 'How automation leads to increased family buy-in', 'Family buy-in', 204),
(3415, '09:32', 'Smart home automation improves analog problems', 'Improvements', 204),
(3416, '11:31', 'Homebridge enables connecting devices and exposing to HomeKit', 'Homebridge', 204),
(3417, '00:28', 'New viewport units solve problems with old ones', 'new units', 205),
(3418, '05:03', 'Main problem is dynamic UI in iOS hides/shows URL bar', 'iOS URL bar', 205),
(3419, '06:47', 'Introduces new units: lvw/lh, svw/lh, dvw/lh', 'new units', 205),
(3420, '09:43', 'Dynamic units likely most useful in most cases', 'dynamic best', 205),
(3421, '12:44', 'Keyboard not accounted for in new units', 'no keyboard', 205),
(3422, '17:32', 'Units well supported now except IE and some Chrome', 'good support', 205),
(3423, '18:55', 'Can use vh for fallback after lh', 'vh fallback', 205),
(3424, '00:02:33', 'Introducing Eduardo Bocas from Netlify', 'Guest intro', 206),
(3425, '00:04:24', 'Serverless functions allow adding functionality without servers', 'Serverless functions', 206),
(3426, '00:07:19', 'Edge functions run closer to users for lower latency', 'Edge functions', 206),
(3427, '00:13:05', 'Edge functions can modify requests and responses', 'Middleware pattern', 206),
(3428, '00:20:21', 'WPSMTP sponsor ad', 'Sponsor', 206),
(3429, '00:22:44', 'Deno overview', 'Deno', 206),
(3430, '00:25:38', 'Differences in Node and Deno package ecosystem', 'Node vs Deno packages', 206),
(3431, '00:33:05', 'Postlight podcast sponsor ad', 'Sponsor', 206),
(3432, '00:38:13', 'Languages used to build Netlify Edge', 'Languages at Netlify', 206),
(3433, '00:43:20', 'Importance of open standards', 'Open standards', 206),
(3434, '00:47:16', 'Using Warp terminal', 'Terminal', 206),
(3435, '00:51:24', 'Closing thoughts on being kind', 'Kindness', 206),
(3436, '00:52:23', 'Podcast pick - S-Town', 'Podcast pick', 206),
(3437, '00:02', 'Intro and overview of potluck questions', 'Intro', 207),
(3438, '00:50', 'Sponsors: Sentry, Sanity, .tech', 'Sponsors', 207),
(3439, '01:09', 'Update on house projects and yardwork', 'Yardwork', 207),
(3440, '02:33', 'Having battery powered pole saw makes trimming trees easier', 'Pole saw', 207),
(3441, '03:41', 'Question on hosting database on same server as code', 'Database hosting', 207),
(3442, '09:30', 'Don\'t like regex, won\'t do regex course', 'Regex', 207),
(3443, '20:07', 'Wes\' health and fitness is poor currently', 'Wes fitness', 207),
(3444, '26:08', 'Wes did not know who Gendo Ikari is', 'Gendo Ikari', 207),
(3445, '27:40', 'Gendo Ikari is a villain from Neon Genesis Evangelion anime', 'Evangelion', 207),
(3446, '30:13', 'Learning new languages expands perspectives but not required', 'New languages', 207),
(3447, '40:20', 'Listener got web dev interview after confidence from show', 'Listener interview', 207),
(3448, '42:11', 'Advice for developer building large scale React app', 'React app advice', 207),
(3449, '50:41', 'Firefox proposal for CSS environment variables', 'CSS variables', 207),
(3450, '00:27', 'New CSS selectors: has, where and is', 'CSS', 208),
(3451, '01:03', 'Excited for has selector', 'has', 208),
(3452, '01:13', 'Sponsors: Magic Bell and LogRocket', 'Sponsors', 208),
(3453, '02:33', 'Magic Bell for app notifications', 'Magic Bell', 208),
(3454, '02:39', 'LogRocket for debugging web apps', 'LogRocket', 208),
(3455, '03:40', 'Kids saying funny words', 'Kids', 208),
(3456, '04:49', 'Wanting parent selectors in CSS', 'Parent CSS', 208),
(3457, '05:37', 'Use cases for parent selectors', 'Use cases', 208),
(3458, '06:12', 'Has is a pseudo class', 'Has', 208),
(3459, '06:31', 'What selectors are in CSS', 'CSS selectors', 208),
(3460, '07:14', 'Has checks child elements', 'Has checks', 208),
(3461, '08:12', 'Power of has selector', 'Has power', 208),
(3462, '08:47', 'Complex has examples', 'Has examples', 208),
(3463, '10:30', 'More complex has examples', 'More has', 208),
(3464, '11:02', 'Code examples available', 'Code examples', 208),
(3465, '12:45', 'More use cases for has()', 'More uses', 208),
(3466, '13:28', 'Using has() for navigation', 'Nav example', 208),
(3467, '13:54', 'Has poor browser support currently', 'Support', 208),
(3468, '15:12', 'Safari and Chrome support under flags', 'Browser support', 208),
(3469, '15:55', 'Excited to use has() when supported', 'Excited for has', 208),
(3470, '16:08', 'Introducing where selector', 'Where intro', 208),
(3471, '17:14', 'Where reduces repeated selectors', 'Where reduces repeats', 208),
(3472, '17:49', 'Where examples provided', 'Where examples', 208),
(3473, '18:32', 'Where useful for input selectors', 'Input use case', 208),
(3474, '18:55', 'Where simplifies and improves readability', 'Where readability', 208),
(3475, '19:06', 'Where slight functionality increase', 'Where functionality', 208),
(3476, '19:59', 'Where usage with browser support', 'Where support', 208),
(3477, '20:20', 'Where well supported', 'Where support', 208),
(3478, '20:38', 'Introducing is selector', 'Is intro', 208),
(3479, '20:43', 'Is same as where syntactically', 'Is vs where', 208),
(3480, '21:05', 'Hosts struggle to say specificity', 'Specificity', 208),
(3481, '22:06', 'Is counts towards specificity', 'Is specificity', 208),
(3482, '22:19', 'Where has no specificity', 'Where specificity', 208),
(3483, '22:49', 'Prefer where for lower specificity', 'Prefer where', 208),
(3484, '23:41', 'Use where as default over is', 'Default to where', 208),
(3485, '24:08', 'Is has same browser support as where', 'Is support', 208),
(3486, '02:33', 'Connor introduces no code as software designed for non-coders to build simple things like websites', 'no code intro', 209),
(3487, '04:53', 'Wes asks if no code will replace developers', 'no code replacing devs', 209),
(3488, '09:43', 'Sometimes custom JavaScript is needed to go beyond the limits of no code tools', 'custom JS', 209),
(3489, '16:04', 'Popular no code tools: Webflow, Airtable, Zapier, Make, Bubble', 'popular tools', 209),
(3490, '24:50', 'Resources for learning no code: Makerpad, YouTube, building projects', 'learning resources', 209),
(3491, '27:07', 'SeedProd allows building WP sites without code', 'SeedProd', 209),
(3492, '40:16', 'Strapi is a JS/TS headless CMS', 'Strapi', 209),
(3493, '45:01', 'For beginners, start with Webflow, Zapier, Airtable', 'beginner advice', 209),
(3494, '00:36', 'Podcast sponsored by Century, FreshBooks, PaymentsHub', 'Sponsors', 210),
(3495, '01:20', 'Hasty Treat podcast on Mondays', 'Podcast', 210),
(3496, '01:31', 'New Supper Club podcast releasing', 'Podcast', 210),
(3497, '02:40', 'Live podcast overview', 'Podcast', 210),
(3498, '05:05', 'Debate on putting imports at top of files', 'Imports', 210),
(3499, '06:04', 'Debate on enforcing semicolons', 'Semicolons', 210),
(3500, '07:06', 'Debate on usefulness of for loops', 'For loops', 210),
(3501, '08:16', 'Debate on adding types to JavaScript', 'Types', 210);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(3502, '09:35', 'Ad for Sentry error tracking', 'Sentry ad', 210),
(3503, '11:18', 'Debate on using platform primitives vs transpiling', 'Primitives', 210),
(3504, '11:40', 'Debate on usefulness of TypeScript', 'TypeScript', 210),
(3505, '12:18', 'Kicking It Old School segment', 'Old code', 210),
(3506, '25:04', 'PaymentsHub sponsor ad', 'PaymentsHub ad', 210),
(3507, '26:39', 'Syntax Error segment', 'Syntax errors', 210),
(3508, '32:24', 'JS or NAS audience participation', 'JS or NAS', 210),
(3509, '39:07', 'FreshBooks sponsor ad', 'FreshBooks ad', 210),
(3510, '39:37', 'Audience Q&A', 'Q&A', 210),
(3511, '00:32', 'Stopping malicious actors', 'Topic', 211),
(3512, '03:22', 'Malicious actions people can take', 'Actions', 211),
(3513, '06:31', 'Ways to stop malicious actors', 'Solutions', 211),
(3514, '07:01', 'Rate limiting requests', 'Solution', 211),
(3515, '09:41', 'Shadow banning bad users', 'Solution', 211),
(3516, '10:22', 'Limiting requests over time', 'Solution', 211),
(3517, '11:48', 'How Reddit handles shadow bans', 'Example', 211),
(3518, '12:24', 'Using tokens to limit access', 'Solution', 211),
(3519, '14:17', 'CSRF tokens for security', 'Solution', 211),
(3520, '14:53', 'Using CAPTCHA for humans', 'Solution', 211),
(3521, '15:31', 'Concerns with reCAPTCHA', 'Issue', 211),
(3522, '16:34', 'Easier CAPTCHAs get broken faster', 'Issue', 211),
(3523, '17:14', 'DDoS protection services', 'Solution', 211),
(3524, '18:52', 'Banning abusive IP ranges', 'Solution', 211),
(3525, '02:31', 'Anselm started web development at 14 in 2003. He learned Photoshop and made pixel table websites.', 'Anselm\'s start', 212),
(3526, '03:03', 'Anselm started his own business during high school. After civil service he already had many web development clients so decided not to study.', 'Started business', 212),
(3527, '04:39', 'With arrival of CSS3 and HTML5, Anselm found web development fun and exciting again. He spoke at conferences.', 'Web exciting', 212),
(3528, '05:40', 'After publisher job with weekends and long hours, Anselm had a small burnout. He took time off which helped.', 'Small burnout', 212),
(3529, '07:11', 'After 15 years freelancing, Anselm realized he did not want to continue that way until retirement. He considered alternatives.', 'Wanted change', 212),
(3530, '07:39', 'Gardening attracted Anselm as an alternative career. He had done some gardening before as a hobby.', 'Gardening appealed', 212),
(3531, '08:32', 'Anselm and his brother started a market garden together on leased land. They grow seasonal vegetables for 100 customers.', 'Market garden', 212),
(3532, '20:36', 'Early burnout signs are feeling stressed about tasks that should not be too difficult and friends saying you seem less happy.', 'Burnout signs', 212),
(3533, '22:14', 'To avoid burnout, Anselm now does more fun weekend activities and limits multitasking.', 'Avoid burnout', 212),
(3534, '23:27', 'Anselm writes a web development newsletter summarizing each month\'s news to help others avoid burnout and fear of missing out.', 'Newsletter for others', 212),
(3535, '25:10', 'Anselm\'s newsletter also now helps himself stay current on web development since he spends less time coding.', 'Newsletter for self', 212),
(3536, '36:48', 'Anselm uses a mix of materials like plant waste to make custom fertilizer that he prepares 1 year in advance before using.', 'Custom fertilizer', 212),
(3537, '39:13', 'Smaller farmers should avoid expensive big machinery that is only worthwhile for large farms.', 'Avoid big machinery', 212),
(3538, '41:23', 'Fresh eggs from chickens on the farm taste much better than store eggs.', 'Farm eggs best', 212),
(3539, '44:19', 'Anselm minimizes fertilizer by letting nature fertilize through techniques like green manure.', 'Nature fertilizes', 212),
(3540, '45:06', 'The market garden is not yet profitable enough to support 2 families. They need more land.', 'Need more land', 212),
(3541, '46:13', 'Anselm uses his business knowledge from IT for the market garden as well.', 'Business knowledge', 212),
(3542, '49:30', 'Medium farmers buy unnecessary big equipment and go broke. They need to realize it is not required.', 'Unneeded equipment', 212),
(3543, '51:40', 'After moving from the city, Anselm learned many new hands-on skills helping in the country.', 'Learned hands-on skills', 212),
(3544, '56:05', 'Beginners should learn HTML, CSS and JavaScript basics thoroughly first before frameworks.', 'Learn basics first', 212),
(3545, '00:02', 'Welcome to Syntax Podcast', 'Intro', 213),
(3546, '00:35', 'Riverside App for Podcast Recording', 'App', 213),
(3547, '01:20', 'Git in VS Code Features', 'Topic', 213),
(3548, '02:33', 'Donkeys of the Day', 'Donkeys', 213),
(3549, '03:14', 'Beach Chair Saving', 'Beach chairs', 213),
(3550, '04:00', 'Crowded Hiking Trails', 'Crowded trails', 213),
(3551, '04:45', 'Monkey instincts', 'Monkey', 213),
(3552, '05:02', 'Git terminology', 'Terminology', 213),
(3553, '07:26', 'Git commit definition', 'Commit', 213),
(3554, '09:04', 'Git diff definition', 'Diff', 213),
(3555, '10:04', 'Git branch definition', 'Branch', 213),
(3556, '11:24', 'Git jargon summary', 'Jargon', 213),
(3557, '12:36', 'Previous Git GUIs used', 'GUIs used', 213),
(3558, '14:10', 'Git in VS Code overview', 'VS Code Git', 213),
(3559, '15:49', 'Integrated terminal drawbacks', 'Terminal', 213),
(3560, '18:03', 'VS Code command palette for Git', 'Command palette', 213),
(3561, '18:39', 'Seeing Git options in command palette', 'See options', 213),
(3562, '19:25', 'Difficulty of Git documentation', 'Git docs', 213),
(3563, '20:06', 'VS Code source control tab', 'Source control', 213),
(3564, '21:31', 'Source control tab indicators', 'Indicators', 213),
(3565, '22:12', 'Buttons in source control', 'Buttons', 213),
(3566, '22:54', 'Right amount of GUI in VS Code', 'GUI', 213),
(3567, '23:32', 'VS Code provides intuitive interface', 'Intuitive', 213),
(3568, '24:08', 'Changing branches in VS Code', 'Branches', 213),
(3569, '25:59', 'Sync changes button', 'Sync', 213),
(3570, '26:29', 'Changing branches via status bar', 'Status bar', 213),
(3571, '32:03', 'VS Code tracks changes between commits', 'Tracks changes', 213),
(3572, '33:34', 'VS Code timeline feature', 'Timeline', 213),
(3573, '35:28', 'Finding experimental features', 'Experimental', 213),
(3574, '36:10', 'VS Code release notes', 'Release notes', 213),
(3575, '37:17', 'Git merge conflicts explained', 'Merge conflicts', 213),
(3576, '40:09', 'Resolving merge conflicts in VS Code', 'Resolving conflicts', 213),
(3577, '42:25', 'Staying in coding context for conflicts', 'Context', 213),
(3578, '43:09', 'Auto push after commit', 'Auto push', 213),
(3579, '44:31', 'When not to auto push', 'No auto push', 213),
(3580, '45:53', 'Team workflows and squashing', 'Squashing', 213),
(3581, '48:09', 'GitLens extension features', 'GitLens', 213),
(3582, '50:39', 'Git Graph extension', 'Git Graph', 213),
(3583, '51:18', 'Official GitHub extension', 'GitHub extension', 213),
(3584, '52:42', 'GitHub Actions locally', 'Actions local', 213),
(3585, '53:56', 'Conventional Commits extension', 'Conventional Commits', 213),
(3586, '54:14', 'Opening repo in VS Code from terminal', 'VS Code from terminal', 213),
(3587, '55:12', 'Request for Git tips from listeners', 'Tips request', 213),
(3588, '03:56', 'Question about cache control headers for image heavy sites', 'Question', 214),
(3589, '04:57', 'Headers are metadata with requests and responses', 'Headers', 214),
(3590, '06:26', 'Caching stores responses to reuse and avoid re-work', 'Caching', 214),
(3591, '09:12', 'Benefits of caching are reduced load, bandwidth, and faster speed', 'Benefits', 214),
(3592, '10:15', 'Cache control headers use directives to specify caching behavior', 'Directives', 214),
(3593, '11:00', 'Max age specifies how long an asset should be cached', 'Max age', 214),
(3594, '12:49', 'Stale while revalidate serves stale assets but fetches fresh in background', 'Stale revalidate', 214),
(3595, '16:19', 'Other cache control directives like private, no cache, immutable', 'Other directives', 214),
(3596, '21:55', 'Main directives are max age and stale while revalidate', 'Main directives', 214),
(3597, '22:36', 'Caching provides big performance benefits', 'Performance', 214),
(3598, '02:32', 'Founded GitHub, worked at Powerset', 'Career', 215),
(3599, '04:00', 'Not good at math proofs in college', 'School', 215),
(3600, '06:27', 'Did Flash navigation menus back in the day', 'Flash', 215),
(3601, '08:09', 'Predicting full skeuomorphism in 7 years', 'Skeuomorphism', 215),
(3602, '11:25', 'RedwoodJS stack uses React, GraphQL, Prisma', 'RedwoodJS', 215),
(3603, '15:55', 'Can build startups in JS instead of Ruby/Rails now', 'JS vs Ruby', 215),
(3604, '24:16', 'RedwoodJS docs as important as code', 'Docs', 215),
(3605, '29:20', 'RedwoodJS has React on front-end, GraphQL in middle, Prisma on back-end', 'Stack', 215),
(3606, '37:35', 'Started $1M RedwoodJS Startup Fund', 'Fund', 215),
(3607, '43:10', 'Uses 5 year old specced out iMac Pro', 'Computer', 215),
(3608, '45:06', 'Uses Apple keyboard with number pad', 'Keyboard', 215),
(3609, '46:00', 'Uses cheap Logitech corded mouse', 'Mouse', 215),
(3610, '46:34', 'Uses latest iPhone', 'Phone', 215),
(3611, '46:56', 'VS Code font is Fira Code', 'Font', 215),
(3612, '49:26', 'Would start with HTML/CSS/JS for beginners now', 'Beginner', 215),
(3613, '51:36', 'Keeps up via Hacker News headlines', 'Keeping Up', 215),
(3614, '02:33', 'TypeScript tooling overview', 'tooling', 216),
(3615, '03:28', 'Type checkers vs compilers/transpilers', 'types', 216),
(3616, '05:26', 'Popular compilers: esbuild, SWC', 'compilers', 216),
(3617, '07:12', 'Build tools utilize compilers but do more', 'build tools', 216),
(3618, '15:44', 'Server-side TypeScript with Deno, esno, tsnode', 'server-side', 216),
(3619, '26:14', 'Vite and Parcel build tools', 'build tools', 216),
(3620, '31:21', 'Frameworks like Next.js have built-in tooling', 'frameworks', 216),
(3621, '33:31', 'Tsconfig and ESLint config', 'config', 216),
(3622, '40:08', 'VS Code has great TypeScript integration', 'VS Code', 216),
(3623, '45:00', 'Toothbrush and Tony Box product recommendations', 'recommendations', 216),
(3624, '02:32', 'Scott describes his home office setup', 'Office tour', 217),
(3625, '04:07', 'Scott discusses lighting and camera setup', 'Lighting', 217),
(3626, '08:18', 'Scott and Wes talk about desk options', 'Desks', 217),
(3627, '09:36', 'Discussion on mini split heat pumps', 'Heat pumps', 217),
(3628, '13:45', 'Banter about being bad at cornhole', 'Cornhole', 217),
(3629, '19:38', 'Scott details his professional audio gear setup', 'Audio gear', 217),
(3630, '25:47', 'Scott describes his monitor, docking station and other tech', 'Tech gear', 217),
(3631, '32:34', 'Scott and Wes discuss importance of hardware for recording', 'Hardware', 217),
(3632, '33:12', 'Scott got a walking treadmill for his birthday', 'Treadmill', 217),
(3633, '35:22', 'Discussion on benefits of standing mats', 'Standing mats', 217),
(3634, '39:32', 'Scott and Wes love talking about office setups', 'Office love', 217),
(3635, '00:27', 'Introducing the Syntax Supper Club podcast series', 'Intro', 218),
(3636, '02:33', 'TurboRepo abstracts monorepo complexity into a lightweight build system', 'TurboRepo', 218),
(3637, '03:16', 'TurboRepo makes large-scale development techniques accessible', 'Accessible', 218),
(3638, '04:32', 'TurboRepo started as a way to add monorepo support to TSDX', 'TSDX', 218),
(3639, '05:56', 'Large companies like Google use advanced build systems like Bazel', 'Bazel', 218),
(3640, '06:49', 'These systems create a DAG of build tasks to run incrementally', 'DAG', 218),
(3641, '08:22', 'These systems haven\'t been adopted much in frontend yet', 'Adoption', 218),
(3642, '08:57', 'TurboRepo focuses on incremental builds and remote caching', 'Caching', 218),
(3643, '09:34', 'TurboRepo runs tasks in parallel and dependency order', 'Parallel', 218),
(3644, '10:19', 'TurboRepo can reuse cached artifacts instead of rebuilding', 'Artifacts', 218),
(3645, '11:17', 'The cache can be shared between developers and CI', 'Shared cache', 218),
(3646, '15:43', 'Sponsor break - Whiskey Web and Whatnot podcast', 'Sponsor', 218),
(3647, '17:18', 'Adding TurboRepo to an existing monorepo takes about a day', 'Adoption', 218),
(3648, '20:04', 'TurboRepo works with all major package managers', 'Package managers', 218),
(3649, '21:26', 'TurboRepo can use environment variables to determine cache validity', 'Env vars', 218),
(3650, '24:31', 'TurboRepo binaries are packaged for distribution on NPM', 'Distribution', 218),
(3651, '26:38', 'TurboRepo can cache anything from logs to video encoding', 'Caching uses', 218),
(3652, '28:06', 'Sharing image processing cache could help Gatsby performance', 'Gatsby', 218),
(3653, '29:43', 'TurboRepo can help coordinate builds across packages', 'Build coordination', 218),
(3654, '31:06', 'Many of Jared\'s projects start by solving his own problems', 'Own problems', 218),
(3655, '33:46', 'Good tools should save time with easy adoption', 'Easy adoption', 218),
(3656, '36:48', 'Focus on solving problems rather than creating new ones', 'Solve problems', 218),
(3657, '37:23', 'Rapid-fire questions section', 'Questions', 218),
(3658, '43:08', 'TurboRepo CLI is written in Go, packaged for NPM', 'Implementation', 218),
(3659, '46:39', 'Having a small side project helps you learn and progress', 'Side projects', 218),
(3660, '49:02', 'Project-driven learning is best for self-taught developers', 'Project learning', 218),
(3661, '52:03', 'Excited about no-config development workflows in the future', 'No config', 218),
(3662, '53:15', 'How Jared\'s TurboRepo project was acquired by Vercel', 'Acquisition', 218),
(3663, '55:11', 'Vercel is working on edge rendering and React server components', 'Vercel projects', 218),
(3664, '56:03', 'Shameless plugs section', 'Plugs', 218),
(3665, '00:31', 'Potluck style episode talking about Next.js, styling, NoSQL databases, build tools, game development', 'Episode overview', 219),
(3666, '02:30', 'Next.js has better build tools than create-react-app without ejecting', 'Next.js build tools', 219),
(3667, '03:30', 'Next.js has benefits like pre-rendering, layouts, TypeScript support', 'Next.js benefits', 219),
(3668, '05:04', 'Syntax.fm built with Next.js, no major complaints just minor style tweaks', 'Syntax.fm tech stack', 219),
(3669, '08:13', 'Syntax.fm uses separate editor workflows for RSS and website, would be nice to consolidate', 'Syntax.fm workflows', 219),
(3670, '10:24', 'Check Activity Monitor > CPU to see if apps are running Intel or Apple Silicon code', 'Checking for Apple Silicon', 219),
(3671, '23:16', 'MongoDB is fully-featured, relationships can be complex', 'MongoDB relationships', 219),
(3672, '25:57', 'Node historically CommonJS, tools need to migrate to ESM', 'Node and ESM', 219),
(3673, '32:27', 'Styled Components added protestware notification for Russian locales', 'Styled Components protestware', 219),
(3674, '41:13', 'Game state should be client-side, validate state if competitve', 'Game state management', 219),
(3675, '45:20', 'Game developers have experience preventing cheating, obfuscation can help', 'Prevent game cheating', 219),
(3676, '02:33', 'Talk about 2 JavaScript environments', 'JS envs', 220),
(3677, '03:52', 'Mention of Structured Content conference', 'Conf', 220),
(3678, '06:07', 'Start discussing web interoperability', 'Interop', 220),
(3679, '09:10', 'List many other JS environments', 'JS envs', 220),
(3680, '14:04', 'Describe JS standards bodies', 'Standards', 220),
(3681, '16:24', 'Goal to standardize APIs across environments', 'Standardize', 220),
(3682, '17:42', 'Tools will work across environments', 'Portable', 220),
(3683, '20:25', 'Announce web interoperability working group', 'Working group', 220),
(3684, '02:33', 'Wes asks how NX relates to existing tools like Webpack', 'Tooling', 221),
(3685, '05:53', 'Victor explains how NX provides core task orchestration features and optional plugins for specific tools', 'NX overview', 221),
(3686, '10:04', 'Discussion on how tools like TypeScript provide long-term benefits that are hard to see at first', 'Long-term benefits', 221),
(3687, '14:40', 'Victor clarifies that NX is designed for most companies, not just the scale of Google', 'NX scale', 221),
(3688, '21:14', 'Example of how NX can help automatically migrate a codebase to new versions of libraries', 'Migrations', 221),
(3689, '26:10', 'Story of using NX to automatically migrate from TSLint to ESLint', 'TSLint migration', 221),
(3690, '34:37', 'Explanation of how NX can work with existing tools like Webpack without replacing them', 'Tool integration', 221),
(3691, '40:24', 'Overview of computation caching in NX to skip unnecessary work', 'Caching', 221),
(3692, '45:19', 'How caching improves average build times but distribution is needed to improve worst-case times', 'Caching vs distribution', 221),
(3693, '53:58', 'Victor\'s advice to draw weekly diagrams to reinforce new learnings', 'Learning advice', 221),
(3694, '02:33', 'Web APIs: Interesting things you can do in the browser', 'Browser APIs', 222),
(3695, '04:36', 'getUserMedia allows access to user\'s webcam and microphone', 'Webcam access', 222),
(3696, '07:56', 'FileSystem API allows read, write access to local files', 'File access', 222),
(3697, '11:10', 'Permissions API checks user permissions status', 'Permissions', 222),
(3698, '14:06', 'Geolocation API accesses user\'s location', 'Location', 222),
(3699, '22:38', 'Web Animations API creates animations with JavaScript', 'Animations', 222),
(3700, '26:36', 'ResizeObserver API detects size changes of elements', 'Resize observe', 222),
(3701, '31:37', 'Clipboard API allows copy/paste with JavaScript', 'Clipboard', 222),
(3702, '34:17', 'Web Storage API stores data locally (localStorage, sessionStorage)', 'Local storage', 222),
(3703, '38:25', 'Speech Synthesis API converts text to speech', 'Text to speech', 222),
(3704, '41:42', 'Speech Recognition API converts speech to text', 'Speech to text', 222),
(3705, '00:30', 'Talking TypeScript fundamentals', 'Intro', 223),
(3706, '01:01', 'Narrowing types in TypeScript', 'Narrowing', 223),
(3707, '02:20', 'Sentry sponsor', 'Sentry', 223),
(3708, '04:00', 'PaymentsHub sponsor', 'PaymentsHub', 223),
(3709, '05:44', 'What is type narrowing?', 'Definition', 223),
(3710, '06:35', 'Using type guards', 'Type guards', 223),
(3711, '09:13', 'Food metaphors', 'Food', 223),
(3712, '10:19', 'typeof type guard', 'typeof', 223),
(3713, '11:29', 'in and instanceof type guards', 'in and instanceof', 223),
(3714, '13:44', 'Custom type guard functions', 'Custom guards', 223),
(3715, '15:53', 'Abstracting type checks', 'Abstracting', 223),
(3716, '16:30', 'this is type narrowing', 'this is', 223),
(3717, '18:06', 'Discriminated unions', 'Discriminated unions', 223),
(3718, '19:55', 'Controlling vs being controlled by TS', 'Control', 223),
(3719, '00:02', 'Podcast intro', 'Intro', 224),
(3720, '00:12', 'What is edge computing', 'Edge intro', 224),
(3721, '00:29', 'Run it on the edge', 'Edge phrase', 224),
(3722, '00:37', 'Sponsors', 'Sponsors', 224),
(3723, '00:53', 'Scott is sick', 'Scott sick', 224),
(3724, '01:18', 'Wes was sick', 'Wes sick', 224),
(3725, '02:00', 'Friday Supper Club announcement', 'Supper club', 224),
(3726, '02:40', 'Getting guests on podcast', 'Guests', 224),
(3727, '04:56', 'What is edge computing', 'Edge explained', 224),
(3728, '07:28', 'Caching with CDNs', 'CDN caching', 224),
(3729, '08:08', 'Edge computing use cases', 'Edge use cases', 224),
(3730, '10:25', 'Latency issues with IoT', 'IoT latency', 224),
(3731, '11:34', 'Speed comparisons', 'Speeds', 224),
(3732, '13:38', 'Cold start explained', 'Cold start', 224),
(3733, '15:22', 'Edge function APIs', 'APIs', 224),
(3734, '23:07', 'Deno and edge functions', 'Deno', 224),
(3735, '24:26', 'Supabase using Deno', 'Supabase', 224),
(3736, '24:30', 'Pronouncing Supabase', 'Supabase name', 224),
(3737, '27:03', 'Size limitations', 'Size limits', 224),
(3738, '30:20', 'Complex redirects', 'Redirects', 224),
(3739, '31:52', 'Edge rendering', 'Edge rendering', 224),
(3740, '33:03', 'Content rewrites', 'Content rewrites', 224),
(3741, '33:40', 'HTML rewriting example', 'HTML rewriting', 224),
(3742, '34:56', 'Authentication', 'Authentication', 224),
(3743, '35:30', 'Conditional loading', 'Conditional loading', 224),
(3744, '36:51', 'Browser support', 'Browser support', 224),
(3745, '37:20', 'Localization', 'Localization', 224),
(3746, '38:21', 'Caching', 'Caching', 224),
(3747, '39:05', 'Authentication strategies', 'Auth strategies', 224),
(3748, '40:13', 'Starting async work', 'Async work', 224),
(3749, '40:46', 'Implementing edge functions', 'Implementing', 224),
(3750, '43:39', 'Edges as middleware', 'Middleware', 224),
(3751, '46:32', 'Using WebAssembly', 'WebAssembly', 224),
(3752, '47:47', 'Companies offering edge', 'Companies', 224),
(3753, '48:57', 'Portability challenges', 'Portability', 224),
(3754, '50:41', 'Moving to picks', 'Picks intro', 224),
(3755, '00:29', 'Discussing Axios vs fetch for network requests', 'Axios vs fetch', 225),
(3756, '01:26', 'Linode sponsor spot', 'Linode ad', 225),
(3757, '02:09', 'Sentry sponsor spot', 'Sentry ad', 225),
(3758, '03:03', 'Axios allows avoiding double JSON promise with fetch', 'Avoid double promise', 225),
(3759, '03:38', 'Axios has interceptors like middleware', 'Interceptors', 225),
(3760, '04:34', 'Some are fine with default fetch capabilities', 'Fetch is enough', 225),
(3761, '05:08', 'Many use a framework that handles network requests', 'Frameworks handle requests', 225),
(3762, '06:25', 'No need to tack on double JSON promise with Axios', 'No double promise', 225),
(3763, '06:46', 'Fetch can be enhanced to do anything Axios does', 'Enhance fetch', 225),
(3764, '07:30', 'Interceptors allow request manipulation', 'Manipulate requests', 225),
(3765, '08:47', 'Interceptors allow caching third party API data', 'Cache APIs', 225),
(3766, '09:31', 'Interceptors allow token refresh on expired JWT', 'Refresh tokens', 225),
(3767, '10:10', 'Fetch works for most use cases, but can build on it', 'Extend fetch', 225),
(3768, '10:29', 'Axios handles progress events for uploads/downloads', 'Progress events', 225),
(3769, '11:44', 'Progress accuracy depends on file sizes known on client/server', 'Progress accuracy', 225),
(3770, '12:14', 'Axios validateStatus API handles tricky server responses', 'Validate status', 225),
(3771, '13:47', 'Axios allows default headers and API keys', 'Default headers', 225),
(3772, '14:08', 'Axios adapters useful for mocking HTTP requests', 'Mock requests', 225),
(3773, '15:44', 'Axios allows custom request timeouts', 'Custom timeouts', 225),
(3774, '16:28', 'Shouldn\'t use Axios just to avoid double promise', 'Avoid just for promise', 225),
(3775, '16:44', 'Useful when working with tricky third-party APIs', 'Tricky APIs', 225),
(3776, '17:10', 'Postman generates Axios code snippets', 'Postman code gen', 225),
(3777, '00:02', 'Announcer intro', 'Intro', 226),
(3778, '00:15', 'Wes and Scott introduce stumped episode', 'Stumped intro', 226),
(3779, '00:39', 'Wes and Scott discuss keeping score', 'No score', 226),
(3780, '00:59', 'Wes introduces sponsors', 'Sponsors', 226),
(3781, '04:18', 'Wes and Scott play rock paper scissors for who goes first', 'Rock paper scissors', 226),
(3782, '05:08', 'Wes asks first question about WeakMap methods', 'WeakMap question', 226),
(3783, '07:20', 'Scott asks Wes about making objects iterable', 'Iterable objects', 226),
(3784, '09:05', 'Wes says hard interview questions are normal', 'Hard questions', 226),
(3785, '09:28', 'Scott asks Wes how to uppercase first string letter', 'Uppercase string', 226),
(3786, '10:37', 'Wes asks Scott about typeof operator', 'Typeof operator', 226),
(3787, '11:29', 'Scott and Wes discuss TypeScript type checking', 'TypeScript types', 226),
(3788, '11:56', 'Wes asks Scott to explain ES6 classes', 'ES6 classes', 226),
(3789, '13:24', 'Wes asks Scott about enumerating objects', 'Enumerate objects', 226),
(3790, '15:49', 'Wes introduces sponsor Content by Kentico', 'Sponsor 1', 226),
(3791, '17:20', 'Scott asks Wes about event queue', 'Event queue', 226),
(3792, '18:23', 'Wes discusses async timing issues', 'Async timing', 226),
(3793, '19:18', 'Scott reads StackOverflow answer on event queue', 'StackOverflow answer', 226),
(3794, '21:07', 'Wes asks Scott about need for promises', 'Promises', 226),
(3795, '23:50', 'Wes asks Scott about range overflow', 'Range overflow', 226),
(3796, '25:51', 'Wes asks Scott about JS enhanced object literals', 'Enhanced objects', 226),
(3797, '27:43', 'Scott and Wes discuss form validation techniques', 'Form validation', 226),
(3798, '28:23', 'Wes asks Scott about matching regex strings', 'Matching regex', 226),
(3799, '29:36', 'Wes introduces sponsor LogRocket', 'Sponsor 2', 226),
(3800, '31:15', 'Wes asks Scott what a thunk function is', 'Thunk function', 226),
(3801, '33:47', 'Scott asks Wes about benefits of modules', 'Modules', 226),
(3802, '35:49', 'Wes introduces sponsor Freshbooks', 'Sponsor 3', 226),
(3803, '36:05', 'Wes asks Scott about call, apply and bind', 'Call, apply, bind', 226),
(3804, '38:23', 'Scott and Wes discuss lack of need for bind nowadays', 'No bind needed', 226),
(3805, '40:25', 'Wes asks Scott to explain need for modules', 'Modules explanation', 226),
(3806, '41:46', 'Wes asks Scott about variable swapping with destructuring', 'Variable swapping', 226),
(3807, '43:22', 'Wes wraps up stumped episode', 'Wrap up', 226),
(3808, '44:07', 'Wes sick picks recycled outdoor furniture', 'Wes pick', 226),
(3809, '46:29', 'Scott sick picks Who Arted podcast', 'Scott pick', 226),
(3810, '48:51', 'Wes shameless plug for his courses', 'Wes plug', 226),
(3811, '49:22', 'Scott shameless plug for Level Up Tutorials', 'Scott plug', 226),
(3812, '50:11', 'Wes and Scott sign off', 'Sign off', 226),
(3813, '00:21', 'Talking about building coupon systems for ecommerce', 'Coupon systems', 227),
(3814, '01:38', 'Using Prismic as a headless CMS to build content with Slice components', 'Prismic CMS', 227),
(3815, '02:38', 'Using LogRocket to debug errors and monitor user experiences in web apps', 'LogRocket', 227),
(3816, '04:11', 'Both built custom coupon engines, challenges and strategies', 'Building coupons', 227),
(3817, '05:15', 'Layering custom coupon logic on top of payment provider functionality', 'Layering coupons', 227),
(3818, '05:49', 'Supporting multiple payment methods requires custom coupon logic', 'Multiple payments', 227),
(3819, '07:29', 'Coupon constraints like dollar or percentage discounts', 'Coupon constraints', 227),
(3820, '08:09', 'Constraints around allowing coupons on products or subscriptions', 'More constraints', 227),
(3821, '09:27', 'Restricting coupons to specific products with unique codes', 'Restricting coupons', 227),
(3822, '09:59', 'Limiting number of coupon redemptions', 'Limiting redemptions', 227),
(3823, '10:18', 'Incrementing coupon usage count in database', 'Incrementing usage', 227),
(3824, '12:06', 'Applying discounts to cart total vs individual items', 'Cart discounts', 227),
(3825, '12:24', 'Setting coupon expiration dates', 'Expiration dates', 227),
(3826, '12:54', 'Deactivating coupons to stop abuse', 'Deactivating coupons', 227),
(3827, '13:11', 'Creating single-use coupons', 'Single-use coupons', 227),
(3828, '13:18', 'Allowing only one coupon per order', 'One coupon per order', 227),
(3829, '13:39', 'Stacking student discounts with coupons', 'Stacking discounts', 227),
(3830, '14:02', 'Restricting coupons to certain countries', 'Country restrictions', 227),
(3831, '14:23', 'Restricting country-specific coupons to those countries', 'More country restrictions', 227),
(3832, '14:54', 'New vs existing customer coupons', 'New vs existing', 227),
(3833, '15:14', 'Connecting affiliate coupons', 'Affiliate coupons', 227),
(3834, '16:25', 'Using referral URLs to apply automatic coupons', 'Referral coupons', 227),
(3835, '16:48', 'Chaining conditional coupon rules', 'Chaining rules', 227),
(3836, '17:37', 'Complex conditional logic is difficult to manage', 'Complex logic', 227),
(3837, '18:28', 'Can\'t prevent coupons from being shared', 'Can\'t prevent sharing', 227),
(3838, '19:24', 'Focus time on business not anti-piracy', 'Don\'t chase piracy', 227),
(3839, '20:04', 'Unique coupon codes to track attribution', 'Track attribution', 227),
(3840, '20:39', 'Inferring metadata from coupon code format', 'Coupon metadata', 227),
(3841, '21:08', 'Applying coupons automatically via URL', 'Auto apply coupons', 227),
(3842, '21:40', 'Trim whitespace and normalize capitalization', 'Normalize coupons', 227),
(3843, '22:15', 'Simplify coupon format for usability', 'Simplify format', 227),
(3844, '22:59', 'Helpful error messages for invalid coupons', 'Good error messages', 227),
(3845, '23:17', 'Make coupon input easy and clean', 'Clean input', 227),
(3846, '23:48', 'Don\'t frustrate users during purchase', 'Don\'t frustrate users', 227),
(3847, '24:03', 'Summary of coupon engine tips', 'Summary tips', 227),
(3848, '24:48', 'Example of coupon logic exploit', 'Coupon exploit', 227),
(3849, '00:02', 'Introduction', 'Announcer intro', 228),
(3850, '00:11', 'Hosts welcome', 'Hosts intro', 228),
(3851, '00:50', 'Hosts personal updates', 'Hosts updates', 228),
(3852, '01:48', 'Jury duty experience', 'Jury duty', 228),
(3853, '02:10', 'Interest in jury duty', 'Jury interest', 228),
(3854, '02:25', 'Types of jury duty cases', 'Jury cases', 228),
(3855, '02:40', 'Sponsor intro', 'Sponsors', 228),
(3856, '02:53', 'Transition to questions', 'Questions intro', 228),
(3857, '02:59', 'Working with designers/PMs', 'Teamwork', 228),
(3858, '04:24', 'Being honest with communication needs', 'Communication', 228),
(3859, '05:02', 'Delivering work on time', 'Deliver on time', 228),
(3860, '05:49', 'Understanding all roles', 'Understand roles', 228),
(3861, '06:11', 'Using standups for updates', 'Standup updates', 228),
(3862, '06:42', 'Pronouncing a name', 'Name pronunciation', 228),
(3863, '07:01', 'Dealing with imposter syndrome', 'Imposter syndrome', 228),
(3864, '08:09', 'Being comfortable not knowing', 'Comfort not knowing', 228),
(3865, '08:21', 'Progressing without formal education', 'No formal education', 228),
(3866, '09:18', 'Imposter syndrome common', 'Common imposter', 228),
(3867, '10:47', 'Putting yourself in challenging roles', 'Challenge yourself', 228),
(3868, '11:40', 'Denver coffee shops', 'Denver coffee', 228),
(3869, '12:06', 'Using tables for tabular data', 'Tables for data', 228),
(3870, '13:31', 'Using a dedicated animation library', 'Animation library', 228),
(3871, '14:26', 'Most are just JS and CSS', 'JS and CSS animations', 228),
(3872, '14:47', 'Flip animations more difficult', 'Flip animations', 228),
(3873, '15:05', 'Animating DOM changes difficult', 'DOM animation', 228),
(3874, '15:44', 'GreenSock framework-agnostic option', 'GreenSock option', 228),
(3875, '16:50', 'GreenSock well-documented', 'GreenSock docs', 228),
(3876, '17:58', 'Sentry sponsor spot', 'Sentry sponsor', 228),
(3877, '18:11', 'Icon library question', 'Icon libraries', 228),
(3878, '19:02', 'Font Awesome not just web fonts now', 'Font Awesome not web fonts', 228),
(3879, '19:28', 'Font Awesome improved', 'Font Awesome better', 228),
(3880, '20:12', 'Curating own SVG icons', 'Curated SVGs', 228),
(3881, '20:33', 'Switch statement for icons', 'Icon switch statement', 228),
(3882, '20:39', 'Pick icons that fit brand', 'Brand identity icons', 228),
(3883, '21:27', 'Using React Icons', 'React Icons', 228),
(3884, '22:15', 'React Icons API', 'React Icons API', 228),
(3885, '22:37', 'Carefully choosing icon sets', 'Choosing icon sets', 228),
(3886, '23:40', 'Higher resolution screens', 'Higher resolution', 228),
(3887, '24:47', 'Removing logo detail at small sizes', 'Logo detail', 228),
(3888, '25:15', 'Fixing broken service workers', 'Service workers broken', 228),
(3889, '25:54', 'Caching causes issues', 'Caching issues', 228),
(3890, '26:36', 'Serving old cached version', 'Old cached version', 228),
(3891, '27:25', 'Browser checks for new service worker', 'Browser checks service worker', 228),
(3892, '28:03', 'Nuke service worker gist', 'Nuke gist', 228),
(3893, '28:19', 'Wes service worker episode', 'Service worker episode', 228),
(3894, '29:26', 'Sanity sponsor spot', 'Sanity sponsor', 228),
(3895, '31:10', 'Fullstack Next.js pros and cons', 'Next.js fullstack pros/cons', 228),
(3896, '31:41', 'Pros of colocation', 'Colocation pros', 228),
(3897, '32:14', 'Separation of concerns benefit', 'Separation benefit', 228),
(3898, '32:52', 'Nothing proprietary about Next.js functions', 'Next.js not proprietary', 228),
(3899, '33:43', 'Factoring out backend logic', 'Factoring logic', 228),
(3900, '34:31', 'Easily moving serverless functions', 'Moving serverless', 228),
(3901, '34:54', 'Using monorepos', 'Monorepos', 228),
(3902, '35:43', 'Tradeoffs either way', 'Tradeoffs', 228),
(3903, '37:46', 'Pronouncing French name', 'French name', 228),
(3904, '38:44', 'Online coding environments', 'Online coding', 228),
(3905, '39:57', 'Moving to production', 'Move to production', 228),
(3906, '40:11', 'Keeping private until ready', 'Keep private', 228),
(3907, '40:28', 'Avoiding always-on repls', 'Avoid repls', 228),
(3908, '40:38', 'Ok for toys and tools', 'Ok for toys', 228),
(3909, '41:40', 'New developers going online first', 'Online first', 228),
(3910, '41:58', 'When to move to production', 'When move to production', 228),
(3911, '42:45', 'Managing client expectations', 'Manage expectations', 228),
(3912, '43:34', 'Having a change order process', 'Change order process', 228),
(3913, '44:02', 'Taking on bad clients when needing work', 'Needing work', 228),
(3914, '44:19', 'Having standards for clients', 'Standards', 228),
(3915, '02:46', 'Svelte Cubed explained', 'Svelte Cubed', 229),
(3916, '03:51', 'Declarative vs imperative 3D', 'Declarative 3D', 229),
(3917, '05:15', 'What is Three.js?', 'Three.js', 229),
(3918, '06:55', 'Three.js uses WebGL and Canvas', 'WebGL', 229),
(3919, '07:45', 'Three.js scene setup', 'Scene setup', 229),
(3920, '10:20', 'Svelte components for 3D', 'Svelte 3D', 229),
(3921, '11:33', 'Generating 3D visualizations', '3D visualizations', 229),
(3922, '12:26', 'Orbit controls', 'Orbit controls', 229),
(3923, '13:22', 'Svelte Cubed documentation', 'Documentation', 229),
(3924, '15:03', 'Using Three.js docs', 'Three.js docs', 229),
(3925, '16:01', 'Physics with Svelte Cannon', 'Physics', 229),
(3926, '17:08', 'Summary and additional resources', 'Resources', 229),
(3927, '00:02', 'Scott and Wes introduce the podcast', 'Intro', 230),
(3928, '00:59', 'Scott talks about buying a new electric car', 'New car', 230),
(3929, '02:00', 'Scott describes the look and feel of his new Hyundai Ioniq 5 EV', 'Car description', 230),
(3930, '03:38', 'Scott talks about the car\'s fast charging and advanced tech features', 'Car features', 230),
(3931, '05:24', 'Wes and Scott discuss regenerative braking in EVs', 'Regen braking', 230),
(3932, '06:29', 'Scott waited a long time to get the Ioniq 5 without dealer markups', 'No markups', 230),
(3933, '08:32', 'Question from Andy about adding interactivity to a Drupal site', 'Drupal question', 230),
(3934, '09:40', 'Wes recommends Alpine.js for simple interactivity without much build process', 'Alpine recommendation', 230),
(3935, '11:02', 'Scott suggests using vanilla web components', 'Web component suggestion', 230),
(3936, '12:04', 'Question from Mohammed about presentational React components', 'React question', 230),
(3937, '02:33', 'Scott deployed code on Friday and Century helped catch a critical bug', 'Century bug catch', 231),
(3938, '03:36', 'Magic Bell provides notifications inbox for your product', 'Magic Bell', 231),
(3939, '05:35', 'Topic is how to be consistent', 'Consistency tips', 231),
(3940, '06:13', 'Committing to a reasonable timeline and schedule is key', 'Commit', 231),
(3941, '07:42', 'Start with small, achievable commitments', 'Start small', 231),
(3942, '09:15', 'Plan and schedule everything needed to accomplish goals', 'Plan & schedule', 231),
(3943, '09:50', 'Schedule and protect time needed for goals', 'Protect time', 231),
(3944, '10:22', 'Be flexible for emergencies but stay committed', 'Stay committed', 231),
(3945, '11:13', 'Batch record/produce content to stay ahead', 'Batch content', 231),
(3946, '12:31', 'Capture ideas when they come to you', 'Capture ideas', 231),
(3947, '13:02', 'Have a plan and ideas before batch work sessions', 'Have a plan', 231),
(3948, '13:44', 'For developers, use issues and todos to stay consistent', 'Issues & todos', 231),
(3949, '14:13', 'Being accountable to someone else helps consistency', 'Be accountable', 231),
(3950, '15:04', 'Sign up for events/things you must complete', 'Sign up', 231),
(3951, '17:17', 'Having others depend on you increases motivation', 'Help others', 231),
(3952, '19:11', 'Break big tasks into smaller pieces', 'Smaller tasks', 231),
(3953, '19:55', 'Consistently make todo lists and prioritize', 'Todo lists', 231),
(3954, '20:30', 'Use SMART goals that are specific and measurable', 'SMART goals', 231),
(3955, '22:01', 'Measure and track progress on meeting goals', 'Measure progress', 231),
(3956, '23:07', 'Revise plans if you fail to meet goals initially', 'Revise plans', 231),
(3957, '02:33', 'Wes and Scott discuss how they come up with ideas and lay out content for YouTube videos, blog posts, courses, conference talks, and podcasts.', 'Content ideation', 232),
(3958, '03:05', 'Scott shares his process for creating consistent YouTube content by capturing ideas in a list and batch recording videos.', 'YouTube process', 232),
(3959, '08:45', 'Scott advises new YouTubers to release content on a consistent schedule to build their audience.', 'YouTube advice', 232),
(3960, '09:56', 'Wes shares how he structures conference talks around 6-8 loosely associated topics to keep it interesting.', 'Conference talks', 232),
(3961, '20:03', 'Scott outlines his process for developing course ideas and content, starting with goals and key concepts.', 'Course development', 232),
(3962, '27:16', 'Wes explains how he mind maps course topics and builds projects to cover real world skills.', 'Course planning', 232),
(3963, '34:56', 'Wes writes blog posts to document solutions to tricky development problems.', 'Blog posts', 232),
(3964, '47:12', 'Wes and Scott discuss their system for organizing Syntax podcast content and ideas.', 'Podcast planning', 232),
(3965, '02:58', 'Microsoft proposed adding optional types syntax to JS', 'Optional types', 233),
(3966, '04:52', 'Types in JS catches bugs and improves autocomplete', 'Catch bugs', 233),
(3967, '06:48', 'Many predict types would come to JS, and here we are', 'Prediction', 233),
(3968, '09:25', 'Optional types are parsed but ignored by JS engines', 'Parsed types', 233),
(3969, '11:08', 'Prefer TypeScript syntax over more verbose JSDoc comments', 'Prefer TS syntax', 233),
(3970, '15:36', 'Types help more in complex apps vs simple scripts', 'Complex apps', 233),
(3971, '18:55', 'TypeScript is proven winner for types over Flow or JSDoc', 'TypeScript winner', 233),
(3972, '20:30', 'Types in JS reduces build steps but doesn\'t eliminate them', 'Reduce builds', 233),
(3973, '23:55', 'No need for JSX support yet in browser', 'No JSX yet', 233),
(3974, '02:33', 'Discussing Scott\'s phone software issue', 'Phone issue', 234),
(3975, '04:13', 'Reviewing bald.design portfolio', 'bald.design', 234),
(3976, '08:11', 'Reviewing huangande.dev portfolio', 'huangande.dev', 234),
(3977, '09:19', 'Reviewing Kenny Thai\'s portfolio site', 'Kenny Thai', 234),
(3978, '11:17', 'Reviewing abgn.me portfolio', 'abgn.me', 234),
(3979, '14:53', 'Reviewing bradleyshellnut.com portfolio', 'bradleyshellnut.com', 234),
(3980, '18:01', 'Reviewing hunterjennings.dev portfolio', 'hunterjennings.dev', 234),
(3981, '21:13', 'Reviewing matthewfarlim.com portfolio', 'matthewfarlim.com', 234),
(3982, '00:27', 'Vitest overview', 'Vitest', 235),
(3983, '01:02', 'COVID and masks', 'COVID', 235),
(3984, '02:09', 'Campfire smelling masks', 'Masks', 235),
(3985, '02:39', 'Sponsor: Sentry', 'Sentry', 235),
(3986, '03:53', 'Sponsor: Magicbell', 'Magicbell', 235),
(3987, '05:02', 'What is Vitest?', 'Vitest', 235),
(3988, '05:57', 'Using Vitest config', 'Config', 235),
(3989, '06:57', 'Vitest setup differences', 'Setup', 235),
(3990, '07:13', 'Vite backend usage', 'Backend', 235),
(3991, '07:28', 'Vitest features', 'Features', 235),
(3992, '08:45', 'Faster test runs', 'Faster', 235),
(3993, '08:50', 'Jest compatibility', 'Jest', 235),
(3994, '09:52', 'Mocking built-in', 'Mocking', 235),
(3995, '10:23', 'Filtering tests', 'Filtering', 235),
(3996, '10:31', 'Snapshot testing', 'Snapshots', 235),
(3997, '10:45', 'Code coverage', 'Coverage', 235),
(3998, '11:04', 'DOM mocking', 'DOM', 235),
(3999, '12:58', 'Testing library usage', 'Testing library', 235),
(4000, '14:42', 'In-file testing', 'In-file', 235),
(4001, '15:11', 'In-file test splitting', 'Splitting', 235);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(4002, '16:09', 'Colocating tests', 'Colocating', 235),
(4003, '16:34', 'Hiding test files', 'Hiding', 235),
(4004, '17:30', 'Testing library integration', 'Integration', 235),
(4005, '19:07', 'Easy setup', 'Setup', 235),
(4006, '19:36', 'Minor disruption', 'Disruption', 235),
(4007, '20:37', 'Year of speed', 'Speed', 235),
(4008, '20:55', 'Conclusion', 'Conclusion', 235),
(4009, '00:17', 'Explaining Wes and Scott\'s course platform stacks', 'Stacks', 236),
(4010, '00:45', 'Stacks have changed over the years', 'Changed', 236),
(4011, '00:57', 'Wes released a big update to his stack', 'Update', 236),
(4012, '01:09', 'Wes and Scott do similar things but use different tech stacks', 'Different', 236),
(4013, '01:34', 'Sponsors: Kentico, LogRocket, .tech domain names', 'Sponsors', 236),
(4014, '03:32', 'Wes talks about moving his course platform hosting to Render', 'Moving hosting', 237),
(4015, '04:28', 'Wes explains how Cloudflare proxies websites', 'Cloudflare proxy', 237),
(4016, '05:43', 'Wes explains how Let\'s Encrypt works', 'Let\'s Encrypt', 237),
(4017, '08:34', 'More explanation of Cloudflare services', 'Cloudflare services', 237),
(4018, '10:25', 'Problems when combining Render and Cloudflare', 'Render/Cloudflare issues', 237),
(4019, '15:38', 'Solutions for using Render and Cloudflare together', 'Render/Cloudflare solutions', 237),
(4020, '18:22', 'Gray cloud Render to approve SSL, then re-enable Cloudflare', 'Gray cloud solution', 237),
(4021, '21:09', 'Scott turns on Cloudflare proxy live during the show', 'Live Cloudflare change', 237),
(4022, '00:11', 'Potluck episode with questions submitted by listeners', 'questions', 238),
(4023, '00:41', 'Questions cover authentication, headless ecommerce, cookies in Next.js, motivation for finishing projects, git conflicts, developer roles, Shopify CMS, URL tokens', 'topics', 238),
(4024, '02:33', 'Handling different authentication levels with individual permissions and role groups', 'auth', 238),
(4025, '03:05', 'Salt on roads destroys cars in Canada compared to sun melting snow in Denver', 'winter', 238),
(4026, '04:49', 'Grant specific permissions like viewing, editing users, plus conditional queries, not just yes/no access', 'permissions', 238),
(4027, '10:16', 'Don\'t worry about people saying front end developers aren\'t real developers', 'roles', 238),
(4028, '17:42', 'Y2K scare was mitigated as the year 2000 arrived with no issues', 'Y2K', 238),
(4029, '26:03', 'No documentation is worse than bad documentation', 'docs', 238),
(4030, '27:46', 'Finish side projects for learning, but don\'t be afraid to abandon if you\'ve gotten what you need', 'finishing', 238),
(4031, '33:54', 'Regenerate package-lock.json on merge conflicts rather than resolve manually', 'package-lock', 238),
(4032, '39:19', 'Sanity.io provides tools to build headless Shopify sites', 'Shopify', 238),
(4033, '43:35', 'URL tokens allow passing data like PayPal callbacks and tracking codes', 'URL tokens', 238),
(4034, '49:22', 'Next.js serverless functions can set cookies like Express with proper headers', 'Next.js cookies', 238),
(4035, '55:39', 'O\'Keefe\'s hand cream and lip balm recommended for dry cracked skin', 'O\'Keefe\'s', 238),
(4036, '04:00', 'Question about recent trend towards SSR vs Jamstack/serverless', 'Question', 239),
(4037, '05:56', 'Explain what Jamstack, SSR, and serverless are', 'Definitions', 239),
(4038, '12:18', 'Discuss differences between SSR, Jamstack, and when to use each', 'Differences', 239),
(4039, '17:00', 'Explain where serverless fits in', 'Serverless', 239),
(4040, '23:53', 'Thank listener for good question that turned into whole show', 'Wrap up', 239),
(4041, '00:02', 'Wes and Scott introduce the podcast', 'Intro', 240),
(4042, '00:11', 'They will discuss the results of the State of JS survey', 'Episode overview', 240),
(4043, '00:26', 'The survey covers languages, testing, pain points and more', 'Survey topics', 240),
(4044, '00:56', 'Scott has been setting up his office with sound panels', 'Office setup', 240),
(4045, '02:15', 'Wes\'s desk setup and cable management', 'Desk setup', 240),
(4046, '03:13', 'Scott\'s under-desk power and cable management', 'Cable management', 240),
(4047, '03:40', 'Wes tries online grocery delivery with Instacart', 'Instacart', 240),
(4048, '05:01', 'Scott uses grocery pickup from Kroger and Whole Foods', 'Grocery pickup', 240),
(4049, '06:29', 'Instacart can be expensive and replacements aren\'t ideal', 'Instacart issues', 240),
(4050, '07:22', 'Wes prefers shopping in person, Scott likes it', 'Grocery preferences', 240),
(4051, '08:24', 'Overview of options for mobile and desktop development', 'Mobile & desktop', 240),
(4052, '09:18', 'Wes and Scott\'s experience with React Native and Electron', 'React Native & Electron', 240),
(4053, '10:11', 'Scott discusses Touri, a Rust alternative to Electron', 'Touri', 240),
(4054, '11:34', 'Touri documentation is minimal since it\'s in early development', 'Touri docs', 240),
(4055, '12:51', 'Native apps still a top choice for mobile development', 'Native apps', 240),
(4056, '13:28', 'React Native and Electron also popular with JS developers', 'JS frameworks popularity', 240),
(4057, '14:02', 'Overview of top testing tools by usage and satisfaction', 'Testing tools', 240),
(4058, '15:10', 'Scott discusses issues with Jest and interest in Vite Test', 'Jest vs Vite Test', 240),
(4059, '16:11', 'Playwright emerging for end-to-end testing like Cypress', 'Playwright', 240),
(4060, '16:33', 'Wes and Scott debate Storybook as a testing tool', 'Storybook testing', 240),
(4061, '17:22', 'Wes uses Jest, React Testing Library and snapshots', 'Wes\' testing preferences', 240),
(4062, '18:04', 'Scott wants to explore Playwright more', 'Playwright interest', 240),
(4063, '18:38', 'Sentry tracks errors and exceptions in your apps', 'Sentry ad', 240),
(4064, '21:26', 'Tools for managing monorepos', 'Monorepo tools', 240),
(4065, '22:30', 'Wes switched to PNPM on Scott\'s recommendation', 'PNPM', 240),
(4066, '23:24', 'Turborepo gaining interest but not widely used yet', 'Turborepo', 240),
(4067, '24:20', 'NX and Lerna also popular monorepo tools', 'NX & Lerna', 240),
(4068, '25:05', 'Scott prefers PNPM and Turborepo', 'Scott\'s preferences', 240),
(4069, '27:11', 'Sanity is a unified content platform', 'Sanity ad', 240),
(4070, '28:30', 'Node and browser top JS runtimes', 'JS runtimes', 240),
(4071, '29:25', 'Python surpringly tops non-JS languages used', 'Non-JS languages', 240),
(4072, '31:38', 'TypeScript established as top typed JS language', 'TypeScript adoption', 240),
(4073, '32:54', 'Unlikely other typed JS languages will gain traction', 'Other typed languages', 240),
(4074, '35:04', 'PHP second most used non-JS language', 'PHP usage', 240),
(4075, '36:46', 'Axios and Lodash among top JS libraries', 'JS libraries', 240),
(4076, '37:23', 'Moment still popular despite date-fns recommendation', 'Moment popularity', 240),
(4077, '39:43', 'ESLint, Prettier and Babel top utilities', 'JS utilities', 240),
(4078, '40:24', 'Syntax is the top developer podcast', 'Top podcast', 240),
(4079, '41:59', 'Books not a popular learning resource', 'Learning resources', 240),
(4080, '42:51', 'Wes and Scott\'s online courses are popular resources', 'Online courses', 240),
(4081, '43:41', 'Most developers happy with direction of JavaScript', 'JS direction', 240),
(4082, '44:28', 'Managing dependencies is the top JS pain point', 'JS pain points', 240),
(4083, '45:05', 'State management also a frustration', 'State management', 240),
(4084, '46:26', 'Async code lowest on the pain point list', 'Async code', 240),
(4085, '47:41', 'Static typing and standard library top missing features', 'Missing features', 240),
(4086, '48:42', 'Better date tools still needed', 'Date tools', 240),
(4087, '49:45', 'Decorators in limbo', 'Decorators', 240),
(4088, '50:50', 'Vite wins highest satisfaction award', 'Awards', 240),
(4089, '52:02', 'Elm most popular write-in technology', 'Write-ins', 240),
(4090, '53:05', 'FreshBooks sponsor ad', 'FreshBooks ad', 240),
(4091, '54:20', 'Scott\'s sick pick is a LeapFrog toy for his daughter', 'LeapFrog toy', 240),
(4092, '55:13', 'Wes\'s sick pick is a Heartbeat Hot Sauce', 'Hot sauce', 240),
(4093, '56:47', 'Wes plugs his web development courses', 'Wes\'s courses', 240),
(4094, '57:28', 'Scott plugs Level Up Tutorials 10th anniversary', 'Level Up Tutorials', 240),
(4095, '04:12', 'Wes made 10,000 sticker packs with 15 stickers each', '10k packs', 241),
(4096, '05:24', 'Stickers printed cheaply in China by Zig Pak', 'China printing', 241),
(4097, '06:32', 'Designs done by Wes and Indonesian skater kids', 'Designs', 241),
(4098, '07:42', 'DigitalOcean sponsored printing in exchange for pack/sticker', 'Sponsor', 241),
(4099, '11:32', 'Friends helped pack stickers into envelopes', 'Packing help', 241),
(4100, '13:47', 'Sold on Wes\'s course platform, scaled up servers', 'Selling platform', 241),
(4101, '18:17', 'Shipped some via USPS, others through Stallion Express', 'Shipping', 241),
(4102, '22:29', 'International shipping very expensive to some countries', 'Int\'l shipping', 241),
(4103, '26:45', '$5 sticker packs, costs include printing, shipping, fees', 'Costs', 241),
(4104, '28:44', 'Couldn\'t use official TypeScript logo due to legal', 'TS logo issue', 241),
(4105, '00:02', 'Announcing new episode on State of JS survey', 'Episode intro', 242),
(4106, '00:11', 'Overview of topics covered in State of JS survey', 'Survey topics', 242),
(4107, '00:51', 'Sponsor spots', 'Sponsors', 242),
(4108, '01:09', 'Wes and Scott intro', 'Intros', 242),
(4109, '01:59', 'Wes birthday story at cottage', 'Cottage story', 242),
(4110, '05:46', 'Starting review of State of JS survey results', 'Survey review', 242),
(4111, '07:02', 'Survey audience skews towards Syntax listeners', 'Survey audience', 242),
(4112, '08:29', 'Survey salary ranges seem high', 'High salaries', 242),
(4113, '10:23', 'Optional chaining and knowledge coalescing usage', 'Language features', 242),
(4114, '11:20', 'Scott\'s SvelteKit pick of the year', 'SvelteKit pick', 242),
(4115, '12:35', 'Usage of private fields and BigInt', 'More features', 242),
(4116, '14:07', 'Browser API usage results', 'Browser APIs', 242),
(4117, '15:29', 'Web animations and motion.dev', 'Web animations', 242),
(4118, '16:43', 'Intl API usage surprisingly low', 'Intl API', 242),
(4119, '18:20', 'Usage of custom elements and shadow DOM', 'Web components', 242),
(4120, '19:01', 'Page visibility API', 'Page visibility', 242),
(4121, '19:10', 'Broadcast channel API', 'Broadcast channel', 242),
(4122, '20:53', 'Web share API', 'Web share API', 242),
(4123, '21:56', 'Mobile browser support of web share API', 'Web share support', 242),
(4124, '23:11', 'Sponsor break', 'Sponsor', 242),
(4125, '24:30', 'Front-end framework results', 'Front-end frameworks', 242),
(4126, '25:28', 'React awareness always at 100%', 'React awareness', 242),
(4127, '26:00', 'Overview of frameworks', 'Framework overview', 242),
(4128, '28:32', 'Frameworks people would not use again', 'Would not use', 242),
(4129, '29:15', 'Confusion between Angular and AngularJS', 'Angular confusion', 242),
(4130, '31:34', 'New frameworks solving old problems', 'New frameworks', 242),
(4131, '32:06', 'Most are happy with front-end frameworks', 'Happy with front-end', 242),
(4132, '33:30', 'Sponsor break', 'Sponsor', 242),
(4133, '34:11', 'Back-end framework results', 'Back-end frameworks', 242),
(4134, '35:30', 'Rise of frameworks like Next and SvelteKit', 'New back-end frameworks', 242),
(4135, '36:40', 'Moving from static sites to server rendering', 'Server rendering', 242),
(4136, '38:16', 'Less happiness with back-end frameworks', 'Unhappy with back-end', 242),
(4137, '39:33', 'Prediction of improved back-end happiness', 'Back-end prediction', 242),
(4138, '40:25', 'Dislike of Webpack', 'Dislike Webpack', 242),
(4139, '41:51', 'Frequent build tool churn', 'Build tool churn', 242),
(4140, '43:14', 'Meteoric rise of Vite', 'Vite usage', 242),
(4141, '44:30', 'No one is actually using Rome', 'No Rome usage', 242),
(4142, '45:14', 'Prediction of build tool happiness increase', 'Build tool prediction', 242),
(4143, '46:37', 'Sponsor break', 'Sponsor', 242),
(4144, '48:01', 'More survey topics to be covered next episode', 'More topics coming', 242),
(4145, '48:39', 'Best podcast question results', 'Best podcast', 242),
(4146, '49:11', 'Scott\'s Inventing Anna Netflix pick', 'Inventing Anna', 242),
(4147, '51:17', 'Wes\' Everlane uniform sweater pick', 'Everlane sweater', 242),
(4148, '03:44', 'Sentry helps debug under pressure', 'Sentry debugging', 243),
(4149, '05:25', 'Preferred array methods based on input/output types', 'Array methods', 243),
(4150, '09:29', 'forEach vs for...in loops', 'Looping', 243),
(4151, '10:46', 'for...in allows iterating object properties ', 'for...in', 243),
(4152, '16:03', 'hasOwnProperty vs \'in\' operator', 'Object properties', 243),
(4153, '19:41', 'Position vs translate for moving elements', 'CSS moving', 243),
(4154, '23:28', 'Object assign vs object spread', 'Object copying', 243),
(4155, '00:02', 'Podcast intro', 'Intro', 244),
(4156, '00:11', 'Introducing guest Ben Vinegar', 'Guest intro', 244),
(4157, '00:24', 'Guest jokes about sponsor confusion', 'Sponsor joke', 244),
(4158, '00:38', 'Wes and guest discuss guest\'s background', 'Guest background', 244),
(4159, '02:03', 'Guest discusses graphics driver development background', 'Graphics background', 244),
(4160, '02:41', 'Discussion of Epson as a large conglomerate', 'Epson', 244),
(4161, '03:14', 'Guest got into web development after seeing Ajax demos', 'Ajax interest', 244),
(4162, '03:53', 'Guest worked at Disqus on embedded commenting', 'Disqus', 244),
(4163, '04:26', 'Discussion of evolution of web apps and SPAs', 'SPA evolution', 244),
(4164, '04:41', 'Guest joined Sentry as 4th employee in 2015', 'Joined Sentry', 244),
(4165, '05:08', 'Discussion of Sentry\'s ongoing innovation', 'Sentry innovation', 244),
(4166, '05:45', 'Guest discusses not stagnating as a company', 'Avoiding stagnation', 244),
(4167, '06:27', 'Joking about Sentry team laughing at bugs', 'Bug jokes', 244),
(4168, '07:00', 'Distributed tracing helps debug errors across services', 'Distributed tracing', 244),
(4169, '08:16', 'Guest explains distributed tracing', 'Explaining tracing', 244),
(4170, '09:22', 'Discussion of microservices and increased complexity', 'Microservices complex', 244),
(4171, '10:41', 'Tracing connects errors across services', 'Tracing connects', 244),
(4172, '11:17', 'Tracing also helps debug performance issues', 'Tracing performance', 244),
(4173, '12:08', 'Some tracing tools were enterprise focused before', 'Enterprise tracing', 244),
(4174, '12:50', 'AWS X-Ray as a consumer tracing tool', 'AWS X-Ray', 244),
(4175, '13:32', 'Rise of full stack developers using cloud services', 'Full stack cloud', 244),
(4176, '14:30', 'Tools help full stack developers', 'Tools for full stack', 244),
(4177, '14:59', 'Tracing can help debug slowness without errors', 'Tracing slowness', 244),
(4178, '15:27', 'Tracing shifts focus from frontend to backend optimization', 'Backend optimization', 244),
(4179, '15:53', 'Tracing lets you test closer to user experience', 'User focused testing', 244),
(4180, '16:35', 'Tracing links frontend latency to backend services', 'Link frontend and backend', 244),
(4181, '17:02', 'Tracing helps pinpoint performance problems', 'Pinpoint problems', 244),
(4182, '18:31', 'Integration testing versus unit testing discussion', 'Testing discussion', 244),
(4183, '19:21', 'Century sponsor ad read #1', 'Ad #1', 244),
(4184, '20:02', 'Contentful sponsor ad read', 'Ad #2', 244),
(4185, '21:25', 'Discussion of Sentry on Cloudflare Workers', 'Sentry on Cloudflare', 244),
(4186, '22:30', 'Cloudflare also uses Sentry', 'Cloudflare uses Sentry', 244),
(4187, '23:08', 'Discussion of Sentry as open source business model', 'Open source model', 244),
(4188, '24:11', 'Sentry began as open source project', 'Began open source', 244),
(4189, '25:23', 'Discussion of self-hosted vs Sentry-hosted tradeoffs', 'Self-host vs Sentry host', 244),
(4190, '26:35', 'Prefer paying over maintaining old self-hosted apps', 'Pay vs maintain', 244),
(4191, '27:48', 'Sentry uses more complex technologies now', 'Complex technologies', 244),
(4192, '28:32', 'Sentry uses Kafka and ClickHouse', 'Kafka and ClickHouse', 244),
(4193, '29:21', 'Running Sentry yourself requires maintenance', 'Self-host maintenance', 244),
(4194, '30:18', 'Prefer paying than debugging old platforms', 'Pay over debug', 244),
(4195, '31:57', 'Industrialization of software industry', 'Industry industrialization', 244),
(4196, '32:24', 'Better to focus on business than infrastructure', 'Focus on business', 244),
(4197, '34:38', 'Guest discusses Sentry\'s tech stack evolution', 'Stack evolution', 244),
(4198, '35:05', 'Sentry began as Django plugin in 2008-09', 'Django plugin', 244),
(4199, '36:11', 'Original Sentry aggregated exceptions', 'Aggregated exceptions', 244),
(4200, '36:34', 'Sentry stayed simple to remain on Postgres/Redis initially', 'Stayed simple', 244),
(4201, '37:01', 'Frontend rebuilt in React in 2015', 'React rewrite', 244),
(4202, '37:34', 'Converted to TypeScript 1-2 years ago', 'TypeScript rewrite', 244),
(4203, '38:23', 'Discussion of fully converting Sentry frontend to TypeScript', 'TypeScript conversion', 244),
(4204, '39:04', 'Internal process for coordinated changes', 'Coordinated changes', 244),
(4205, '39:50', 'No major refactors during TypeScript conversion', 'No major refactors', 244),
(4206, '40:35', 'Took 1.5 years to convert 100k lines to TypeScript', '1.5 years', 244),
(4207, '41:45', 'Guest says Sentry codebase is open source example', 'Open source example', 244),
(4208, '42:55', 'Big transition to TypeScript', 'Big TypeScript transition', 244),
(4209, '43:39', 'Partial conversions can take a long time', 'Partial conversions long', 244),
(4210, '44:34', 'TypeScript benefits after full conversion', 'TypeScript benefits', 244),
(4211, '45:42', 'Browsers may provide clean JS environment function', 'Clean JS env', 244),
(4212, '46:13', 'Guest was asked weird JS trivia in an interview', 'Weird JS trivia', 244),
(4213, '47:30', 'Guest discovered deleting properties can restore originals', 'Deleting restores originals', 244),
(4214, '47:41', 'Now iframes provide clean JS environment', 'iframes provide clean env', 244),
(4215, '48:09', 'Old libraries like PrototypeJS altered native objects', 'PrototypeJS alterations', 244),
(4216, '49:03', 'Altering native browser APIs was common before', 'API alterations common', 244),
(4217, '49:21', 'Example of library breaking Array.prototype.push', 'Broken array push', 244),
(4218, '50:49', 'Hard to get others to fix their code breaking yours', 'Get others to fix code', 244),
(4219, '51:14', 'Disqus moved to iframes to isolate environment', 'Disqus iframes', 244),
(4220, '51:24', 'Guest was tired of dealing with others\' environments', 'Tired of others\' envs', 244),
(4221, '53:05', 'Sentry sponsor ad read #2', 'Ad #3', 244),
(4222, '54:13', 'Wes\' sick pick - kimchi seasoning powder', 'Kimchi seasoning', 244),
(4223, '55:34', 'Scott\'s sick pick - \'Last Seen\' podcast', 'Last Seen podcast', 244),
(4224, '56:38', 'Guest\'s sick pick - \'Worst Scene Best Scene\' podcast', 'WSBS podcast', 244),
(4225, '58:39', 'Discussion of movie podcast recommendations', 'Movie podcasts', 244),
(4226, '59:37', 'Remote work has changed hiring landscape in Canada', 'Canada hiring', 244),
(4227, '01:00:55', 'Increase in remote workers moving to Canada', 'Remote workers to Canada', 244),
(4228, '01:02:05', 'Prediction of growth of tech companies in Ontario', 'Growth in Ontario', 244),
(4229, '01:03:29', 'Shameless plugs', 'Shameless plugs', 244),
(4230, '01:27', 'Introducing Magic Bell for app notifications', 'Magic Bell', 245),
(4231, '02:50', 'Introducing Sentry for error monitoring', 'Sentry', 245),
(4232, '05:20', 'Fetch coming to Node.js', 'Fetch API', 245),
(4233, '06:05', 'Fetch coming in Node 16 and 18', 'Fetch versions', 245),
(4234, '09:56', 'URL imports coming to Node.js', 'URL imports', 245),
(4235, '10:22', 'Security concerns around URL imports', 'URL security', 245),
(4236, '12:16', 'JSON modules coming to JavaScript', 'JSON modules', 245),
(4237, '13:04', 'Other module assertion types like text', 'Module assertions', 245),
(4238, '15:02', 'node: prefix for Node.js built-ins', 'node prefix', 245),
(4239, '16:30', 'js: prefix proposed for JavaScript built-ins', 'js prefix', 245),
(4240, '18:12', 'Pipeline operator for chaining functions', 'Pipeline operator', 245),
(4241, '21:31', 'Reversible string split proposed', 'String split', 245),
(4242, '23:23', 'JavaScript module blocks proposed', 'Module blocks', 245),
(4243, '25:24', 'String.cooked for parsed template literals', 'String.cooked', 245),
(4244, '26:41', 'BigInt math functions proposed', 'BigInt math', 245),
(4245, '02:24', 'Talks about Webpack and .env for injecting environment variables', 'Webpack', 246),
(4246, '02:35', 'Discusses the newer import.meta feature in JavaScript', 'import.meta', 246),
(4247, '07:27', 'Thoughts on publishing and selling HTML/CSS templates and themes', 'Themes', 246),
(4248, '12:16', 'Debates when to use the menu tag vs the nav tag in HTML', 'HTML tags', 246),
(4249, '18:14', 'Recommends trying multiple browsers like Chrome, Firefox, Safari for development', 'Browsers', 246),
(4250, '20:31', 'Compares TypeScript types to models in databases', 'TypeScript', 246),
(4251, '26:22', 'Where to securely store 2FA recovery codes', '2FA codes', 246),
(4252, '29:35', 'Discusses options for languages similar to JavaScript without large runtimes', 'JavaScript options', 246),
(4253, '33:08', 'Debate between Remix vs SvelteKit frameworks', 'Remix vs SvelteKit', 246),
(4254, '38:22', 'Getting stuck in tutorial purgatory when learning web development', 'Tutorial purgatory', 246),
(4255, '41:43', 'Do frameworks like Next.js abstract away too much complexity?', 'Frameworks', 246),
(4256, '44:22', 'How to keep up with new web technologies', 'New technologies', 246),
(4257, '05:41', 'Wes thinks commenting +1 is not helpful', 'Commenting', 247),
(4258, '07:20', 'RFC stands for Request for Comments', 'RFC meaning', 247),
(4259, '08:45', 'RFCs are places for people to discuss issues and ideas', 'RFC purpose', 247),
(4260, '12:18', 'RFCs show future direction of projects', 'RFC future', 247),
(4261, '12:44', 'Active changes happen in issues and pull requests', 'Active changes', 247),
(4262, '14:31', 'Managing RFC conversations is a skill', 'RFC conversations', 247),
(4263, '17:05', 'Twitter is a good place to learn about new features', 'Twitter updates', 247),
(4264, '00:02', 'Podcast intro', 'Intro', 248),
(4265, '00:11', 'Wes introduces himself and Scott', 'Hosts intro', 248),
(4266, '00:21', 'Wes tries to introduce Wordle and its creator Josh Wardle', 'Wordle intro', 248),
(4267, '00:35', 'Wes provides background on Wordle\'s popularity', 'Wordle context', 248),
(4268, '00:48', 'Wes introduces guest Josh Wardle, creator of Wordle', 'Guest intro', 248),
(4269, '02:11', 'Josh Wardle introduces himself', 'Guest intro', 248),
(4270, '02:29', 'Josh discusses how Wordle went viral through sharing on social media', 'Wordle viral', 248),
(4271, '03:52', 'Discussion of Wordle\'s popularity in New Zealand', 'NZ popularity', 248),
(4272, '04:55', 'Josh outlines Wordle\'s growth timeline', 'Growth timeline', 248),
(4273, '05:15', 'Josh sold Wordle to the New York Times', 'NYT sale', 248),
(4274, '06:17', 'Josh reveals Wordle has over 10 million daily players', '10M players', 248),
(4275, '06:37', 'Reaction to Wordle\'s massive growth', 'Growth reaction', 248),
(4276, '07:22', 'Josh discusses his background in art and product management', 'Josh background', 248),
(4277, '08:15', 'Josh worked at Reddit when it was still small', 'Reddit job', 248),
(4278, '09:27', 'Josh discusses Reddit April Fools projects', 'Reddit pranks', 248),
(4279, '10:27', 'Value of understanding tech details as product manager', 'PM skills', 248),
(4280, '11:02', 'Josh transitioned into software engineering', 'Career change', 248),
(4281, '12:39', 'Frameworks hide complexity of web development', 'Frameworks', 248),
(4282, '13:59', 'Benefits of learning web fundamentals before frameworks', 'Learn fundamentals', 248),
(4283, '14:34', 'Most developers use tools built by others', 'Using tools', 248),
(4284, '15:09', 'Browser APIs vs third party libraries', 'Browser APIs', 248),
(4285, '15:40', 'Focusing on end goal vs understanding details', 'Focus on goals', 248),
(4286, '18:21', 'Wordle uses vanilla JS and web components', 'Vanilla JS', 248),
(4287, '19:19', 'Overview of web components', 'Web components', 248),
(4288, '20:23', 'Wes notices Wordle\'s custom HTML elements', 'Custom elements', 248),
(4289, '20:45', 'Keyboard is its own web component', 'Keyboard component', 248),
(4290, '21:13', 'Josh used low-level web component APIs', 'Low-level APIs', 248),
(4291, '22:29', 'Scott asks about Josh\'s experience with web components', 'WC experience', 248),
(4292, '22:57', 'Josh would consider a wrapper library next time', 'Wrapper library', 248),
(4293, '23:51', 'Learning fundamentals was valuable', 'Learned fundamentals', 248),
(4294, '24:11', 'Wordle frontend is only 250KB', 'Small size', 248),
(4295, '25:08', 'Josh built Wordle with Rollup', 'Rollup', 248),
(4296, '25:37', 'Most of bundle is word list and Lodash merge', 'Bundle contents', 248),
(4297, '26:18', 'Wes suggests smaller Lodash merge alternative', 'Lodash alternatives', 248),
(4298, '27:08', 'No backend aided viral spread', 'No backend', 248),
(4299, '28:14', 'Optimizations for going viral', 'Viral optimizations', 248),
(4300, '28:30', 'Low hosting costs despite huge traffic', 'Hosting costs', 248),
(4301, '29:44', 'Anecdote about email cost per letter', 'Email costs', 248),
(4302, '30:07', 'Local storage used for stats and streaks', 'Local storage', 248),
(4303, '30:25', 'No logins or accounts', 'No accounts', 248),
(4304, '30:56', 'Keeping it simple aligned with Josh\'s goals', 'Simplicity', 248),
(4305, '31:23', 'Monetization would introduce complexity', 'No ads', 248),
(4306, '31:37', 'Josh wasn\'t trying to build a business', 'Not a business', 248),
(4307, '32:26', 'Example of Wordle copycats motivated NYT sale', 'Copycats', 248),
(4308, '33:01', 'Scott suggests encrypting word list', 'Encrypt word list', 248),
(4309, '33:09', 'Josh explains encryption algorithm', 'Encryption algorithm', 248),
(4310, '33:52', 'Wes accidentally discovered upcoming words', 'Spoiled words', 248),
(4311, '34:27', 'Josh randomized full word list', 'Random words', 248),
(4312, '34:56', 'Josh plays Wordle daily without knowing words', 'Josh plays', 248),
(4313, '35:34', 'Discussion of occasional problematic words', 'Bad words', 248),
(4314, '36:26', 'Analysis of moist as a word', 'Moist analysis', 248),
(4315, '37:27', 'How does Josh create viral hits?', 'Viral hits', 248),
(4316, '38:37', 'Josh focuses on serving humans', 'Serve humans', 248),
(4317, '40:12', 'Intuition versus calculated decisions', 'Intuition', 248),
(4318, '40:36', 'Authenticity enables viral hits', 'Authenticity', 248),
(4319, '41:18', 'NYT approached Josh about Wordle', 'NYT reached out', 248),
(4320, '42:12', 'Coping with copycats was draining', 'Copycats draining', 248),
(4321, '43:01', 'Monetization wasn\'t a priority', 'No priority', 248),
(4322, '43:53', 'Deal process was complicated', 'Complicated deals', 248),
(4323, '44:10', 'Josh isn\'t business-oriented', 'Not business-minded', 248),
(4324, '44:31', 'Authenticity enabled viral success', 'Authenticity wins', 248),
(4325, '45:23', 'Wes jokes about invoicing NYT', 'Invoicing jokes', 248),
(4326, '45:38', 'Wes introduces sponsor FreshBooks', 'Freshbooks ad', 248),
(4327, '46:27', 'Josh kept his personal domain', 'Kept domain', 248),
(4328, '47:53', 'Redirecting between domains complex', 'Redirects complex', 248),
(4329, '50:08', 'Maintaining user data across domains', 'Cross-domain data', 248),
(4330, '50:41', 'Wes suggests cross-domain communication', 'Cross-domain tips', 248),
(4331, '52:01', 'Security policies may block cross-domain requests', 'Security policies', 248),
(4332, '52:22', 'Will NYT expand Wordle features?', 'New features?', 248),
(4333, '52:39', 'Josh considered adding an archive', 'Archive idea', 248),
(4334, '53:09', 'Josh slowed feature development', 'Slow features', 248),
(4335, '54:22', 'Josh varies his first word each day', 'First word', 248),
(4336, '55:17', 'Analysis of best statistical first words', 'First word stats', 248),
(4337, '55:42', 'Game appeals to different skill levels', 'Universal appeal', 248),
(4338, '56:33', 'Importance of UI juice for engagement', 'UI juice', 248),
(4339, '57:36', 'Real-world changes aren\'t instantaneous', 'Gradual changes', 248),
(4340, '58:13', 'Animations make Wordle feel responsive', 'Responsive animations', 248),
(4341, '58:48', 'CSS animations add juice', 'CSS animations', 248),
(4342, '59:14', 'Hosts transition to picks section', 'Picks intro', 248),
(4343, '59:47', 'Josh picks identical Tupperware containers', 'Tupperware pick', 248),
(4344, '01:00:51', 'Scott picks giant tub of Epsom salt', 'Salt pick', 248),
(4345, '01:01:29', 'Wes picks Instant Pot air fryer', 'Fryer pick', 248),
(4346, '01:02:16', 'Scott plugs Level Up Tutorials', 'Level Up plug', 248),
(4347, '01:03:15', 'Wes plugs his courses', 'Wes courses plug', 248),
(4348, '01:03:29', 'Hosts thank guest and end show', 'Show end', 248),
(4349, '02:33', 'Linode overview', 'Linode', 249),
(4350, '05:20', 'Recipe Puppy API issues', 'Recipe API', 249),
(4351, '09:51', 'Disk access pros and cons', 'Disk access', 249),
(4352, '14:10', 'Serverless functions overview', 'Serverless', 249),
(4353, '18:03', 'No long running processes', 'Long processes', 249),
(4354, '21:19', 'Cloudflare Workers use own JS', 'Cloudflare JS', 249),
(4355, '23:47', 'JSDOM doesn\'t work in Cloudflare', 'JSDOM issue', 249),
(4356, '26:55', 'Separate code into lib folder', 'Code separation', 249),
(4357, '00:12', 'Scott and Wes introduce Syntax Highlight episode', 'Intro', 250),
(4358, '00:49', 'Wes tries speaking in Gen Z slang', 'Gen Z slang', 250),
(4359, '02:20', 'Sponsor spot for Linode', 'Sponsor', 250),
(4360, '04:07', 'How to submit portfolio sites for review', 'Submission tips', 250),
(4361, '05:35', 'Review of Harry Lee\'s portfolio site', 'Site review', 250),
(4362, '15:11', 'Sponsor spot for LogRocket', 'Sponsor', 250),
(4363, '18:23', 'Review of Austin Baird\'s portfolio site', 'Site review', 250),
(4364, '21:29', 'Review of Oggen Boss Jannec\'s portfolio site', 'Site review', 250),
(4365, '28:20', 'Review of next portfolio site', 'Site review', 250),
(4366, '37:13', 'Review of Jack\'s portfolio site', 'Site review', 250),
(4367, '42:05', 'Review of Inarugundi\'s portfolio site', 'Site review', 250),
(4368, '48:28', 'Sponsor spot for Tabnine', 'Sponsor', 250),
(4369, '50:45', 'Review of Cyril\'s interactive Windows portfolio', 'Site review', 250),
(4370, '55:02', 'Scott\'s sick pick - The Alpinist documentary', 'Sick pick', 250),
(4371, '56:23', 'Wes\' sick pick - Instant Pot air fryer lid', 'Sick pick', 250),
(4372, '02:01', 'Sentry helps find errors', 'Sentry', 251),
(4373, '02:45', 'Sentry prevented a regression', 'Sentry regression', 251),
(4374, '03:19', 'Sanity manages content', 'Sanity', 251),
(4375, '04:49', 'Inspired by a Reddit post', 'Reddit post', 251),
(4376, '05:29', 'Junior dev unhappy with senior\'s code', 'Junior unhappy', 251),
(4377, '06:17', 'Easy to get wrapped up in ego', 'Developer ego', 251),
(4378, '07:07', 'Shared goals like sports teams', 'Shared goals', 251),
(4379, '08:43', 'No grudges against teammates', 'No grudges', 251),
(4380, '09:14', 'Seen developer personalities change', 'Personalities change', 251),
(4381, '10:57', 'Don\'t take criticism personally', 'Don\'t take criticism personally', 251),
(4382, '12:39', 'Juniors should listen and discuss respectfully', 'Juniors listen respectfully', 251),
(4383, '13:12', 'Discuss other approaches without aggression', 'Discuss respectfully', 251),
(4384, '14:02', 'Be aware how messages are interpreted', 'Message tone', 251),
(4385, '15:30', 'Ask for clarity on requirements', 'Ask for clarity', 251),
(4386, '16:47', 'Code reviews should be egoless', 'Egoless code reviews', 251),
(4387, '18:13', 'Really listen to teammates', 'Listen to teammates', 251),
(4388, '19:08', 'Don\'t insult people through their code', 'Don\'t insult code', 251),
(4389, '19:36', 'Teach and learn from each other', 'Teach and learn', 251),
(4390, '20:24', 'Celebrate wins as a team', 'Celebrate wins', 251),
(4391, '00:11', 'Intro to monorepos', 'Monorepos', 252),
(4392, '00:27', 'What a monorepo is', 'Monorepo definition', 252),
(4393, '00:49', 'Sponsors', 'Sponsors', 252),
(4394, '01:23', 'Scott had a rough morning', 'Rough morning', 252),
(4395, '02:05', 'Wes\'s monorepo setup', 'Wes monorepo', 252),
(4396, '03:15', 'Scott\'s monorepo setup', 'Scott monorepo', 252),
(4397, '05:05', 'Git submodules for public packages', 'Git submodules', 252),
(4398, '06:01', 'Issues with npm workspaces', 'npm issues', 252),
(4399, '07:17', 'Benefits of monorepos', 'Monorepo benefits', 252),
(4400, '08:08', 'Managing dependencies', 'Dependencies', 252),
(4401, '09:39', 'Google and Facebook monorepos', 'Big tech repos', 252),
(4402, '11:33', 'Shared dependencies', 'Shared deps', 252),
(4403, '13:13', 'Switching to pnpm', 'pnpm', 252),
(4404, '14:40', 'Issues with npm workspaces', 'npm issues', 252),
(4405, '16:29', 'Sponsor - Kontent', 'Sponsor', 252),
(4406, '17:42', 'Back to monorepos', 'Monorepos', 252),
(4407, '18:53', 'Managing packages and dependencies', 'Packages & deps', 252),
(4408, '23:09', 'Referencing local packages', 'Local packages', 252),
(4409, '24:19', 'Running commands on workspaces', 'Workspace commands', 252),
(4410, '27:02', 'Shared dependencies like React', 'Shared deps', 252),
(4411, '27:35', 'Upcoming show on updating dependencies', 'Dependency updating', 252),
(4412, '30:21', 'Introduction to Turborepo', 'Turborepo intro', 252),
(4413, '31:50', 'Turborepo build orchestration', 'Turborepo builds', 252),
(4414, '33:56', 'Turborepo vs pnpm workspaces', 'Turborepo vs pnpm', 252),
(4415, '36:10', 'Turborepo caching and incremental builds', 'Turborepo caching', 252),
(4416, '38:25', 'Turborepo cloud caching', 'Cloud caching', 252),
(4417, '39:29', 'Turborepo doesn\'t handle dependencies', 'No deps', 252),
(4418, '40:03', 'Introduction to NX', 'NX intro', 252),
(4419, '41:34', 'NX plugins for frameworks', 'NX plugins', 252),
(4420, '45:26', 'Wes will try NX', 'Try NX', 252),
(4421, '47:17', 'Lerna for monorepos', 'Lerna', 252),
(4422, '48:11', 'Scott\'s experience with Rush.js', 'Rush.js', 252),
(4423, '49:42', 'Rush.js seems like a MS tool', 'MS tool', 252),
(4424, '51:02', 'VS Code still uses Gulp', 'VS Code Gulp', 252),
(4425, '51:10', 'Old Gulp tutorials still popular', 'Old Gulp popular', 252),
(4426, '52:11', 'Summary of monorepo tools', 'Monorepo summary', 252),
(4427, '53:02', 'Wes sick pick: Tineco vacuum', 'Tineco vacuum', 252),
(4428, '55:23', 'Scott sick pick: Wyze cameras', 'Wyze cameras', 252),
(4429, '57:24', 'Cheap micro SD cards for cameras', 'Cheap SD cards', 252),
(4430, '59:21', 'Shameless plugs', 'Plugs', 252),
(4431, '00:48', 'LogRocket sponsor', 'sponsor', 253),
(4432, '01:19', 'Magic Bell sponsor', 'sponsor', 253),
(4433, '03:33', 'Introduction to updating dependencies', 'intro', 253),
(4434, '04:02', 'Definition of dependencies', 'define', 253),
(4435, '04:26', 'Wes updated multiple projects', 'updated', 253),
(4436, '05:31', 'Tools for checking updates', 'tools', 253),
(4437, '06:07', 'Scott\'s update workflow', 'workflow', 253),
(4438, '07:12', 'Wes\'s update workflow', 'workflow', 253),
(4439, '08:58', 'Update patch versions', 'patch', 253),
(4440, '09:13', 'Update minor versions', 'minor', 253),
(4441, '09:59', 'Update major versions', 'major', 253),
(4442, '10:35', 'Deprecation before breaking changes', 'deprecate', 253),
(4443, '12:27', 'Check changelogs for breaking changes', 'changelog', 253),
(4444, '13:12', 'Search codebase for breaking changes', 'search', 253),
(4445, '14:07', 'Commit after each update', 'commit', 253),
(4446, '14:30', 'TypeScript prevents breaking changes', 'typescript', 253),
(4447, '14:55', 'Update other dependencies', 'other', 253),
(4448, '15:27', 'Regenerate API keys if needed', 'api keys', 253),
(4449, '15:45', 'Test thoroughly after updating', 'test', 253),
(4450, '16:19', 'Monitor errors after deploying', 'monitor', 253),
(4451, '16:50', 'Fix issues going forward', 'fix forward', 253),
(4452, '17:10', 'Hope for the best', 'hope', 253),
(4453, '00:33', 'Pick coding focus, soft skills focus, and random skill for beginner, intermediate, and advanced devs', 'Topics', 254),
(4454, '02:37', 'Semantic HTML knowledge makes you stand out in interviews', 'Beginner coding', 254),
(4455, '07:42', 'Get good at working with data in JavaScript', 'Beginner coding', 254),
(4456, '09:02', 'Practice writing good GitHub issues and PRs', 'Beginner soft skills', 254),
(4457, '11:46', 'Get good at emailing busy people concisely', 'Beginner soft skills', 254),
(4458, '14:05', 'Make something animated with CSS', 'Beginner random', 254),
(4459, '16:23', 'Build a full stack contact form', 'Beginner random', 254),
(4460, '19:04', 'Learn CSS variables deeply', 'Intermediate coding', 254),
(4461, '23:09', 'Learn server side fundamentals', 'Intermediate coding', 254),
(4462, '24:30', 'Improve meeting and client skills', 'Intermediate soft skills', 254),
(4463, '28:48', 'Learn to organize chaos in repos', 'Intermediate soft skills', 254),
(4464, '30:41', 'Make something animated with JavaScript', 'Intermediate random', 254),
(4465, '31:43', 'Write a bot', 'Intermediate random', 254),
(4466, '35:05', 'Write CI/CD workflows', 'Advanced coding', 254),
(4467, '38:00', 'Learn advanced TypeScript types', 'Advanced coding', 254),
(4468, '38:39', 'Teach colleagues at work', 'Advanced soft skills', 254),
(4469, '40:00', 'Speak at a conference', 'Advanced soft skills', 254),
(4470, '41:09', 'Make something in 3D', 'Advanced random', 254),
(4471, '05:26', 'Negative margins are super useful CSS hacks', 'Margins', 255),
(4472, '07:55', 'Not passing radix to parseInt rarely causes issues', 'parseInt', 255),
(4473, '10:45', 'Centering with position:absolute and translate is handy', 'Positioning', 255),
(4474, '13:37', 'Nonstandard HTML elements are technically valid', 'HTML elements', 255),
(4475, '17:27', 'button must have a type is unnecessary ', 'Button types', 255),
(4476, '19:01', 'CSS border triangles are simple shape hacks', 'CSS triangles', 255),
(4477, '21:04', 'Rel noopener on blank targets not needed now', 'Rel noopener', 255),
(4478, '22:20', 'Inline styles can be useful in components', 'Inline styles', 255),
(4479, '00:57', 'Syntax is sponsored by Prismic, Retool, and LogRocket', 'Sponsors', 256),
(4480, '02:50', 'First question asks how to protect images on a website', 'Image protection', 256),
(4481, '07:26', 'Should beginners learn TypeScript now or focus on JavaScript first?', 'Learn TypeScript', 256),
(4482, '13:32', 'When to add TypeScript - after gaining proficiency in JavaScript', 'Add TypeScript', 256),
(4483, '21:17', 'How to commit to learning one thing when other topics distract you', 'Learning focus', 256),
(4484, '26:32', 'Best backend language to learn after frontend is Node.js', 'Backend language', 256),
(4485, '28:17', 'Do Svelte components support media queries?', 'Svelte media queries', 256),
(4486, '30:01', 'New developers may be intimidated implementing auth or payments', 'New dev intimidation', 256),
(4487, '33:11', 'Use a tool like LogRocket to investigate errors in intimidating parts of code', 'Investigate errors', 256),
(4488, '34:14', 'Tips for working with team members in different time zones', 'Time zones', 256),
(4489, '43:12', 'How to introduce Prettier to a large project without losing git history', 'Prettier', 256),
(4490, '49:31', 'Thoughts on monorepos - can be very useful', 'Monorepos', 256),
(4491, '53:05', 'Retool allows you to build internal tools quickly', 'Internal tools', 256),
(4492, '02:20', 'Remix delivers on hype with fast modern smooth UX, server rendering, and colocated data fetching', 'Remix overview', 257),
(4493, '03:10', 'Sentry logs errors and exceptions, integrates with GitHub, and provides user feedback tools', 'Sentry ad', 257),
(4494, '04:50', 'Sanity is a structured content platform that makes devs, marketers, and lawyers happy', 'Sanity ad', 257),
(4495, '08:13', 'Remix is fast, smooth, and provides server side SEO benefits', 'Remix benefits', 257),
(4496, '09:48', 'Remix understands where data is fetched so it can parallelize requests', 'Parallel data fetching', 257),
(4497, '11:17', 'Loaders in Remix make data available via React hooks instead of props', 'Loaders', 257),
(4498, '14:09', 'Remix simplifies complexity of data fetching and rendering', 'Simplifies complexity', 257),
(4499, '15:29', 'Actions handle POST, PUT, PATCH, DELETE requests in Remix', 'HTTP verbs', 257),
(4500, '18:24', 'Remix exports like meta and headers handle those concerns cleanly', 'Meta and headers', 257),
(4501, '19:49', 'Catch boundaries handle thrown errors, error boundaries handle React errors', 'Boundaries', 257);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(4502, '23:28', 'Remix has nested routes and layouts', 'Nested routes', 257),
(4503, '25:20', 'TypeScript support is excellent in Remix', 'TypeScript', 257),
(4504, '26:18', 'Changing deploy target in Remix requires config tweaks', 'Deployment', 257),
(4505, '29:30', 'Once conventions learned, Remix isn\'t too hard to use', 'Learning curve', 257),
(4506, '00:16', 'Wes and Scott predictions for web dev in 2022', '2022 predictions', 258),
(4507, '00:34', 'Svelte popularity prediction', 'Svelte', 258),
(4508, '01:25', 'Svelte at Vercel impact', 'Svelte at Vercel', 258),
(4509, '02:30', 'Next.js future opportunities', 'Next.js', 258),
(4510, '03:59', 'Next.js data layer possibilities', 'Data layer', 258),
(4511, '04:16', 'Next.js baked in data wished for', 'Baked in data', 258),
(4512, '04:38', 'Other frameworks adding data layers', 'Data layers', 258),
(4513, '05:08', 'Cloudflare as competitor to AWS', 'Cloudflare vs AWS', 258),
(4514, '06:10', 'Server components in SvelteKit wished for', 'SvelteKit', 258),
(4515, '07:02', 'Web component popularity prediction', 'Web components', 258),
(4516, '08:13', 'Easier web component authoring needed', 'Authoring web components', 258),
(4517, '09:15', 'Open UI web component project', 'Open UI', 258),
(4518, '10:43', 'Next.js TypeScript support difficulties', 'Next.js TypeScript', 258),
(4519, '11:50', 'Rust programming language prediction', 'Rust language', 258),
(4520, '12:32', 'Rust and WebAssembly', 'Rust and WASM', 258),
(4521, '13:17', 'Rust for performance gains', 'Rust performance', 258),
(4522, '14:15', 'Rust language challenges', 'Rust challenges', 258),
(4523, '15:18', 'Tailwind CSS prediction', 'Tailwind CSS', 258),
(4524, '16:08', 'Subatomic CSS as alternative', 'Subatomic CSS', 258),
(4525, '17:18', 'Serverless functions prediction', 'Serverless', 258),
(4526, '18:52', 'Cloudflare services growing', 'Cloudflare', 258),
(4527, '19:47', 'Stripe checkout APIs', 'Stripe APIs', 258),
(4528, '20:49', 'Braintree lacking updates', 'Braintree', 258),
(4529, '21:12', 'Open Props as Tailwind alternative', 'Open Props', 258),
(4530, '22:32', 'Next generation CSS methodologies', 'CSS', 258),
(4531, '23:53', 'CSS spec updates', 'CSS specs', 258),
(4532, '25:39', 'New terminal shells', 'Terminal shells', 258),
(4533, '26:53', 'Cross shell customization difficulties', 'Shell customization', 258),
(4534, '28:01', 'Hashnode for developer blogging', 'Hashnode', 258),
(4535, '29:54', 'Checkout platforms updates', 'Checkout platforms', 258),
(4536, '30:21', 'CSS container queries', 'Container queries', 258),
(4537, '31:00', 'More CSS functions wished for', 'CSS functions', 258),
(4538, '31:35', 'CSS subgrid hopes', 'CSS subgrid', 258),
(4539, '32:01', 'GraphQL improvements', 'GraphQL', 258),
(4540, '33:02', 'More GraphQL servers', 'GraphQL servers', 258),
(4541, '33:36', 'GraphQL developer tools', 'GraphQL tools', 258),
(4542, '34:15', 'Deno future', 'Deno', 258),
(4543, '35:43', 'Deno being replaced by Node', 'Deno vs Node', 258),
(4544, '36:15', 'First party Node and TypeScript', 'Node TypeScript', 258),
(4545, '37:22', 'TypeScript in Node difficulties', 'Node TypeScript', 258),
(4546, '38:00', 'Node TypeScript improvements', 'Node TypeScript', 258),
(4547, '39:35', 'TypeScript interfaces and types', 'TypeScript types', 258),
(4548, '40:43', 'Complex TypeScript types', 'Complex TypeScript', 258),
(4549, '41:13', 'TypeScript abstraction', 'TypeScript abstraction', 258),
(4550, '42:16', 'TypeScript generics difficulties', 'TypeScript generics', 258),
(4551, '43:00', 'Obtuse TypeScript types', 'Obtuse TypeScript', 258),
(4552, '43:34', 'Appreciation for advanced TypeScript', 'Appreciate TypeScript', 258),
(4553, '43:56', 'Server side frameworks comeback', 'Server frameworks', 258),
(4554, '44:46', 'Server side security benefits', 'Server security', 258),
(4555, '45:25', 'FreshBooks accounting software', 'FreshBooks', 258),
(4556, '46:12', 'Payment platforms updates', 'Payment platforms', 258),
(4557, '47:05', 'Wise multi-currency accounts', 'Wise banking', 258),
(4558, '48:32', 'Wise benefits', 'Wise benefits', 258),
(4559, '49:54', 'Braintree offered over Stripe', 'Braintree vs Stripe', 258),
(4560, '51:07', 'Stripe well-rounded offerings', 'Stripe offerings', 258),
(4561, '51:35', 'Temporal API hopes', 'Temporal API', 258),
(4562, '53:18', 'Remote development growth', 'Remote dev', 258),
(4563, '54:20', 'Remote dev on iPads', 'iPad coding', 258),
(4564, '00:27', 'Intro to JavaScript one-liners', 'Intro', 259),
(4565, '02:21', 'Sponsor - Sentry', 'Sponsor', 259),
(4566, '04:02', 'One-liners from Twitter', 'One-liners', 259),
(4567, '05:14', 'Unique ID generation', 'Unique ID', 259),
(4568, '06:03', 'Random color generation', 'Random color', 259),
(4569, '07:33', 'Labeled console.logs', 'Labeled logs', 259),
(4570, '08:31', 'Make entire page editable', 'Editable page', 259),
(4571, '10:16', 'Get today\'s date with Temporal', 'Temporal date', 259),
(4572, '11:52', 'Console.log in implicit return', 'Log in return', 259),
(4573, '13:32', 'Destructuring to remove props', 'Remove props', 259),
(4574, '15:33', 'PHP-style debugging in JS', 'PHP debugging', 259),
(4575, '16:41', 'Destructure first/last array items', 'First/last items', 259),
(4576, '17:44', 'Speed up audio/video', 'Faster playback', 259),
(4577, '19:45', 'Pause execution with sleep()', 'Pause execution', 259),
(4578, '21:24', 'If statements without brackets', 'If without brackets', 259),
(4579, '00:38', '2021 web dev highlights', '2021 highlights', 260),
(4580, '02:43', '104 Syntax episodes in 2021', '104 episodes', 260),
(4581, '03:03', 'Re-released advanced React course', 'React course', 260),
(4582, '03:25', 'Launched JavaScript T-shirts site', 'T-shirts site', 260),
(4583, '03:47', 'Wrote vaccine availability bot', 'Vaccine bot', 260),
(4584, '04:01', 'Worked on big TypeScript course', 'TypeScript course', 260),
(4585, '04:24', 'Rewrote video player', 'Video player', 260),
(4586, '04:30', 'Added course notes', 'Course notes', 260),
(4587, '04:59', 'Printed Syntax stickers', 'Syntax stickers', 260),
(4588, '05:50', 'Wes moved houses', 'Wes moved', 260),
(4589, '06:19', 'Rewrote frontend in SvelteKit', 'SvelteKit rewrite', 260),
(4590, '06:56', 'Rebuilding admin section', 'Admin rebuild', 260),
(4591, '07:35', 'Rewrote video uploader with Mux', 'Video uploader', 260),
(4592, '00:21', 'Wes and Scott introduce snackluck episode', 'Intro', 261),
(4593, '00:36', 'Snackluck explained', 'Snackluck', 261),
(4594, '00:56', 'Wes talks about doing snacklucks and potlucks', 'Wes snacklucks', 261),
(4595, '02:01', 'Scott met Diplo at work one time', 'Scott met Diplo', 261),
(4596, '03:16', 'Sponsor - Sanity', 'Sponsor 1', 261),
(4597, '04:25', 'Sponsor - LogRocket', 'Sponsor 2', 261),
(4598, '05:11', 'Question about package-lock.json', 'Package lock', 261),
(4599, '08:31', 'Question on why Syntax doesn\'t talk much about Angular', 'Angular question', 261),
(4600, '11:59', 'Wes and Scott use a variety of frameworks', 'Framework diversity', 261),
(4601, '12:25', 'Question on keeping NPM packages up to date', 'NPM updates', 261),
(4602, '15:29', 'Tips for updating packages - use NCU, pnpm, yarn', 'Update tips', 261),
(4603, '17:11', 'Question on staying motivated as a non-beginner', 'Non-beginner motivation', 261),
(4604, '19:51', 'Try learning something new and fun like 3D libraries', 'Learn new things', 261),
(4605, '21:05', 'Question on how in-flight entertainment systems work', 'In-flight media', 261),
(4606, '23:39', 'Wes uses a NAS with Plex for downloaded kid\'s shows', 'Wes\' NAS', 261),
(4607, '26:17', 'Scott uses NAS for kung fu movies', 'Scott\'s NAS', 261),
(4608, '29:37', 'Outro and sponsor mentions', 'Outro', 261),
(4609, '00:27', 'Introduction of guests Pauline Narvas and Jeff Lee Huntley who work at Gitpod', 'Guest intro', 262),
(4610, '01:02', 'Discussion about coding on iPads and mobile devices', 'Coding on iPad', 262),
(4611, '03:53', 'Gitpod allows developers to code from any browser without needing a high-spec computer', 'Gitpod overview', 262),
(4612, '05:06', 'Gitpod runs developers\' code in cloud-hosted Docker containers', 'Cloud containers', 262),
(4613, '08:34', 'Pauline helped a Gitpod user debug their workspace on her phone while traveling', 'Mobile workspace', 262),
(4614, '11:00', 'Wes and Scott ask Jeff and Pauline to explain what Kubernetes is', 'Kubernetes explanation', 262),
(4615, '13:14', 'Gitpod builds Gitpod using Gitpod with Golang and TypeScript', 'Gitpod tech stack', 262),
(4616, '18:27', 'Linode sponsors segment', 'Ad break', 262),
(4617, '19:08', 'Discussion about the types of developers using Gitpod', 'Gitpod users', 262),
(4618, '25:06', 'Explanation of Gitpod\'s collaboration and workspace sharing features', 'Workspace sharing', 262),
(4619, '33:24', 'LogRocket sponsors segment', 'Ad break', 262),
(4620, '34:19', 'Discussion about living in a van and working remotely', 'Remote work', 262),
(4621, '40:44', 'Jeff discusses NFTs, storing data on blockchains, and creating the NFT Bay', 'NFT discussion', 262),
(4622, '45:29', 'Thoughts on blockchain technology and the concept of web3', 'Web3 discussion', 262),
(4623, '50:06', 'Freshbooks sponsors segment', 'Ad break', 262),
(4624, '50:18', 'Continued discussion about NFTs and blockchain technology', 'More NFTs', 262),
(4625, '51:35', 'Sharing some \"sick picks\" - product recommendations', 'Sick picks segment', 262),
(4626, '59:19', 'Shameless plugs for podcast hosts\' products', 'Shameless plugs', 262),
(4627, '02:33', 'Prismic sponsors the show', 'Sponsors', 263),
(4628, '02:44', 'Sentry sponsors the show', 'Sponsors', 263),
(4629, '03:30', 'Gatsby 4 overview', 'Gatsby 4', 263),
(4630, '04:24', 'Node version requirements', 'Requirements', 263),
(4631, '05:24', 'New rendering options in Gatsby 4', 'Rendering', 263),
(4632, '06:14', 'Static rendering', 'Static', 263),
(4633, '06:47', 'Build times can get long', 'Build times', 263),
(4634, '07:14', 'Deferred static generation', 'DSG', 263),
(4635, '08:48', 'Pages generate on request', 'On request', 263),
(4636, '09:00', 'Defer option for dynamic pages', 'Defer option', 263),
(4637, '09:59', 'SSR - server side rendering', 'SSR', 263),
(4638, '10:22', 'Access GraphQL at build time', 'GraphQL', 263),
(4639, '10:49', 'Caching with SSR', 'Caching', 263),
(4640, '11:59', 'Authenticated data challenges', 'Auth data', 263),
(4641, '12:40', 'Module federation possibilities', 'Federation', 263),
(4642, '13:18', 'Next.js and Gatsby feature parity', 'Parity', 263),
(4643, '15:48', 'Parallel queries for performance', 'Parallel', 263),
(4644, '16:29', 'New data sync for live updates', 'Data sync', 263),
(4645, '16:58', 'Gatsby admin deprecated', 'Deprecated', 263),
(4646, '18:16', 'What\'s next for Gatsby', 'What\'s next', 263),
(4647, '02:33', 'Google Chrome measuring user experience beyond page load', 'Chrome UX', 264),
(4648, '03:13', 'Lighthouse scores useful but don\'t blindly follow', 'Lighthouse tips', 264),
(4649, '04:13', 'Figma uses Rust via WebAssembly for performance', 'Figma + Rust', 264),
(4650, '05:03', 'Tools over rules for performance metrics', 'Tools over rules', 264),
(4651, '08:16', 'Naming functions vs boolean variables', 'Naming booleans', 264),
(4652, '10:20', 'Enums vs string unions in TypeScript', 'Enums vs unions', 264),
(4653, '13:19', 'Enums useful for populating dropdowns', 'Enum dropdowns', 264),
(4654, '14:03', 'WebAssembly allows other languages in browser', 'Wasm overview', 264),
(4655, '15:13', 'Figma uses C++ via WebAssembly', 'Figma + C++', 264),
(4656, '24:27', 'GraphQL allows batching requests', 'GraphQL batching', 264),
(4657, '25:21', 'Throttling/debouncing requests', 'Throttling requests', 264),
(4658, '34:51', '302 redirects change POST to GET', '302 redirects', 264),
(4659, '35:04', '307 redirects maintain verb', '307 redirects', 264),
(4660, '35:18', '301 redirects are permanent', '301 redirects', 264),
(4661, '42:52', 'Conventional commits for organized messages', 'Conventional commits', 264),
(4662, '50:34', 'REST most popular web data transfer', 'REST overview', 264),
(4663, '51:25', 'GraphQL describes data needs in requests', 'GraphQL overview', 264),
(4664, '51:48', 'RPC/gRPC good for low power situations', 'RPC for IoT', 264),
(4665, '02:33', 'replacing water pipes', 'pipes', 265),
(4666, '04:07', 'covering water shutoff valve', 'valve', 265),
(4667, '08:24', 'local state as variable', 'state', 265),
(4668, '12:31', 'custom state update functions', 'functions', 265),
(4669, '15:12', 'live reactive variables', 'reactive', 265),
(4670, '17:02', 'global state with stores', 'stores', 265),
(4671, '20:49', 'conditional rendering', 'conditional', 265),
(4672, '25:00', 'input binding', 'binding', 265),
(4673, '30:12', 'child components with slots', 'slots', 265),
(4674, '00:31', 'Podcast sponsored by LogRocket, Bryndum, and Linode', 'Sponsors', 266),
(4675, '01:09', 'Guest Ant Rogen introduces himself and his background in industrial automation', 'Guest intro', 266),
(4676, '02:33', 'Ant worked at Nissan developing head units with JavaScript', 'Nissan head units', 266),
(4677, '05:25', 'Cars communicate over CAN bus which can be read with OBD-II dongles', 'CAN bus', 266),
(4678, '07:17', 'Web tech visualizing factory data by interfacing with PLCs', 'Visualizing factories', 266),
(4679, '09:10', 'Car head units are outdated compared to capabilities of web tech', 'Outdated head units', 266),
(4680, '11:41', 'Some car head units are now just Android tablets or web browsers', 'New head units', 266),
(4681, '14:02', 'Core car systems are separate from infotainment systems', 'Core vs infotainment', 266),
(4682, '16:09', 'Node-RED for interfacing between web and PLCs', 'Node-RED', 266),
(4683, '18:48', 'Risks of crashing factory systems while testing', 'Crash risks', 266),
(4684, '21:28', 'PLCs used widely from traffic lights to nuclear plants', 'PLC ubiquity', 266),
(4685, '23:27', 'PLCs can open valves, control motors and more', 'PLC capabilities', 266),
(4686, '26:15', 'OPC protocol for PLC interoperability', 'OPC protocol', 266),
(4687, '27:22', 'Node-RED created by IBM for interfacing with PLCs', 'Node-RED history', 266),
(4688, '30:52', 'JavaScript accessible and flexible for industrial automation', 'JavaScript benefits', 266),
(4689, '33:40', 'Accessibility a challenge for learning industrial automation', 'Learning challenges', 266),
(4690, '35:25', 'Node-RED forums recommended for getting started', 'Getting started', 266),
(4691, '40:02', 'MQTT protocol alternative to WebSockets', 'MQTT protocol', 266),
(4692, '43:09', 'Machine learning predicts industrial equipment failures', 'Predictive maintenance', 266),
(4693, '44:25', 'Full-stack devs in demand for visualizing industrial data', 'Devs in demand', 266),
(4694, '47:38', 'Opportunities for devs interested in industrial automation', 'Career opportunities', 266),
(4695, '49:44', 'Defense contractors interested in web tech like Kubernetes', 'Defense tech', 266),
(4696, '50:47', 'Renewable energy systems need PLCs and automation', 'Renewables automation', 266),
(4697, '52:46', 'Home automation has challenges compared to industrial', 'Home automation', 266),
(4698, '55:13', 'Guest has no home automation despite automation experience', 'No home automation', 266),
(4699, '57:32', 'Offer to help with any automation projects in the future', 'Automation help', 266),
(4700, '00:29', 'Introducing meta tags', 'Intro', 267),
(4701, '02:06', 'Explaining charset meta tag', 'Charset', 267),
(4702, '07:37', 'Discussing viewport meta tag', 'Viewport', 267),
(4703, '11:56', 'SEO and page data meta tags', 'SEO', 267),
(4704, '16:14', 'Keyword meta tags are dead', 'Keywords', 267),
(4705, '18:19', 'Site verification meta tags', 'Verification', 267),
(4706, '19:52', 'Open graph and social meta tags', 'Social', 267),
(4707, '27:31', 'Apple specific meta tags', 'Apple', 267),
(4708, '00:25', 'Talking about how everything in web development is amazing', 'Amazing web dev', 268),
(4709, '00:45', 'Sponsored by FreshBooks, Sentry, Linode', 'Sponsors', 268),
(4710, '01:01', 'Scott cleaned leaves off his roof', 'Leaves', 268),
(4711, '03:00', 'Devs complain a lot, but things have gotten much better', 'Devs complain', 268),
(4712, '04:19', 'TypeScript adds types to JavaScript', 'TypeScript', 268),
(4713, '07:03', 'Async/await and promises improved JS flow control', 'Async/await', 268),
(4714, '09:32', 'jQuery went away because vanilla JS improved', 'Vanilla JS', 268),
(4715, '11:57', 'Babel allowed writing modern JS compiled to ES5', 'Babel', 268),
(4716, '18:47', 'Flexbox and CSS Grid improved layouts', 'Layouts', 268),
(4717, '22:27', 'Only 216 web safe colors used originally', '216 colors', 268),
(4718, '24:57', 'Multimedia tags in HTML5 helped with video/audio', 'Multimedia', 268),
(4719, '31:40', 'Version control integrated into editors', 'Version control', 268),
(4720, '33:20', 'Build tools require less and less config', 'Build tools', 268),
(4721, '35:12', 'Image optimization built into frameworks', 'Images', 268),
(4722, '37:08', 'Hot module reloading speeds up debugging', 'Hot reloading', 268),
(4723, '39:30', 'Services like Stripe make payments easy', 'Stripe', 268),
(4724, '42:26', 'Developer tools in browsers have improved', 'Dev tools', 268),
(4725, '00:28', 'Introducing GitHub Copilot', 'Intro', 269),
(4726, '00:38', 'GitHub Copilot guesses your code', 'Copilot', 269),
(4727, '01:32', 'Waking up early to get work done', 'Early', 269),
(4728, '02:44', 'LogRocket sponsor ad', 'Ad', 269),
(4729, '03:25', 'FreshBooks sponsor ad', 'Ad', 269),
(4730, '04:05', 'Starting discussion on GitHub Copilot', 'Copilot', 269),
(4731, '05:08', 'Copilot is very accurate at guessing code', 'Accurate', 269),
(4732, '05:37', 'Copilot makes you a faster developer', 'Faster', 269),
(4733, '06:25', 'Scott had early access to Copilot', 'Early Access', 269),
(4734, '07:01', 'Example of Copilot generating DOM manipulation code', 'DOM Code', 269),
(4735, '08:29', 'Copilot won\'t design your application for you', 'No Design', 269),
(4736, '08:51', 'Example of Copilot generating code for UI states', 'UI States', 269),
(4737, '09:52', 'Copilot works well with React hooks', 'React Hooks', 269),
(4738, '11:36', 'Writing pseudo code helps Copilot generate relevant code', 'Pseudo Code', 269),
(4739, '12:56', 'Copilot can generate comments for existing code', 'Comments', 269),
(4740, '14:14', 'Copilot works with CSS', 'CSS', 269),
(4741, '14:38', 'Copilot good for CSS boilerplate', 'CSS Boilerplate', 269),
(4742, '15:48', 'Copilot removes repetitive coding work', 'Removes Work', 269),
(4743, '16:30', 'Example of Copilot generating component layout', 'Layout', 269),
(4744, '17:39', 'Concerns about Copilot taking jobs', 'Job Loss', 269),
(4745, '18:27', 'Copilot increases developer productivity', 'Productivity', 269),
(4746, '18:53', 'Copilot doesn\'t replace developer creativity', 'Creativity', 269),
(4747, '20:40', 'Concerns about Microsoft dependency', 'Microsoft', 269),
(4748, '21:45', 'Copilot is just fancy autocomplete for now', 'Autocomplete', 269),
(4749, '22:55', 'Copilot good for generating TypeScript types', 'Typescript', 269),
(4750, '24:00', 'Copilot not syntax aware yet', 'Syntax', 269),
(4751, '24:14', 'Copilot can be a loose cannon', 'Loose Cannon', 269),
(4752, '25:02', 'Example of Copilot converting code patterns', 'Conversion', 269),
(4753, '25:55', 'Overall very impressive', 'Impressive', 269),
(4754, '00:02', 'Intro', 'Intro', 270),
(4755, '00:19', 'Troubleshooting skills', 'Topic', 270),
(4756, '00:47', 'Sponsors', 'Ads', 270),
(4757, '01:15', 'How are you?', 'Chit chat', 270),
(4758, '02:29', 'House updates', 'Chit chat', 270),
(4759, '03:08', 'Troubleshooting life skills', 'Topic', 270),
(4760, '05:05', 'Asking the right questions', 'Tip', 270),
(4761, '06:11', 'Sanity check', 'Tip', 270),
(4762, '08:13', 'Isolate and replicate', 'Tips', 270),
(4763, '10:10', 'Comment out code', 'Tip', 270),
(4764, '11:32', 'Add back in components', 'Tip', 270),
(4765, '12:21', 'Replicate issue', 'Tip', 270),
(4766, '13:40', 'Share minimal example', 'Tip', 270),
(4767, '14:27', 'Update dependencies', 'Tip', 270),
(4768, '15:12', 'Replicate with vanilla JS', 'Tip', 270),
(4769, '16:21', 'Share reproduction', 'Tip', 270),
(4770, '16:38', 'Read documentation', 'Tip', 270),
(4771, '17:17', 'Share issue with community', 'Tip', 270),
(4772, '18:17', 'Provide details in issues', 'Tip', 270),
(4773, '19:27', 'Rollback changes', 'Tip', 270),
(4774, '20:13', 'Use version control', 'Tip', 270),
(4775, '20:55', 'Understand error messages', 'Tip', 270),
(4776, '22:04', 'Focus on error cause', 'Tip', 270),
(4777, '23:18', 'Format errors clearly', 'Tip', 270),
(4778, '24:29', 'Debug node_modules', 'Tip', 270),
(4779, '25:08', 'Patch dependencies', 'Tip', 270),
(4780, '26:34', 'Freshbooks ad', 'Ad', 270),
(4781, '27:40', 'Use debugging tools', 'Tip', 270),
(4782, '32:49', 'Use debugger statement', 'Tip', 270),
(4783, '33:24', 'Rubber ducking', 'Tip', 270),
(4784, '35:25', 'Big Mouth Billy Bass tangent', 'Chit chat', 270),
(4785, '36:39', 'Fun with animatronics', 'Chit chat', 270),
(4786, '39:56', 'Electric tools tangent', 'Chit chat', 270),
(4787, '40:00', 'Back to troubleshooting', 'Transition', 270),
(4788, '41:49', 'Twitter troubleshooting tips', 'Tips', 270),
(4789, '49:44', 'Mux sponsor', 'Ad', 270),
(4790, '51:14', 'Sick picks', 'Segment', 270),
(4791, '56:22', 'Black Friday deals', 'Ads', 270),
(4792, '01:00:43', 'Outro', 'Outro', 270),
(4793, '00:29', 'New 16-inch MacBook Pros', 'new laptops', 271),
(4794, '01:34', 'Sponsors', 'ads', 271),
(4795, '04:33', 'Initial thoughts', 'impressions', 271),
(4796, '07:05', 'Apps and performance', 'apps', 271),
(4797, '10:21', 'RAM needs for developers', 'RAM', 271),
(4798, '11:21', 'Memory usage observations', 'memory', 271),
(4799, '12:38', 'Screen size for developers', 'screens', 271),
(4800, '14:54', 'Productivity vs overworking', 'productivity', 271),
(4801, '16:04', 'VSCode performance', 'VSCode', 271),
(4802, '17:58', 'Setting up new computer', 'setup', 271),
(4803, '21:24', 'Video editing performance', 'video editing', 271),
(4804, '23:59', 'DaVinci Resolve performance', 'DaVinci', 271),
(4805, '24:27', 'Fan noise and heat', 'fans and heat', 271),
(4806, '26:19', 'Video encoding capabilities', 'encoding', 271),
(4807, '27:16', 'Waveform performance', 'waveforms', 271),
(4808, '29:33', 'Other developer improvements', 'dev improvements', 271),
(4809, '31:52', 'Development experience', 'dev experience', 271),
(4810, '33:26', 'Minimized barriers', 'barriers', 271),
(4811, '33:52', 'Hardware impressions', 'hardware', 271),
(4812, '34:51', 'Notch issues', 'notch', 271),
(4813, '36:48', 'Menu bar spacing issues', 'menu bar', 271),
(4814, '37:05', 'Power and charging', 'power', 271),
(4815, '38:39', 'Fan noise', 'fans', 271),
(4816, '39:46', 'External monitor support', 'monitors', 271),
(4817, '40:21', 'It feels like the future', 'future', 271),
(4818, '41:23', 'Battery life', 'battery', 271),
(4819, '42:04', 'Monitor color issues', 'colors', 271),
(4820, '43:13', 'Fingerprint reader', 'fingerprint', 271),
(4821, '44:01', 'What to do with old laptops', 'old laptops', 271),
(4822, '45:24', 'Ports', 'ports', 271),
(4823, '45:48', 'Microphone quality', 'microphone', 271),
(4824, '46:35', 'Camera quality', 'camera', 271),
(4825, '46:59', 'Keyboard quality', 'keyboard', 271),
(4826, '00:34', 'Sponsored by Linode, Sentry & FreshBooks', 'Ads', 272),
(4827, '00:52', 'Scott\'s fall yard work', 'Chores', 272),
(4828, '02:07', 'Wes\' fall yard work', 'Chores', 272),
(4829, '02:44', 'Lawn Talk segment idea', 'Idea', 272),
(4830, '04:20', 'Using GitHub Copilot', 'Copilot', 272),
(4831, '05:57', 'Do you wear glasses?', 'Glasses', 272),
(4832, '08:29', 'Getting eye exams & buying glasses', 'Eye care', 272),
(4833, '11:05', 'How to deal with work stress', 'Stress', 272),
(4834, '14:45', 'Dealing with negative customer emails', 'Emails', 272),
(4835, '16:50', 'Prefer working at big or small company?', 'Work', 272),
(4836, '20:00', 'Meaning of \"grok\" in dev culture', 'Grok', 272),
(4837, '23:13', 'Design process for new projects', 'Design', 272),
(4838, '26:06', 'Tools for designing websites', 'Tools', 272),
(4839, '31:42', 'Headless CMS admin UIs', 'CMS', 272),
(4840, '36:11', 'Tablets for notes & sketches', 'Tablets', 272),
(4841, '39:13', 'Headless CMS hosting setup', 'Hosting', 272),
(4842, '43:14', 'How CORS security works', 'CORS', 272),
(4843, '45:04', 'Authentication in GraphQL', 'GraphQL', 272),
(4844, '48:51', 'Podcast game idea', 'Game', 272),
(4845, '03:58', 'Next.js 12 major version with optimization and performance features', 'Next.js 12 overview', 273),
(4846, '04:17', 'Next.js 12 uses new Rust compiler SWC for faster refresh and builds', 'SWC compiler', 273),
(4847, '05:27', 'Next.js 12 adds middleware support to intercept requests like Express', 'Middleware support', 273),
(4848, '08:25', 'Next.js 12 supports React 18 APIs and features', 'React 18 support', 273),
(4849, '09:56', 'Next.js Image component now supports AVIF images', 'AVIF images', 273),
(4850, '10:17', 'Next.js 12 detects bots for better ISR fallback experience', 'Bot detection', 273),
(4851, '13:11', 'Next.js 12 has native ESM module support', 'ESM support', 273),
(4852, '00:33', 'Introducing StackBlitz and web containers', 'StackBlitz intro', 274),
(4853, '01:14', 'Tomac\'s background in developing libraries and tooling', 'Tomac background', 274),
(4854, '02:04', 'Tomac\'s transition to developer relations and content creation', 'Tomac dev rel', 274),
(4855, '02:31', 'Overview of online code editors and development environments', 'Online code editors', 274),
(4856, '03:32', 'StackBlitz as a multi-file online code editor', 'Stackblitz editor', 274),
(4857, '04:06', 'Custom browser compilation vs VM-based online dev environments', 'Custom vs VM dev envs', 274),
(4858, '04:45', 'StackBlitz uses Visual Studio Code\'s Monaco editor', 'Monaco editor', 274),
(4859, '05:10', 'StackBlitz has used Monaco since the beginning', 'Early Monaco use', 274),
(4860, '05:51', 'Browser APIs needed for Node.js: fs, TCP, binaries', 'Node browser APIs', 274),
(4861, '06:12', 'History of custom front-end vs VM-based online code execution', 'Online code history', 274),
(4862, '06:39', 'Custom front-end allows offline but limited functionality', 'Custom front-end offline', 274),
(4863, '07:07', 'Custom front-end doesn\'t support full workflows', 'Custom front-end limited', 274),
(4864, '07:24', 'VM-based provides full environment but has downsides', 'VM-based downsides', 274),
(4865, '08:14', 'Challenges with allowing server-side code execution for free', 'Server-side challenges', 274),
(4866, '08:43', 'Offline usage typically requires persistence tradeoffs', 'Offline tradeoffs', 274),
(4867, '09:32', 'Fugu API project overview', 'Fugu API', 274),
(4868, '10:13', 'Fugu allows local file system access in the browser', 'Fugu filesystem', 274),
(4869, '10:38', 'Fugu provides secure, sandboxed file system access', 'Fugu security', 274),
(4870, '11:09', 'Overview of Fugu API support in browsers', 'Fugu browser support', 274),
(4871, '11:32', 'Fugu API support is better in Chrome/Android than Safari/iOS', 'Fugu support differences', 274),
(4872, '12:08', 'Device Posture API example', 'Device Posture API', 274),
(4873, '12:29', 'Fugu can replace Electron for some use cases', 'Fugu vs Electron', 274),
(4874, '13:06', 'Web containers provide OS capabilities inside the browser', 'Web containers', 274),
(4875, '13:21', 'Web containers provide filesystem, network, and binaries', 'Web container capabilities', 274),
(4876, '13:42', 'Web containers allow offline usage', 'Web containers offline', 274),
(4877, '14:26', 'WASM enables running code like Node in the browser', 'WASM enables browsers', 274),
(4878, '14:51', 'Web containers are unique and new browser capabilities', 'Web container uniqueness', 274),
(4879, '15:17', 'Web containers will enable new browser workflows', 'New browser workflows', 274),
(4880, '15:58', 'FreshBooks sponsor spot', 'FreshBooks ad', 274),
(4881, '17:44', 'WASM overview and enabling server-side languages in browser', 'WASM overview', 274),
(4882, '18:37', 'Web container basics: Node, browser, WASM', 'Web container basics', 274),
(4883, '19:10', 'Some Node native dependencies are being ported to WASM', 'Node dependencies to WASM', 274),
(4884, '19:38', 'WASM allows more portability across environments', 'WASM portability', 274),
(4885, '20:12', 'Example of native dependency shader-file', 'Native dependency example', 274),
(4886, '20:43', 'Authors can build packages targeting WASM', 'Packages targeting WASM', 274),
(4887, '21:05', 'Web container performance compared to local environment', 'Web container performance', 274),
(4888, '21:55', 'Web containers can outperform local dev environment', 'Outperforming local env', 274),
(4889, '22:34', 'Browser provides optimized environment over Electron', 'Browser optimization', 274),
(4890, '23:06', 'Isolates provide safety and speed', 'Isolates', 274),
(4891, '23:22', 'Web container performance on lower-end machines', 'Performance on lower-end machines', 274),
(4892, '23:47', 'Browser caching improves install speed', 'Browser caching', 274),
(4893, '24:33', 'Future of coding primarily in the browser', 'Browser-based coding future', 274),
(4894, '25:04', 'Safari Shared Array Buffer needed for StackBlitz', 'Safari Shared Array Buffer', 274),
(4895, '25:30', 'StackBlitz focused on Chrome-based browsers currently', 'Chrome browser focus', 274),
(4896, '25:50', 'Progress being made on Safari support', 'Safari progress', 274),
(4897, '26:05', 'StackBlitz switched Node from V8 to SpiderMonkey', 'Node\'s JS engine', 274),
(4898, '26:36', 'SpiderMonkey allows Firefox support without compilation', 'SpiderMonkey Firefox support', 274),
(4899, '27:02', 'Custom front-end allows browser choice flexibility', 'Front-end browser flexibility', 274),
(4900, '27:29', 'Firefox advocate on team working on Firefox support', 'Firefox advocate', 274),
(4901, '28:05', 'StackBlitz switched Node engine for more flexibility', 'Node engine switch', 274),
(4902, '28:19', 'iOS Support pending on Safari features from Apple', 'iOS support', 274),
(4903, '28:46', 'Pressure on Apple to empower the web platform', 'Web platform pressure', 274),
(4904, '29:39', 'WebContainers will enable more use cases', 'More web container use cases', 274),
(4905, '30:10', 'Example of Markdown blog powered by Node', 'Markdown blog example', 274),
(4906, '30:19', 'StackBlitz Github integration', 'Github integration', 274),
(4907, '30:57', 'LogRocket sponsor spot', 'LogRocket ad', 274),
(4908, '31:28', 'VSCode extension support coming soon', 'Extension support coming soon', 274),
(4909, '32:10', 'Goal to run full VSCode in browser', 'Full VSCode in browser goal', 274),
(4910, '32:41', 'Future of development being primarily browser-based', 'Browser dev future', 274),
(4911, '33:13', 'Current focus on mid-level complexity apps', 'Mid-level app focus', 274),
(4912, '33:28', 'Vue Slidev as example workflow', 'Slidev example', 274),
(4913, '33:51', 'Simple starters available for common frameworks', 'Framework starters', 274),
(4914, '34:04', 'Looking to support more complex real-world apps', 'Complex app support', 274),
(4915, '34:51', 'Working in public coming soon', 'Working in public', 274),
(4916, '35:03', 'Asking for increasing complexity examples', 'Increasing complexity', 274),
(4917, '35:28', 'SQLite support recently added', 'SQLite support', 274),
(4918, '35:54', 'No known conceptual limitations so far', 'No known limitations', 274),
(4919, '36:51', 'Actively looking for challenges', 'Looking for challenges', 274),
(4920, '37:02', 'Turbo overview as faster npm client', 'Turbo overview', 274),
(4921, '37:26', 'Turbo optimized around imports', 'Turbo optimization', 274),
(4922, '37:45', 'Turbo leverages browser caching', 'Turbo browser caching', 274),
(4923, '38:09', 'Turbo clears cache/dependencies on refresh', 'Turbo cache clearing', 274),
(4924, '38:30', 'Turbo avoids npm post-install scripts', 'Avoids post-install', 274),
(4925, '38:57', 'Turbo provides safety via browser sandboxing', 'Turbo safety', 274),
(4926, '39:42', 'Recent event showing npm security issue', 'npm security issue', 274),
(4927, '40:01', 'Turbo avoids npm security pitfalls', 'Avoids npm issues', 274),
(4928, '40:36', 'No local Turbo version currently planned', 'No local Turbo', 274),
(4929, '41:05', 'Overview of similar browser dev environments', 'Similar environments', 274),
(4930, '41:39', 'CodeSandbox uses mixed compilation models', 'CodeSandbox mixed models', 274),
(4931, '42:11', 'VSCode Online is backed by VMs', 'VSCode Online VMs', 274),
(4932, '42:34', 'VSCode Online provides editor but no execution', 'VSCode Online limitations', 274),
(4933, '43:12', 'Codespaces uses remote VMs', 'Codespaces uses VMs', 274),
(4934, '43:32', 'Interested in VSCode + Edge integration', 'VSCode Edge interest', 274),
(4935, '44:06', 'WebContainers already enable VSCode Online limitations', 'WebContainers beyond VSCode Online', 274),
(4936, '44:28', 'VSCode integration coming in 2022', 'VSCode integration coming', 274),
(4937, '44:51', 'Goal to replace local dev environment', 'Replace local env goal', 274),
(4938, '45:17', 'Browser dev interest over Ops focus', 'Browser over Ops', 274),
(4939, '45:32', 'New hosting tools reducing Ops burden', 'Reduced Ops burden', 274),
(4940, '45:59', 'Linode sponsor spot', 'Linode ad', 274),
(4941, '46:57', 'Halo phone magnets sick pick', 'Magnet sick pick', 274),
(4942, '47:57', 'Grovemade phone stand', 'Phone stand', 274),
(4943, '48:37', 'DIY wireless charging stand', 'DIY charging stand', 274),
(4944, '49:11', 'The Dresden Files book series', 'Dresden Files books', 274),
(4945, '50:17', 'James Marsters\' audiobook narration', 'Dresden audiobooks', 274),
(4946, '50:49', 'LED interior car lights upgrade', 'LED car lights', 274),
(4947, '51:09', 'Custom backup camera installation', 'Backup camera install', 274),
(4948, '52:16', 'Wes Bos courses', 'Wes Bos courses', 274),
(4949, '52:37', 'Too busy shipping to announce new features', 'Too busy shipping', 274),
(4950, '53:01', 'StackBlitz Twitter for announcements', 'StackBlitz Twitter', 274),
(4951, '53:17', 'Astro support recently added', 'Astro support', 274),
(4952, '53:23', 'Astro course', 'Astro course', 274),
(4953, '53:54', 'Level Up Tutorials Astro course', 'Level Up Astro course', 274),
(4954, '54:23', 'Thanks and wrap-up', 'Conclusion', 274),
(4955, '00:33', 'Discussing Astro, a new framework for server-rendered static web apps', 'Astro intro', 275),
(4956, '02:11', 'Sentry and Linode sponsor spots', 'Sponsors', 275),
(4957, '04:13', 'Astro builds static HTML/CSS sites using JS components', 'Astro overview', 275),
(4958, '05:01', 'Can use any frontend framework via renderers', 'Renderers', 275),
(4959, '06:00', 'Renderer allows mixing frameworks in one app', 'Mix frameworks', 275),
(4960, '06:18', 'Astro\'s killer feature is shipping way less JS', 'Less JS', 275),
(4961, '07:53', 'Astro uses component-style development flow', 'Component flow', 275),
(4962, '09:17', 'Astro good for websites vs SPA apps', 'Websites not apps', 275),
(4963, '10:07', 'Astro builds sites at build time unlike Gatsby 4', 'Build time', 275),
(4964, '11:46', 'Use fetch for data fetching at build time', 'Fetch data', 275),
(4965, '13:57', 'No built-in auth or serverless functions yet', 'No auth yet', 275),
(4966, '15:54', 'Comes with nice defaults for TS, CSS, markdown, etc', 'Smart defaults', 275),
(4967, '18:47', 'Emmet and VS Code support works out of the box', 'Emmet support', 275),
(4968, '02:33', 'Scott saw bear near house in Denver recently', 'bear sighting', 276),
(4969, '03:08', 'Wes\'s brother-in-law followed a bear when they saw one on vacation', 'followed bear', 276),
(4970, '03:18', 'Scott saw a bear in a tree while at an Airbnb in Rocky Mountain National Park', 'bear in tree', 276),
(4971, '04:21', 'Scott and Wes decide to play CSS edition of Stumped', 'play Stumped', 276),
(4972, '06:15', 'Scott answers first question correctly: list-style-type changes bullet shape', 'first question', 276),
(4973, '07:00', 'Wes defines pseudo-element vs pseudo-class correctly', 'pseudo elements', 276),
(4974, '09:24', 'Wes explains difference between block, inline and inline-block elements', 'block vs inline', 276),
(4975, '11:01', 'Scott identifies combinator selectors like + and ~', 'combinators', 276),
(4976, '12:24', 'Wes doesn\'t know specificity calculation but understands concepts', 'specificity ', 276),
(4977, '15:04', 'Scott knows translate only works on x/y axis, not z axis', 'translate axis', 276),
(4978, '16:54', 'Wes explains CSS reset vs normalize correctly', 'reset vs normalize', 276),
(4979, '18:31', 'Wes suggests using @import inside media query for conditional CSS', 'conditional CSS', 276),
(4980, '20:27', 'Scott explains why to use translate over positioning', 'translate vs position', 276),
(4981, '02:35', 'Scott shares funny story of putting a check in the wrong slot at an ATM', 'ATM check story', 277),
(4982, '04:39', 'PNPM is a faster, more efficient alternative to NPM that stores modules in one location', 'PNPM overview', 277),
(4983, '08:28', 'Monorepos allow you to manage multiple packages/projects within one repo', 'Monorepo benefits', 277),
(4984, '11:14', 'PNPM monorepos use a pnpm-workspace.yaml file to define the package structure', 'PNPM monorepo setup', 277),
(4985, '16:07', 'Git submodules allow mixing private and public packages within a monorepo', 'Git submodules', 277),
(4986, '20:39', 'Publishing packages in a PNPM monorepo to NPM is easy', 'Publishing packages', 277),
(4987, '02:21', 'Collecting horror stories', 'Horror stories', 278),
(4988, '04:12', 'Wes deletes Denver emails', 'Denver email bug', 278),
(4989, '06:46', 'Scott leaks XFL cities', 'XFL leak', 278),
(4990, '08:18', '$90 million crypto bug', '$90M crypto bug', 278),
(4991, '11:25', 'Accidentally deleting server', 'Deleted server', 278),
(4992, '13:48', 'Accidentally emailing customers', 'Bad emails', 278),
(4993, '15:11', 'Mass website outage on Friday', 'Friday deploy', 278),
(4994, '18:09', 'Performance issues in production', 'Performance issues', 278),
(4995, '21:10', 'Company outage from button', 'Outage button', 278),
(4996, '23:28', 'Deleting site with script', 'Deleted site', 278),
(4997, '26:20', 'Breaking site with dependencies', 'Dependency issues', 278),
(4998, '28:20', 'Developer photos leaked', 'Leaked photos', 278),
(4999, '31:46', 'Accidentally deleting code', 'Deleted code', 278),
(5000, '35:27', 'Bug from old code', 'Legacy bug', 278),
(5001, '38:46', 'Updating all records', 'Mass update', 278);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(5002, '42:11', 'Bad interview answer', 'Interview flub', 278),
(5003, '00:29', 'Podcast intro', 'Intro', 279),
(5004, '01:04', 'Preview of upcoming spooky stories episode', 'Preview', 279),
(5005, '01:33', 'Sponsor read for Sentry', 'Sentry ad', 279),
(5006, '02:23', 'Sponsor read for Linode', 'Linode ad', 279),
(5007, '03:27', 'Reading spooky dev stories from Twitter', 'Twitter stories', 279),
(5008, '04:29', 'Story about offensive Bible verse appearing in Bible app', 'Offensive verse', 279),
(5009, '04:43', 'Story about cat deleting API code', 'Cat delete', 279),
(5010, '05:03', 'Dog paw slapping keyboard story', 'Dog paw', 279),
(5011, '05:18', 'Grammarly injecting code broke emails', 'Grammarly broke emails', 279),
(5012, '05:57', 'Accidental DDoS of own server', 'Self DDoS', 279),
(5013, '06:18', 'Bug sent duplicate emails to customers', 'Duplicate emails', 279),
(5014, '06:32', 'Images saved to wrong bucket and deleted', 'Wrong image bucket', 279),
(5015, '06:45', 'Lost work from corrupted FTP file', 'Corrupt FTP', 279),
(5016, '07:36', 'Locked users out of beta by accident', 'Locked beta users out', 279),
(5017, '07:43', 'Blacklisted own load balancer IP address', 'Blacklisted self', 279),
(5018, '07:49', 'Case mismatch broke user accounts', 'Case sensitivity bug', 279),
(5019, '08:14', 'Offensive test error message got deployed', 'Offensive error message', 279),
(5020, '08:42', 'Swear filter blocked CSS file', 'Swear filter blocked CSS', 279),
(5021, '09:40', 'Infinite text alerts to phone numbers', 'Infinite texts', 279),
(5022, '10:13', 'Integer size bug crashed app after years', 'Integer size crash', 279),
(5023, '10:48', 'DDoS office internet with download test', 'Office DDoS', 279),
(5024, '11:26', 'Removed SQL WHERE clause slowed database', 'Removed WHERE clause', 279),
(5025, '11:43', 'Crashed university website with Google Analytics', 'Crashed university site', 279),
(5026, '12:38', 'Preview of more stories in next episode', 'Next episode preview', 279),
(5027, '13:04', 'Outro and sponsors', 'Outro', 279),
(5028, '02:33', 'Scott and Wes discuss cutting trees and clearing branches', 'Cutting trees', 280),
(5029, '03:27', 'Scott finds a video with Wes\'s insightful sprinkler comment', 'Wes comment', 280),
(5030, '05:04', 'Get lawyer for terms of use and privacy policy for serious projects', 'Lawyer policies', 280),
(5031, '06:43', 'Can try LegalZoom for terms and policies instead of lawyer', 'LegalZoom', 280),
(5032, '08:05', 'Teaching kids - start with logic games and coding toys before code', 'Teaching kids', 280),
(5033, '09:42', 'Make kids curious problem solvers before teaching code', 'Make kids curious', 280),
(5034, '11:16', 'Denver a good tech hub with good pay but high cost of living', 'Denver tech', 280),
(5035, '12:03', 'GraphQL - resolvers are for types, not columns. Shouldn\'t need hundreds.', 'GraphQL resolvers', 280),
(5036, '14:47', 'Can use untrusted code from GitHub repos in portfolio if explain it', 'Use untrusted code', 280),
(5037, '15:29', 'Avoid nonsense variable names like foo, bar. Use real examples.', 'Avoid foo bar', 280),
(5038, '16:30', 'Negative values in CSS are fine and useful despite feeling dirty', 'Negative CSS values', 280),
(5039, '18:58', 'MongoDB Atlas better than self-hosted Mongo for security and features', 'Atlas over self-hosted', 280),
(5040, '22:19', 'Get immigration lawyer on show to discuss tech worker immigration', 'Immigration lawyer', 280),
(5041, '26:43', 'Approach GraphQL as queries and single endpoint rather than REST endpoints', 'GraphQL queries', 280),
(5042, '30:38', 'Specialized skills like load balancing and sharding usually managed by services', 'Managed services', 280),
(5043, '32:42', 'Audit simple untrusted packages yourself if concerned', 'Audit packages', 280),
(5044, '33:43', 'Can\'t fully audit all dependencies, have to accept some risks', 'Accept risks', 280),
(5045, '35:58', 'Update packages slowly, look for issues before upgrading', 'Update slowly', 280),
(5046, '37:33', 'npm audit warnings are often noise, currently inadequate', 'npm audit noise', 280),
(5047, '41:55', 'Use fast static site tech like SvelteKit, Gatsby or Next.js static for brochure site', 'Static for brochure', 280),
(5048, '45:42', 'CSS negative values are valid, useful techniques. Get over it.', 'Get over negative values', 280),
(5049, '48:30', 'Only use Git, no sync services, for backup', 'Git backup', 280),
(5050, '51:03', 'Cloudinary good for automated image transformation', 'Cloudinary images', 280),
(5051, '02:49', 'Scott introduces the podcast', 'Intro', 281),
(5052, '03:43', 'Scott introduces JUST, a small utility function library', 'JUST intro', 281),
(5053, '07:51', 'Wes discusses the use cases and benefits of JUST functions', 'Use cases', 281),
(5054, '10:25', 'Scott talks about the compare function in JUST', 'Compare fn', 281),
(5055, '11:34', 'Wes suggests using JUST tests as practice exercises', 'Practice tests', 281),
(5056, '00:12', 'Podcast on running a podcast', 'Tips', 282),
(5057, '00:19', 'Recording setups, topics, editing, hosting, transcripts, promoting, sponsors', 'Podcast topics', 282),
(5058, '00:52', 'Local and Zoom recording setup', 'Recording', 282),
(5059, '02:20', 'Zoom audio backup', 'Backup', 282),
(5060, '03:00', 'Audio gear setups', 'Audio gear', 282),
(5061, '05:29', 'Recording apps: Logic vs QuickTime', 'Recording apps', 282),
(5062, '06:23', 'Online recording services', 'Online recording', 282),
(5063, '07:33', 'Importance of consistency in releasing episodes', 'Consistency', 282),
(5064, '09:04', 'FreshBooks sponsor ad', 'FreshBooks ad', 282),
(5065, '09:18', 'Episode prep and planning', 'Planning', 282),
(5066, '12:16', 'New frameworks and topics to cover', 'New topics', 282),
(5067, '13:15', 'Explainer episodes', 'Explainers', 282),
(5068, '14:15', 'Massive backlog of episode ideas', 'Backlog', 282),
(5069, '14:29', 'Short Hasty Treat vs long Tasty Treat episodes', 'Episode types', 282),
(5070, '16:23', 'Occasional fun episodes like games', 'Fun episodes', 282),
(5071, '16:56', 'Episodes explaining projects we\'ve built', 'Project episodes', 282),
(5072, '17:12', 'Collaboration episodes', 'Collabs', 282),
(5073, '18:51', 'Non-coding topics like productivity and imposter syndrome', 'Soft skills', 282),
(5074, '19:45', 'LogRocket sponsor ad', 'LogRocket ad', 282),
(5075, '21:02', 'Editing process', 'Editing', 282),
(5076, '22:20', 'Hosting on Libsyn', 'Hosting', 282),
(5077, '23:06', 'Next.js site and markdown for show notes', 'Show notes', 282),
(5078, '23:59', 'Most listen through podcast apps', 'Podcast apps', 282),
(5079, '24:07', 'Working on transcripts', 'Transcripts', 282),
(5080, '26:23', 'Lack of good podcast discovery', 'Discovery', 282),
(5081, '28:24', 'Would still start a podcast today', 'Still start today', 282),
(5082, '30:43', 'Ideas for better podcast discovery', 'Better discovery', 282),
(5083, '31:18', 'Leveraging existing audiences to promote', 'Promotion', 282),
(5084, '32:26', 'Recording episodes in advance', 'Recording advance', 282),
(5085, '33:51', 'Recording every Monday is tricky with holidays', 'Holidays', 282),
(5086, '34:45', 'How Cloudinary sponsor ad works', 'Cloudinary ad', 282),
(5087, '35:29', '5-6 hours per week spent on podcast', 'Hours spent', 282),
(5088, '37:27', 'Sponsors are services we use and like', 'Good sponsors', 282),
(5089, '39:45', 'First sponsor reached out early', 'First sponsor', 282),
(5090, '42:33', 'No interest in Patreon model', 'No Patreon', 282),
(5091, '44:51', 'Considering ad-free version for supporters', 'Ad-free version', 282),
(5092, '46:16', 'Live show ideas', 'Live shows', 282),
(5093, '47:25', 'Annual Halloween spooky stories episode', 'Spooky stories', 282),
(5094, '48:41', 'Scott\'s sick pick: Crime and Penalties documentary', 'Scott\'s pick', 282),
(5095, '49:43', 'Wes\' sick pick: Road Runner documentary', 'Wes\' pick', 282),
(5096, '51:06', 'Wes promotes his courses', 'Wes courses', 282),
(5097, '52:04', 'Scott promotes Level Up Tutorials', 'Level Up promo', 282),
(5098, '04:59', 'Color contrast function compares color to others, selecting highest contrast', 'Color contrast', 283),
(5099, '06:47', 'Accent color property allows styling form inputs with brand colors', 'Accent color', 283),
(5100, '07:50', 'CurrentColor sets a property to the current text color', 'CurrentColor', 283),
(5101, '09:07', 'Color functions allow specific color spaces beyond sRGB', 'Color spaces', 283),
(5102, '11:55', 'Color mix function mixes two colors in a specified amount', 'Color mix', 283),
(5103, '14:23', 'Space separated color function notation proposed', 'CSS colors', 283),
(5104, '15:46', 'Alpha values can be added to RGB/HSL with slash notation', 'Alpha colors', 283),
(5105, '18:26', 'Hex values can now include alpha transparency', 'Hex alpha', 283),
(5106, '22:14', 'Lab and LCH are new perceptually uniform color spaces', 'Lab/LCH colors', 283),
(5107, '00:02', 'Hosts welcome listeners to a potluck episode with questions from listeners', 'Intro', 284),
(5108, '02:33', 'Discussion on working on admin tools and UIs at large companies', 'Admin tools', 284),
(5109, '07:00', 'Question on using local vs external image services like Cloudinary', 'Image hosting', 284),
(5110, '12:26', 'Discussion on building portfolio sites to showcase skills vs design', 'Portfolios', 284),
(5111, '16:33', 'Discussing testing approaches for Svelte components', 'Svelte testing', 284),
(5112, '19:15', 'Auth0 can handle authentication for apps using any framework', 'Auth0 ad', 284),
(5113, '20:39', 'Recommendations for learning AWS and devops', 'AWS devops', 284),
(5114, '22:34', 'Discussion on using MDX vs regular Markdown', 'MDX', 284),
(5115, '33:48', 'Sentry can track errors and performance issues', 'Sentry ad', 284),
(5116, '37:00', 'Hosting strategies for using WordPress as a headless CMS', 'WordPress hosting', 284),
(5117, '39:26', 'Using semantic HTML tags vs divs', 'Semantic HTML', 284),
(5118, '47:41', 'Linode offers cloud computing services for developers', 'Linode ad', 284),
(5119, '51:47', 'Documentary series recommendation - LuLaRich', 'Show recommendation', 284),
(5120, '53:30', 'Flame light bulbs are a fun DIY project', 'Flame bulbs', 284),
(5121, '00:26', 'Intro to Spicy Takeout episode', 'Intro', 285),
(5122, '01:23', 'Mixing templates & logic frowned upon but makes sense', 'Mixing templates', 285),
(5123, '04:06', 'PHP gets flack but has good features we now use in JS', 'PHP flack', 285),
(5124, '05:42', 'Every PHP request has own scope like serverless functions', 'Request scope', 285),
(5125, '07:45', 'PHP is hot reloaded and serverless by default', 'Hot reloaded', 285),
(5126, '08:56', 'PHP has massive standard library that JS is catching up to', 'Standard library', 285),
(5127, '10:46', 'URL based routing becoming popular again with JS frameworks', 'URL routing', 285),
(5128, '11:23', 'Server-side rendering gaining popularity again', 'SSR popular', 285),
(5129, '12:29', 'Easy variable interpolation now possible in JS like PHP', 'Variable interpolation', 285),
(5130, '13:12', 'All-in-one frameworks like Laravel similar to past PHP frameworks', 'All-in-one frameworks', 285),
(5131, '13:32', 'Direct database access from templates possible but risky', 'Direct DB access', 285),
(5132, '14:37', 'Why do people hate PHP and not use it nowadays?', 'Why hate PHP?', 285),
(5133, '16:18', 'Using Laravel could be interesting to try nowadays', 'Try Laravel', 285),
(5134, '16:39', 'PHP typing was half-baked but improving in PHP 8', 'Typing', 285),
(5135, '17:34', 'Inconsistent PHP API naming still an issue', 'Inconsistent APIs', 285),
(5136, '18:02', 'Why use JS over PHP nowadays despite PHP\'s merits?', 'Why JS over PHP?', 285),
(5137, '19:58', 'Final thoughts on PHP and its influence on JS', 'Final thoughts', 285),
(5138, '01:10', 'Front End Feud intro', 'intro', 286),
(5139, '02:33', 'Teams introduced', 'teams', 286),
(5140, '03:29', 'Rules explained', 'rules', 286),
(5141, '04:34', 'Round 1 face-off', 'faceoff', 286),
(5142, '05:11', 'Team ShopTalk wins round 1', 'round 1', 286),
(5143, '10:40', 'Round 2 face-off', 'faceoff', 286),
(5144, '12:38', 'Team Syntax wins round 2', 'round 2', 286),
(5145, '17:34', 'Round 3 face-off', 'faceoff', 286),
(5146, '22:14', 'Team ShopTalk wins round 3', 'round 3', 286),
(5147, '25:27', 'Round 4 inverted round', 'inverted', 286),
(5148, '33:39', 'Team Syntax wins round 4', 'round 4', 286),
(5149, '35:27', 'Round 5 face-off', 'faceoff', 286),
(5150, '41:51', 'Team Syntax wins round 5', 'round 5', 286),
(5151, '42:12', 'Round 6 face-off', 'faceoff', 286),
(5152, '46:46', 'Team ShopTalk wins Front End Feud', 'ShopTalk wins', 286),
(5153, '03:36', 'Lucylang compiles to xstate for concise state machines', 'Lucylang', 287),
(5154, '06:33', 'MD Specs brings MDX style components to Svelte', 'MD Specs', 287),
(5155, '09:34', 'Rehype and Remark plugins work with MD Specs in Svelte', 'MD Spec plugins', 287),
(5156, '13:29', 'Fig adds autocomplete to terminals like folders and Git', 'Fig terminal', 287),
(5157, '16:17', 'Warp terminal built in Rust with collaboration features', 'Warp terminal', 287),
(5158, '19:49', 'Raycast is an app launcher and workflow tool', 'Raycast', 287),
(5159, '24:00', 'Obsidian is a Versus Code style note taking app', 'Obsidian notes', 287),
(5160, '27:00', 'Descript transcribes audio and edits based on text', 'Descript editor', 287),
(5161, '00:22', 'Scott moved Level Up Tutorials from React to SvelteKit', 'React to SvelteKit', 288),
(5162, '00:47', 'Sponsors: Prismic, Sentry, Cloudinary', 'Sponsors', 288),
(5163, '01:12', 'Scott setting up office, getting sound treatment', 'Office setup', 288),
(5164, '02:15', 'Hard numbers comparing React and SvelteKit not useful', 'No useful metrics', 288),
(5165, '02:42', 'Scott doesn\'t hate React, but prefers SvelteKit', 'Doesn\'t hate React', 288),
(5166, '03:52', 'Wanted to try SvelteKit for Level Up Tutorials rewrite', 'Why SvelteKit', 288),
(5167, '05:35', 'Made quick progress with SvelteKit in just a few hours', 'Quick progress', 288),
(5168, '06:43', 'Concepts transfer between frameworks', 'Concepts transfer', 288),
(5169, '08:29', 'Apollo not needed, using custom fetcher', 'No Apollo', 288),
(5170, '09:22', 'Converting React hooks to Svelte stores', 'Converting hooks', 288),
(5171, '10:11', 'No need for data providers like with React', 'No data providers', 288),
(5172, '10:36', 'Switching to Vime video player', 'Vime player', 288),
(5173, '12:30', 'Site is faster with SSR', 'Faster with SSR', 288),
(5174, '13:14', 'No need for CSS-in-JS libraries', 'No CSS libraries', 288),
(5175, '13:52', 'Using Prismic as CMS', 'Using Prismic CMS', 288),
(5176, '16:37', 'Easier to convert combined React components', 'Combined components', 288),
(5177, '17:11', 'Converting React state to Svelte variables', 'State to variables', 288),
(5178, '18:31', 'More intuitive than React patterns', 'More intuitive', 288),
(5179, '19:20', 'Forgetting React patterns', 'Forgetting React', 288),
(5180, '19:59', 'No need for event handlers like React', 'No event handlers', 288),
(5181, '21:11', 'Removing React syntactic cruft', 'No syntactic cruft', 288),
(5182, '21:52', 'Converting React conditionals to Svelte', 'Conditional conversion', 288),
(5183, '22:40', 'Verbosity vs concision', 'Verbosity vs concision', 288),
(5184, '23:19', 'Small differences add up', 'Small differences', 288),
(5185, '26:06', 'Sponsor: Sentry', 'Sponsor: Sentry', 288),
(5186, '26:43', 'No React lifecycle issues', 'No lifecycle issues', 288),
(5187, '27:16', 'Easy to make Svelte packages', 'Svelte packages', 288),
(5188, '28:08', 'Created a Svelte devtools package', 'Svelte devtools', 288),
(5189, '28:13', 'Also made Svelte element queries package', 'Element queries', 288),
(5190, '30:12', 'Need Svelte-only components', 'Svelte components', 288),
(5191, '30:22', 'On-mount client side fix', 'On-mount fix', 288),
(5192, '31:51', 'Passing data from JS to CSS', 'JS to CSS', 288),
(5193, '32:45', 'Using adapter-node', 'adapter-node', 288),
(5194, '33:14', 'Hosted on Render.com', 'Hosted on Render', 288),
(5195, '34:23', 'Can host API in SvelteKit', 'API in SvelteKit', 288),
(5196, '35:30', 'Works on Vercel and Cloudflare', 'Vercel and Cloudflare', 288),
(5197, '36:36', 'Using Pancake for charts', 'Pancake charts', 288),
(5198, '37:00', 'Rebuilding admin tools', 'Admin tools', 288),
(5199, '37:36', 'Issues with ESM imports', 'ESM issues', 288),
(5200, '38:44', 'Apollo issues', 'Apollo issues', 288),
(5201, '39:13', 'Some TypeScript annoyances', 'TypeScript issues', 288),
(5202, '40:46', 'Large drag animation libraries', 'Drag libraries', 288),
(5203, '41:13', 'Sponsor: Cloudinary', 'Sponsor: Cloudinary', 288),
(5204, '43:03', 'React ecosystem maturity', 'React ecosystem', 288),
(5205, '43:33', 'JavaScript libraries work in Svelte', 'JavaScript libraries', 288),
(5206, '44:43', 'Controlled vs uncontrolled inputs', 'Controlled inputs', 288),
(5207, '45:40', 'Binding state to inputs', 'Binding state', 288),
(5208, '46:14', 'Computed values', 'Computed values', 288),
(5209, '47:23', 'Is SvelteKit stable?', 'SvelteKit stable?', 288),
(5210, '48:29', 'Feels very stable', 'Very stable', 288),
(5211, '49:46', 'Translating \"fast\"', 'Translating fast', 288),
(5212, '50:25', 'Confident in SvelteKit after rewrite', 'Confident in SvelteKit', 288),
(5213, '52:26', 'Wes picks SGU podcast', 'Wes: SGU podcast', 288),
(5214, '54:19', 'Scott picks pressure washer nozzle', 'Scott: Nozzle', 288),
(5215, '54:57', 'Scott picks web components course', 'Scott: Web components course', 288),
(5216, '02:33', 'Linode provides hosting for Node.js apps', 'Linode hosting', 289),
(5217, '03:36', 'Webhooks allow servers to communicate with each other', 'Webhooks intro', 289),
(5218, '04:53', 'Webhooks used for payment processing workflows', 'Payment webhooks', 289),
(5219, '06:21', 'Webhooks are like automated HTTP requests', 'Webhooks explained', 289),
(5220, '07:21', 'Webhooks sent on events, not immediately', 'Webhooks async', 289),
(5221, '08:14', 'Services provide interface to configure webhooks', 'Webhook UI', 289),
(5222, '09:33', 'Web developers implement webhook endpoints', 'Webhook endpoints', 289),
(5223, '11:02', 'Webhooks have JSON or form encoded payloads', 'Webhook payloads', 289),
(5224, '11:48', 'Secure webhooks with authentication tokens', 'Webhook security', 289),
(5225, '13:12', 'Locally test webhooks with ngrok', 'ngrok testing', 289),
(5226, '15:35', 'Consistent webhook URLs help debugging', 'Consistent URLs', 289),
(5227, '16:58', 'Tools like Insomnia help test webhooks', 'Insomnia testing', 289),
(5228, '18:25', 'Stripe\'s VS Code extension simplifies testing', 'Stripe testing', 289),
(5229, '19:40', 'Webhook.site verifies webhook payloads', 'Webhook.site', 289),
(5230, '00:23', 'New JavaScript features in ES2022', 'ES2022', 290),
(5231, '00:55', 'Scott\'s new office setup', 'Office tour', 290),
(5232, '02:33', 'Sponsors: Sanity, LogRocket, Auth0', 'Sponsors', 290),
(5233, '05:31', 'Regex indices flag', 'Regex indices', 290),
(5234, '07:42', 'Private class fields and methods', 'Private fields', 290),
(5235, '09:08', 'Class fields initialization', 'Class fields', 290),
(5236, '10:48', 'Static class methods', 'Static methods', 290),
(5237, '13:13', 'Top level await', 'Top level await', 290),
(5238, '16:02', 'Array .at() method', '.at() method', 290),
(5239, '21:49', 'Object.hasOwn() utility', 'Object.hasOwn()', 290),
(5240, '25:05', 'Class static block', 'Static block', 290),
(5241, '00:56', 'Back from summer hiatus', 'Hiatus', 291),
(5242, '04:04', 'Wes explains his internet issues at his cottage', 'Cottage internet', 291),
(5243, '06:26', 'Scott uses up his phone hotspot data quickly', 'Hotspot data', 291),
(5244, '07:31', 'Wes struggles with data caps in Canada', 'Data caps', 291),
(5245, '08:10', 'Wes turns off video for podcast due to bad internet', 'Video off', 291),
(5246, '08:29', 'Introducing Starlink satellite internet', 'Starlink', 291),
(5247, '09:50', 'Starlink equipment is expensive but necessary for Wes', 'Expensive', 291),
(5248, '10:47', 'Starlink speeds much faster than previous options', 'Fast speeds', 291),
(5249, '11:24', 'Starlink latency is good', 'Low latency', 291),
(5250, '11:46', 'Some short Starlink outages but overall good uptime', 'Good uptime', 291),
(5251, '12:32', 'Starlink dish needs clear view of sky', 'Dish setup', 291),
(5252, '13:17', 'Kids notice improved streaming', 'Kids notice', 291),
(5253, '13:49', 'Issue with Facebook and Instagram on Starlink', 'Facebook issue', 291),
(5254, '14:20', 'Review of Starlink equipment', 'Equipment', 291),
(5255, '16:28', 'Using own router instead of Starlink one', 'Own router', 291),
(5256, '17:09', 'Advanced networking setup', 'Networking', 291),
(5257, '17:57', 'Good for rural smart home automation', 'Smart home', 291),
(5258, '18:48', 'HD security cameras now possible', 'HD cameras', 291),
(5259, '19:29', 'Helping neighbors with internet access', 'Helping neighbors', 291),
(5260, '19:56', 'Downside is being unable to pause service', 'Can\'t pause', 291),
(5261, '02:34', 'Discussion on pros and cons of using Sass and SCSS in 2021', 'Sass', 292),
(5262, '05:29', 'Explanation of status of CSS Houdini browser support and spec progress', 'Houdini', 292),
(5263, '09:37', 'Thoughts on building sites without JS and benefits of progressive enhancement', 'No JS', 292),
(5264, '11:44', 'Overview of Tim Berners-Lee\'s Solid project for decentralized data ownership', 'Solid', 292),
(5265, '19:03', 'Tips for bartering web dev skills and whether it\'s better than using money', 'Bartering', 292),
(5266, '22:14', 'Perspectives on digital rights management (DRM) and effects on users', 'DRM', 292),
(5267, '25:50', 'Framework laptop - impressions of Linux laptop focused on repairability ', 'Framework', 292),
(5268, '29:38', 'Frontity - React framework for WordPress sites', 'Frontity', 292),
(5269, '37:37', 'Using GraphQL with Svelte - codegen, Apollo, SvelteKit integrations', 'GraphQL Svelte', 292),
(5270, '41:02', 'Prisma and whether it makes MongoDB queries easier', 'Prisma MongoDB', 292),
(5271, '43:54', 'Future of Webpack with new faster bundlers like Vite and ESBuild', 'Webpack Future', 292),
(5272, '46:16', 'Farewell to current Syntax studio', 'Farewell Studio', 292),
(5273, '00:33', 'Welcome from Toronto after Syntax Summit', 'Intro', 293),
(5274, '02:33', 'Century tracks errors and exceptions', 'Century', 293),
(5275, '04:23', 'Netlify makes Next.js work well', 'Next.js', 293),
(5276, '06:12', 'Next.js provides great hosting for React', 'Next.js', 293),
(5277, '09:12', 'Firefox used to lead but now Safari does', 'Browsers', 293),
(5278, '10:49', 'Firefox has more issues than other browsers now', 'Firefox', 293),
(5279, '12:14', 'Safari has been adding lots of new CSS features', 'Safari', 293),
(5280, '15:39', 'CSS is easy with Grid and Flexbox', 'CSS', 293),
(5281, '17:40', 'Serverless databases differ in features', 'Databases', 293),
(5282, '20:02', 'Builder.io allows editors to create components', 'Forms', 293),
(5283, '23:10', 'No good service to bridge CMS forms to apps', 'Forms', 293),
(5284, '26:52', 'WordPress forms work well but hard to integrate', 'Forms', 293),
(5285, '29:25', 'Turbo removed TypeScript, different than Svelte', 'TypeScript', 293),
(5286, '31:32', 'Next.js has had lots of API changes recently', 'Next.js', 293),
(5287, '35:24', 'Electron uses Chromium, Turborepo uses system browser', 'Desktop apps', 293),
(5288, '36:04', 'React Native makes native iOS and Android apps', 'React Native', 293),
(5289, '38:34', 'Turborepo removed TypeScript for performance', 'Turborepo', 293),
(5290, '41:20', 'Sentry knows a lot about errors and exceptions', 'Errors', 293),
(5291, '45:04', 'Safari adds CSS features even without full support', 'CSS', 293),
(5292, '49:11', 'Need to know enough CSS with JavaScript', 'CSS', 293),
(5293, '50:02', 'CSS is required as part of front-end job', 'CSS', 293),
(5294, '51:17', 'Explanation of computing terms like process and daemon', 'Computing', 293),
(5295, '00:40', 'New show discussing Syntax website secret sauce', 'New show', 294),
(5296, '01:19', 'Got name Secret Sauce from whiteboard in Toronto', 'Name origin', 294),
(5297, '01:34', 'Want to know tech stacks of large companies', 'Tech stacks', 294),
(5298, '02:23', 'Google Docs rendering episode was great example', 'Google Docs', 294),
(5299, '02:51', 'Email or use forms to suggest future secret sauce topics', 'Suggest topics', 294),
(5300, '05:11', 'Using SvelteKit frontend, Node.js backend', 'Stack', 294),
(5301, '05:19', 'Serverless functions for API and data tasks', 'Serverless', 294),
(5302, '06:46', 'Using Mux\'s MediaChrome for audio player', 'MediaChrome', 294),
(5303, '07:29', 'Fuzzy search allows quick finding episodes', 'Fuzzy search', 294),
(5304, '08:01', 'FlexSearch powers fuzzy search via worker', 'FlexSearch', 294),
(5305, '09:21', 'FlexSearch builds index from database call', 'Index building', 294),
(5306, '12:29', 'Global styles, then scoped component styles', 'Styles', 294),
(5307, '13:10', 'Some global utilities for common needs', 'Global utils', 294),
(5308, '13:31', 'Layout utilities help component placement', 'Layout utils', 294),
(5309, '14:13', 'Using Svelte animation and page transitions', 'Animations', 294),
(5310, '15:49', 'Page transitions via CSS and onNavigate', 'Page transitions', 294),
(5311, '16:18', 'Using Prettier, PostCSS, PNPM', 'Tooling', 294),
(5312, '17:10', 'Enforcing snake_case with ESLint', 'Snake case', 294),
(5313, '19:00', 'Using MySQL database with Prisma', 'Database', 294),
(5314, '20:19', 'Prisma auto-generates types from schema', 'Types from schema', 294),
(5315, '21:31', 'Using Deepgram, OpenAI, Anthropic for AI', 'AI services', 294),
(5316, '23:32', 'TypeScript provides compile-time checking', 'TypeScript', 294),
(5317, '24:37', 'Using Playwright for browser testing', 'Playwright testing', 294),
(5318, '25:27', 'Hosted on Vercel, may try Fly.io', 'Hosting', 294),
(5319, '26:22', 'Fly.io good for longer processes', 'Fly benefits', 294),
(5320, '27:35', 'PlanetScale for MySQL database', 'PlanetScale', 294),
(5321, '01:10', 'Podcast hosts discuss annual horror stories episode', 'Intro', 295),
(5322, '01:40', 'Story about accidentally deploying a crypto copy paste bug', 'Crypto bug', 295),
(5323, '03:05', 'Discussion about misunderstanding GitHub comment acronym LGTM', 'LGTM meaning', 295),
(5324, '04:10', 'Voting algorithm bug caused wrong Big Brother contestant to be eliminated', 'Big Brother bug', 295),
(5325, '05:57', 'Only 6 laptops could fix NPM when it crashed', 'NPM laptops', 295),
(5326, '07:45', 'Autocompletion mistake deleted home directories', 'Directory deletion', 295),
(5327, '08:57', 'Payment form submitted before confirmation', 'Payments submitted', 295),
(5328, '11:25', 'Intern dropped analytics database', 'Database dropped', 295),
(5329, '12:15', 'SQL injection attack dropped production database', 'Production dropped', 295),
(5330, '13:00', 'Typo took down polyfill.io', 'polyfill.io down', 295),
(5331, '14:32', 'Bitcoin mining exploit drained AWS budget', 'Bitcoin mining', 295),
(5332, '16:06', 'Command deleted dataset for AI training', 'Dataset deleted', 295),
(5333, '17:48', 'Chat feature DDoSed own servers', 'Accidental DDoS', 295),
(5334, '19:08', 'Profanity generated in URL shortener', 'Profanity generated', 295),
(5335, '20:45', 'Office servers containing source code stolen', 'Source code stolen', 295),
(5336, '22:55', 'Wrong database connected, charged cards repeatedly', 'Cards overcharged', 295),
(5337, '24:20', 'Turned on unfinished feature, customers got free items', 'Free stuff shipped', 295),
(5338, '25:32', 'Autocomplete mistake deleted directories', 'Directories deleted', 295),
(5339, '27:24', 'Shipped hardware with no remote access', 'No remote access', 295),
(5340, '28:30', 'Semicolon typo crashed production site', 'Production crashed', 295),
(5341, '31:20', 'Charging and updating card balances together', 'Double charges', 295),
(5342, '33:05', 'First commit brought down site before flight', 'Site down before flight', 295),
(5343, '36:25', 'Regex bottleneck crashed site for days', 'Regex crash', 295),
(5344, '37:35', 'Truncated production database accidentally', 'Production truncated', 295),
(5345, '38:25', 'Wrong form sent medical equipment to customers', 'Wrong orders shipped', 295),
(5346, '39:08', 'Load balancer served wrong sites', 'Wrong sites served', 295),
(5347, '40:46', 'Leaked credentials indexed by search engines', 'Credentials leaked', 295),
(5348, '43:01', 'Home directory deletion cautionary tale', 'Directory deletion caution', 295),
(5349, '02:34', 'Junior dev deployed JS without null check, breaking site', 'Null check', 296),
(5350, '04:20', 'Accidental embarrassing test page published to live site', 'Test page', 296),
(5351, '06:09', 'Code review oversight led to login vulnerabilities', 'Vulnerabilities', 296),
(5352, '08:23', 'Cleaning duplicate JSON data caused education issues', 'JSON issues', 296),
(5353, '13:14', 'Disallowed search engine crawling tanked rankings', 'Crawling error', 296),
(5354, '14:55', 'Wrong AWS deletion command wiped customer files', 'Wrong deletion', 296),
(5355, '16:22', 'Deleted Postgres database, team lost access', 'Lost database', 296),
(5356, '17:17', 'Pushed dev code to production Android app', 'Wrong env push', 296),
(5357, '18:44', 'Forgot test condition, sent mass emails', 'Mass email', 296),
(5358, '19:53', 'Misconfigured phone number sent to adult line', 'Wrong number', 296),
(5359, '23:20', 'Garbage account data required manual reentry', 'Manual data fix', 296),
(5360, '24:13', 'Incorrect wire transfer account nearly lost $10k', 'Wire transfer error', 296),
(5361, '26:50', 'Forgot to remove test payment integration code', 'Test code to production', 296),
(5362, '02:34', 'If done well, what you\'re doing is making it possible to achieve new things without micromanaging details', 'Abstractions enable progress', 297),
(5363, '03:06', 'New hardware like GPUs are driving the need for new high level programming languages', 'New hardware needs new languages', 297),
(5364, '04:02', 'GPUs were originally built for graphics but are well-suited for AI due to parallelism', 'GPUs enable AI via parallelism', 297),
(5365, '08:13', 'Compiled vs interpreted refers to implementation, not the language itself', 'Compiled vs interpreted', 297),
(5366, '09:18', 'Mojo can be compiled to binary, interpreted, or use compilers at runtime like JavaScript', 'Mojo implementation flexibility', 297),
(5367, '12:24', 'Mojo is a new language in the Python family, fixing Python\'s need to use C extensions', 'Mojo replaces Python C extensions', 297),
(5368, '15:29', 'Python was chosen over JS for Mojo due to ML community preference', 'Python preferred by ML community', 297),
(5369, '18:11', 'Most AI and ML is in Python currently, but JS community is building more libraries', 'Python leads in ML, JS catching up', 297),
(5370, '22:00', 'Mojo can scale down to run on smaller systems unlike Python', 'Mojo scales down', 297),
(5371, '29:26', 'ML models are functions with weights learned from data rather than programmed', 'ML models learn from data', 297),
(5372, '31:12', 'ML models have billions of parameters trained on large datasets to perform complex tasks', 'ML models have lots of learned parameters', 297),
(5373, '35:11', 'Python was lucky to be chosen early by projects like TensorFlow but also has strong data science ecosystem', 'Python ecosystem propelled it in ML', 297),
(5374, '36:07', 'Fragmentation of languages, frameworks and hardware makes AI development challenging', 'AI development fragmentation', 297),
(5375, '37:01', 'Modular\'s AI engine gives TensorFlow/PyTorch developers superpowers without fragmentation', 'Modular AI engine', 297),
(5376, '40:42', 'When creating a new language, start with goals and learn from other languages', 'New language design process', 297),
(5377, '43:37', 'AI will create new jobs and give programmers superpowers rather than replace them', 'AI increases productivity', 297),
(5378, '47:03', 'AI can help interact with the natural world and be more useful in people\'s lives', 'AI interacts with real world', 297),
(5379, '00:33', 'Brad Frost discusses design systems and building stuff for the web', 'Intro', 298),
(5380, '03:51', 'Brad\'s background - came up through agency work, now consultant helping orgs build design systems', 'Background', 298),
(5381, '07:15', 'Design system is the official story of how an org designs and builds UIs', 'Definition', 298),
(5382, '08:51', 'The 3 main assets of a design system - design library, code library, documentation', '3 Assets', 298),
(5383, '10:12', 'Documentation website brings the design system together, helps teach it', 'Documentation', 298),
(5384, '10:28', 'Web components are best for delivering reusable front-end code', 'Web Components', 298),
(5385, '16:06', 'Code is source of truth, Figma follows code', 'Code First', 298),
(5386, '19:13', 'Design systems allow customized API and frameworks for teams', 'API Layer', 298),
(5387, '23:56', 'Teams can still use React/Angular while powered by web components', 'Framework Layer', 298),
(5388, '25:14', 'Design system web components end up powering all products and apps', 'Powering Products', 298),
(5389, '26:22', 'Design systems help with consistency across components', 'Consistency', 298),
(5390, '30:18', 'Component-driven workflow benefits any size organization', 'Any Size Org', 298),
(5391, '31:39', 'Start simple, add complexity only as needed', 'Start Simple', 298),
(5392, '35:15', 'Design tokens define brand attributes like colors', 'Design Tokens', 298),
(5393, '36:43', 'Design tokens help support theming, dark mode, etc', 'Theming', 298),
(5394, '40:24', 'Overcome developer skepticism by building trust', 'Trust', 298),
(5395, '41:46', 'Developers are often protective of their codebase', 'Protective Devs', 298),
(5396, '43:14', 'When design system doesn\'t meet needs, have a conversation', 'Conversations', 298),
(5397, '44:52', 'Include gradients in design tokens', 'Gradients', 298),
(5398, '46:16', 'Naming is critical but hard', 'Naming', 298),
(5399, '47:11', 'Good naming improves developer experience', 'Developer Experience', 298),
(5400, '48:30', 'Tools like Figma are still new to good naming', 'Figma Naming', 298),
(5401, '49:40', 'Document decisions in markdown docs and Storybook', 'Documentation', 298),
(5402, '50:46', 'Brad recommends the book Thinking in Systems', 'Book Rec', 298),
(5403, '53:23', 'Excited about container queries for design systems', 'Container Queries', 298),
(5404, '54:46', 'Excited about improvements to native CSS capabilities', 'Native CSS', 298),
(5405, '55:20', 'Standards and native tech are a pragmatic bet', 'Web Standards', 298),
(5406, '00:16', 'Update show on AI and ML for developers', 'AI update', 299),
(5407, '03:36', 'Vercel\'s new vzero.dev tool to generate React UI from prompts', 'Vercel vzero', 299),
(5408, '09:34', 'Anthropic\'s Claude chatbot and API', 'Anthropic Claude', 299),
(5409, '18:48', 'Cloudflare\'s new AI services in Workers', 'Cloudflare AI', 299),
(5410, '27:18', 'New AI hardware devices', 'AI hardware', 299),
(5411, '02:33', 'jQuery added to browser', 'jQuery', 300),
(5412, '02:46', 'browser compatibility', 'compatibility', 300),
(5413, '02:52', 'ease of DOM selection', 'DOM selection', 300),
(5414, '03:15', 'traverse DOM with siblings', 'DOM traversal', 300),
(5415, '03:53', 'fuzzy matching selectors', 'fuzzy selectors', 300),
(5416, '04:09', 'animation helpers', 'animations', 300),
(5417, '05:49', 'realizing power of jQuery plugins', 'plugins', 300),
(5418, '08:01', 'fetch API for requests', 'fetch API', 300),
(5419, '08:34', 'Express for server routing', 'Express', 300),
(5420, '09:35', 'fetch API standardization', 'standardization', 300),
(5421, '12:40', 'Hapi as Express replacement', 'Hapi', 300),
(5422, '12:55', 'Hapi uses request/response', 'request/response', 300),
(5423, '15:08', 'Underscore/Lodash utilities', 'Underscore', 300),
(5424, '16:26', 'Maps/Sets replace Underscore', 'Maps/Sets', 300),
(5425, '18:17', 'Spread instead of Lodash', 'Spread', 300),
(5426, '20:14', 'RequireJS module loading', 'RequireJS', 300),
(5427, '21:15', 'Left Pad NPM breakage', 'Left Pad', 300),
(5428, '22:58', 'String pad instead of Left Pad', 'String pad', 300),
(5429, '23:33', '960 Grid System', '960 Grid', 300),
(5430, '25:23', 'CSS Grid instead of 960', 'CSS Grid', 300),
(5431, '26:28', 'Sass/Less preprocessing', 'Sass/Less', 300),
(5432, '27:15', 'WebSockets replacing Socket.IO', 'WebSockets', 300),
(5433, '30:17', 'Temporal replacing date libs', 'Temporal', 300),
(5434, '30:43', 'Observables being standardized', 'Observables', 300),
(5435, '00:23', 'State of CSS survey: CSS frameworks', 'CSS survey', 301),
(5436, '02:33', 'Most used CSS framework', 'Frameworks', 301),
(5437, '04:31', 'Bootstrap prevalence and history', 'Bootstrap', 301),
(5438, '07:01', 'Decline in Foundation framework usage', 'Foundation', 301),
(5439, '08:20', 'Discussing various CSS component libraries', 'Components', 301),
(5440, '11:15', 'Decline in CSS-in-JS solutions', 'CSS-in-JS', 301),
(5441, '12:33', 'Reasons for decline of CSS-in-JS', 'Decline reasons', 301),
(5442, '15:08', 'Power of CSS custom properties', 'Properties', 301),
(5443, '17:10', 'Surprise at CSS modules popularity', 'Modules', 301),
(5444, '18:16', 'Review of various CSS utilities', 'Utilities', 301),
(5445, '21:45', 'Lightning CSS usage growth prediction', 'Lightning CSS', 301),
(5446, '23:25', 'Project Wallace for CSS analysis', 'Project Wallace', 301),
(5447, '24:49', 'Atomizer inline CSS generator', 'Atomizer', 301),
(5448, '25:49', 'Primary browser usage', 'Browsers', 301),
(5449, '27:24', 'Safari dev tools issues', 'Safari tools', 301),
(5450, '29:05', 'Industry sector breakdown', 'Industries', 301),
(5451, '32:10', 'CSS and JavaScript time split', 'Time split', 301),
(5452, '33:30', 'Browser compatibility pain points', 'Compatibility', 301),
(5453, '34:57', 'Desired missing CSS features', 'Missing features', 301),
(5454, '37:09', 'SVG support discussion', 'SVG', 301),
(5455, '39:55', 'Grid line styling interest', 'Grid lines', 301),
(5456, '41:33', 'CSS pain points', 'Pain points', 301),
(5457, '42:43', 'Powerful CSS layout capabilities', 'Layouts', 301),
(5458, '45:12', 'Learning resources used', 'Learning', 301),
(5459, '46:26', 'Notable CSS educators', 'Educators', 301),
(5460, '47:53', 'Most adopted CSS feature', 'Adopted feature', 301),
(5461, '48:43', 'Most commented on CSS feature', 'Commented feature', 301),
(5462, '49:08', 'Highest user retention rate feature', 'Retention rate', 301),
(5463, '49:42', 'Most user write-in votes', 'Write in votes', 301),
(5464, '05:03', 'White light better for concentrating, warm tones more calming', 'lighting tips', 302),
(5465, '08:41', 'Protect cables on floor to avoid fire hazard', 'cable safety', 302),
(5466, '13:00', 'Baby wipes for quick cleaning between tasks', 'cleaning tips', 302),
(5467, '18:33', 'Comfort is key for noise-canceling headphones', 'headphone tips', 302),
(5468, '23:19', 'Rollerblade wheels for chair make moving smooth', 'chair wheels', 302),
(5469, '02:51', 'NoImplicitAny prevents TypeScript from inferring any for untyped variables', 'NoImplicitAny', 303),
(5470, '04:58', 'NoImplicitThis requires explicitly typing this in functions', 'NoImplicitThis', 303),
(5471, '06:25', 'StrictFunctionTypes prevents assigning mismatched function types', 'StrictFunctions', 303),
(5472, '07:35', 'AlwaysStrict enables strict mode to prevent redeclaring variables', 'AlwaysStrict', 303),
(5473, '08:10', 'Strict mode can prevent certain JavaScript edge cases', 'StrictMode', 303),
(5474, '08:54', 'Strict mode prevents creating undeclared variables', 'UndeclaredVars', 303),
(5475, '10:14', 'StrictNullChecks requires null checking before property access', 'StrictNullChecks', 303),
(5476, '11:19', 'StrictBindCallApply enables type checking on bind, call and apply', 'BindCallApply', 303),
(5477, '12:42', 'StrictPropertyInitialization requires setting class properties in constructor', 'ClassProps', 303),
(5478, '13:41', 'UseUnknownInCatchVariables sets catch variable types to unknown instead of any', 'UnknownCatch', 303),
(5479, '00:27', 'Today\'s episode is on JavaScript coding interview questions', 'coding interview', 304),
(5480, '02:33', 'Scott worked on a GraphQL plugin over the weekend', 'GraphQL plugin', 304),
(5481, '04:13', 'Definition of a first class function in JavaScript', 'first class function', 304),
(5482, '06:11', 'Purpose and usage of Object.is in JavaScript', 'Object.is', 304),
(5483, '09:43', 'Purpose of the Error object in JavaScript', 'Error object', 304),
(5484, '12:27', 'Definition and benefits of minification in JavaScript', 'minification', 304),
(5485, '15:40', 'Explanation of label statements in JavaScript', 'label statements', 304),
(5486, '19:22', 'Methods available on a WeakSet in JavaScript', 'WeakSet methods', 304),
(5487, '23:07', 'Purpose of preventDefault in JavaScript events', 'preventDefault', 304),
(5488, '25:15', 'Definition of the spread operator in JavaScript', 'spread operator', 304),
(5489, '30:24', 'Ways to dynamically load CSS and JavaScript', 'dynamic loading', 304),
(5490, '32:01', 'Explanation of tasks in the JavaScript event loop', 'event loop tasks', 304),
(5491, '34:20', 'Definition of a WeakMap in JavaScript', 'WeakMap', 304),
(5492, '38:01', 'How to get query string values in JavaScript', 'query strings', 304),
(5493, '41:06', 'Purpose of Array.prototype.some in JavaScript', 'Array.some', 304),
(5494, '42:22', 'How to delete browser cookies in JavaScript', 'delete cookies', 304),
(5495, '04:12', 'Freelancers often have toxic clients', 'Toxic clients', 305),
(5496, '05:53', 'Clients without clear project vision', 'Unclear vision', 305),
(5497, '08:40', 'Scope creep clients keep expanding project', 'Scope creep', 305),
(5498, '11:00', 'Ill communicators contact at odd times', 'Bad communication', 305),
(5499, '15:33', '“Downtown Donovan” brags too much', 'Bragging client', 305),
(5500, '00:02', 'Code breaks often when editing', 'Code breaks', 306),
(5501, '00:04', 'Learn through repetition over time', 'Compound learning', 306);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(5502, '00:05', 'Read error messages carefully', 'Read errors', 306),
(5503, '00:06', 'Take walks when stuck on bugs', 'Take walks', 306),
(5504, '00:07', 'Write comments to outline code', 'Scaffold comments', 306),
(5505, '00:08', 'Struggling is normal for all devs', 'All struggle', 306),
(5506, '00:09', 'Replicate designs pixel perfect', 'Pixel perfect', 306),
(5507, '00:10', 'Learn command line basics', 'Command line', 306),
(5508, '00:11', 'Soft skills are as important as coding', 'Soft skills', 306),
(5509, '00:12', 'Always be interviewing to practice', 'Practice interviewing', 306),
(5510, '00:13', 'Learn vanilla JavaScript deeply', 'Vanilla JS', 306),
(5511, '00:14', 'Understand tradeoffs of choices', 'Know tradeoffs', 306),
(5512, '00:15', 'Build projects you are excited about', 'Exciting projects', 306),
(5513, '00:29', 'CSS hate is misguided; Scott loves CSS', 'CSS hate', 307),
(5514, '01:16', 'Prismic sponsors Syntax podcast', 'Ad', 307),
(5515, '02:28', 'LogRocket sponsors Syntax podcast', 'Ad', 307),
(5516, '03:21', 'CSS gets a bad rap with jokes and memes', 'CSS jokes', 307),
(5517, '04:09', 'Understanding CSS display types fixes layout issues', 'Display types', 307),
(5518, '05:45', 'Flexbox and Grid simplify CSS layouts', 'Layout tools', 307),
(5519, '06:08', 'Flexbox and Grid should be used for layouts instead of floats', 'No floats', 307),
(5520, '07:34', 'Wes and Scott plug CSS courses', 'Course plugs', 307),
(5521, '08:13', 'Scoping and cascading in CSS causes frustration', 'Scoping issues', 307),
(5522, '08:48', 'Use scoping tools like BEM to write cleaner CSS', 'Use BEM', 307),
(5523, '09:00', 'Avoid using IDs and !important in CSS', 'Avoid footguns', 307),
(5524, '10:23', 'Avoid !important; fix underlying issues instead', 'No !important', 307),
(5525, '11:09', 'Use dev tools styles panel to debug styles', 'Dev tools debugging', 307),
(5526, '12:08', 'Check CSS is linked and class names are correct', 'Debug tips', 307),
(5527, '13:10', 'Purge unused CSS for savings', 'Purge CSS', 307),
(5528, '14:55', 'Rewrite overly complex CSS from scratch', 'Rewrite CSS', 307),
(5529, '15:37', 'Treat CSS as a first-class citizen', 'First class CSS', 307),
(5530, '16:18', 'Plan CSS structure before coding', 'Plan styles', 307),
(5531, '17:23', 'CSS is great; focus on foundations', 'CSS is great', 307),
(5532, '00:11', 'Introduction to potluck episode', 'intro', 308),
(5533, '00:37', 'How to submit questions for potluck episodes', 'submit', 308),
(5534, '00:46', 'Sponsor ads', 'ads', 308),
(5535, '04:10', 'Memoization caches results of functions to avoid repeat calculations', 'memoization', 308),
(5536, '07:28', 'Advice on knowing when you\'re ready for a full-time developer job', 'full-time', 308),
(5537, '09:28', 'Ethics of using purchased UI template for freelance project', 'ethics', 308),
(5538, '13:36', 'How specific React components should be', 'components', 308),
(5539, '17:11', 'Tips for reusable vs. specific React components', 'reusable', 308),
(5540, '21:05', 'Moist code vs. DRY code', 'moist code', 308),
(5541, '24:06', 'Scott\'s old technique of using unlisted YouTube videos', 'YouTube', 308),
(5542, '29:20', 'LogRocket for debugging errors on websites', 'LogRocket', 308),
(5543, '31:27', 'Funny nonsense question from listener', 'funny', 308),
(5544, '38:43', 'Using NPM packages in Netlify functions', 'Netlify', 308),
(5545, '41:26', 'Firefox font debugging tools', 'Firefox fonts', 308),
(5546, '46:43', 'Dealing with underestimating timeline on fixed-price freelance project', 'freelance', 308),
(5547, '51:10', 'Netflix show I Think You Should Leave', 'Netflix', 308),
(5548, '52:37', 'Underground wire detector tool', 'wire detector', 308),
(5549, '00:26', 'Intro to link tag episode', 'Intro', 309),
(5550, '01:05', 'Sponsors: Sanity CMS and Sentry error monitoring', 'Sponsors', 309),
(5551, '04:16', 'Genesis of the episode from Twitter suggestion', 'Genesis', 309),
(5552, '04:58', 'Link tag not actually for anchor links', 'Not for links', 309),
(5553, '05:26', 'Link tag commonly used for loading CSS', 'CSS loading', 309),
(5554, '06:15', 'Media attributes for conditional CSS loading', 'Media attributes', 309),
(5555, '07:31', 'Link tag used for loading web fonts', 'Web fonts', 309),
(5556, '08:08', 'Link tag used for favicons', 'Favicons', 309),
(5557, '08:35', 'Link tag for preloading/prefetching resources', 'Preloading', 309),
(5558, '09:17', 'Prefetching hover images with link tag', 'Hover images', 309),
(5559, '10:06', 'Prefetching/preloading with link tag vs JavaScript', 'Prefetch vs JS', 309),
(5560, '10:49', 'Preload endpoint data with link tag', 'Preload data', 309),
(5561, '11:22', 'Rel attributes define link tag behavior', 'Rel attributes', 309),
(5562, '12:26', 'Preconnect for faster external resources', 'Preconnect', 309),
(5563, '12:51', 'Preconnect optimization details', 'Preconnect details', 309),
(5564, '13:23', 'Module preload flattens dependencies', 'Module preload', 309),
(5565, '13:46', 'Integrity checksums for unchanged resources', 'Integrity', 309),
(5566, '02:39', 'Emailer asks for beginner website episode', 'Question', 310),
(5567, '02:47', 'Explaining basic website concepts for beginners', 'Overview', 310),
(5568, '04:20', 'HTML is backbone and structure of a website', 'HTML', 310),
(5569, '05:04', 'HTML elements for images, text, divisions', 'Elements', 310),
(5570, '06:42', 'HTML elements divide up structure and content', 'Structure', 310),
(5571, '08:11', 'CSS adds styles and appearance to HTML', 'CSS', 310),
(5572, '09:26', 'Cascade allows styling many elements', 'Cascade', 310),
(5573, '10:03', 'CSS sections for layout, text, animations', 'Sections', 310),
(5574, '11:08', 'Adding CSS to HTML page', 'Adding CSS', 310),
(5575, '00:27', 'Introducing TypeScript utility types', 'Intro', 311),
(5576, '03:29', 'Overview of TypeScript developer levels', 'Levels', 311),
(5577, '06:02', 'Mention of type-challenges.com', 'Challenges', 311),
(5578, '07:19', 'Partial utility type', 'Partial', 311),
(5579, '08:21', 'Readonly utility type', 'Readonly', 311),
(5580, '09:02', 'Required utility type', 'Required', 311),
(5581, '09:33', 'Record utility type', 'Record', 311),
(5582, '10:48', 'Omit utility type', 'Omit', 311),
(5583, '11:37', 'Pick utility type', 'Pick', 311),
(5584, '12:45', 'ReturnType utility type', 'ReturnType', 311),
(5585, '13:21', 'Case manipulation utilities', 'Case', 311),
(5586, '02:35', 'Should small businesses use WordPress or more advanced tech', 'Tech choice', 312),
(5587, '03:14', 'Clients care about results not the tech used', 'Client focus', 312),
(5588, '04:18', 'Sell clients on benefits of newer tech if appropriate', 'Sell benefits', 312),
(5589, '05:18', 'Don\'t force certain tech if WordPress meets their needs', 'Right tool', 312),
(5590, '06:31', 'Many clients update sites via mobile so optimize for that', 'Mobile-first', 312),
(5591, '07:37', 'Preview and collaboration key for static site CMS adoption', 'Preview/collab', 312),
(5592, '09:00', 'Using 3rd party services requires trust but can save time', 'Trust services', 312),
(5593, '11:01', 'Established services often more secure than new options', 'Established best', 312),
(5594, '14:20', 'CI services like Vercel easier than self-hosted options', 'Use CI services', 312),
(5595, '16:31', 'Back end hosting harder, look into serverless, databases', 'Tricky backends', 312),
(5596, '18:28', 'Services like Render simplify Node app hosting', 'Use Render', 312),
(5597, '20:05', 'Self-hosting can be cheaper but requires more maintenance', 'Self host pros/cons', 312),
(5598, '23:34', 'Drupal provides flexible data and admin options', 'Drupal data', 312),
(5599, '25:27', 'Most Drupal users are fans though some self-loathe', 'Drupal opinions', 312),
(5600, '35:06', 'Component CSS with global helpers and utilities ideal', 'CSS approach', 312),
(5601, '37:59', 'Scoping key for CSS maintainability', 'Scope CSS', 312),
(5602, '39:39', 'Leverage professional experience during web dev interviews', 'Leverage experience', 312),
(5603, '42:49', 'Best fan placement for home cooling', 'Fan placement', 312),
(5604, '45:22', 'Podcast on minor movie character interviews', 'Podcast pick', 312),
(5605, '00:43', 'Hot code push for latest web dev stuff', 'Latest stuff', 313),
(5606, '02:53', 'GitHub Copilot AI for code autocompletion', 'Copilot', 313),
(5607, '08:16', 'Next.js 11 new performance updates', 'Next.js', 313),
(5608, '08:56', 'Astro for shipping less JavaScript', 'Astro', 313),
(5609, '09:51', 'Notion API now in beta', 'Notion API', 313),
(5610, '11:34', 'Petite Vue for sprinkling interactivity', 'Petite Vue', 313),
(5611, '14:01', 'Stackblitz for node in the browser', 'Stackblitz', 313),
(5612, '15:32', 'Solid JS 1.0 released', 'Solid JS', 313),
(5613, '16:41', 'Stately for state machine visualization', 'Stately', 313),
(5614, '18:20', 'Web3 JavaScript API overview', 'Web3', 313),
(5615, '00:01', 'Intro to podcast episode 374', 'Intro', 314),
(5616, '02:07', 'Guests introduce themselves', 'Introductions', 314),
(5617, '03:26', 'Discussion on being fans of each other\'s podcasts', 'Podcast fans', 314),
(5618, '04:16', 'Wes and Scott aim to get people excited about web development', 'Podcast goal', 314),
(5619, '05:24', 'Scott\'s background is more CSS/HTML than JavaScript', 'Scott\'s background', 314),
(5620, '06:45', 'Even HTML has a lot of depth to discuss', 'HTML depth', 314),
(5621, '08:23', 'Scott building Level Up Tutorials site in SvelteKit', 'SvelteKit', 314),
(5622, '10:32', 'Stack: SvelteKit frontend, Fastify backend, GraphQL', 'Stack', 314),
(5623, '12:02', 'Impressed with SvelteKit developer experience so far', 'SvelteKit DX', 314),
(5624, '14:08', 'Wes likes using Next.js recently', 'Next.js', 314),
(5625, '15:03', 'Next.js becoming a stable platform', 'Next.js stable', 314),
(5626, '15:42', 'Stack: Next.js, React, GraphQL, Keystone CMS', 'Wes stack', 314),
(5627, '16:40', 'GraphQL avoids repetitive code of REST APIs', 'GraphQL vs REST', 314),
(5628, '17:32', 'REST won\'t completely go away, URLs won\'t die', 'REST remains', 314),
(5629, '18:21', 'KeystoneJS provides nice CMS on top of Prisma', 'Keystone JS', 314),
(5630, '19:48', 'SvelteKit very fast due to Vite build tool', 'SvelteKit fast', 314),
(5631, '20:33', 'Astro seems interesting for SSR, components', 'Astro', 314),
(5632, '21:24', 'Lots of great options currently in JS ecosystem', 'JS ecosystem', 314),
(5633, '22:03', 'Next.js will benefit from React improvements', 'Next + React', 314),
(5634, '23:26', 'WordPress lacks dev experience of JS stacks', 'WordPress DX', 314),
(5635, '24:05', 'Sentry sponsor spot', 'Sentry ad', 314),
(5636, '25:09', 'Prismic sponsor spot', 'Prismic ad', 314),
(5637, '26:36', 'Generated GraphQL helps avoid React query boilerplate', 'Generated GraphQL', 314),
(5638, '27:43', 'Keystone provides good permissions model', 'Keystone permissions', 314),
(5639, '28:37', 'Permissions important but difficult to implement well', 'Permissions difficult', 314),
(5640, '29:53', 'WordPress is still a good system for many sites', 'WordPress still good', 314),
(5641, '31:27', 'Working on WordPress can be limiting after using modern JS stacks', 'WP limiting', 314),
(5642, '32:40', 'Speculation on why WordPress acquired Day One journaling app', 'Day One acquisition', 314),
(5643, '34:29', 'Goal of podcast is to help understand the world of web dev', 'Podcast goal', 314),
(5644, '35:25', 'Important to learn new tech occasionally for career growth', 'Learn new tech', 314),
(5645, '36:16', 'Don\'t adopt brand new tech too early', 'Don\'t adopt too early', 314),
(5646, '37:07', 'Vue.js shoutout', 'Vue shoutout', 314),
(5647, '38:22', 'Chris exploring Astro for CodePen use case', 'Astro for CodePen', 314),
(5648, '39:50', 'Balancing not needing to learn everything but keeping up to some degree', 'Balance learning', 314),
(5649, '41:07', 'Hard to stay away from web dev as a hobby even on breaks', 'Can\'t escape web dev', 314),
(5650, '42:31', 'Learning fatigue if feel like just another thing to learn', 'Learning fatigue', 314),
(5651, '43:39', 'Fundamentals same across frameworks', 'Framework fundamentals', 314),
(5652, '44:59', 'Fun of new tech is syntax and improved DX', 'New tech fun', 314),
(5653, '46:53', 'Full migration to Next.js eventually for CodePen', 'CodePen Next eventual', 314),
(5654, '47:20', 'CodePen too big for static site generation', 'CodePen too big for SSG', 314),
(5655, '48:04', 'Possibility of just editor section in Next.js', 'Editor in Next', 314),
(5656, '49:35', 'Next.js provides server rendering at sub route initially', 'Next partial migration', 314),
(5657, '50:51', 'Cloudinary sponsor spot', 'Cloudinary ad', 314),
(5658, '51:15', 'Transition to picks section', 'Picks intro', 314),
(5659, '53:21', 'Dave\'s anime pick: Haikyu volleyball anime', 'Haikyu pick', 314),
(5660, '55:32', 'Dave\'s other pick: Nintendo Garage game builder', 'Nintendo Garage pick', 314),
(5661, '56:50', 'Wes lawn care YouTube picks', 'Lawn care picks', 314),
(5662, '04:46', 'Browser requests /favicon.ico by default', 'default request', 315),
(5663, '05:06', 'Changing PNG to ICO works for favicon', 'file hack', 315),
(5664, '06:48', 'Upload square image to favicon generator site', 'generator site', 315),
(5665, '08:24', 'Provide multiple sizes and reduce detail for small icons', 'multiple sizes', 315),
(5666, '09:44', '.ico is the default favicon file format', '.ico format', 315),
(5667, '10:11', 'Changing PNG to ICO works for favicon', 'file hack', 315),
(5668, '11:33', 'Safari now supports SVG favicons', 'SVG support', 315),
(5669, '12:18', '130x130px is too small for retina displays', 'size too small', 315),
(5670, '13:38', 'Can animate favicon with GIF or canvas', 'animated favicon', 315),
(5671, '14:37', 'Gmail likely generates favicon numbers on the fly', 'dynamic favicon', 315),
(5672, '15:49', 'Favicon cache issues are improved now', 'cache improved', 315),
(5673, '16:31', 'Can force favicon update by deleting and resetting link tag', 'force favicon update', 315),
(5674, '16:46', 'iOS now supports theme color meta tag', 'iOS theme color', 315),
(5675, '17:52', 'Use CSS in SVG favicon for dark mode', 'dark mode hack', 315),
(5676, '18:47', 'No way to target favicon by OS dark mode', 'no dark target', 315),
(5677, '19:29', 'Can generate emoji favicons on fav.farm', 'emoji favicons', 315),
(5678, '20:58', 'Animated favicon with canvas on uses.tech', 'animated canvas', 315),
(5679, '22:23', 'Don\'t use default host favicon, looks amateur', 'no default favicon', 315),
(5680, '00:18', 'Wes and Scott introduce themselves and the show format', 'Intro', 316),
(5681, '00:27', 'They will be answering questions submitted by listeners', 'Q&A intro', 316),
(5682, '00:50', 'Instructions on how to submit a question', 'Submit questions', 316),
(5683, '01:08', 'Sponsor advertisements', 'Sponsors', 316),
(5684, '01:20', 'Scott recently became an uncle again', 'Scott uncle', 316),
(5685, '02:33', 'Discussion of being a fun uncle vs inappropriate gift giver uncle', 'Uncle styles', 316),
(5686, '03:20', 'Question about using latest Svelte vs stable React', 'Svelte question', 316),
(5687, '04:29', 'Scott discusses pros/cons of bleeding edge vs stable technology', 'Bleeding edge', 316),
(5688, '05:39', 'Scott elaborates on ease of building own components in Svelte', 'Svelte components', 316),
(5689, '06:49', 'More discussion on risks of vendor lock-in with Next.js hosting', 'Next.js lock-in', 316),
(5690, '08:53', 'Question on severing ties between projects to start fresh', 'Sever project ties', 316),
(5691, '09:47', 'Scott explains deleting .git folder removes commit history', 'Remove .git folder', 316),
(5692, '11:05', 'Question on using Create React App for production apps', 'CRA question', 316),
(5693, '12:31', 'Wes and Scott discuss moving to Next.js or Gatsby for larger apps', 'Next.js vs CRA', 316),
(5694, '13:25', 'Discussion on potential vendor lock-in issues with Next.js', 'Next.js lock-in', 316),
(5695, '15:03', 'Assessing risks of relying on services like Vercel', 'Vendor risks', 316),
(5696, '16:22', 'Transitioning from old school dev to more services reliance', 'Old vs new dev', 316),
(5697, '18:30', '.tech sponsor advertisement', 'Sponsor: .tech', 316),
(5698, '19:41', 'Question on working in government vs seeking latest technologies', 'Gov\'t work question', 316),
(5699, '21:25', 'Scott advises focusing on stability over bleeding edge tech', 'Stability over tech', 316),
(5700, '23:20', 'Wes suggests implementing changes internally in government', 'Internal gov\'t changes', 316),
(5701, '25:28', 'Excitement over new video editing software Descript', 'Descript software', 316),
(5702, '26:47', 'Google Docs as example of complex permissions system', 'Docs permissions example', 316),
(5703, '27:58', 'Question on building permission-based APIs', 'Permissions question', 316),
(5704, '28:51', 'Wes discusses access control patterns like roles and permissions', 'Access control', 316),
(5705, '30:07', 'Scott talks about role-based permissions system they use', 'Role-based permissions', 316),
(5706, '33:16', 'Sponsor: LogRocket for debugging errors', 'Sponsor: LogRocket', 316),
(5707, '34:25', 'Question on whether authentication or authorization is harder', 'Auth vs authz', 316),
(5708, '34:35', 'Question asking for advice on implementing permissions APIs', 'Permissions APIs', 316),
(5709, '36:44', 'Wes details permissions at model and field level in Keystone', 'Keystone permissions', 316),
(5710, '37:54', 'Scott reiterates their role-based permissions approach', 'Role-based permissions', 316),
(5711, '40:25', 'Question about using Rescript as alternative to TypeScript', 'Rescript question', 316),
(5712, '41:21', 'Scott finds Rescript syntax too different from JavaScript', 'Rescript syntax', 316),
(5713, '42:46', 'Wes looks for frameworks gaining adoption before investing time', 'Popular tech', 316),
(5714, '43:06', 'Scott notes he focuses on popular but leading edge technology', 'Leading edge tech', 316),
(5715, '44:44', 'Speculating about a future switch to Rescript', 'Future Rescript', 316),
(5716, '45:08', 'Question on adding more sponsors to podcast episodes', 'More sponsors', 316),
(5717, '45:41', 'Scott says additional ads preferred over patron paywall', 'Ads over paywall', 316),
(5718, '46:31', 'Scott complains about Apple\'s high Patreon cut', 'Apple\'s cut', 316),
(5719, '47:33', 'Joking about taking any big sponsorship offer', 'Big sponsors', 316),
(5720, '48:49', 'Scott admits he has no interest in learning Angular', 'No Angular', 316),
(5721, '49:39', 'Scott appreciates Angular\'s batteries-included approach', 'Angular batteries', 316),
(5722, '50:23', 'Wes gets flak for not covering all frameworks equally', 'Framework flak', 316),
(5723, '50:37', 'Joking about ridiculous fake framework names', 'Fake frameworks', 316),
(5724, '51:13', 'Sponsor: Mux video hosting', 'Sponsor: Mux', 316),
(5725, '53:11', 'Wes advises parsing spreadsheet to JSON for form data', 'Parse data for forms', 316),
(5726, '54:17', 'Wes suggests puppeteer for automating complex interactions', 'Puppeteer automation', 316),
(5727, '55:39', 'Scott sick pick of SvelteKit', 'SvelteKit pick', 316),
(5728, '56:31', 'Wes sick pick of Wyze sprinkler controller', 'Wyze sprinkler pick', 316),
(5729, '57:48', 'Scott praises Wyze controller for debugging ease', 'Wyze debugging', 316),
(5730, '58:32', 'Scott plug for Svelte course', 'Svelte course plug', 316),
(5731, '59:12', 'Wes plug for his courses on sale', 'Wes courses plug', 316),
(5732, '03:14', 'Wes asks Scott to explain what Stylelint is and why it\'s needed', 'Stylelint intro', 317),
(5733, '04:41', 'Scott explains Stylelint is a linter for CSS like ESLint is for JavaScript', 'CSS linter', 317),
(5734, '05:53', 'To use Stylelint you need to install it and create a .stylelintrc config file', 'Setup', 317),
(5735, '06:28', 'Scott says you\'ll likely need to customize the default Stylelint rules for your preferences', 'Customize rules', 317),
(5736, '07:00', 'Scott highlights the Stylelint plugin ecosystem as a major strength', 'Plugins', 317),
(5737, '08:58', 'Scott shares some of the custom Stylelint rules his team uses', 'Custom rules', 317),
(5738, '11:54', 'Wes suggests writing a custom rule to enforce gray vs grey spelling consistency', 'Gray vs grey', 317),
(5739, '14:31', 'Wes and Scott discuss the benefits of using turns over degrees for rotations', 'Turns unit', 317),
(5740, '15:56', 'Scott explains how Stylelint could augment code reviews and help managers enforce standards', 'Code reviews', 317),
(5741, '02:33', 'Scott introduces inset CSS property', 'inset CSS', 318),
(5742, '03:16', 'Scott explains inset shorthand for position values', 'inset position', 318),
(5743, '04:18', 'Discussing React 18 new features', 'React 18', 318),
(5744, '05:17', 'Automatic batching to reduce unnecessary rerenders', 'batching', 318),
(5745, '11:07', 'Suspense for data fetching and showing loading states', 'suspense', 318),
(5746, '14:21', 'Suspense list for orchestrating loading order', 'suspense list', 318),
(5747, '16:43', 'Strict effects mode for fast refreshing', 'strict mode', 318),
(5748, '19:21', 'useTransition to prevent unmounting during fetch', 'useTransition', 318),
(5749, '23:11', 'SSR improvements coming in React 18', 'SSR', 318),
(5750, '28:44', 'Server components to render HTML on server', 'server components', 318),
(5751, '35:10', 'Great explainers on React docs for new features', 'docs explainers', 318),
(5752, '03:58', 'Parcel and Vite use modern techniques like ESM and HMR for fast reloads.', 'Fast reloads', 319),
(5753, '05:16', 'Vite and Parcel rebuild files incredibly fast compared to old tools.', 'Blazing speed', 319),
(5754, '07:46', 'Vite uses Rollup for production builds while Parcel uses its own SWC compiler.', 'Different compilers', 319),
(5755, '11:36', 'Vite and Parcel automatically find and bundle all dependencies in your app.', 'Automatic bundling', 319),
(5756, '15:03', 'React, Vue, Svelte etc work out of the box with zero config.', 'Framework support', 319),
(5757, '15:52', 'Vite has handy glob imports while Parcel does not.', 'Glob imports', 319),
(5758, '17:16', 'Neither Vite nor Parcel do type checking - they rely on TSC.', 'No type checking', 319),
(5759, '19:02', 'Avoiding Babel is one reason these tools are so fast.', 'No Babel needed', 319),
(5760, '21:20', 'Vite has slightly better DX than Parcel 2, which is still in dev.', 'Vite edge for now', 319),
(5761, '00:05', 'Scott bought and sold a house, moving in August', 'Scott\'s house move', 320),
(5762, '00:25', 'Reviewing user submitted websites and portfolios', 'Website reviews', 320),
(5763, '01:07', 'Scott is getting his own office in his new house', 'Scott\'s new office', 320),
(5764, '02:30', 'Wes suggests names for Scott\'s new office', 'Office name ideas', 320),
(5765, '03:17', 'Scott and family taking a break this summer during the move', 'Summer break', 320),
(5766, '03:58', 'Reviewing website for Erica Cud', 'Erica Cud website', 320),
(5767, '06:05', 'Suggestions for improving color contrast on Erica\'s site', 'Color contrast tips', 320),
(5768, '07:50', 'Tip about setting card height based on content', 'Card height tip', 320),
(5769, '08:47', 'Overall positive feedback on simplicity of Erica\'s site', 'Erica site feedback', 320),
(5770, '09:41', 'Tip to make social links more prominent', 'Social links tip', 320),
(5771, '10:41', 'Review of Damon Bolstra\'s site - fun animations but some accessibility issues', 'Damon Bolstra site', 320),
(5772, '12:15', 'Tip to move some over the top animations to separate pages', 'Animation tip', 320),
(5773, '13:22', 'Feedback on clashy design elements on Damon\'s site', 'Damon design feedback', 320),
(5774, '14:18', 'Emphasizing importance of basic accessibility', 'Accessibility importance', 320),
(5775, '16:26', 'Tip to remove some distracting background elements', 'Background elements tip', 320),
(5776, '18:18', 'Story about kid eating too many granola bars', 'Granola bar story', 320),
(5777, '18:58', 'Scott\'s sprinkler was damaged during house sale', 'Sprinkler damage', 320),
(5778, '21:54', 'Review of Walter Jenkins\' site', 'Walter Jenkins site', 320),
(5779, '23:06', 'Feedback on scroll effects and typography', 'Walter Jenkins feedback', 320),
(5780, '24:31', 'Tip about header structure and spacing', 'Header tip', 320),
(5781, '25:40', 'Suggestion for better text contrast', 'Text contrast suggestion', 320),
(5782, '26:40', 'Scott discovers interactive map is live transit data', 'Interactive map', 320),
(5783, '27:17', 'Tip to call out interactivity of map more', 'Map interactivity tip', 320),
(5784, '28:48', 'Font weight tip when using Google Fonts', 'Google Fonts tip', 320),
(5785, '30:14', 'Praise for Suhit\'s clean, polished site design', 'Suhit site praise', 320),
(5786, '31:34', 'Benefits of small whimsical touches on sites', 'Whimsical touches', 320),
(5787, '33:48', 'Praise for restrained use of special effects', 'Restrained effects praise', 320),
(5788, '35:01', 'Discussion on resume format - HTML vs PDF', 'Resume format discussion', 320),
(5789, '36:25', 'Scott\'s simple GitHub readme approach', 'GitHub readme', 320),
(5790, '37:24', 'Review of Jacob Pawlak\'s site', 'Jacob Pawlak site', 320),
(5791, '39:02', 'Feedback on header structure and font usage', 'Jacob header feedback', 320),
(5792, '40:09', 'Emphasizing proper HTML structure', 'Proper HTML structure', 320),
(5793, '41:15', 'Reiterating paragraph vs heading differences', 'Paragraph vs heading', 320),
(5794, '42:55', 'Praise for portfolio integration on Jacob\'s site', 'Jacob portfolio praise', 320),
(5795, '43:52', 'Tips for resume design and formatting', 'Resume tips', 320),
(5796, '45:22', 'Funny banter about image formats', 'Image format banter', 320),
(5797, '47:12', 'Introducing Martin Van Hoof\'s site', 'Martin site intro', 320),
(5798, '47:40', 'Praise for fast page transitions on Martin\'s site', 'Fast transitions praise', 320),
(5799, '49:26', 'Discussion about non-standard WebKit textstroke CSS', 'textstroke discussion', 320),
(5800, '50:15', 'Feedback on logo hover animation on Martin\'s site', 'Logo animation feedback', 320),
(5801, '50:27', 'Issue with contact form on Martin\'s site', 'Contact form issue', 320),
(5802, '51:51', 'HTML heading structure should match content hierarchy', 'Heading structure tip', 320),
(5803, '53:33', 'Goal is to provide helpful portfolio feedback', 'Portfolio feedback goal', 320),
(5804, '54:42', 'Wes\' sick pick - lever wire connectors', 'Lever connectors', 320),
(5805, '58:15', 'Scott\'s sick pick - What Had Happened Was podcast', 'What Had Happened Was podcast', 320),
(5806, '01:00:08', 'Scott\'s shameless plug for Level Up Tutorials Svelte course', 'Svelte course plug', 320),
(5807, '01:01:01', 'Wes\' shameless plug for his courses', 'Wes\' course plug', 320),
(5808, '00:31', 'JavaScript buzzwords', 'buzzwords', 321),
(5809, '01:03', 'Sentry and Freshbooks sponsorships', 'sponsors', 321),
(5810, '02:52', 'JavaScript timing buzzwords', 'buzzwords', 321),
(5811, '05:27', 'Threads and CPU processing', 'threads', 321),
(5812, '06:07', 'Browser threads', 'browser threads', 321),
(5813, '08:05', 'Blocking in JavaScript', 'blocking', 321),
(5814, '11:39', 'Concurrent vs parallel execution', 'concurrent parallel', 321),
(5815, '13:48', 'Callbacks in JavaScript', 'callbacks', 321),
(5816, '18:10', '<script> async and defer', 'async defer', 321),
(5817, '22:19', 'Lazy loading components', 'lazy loading', 321),
(5818, '02:50', 'Talk basics of elements tab', 'Elements', 322),
(5819, '03:08', 'Inspect element to see HTML representation of DOM', 'Inspect DOM', 322),
(5820, '04:06', 'Can manipulate DOM in elements tab', 'Edit DOM', 322),
(5821, '04:39', 'Right click to edit HTML or delete elements', 'Right click', 322),
(5822, '04:52', 'Edit as HTML to modify HTML directly', 'Edit HTML', 322),
(5823, '05:27', 'Drag and drop to rearrange DOM structure', 'Drag and drop', 322),
(5824, '05:36', 'Highlight and delete to remove elements', 'Delete elements', 322),
(5825, '08:55', 'Break on subtree modifications to debug JS DOM changes', 'Break on changes', 322),
(5826, '09:33', 'Select element in console with $0', '$0 in console', 322),
(5827, '11:38', 'Reveal selected element in inspector from console', 'Reveal in inspector', 322),
(5828, '12:50', 'Delete sections of DOM to isolate issues', 'Delete sections', 322),
(5829, '13:38', 'Layers panel to see DOM rendering issues', 'Layers panel', 322),
(5830, '14:32', 'Layers shows paints, scroll rects, z-index', 'Layers features', 322),
(5831, '15:24', 'Style tab to view computed and cascade', 'Computed styles', 322),
(5832, '16:20', 'Toggle element states like hover with :hover', 'Toggle states', 322),
(5833, '17:53', 'Add classes with .cls', 'Add classes', 322),
(5834, '19:41', 'Inline styles with element.style', 'Inline styles', 322),
(5835, '20:36', 'Computed tab shows final calculated styles', 'Computed tab', 322),
(5836, '21:22', 'Layout tab shows box model and flexbox', 'Layout tab', 322),
(5837, '23:00', 'Use UI buttons for flexbox properties', 'Flexbox buttons', 322),
(5838, '23:52', 'Firefox and Chrome dev tools now at parity', 'DevTools parity', 322),
(5839, '24:32', 'Customize dev tools CSS in experiments', 'Custom CSS', 322),
(5840, '25:24', 'Move tabs to panel', 'Move tabs', 322),
(5841, '26:35', 'Use escape to open console panel', 'Escape for console', 322),
(5842, '27:09', 'Drag tabs to panel', 'Drag tabs', 322),
(5843, '28:49', 'Move network panel', 'Network panel', 322),
(5844, '30:58', 'Font editor shows web font usage', 'Font editor', 322),
(5845, '31:22', 'Find applied fonts in computed tab', 'Find fonts', 322),
(5846, '32:11', 'CSS overview analyzes styles', 'CSS overview', 322),
(5847, '33:29', 'Turn on CSS overview in experiments', 'Turn on CSS overview', 322),
(5848, '34:18', 'Changes tab tracks DOM changes', 'Changes tab', 322),
(5849, '35:45', 'Animations tab lists and replays animations', 'Animations tab', 322),
(5850, '36:17', 'Slow down animations to inspect', 'Slow animations', 322),
(5851, '38:28', 'Many settings in cogwheel', 'Cogwheel settings', 322),
(5852, '39:00', 'Experiments tab enables new features', 'Experiments tab', 322),
(5853, '39:35', 'New font editor experiment', 'Font editor experiment', 322),
(5854, '40:43', 'Enable localized dev tools', 'Localized dev tools', 322),
(5855, '41:47', 'Always check experiments tab', 'Check experiments', 322),
(5856, '43:06', 'Compatibility tab checks browser compatibility', 'Compatibility tab', 322),
(5857, '44:56', 'Spend time learning dev tools features', 'Learn dev tools', 322),
(5858, '00:33', '7 interesting JavaScript proposals', 'proposals', 323),
(5859, '02:45', 'Import JSON modules natively', 'modules', 323),
(5860, '05:49', 'Async do blocks', 'async', 323),
(5861, '10:03', 'Array findLast methods', 'arrays', 323),
(5862, '15:12', 'Immutable array methods', 'immutable', 323),
(5863, '17:58', 'New Temporal date API', 'dates', 323),
(5864, '18:48', 'As pattern for destructuring', 'destructuring', 323),
(5865, '21:45', 'Pattern matching', 'matching', 323),
(5866, '00:32', 'Announcer encourages listeners to submit potluck questions', 'Questions', 324),
(5867, '00:42', 'Announcer introduces sponsors: Sanity, LogRocket, Linode', 'Sponsors', 324),
(5868, '01:11', 'Scott releases SvelteKit course, talks about enjoyability of building tools for courses', 'SvelteKit course', 324),
(5869, '02:26', 'Wes installing sprinklers at cottage, dealing with fluid dynamics', 'Sprinklers', 324),
(5870, '03:52', 'Scott selling house, stressful process', 'Selling house', 324),
(5871, '04:11', 'Question from Stella about exporting components as web components', 'Web components', 324),
(5872, '05:26', 'Scott found React package for exporting to web components', 'React web components', 324),
(5873, '06:29', 'Wes and Scott discuss popularity and capabilities of web components', 'Web components discussion', 324),
(5874, '08:13', 'Lit HTML could be good option for web components', 'Lit HTML', 324),
(5875, '09:11', 'Wes excited about Lit HTML examples on website', 'Lit HTML examples', 324),
(5876, '11:00', 'Scott also likes angled highlights on Lit website', 'Lit highlights', 324),
(5877, '11:24', 'Wes will build something in Lit HTML', 'Build in Lit', 324),
(5878, '11:40', 'Next question from Brendo about minimum specs for new developers', 'Minimum specs', 324),
(5879, '13:04', 'Scott and Wes recommend at least 8GB RAM, i5 processor, MacBook Air', 'RAM and processor', 324),
(5880, '15:50', 'New M1 Macs are powerful and affordable', 'M1 Macs', 324),
(5881, '18:05', 'Splurge on computer if you can expense it as business', 'Business expense', 324),
(5882, '19:20', 'Scott emphasizes not overspending if tight on budget', 'Budget tips', 324),
(5883, '21:12', 'Wes introduces sponsor Sanity', 'Sanity sponsor', 324),
(5884, '22:31', 'Scott thanks Sanity, moves to next question', 'Next question', 324),
(5885, '22:38', 'Question from Michael about lack of Python discussion', 'Python question', 324),
(5886, '23:07', 'Scott built apps in Python and other languages, had issues with Django', 'Scott\'s Python experience', 324),
(5887, '24:01', 'Scott says Python great language but he sticks to JavaScript', 'Stick to JS', 324),
(5888, '25:03', 'Wes hasn\'t used Python much, had beginner difficulties', 'Wes on Python', 324),
(5889, '25:41', 'Scott reiterates sticking to one language for productivity', 'Stick to one language', 324),
(5890, '26:48', 'Next question from Charles about using Docker for development', 'Docker question', 324),
(5891, '27:31', 'Scott and Wes don\'t use Docker much themselves', 'Thoughts on Docker', 324),
(5892, '28:39', 'Docker useful for large projects with many dependencies', 'Docker benefits', 324),
(5893, '29:56', 'Scott has had frustrating experiences trying to use Docker', 'Docker frustrations', 324),
(5894, '31:05', 'Scott transitions to sponsor read for LogRocket', 'LogRocket sponsor', 324),
(5895, '32:35', 'Next question from Austin about being overwhelmed at job', 'Overwhelmed at job', 324),
(5896, '33:09', 'Austin working with many languages and frameworks at job', 'Many languages at job', 324),
(5897, '33:53', 'Scott says give self slack due to pandemic fatigue', 'Pandemic fatigue', 324),
(5898, '34:32', 'Scott advises speaking to managers if workload too heavy', 'Talk to managers', 324),
(5899, '35:46', 'Scott says don\'t be too hard on yourself', 'Don\'t be hard on self', 324),
(5900, '36:52', 'Wes notes many jobs are demanding, pandemic fatigue real', 'Jobs demanding', 324),
(5901, '37:27', 'Next question from Tim about browser rendering engines', 'Browser engines', 324),
(5902, '38:10', 'Main browser engines now are Blink, WebKit, and Firefox', 'Browser engines list', 324),
(5903, '39:17', 'Scott agrees, moves to next question on server-rendered apps', 'Server-rendered apps', 324),
(5904, '40:05', 'Scott says many modern frameworks can be server-rendered', 'Server rendering options', 324),
(5905, '41:49', 'Wes doubts Netflix is fully server-rendered React now', 'Netflix rendering', 324),
(5906, '42:42', 'Scott finds post saying Netflix removed React from client bundle', 'Netflix React removal', 324),
(5907, '43:01', 'Wes shamelessly plugs his LearnNode course on server rendering', 'LearnNode plug', 324),
(5908, '43:46', 'Next question asking about code prediction software', 'Code prediction question', 324),
(5909, '44:41', 'Scott has used Kite but mainly relies on VS Code IntelliSense', 'Code prediction tools', 324),
(5910, '47:06', 'Wes also mainly uses VS Code IntelliSense', 'Wes on code prediction', 324),
(5911, '47:21', 'Next question from Sahas about PropTypes in TypeScript', 'PropTypes question', 324),
(5912, '47:42', 'Scott and Wes say PropTypes redundant with TypeScript checking', 'PropTypes unnecessary', 324),
(5913, '48:13', 'Next question from Finnish George about storing audio files', 'Storing audio files', 324),
(5914, '49:10', 'Wes advises using a CDN and setting caching headers', 'CDN advice', 324),
(5915, '50:17', 'Scott suggests S3 with CloudFront CDN for cheap storage', 'S3 and CloudFront', 324),
(5916, '51:03', 'Wes has used Backblaze for file hosting successfully', 'Backblaze', 324),
(5917, '52:27', 'Wes transitions to sponsor Linode as option for object storage', 'Linode sponsor', 324),
(5918, '54:06', 'Scott jokes about creating illegal content platform', 'Illegal content joke', 324),
(5919, '54:35', 'Scott\'s podcast pick: Death in Crypto Land', 'Podcast pick', 324),
(5920, '56:25', 'Wes\'s software pick: Affinity Designer for graphics', 'Software pick', 324),
(5921, '59:41', 'Scott wants Affinity to make screen recording app', 'Idea for Affinity', 324),
(5922, '01:00:18', 'Scott\'s shameless plug: SvelteKit course', 'SvelteKit plug', 324),
(5923, '01:00:44', 'Wes\'s shameless plug: JavaScript guide on his site', 'JavaScript guide plug', 324),
(5924, '00:27', 'CSRF explained', 'CSRF', 325),
(5925, '05:46', 'What CSRF is', 'CSRF overview', 325),
(5926, '06:30', 'How cookies enable CSRF', 'Cookies and CSRF', 325),
(5927, '07:49', 'Solutions for preventing CSRF', 'CSRF solutions', 325),
(5928, '08:10', 'Using SameSite cookies', 'SameSite cookies', 325),
(5929, '11:34', 'CSRF tokens', 'CSRF tokens', 325),
(5930, '14:38', 'Checking referrer headers', 'Referrer headers', 325),
(5931, '16:20', 'Other CSRF protections', 'Other protections', 325),
(5932, '02:33', 'How container queries help style based on available space', 'Container queries', 326),
(5933, '03:21', 'Different approaches for container queries', 'Approaches', 326),
(5934, '04:28', 'Container queries proven to work even in early prototype', 'Prototype works', 326),
(5935, '05:08', 'Joined CSS Working Group to work on CSS Layers proposal', 'CSS Layers', 326),
(5936, '06:31', 'Funded by Google to focus on container queries, scope and cascade layers', 'Funded by Google', 326),
(5937, '08:23', 'Cascade layers allows defining specificity order instead of fighting it', 'Cascade layers', 326),
(5938, '09:11', 'Explicitly naming the layers we already create in CSS', 'Naming layers', 326),
(5939, '10:52', 'Container must be separate from elements querying it to avoid loops', 'Avoid loops', 326),
(5940, '12:25', '3rd party CSS conflicts addressed by explicitly setting layers', 'Address 3rd party conflicts', 326),
(5941, '13:54', 'Built on prior container query work, didn\'t invent solutions alone', 'Collaborative solutions', 326),
(5942, '15:27', 'Created Susy grid framework to learn from complaints and improve', 'Learned from Susy issues', 326),
(5943, '18:40', 'Container queries measure element space unlike viewport media queries', 'Measure element space', 326),
(5944, '20:19', 'Container queries allow responsive layout based on element location', 'Responsive containers', 326),
(5945, '22:38', 'Containment isolates page section for performance and container queries', 'Containment isolation', 326),
(5946, '24:19', 'Still working on container query and containment syntax', 'Refining syntax', 326),
(5947, '26:12', 'Card example of container query usage', 'Card component example', 326),
(5948, '31:33', 'Igalia funded Grid implementation for Bloomberg', 'Igalia and Grid', 326),
(5949, '32:16', 'Igalia contributes to WebKit, Chromium and Mozilla', 'Igalia contributions', 326),
(5950, '39:00', 'Scope addresses naming conflicts between components', 'Scope naming conflicts', 326),
(5951, '40:20', 'Scope works like Vue and CSS Modules scoping', 'Scope like Vue and Modules', 326),
(5952, '44:36', 'Container queries for responsive layout, media queries for preferences', 'CQs for layout, MQs for preferences', 326),
(5953, '46:28', 'Logical properties useful for shorthands like margin inline', 'Logical properties shorthands', 326),
(5954, '49:47', 'Get involved in CSS Working Group issues on GitHub', 'Get involved on GitHub', 326),
(5955, '03:31', 'SvelteKit overview', 'Overview', 327),
(5956, '04:09', 'Works everywhere', 'Platform agnostic', 327),
(5957, '05:26', 'Multiple rendering options', 'SSR, SSG, CSR', 327),
(5958, '06:11', 'Adapters for different platforms', 'Adapters', 327),
(5959, '08:23', 'Full control over hydration', 'Hydration', 327),
(5960, '09:41', 'Out of the box features', 'Features', 327),
(5961, '10:04', 'File based routing', 'Routing', 327),
(5962, '10:39', 'API routes', 'API routes', 327),
(5963, '11:54', 'Isomorphic fetch', 'Fetch', 327),
(5964, '12:27', 'Layouts', 'Layouts', 327),
(5965, '13:49', 'Focuses on HTML/JS platform', 'Platform', 327),
(5966, '14:17', 'Automatic code splitting', 'Code splitting', 327),
(5967, '14:26', 'PostCSS support', 'PostCSS', 327),
(5968, '14:48', 'TypeScript support', 'TypeScript', 327),
(5969, '17:11', 'Glob imports', 'Glob imports', 327),
(5970, '18:33', 'Glob for code splitting', 'Code splitting', 327),
(5971, '19:46', 'Markdown blog example', 'Example', 327),
(5972, '20:39', 'Plugin for adding features', 'Plugins', 327),
(5973, '22:33', 'Summary and recommendations', 'Conclusions', 327),
(5974, '02:33', 'Immutability explained', 'immutability', 328),
(5975, '03:10', 'GraphQL mutations explained', 'graphql', 328),
(5976, '07:20', 'How Wes falls asleep', 'sleep', 328),
(5977, '09:52', 'How Scott falls asleep', 'sleep', 328),
(5978, '13:05', 'Managing copy in CMS', 'cms', 328),
(5979, '26:00', 'Problem solving strategies', 'problem solving', 328),
(5980, '33:04', 'TypeScript interfaces vs types', 'typescript', 328),
(5981, '37:32', 'React classes vs hooks in TypeScript', 'react typescript', 328),
(5982, '38:20', 'Opinions on scaffolding generators', 'scaffolding', 328),
(5983, '44:33', 'First web dev job at agency', 'first job', 328),
(5984, '49:58', 'Caching GraphQL APIs', 'caching', 328),
(5985, '52:34', 'Using Svelte for new projects', 'svelte', 328),
(5986, '55:11', 'Spice organization containers', 'organization', 328),
(5987, '56:25', 'Stainless steel blender bottle', 'blender bottle', 328),
(5988, '02:45', 'Wes built vaccine availability checker bot', 'Vaccine bot', 329),
(5989, '04:41', 'Wes justified taking vaccine appointment', 'Justified use', 329),
(5990, '06:05', 'Wes reverse engineered pharmacy vaccine APIs', 'Reverse engineered', 329),
(5991, '09:35', 'Wes fetched vaccine data and handled cookies', 'Fetched data', 329),
(5992, '11:51', 'Wes found pharmacy IDs to check', 'Found IDs', 329),
(5993, '13:43', 'Wes handled multi-step token authentication', 'Authentication', 329),
(5994, '15:42', 'Wes cached vaccine availability hits', 'Cached hits', 329),
(5995, '16:16', 'Wes stored vaccine hits in memory only', 'In-memory storage', 329),
(5996, '17:24', 'Wes used Telegram bot API for notifications', 'Telegram API', 329),
(5997, '18:26', 'Wes booked vaccine via bot', 'Booked vaccine', 329),
(5998, '00:17', 'Introduction of today\'s topics: Using React with TypeScript', 'Intro', 330),
(5999, '00:52', 'Sponsored by FreshBooks, Sentry, and Linode', 'Sponsors', 330),
(6000, '02:55', 'React and TypeScript integration is polished now', 'React TS', 330),
(6001, '04:56', 'Typing basic function components in TypeScript', 'Components', 330);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(6002, '18:35', 'Typing React component state in TypeScript', 'State', 330),
(6003, '22:25', 'Typing side effects with React useEffect hook', 'UseEffect', 330),
(6004, '00:26', 'Introducing hosts Wes Bos and Scott Tolinski', 'Hosts', 331),
(6005, '00:50', 'Scott introduces himself', 'Intro', 331),
(6006, '01:15', 'Wes introduces sponsor Deque', 'Sponsor', 331),
(6007, '02:18', 'Scott introduces sponsor LogRocket', 'Sponsor', 331),
(6008, '03:34', 'Developers can make money by creating valuable products', 'Making Money', 331),
(6009, '04:13', 'Developers have unique skills to generate income', 'Skills', 331),
(6010, '05:38', 'Charging for value is not grifting', 'Value', 331),
(6011, '06:11', 'Ways developers can make money with skills', 'Developer Money', 331),
(6012, '07:10', 'Selling premium plugins and subscriptions', 'Plugins', 331),
(6013, '08:10', 'Selling online courses and training', 'Courses', 331),
(6014, '09:43', 'Popular creators sell courses on their open source projects', 'Open Source Courses', 331),
(6015, '10:36', 'Selling email support for popular projects', 'Support', 331),
(6016, '12:24', 'Donation models like Patreon and GitHub Sponsors', 'Donations', 331),
(6017, '13:24', 'Supporting projects you rely on benefits everyone', 'Support Projects', 331),
(6018, '14:59', 'Selling merch', 'Merch', 331),
(6019, '16:23', 'Monetizing content with ads', 'Ads', 331),
(6020, '17:16', 'Sponsored brand deals', 'Sponsorships', 331),
(6021, '18:48', 'Scott and Wes joke about Roomba sponsorship', 'Roomba Joke', 331),
(6022, '19:56', 'The importance of not selling out', 'No Selling Out', 331),
(6023, '21:50', 'Disclosing sponsorships legally and ethically', 'Disclose Sponsors', 331),
(6024, '22:40', 'Sponsored content done right', 'Good Sponsors', 331),
(6025, '23:17', 'Doing sponsored videos for brands', 'Sponsored Videos', 331),
(6026, '24:28', 'Creative collaborations and deals', 'Collabs', 331),
(6027, '25:17', 'Many options besides just a SaaS business', 'Options', 331),
(6028, '02:33', 'Hedge trimmer guides', 'Guides', 332),
(6029, '03:10', 'Hedge trimmer jigs', 'Jigs', 332),
(6030, '05:29', 'Event handler naming', 'Naming', 332),
(6031, '06:51', 'CSS variable naming', 'Variables', 332),
(6032, '12:03', 'JavaScript exports', 'Exports', 332),
(6033, '13:28', 'Default exports', 'Exports', 332),
(6034, '17:55', 'Foobar examples', 'Examples', 332),
(6035, '25:00', 'Variable naming', 'Naming', 332),
(6036, '27:16', 'Code editor preferences', 'Editors', 332),
(6037, '31:12', 'Generic typing', 'Typing', 332),
(6038, '34:44', 'Indentation syntaxes', 'Syntaxes', 332),
(6039, '04:45', 'Discussing the drag and drop API in JavaScript', 'Drag and drop API', 333),
(6040, '06:47', 'Drag and drop allows communication between web apps', 'Cross app drag', 333),
(6041, '09:17', 'Drag events allow you to store data about the drag', 'Drag data', 333),
(6042, '10:35', 'Can store metadata like what app data is coming from', 'Drag metadata', 333),
(6043, '13:19', 'Can customize the drag image shown', 'Drag image', 333),
(6044, '15:29', 'Have to handle drag UI yourself', 'Manual drag UI', 333),
(6045, '18:02', 'Security concerns around reading drag data', 'Drag security', 333),
(6046, '20:27', 'Browser APIs have limitations to prevent abuse', 'API limitations', 333),
(6047, '23:34', 'Must handle CSS classes for drag states yourself', 'Manual CSS drag', 333),
(6048, '24:55', 'Implementing accessibility is easier than drag and drop', 'Accessibility easier', 333),
(6049, '26:25', 'Google\'s Transmat library wraps the data transfer API', 'Transmat library', 333),
(6050, '00:17', 'Wes and Scott discuss HTML elements, semantic HTML, accessibility, fun tags, and dream tags', 'HTML tags', 334),
(6051, '02:29', 'Scott explains semantic HTML - using tags that describe content for accessibility, SEO, and default styling', 'Semantic HTML', 334),
(6052, '03:55', 'Wes asks why use semantic HTML instead of divs everywhere?', 'Semantic vs divs', 334),
(6053, '06:19', 'Wes talks about how semantic HTML provides default styling', 'Default styling', 334),
(6054, '09:51', 'Scott explains difference between UL and OL tags', 'UL vs OL', 334),
(6055, '10:34', 'Wes gives example of when to use UL vs OL', 'UL vs OL example', 334),
(6056, '14:01', 'Scott explains link tags vs button tags and accessibility', 'Link vs button tags', 334),
(6057, '16:03', 'Wes and Scott discuss heading tags for accessibility and SEO', 'Heading tags', 334),
(6058, '18:41', 'Prismic sponsors ad about component based CMS', 'Prismic ad', 334),
(6059, '21:00', 'Wes lists common structural HTML tags like header, nav, footer', 'Structural tags', 334),
(6060, '23:44', 'Scott explains the article tag', 'Article tag', 334),
(6061, '25:03', 'Scott and Wes discuss if structural tags do more than divs', 'Structural vs divs', 334),
(6062, '26:31', 'Scott talks about the address tag', 'Address tag', 334),
(6063, '27:21', 'Wes discusses the tel attribute', 'Tel attribute', 334),
(6064, '27:57', 'Scott talks about sub and sup tags', 'Sub and sup tags', 334),
(6065, '30:24', 'Scott introduces the Ruby tag', 'Ruby tag', 334),
(6066, '30:52', 'Scott quizzes Wes on the WBR tag', 'WBR tag', 334),
(6067, '32:23', 'Scott talks about i vs em and b vs strong tags', 'Formatting tags', 334),
(6068, '34:28', 'Wes discusses the mark tag', 'Mark tag', 334),
(6069, '34:42', 'Sentry sponsors ad about error handling', 'Sentry ad', 334),
(6070, '36:34', 'Scott jokes div and span are like Tostitos Scoops for CSS', 'Div and span tags', 334),
(6071, '38:02', 'Wes lists special HTML elements like details and summary', 'Special elements', 334),
(6072, '39:25', 'Scott explains fieldset and legend tags', 'Fieldset and legend', 334),
(6073, '40:41', 'Wes talks about disabling groups of fields with fieldset', 'Disabling fieldsets', 334),
(6074, '42:38', 'Wes and Scott bet on Safari implementing dialog element', 'Bet on Safari', 334),
(6075, '43:30', 'Wes wants native textarea autosize and animated accordion', 'Textarea and accordion', 334),
(6076, '44:56', 'Scott wants better table support in CSS grid', 'Better tables', 334),
(6077, '45:53', 'Scott suggests virtual list element', 'Virtual list element', 334),
(6078, '47:32', 'Wes discusses wants for native carousel element', 'Native carousel', 334),
(6079, '49:15', 'Scott jokes about native cookie banner and tabs elements', 'More elements', 334),
(6080, '50:40', 'Scott and Wes discuss auto generating heading levels', 'Auto heading levels', 334),
(6081, '51:53', 'Wes wants a native icon element', 'Icon element', 334),
(6082, '53:04', 'Scott suggests product and cart elements', 'Ecommerce elements', 334),
(6083, '54:19', 'Wes lists more suggested elements like date range and hero', 'More elements', 334),
(6084, '54:45', 'Wes thinks people just want web components', 'Web components', 334),
(6085, '55:06', 'Scott and Wes wrap up the HTML tag discussion', 'Wrap up', 334),
(6086, '56:16', 'Scott sponsors Cloudinary for image handling', 'Cloudinary ad', 334),
(6087, '57:36', 'Wes picks Netflix documentary This is a Robbery', 'Wes pick', 334),
(6088, '58:17', 'Scott picks baseball hat washer', 'Scott pick', 334),
(6089, '59:43', 'Scott plugs Level Up Tutorials courses', 'Level Up plug', 334),
(6090, '01:01:00', 'Wes plugs his courses on WesBos.com', 'WesBos plug', 334),
(6091, '02:11', 'Sanity as a CMS allows you to create content types and relationships to pull that data anywhere', 'Sanity CMS', 335),
(6092, '03:17', 'LogRocket records videos of errors happening in real time to help debug bugs', 'LogRocket', 335),
(6093, '04:50', 'Most HTML elements can be styled, but complex ones like select have inaccessible shadow DOM', 'Styling elements', 335),
(6094, '06:12', 'For unstylable elements, you can style defaults, overlay other elements, use a UI library or wait for better custom elements', 'Styling options', 335),
(6095, '13:11', 'Many want better stylable, accessible UI elements added natively to HTML', 'Native UI elements', 335),
(6096, '17:47', 'Open UI is documenting and standardizing native UI controls like select, checkboxes and sliders', 'Open UI project', 335),
(6097, '00:29', 'Introduction', 'intro', 336),
(6098, '02:06', 'Answering freelancing questions', 'freelance', 336),
(6099, '06:18', 'Discussing component size in React', 'components', 336),
(6100, '09:45', 'Explaining throttling vs debouncing', 'throttling', 336),
(6101, '16:51', 'Giving advice for job hunting after years at big company', 'job hunting', 336),
(6102, '22:03', 'Tips for beginning designers struggling with CSS', 'CSS tips', 336),
(6103, '26:27', 'Integrating React with legacy codebase/CMS', 'React integration', 336),
(6104, '35:53', 'Learning in public for career advancement', 'learning in public', 336),
(6105, '36:09', 'Rust vs Node.js for GraphQL backend', 'Rust vs Node', 336),
(6106, '40:38', 'Introducing React to legacy codebase', 'React migration', 336),
(6107, '03:14', 'Sentry & Prismic sponsor ads', 'sponsors', 337),
(6108, '03:34', 'What technical debt is and why it happens', 'technical debt intro', 337),
(6109, '04:47', 'Over time any code will accrue technical debt', 'inevitability', 337),
(6110, '05:12', 'Examples of startups moving fast while old systems accrue debt', 'startups vs old systems', 337),
(6111, '06:30', 'Having multiple developers leads to technical debt', 'multiple developers', 337),
(6112, '07:01', 'Any code will become overgrown like an unpruned garden', 'unpruned garden', 337),
(6113, '07:55', 'Wes\'s example upgrading a Next.js app', 'Next.js upgrade', 337),
(6114, '08:37', 'Upgrading dependencies leads to technical debt', 'upgrading dependencies', 337),
(6115, '09:30', 'React Router example of updating APIs', 'React Router updates', 337),
(6116, '10:38', 'Inconsistencies like CSS units lead to debt', 'CSS inconsistencies', 337),
(6117, '11:13', 'CSS systems like Tailwind help avoid debt', 'CSS systems', 337),
(6118, '11:56', 'Using CSS variables avoids style drift', 'CSS variables', 337),
(6119, '12:35', 'Too many updates lead to Frankenstein codebase', 'too many updates', 337),
(6120, '14:17', 'New developers want to update, old avoid updates', 'new vs old developers', 337),
(6121, '16:00', 'Big codebases need long-term standards', 'long-term standards', 337),
(6122, '17:20', 'Abstracting code can help avoid debt', 'abstracting code', 337),
(6123, '18:04', 'Don\'t put off updates and refactors', 'don\'t put off updates', 337),
(6124, '18:48', 'Good tests help catch issues', 'good tests', 337),
(6125, '20:13', 'Websites with debt feel clunky and limited', 'clunky websites', 337),
(6126, '21:57', 'Workarounds show technical debt', 'workarounds', 337),
(6127, '22:09', 'Funny podcast name idea', 'podcast name idea', 337),
(6128, '23:14', 'Scott\'s messy old HTML site example', 'old HTML site', 337),
(6129, '24:14', 'Some debt not worth fixing', 'debt not worth fixing', 337),
(6130, '24:59', 'Sometimes just work around debt issues', 'work around debt', 337),
(6131, '25:41', 'Massive rewrites often impractical', 'massive rewrites impractical', 337),
(6132, '26:43', 'Funny idea: call-in show for technical debt', 'call-in show idea', 337),
(6133, '00:09', 'Welcome to another Potluck episode', 'Intro', 338),
(6134, '00:55', 'Scott\'s week thrown into chaos due to COVID exposure at kids\' school', 'Personal', 338),
(6135, '01:25', 'Wes heading to cottage for spring break', 'Personal', 338),
(6136, '02:32', 'For personal blog, markdown + static site generator is good option', 'Blogging tips', 338),
(6137, '05:41', 'Fine to share course tips publicly, just don\'t re-record full course', 'Course piracy', 338),
(6138, '08:34', 'No need to support IE11 anymore', 'Browser support', 338),
(6139, '12:44', 'Safari often new lowest common denominator', 'Safari issues', 338),
(6140, '17:23', 'Nest.js seems tightly integrated with Angular community', 'Nest.js', 338),
(6141, '22:49', 'Still worth learning WordPress for freelancing', 'WordPress advice', 338),
(6142, '30:17', 'Test mobile sites on real devices, not just Chrome emulator', 'Mobile testing', 338),
(6143, '37:08', 'Piracy frustrating but focus energy on your real supporters', 'Course piracy', 338),
(6144, '39:57', 'Styled Components generates random class names', 'Styled Components', 338),
(6145, '00:27', 'Introducing Astro - new meta framework', 'Astro', 339),
(6146, '05:41', 'Astro combines React, Vue, Svelte', 'Astro combines', 339),
(6147, '09:09', 'Astro has scoped CSS, Sass support', 'Astro CSS', 339),
(6148, '12:08', 'Introducing Vitkit - framework agnostic', 'Vitkit', 339),
(6149, '16:02', 'Introducing SvelteKit - batteries included', 'SvelteKit', 339),
(6150, '19:03', 'Introducing Remix - React focused', 'Remix', 339),
(6151, '00:16', 'Continuing fundamentals of TypeScript', 'TS Fundamentals', 340),
(6152, '00:36', 'Sponsored by accessibility testing, client-side session replay and video APIs', 'Sponsors', 340),
(6153, '02:33', 'Difference between any and unknown types in TS', 'any vs unknown', 340),
(6154, '03:40', 'Using never type in React for mutually exclusive props', 'never type', 340),
(6155, '06:30', 'Using never for enforcing only a or b props', 'never props', 340),
(6156, '09:03', 'Definition files explain untyped code to TS compiler', 'Definition files', 340),
(6157, '10:21', 'Definition files not needed for pure TS', 'Pure TS', 340),
(6158, '12:05', 'Global types may need definitions too', 'Global types', 340),
(6159, '13:56', 'Type generation from DB schemas or GraphQL', 'Type generation', 340),
(6160, '16:10', 'Sponsor: LogRocket session replay debugger', 'Sponsor: LogRocket', 340),
(6161, '17:33', 'Generics allow varied return types from single function', 'Generics', 340),
(6162, '18:27', 'Promise is good example of nested generic', 'Promise generics', 340),
(6163, '22:51', 'Reading complex generated types teaches generics', 'Learning from generated', 340),
(6164, '24:59', 'Generic types can be inferred from arguments', 'Inferred generics', 340),
(6165, '25:51', 'Sponsor: Deque for accessibility testing', 'Sponsor: Deque', 340),
(6166, '29:56', 'Type assertions vs type casting in TS', 'Assertions vs casting', 340),
(6167, '32:06', 'Assertions allow overriding TS inferences', 'Overriding inferences', 340),
(6168, '32:58', 'Assertions are escape hatches like any', 'Assertion escape hatches', 340),
(6169, '00:33', 'Explaining Git rebase', 'Git rebase', 341),
(6170, '04:11', 'Scott\'s experience trying rebase', 'Tried rebase', 341),
(6171, '05:07', 'Example workflow using rebase', 'Workflow', 341),
(6172, '07:50', 'How rebase works', 'How rebase works', 341),
(6173, '09:33', 'Interactive rebase to squash commits', 'Interactive rebase', 341),
(6174, '12:10', 'Rebase helps resolve merge conflicts', 'Resolve conflicts', 341),
(6175, '14:02', 'When to use rebase', 'When to rebase', 341),
(6176, '15:10', 'Rebase to tidy commits before PR', 'Tidy commits', 341),
(6177, '00:02', 'Wes selling and shipping t-shirts after designing them', 'Wes selling t-shirts', 342),
(6178, '00:38', 'Today\'s sponsors: Prismic, Sentry, DQ Accessibility', 'Sponsors', 342),
(6179, '01:42', 'Scott feeling good writing performant code', 'Scott update', 342),
(6180, '01:57', 'Wes wanted to make t-shirts for a while', 'Wes t-shirt idea', 342),
(6181, '02:30', 'Wes got shirts printed at local print shop Whitley', 'Local print shop', 342),
(6182, '03:44', 'Scott excited for Wes\' t-shirt selling process automation', 'Automation excitement', 342),
(6183, '04:17', 'Wes explaining the motivation behind automating the process', 'Automation motivation', 342),
(6184, '05:32', 'Wes tried Shopify then Snipcart for cart', 'Shopify vs Snipcart', 342),
(6185, '06:43', 'Scott positive on Snipcart for easy ecommerce', 'Snipcart praise', 342),
(6186, '07:39', 'Wes explaining shipping quotes and customs challenges', 'Shipping quotes', 342),
(6187, '09:16', 'Wes using Gatsby and Snipcart on the frontend', 'Frontend tech', 342),
(6188, '10:08', 'Wes using ChitChats and Stallion Express for cheaper shipping', 'Cheap shipping', 342),
(6189, '12:19', 'Wes using Snipcart webhooks and Next.js backend', 'Next.js backend', 342),
(6190, '13:29', 'Wes built admin dashboard to manage orders in Next.js', 'Admin dashboard', 342),
(6191, '14:29', 'Wes leveraged TypeScript for large codebase', 'TypeScript benefits', 342),
(6192, '15:20', 'Wes explaining packing labels needed in addition to shipping', 'Packing labels', 342),
(6193, '16:05', 'Scott asking how Wes associated orders with shipments', 'Order association', 342),
(6194, '17:14', 'Sentry shoutout for error tracking', 'Sentry ad', 342),
(6195, '18:06', 'Wes using label printer and Cloudinary', 'Label printer', 342),
(6196, '19:09', 'Wes designing packing slips', 'Packing slips', 342),
(6197, '20:20', 'Wes manually fulfilled first 100 orders', 'Manual fulfillment', 342),
(6198, '21:11', 'Wes initially used webcam as QR code scanner', 'Webcam scanner', 342),
(6199, '22:01', 'Wes switched to Bluetooth barcode scanner', 'Barcode scanner', 342),
(6200, '23:34', 'Wes scanning shipments and processing with Next.js', 'Scanning workflow', 342),
(6201, '24:24', 'Prismic shoutout for headless CMS', 'Prismic ad', 342),
(6202, '26:41', 'Scott asking about QR code scanner compatibility', 'QR code questions', 342),
(6203, '27:28', 'Wes explaining barcode scanner features', 'Barcode features', 342),
(6204, '28:42', 'Wes\' kids enjoyed using the barcode scanner', 'Kids liked scanner', 342),
(6205, '29:22', 'Wes had to rent a trailer to transport shirts', 'Shirt transport', 342),
(6206, '30:45', 'Wes got inexpensive custom bags from China', 'Custom bags', 342),
(6207, '31:34', 'Wes wants more eco-friendly packaging', 'Eco-friendly goal', 342),
(6208, '32:14', 'Wes and Scott discuss composting', 'Composting chat', 342),
(6209, '33:25', 'Wes got bags printed with recycling logo', 'Printed recycling logo', 342),
(6210, '34:56', 'Wes explaining the high number of shirt variables', 'Many shirt variables', 342),
(6211, '35:38', 'Wes included stickers with first orders', 'Included stickers', 342),
(6212, '36:28', 'Wes wants to eventually outsource fulfillment', 'Outsource goal', 342),
(6213, '37:11', 'Scott agreeing custom merch is more meaningful ', 'Custom merch', 342),
(6214, '38:50', 'Wes avoids print-on-demand and low quality shirts', 'Avoids print-on-demand', 342),
(6215, '39:43', 'Wes avoids funny t-shirt designs', 'No funny shirts', 342),
(6216, '40:48', 'Wes wants high quality and custom product', 'High quality goal', 342),
(6217, '41:59', 'Wes avoids merch companies with supplier lock-in', 'Avoids merch companies', 342),
(6218, '43:04', 'DQ Accessibility shoutout', 'DQ ad', 342),
(6219, '44:24', 'Wes oversold some items initially', 'Oversold items', 342),
(6220, '45:29', 'Wes should have added queues for delayed data', 'Needed queues', 342),
(6221, '45:43', 'Wes frustrated some didn\'t read preorder notice', 'Preorder issues', 342),
(6222, '47:10', 'Wes had to refund a few orders due to stock issues', 'Refunded orders', 342),
(6223, '48:15', 'Wes plans to do Syntax merch in the future', 'Future syntax merch', 342),
(6224, '49:05', 'Wes ensured eco-friendly and quality shirts', 'Eco-friendly shirts', 342),
(6225, '50:12', 'Scott impressed by substantial real-world project', 'Scott impressed', 342),
(6226, '50:36', 'Wes sick pick Burr coffee grinder', 'Coffee grinder pick', 342),
(6227, '51:59', 'Scott sick pick macOS AutoMounter app', 'AutoMounter pick', 342),
(6228, '54:41', 'Wes shameless plug for courses', 'Wes course plug', 342),
(6229, '55:47', 'Scott shameless plug for Node authentication course', 'Scott course plug', 342),
(6230, '02:33', 'Miriam Suzanne key contributor', 'Miriam', 343),
(6231, '03:57', 'Container queries status', 'Status', 343),
(6232, '04:49', 'Syntax and usage', 'Syntax', 343),
(6233, '08:21', 'Why container queries needed', 'Why needed', 343),
(6234, '09:59', 'Resize observer issues', 'Resize observer', 343),
(6235, '11:17', 'CSS contain property', 'Contain property', 343),
(6236, '15:56', 'Inline size and block size', 'Inline/block size', 343),
(6237, '17:08', 'Logical properties', 'Logical properties', 343),
(6238, '18:34', 'Best practices coming', 'Best practices', 343),
(6239, '19:58', 'Try it out today', 'Try it out', 343),
(6240, '22:37', 'Potential polyfill', 'Polyfill', 343),
(6241, '00:21', 'Dev tools tabs', 'Overview', 344),
(6242, '01:00', 'Network tab', 'Tab', 344),
(6243, '02:20', 'Performance tab', 'Tab', 344),
(6244, '02:41', 'Caching and performance', 'Caching', 344),
(6245, '03:47', 'Console tab', 'Tab', 344),
(6246, '04:13', 'Network tab tips', 'Tips', 344),
(6247, '05:10', 'Network caching', 'Caching', 344),
(6248, '05:53', 'GZip compression', 'GZip', 344),
(6249, '06:31', 'Busting cache', 'Caching', 344),
(6250, '07:49', 'Waterfall loading', 'Loading', 344),
(6251, '08:43', 'Network request sizes', 'Network', 344),
(6252, '09:46', 'Network throttling', 'Network', 344),
(6253, '10:20', 'Slow network debugging', 'Debugging', 344),
(6254, '11:14', 'Copying network requests', 'Network', 344),
(6255, '12:24', 'Inspecting requests', 'Network', 344),
(6256, '13:30', 'Debugging GraphQL', 'GraphQL', 344),
(6257, '14:23', 'Debugging WebSockets', 'WebSockets', 344),
(6258, '15:07', 'Understanding requests', 'Requests', 344),
(6259, '15:28', 'Debugging differences', 'Debugging', 344),
(6260, '16:40', 'Blocked requests', 'Network', 344),
(6261, '17:34', 'Bug fixing', 'Bugs', 344),
(6262, '18:41', 'Copywriting', 'Copywriting', 344),
(6263, '19:05', 'Browser extensions', 'Extensions', 344),
(6264, '20:22', 'Vonage sponsor', 'Sponsor', 344),
(6265, '21:55', 'FreshBooks sponsor', 'Sponsor', 344),
(6266, '22:27', 'Memory tab', 'Tab', 344),
(6267, '23:57', 'Memory leaks', 'Memory', 344),
(6268, '24:49', 'Performance tab', 'Tab', 344),
(6269, '25:16', 'Flame charts', 'Charts', 344),
(6270, '26:32', 'Debugging re-renders', 'Debugging', 344),
(6271, '27:25', 'Performance metrics', 'Performance', 344),
(6272, '28:22', 'Flame chart debugging', 'Debugging', 344),
(6273, '29:12', 'CPU profiling', 'Profiling', 344),
(6274, '30:48', 'Console tab', 'Tab', 344),
(6275, '31:06', 'Console usage', 'Console', 344),
(6276, '32:07', 'Console filtering', 'Console', 344),
(6277, '32:34', 'Ignoring warnings', 'Console', 344),
(6278, '33:19', 'Console filtering', 'Console', 344),
(6279, '33:31', 'Sidebar filtering', 'Console', 344),
(6280, '34:20', 'Live expressions', 'Expressions', 344),
(6281, '35:23', 'Map previews', 'Console', 344),
(6282, '35:44', '$0 selector', 'Console', 344),
(6283, '36:50', 'Global variables', 'Variables', 344),
(6284, '37:21', 'API response debugging', 'Debugging', 344),
(6285, '37:33', 'Bling.js', 'Bling.js', 344),
(6286, '38:04', 'Query selectors', 'Console', 344),
(6287, '38:39', 'jQuery alternatives', 'jQuery', 344),
(6288, '39:47', 'FreshBooks sponsor', 'Sponsor', 344),
(6289, '40:34', 'Storage tab', 'Tab', 344),
(6290, '41:02', 'Storage types', 'Storage', 344),
(6291, '42:32', 'Debugging cookies', 'Debugging', 344),
(6292, '42:55', 'Client storage', 'Storage', 344),
(6293, '43:41', 'Unused storage', 'Storage', 344),
(6294, '44:07', 'Service workers', 'Service workers', 344),
(6295, '44:49', 'Firefox issues', 'Firefox', 344),
(6296, '45:21', 'Lighthouse tab', 'Tab', 344),
(6297, '45:43', 'Lighthouse usage', 'Lighthouse', 344),
(6298, '46:21', 'Lighthouse opportunities', 'Lighthouse', 344),
(6299, '46:51', 'Lighthouse nuances', 'Lighthouse', 344),
(6300, '47:35', 'Lighthouse scoring', 'Lighthouse', 344),
(6301, '48:07', 'Accessibility issues', 'Accessibility', 344),
(6302, '48:59', 'Automated accessibility', 'Accessibility', 344),
(6303, '50:27', 'DOM tab Firefox only', 'Firefox', 344),
(6304, '03:07', 'Prismic sponsors Syntax podcast', 'Sponsor', 345),
(6305, '05:16', 'CSS nesting allows writing CSS easier to read, write, prevents refactoring errors', 'CSS nesting benefits', 345),
(6306, '07:50', 'Best use of nesting is when scoping styles, not nesting everything', 'Nesting guidelines', 345),
(6307, '10:24', 'Two ways to nest in CSS - ampersand and @nest rule', 'Nesting syntax', 345),
(6308, '13:21', '@nest rule alternative to ampersand for nesting', '@nest rule', 345),
(6309, '14:59', 'Media queries can be nested inside existing selectors', 'Nested media queries', 345),
(6310, '16:48', 'CSS nesting is likely backwards compatible', 'Backwards compatibility', 345),
(6311, '18:25', 'Can transpile CSS nesting with PostCSS', 'PostCSS transpiling', 345),
(6312, '02:08', 'Question about managing API token refresh when making parallel requests', 'API tokens', 346),
(6313, '06:40', 'Best services for video hosting and optimization', 'Video hosting', 346),
(6314, '15:31', 'Struggling with logic and relying too much on tutorials when working on personal projects', 'Personal projects', 346),
(6315, '19:40', 'Feeling like an imposter at new job using undocumented internal framework', 'Imposter syndrome', 346),
(6316, '25:18', 'Thoughts on using monorepos', 'Monorepos', 346),
(6317, '04:01', 'Scott talks about Easy Snippet extension for creating VSCode snippets', 'Easy Snippet', 347),
(6318, '05:33', 'Wes talks about new \"Add Missing Function Declaration\" in VSCode/TypeScript', 'Missing Func', 347),
(6319, '07:41', 'Scott discusses the Error Lens extension for highlighting errors', 'Error Lens', 347),
(6320, '09:19', 'Wes mentions an extension to auto-generate function arguments', 'Func Args', 347),
(6321, '11:12', 'Scott talks about import syntax and snippets package', 'Import Snippet', 347),
(6322, '12:00', 'Wes discusses the File Utils extension for file operations', 'File Utils', 347),
(6323, '14:07', 'Scott mentions the GitLens extension', 'GitLens', 347),
(6324, '15:37', 'Wes talks about syntax highlighting strings as HTML/GraphQL', 'String Highlight', 347),
(6325, '16:49', 'Scott discusses the Wrap Console Log extension', 'Wrap Console', 347),
(6326, '17:21', 'Wes mentions the Text Pastry extension for numbered lists', 'Text Pastry', 347),
(6327, '19:13', 'Scott talks about the Better Comments extension', 'Better Comments', 347),
(6328, '20:13', 'Wes gives a tip on using Emmet everywhere in VSCode', 'Emmet Tips', 347),
(6329, '02:10', 'Matt started Caddy web server as an undergrad to meet his needs', 'Caddy origin', 348),
(6330, '02:28', 'The web was changing but web servers weren\'t', 'Web server stagnation', 348),
(6331, '02:50', 'Caddy brought something fresh to the stale web server landscape', 'Caddy refreshing', 348),
(6332, '03:17', 'Caddy disrupted the web server space', 'Caddy disruption', 348),
(6333, '04:12', 'Matt needed a simple way to quickly spin up websites for school and work', 'Caddy use case', 348),
(6334, '04:59', 'Traditional HTTPS was bloated, slow, tedious and insecure', 'HTTP issues', 348),
(6335, '05:30', 'Go doesn\'t have memory safety issues like C', 'Go safety', 348),
(6336, '06:18', 'Go makes writing safe web servers easy', 'Go web servers', 348),
(6337, '07:57', 'Let\'s Encrypt made obtaining SSL certificates easy and free', 'Let\'s Encrypt ease', 348),
(6338, '08:39', 'ACME protocol enabled automation of certificates', 'ACME automation', 348),
(6339, '09:03', 'Caddy implemented ACME client side', 'Caddy + ACME', 348),
(6340, '11:46', 'Renewals are key, not just obtaining certificates', 'SSL renewals key', 348),
(6341, '15:26', 'Web servers can decide routing based on headers and more', 'Smart routing', 348),
(6342, '17:22', 'Proxies allow scaling services on a single port', 'Proxy scaling', 348),
(6343, '18:26', 'Caddy directs traffic like a traffic cop', 'Traffic direction', 348),
(6344, '23:13', 'Web servers can serve assets faster than app backends', 'Fast assets', 348),
(6345, '24:03', 'Less backend work improves focus and security', 'Offload backend', 348),
(6346, '24:33', 'Caddy has authentication plugins', 'Caddy auth', 348),
(6347, '26:41', 'Web servers can rewrite URLs', 'URL rewrites', 348),
(6348, '29:53', 'Load balancer distributes requests across backends', 'Load balancing', 348),
(6349, '31:22', 'Round robin load balancing is simple to implement', 'Round robin LB', 348),
(6350, '38:48', 'Caddy has a programmable config API', 'Config API', 348),
(6351, '40:22', 'Matt was productive in Go within a couple weeks', 'Go productivity', 348),
(6352, '41:12', 'Go code consistently faster and better than classmates\'', 'Go speed', 348),
(6353, '44:39', 'Easy concurrency with goroutines and channels', 'Go concurrency', 348),
(6354, '45:02', 'Go is a good systems language', 'Go systems lang', 348),
(6355, '46:58', 'Every public website should use HTTPS', 'Universal HTTPS', 348),
(6356, '47:46', 'Not encrypting makes secure content a target', 'Encryption targets', 348),
(6357, '49:42', 'Not encrypting puts vulnerable visitors at risk', 'Encryption responsibility', 348),
(6358, '00:02', 'Intro to n+1 problem episode', 'Intro', 349),
(6359, '00:25', 'What is the n+1 problem?', 'Define n+1', 349),
(6360, '01:44', 'Sponsor mentions Hasura and Sentry', 'Sponsors', 349),
(6361, '05:00', 'Explain n+1 problem with podcast/host example', 'Explain with podcasts', 349),
(6362, '06:10', 'n+1 happens in GraphQL with nested queries', 'GraphQL nested', 349),
(6363, '07:18', 'Real example with Level Up Tutorials data', 'Level Up example', 349),
(6364, '09:39', 'Solution is to batch IDs and query once', 'Batch query solution', 349),
(6365, '11:11', 'Tools like DataLoader can help solve n+1', 'Tools help', 349),
(6366, '15:09', 'MongoDB aggregations can solve n+1', 'MongoDB aggregations', 349),
(6367, '16:58', 'Mongoose populate helper', 'Mongoose populate', 349),
(6368, '17:52', 'Apollo Studio monitors n+1', 'Apollo Studio', 349),
(6369, '18:56', 'Prisma solves n+1 for you', 'Prisma solves', 349),
(6370, '00:11', 'Sponsors: Sanity, Sentry, Mux', 'Sponsors', 350),
(6371, '00:33', 'Discussing weather in Denver and fresh air', 'Weather', 350),
(6372, '02:03', 'Discussion on explosive gases like oxygen', 'Gases', 350),
(6373, '02:37', 'Making potato gun to shoot potatoes across lake', 'Potato gun', 350),
(6374, '03:45', 'Syntax highlight to critique developer portfolios', 'Syntax highlight', 350),
(6375, '04:14', 'Future show idea: Showcase of portfolios that got jobs', 'Showcase idea', 350),
(6376, '04:49', 'Review of shaquillehansford.com', 'shaquillehansford', 350),
(6377, '06:43', 'Good job linking Twitter and using custom domain', 'Good Twitter', 350),
(6378, '07:18', 'Make phone number clickable and add email link', 'Clickable contacts', 350),
(6379, '08:07', 'Discussing strange calls from phone number on site', 'Strange calls', 350),
(6380, '08:38', 'Improve desktop spacing and typography', 'Improve desktop', 350),
(6381, '09:39', 'Keep single accordion level, don\'t nest', 'No nested accordions', 350),
(6382, '10:25', 'Good copy in introduction paragraph', 'Good intro copy', 350),
(6383, '11:12', 'Remove social links except GitHub', 'Reduce social links', 350),
(6384, '11:28', 'Overall good with some tweaks needed', 'Minor tweaks needed', 350),
(6385, '11:39', 'Review of benlamers.dev', 'benlamers.dev', 350),
(6386, '12:07', 'Discussing use of yellow in design', 'Yellow design', 350),
(6387, '12:16', 'Animated header on scroll is well done', 'Good header animation', 350),
(6388, '12:42', 'Overall great design and development', 'Great design', 350),
(6389, '13:32', 'Reduce box shadow opacity slightly', 'Reduce box shadow', 350),
(6390, '14:02', 'Use CSS variables to easily tweak box shadow', 'CSS variables', 350),
(6391, '15:08', 'Main nav slightly too low on desktop', 'Nav position', 350),
(6392, '15:31', 'Make nav position more intentional', 'Intentional nav', 350),
(6393, '16:13', 'Use semantic HTML tags like main and article', 'Semantic HTML', 350),
(6394, '17:24', 'Articles would be good for timeline and projects', 'Article tags', 350),
(6395, '18:08', 'Perfect accessibility score shows attention to detail', 'Accessibility', 350),
(6396, '18:51', 'Sponsor ad read for Sanity CMS', 'Sanity ad', 350),
(6397, '20:10', 'Use coupon code for extra free usage tier', 'Sanity coupon', 350),
(6398, '20:28', 'Review of zubairaziz.com', 'zubairaziz.com', 350),
(6399, '20:50', 'Spacing works on mobile but too much on desktop', 'Spacing issues', 350),
(6400, '22:05', 'Reduce space between sections', 'Reduce space', 350),
(6401, '23:03', 'Center \"websites\" header with grid', 'Center header', 350),
(6402, '23:18', 'Portfolio shows breadth of skills and tech stack', 'Good portfolio', 350),
(6403, '24:28', 'Use CSS Grid for consistent card heights', 'Consistent cards', 350),
(6404, '24:52', 'Attention to detail improvements needed overall', 'Detail improvements', 350),
(6405, '25:40', 'Add more recent blog posts', 'More blog posts', 350),
(6406, '26:19', 'Multiple blog posts add legitimacy', 'Legitimacy', 350),
(6407, '26:44', 'Use quality photos from Unsplash', 'Unsplash photos', 350),
(6408, '27:24', 'Add introduction like other examples', 'Add introduction', 350),
(6409, '28:20', 'Take advantage of Gatsby\'s static generation', 'Gatsby static', 350),
(6410, '29:45', 'Animate nav only on initial page load', 'Initial animation', 350),
(6411, '30:15', 'Review of codebyphil.dev', 'codebyphil.dev', 350),
(6412, '30:32', 'Homepage photo adds humanity', 'Homepage photo', 350),
(6413, '31:22', 'Reduce border radius and box shadow', 'Reduce effects', 350),
(6414, '31:48', 'Border radius subjective based on context', 'Subjective effects', 350),
(6415, '32:08', 'Use real project screenshots, not stock photos', 'Real screenshots', 350),
(6416, '32:43', 'Link directly to project source code', 'Link code', 350),
(6417, '33:32', 'Remove bottom border, adjust box shadow', 'Adjust contact', 350),
(6418, '34:14', 'Add padding/footer at bottom', 'Add padding', 350),
(6419, '34:45', 'Fix heading hierarchy with one H1 per page', 'Heading hierarchy', 350),
(6420, '35:30', 'Articles better than asides for projects', 'Article tags', 350),
(6421, '36:08', 'Font is subjective but not a favorite', 'Font opinion', 350),
(6422, '36:29', 'Properly rendered HTML from Gatsby', 'Gatsby HTML', 350),
(6423, '37:37', 'Sponsor ad read for Sentry', 'Sentry ad', 350),
(6424, '37:44', 'Review of sample.johngeorge.me', 'johngeorge.me', 350),
(6425, '38:02', 'Hover explanation on name is clever', 'Clever name hover', 350),
(6426, '38:57', 'Great intro text and paragraphs', 'Good intro', 350),
(6427, '39:24', 'Make about page link active when on about', 'Active about link', 350),
(6428, '39:41', 'Balance homepage content and empty space', 'Balance homepage', 350),
(6429, '40:03', 'Upcoming show idea on HTML tags', 'HTML show idea', 350),
(6430, '40:31', 'Add headings and semantic HTML tags', 'Add HTML tags', 350),
(6431, '41:06', 'Show recent years on blog posts', 'Recent posts', 350),
(6432, '41:37', 'Add contact info and footer padding', 'Contact and padding', 350),
(6433, '42:05', 'Like intro text and paragraphs', 'Good intro', 350),
(6434, '42:16', 'Add name to other pages', 'Add name', 350),
(6435, '42:43', 'Main nav is big but content small', 'Nav size', 350),
(6436, '43:49', 'Use proper X icon for mobile nav', 'Nav icon', 350),
(6437, '44:18', 'Add contact info', 'Add contact', 350),
(6438, '45:10', 'Sponsor ad read for Mux video', 'Mux ad', 350),
(6439, '46:49', 'Review of stordahl.dev', 'stordahl.dev', 350),
(6440, '47:30', 'Unique logo/icon adds personality', 'Unique logo', 350),
(6441, '47:55', 'Strong intro text covering key details', 'Good intro', 350),
(6442, '48:17', 'List of core technology stack', 'Tech stack list', 350),
(6443, '48:34', 'Effective call to action', 'Good CTA', 350),
(6444, '48:38', 'Custom illustrations for blog posts', 'Blog illustrations', 350),
(6445, '49:08', 'Cute outlined email signup form', 'Email form', 350),
(6446, '49:46', 'Shop shows competence with ecommerce', 'Competence', 350),
(6447, '50:04', 'Smooth out card hover animation slightly', 'Smooth animation', 350),
(6448, '50:51', 'Site has great polish overall', 'Great polish', 350),
(6449, '51:37', 'Use single H1 for name, H2s for sections', 'Heading hierarchy', 350),
(6450, '52:13', 'Feedback is subjective, take what resonates', 'Subjective feedback', 350),
(6451, '52:44', 'Sick pick: Mobile soldering power supply', 'Sick pick 1', 350),
(6452, '55:37', 'Sick pick: Walkabout Mini Golf VR game', 'Sick pick 2', 350),
(6453, '57:00', 'GeoGuessr is fun online map guessing game', 'GeoGuessr', 350),
(6454, '58:45', 'Never played Geoguessr but sounds fun', 'Geoguessr unfamiliar', 350),
(6455, '59:00', 'Shameless plugs', 'Shameless plugs', 350),
(6456, '02:13', '.techdomainnames sponsor ad', 'Sponsor', 351),
(6457, '02:55', 'LogRocket sponsor ad', 'Sponsor', 351),
(6458, '03:32', 'Introducing GraphQL Code Generator', 'GraphQL Codegen', 351),
(6459, '04:14', 'GraphQL Code Generator uses schema to generate code', 'Schema usage', 351),
(6460, '04:47', 'GraphQL is strongly typed', 'Typing', 351),
(6461, '05:16', 'Codegen generates TypeScript types', 'TypeScript types', 351),
(6462, '06:04', 'Codegen generates React hooks', 'React hooks', 351),
(6463, '06:36', 'Codegen creates hooks from GraphQL queries/mutations', 'Query hooks', 351),
(6464, '07:49', 'Could switch between React Query and Apollo easily', 'Framework agnostic', 351),
(6465, '09:52', 'Swagger docs can generate API types automatically', 'Swagger types', 351),
(6466, '11:35', 'What is Swagger?', 'Swagger explanation', 351),
(6467, '13:09', 'Strong typing enables code generation tools', 'Typing benefits', 351),
(6468, '15:00', 'Other GraphQL tools from The Guild', 'GraphQL tools', 351),
(6469, '15:15', 'GraphQL Scalars provides custom scalar types', 'GraphQL Scalars', 351),
(6470, '16:00', 'Pericles for painless React forms from GraphQL', 'Pericles forms', 351),
(6471, '17:18', 'These tools are low code, not no code', 'Low code tools', 351),
(6472, '00:34', 'Scott and Wes introduce the podcast episode on building your own authentication using JWT and sessions', 'Introduce episode', 352),
(6473, '01:32', 'Scott explains how he recently implemented a custom authentication system for his platform after trying other packages', 'Scott built custom auth', 352),
(6474, '03:20', 'Scott discusses pros and cons of custom auth vs using a package', 'Custom auth pros/cons', 352),
(6475, '04:22', 'Wes talks about his experience implementing auth in his courses', 'Wes on auth', 352),
(6476, '05:13', 'Scott explains what JWTs are - encoded but not encrypted tokens containing JSON data', 'JWT explanation', 352),
(6477, '06:57', 'Wes explains the 3 parts of a JWT - header, payload, and signature', 'JWT parts', 352),
(6478, '09:19', 'Wes explains common ways to use JWTs - cookies or local storage', 'JWT usage', 352),
(6479, '14:45', 'Scott explains the difference between encryption, hashing and salting', 'Encryption vs hashing', 352),
(6480, '20:25', 'Ad for Prismic, a headless CMS', 'Prismic ad', 352),
(6481, '21:04', 'Discussion on user registration and storing salted/hashed passwords', 'Registration', 352),
(6482, '24:20', 'Discussion on using HTTP-only secure cookies for JWT storage', 'JWT cookies', 352),
(6483, '32:46', 'Discussion on using Caddy for local HTTPS development', 'Local HTTPS', 352),
(6484, '38:10', 'Explanation of CORS and implementing it', 'CORS', 352),
(6485, '43:06', 'Ad for Hasura, instant GraphQL API service', 'Hasura ad', 352),
(6486, '44:20', 'More on CORS implementation', 'CORS implementation', 352),
(6487, '46:10', 'Explanation of CSRF and CSRF tokens', 'CSRF', 352),
(6488, '49:08', 'Explanation of user authentication process', 'Authentication', 352),
(6489, '52:11', 'Wes mentions packages like NextAuth and Passport for auth', 'Auth packages', 352),
(6490, '54:22', 'Scott\'s sick pick - Remarkable 2 e-ink tablet', 'Remarkable 2 tablet', 352),
(6491, '56:35', 'Wes\'s sick pick - Operation Odessa movie on Netflix', 'Operation Odessa movie', 352),
(6492, '57:55', 'Scott plugs his authentication course', 'Scott\'s course plug', 352),
(6493, '58:58', 'Wes plugs his Advanced React course', 'Wes\'s course plug', 352),
(6494, '00:03', 'Today\'s podcast will cover environmental variables', 'Podcast overview', 353),
(6495, '00:26', 'Scott introduces himself and Wes Bos', 'Intros', 353),
(6496, '00:54', 'Wes jokingly calls himself the \"variable master\"', 'Joking around', 353),
(6497, '01:05', 'Today\'s sponsors are Sanity and Sentry', 'Sponsors', 353),
(6498, '02:32', 'Sanity overview and details', 'Sanity sponsor', 353),
(6499, '02:50', 'Sentry overview', 'Sentry sponsor', 353),
(6500, '03:57', 'What are environment variables?', 'Env var intro', 353),
(6501, '05:40', 'Env vars are not checked into source control', 'No source control', 353);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(6502, '06:37', '.env files store env vars locally', '.env files', 353),
(6503, '09:31', 'Encrypted env vars are more secure', 'Encrypted env vars', 353),
(6504, '10:14', 'Use both plain text and encrypted env vars', 'Plaintext and encrypted', 353),
(6505, '10:58', 'Env var groups help organize across services', 'Env var groups', 353),
(6506, '13:37', 'Prefix client-side env vars differently', 'Client-side env vars', 353),
(6507, '15:15', 'Hosts provide useful dynamic env vars', 'Host env vars', 353),
(6508, '16:16', 'Storing env vars in 1Password is common', '1Password storage', 353),
(6509, '17:50', 'Multiple .env files can be useful', 'Multiple .env files', 353),
(6510, '19:02', 'Set env vars directly in npm scripts', 'npm script env vars', 353),
(6511, '19:31', 'crossenv provides cross-platform env vars', 'crossenv package', 353),
(6512, '20:10', 'node_options sets CLI flags for node', 'node_options', 353),
(6513, '22:12', 'node --inspect opens Chrome DevTools', '--inspect flag', 353),
(6514, '22:52', 'Next show will cover building authentication', 'Next show teaser', 353),
(6515, '00:50', 'Wes and Scott introduce themselves and discuss being busy with kids and work', 'intro', 354),
(6516, '02:22', 'Question about IntelliSense in VSCode not showing full type definitions', 'intellisense', 354),
(6517, '05:08', 'Thank you note and question about retaining knowledge across different tech stacks over time', 'retaining knowledge', 354),
(6518, '10:43', 'Question comparing Vercel and Netlify for hosting', 'vercel vs netlify', 354),
(6519, '15:05', 'More discussion comparing various hosting platforms', 'hosting platforms', 354),
(6520, '18:34', 'Question on naming conventions for models - singular or plural', 'model naming', 354),
(6521, '23:01', 'Question on best practices for GraphQL mutations', 'graphql mutations', 354),
(6522, '33:12', 'Question on building a multi-vendor ecommerce platform', 'multi-vendor platform', 354),
(6523, '45:59', 'Question on avoiding over-reliance on video tutorials and staying focused', 'avoiding tutorials', 354),
(6524, '49:04', 'Question on using React vs Handlebars for templating emails', 'templating emails', 354),
(6525, '03:44', 'Missing communal aspect of office', 'Office culture', 355),
(6526, '04:26', 'Enjoys stretching without judgement', 'Remote perks', 355),
(6527, '04:42', 'Scott never had a job, just co-ops', 'Scott\'s work history', 355),
(6528, '05:13', 'Wes values time without useless meetings', 'Remote perks', 355),
(6529, '05:49', 'What recruiters would need to offer', 'Job offers', 355),
(6530, '09:11', 'Scott and Wes spend all time on own stuff', 'Work time split', 355),
(6531, '10:14', 'Wes outsources admin and support work', 'Outsourcing', 355),
(6532, '11:34', 'Scott outsources some dev, video, social', 'Outsourcing', 355),
(6533, '12:59', 'Securing Next.js routes server-side', 'Next.js routes', 355),
(6534, '16:14', 'Other careers without web dev', 'Alternate careers', 355),
(6535, '17:52', 'Thoughts on Clubhouse app', 'Clubhouse app', 355),
(6536, '24:30', 'Should developers learn Vue and React?', 'Learn Vue and React?', 355),
(6537, '00:56', 'Introduction of sponsors Sanity, LogRocket and Hasura', 'Sponsors', 356),
(6538, '05:08', 'Discussion of desks used by Wes and Scott', 'Desks', 356),
(6539, '15:41', 'Discussion of monitors used by Wes and Scott', 'Monitors', 356),
(6540, '23:00', 'Discussion of headphones used by Wes and Scott', 'Headphones', 356),
(6541, '24:58', 'Discussion of keyboards and mice used by Wes and Scott', 'Keyboards/Mice', 356),
(6542, '40:05', 'Discussion of desk racks used by Wes and Scott', 'Desk Racks', 356),
(6543, '41:44', 'Discussion of cameras used by Wes and Scott', 'Cameras', 356),
(6544, '44:28', 'Discussion of microphones used by Wes and Scott', 'Microphones', 356),
(6545, '49:34', 'Discussion of lighting used by Wes and Scott', 'Lighting', 356),
(6546, '52:48', 'Discussion of sit/stand usage by Wes and Scott', 'Sit/Stand', 356),
(6547, '55:33', 'Brief mention of NAS storage', 'NAS Storage', 356),
(6548, '57:49', 'Discussion of Remarkable tablet by Scott', 'Remarkable Tablet', 356),
(6549, '59:26', 'Discussion of notebooks used by Wes and Scott', 'Notebooks', 356),
(6550, '01:00:30', 'Discussion of curved monitors on Wes\' wishlist', 'Curved Monitors', 356),
(6551, '01:01:27', 'Discussion of Stream Deck on Wes\' wishlist', 'Stream Deck', 356),
(6552, '00:28', 'Hireable skills for 2021', 'Topic', 357),
(6553, '04:13', 'Clean and readable code', 'Code', 357),
(6554, '06:11', 'JavaScript fundamentals', 'JS', 357),
(6555, '08:08', 'HTTP requests in JS', 'JS', 357),
(6556, '11:57', 'CSS fundamentals', 'CSS', 357),
(6557, '13:21', 'JS framework experience', 'Frameworks', 357),
(6558, '14:25', 'Scoped CSS experience', 'CSS', 357),
(6559, '15:00', 'Server-side framework experience', 'Servers', 357),
(6560, '15:48', 'Common helper libraries', 'Libraries', 357),
(6561, '18:17', 'Data structures and algorithms', 'DSA', 357),
(6562, '20:53', 'Communication skills', 'Soft skills', 357),
(6563, '22:26', 'Email writing skills', 'Emails', 357),
(6564, '00:56', 'Introducing Tanner Linsley', 'Guest intro', 358),
(6565, '02:52', 'Tanner\'s background in open source', 'Tanner\'s background', 358),
(6566, '03:10', 'React Query surpassing Relay in stars', 'React Query popularity', 358),
(6567, '05:16', 'Wes\' experience getting started with React Query', 'Wes\' experience', 358),
(6568, '06:11', 'Main features of React Query', 'React Query features', 358),
(6569, '14:11', 'Sponsor - Sentry', 'Sponsor', 358),
(6570, '14:20', 'Manual refetching in React Query', 'Manual refetch', 358),
(6571, '15:45', 'Query keys in React Query', 'Query keys', 358),
(6572, '21:08', 'Handling form state with React Query', 'Form state', 358),
(6573, '25:10', 'Building React Query dev tools', 'Dev tools', 358),
(6574, '31:38', 'Using React Context with React Query', 'React Context', 358),
(6575, '35:00', 'React Query for server state management', 'Server state', 358),
(6576, '36:22', 'Sponsor - Deque Systems', 'Sponsor', 358),
(6577, '37:04', 'React Server Components announcement', 'React Server Components', 358),
(6578, '38:26', 'Purpose of React Server Components', 'Purpose of Server Components', 358),
(6579, '40:14', 'Future of React Query with Server Components', 'React Query future', 358),
(6580, '42:49', 'Tanner\'s experience building React Static', 'React Static', 358),
(6581, '45:50', 'Tanner\'s thoughts on Remix Runway', 'Thoughts on Remix', 358),
(6582, '00:27', 'Discussing The future of testing and Cypress', 'Future of Cypress', 359),
(6583, '01:34', 'Episode sponsored by LogRocket and Deque Systems', 'Sponsors', 359),
(6584, '02:23', 'Deque Systems help with accessibility issues', 'Deque Systems', 359),
(6585, '03:55', 'Overview of Cypress as an end-to-end testing solution', 'Cypress Overview', 359),
(6586, '06:40', 'Using data-testid for selecting elements in Cypress', 'data-testid', 359),
(6587, '08:00', 'Cypress now supports testing across browsers like Chrome, Firefox, Safari', 'Cross-browser Testing', 359),
(6588, '09:47', 'Cypress runs tests in a real browser, helps debug issues', 'Real Browser Testing', 359),
(6589, '10:42', 'Using Cypress for automating bots', 'Automating Bots', 359),
(6590, '11:16', 'New Cypress Studio records test runs', 'Cypress Studio', 359),
(6591, '12:56', 'Hitting real APIs during tests', 'Real APIs', 359),
(6592, '13:40', 'Mocking data with fixtures', 'Mocking Data', 359),
(6593, '15:10', 'Cypress Dashboard for monitoring test runs', 'Dashboard', 359),
(6594, '17:12', 'Plugins like dark mode and accessibility testing', 'Plugins', 359),
(6595, '18:23', 'Cypress has improved test writing experience', 'Experience', 359),
(6596, '00:14', 'Potluck episode with questions on promise rejections, Gatsby + WordPress hosting, learning new tech quickly', 'potluck', 360),
(6597, '01:23', 'Use async/await and try/catch to handle promise rejection rollbacks', 'promises', 360),
(6598, '05:00', 'Clients should own their own GitHub repo for Gatsby + WordPress sites', 'GitHub', 360),
(6599, '08:53', 'Ask for full stack title if doing full stack work, but pay isn\'t tied to title', 'titles', 360),
(6600, '09:47', 'Bake costs of one-time plugins/tools into project quote, don\'t pass to client', 'pricing', 360),
(6601, '15:45', 'For core functionality, make sure client knows you\'re integrating third-party plugin', 'plugins', 360),
(6602, '22:20', 'Debugging a crying baby - go through possible reasons systematically', 'baby debugging', 360),
(6603, '30:10', 'Reading a folder of images client-side not possible without server-side component', 'file access', 360),
(6604, '35:25', 'For large daily cron jobs, use queues to distribute work efficiently', 'queues', 360),
(6605, '43:30', 'Learn new tech through small projects hitting key features', 'learning', 360),
(6606, '47:34', 'Deno has watch mode since v1.4, no need for Denon', 'Deno', 360),
(6607, '03:33', 'TypeScript compiler analyzes code and does type checking to prevent bugs.', 'TypeScript compiler', 361),
(6608, '08:01', 'Babel TypeScript plugin strips TypeScript syntax but doesn\'t do type checking. Lets you ease into TypeScript.', 'Babel TypeScript', 361),
(6609, '10:23', 'SWC is a Rust-based TypeScript compiler focused on performance. Being considered for Deno.', 'SWC compiler', 361),
(6610, '13:42', 'Esbuild is a fast Go-based compiler that could replace Babel. Great for development.', 'Esbuild compiler', 361),
(6611, '15:37', 'Compilers don\'t do type checking yet besides TSC. Use TSC separately for checking.', 'Type checking', 361),
(6612, '18:44', 'Bundlers like Webpack don\'t compile but enable loading assets like images.', 'Bundlers', 361),
(6613, '00:01', 'Intro', 'intro', 362),
(6614, '00:09', 'Overview of reviewing resumes/websites', 'overview', 362),
(6615, '01:26', 'Importance of online presence', 'presence', 362),
(6616, '02:16', 'Complaint about junk mail', 'junk mail', 362),
(6617, '03:02', 'How to reduce junk mail', 'reduce junk', 362),
(6618, '04:20', 'FreshBooks sponsor spot', 'FreshBooks', 362),
(6619, '05:26', 'Reviewing Ash Connolly\'s site', 'Ash intro', 362),
(6620, '06:56', 'Value of social media presence', 'social value', 362),
(6621, '08:52', 'How to pronounce a guest\'s name', 'name help', 362),
(6622, '09:44', 'Review of Ash\'s site - pros', 'Ash pros', 362),
(6623, '12:51', 'Review of Ash\'s site - cons', 'Ash cons', 362),
(6624, '14:58', 'More critiques of Ash\'s resume', 'Ash resume', 362),
(6625, '16:08', 'Review of Ash\'s Notion resume', 'Notion resume', 362),
(6626, '20:58', 'Review of Maddy Bidwell\'s site', 'Maddy intro', 362),
(6627, '22:07', 'What\'s good about Maddy\'s site', 'Maddy pros', 362),
(6628, '24:40', 'Introducing Lea Lundqvist\'s site', 'Lea intro', 362),
(6629, '25:49', 'Issues with Lea\'s site', 'Lea issues', 362),
(6630, '27:58', 'How Lea could improve her site', 'Lea improve', 362),
(6631, '30:05', 'Using Twitter to resolve customer service issues', 'Twitter CS', 362),
(6632, '31:42', 'Asking someone directly how to pronounce their name', 'pronounce name', 362),
(6633, '32:29', 'Review of Ismael Galu\'s site', 'Ismael intro', 362),
(6634, '33:48', 'Why Ismael\'s site is impressive', 'Ismael good', 362),
(6635, '35:25', 'Ismael\'s GitHub and articles', 'Ismael GitHub', 362),
(6636, '36:16', 'Ismael\'s testimonial from Vercel', 'Ismael testimonial', 362),
(6637, '37:31', 'Linode sponsor spot', 'Linode ad', 362),
(6638, '00:33', 'Overview of keyboard events', 'keyboard events', 363),
(6639, '03:10', 'Different keyboard events', 'events', 363),
(6640, '08:03', 'Keyboard event metadata', 'metadata', 363),
(6641, '11:23', 'Key event properties', 'properties', 363),
(6642, '14:57', 'Using modifier keys', 'modifiers', 363),
(6643, '16:42', 'Checking for repeated keys', 'repeated keys', 363),
(6644, '17:35', 'Media keys', 'media keys', 363),
(6645, '19:08', 'Best practices', 'best practices', 363),
(6646, '00:01', 'Introducing TypeScript fundamentals episode', 'TypeScript intro', 364),
(6647, '00:16', 'Scott working on new version of LevelUpTutorials.com using future tech', 'Scott working on tutorials site', 364),
(6648, '01:33', 'Scott removed React testing in favor of Cypress end-to-end testing', 'Cypress testing', 364),
(6649, '02:12', '2021 is the year of config fatigue', 'Config fatigue', 364),
(6650, '02:53', 'ES module issues in Next.js', 'Next.js modules', 364),
(6651, '04:11', 'Overview of primitive data types in JavaScript', 'JavaScript types', 364),
(6652, '05:23', 'Type unions allow variables to be one of multiple types', 'Type unions', 364),
(6653, '06:12', 'Other languages like Rust have more specific primitive types', 'Language types', 364),
(6654, '06:32', 'TypeScript basics - add types to standard JavaScript', 'TypeScript basics', 364),
(6655, '07:19', 'Can define variable and parameter types in TypeScript', 'Defining types', 364),
(6656, '07:56', 'All JavaScript is valid TypeScript', 'JS is TS', 364),
(6657, '08:31', 'Type hints in editor is major benefit of TypeScript', 'Editor typing', 364),
(6658, '09:23', 'TypeScript prevents easy mistakes like string concat', 'Prevent mistakes', 364),
(6659, '10:28', 'LogRocket replays errors in app like a video', 'LogRocket', 364),
(6660, '13:31', 'Start going through TypeScript types', 'TypeScript types', 364),
(6661, '14:03', 'Basic types - string, number, arrays', 'Basic types', 364),
(6662, '14:16', 'BigInt type for large numbers', 'BigInt type', 364),
(6663, '14:23', 'Arrays are lists of other types', 'Array types', 364),
(6664, '14:42', 'Objects have properties with their own types', 'Object types', 364),
(6665, '15:18', 'Type unions allow variables to be multiple types', 'Type unions', 364),
(6666, '15:38', 'Intersection types combine multiple types', 'Intersection types', 364),
(6667, '16:38', 'Any type opts out of type checking', 'Any type', 364),
(6668, '17:02', 'Explicit any for unknown types, implicit for missing types', 'Explicit vs implicit any', 364),
(6669, '18:10', 'Void type means a function returns nothing', 'Void type', 364),
(6670, '18:29', 'Enums create a set of named constants', 'Enum type', 364),
(6671, '19:27', 'Sanity CMS sponsor ad', 'Sponsor: Sanity CMS', 364),
(6672, '20:28', 'Type inference allows omitting redundant types', 'Type inference', 364),
(6673, '21:44', 'Explicit types are safer but more verbose', 'Explicit types', 364),
(6674, '22:09', 'Moving existing projects to TypeScript gradually', 'Migrating projects', 364),
(6675, '22:51', 'Generated types from GraphQL schema', 'GraphQL types', 364),
(6676, '23:34', 'Installing type definitions for untyped packages', 'Package types', 364),
(6677, '25:23', 'Type helper functions in editor', 'Editor helpers', 364),
(6678, '26:18', 'Typing DOM elements unlocks methods', 'DOM types', 364),
(6679, '27:01', 'TypeScript integrates with React', 'React integration', 364),
(6680, '27:34', 'Sponsor: Cloudinary image hosting', 'Sponsor: Cloudinary', 364),
(6681, '28:07', 'Benefits of using TypeScript', 'Benefits', 364),
(6682, '29:27', 'Type hints reduce cognitive load', 'Type hints', 364),
(6683, '30:10', 'Easy refactoring with TypeScript', 'Refactoring', 364),
(6684, '31:21', 'Type inference examples', 'Inference examples', 364),
(6685, '32:09', 'Can explicitly type inferred types', 'Explicit inferred', 364),
(6686, '32:54', 'Explicit types are safer but more verbose', 'Explicit types', 364),
(6687, '33:26', 'Getting types for untyped packages', 'Package types', 364),
(6688, '34:10', 'Many JS packages now have types', 'Package types', 364),
(6689, '35:43', 'Generating types from JSON examples', 'Generating types', 364),
(6690, '36:43', 'Overview of TypeScript compilation', 'Compilation', 364),
(6691, '37:35', 'TSC type checks but doesn\'t compile', 'TSC type checking', 364),
(6692, '38:30', 'GraphQL types become source of truth', 'GraphQL types', 364),
(6693, '39:02', 'Resolvers and schemas generate GraphQL types', 'GraphQL generation', 364),
(6694, '39:47', 'Specify target environments in TSConfig', 'TSConfig targets', 364),
(6695, '40:25', 'Summary of TypeScript benefits', 'Benefits summary', 364),
(6696, '41:46', 'Type hints reduce cognitive load', 'Type hints', 364),
(6697, '42:43', 'Easy refactoring in TypeScript', 'Refactoring', 364),
(6698, '43:36', 'Renaming symbols consistently updates usage', 'Renaming symbols', 364),
(6699, '44:14', 'TypeScript enables easier refactoring', 'Refactoring', 364),
(6700, '44:31', 'Scott\'s development style', 'Scott\'s style', 364),
(6701, '45:24', 'TypeScript fixes circular dependencies', 'Fixes circular dependencies', 364),
(6702, '45:49', 'Drag and drop refactoring Just Works', 'Drag and drop refactor', 364),
(6703, '46:41', 'Cloudinary sponsor ad', 'Sponsor: Cloudinary', 364),
(6704, '48:05', 'Compiling TypeScript overview', 'Compiling overview', 364),
(6705, '48:31', 'TSC type checks but doesn\'t output JS', 'TSC type checking', 364),
(6706, '49:19', 'Use separate tool like ESBuild to compile', 'Separate compiler', 364),
(6707, '50:05', 'Babel doesn\'t type check', 'Babel limitations', 364),
(6708, '50:50', 'Use TSC alongside compiler for type checking', 'TSC with compiler', 364),
(6709, '51:37', 'Future TypeScript episode topics', 'Future topics', 364),
(6710, '51:48', 'End of TypeScript fundamentals episode', 'End of episode', 364),
(6711, '02:00', 'Episode about new LevelUpTutorials site', 'New site', 365),
(6712, '02:33', 'Moving from Meteor to Node/React stack', 'Tech stack', 365),
(6713, '03:28', 'Originally built in Drupal, moved to Meteor', 'History', 365),
(6714, '04:12', 'New stack is Node API and React frontend', 'Stack', 365),
(6715, '05:54', 'Not using Babel, using ESBuild', 'ESBuild', 365),
(6716, '06:57', 'No server-side rendering yet', 'SSR', 365),
(6717, '07:49', 'Using Snowpack for dev, 50ms reloads', 'Snowpack', 365),
(6718, '08:07', 'Wrote GraphQL importer for Snowpack', 'GraphQL', 365),
(6719, '09:14', 'Production builds very fast with ESBuild', 'Builds', 365),
(6720, '10:38', 'API in Node/Mercurius, very fast', 'Mercurius', 365),
(6721, '11:49', 'No performance issues with MongoDB', 'MongoDB', 365),
(6722, '14:46', 'Leveraging codegen for types', 'Codegen', 365),
(6723, '15:20', 'Hosted on Render, great experience', 'Render', 365),
(6724, '15:44', 'SSR coming soon with Snowpack Node runtime', 'SSR', 365),
(6725, '16:11', 'Using Cloudflare with SSL from Render', 'Cloudflare', 365),
(6726, '18:48', 'Built custom CLI tool called Avalanche', 'Avalanche', 365),
(6727, '20:35', 'Using Caddy as a dev server and reverse proxy', 'Caddy', 365),
(6728, '21:14', 'Switched tests from Jest to Cypress', 'Cypress', 365),
(6729, '21:55', 'Caddy great for SSL and reverse proxy', 'Caddy', 365),
(6730, '00:21', 'Introducing Deno', 'Deno intro', 366),
(6731, '02:29', 'Deno replaces Node.js', 'Deno vs Node', 366),
(6732, '03:55', 'Deno uses TypeScript', 'TypeScript', 366),
(6733, '08:10', 'Deno doesn\'t replace front-end frameworks', 'Frontend', 366),
(6734, '11:01', 'Deno bundles and compiles code', 'Bundling', 366),
(6735, '15:18', 'Deno imports ESM modules', 'Modules', 366),
(6736, '23:08', 'Deno runs WebAssembly', 'WASM', 366),
(6737, '26:19', 'Deno is fast', 'Speed', 366),
(6738, '31:30', 'Deno has security sandboxing', 'Security', 366),
(6739, '35:00', 'Deno can run scripts from URLs', 'URLs', 366),
(6740, '38:28', 'Deno uses async/await', 'Async', 366),
(6741, '40:15', 'Deno aims for Node.js compatibility', 'Node compat', 366),
(6742, '44:14', 'Example Deno scripts', 'Examples', 366),
(6743, '49:27', 'Current status of Deno', 'Status', 366),
(6744, '00:28', 'New image format AVIF', 'AVIF intro', 367),
(6745, '01:13', 'Sentry dashboard and debugging', 'Sentry ad', 367),
(6746, '01:59', 'FreshBooks expense tracking', 'FreshBooks ad', 367),
(6747, '03:33', 'AVIF derived from video compression', 'AVIF background', 367),
(6748, '04:59', 'AVIF is royalty free', 'Royalty free', 367),
(6749, '06:20', 'AVIF has transparency', 'Transparency', 367),
(6750, '07:23', 'AVIF files are very small', 'File size', 367),
(6751, '08:54', 'AVIF is a lossy format', 'Lossy format', 367),
(6752, '10:15', 'There is a lossless AVIF option', 'Lossless option', 367),
(6753, '11:49', 'Tools for generating AVIF images', 'Tools', 367),
(6754, '14:03', 'Browser support for AVIF', 'Browser support', 367),
(6755, '15:54', 'Quick Look plugin for AVIF on Mac', 'Quick Look plugin', 367),
(6756, '17:29', 'Support HEIC image format on websites', 'Support HEIC', 367),
(6757, '00:18', 'Wes and Scott will answer potluck questions', 'potluck q&a', 368),
(6758, '02:33', 'Listener went from bartender to $100k+ JS job in 3 years', '$100k js job', 368),
(6759, '04:12', 'When to use a package vs write code yourself', 'package vs code', 368),
(6760, '11:41', 'Tips for keeping skills current during long break', 'skills on break', 368),
(6761, '17:11', 'LogRocket sponsor ad', 'logrocket ad', 368),
(6762, '18:19', 'Tips for selling digital products', 'digital products', 368),
(6763, '26:08', 'Tips for building UI component libraries', 'UI libraries', 368),
(6764, '29:57', 'Prismic sponsor ad', 'prismic ad', 368),
(6765, '30:52', 'Effective use of dev tools', 'dev tools', 368),
(6766, '35:05', 'Overcoming programming imposter syndrome', 'imposter syndrome', 368),
(6767, '40:39', 'Developers\' role in reducing emissions', 'reducing emissions', 368),
(6768, '45:54', 'Linode sponsor ad', 'linode ad', 368),
(6769, '00:28', 'CSS typography systems', 'topic', 369),
(6770, '01:47', 'Sanity CMS', 'sponsor', 369),
(6771, '03:23', 'Sentry performance tracking', 'sponsor', 369),
(6772, '04:59', 'Defining font sizes in projects', 'question', 369),
(6773, '06:41', 'Wes\'s font size approach', 'font sizes', 369),
(6774, '09:25', 'Font size units', 'units', 369),
(6775, '11:01', 'Avoid font sizes on divs', 'anti-pattern', 369),
(6776, '12:20', 'Scott\'s font size variables', 'variables', 369),
(6777, '14:36', 'Readable variable names', 'variables', 369),
(6778, '15:13', 'Media queries for font sizes', 'media queries', 369),
(6779, '16:57', 'Font size consistency', 'consistency', 369),
(6780, '18:23', 'Reduced decision fatigue', 'benefits', 369),
(6781, '19:50', 'Helps beginners', 'benefits', 369),
(6782, '20:56', 'Typography generator tools', 'tools', 369),
(6783, '22:17', 'Grab CSS from generators', 'tips', 369),
(6784, '23:24', 'Eyeballing font sizes', 'approach', 369),
(6785, '24:40', 'Systems prevent bad designs', 'benefits', 369),
(6786, '02:00', 'Live podcast at Reactathon, game segments planned', 'Intro', 370),
(6787, '04:03', 'Audience can submit questions at pigeonhole.at/tasty', 'Q&A link', 370),
(6788, '04:48', 'Suspense for data fetching desired in React', 'React wishlist', 370),
(6789, '05:43', 'Unmount animations difficult to orchestrate in React', 'React wishlist', 370),
(6790, '06:50', 'Single file components desired in React like Svelte', 'React wishlist', 370),
(6791, '08:06', 'Prevent default shortcuts desired in React events', 'React wishlist', 370),
(6792, '08:45', 'Automatic form state management desired in React', 'React wishlist', 370),
(6793, '10:10', 'Graphene: both a specific carbon lattice and a Python GraphQL library', 'JS or Nay', 370),
(6794, '10:58', 'Floodlight: both an outdoor light and a syntax highlighter', 'JS or Nay', 370),
(6795, '11:55', 'Toy Machine: early 2000s skate brand', 'JS or Nay', 370),
(6796, '12:24', 'Joplin: Markdown note app and Missouri city', 'JS or Nay', 370),
(6797, '13:19', 'Nocco: Car battery charger, not no-code tool', 'JS or Nay', 370),
(6798, '13:41', 'Inner: Smart light bulb, not CSS selector', 'JS or Nay', 370),
(6799, '15:04', 'Capcom Strand: Composite building material, not Svelte state manager', 'JS or Nay', 370),
(6800, '15:45', 'Sputnik V: COVID vaccine, not WordPress code name ', 'JS or Nay', 370),
(6801, '19:27', 'Deno underrated, enjoys its permissions model and file imports', 'Over/underrated', 370),
(6802, '21:24', 'Importing from URLs underrated, useful for testing', 'Over/underrated', 370),
(6803, '23:58', 'Remix underrated, excited for server side streaming', 'Over/underrated', 370),
(6804, '25:26', 'XState underrated for managing state machines', 'Over/underrated', 370),
(6805, '28:36', 'Redux syntax very readable once you know it', 'Hot takes', 370),
(6806, '29:19', 'Console.log still very useful for debugging', 'Hot takes', 370),
(6807, '29:41', 'Optional chaining improves readability', 'Hot takes', 370),
(6808, '30:49', 'React tough for beginners but worthwhile', 'Hot takes', 370),
(6809, '31:16', 'npm packages help build apps like Legos', 'Hot takes', 370),
(6810, '32:16', 'Avoid unnecessary libraries when working at agencies', 'Hot takes', 370),
(6811, '36:11', 'Startups offer fast growth but can have long hours', 'Q&A', 370),
(6812, '37:57', 'Try to get job at FAANG company to gain experience', 'Q&A', 370),
(6813, '38:25', 'TypeScript for everything now with easy setup', 'Q&A', 370),
(6814, '40:32', 'GitHub Explore and Awesome lists to find new libraries', 'Q&A', 370),
(6815, '41:52', 'Low and slow barbecue, use fish sauce', 'Q&A', 370),
(6816, '42:19', 'Unsure if Blitz.js will gain adoption long-term', 'Q&A', 370),
(6817, '43:35', 'Optimize images via services like Cloudinary', 'Q&A', 370),
(6818, '00:26', 'Show about nothing', 'intro', 371),
(6819, '03:29', 'Undefined variable explanation', 'undefined', 371),
(6820, '04:04', 'Null vs undefined explanation', 'null', 371),
(6821, '05:36', 'Void returns nothing explanation', 'void', 371),
(6822, '06:58', 'Void ignores function returns', 'void ignores', 371),
(6823, '09:22', 'Never type in TypeScript', 'never', 371),
(6824, '11:13', 'Faulty value examples', 'faulty values', 371),
(6825, '00:45', 'Sponsors', 'Sponsors', 372),
(6826, '00:59', 'Preview', 'Episode intro', 372),
(6827, '01:18', 'Predictions format', 'Predictions format', 372),
(6828, '02:15', 'ESM popularity', 'ESM', 372),
(6829, '03:04', 'Import URLs in Node', 'Node imports', 372),
(6830, '04:51', 'Other languages improve JS tooling', 'JS tooling', 372),
(6831, '06:04', 'Remote work widens talent pool', 'Remote work', 372),
(6832, '07:06', 'Programming communities improve', 'Communities', 372),
(6833, '08:24', 'Deno adoption increases', 'Deno', 372),
(6834, '09:43', 'WASM usage increases', 'WASM', 372),
(6835, '11:09', 'TypeScript tooling improves', 'TypeScript tooling', 372),
(6836, '12:50', 'Build tooling gets easier', 'Build tools', 372),
(6837, '14:41', 'Go and Rust improve JS tooling', 'Go & Rust', 372),
(6838, '16:45', 'Rome JS tooling', 'Rome JS', 372),
(6839, '18:03', 'Sponsor break', 'Sponsor 1', 372),
(6840, '23:49', 'WASM details', 'WASM details', 372),
(6841, '27:19', 'TypeScript popularity', 'TypeScript popularity', 372),
(6842, '30:52', 'React SSR improvements', 'React SSR', 372),
(6843, '32:41', 'Competitors challenge React', 'React challenges', 372),
(6844, '33:31', 'MDX usage increases', 'MDX', 372),
(6845, '34:14', 'Gatsby streaming/SSR', 'Gatsby streaming', 372),
(6846, '36:17', 'AI gets easier', 'AI gets easier', 372),
(6847, '38:18', 'Next.js predictions', 'Next.js', 372),
(6848, '39:52', 'VS Code growth', 'VS Code growth', 372),
(6849, '41:12', 'CSS rounding', 'CSS rounding', 372),
(6850, '42:40', 'Serverless growth', 'Serverless growth', 372),
(6851, '44:02', 'Sponsor break', 'Sponsor 2', 372),
(6852, '45:34', 'Enterprise Jamstack', 'Jamstack', 372),
(6853, '46:50', 'Web apps vs PWAs', 'PWAs', 372),
(6854, '49:25', 'Show picks', 'Show picks', 372),
(6855, '00:26', 'Happy New Year! Discussing keyboard shortcuts & window management', 'intro', 373),
(6856, '03:00', 'FreshBooks sponsor segment', 'sponsor', 373),
(6857, '03:42', 'Discusses Carabiner Elements app', 'carabiner', 373),
(6858, '04:59', 'Hyper key uses caps lock for shortcuts', 'hyper key', 373),
(6859, '05:36', 'BetterTouchTool app discussion', 'BTT', 373),
(6860, '10:13', 'Using extra keyboard keys for shortcuts', 'extra keys', 373),
(6861, '11:42', 'Custom screen areas for recording', 'screen areas', 373),
(6862, '13:48', 'Web overlays with BetterTouchTool', 'overlays', 373),
(6863, '15:41', 'Uberlayer app for screen recording guides', 'uberlayer', 373),
(6864, '17:05', 'Customizing VS Code shortcuts', 'VS Code', 373),
(6865, '18:15', 'Show parameter hints shortcut', 'hints', 373),
(6866, '18:48', 'Using extra F keys for shortcuts', 'F keys', 373),
(6867, '19:45', 'Screenflow recording shortcuts', 'Screenflow', 373),
(6868, '20:32', 'Rocket app for emojis', 'Rocket', 373),
(6869, '21:26', 'TextExpander for snippets', 'TextExpander', 373),
(6870, '24:06', 'Clippy app clipboard manager', 'Clippy', 373),
(6871, '25:10', 'Total available keys with hyper key', 'available keys', 373),
(6872, '02:33', 'CSS subgrid only supported in Firefox', 'CSS subgrid', 374),
(6873, '04:29', 'IE is officially dead for most developers', 'IE dead', 374),
(6874, '05:58', 'NPM Tink did not happen but NPM improved a lot', 'NPM improved', 374),
(6875, '09:08', 'Yarn 2 released but not widely adopted due to breaking changes', 'Yarn 2', 374),
(6876, '11:38', 'Snowpack/Skypack released for bundleless development', 'Snowpack released', 374),
(6877, '14:24', 'ES modules support improving across ecosystem', 'ES modules', 374),
(6878, '15:04', 'Deno 1.0 released', 'Deno 1.0', 374),
(6879, '18:17', 'Need native TS support in Node', 'Native TS in Node', 374),
(6880, '19:10', 'Compilerless modules are the future', 'Compilerless future', 374),
(6881, '20:53', 'React Suspense not as big as expected', 'Suspense', 374),
(6882, '24:34', 'Svelte gained popularity', 'Svelte gained', 374),
(6883, '25:38', 'Vue 3 released', 'Vue 3', 374),
(6884, '27:03', 'Apollo 3 released', 'Apollo 3', 374),
(6885, '28:07', 'Next.js gained momentum', 'Next.js momentum', 374),
(6886, '30:28', 'Gatsby shipping many new features', 'Gatsby features', 374),
(6887, '31:44', 'Serverless getting much easier', 'Serverless easier', 374),
(6888, '35:23', 'Many good headless CMS options now', 'CMS options', 374),
(6889, '35:47', 'Cypress got Firefox and Edge support', 'Cypress browsers', 374),
(6890, '38:27', 'Figma keeps adding great features', 'Figma features', 374),
(6891, '02:33', 'Paying for time used on serverless functions', 'Serverless pricing', 375),
(6892, '03:38', 'Paying for virtual server resources like CPU, RAM, storage', 'VPS pricing', 375),
(6893, '05:49', 'Paying per container or \"dyno\" on Heroku', 'Heroku pricing', 375),
(6894, '08:48', 'Paying for bandwidth or data transfer', 'Bandwidth pricing', 375),
(6895, '13:52', 'Paying per number of users who can access the platform', 'Per user pricing', 375),
(6896, '17:09', 'Paying per number of apps hosted', 'Per app pricing', 375),
(6897, '21:21', 'Paying for image transforms on Cloudinary', 'Per work pricing', 375),
(6898, '00:21', 'Merry Christmas intro', 'intro', 376),
(6899, '00:33', 'Sponsored by FreshBooks and Sentry', 'sponsors', 376),
(6900, '00:37', 'Scott introduces the first question', 'first question', 376),
(6901, '00:49', 'Question from Scott\'s dad Rock', 'Scott\'s dad', 376),
(6902, '01:31', 'Introducing the Mac question from Pookie', 'Mac question', 376),
(6903, '02:15', 'Pookie asks if new Macs will affect web devs', 'Macs for devs', 376),
(6904, '02:36', 'Scott and Wes discuss bot strategies for buying a PS5', 'Bot strategies', 377),
(6905, '03:45', 'Scott suggests avoiding retailers with easily manipulatable checkout processes', 'Avoid retailers', 377),
(6906, '05:10', 'Wes explains his strategy of scraping retailer sites for availability', 'Wes\' strategy', 377),
(6907, '08:04', 'Wes suggests using Puppeteer to scrape sites that don\'t have APIs', 'Use Puppeteer', 377),
(6908, '08:49', 'Wes recommends a simple database like LowDB to save scraped data', 'Use LowDB', 377),
(6909, '10:42', 'They discuss how reCAPTCHA can prevent bots from submitting forms', 'reCAPTCHA prevention', 377),
(6910, '12:37', 'They acknowledge bot traffic frustrates developers trying to manage inventory', 'Developer frustration', 377),
(6911, '00:03', 'Intro to serverless with guest Brian Leroux', 'Intro', 378),
(6912, '00:09', 'Overview of Brian\'s background in mobile and serverless', 'Brian\'s background', 378),
(6913, '00:39', 'Sponsor - Sentry', 'Sponsor', 378),
(6914, '01:09', 'Brief intro of Brian and his interest in Syntax podcast', 'Podcast intro', 378),
(6915, '01:34', 'Discussing Caesar cocktails', 'Caesars', 378),
(6916, '02:16', 'Brian\'s background in mobile and shift to serverless', 'Background', 378),
(6917, '04:05', 'Brian\'s work on Architect and Begin', 'Architect/Begin', 378),
(6918, '06:18', 'Overview of serverless - outsourcing infrastructure', 'Serverless overview', 378),
(6919, '07:51', 'Serverless characteristics - on demand, stateless', 'Serverless characteristics', 378),
(6920, '08:47', 'Discussion on serverless misconceptions', 'Serverless misconceptions', 378),
(6921, '10:23', 'Serverless as an addition, not replacement, for existing architectures', 'Serverless addition', 378),
(6922, '11:04', 'Using serverless with legacy apps through proxies and incrementally moving functionality', 'Legacy integration', 378),
(6923, '12:42', 'Good serverless use cases like scheduled tasks and PDF generation', 'Use cases', 378),
(6924, '14:43', 'Challenges of statelessness in serverless functions', 'Statelessness', 378),
(6925, '16:27', 'Explanation of cold starts in serverless', 'Cold starts', 378),
(6926, '18:11', 'Serverless function languages like Rust and Go', 'Languages', 378),
(6927, '19:17', 'Discussion on Aleph.js for serverless Next.js apps', 'Aleph.js', 378),
(6928, '20:39', 'Deno optimized for cold starts unlike Node', 'Deno vs Node', 378),
(6929, '21:12', 'Extremely low cost of serverless functions', 'Low cost', 378),
(6930, '23:13', 'AWS as the stable choice for serverless infrastructure', 'AWS stability', 378),
(6931, '24:20', 'Excitement about Azure\'s potential in serverless space', 'Azure potential', 378),
(6932, '25:23', 'Architect for infrastructure as code in serverless', 'Architect', 378),
(6933, '26:15', 'Begin for easy cloud deployment leveraging Architect', 'Begin', 378),
(6934, '27:24', 'Begin\'s local dev experience for serverless', 'Begin local dev', 378),
(6935, '28:32', 'Other serverless services like queues and scheduled functions', 'Other services', 378),
(6936, '29:04', 'Leveraging ephemeral storage like Redis in serverless', 'Ephemeral storage', 378),
(6937, '31:30', 'Benefits of TypeScript types', 'TypeScript benefits', 378),
(6938, '32:39', 'Running TypeScript/type checks at runtime', 'Runtime types', 378),
(6939, '34:25', 'Future of TypeScript if types added to JavaScript', 'TypeScript future', 378),
(6940, '35:51', 'Deno improving cold start times unlike Node', 'Deno performance', 378),
(6941, '36:48', 'Using Deno and Node together in serverless architectures', 'Deno + Node', 378),
(6942, '37:16', 'Deno reimplementing Node APIs as standard library', 'Deno standard library', 378),
(6943, '38:41', 'Deno security model benefits', 'Deno security', 378),
(6944, '39:04', 'Sponsor - Netlify', 'Sponsor', 378),
(6945, '40:35', 'Merits of server-rendered websites without JavaScript', 'No JS websites', 378),
(6946, '43:03', 'Serverless functions enable server-rendered content', 'Server rendering', 378),
(6947, '44:46', 'New frameworks focused on server rendering like Remix', 'Remix', 378),
(6948, '45:01', 'Sharing code between serverless functions', 'Sharing code', 378),
(6949, '46:08', 'Using layers for binaries in serverless functions', 'Layers', 378),
(6950, '48:04', 'Amazing capabilities unlocked by serverless', 'Capabilities', 378),
(6951, '49:18', 'Example of highly scalable serverless app', 'Scaling example', 378),
(6952, '51:17', 'Smearing apps across accounts to avoid noisy neighbors', 'Noisy neighbors', 378),
(6953, '52:19', 'Wrapping up the interview with Brian', 'Wrapping up', 378),
(6954, '52:47', 'Brian\'s sick pick - Begin fingerprinting', 'Fingerprinting', 378),
(6955, '54:13', 'Wes\'s sick pick - magnetic grabber tool', 'Grabber tool', 378),
(6956, '55:28', 'Scott\'s sick pick - Blink-182 covers album', 'Blink-182 album', 378),
(6957, '56:46', 'Brian plugs Begin\'s new proxy feature', 'Proxy feature', 378),
(6958, '58:00', 'Discussion on Begin co-founder Ryan Block', 'Ryan Block', 378),
(6959, '58:54', 'Wes plugs his courses', 'Wes courses', 378),
(6960, '59:02', 'Scott plugs his courses', 'Scott courses', 378),
(6961, '02:33', 'Tried breakout rooms in Zoom which didn\'t work well', 'Zoom breakout rooms', 379),
(6962, '04:06', 'Ended up using Discord for video chat', 'Discord video chat', 379),
(6963, '05:14', 'Used OBS Streamlabs for live streaming', 'OBS Streamlabs', 379),
(6964, '08:16', 'Discord is better than Slack for communities', 'Discord vs Slack', 379),
(6965, '11:46', 'Created looping intro video in Principle', 'Principle animation', 379),
(6966, '13:19', 'Captured Discord chat window for better video quality', 'Discord screen capture', 379),
(6967, '15:29', 'Used Mux and React HLS Player for custom live stream', 'Live stream setup', 379),
(6968, '17:23', 'Made countdown clock with Streamlabs plugin', 'Countdown clock', 379),
(6969, '19:00', 'Recorded own audio locally for best quality', 'Local audio recording', 379),
(6970, '21:46', 'Routed audio through Loopback on Mac', 'Audio routing', 379),
(6971, '00:43', 'Next.js can render pages statically or server-side', 'Rendering', 380),
(6972, '02:03', 'Gatsby builds all pages statically, Next allows static or server rendering per page', 'Static vs Server', 380),
(6973, '03:51', 'Gatsby builds pages statically at build time, Next renders pages on demand', 'Build Time vs On Demand', 380),
(6974, '05:30', 'Next 9 allows statically generating some pages, server rendering others', 'Static Generation', 380),
(6975, '08:27', 'Next can revalidate and rebuild stale pages automatically', 'Revalidation', 380),
(6976, '13:15', 'Sanity CMS allows previewing content changes before rebuilding Gatsby sites', 'Sanity Preview', 380),
(6977, '19:50', 'Gatsby auto-generates a GraphQL API from data sources', 'Gatsby GraphQL', 380),
(6978, '21:56', 'Next doesn\'t include data management, allows using tools like React Query', 'Bring Your Own Data', 380),
(6979, '26:34', 'Gatsby requires pregenerating dynamic page permutations statically', 'Dynamic Pages', 380),
(6980, '31:04', 'Folder-based routing can be limiting for animations and layouts', 'Folder Routing', 380),
(6981, '00:27', 'Scott introduces the topic of React Hooks', 'Intro', 381),
(6982, '01:00', 'Scott mentions broadcasting from different locations using fake backgrounds', 'Meta', 381),
(6983, '01:36', 'Sponsor spot for Sentry error tracking', 'Sponsor', 381),
(6984, '03:12', 'Getting into the topic of React Hooks', 'Hooks intro', 381),
(6985, '04:19', 'Hooks allow decoupling state from components', 'Decoupling', 381),
(6986, '06:46', 'Hooks enable code reuse across projects', 'Code reuse', 381),
(6987, '08:01', 'Hooks improve state management with libraries like Zustand', 'State mgmt', 381),
(6988, '11:35', 'Hooks reduce code duplication from class components', 'Less code', 381),
(6989, '14:33', 'Entire codebase converted to hooks except one complex component', 'Codebase conversion', 381),
(6990, '17:12', 'Refs are simpler with hooks compared to class components', 'Refs', 381),
(6991, '18:18', 'Now using named function components instead of arrow functions', 'Named functions', 381),
(6992, '21:05', 'As codebase grows, explicit naming helps avoid issues', 'Explicit naming', 381),
(6993, '21:14', 'Some gripes about hook naming - useLayoutEffect, useEffect', 'Hook naming', 381),
(6994, '22:29', 'setTimeout/setInterval should be built into React Hooks', 'setTimeout/setInterval', 381),
(6995, '23:32', 'Vue Composition API gets naming like watchEffect better', 'Vue comparison', 381),
(6996, '02:33', 'Wes and Scott discuss web developer gift guide', 'Gift guide', 382),
(6997, '03:02', 'Categories include home, games, tech, smart home, desk, streaming, fitness, clothing', 'Categories', 382),
(6998, '04:15', 'Scott discusses cold brew makers', 'Cold brew', 382),
(6999, '05:35', 'Wes discusses parchment paper and baking sheets', 'Baking', 382),
(7000, '06:25', 'Scott discusses gaffer\'s tape', 'Gaffer\'s tape', 382),
(7001, '08:38', 'Wes discusses knife sharpening stones', 'Knife sharpening', 382);

INSERT INTO `AiSummaryEntry` (`id`, `time`, `text`, `description`, `showNote`) VALUES
(7002, '10:45', 'Scott discusses cordless vacuum cleaner', 'Vacuum cleaner', 382),
(7003, '12:21', 'Scott discusses wireless mechanical keyboard', 'Mechanical keyboard', 382),
(7004, '13:56', 'Scott discusses programming puzzle game Baba Is You', 'Baba Is You', 382),
(7005, '17:17', 'Ad for LogRocket debugging tool', 'LogRocket ad', 382),
(7006, '19:16', 'Wes discusses USB-C hubs', 'USB-C hubs', 382),
(7007, '20:27', 'Scott discusses Wyze home security cameras', 'Wyze cameras', 382),
(7008, '21:02', 'Scott discusses Hue light dimmer switches', 'Hue dimmer switches', 382),
(7009, '21:41', 'Wes discusses Google Nest Hub', 'Google Nest Hub', 382),
(7010, '25:27', 'Scott discusses fatigue mats', 'Fatigue mats', 382),
(7011, '26:17', 'Wes discusses roller blade wheels for office chairs', 'Office chair wheels', 382),
(7012, '27:37', 'Wes discusses Wyze outdoor security camera', 'Wyze outdoor camera', 382),
(7013, '28:17', 'Scott discusses Lutron light dimmer switches', 'Lutron dimmer switches', 382),
(7014, '30:57', 'Wes discusses Leviton smart light switches', 'Leviton light switches', 382),
(7015, '31:41', 'Scott discusses Lutron Caseta light dimmer switches', 'Lutron Caseta dimmers', 382),
(7016, '33:14', 'Jonathan Speak recommends adjustable workbench desk', 'Workbench desk', 382),
(7017, '34:03', 'Wes discusses Elgato Stream Deck', 'Elgato Stream Deck', 382),
(7018, '35:32', 'Wes discusses Logitech MX Master mouse', 'Logitech mouse', 382),
(7019, '36:42', 'Scott discusses wireless phone chargers', 'Wireless chargers', 382),
(7020, '38:24', 'Wes discusses cheap HDMI video capture devices', 'HDMI capture', 382),
(7021, '39:50', 'Wes discusses Elgato Cam Link video capture', 'Elgato Cam Link', 382),
(7022, '41:48', 'Wes discusses LED studio lights', 'Studio lights', 382),
(7023, '44:14', 'Wes discusses LED RGB flood lights', 'RGB flood lights', 382),
(7024, '45:46', 'Scott discusses microphone arms', 'Microphone arms', 382),
(7025, '47:40', 'Ad for FreshBooks accounting software', 'FreshBooks ad', 382),
(7026, '50:06', 'Scott discusses Concept2 rowing machine', 'Rowing machine', 382),
(7027, '50:53', 'Scott discusses resistance bands', 'Resistance bands', 382),
(7028, '51:14', 'Wes discusses kettlebells', 'Kettlebells', 382),
(7029, '52:15', 'Scott discusses developer.io t-shirts', 'Developer shirts', 382),
(7030, '52:49', 'Wes discusses selvedge jeans', 'Selvedge jeans', 382),
(7031, '53:42', 'Scott discusses Huckberry men\'s clothing', 'Huckberry clothing', 382),
(7032, '54:22', 'Wes discusses Everlane and Fall Raven clothing', 'Clothing brands', 382),
(7033, '55:23', 'Scott discusses Lululemon joggers', 'Lululemon joggers', 382),
(7034, '00:26', 'Conventional commits', 'Topic', 383),
(7035, '00:50', 'Conventional commits help commit messages', 'Benefit', 383),
(7036, '01:02', 'Sentry tracks errors by commit', 'Sentry', 383),
(7037, '02:16', 'Wes hasn\'t used conventional commits', 'Experience', 383),
(7038, '04:04', 'Commit message syntax', 'Syntax', 383),
(7039, '05:01', 'Remembering syntax is hard', 'Remembering', 383),
(7040, '05:43', 'CLI could help with commits', 'CLI help', 383),
(7041, '06:49', 'VS Code extension helps', 'VS Code', 383),
(7042, '07:49', 'SemVer explained', 'SemVer', 383),
(7043, '09:03', 'Versioning with conventional commits', 'Versioning', 383),
(7044, '09:46', 'Automatic npm versioning', 'npm', 383),
(7045, '11:38', 'Awesome documentation', 'Docs', 383),
(7046, '00:26', 'Submit questions via syntax.fm', 'Question Submission', 384),
(7047, '01:37', 'WebRTC enables peer to peer communication in the browser', 'WebRTC', 384),
(7048, '03:21', 'Svelte is the easiest framework for beginners', 'Svelte', 384),
(7049, '05:10', 'CamelCase vs snake_case - pick one convention and stick to it', 'Naming Conventions', 384),
(7050, '06:26', 'Debugging is about isolation - isolate the problem then solve it', 'Debugging', 384),
(7051, '09:26', 'Framework vs library distinction doesn\'t really matter', 'Framework vs Library', 384),
(7052, '12:41', 'Debugging is a skill that improves with experience', 'Debugging Skills', 384),
(7053, '18:43', 'For component libraries, use Storybook and Babel aliases', 'Component Libraries', 384),
(7054, '21:43', 'Use Rust via WebAssembly for performance gains', 'Rust and WebAssembly', 384),
(7055, '27:29', 'Sanity CMS allows custom diff components', 'Sanity CMS', 384),
(7056, '00:27', 'Introduction', 'Intro', 385),
(7057, '00:34', 'Overview of client vs server validation', 'Overview', 385),
(7058, '02:32', 'Wes explains client side vs server side validation', 'Explanation', 385),
(7059, '03:30', 'Wes recounts story of manipulating client side validation', 'Story', 385),
(7060, '06:27', 'Role of client side validation for user experience', 'Client UX', 385),
(7061, '07:29', 'Client validation should not control app logic', 'No logic', 385),
(7062, '08:31', 'Client validation is easy to manipulate', 'Manipulate', 385),
(7063, '09:05', 'Server validation consistent across clients', 'Consistency', 385),
(7064, '12:34', 'Server validation before database writes', 'Before DB', 385),
(7065, '14:02', 'Server throws errors, client displays them', 'Errors', 385),
(7066, '17:17', 'Validate order total matches on client and server', 'Match totals', 385),
(7067, '18:29', 'Disable dev tools in production for extra security', 'Disable dev', 385),
(7068, '19:52', 'Security is about adding friction, not being unbreakable', 'Friction', 385),
(7069, '20:45', 'Security first, then user experience', 'Security first', 385),
(7070, '00:50', 'Ben started Reactathon conference in 2017 to provide intro level content around React', 'Reactathon origin', 386),
(7071, '02:37', 'Live Syntax podcasts hosted at Reactathon conferences', 'Live Syntax at Reactathon', 386),
(7072, '04:13', '3 things needed to start a conference: motivation, target audience, execution ability', 'Starting a conference', 386),
(7073, '05:39', 'Ben motivated by his passion for React and love of developer events/meetups', 'Ben\'s motivation', 386),
(7074, '08:02', 'Important to know your target audience and have an existing brand', 'Know your audience', 386),
(7075, '10:05', 'Transparency critical - explain who you are and why you\'re qualified', 'Transparency critical', 386),
(7076, '10:47', 'Ben runs Reactathon independently leveraging sales/marketing experience', 'Ben\'s experience', 386),
(7077, '13:14', 'First Reactathon in 2017 was a week of events leading up to React Conf', 'First Reactathon', 386),
(7078, '15:21', 'After React Conf canceled, expanded to 3 day conference for all levels', 'Expanded Reactathon', 386),
(7079, '15:52', 'After Reactathon, Netlify sponsor asked Ben to organize Jamstack Conf', 'Jamstack Conf', 386),
(7080, '03:41', 'CSS Grid doesn\'t solve masonry layout', 'masonry gap', 387),
(7081, '04:13', 'CSS Grid Masonry discussed since 2017', 'masonry old', 387),
(7082, '05:35', 'Shout out to Dave DeSandro\'s Masonry JS', 'masonry shoutout', 387),
(7083, '06:58', 'Masonry packs explicit items first', 'masonry explicit', 387),
(7084, '08:07', 'Masonry auto flow packs items or goes to next row', 'masonry pack v next', 387),
(7085, '09:28', 'Can change grid direction like RTL', 'masonry direction', 387),
(7086, '10:43', 'Examples at link show item placement', 'masonry examples', 387),
(7087, '11:50', 'Direction works differently than Flexbox axes', 'masonry direction vs flex', 387),
(7088, '13:12', 'With aspect ratio and element queries, CSS wishlist done', 'CSS wishlist', 387),
(7089, '14:50', 'Isotope used masonry for filtering animations', 'isotope animations', 387),
(7090, '00:22', 'Introduction to how to implement dark mode in web dev', 'Dark mode intro', 388),
(7091, '01:37', 'Discussion of using Sentry for debugging issues', 'Sentry debug', 388),
(7092, '03:18', 'Overview of starting with color variables for theming', 'Color variables', 388),
(7093, '04:35', 'Using abstract naming like primary, accent for variables', 'Abstract variables', 388),
(7094, '05:17', 'Benefits of using system color preferences', 'System colors', 388),
(7095, '06:04', 'Dark mode expectations for color contrast', 'Dark expectations', 388),
(7096, '07:19', 'Overriding variables instead of CSS overrides', 'CSS overrides', 388),
(7097, '08:46', 'Using color mix for opacity values', 'Opacity values', 388),
(7098, '09:59', 'Overriding system color preference with classes', 'Override system colors', 388),
(7099, '12:01', 'Avoiding flash of unthemed content with cookies', 'Avoid flash content', 388),
(7100, '13:11', 'Using CSS variables for theming', 'CSS variables', 388),
(7101, '14:27', 'Creating color variables with LCH', 'LCH colors', 388),
(7102, '16:02', 'Starting with predefined color palette', 'Predefined colors', 388),
(7103, '18:46', 'Sizing variables with clamp', 'Clamp sizing', 388),
(7104, '19:32', 'Overriding existing variables', 'Override variables', 388),
(7105, '22:24', 'Abstract variable naming conventions', 'Abstract variables', 388),
(7106, '26:37', 'Component level theming variables', 'Component variables', 388),
(7107, '31:43', 'Passing variables with inline styles', 'Inline variables', 388),
(7108, '32:34', 'Zones for theming components', 'Zones', 388),
(7109, '33:22', 'Light and dark mode overrides', 'Light/dark overrides', 388),
(7110, '38:10', 'Issues with color contrast in dark mode', 'Color contrast issues', 388),
(7111, '40:49', 'Avoiding inverse sections in dark mode', 'Avoid inverse sections', 388),
(7112, '41:33', 'Alternatives to drop shadows in dark mode', 'Drop shadow alternatives', 388),
(7113, '43:06', 'Avoiding flash of unthemed content', 'Avoid flash content', 388),
(7114, '43:20', 'Issues with opacity values in themes', 'Opacity issues', 388),
(7115, '48:50', 'Changing SVG icon colors', 'SVG color issues', 388),
(7116, '54:40', 'Upcoming features to help with theming', 'Future features', 388),
(7117, '02:33', 'Jason talks about his new studio setup', 'Studio setup', 389),
(7118, '03:44', 'Jason started making coding tutorial videos in 2015/2016', 'Coding videos', 389),
(7119, '05:52', 'Jason went full-time with videos recently to take them further', 'Full-time videos', 389),
(7120, '10:30', 'Jason is starting a new video series with web devs building apps', 'New video series', 389),
(7121, '23:55', 'Focus on what content you\'ll actually create consistently', 'Consistent content', 389),
(7122, '38:42', 'Jason feels weird about the React space right now', 'React space', 389),
(7123, '40:38', 'Jason sees AI as a creation tool, not publishing tool', 'AI thoughts', 389),
(7124, '45:19', 'In-person relationships will be more important to cut through noise', 'In-person relationships', 389),
(7125, '00:49', 'Cloudflare Workers allows running serverless code at the edge', 'Cloudflare Workers', 390),
(7126, '03:14', 'Cloudflare Workers are useful for customizing CDNs and building highly scalable apps', 'Use cases', 390),
(7127, '07:48', 'Cloudflare Workers can be used to proxy entire apps or modify responses', 'Use cases', 390),
(7128, '12:33', 'The edge brings apps closer to users and makes things faster', 'Edge computing', 390),
(7129, '15:23', 'Cloudflare Workers uses service workers API for a standardized model', 'Service workers', 390),
(7130, '37:00', 'Cloudflare was first to use service workers model for edge computing', 'First adopters', 390),
(7131, '40:15', 'Winter CG allows collaboration between runtimes on web standards', 'Winter CG', 390),
(7132, '48:09', 'Wrangler CLI uses actual Cloudflare Workers runtime for local dev', 'Local dev', 390),
(7133, '54:08', 'WebAssembly support allows running code in other languages', 'WebAssembly', 390),
(7134, '56:37', 'Cloudflare offers easy AI model deployment', 'Cloudflare AI', 390),
(7135, '01:00:19', 'The cache API is useful for persisting data at the edge', 'Cache API', 390),
(7136, '02:33', 'Darcy built a tweet wall with jQuery for a Holt Renfrew store display', 'Darcy\'s tweet wall', 391),
(7137, '02:49', 'Darcy had to hack into a store from outside to refresh the tweet wall app', 'Refreshing tweet wall', 391),
(7138, '03:52', 'Darcy became a jQuery master early in his career', 'jQuery mastery', 391),
(7139, '04:20', 'Scott built a daily deal aggregator called Deal Page', 'Deal Page', 391),
(7140, '05:12', 'Darcy worked at Jet Cooper which was acquired by Shopify', 'Jet Cooper acquired', 391),
(7141, '06:07', 'Darcy liked CodeIgniter for its MVC structure', 'CodeIgniter fan', 391),
(7142, '07:25', 'Darcy contributed to PHP docs early in his career', 'PHP docs contributions', 391),
(7143, '08:10', 'Darcy started Themify, a commercial WordPress theme company', 'Started Themify', 391),
(7144, '08:53', 'Darcy worked at Fantasy Interactive in New York', 'Fantasy Interactive', 391),
(7145, '09:04', 'Darcy met Isaac Schlueter, founder of npm, at an early conference', 'Met Isaac early on', 391),
(7146, '10:43', 'Ahmed Nasser brought Darcy on to help rebuild npm\'s team and community trust', 'Rebuilding npm', 391),
(7147, '12:09', 'npm was acquired by GitHub about a year after Darcy joined', 'npm acquired', 391),
(7148, '13:53', 'Other tools have started to encroach on npm\'s enterprise space', 'Encroaching competition', 391),
(7149, '14:58', 'npm went through a tough time before Darcy joined', 'npm tough spot', 391),
(7150, '17:00', 'npm got a lot of hate for issues like peer deps', 'npm hate', 391),
(7151, '18:30', 'The npm team worked hard to rebuild trust in the community', 'Rebuilding trust', 391),
(7152, '20:06', 'Volt is a new package manager and registry Darcy is building', 'Introducing Volt', 391),
(7153, '21:11', 'There\'s been a lack of innovation in JS package registry infrastructure', 'Lack of registry innovation', 391),
(7154, '22:29', 'Package manager clients are limited by server APIs', 'Client limitations', 391),
(7155, '22:45', 'Volt ships a local proxy of the registry with the client', 'Local proxy registry', 391),
(7156, '23:06', 'Volt allows managing private registry instances', 'Private registries', 391),
(7157, '23:26', 'Volt will have APIs for new registry capabilities', 'New registry APIs', 391),
(7158, '24:27', 'Remote caching shares build artifacts between teams', 'Remote caching', 391),
(7159, '25:40', 'Volt will optimize packages by providing different distributions', 'Package distributions', 391),
(7160, '26:52', 'Most packages ship a lot of code that isn\'t used', 'Unused code', 391),
(7161, '28:54', 'Volt can create ESM variants of legacy CommonJS packages', 'Package variants', 391),
(7162, '30:15', 'npm is slower because it\'s highly configurable', 'npm config slowness', 391),
(7163, '31:19', 'Hard linking has issues like lack of Windows support', 'Hard link issues', 391),
(7164, '33:20', 'Yarn pioneered workspaces support', 'Yarn workspaces', 391),
(7165, '34:48', 'Volt wants to be a direct competitor to monorepo tools like NX', 'Compete with NX', 391),
(7166, '36:05', 'Microsoft has thousands of JS packages in a monorepo', 'Microsoft monorepo', 391),
(7167, '37:14', 'Every Microsoft web app uses shared JS packages', 'Microsoft packages', 391),
(7168, '38:44', 'NPM never built policy engines for enterprises', 'No NPM policy engine', 391),
(7169, '40:37', 'Darcy doesn\'t see config locations as a major problem', 'No config problem', 391),
(7170, '42:34', 'Enterprises often run private registries for security', 'Private registries', 391),
(7171, '45:48', 'Entire npm registry is about 28 terabytes', '28 TB registry', 391),
(7172, '48:16', 'Volt aims to be the Google of packages', 'Google of packages', 391),
(7173, '49:37', 'Security tools rely on inaccurate registry metadata', 'Inaccurate metadata', 391),
(7174, '50:58', 'Socket analyzes package contents instead of just metadata', 'Socket analysis', 391),
(7175, '52:19', 'Volt will have dependency selectors like CSS', 'Dependency selectors', 391),
(7176, '53:27', 'Darcy recently got a goldendoodle puppy named Charlie', 'New puppy', 391),
(7177, '54:51', 'Darcy likes reading Scientific American magazine', 'Scientific American', 391),
(7178, '56:00', 'Darcy received a Nespresso machine as a gift', 'Nespresso machine', 391),
(7179, '57:49', 'Darcy recommends watching the BlackBerry movie', 'BlackBerry movie', 391),
(7180, '59:48', 'Darcy is listening to the new Blink 182 album', 'New Blink 182', 391),
(7181, '01:00:17', 'Darcy is seeing Moneen and Protest the Hero shows soon', 'Moneen and PtH shows', 391),
(7182, '00:17', 'Maps and sets - spicy buffalo objects', 'Maps/sets', 392),
(7183, '01:08', 'Maps can have any type as a key', 'Map keys', 392),
(7184, '02:21', 'Sets automatically deduplicate values', 'Set values', 392),
(7185, '04:52', 'Looping over maps and sets', 'Looping', 392),
(7186, '06:42', 'Use cases - metadata, dictionaries, lookups', 'Use cases', 392),
(7187, '09:55', 'API for maps and sets', 'API', 392),
(7188, '12:08', 'Using maps as a cache', 'Caching', 392),
(7189, '13:45', 'Sets vs arrays', 'Sets vs arrays', 392),
(7190, '17:31', 'When to use sets', 'Use sets', 392),
(7191, '20:24', 'Unique set values and use cases', 'Unique values', 392),
(7192, '22:52', 'Weak maps and sets', 'Weak maps/sets', 392),
(7193, '00:31', 'Introducing stale while revalidate caching technique', 'Caching intro', 393),
(7194, '01:05', 'Centux Replay for caching error handling', 'Caching errors', 393),
(7195, '01:47', 'Explanation of stale while revalidate caching header', 'Stale revalidate explained', 393),
(7196, '02:07', 'Caching HTML pages to avoid database queries', 'Caching HTML', 393),
(7197, '02:24', 'Caching Syntax open graph images to speed up generation', 'Caching images', 393),
(7198, '02:28', 'Open graph images take long time to generate', 'Slow image gen', 393),
(7199, '03:11', 'Why you might want to cache something', 'Why cache', 393),
(7200, '03:26', 'Avoiding expensive operations with caching', 'Avoid expense', 393),
(7201, '04:08', 'Caching used in many areas of computer science', 'Caching ubiquitous', 393),
(7202, '04:20', 'Avoiding expensive operations with caching', 'Avoid expense', 393),
(7203, '04:55', 'Caching images to avoid re-downloading', 'Caching images', 393),
(7204, '05:11', 'Putting caches closer to users with CDNs', 'CDN caching', 393),
(7205, '05:26', 'Local browser caches assets', 'Local caching', 393),
(7206, '05:40', 'CDNs cache assets globally', 'Global CDNs', 393),
(7207, '06:13', 'Server can respect cache headers', 'Server caching', 393),
(7208, '07:07', 'Caching to limit API hits', 'Limit API hits', 393),
(7209, '07:40', 'Caching expensive image generation', 'Cache images', 393),
(7210, '08:24', 'Serving from cache avoids expense of regeneration', 'Avoid expense', 393),
(7211, '09:02', 'Max age sets cache lifetime in seconds', 'Max age explained', 393),
(7212, '10:06', 'Don\'t cache sensitive user-specific data', 'No user cache', 393),
(7213, '10:22', 'S-maxage caches on CDN, maxage on browser', 'S-maxage explained', 393),
(7214, '11:52', 'Max age sets total cache lifetime', 'Max age sets cache lifetime', 393),
(7215, '12:05', 'Stale while revalidate sets stale cache lifetime', 'Stale lifetime', 393),
(7216, '12:16', 'Stale value tells how long to serve stale asset', 'Stale value', 393),
(7217, '13:33', 'Stale while revalidate serves stale but refreshes', 'Stale but refreshes', 393),
(7218, '14:41', 'Stale while revalidate avoids waiting for background tasks', 'Avoids waiting', 393),
(7219, '15:11', 'Not for content that must always be fresh', 'Not for fresh content', 393),
(7220, '16:16', 'Accuracy important for stale cache suitability', 'Accuracy matters', 393),
(7221, '18:35', 'Why not use stale while revalidate everywhere?', 'Why not everywhere?', 393),
(7222, '18:47', 'Caching adds complexity', 'Caching complex', 393),
(7223, '19:22', 'Need traffic to enable stale revalidations', 'Need traffic', 393),
(7224, '20:08', 'Some things don\'t need caching', 'Not always needed', 393),
(7225, '20:41', 'CDN propagation delays limit speed', 'CDN delays', 393),
(7226, '21:18', 'Show wrap-up', 'Wrap-up', 393),
(7227, '00:42', 'Launch issues and lessons learned', 'Site launch', 394),
(7228, '02:33', 'Too much data crashed database', 'Database timeout', 394),
(7229, '03:26', 'Just launch, don\'t over polish', 'Launch early', 394),
(7230, '04:29', 'AI transcript caused database timeout', 'AI transcripts', 394),
(7231, '09:09', 'Error monitoring essential for launch', 'Error monitoring', 394),
(7232, '14:15', 'Replay showed odd player bug cause', 'Bug replay', 394),
(7233, '16:27', 'UI bugs missed in dark mode', 'Dark mode bugs', 394),
(7234, '18:40', 'WASM bundling issues on Vercel', 'WASM issues', 394),
(7235, '22:07', 'Site launches faster now', 'Fast launch', 394),
(7236, '23:36', 'AI generated show notes very good', 'AI show notes', 394),
(7237, '26:25', 'Local development very fast', 'Fast local dev', 394),
(7238, '27:38', 'Mind payload sizes in production', 'Payload sizes', 394),
(7239, '31:39', 'New browser APIs look promising', 'Browser APIs', 394),
(7240, '36:19', 'Background jobs and serverless issues', 'Background jobs', 394),
(7241, '40:21', 'Launched with TypeScript errors', 'TypeScript errors', 394),
(7242, '42:57', 'Basic tests sufficient for launch', 'Basic testing', 394),
(7243, '45:09', 'Wes improved design and polish', 'Design polish', 394),
(7244, '00:53', 'How to build a website or app', 'Topic', 395),
(7245, '03:08', 'Design and code workflow', 'Workflow', 395),
(7246, '06:33', 'Design systems vs creative design', 'Design approach', 395),
(7247, '10:12', 'Real vs fake data', 'Data', 395),
(7248, '13:36', 'Templating engines', 'Templating', 395),
(7249, '18:18', 'Component design approaches', 'Components', 395),
(7250, '21:16', 'Testing components', 'Testing', 395),
(7251, '23:37', 'CSS variables and dev tools', 'CSS', 395),
(7252, '26:31', 'Varied fake data', 'Data', 395),
(7253, '30:07', 'Do you need a CMS?', 'CMS', 395),
(7254, '33:25', 'Static CMS options', 'CMS', 395),
(7255, '36:13', 'Picking backend first', 'Backend', 395),
(7256, '39:54', 'Meta frameworks', 'Frameworks', 395),
(7257, '41:46', 'End-to-end testing', 'Testing', 395),
(7258, '44:15', 'Integration testing challenges', 'Testing', 395),
(7259, '47:36', 'You may not need complex hosting', 'Hosting', 395),
(7260, '49:09', 'Simple HTML/CSS hosting options', 'Hosting', 395),
(7261, '00:33', 'Wes and Scott introduce guest Mark Techson from Angular team', 'Angular intro', 396),
(7262, '02:33', 'Mark explains Angular rebrand is just a rebrand, same framework', 'Rebrand', 396),
(7263, '03:15', 'Scott asks about history of Angular JS and Angular', 'History', 396),
(7264, '05:20', 'Wes asks about new Angular website angular.dev', 'Angular.dev', 396),
(7265, '07:15', 'Mark explains how interactive tutorials work using web containers', 'Tutorials', 396),
(7266, '08:39', 'Mark discusses strengths of Angular ecosystem and adoption by enterprise', 'Strengths', 396),
(7267, '10:45', 'Mark talks about Angular being used in production at scale at Google', 'Google scale', 396),
(7268, '11:38', 'Mark explains Angular requires TypeScript', 'TypeScript', 396),
(7269, '13:17', 'Discussion about Angular adopting RxJS Signals for state management', 'State signals', 396),
(7270, '15:20', 'Wes asks about state management strategies in Angular', 'State options', 396),
(7271, '19:05', 'Mark excited about deferred loading with new template syntax', 'Deferred loading', 396),
(7272, '20:33', 'Mark explains declarative deferred loading syntax', 'Deferred syntax', 396),
(7273, '21:29', 'Teams share ideas like deferred loading across frameworks', 'Sharing ideas', 396),
(7274, '23:09', 'Mark explains new low-level control flow if/for syntax', 'Control flow', 396),
(7275, '25:25', 'Scott asks about meta-framework and SSR story for Angular', 'Metaframework', 396),
(7276, '26:17', 'Mark explains hydration support but not full metaframework yet', 'Hydration', 396),
(7277, '27:39', 'Discussion about internal Google framework Wiz', 'Wiz framework', 396),
(7278, '31:10', 'Wes asks about new view transition APIs', 'Transitions API', 396),
(7279, '32:39', 'Scott asks about CSS strategy in Angular', 'CSS strategy', 396),
(7280, '33:56', 'Wes asks how data flows from components to templates', 'Data flow', 396),
(7281, '35:07', 'Wes jokingly asks about competition with other teams at Google', 'Google teams', 396),
(7282, '39:37', 'Wes asks about component library ecosystem', 'Components', 396),
(7283, '42:03', 'Scott asks how Angular works with web components', 'Web components', 396),
(7284, '43:02', 'Mark shares he uses VS Code high contrast theme', 'Editor setup', 396),
(7285, '44:18', 'Mark discusses how he stays up to date on web tech', 'Staying current', 396),
(7286, '45:36', 'Wes says no need to rush to latest trends', 'Latest trends', 396),
(7287, '47:39', 'Mark recommends tech radars to spot shifts vs trends', 'Tech radar', 396),
(7288, '49:42', 'Discussion about Thoughtworks technology radar', 'Thoughtworks radar', 396),
(7289, '51:27', 'Mark shares Godot game engine as his sick pick', 'Godot pick', 396),
(7290, '53:48', 'Mark plugs Angular.dev and his encouragement videos', 'Angular plug', 396),
(7291, '02:10', 'nth child microsyntax allows more control over nth child selectors', 'nth child microsyntax', 397),
(7292, '07:16', 'CSS motion path allows moving DOM elements along SVG paths', 'CSS motion path', 397),
(7293, '11:23', 'scroll snap allows snapping to specific regions when scrolling', 'scroll snap', 397),
(7294, '15:12', 'scroll driven animations enable animations based on scroll position', 'scroll driven animations', 397),
(7295, '17:48', 'margin trim trims margins at container edges', 'margin trim', 397),
(7296, '00:24', 'TypeScript future viability', 'TypeScript viability', 398),
(7297, '00:29', 'Flutter for web apps', 'Flutter web', 398),
(7298, '00:37', 'Tailscale for secure remote access', 'Tailscale', 398),
(7299, '00:52', 'Making Syntax website faster with Sentry', 'Sentry perf', 398),
(7300, '08:29', 'Canvas apps can be fast but lack browser features', 'Canvas apps', 398),
(7301, '14:01', 'Tailscale for secure remote access', 'Tailscale', 398),
(7302, '17:08', 'Bandcamp music sales platform', 'Bandcamp', 398),
(7303, '24:01', 'Modern workflows for WordPress sites', 'WordPress workflows', 398),
(7304, '36:41', 'Shoelace web component library', 'Shoelace lib', 398),
(7305, '40:31', 'Rust project ideas', 'Rust projects', 398),
(7306, '45:50', 'Having Scott\'s wife back on the show', 'Scott\'s wife', 398),
(7307, '47:53', 'Using MongoDB for AI embeddings', 'MongoDB embeddings', 398),
(7308, '00:36', 'Discussing CSS Layers', 'CSS Layers', 399),
(7309, '02:46', 'What CSS Layers are', 'Layers', 399),
(7310, '03:47', 'Browser Support for CSS Layers', 'Support', 399),
(7311, '04:13', 'Purpose and usage of CSS Layers', 'Purpose', 399),
(7312, '05:06', 'Layers solve specificity issues', 'Specificity', 399),
(7313, '06:03', 'Redesigning sites with legacy code', 'Redesign', 399),
(7314, '07:17', 'Handling third party CSS overrides', 'Third Party CSS', 399),
(7315, '08:13', 'Defining layer order ahead of time', 'Layer Order', 399),
(7316, '08:54', 'Authoring order matters without defined layers', 'Authoring Order', 399),
(7317, '09:45', 'Overriding legacy CSS with layers', 'Legacy Override', 399),
(7318, '10:41', 'Non-layered CSS precedence', 'Non-layered CSS', 399),
(7319, '11:54', 'Inline styles precedence over layers', 'Inline Styles', 399),
(7320, '12:25', 'Non-layered CSS overrides layers', 'Non-layered Precedence', 399),
(7321, '13:19', 'Using @import to wrap legacy CSS in layers', '@import Legacy', 399),
(7322, '16:24', 'Nesting layers for finer control', 'Nesting Layers', 399),
(7323, '18:07', 'Example layer usage', 'Layer Examples', 399),
(7324, '20:21', 'More layers provide more benefits', 'More Layers', 399),
(7325, '21:10', 'Tailwind uses layers under the hood', 'Tailwind Layers', 399),
(7326, '23:19', 'Adam Argyle\'s nested layer usage', 'Argyle Layers', 399),
(7327, '25:21', 'Una Kravitz\'s simple layer usage', 'Kravitz Layers', 399),
(7328, '02:33', 'Welcoming Salma Alam Naylor to talk DevRel', 'Intro', 400),
(7329, '04:34', 'Where DevRel teams exist in companies', 'DevRel in company', 400),
(7330, '06:29', 'DevRel as a bridge between community/engineering/product/marketing', 'DevRel role', 400),
(7331, '10:26', 'Developers don\'t want to be marketed to by companies', 'Marketing', 400),
(7332, '15:56', 'Speaking at a conference on personal Twitch stream', 'Speaking', 400),
(7333, '21:42', 'DevRel being given blog post quotas', 'Blog quotas', 400),
(7334, '24:02', 'Writing 50% blog posts on product and 50% on personal interests', 'Blog split', 400),
(7335, '35:49', 'Getting into DevRel by doing it as a hobby first', 'Getting into DevRel', 400),
(7336, '38:14', 'Having your own website/domain is important', 'Personal domain', 400),
(7337, '41:41', 'Pick 1 platform to focus on instead of trying them all', 'Focus platform', 400),
(7338, '45:23', 'DevRel needs research time to keep up with web dev', 'Research time', 400),
(7339, '50:13', 'Some conferences aren\'t very inclusive in their speaker lineups', 'Conference inclusion', 400),
(7340, '54:39', 'Recreating 1990s mysterious website Hell.com', 'Hell.com', 400),
(7341, '02:04', 'Standardize source maps to fix bugs and improve performance', 'Source maps', 401),
(7342, '05:37', 'New method to format durations based on locale', 'Format durations', 401),
(7343, '08:25', 'Revise source maps to be smaller and parse faster', 'Faster source maps', 401),
(7344, '13:04', 'Temporal API to replace JavaScript date time', 'Temporal API', 401),
(7345, '21:08', 'Find last index and last instance in arrays', 'Last in arrays', 401),
(7346, '23:42', 'Import JSON files directly into JavaScript', 'JSON imports', 401),
(7347, '24:50', 'Change regex flags within expressions', 'Regex modifiers', 401),
(7348, '26:51', 'Group arrays by callback return value', 'Array grouping', 401),
(7349, '30:54', 'Immutable array methods like sort and splice', 'Immutable arrays', 401),
(7350, '00:33', 'Discussion on Payload CMS', 'Payload CMS', 402),
(7351, '02:14', 'Thoughts on where Payload is going', 'Payload direction', 402),
(7352, '03:21', 'Using CMS solutions and building your own admin UI', 'CMS solutions', 402),
(7353, '04:46', 'Payloads features and benefits over other CMS', 'Payload features', 402),
(7354, '06:18', 'Naming and positioning Payload vs other CMS', 'Payload naming', 402),
(7355, '08:09', 'Using Payload for non-website tools and internal enterprise apps', 'Payload use cases', 402),
(7356, '09:27', 'Payload deployments - customization and flexibility', 'Payload flexibility', 402),
(7357, '11:07', 'Using Drizzle ORM with Payload for flexibility', 'Drizzle and Payload', 402),
(7358, '13:36', 'Generating Payload types for front-end usage', 'Payload types', 402),
(7359, '14:14', 'Pronouncing MS SQL and database options', 'MS SQL pronunciation', 402),
(7360, '15:19', 'Payload performance considerations in DB choice', 'Payload performance', 402),
(7361, '16:24', 'Automatically joining tables with Drizzle for Payload', 'Joining tables', 402),
(7362, '16:48', 'TypeScript migrations with Drizzle', 'TypeScript migrations', 402),
(7363, '18:12', 'Maintaining MongoDB and Drizzle implementations', 'Multiple databases', 402),
(7364, '19:48', 'Querying Payload data from front-end frameworks', 'Querying data', 402),
(7365, '21:48', 'Simplifying headless by using Payload and front-end together', 'Headless simplicity', 402),
(7366, '23:04', 'Moving back to simplicity from complexity in web dev', 'Web simplicity', 402),
(7367, '24:39', 'Moving Payload architecture to Next.js', 'Next.js move', 402),
(7368, '25:30', 'Next.js server components importance for Payload', 'Server components', 402),
(7369, '26:45', 'GitHub and AI\'s increasing roles', 'GitHub and AI', 402),
(7370, '27:34', 'Building custom vs configurable UIs with CMS', 'Custom UIs', 402),
(7371, '30:05', 'Building Payload visual editor for any front-end', 'Visual editor', 402),
(7372, '30:41', 'Example of building ecommerce site powered by Payload', 'Ecommerce example', 402),
(7373, '31:25', 'Exposing Payload admin UI to end users', 'Exposing admin UI', 402),
(7374, '32:46', 'Building Payload component library for front-ends', 'Component library', 402),
(7375, '33:20', 'Filling gap between Payload admin and front-end UIs', 'Bridging admin UIs', 402),
(7376, '35:12', 'Avoiding building back-ends from scratch with CMS', 'Avoid back-end building', 402),
(7377, '36:18', 'Hosting front-ends with Payload Cloud', 'Hosting front-ends', 402),
(7378, '38:20', 'Need for Laravel equivalent in JavaScript ecosystem', 'JavaScript Laravel', 402),
(7379, '39:48', 'Payloads goal to be Ruby on Rails of TypeScript', 'Payload goals', 402),
(7380, '41:17', 'Sustainability of open source Payload development', 'Open source sustainability', 402),
(7381, '42:09', 'Managing Payload open source contributions', 'Managing contributions', 402),
(7382, '43:39', 'Using GitHub for Pull Requests with Payload', 'GitHub PRs', 402),
(7383, '44:05', 'Thoughts on GitHub moving more into AI', 'GitHub and AI', 402),
(7384, '45:35', 'Responsibly using AI for content creation', 'Responsible AI', 402),
(7385, '47:08', 'Fundraising plans and revenue sources for Payload', 'Revenue sources', 402),
(7386, '48:29', 'Using Sentry for error tracking with Payload', 'Sentry integration', 402),
(7387, '50:16', 'Fixing bugs with help of Sentry session replays', 'Fixing bugs with Sentry', 402),
(7388, '51:43', 'Payload offices and team based in Michigan', 'Michigan offices', 402),
(7389, '53:12', 'Learning web development again from scratch', 'Learning from scratch', 402),
(7390, '54:07', 'Hopes for bundler and ESM improvements', 'Bundler hopes', 402),
(7391, '02:30', 'ARIA roles and labels explained', 'ARIA', 403),
(7392, '05:04', 'Using ARIA labels for better UI context', 'Context', 403),
(7393, '09:05', 'Accessibility lawsuits and legal requirements', 'Lawsuits', 403),
(7394, '12:11', 'ARIA roles describe element purpose', 'Roles', 403),
(7395, '21:54', 'ARIA labeled by associates labels', 'Labeled by', 403),
(7396, '00:34', 'Discussion on whether you can trust random npm packages', 'npm trust', 404),
(7397, '01:18', 'socket.dev launched 1.5 years ago to help pick safe open source packages', 'socket.dev', 404),
(7398, '02:24', 'Some malicious packages steal environment variables and API keys', 'malicious packages', 404),
(7399, '11:12', 'Event stream node package was hijacked to steal users\' cryptocurrency', 'event stream hijack', 404),
(7400, '16:21', 'Socket scans npm packages for suspicious signals like new network requests', 'scanning packages', 404),
(7401, '20:27', 'Socket scans every package with over 500 downloads and new publishes', 'scanning criteria', 404),
(7402, '23:15', 'Protestware packages add unwanted code based on user\'s location', 'protestware packages', 404),
(7403, '26:00', 'Socket finds about 400 malicious packages per week', 'malicious packages found', 404),
(7404, '36:37', 'WebTorrent uses WebRTC data channels for peer-to-peer file transfer', 'webtorrent implementation', 404),
(7405, '44:00', 'Wormhole provides end-to-end encrypted file sharing', 'wormhole encrypted files', 404),
(7406, '02:26', 'Overview of observer pattern', 'Pattern overview', 405),
(7407, '02:43', 'Used in game development', 'Game dev use', 405),
(7408, '04:05', 'Achievements as observer example', 'Achievements', 405),
(7409, '05:12', 'Decoupled event communication', 'Decoupled events', 405),
(7410, '06:50', 'Observer and subject components', 'Components', 405),
(7411, '07:32', 'Intersection observer example', 'Intersection', 405),
(7412, '08:17', 'Potential downsides of observers', 'Downsides', 405),
(7413, '10:18', 'Observers in JavaScript', 'JavaScript', 405),
(7414, '10:55', 'Other DOM observers', 'DOM observers', 405),
(7415, '12:54', 'Event listeners as observers', 'Event listeners', 405),
(7416, '15:16', 'Differences from observables', 'Observables', 405),
(7417, '16:59', 'Signals and observer pattern', 'Signals', 405);

INSERT INTO `AiTweet` (`id`, `content`, `showNote`) VALUES
(4, 'Want to chat about #BunJS, #GraphQL, #Rust, code documentation, APIs, and more? Check out the latest potluck episode of Syntax!', 2),
(5, 'Curious about becoming a guest on @SyntaxFM?Scott and Wes share how to get on the show in the newest potluck episode.', 2),
(6, 'APIs got you confused? @scotttolinski and @wesbos explain the key differences between #REST, #GraphQL, and #tRPC on @SyntaxFM\'s latest.', 2),
(7, 'If you\'re a web dev wondering whether to learn #Rust, this @SyntaxFM Q&A has some great perspectives. Worth a listen!', 2),
(8, 'Need help documenting intricate business logic and code? Don\'t miss the tips in @SyntaxFM\'s newest potluck episode.', 2),
(9, 'Troubleshooting WordPress APIs with Axios vs Fetch? @SyntaxFM tackles a listener question with some debugging suggestions.', 2),
(10, 'Home gym gear taking up space? @scotttolinski shares how he keeps his equipment streak going for over 100 weeks!', 2),
(11, 'Want the scoop on the new #BunJS runtime? @wesbos and @scotttolinski give their takes in the latest @SyntaxFM Q&A.', 2),
(12, 'Learn how proper #heading hierarchy improves #a11y and #SEO on your #website in this week\'s episode!', 3),
(13, 'Use #headings to create an #outline for your #website content. Skip levels at your own peril!', 3),
(14, 'For maximum #accessibility, headings should match the logical document structure, not just visual design.', 3),
(15, 'Screen readers rely on good #heading hierarchy to help users navigate pages. We explain how it works in depth.', 3),
(16, 'Did you know your logo should *not* be an #h1? We discuss common #heading mistakes and how to avoid them.', 3),
(17, 'Proper heading structure acts as landmarks to help screen readers, keyboards, and search bots understand your #website content.', 3),
(18, 'Get the inside scoop on standing out in developer hiring in 2023 👇', 4),
(19, 'The developer hiring recession and shift to backend engineers explained 🧵', 4),
(20, 'Key strategies for writing an authentic \'tell me about yourself\' for interviews ✍️', 4),
(21, 'Why LinkedIn and social proofing through content creation matter more than ever 📲', 4),
(22, 'The tech skills that are in highest demand right now 🔥', 4),
(23, 'Why using AI generated content will hurt, not help your developer job search 🤖', 4),
(24, 'How to keep up with the latest trends and best practices as a developer 📡', 4),
(25, 'The @StateofCSS survey results are in! Tune in to hear @wesbos and @stolinski break down the top new CSS features devs are (and aren\'t) using in 2023!', 5),
(26, 'Curious what CSS features like subgrid, aspect ratio, and variable fonts devs are actually using in production? Get the inside scoop in the latest @SyntaxFM!', 5),
(27, 'Want the TLDR on the @StateofCSS survey results? @wesbos & @stolinski deliver the most interesting stats and their hot takes on this year\'s report!', 5),
(28, 'Which new CSS features like relative colors and anchor positioning should you be using in 2023? Get the lowdown from @SyntaxFM\'s breakdown of the @StateofCSS survey!', 5),
(29, 'Hear @wesbos and @stolinski\'s reactions to surprise survey findings like 51% of devs claiming to use CSS :has() already. Get their take in the new @SyntaxFM!', 5),
(30, 'Get Wes and Scott\'s insider commentary on the @StateofCSS results and which features they can\'t wait to use more of, like variable fonts, subgrid, and relative colors!', 5),
(31, 'It\'s Tori vs Electron for desktop app dev with web tech! Who will win? #webdev', 6),
(32, 'Want to build a desktop app with JS/HTML/CSS? @scottydocs and @wesbos compare Tori vs Electron pros and cons on the latest Syntax podcast!', 6),
(33, 'Tori uses native OS webviews while Electron bundles Chromium - how does this affect app size and developer experience? #syntaxfm', 6),
(34, 'Debugging permissions and browser feature differences between Tori and Electron desktop apps - the web dev desktop app smackdown!', 6),
(35, '.@wesbos makes a great point - faster tech doesn\'t always win over easier tech. Where do Tori and Electron fit in the spectrum? #syntaxfm', 6),
(36, 'Which has better dev experience and setup - Tori or Electron? How does maturity play into the desktop app decision? #syntaxfm', 6),
(37, 'Turns out building a desktop app with web tech is way easier than diving into native Cocoa and Xcode! Tori FTW #syntaxfm', 6),
(38, 'Tune in to hear Dr. Courtney Tolinski define anxiety disorders and share tips for managing anxiety in your daily life.', 7),
(39, 'Learn about the symptoms, causes and effects of untreated anxiety from clinical psychologist Dr. Courtney Tolinski.', 7),
(40, 'Get advice for recognizing anxiety triggers and making big life decisions from anxiety expert Dr. Courtney Tolinski.', 7),
(41, 'Clinical psychologist Dr. Courtney Tolinski discusses strategies for dealing with career anxiety in the ever-changing web dev landscape.', 7),
(42, 'Don\'t miss anxiety expert Dr. Courtney Tolinski explain how to move from stress to clinical anxiety and share science-based ways to find relief.', 7),
(43, 'Anxiety specialist Dr. Courtney Tolinski shares healthy strategies to manage anxiety, including therapy, mindfulness, exercise and more.', 7),
(44, 'Learn why @wesbos loves working with #SvelteKit for building web apps 👉', 8),
(45, 'Hear @stolinski and @wesbos revisit building with #Svelte and #SvelteKit 👂', 8),
(46, 'The Syntax hosts break down #Svelte templating, data loading, state management, actions, layouts, and more! 🎙', 8),
(47, '@wesbos shares his experience transitioning from #React to #Svelte and #SvelteKit ⚛', 8),
(48, 'Rid yourself of React pains by embracing #Svelte and #SvelteKit says @wesbos 🙌', 8),
(49, 'Learn how Svelte makes state management and data binding a breeze vs React 🎯', 8),
(50, 'Want to build something on top of #Tonal\'s limited API? @scottdotjs intercepted requests to understand and expand its capabilities!', 9),
(51, 'Reverse engineering hardware with #JavaScript? @scottdotjs proxied his @tonal workout device to build custom community workout features!', 9),
(52, 'Curious what data your apps send? Learn how @wesbos and @scottdotjs intercepted requests to understand #Tonal, GitHub Copilot, and more!', 9),
(53, '.@wesbos and @scottdotjs peer into #Tonal, Instagram, Twitter, and other services by proxying network requests - listen in to learn how!', 9),
(54, 'Ever wonder how @HomeAssistant integrations for #Wyze and #Hyundai work? They proxy and reverse engineer requests! Learn from @SyntaxFM', 9),
(55, '@wesbos and @scottdotjs explore the shady world of proxying requests for hacking, debugging, and understanding app APIs on @SyntaxFM!', 9),
(56, 'Hear how Stuart went from working in his family\'s betting shop to becoming a web developer in just a few years!', 10),
(57, 'Stuart shares his advice for preparing for dev interviews, including focusing on soft skills & getting feedback.', 10),
(58, 'Stuart talks about how he stayed motivated learning to code while working full-time and having a young family. Great tips!', 10),
(59, 'Want to make the jump to web dev? Stuart explains how he researched coding, built projects, and made time to learn.', 10),
(60, 'Long-time Syntax listener Stuart shares his story of changing careers and landing a remote web dev role. So inspiring!', 10),
(61, 'Stuart gives advice for avoiding burnout when hustling to learn coding: take breaks, switch up tasks, and watch out for the signs.', 10),
(62, 'Scott built a real-time markdown editor during @getsentry\'s hack week! #hackweek', 11),
(63, 'Wes automated his office lighting and devices with a DIY stream deck! #hackweek #automation', 11),
(64, 'What would you build if you had a week to work on anything? Scott and Wes discuss their #hackweek projects on @syntaxfm', 11),
(65, 'Too many hobbies, too little time! Scott and Wes lament all their interests on the latest @syntaxfm #podcast', 11),
(66, 'Control your Mac\'s brightness beyond 100% with Wes\'s sick pick Better Display #syntaxfm #sickpick', 11),
(67, 'Organize your shop with Scott\'s sick pick - strong magnets! #syntaxfm #sickpick', 11),
(68, 'CSS nesting is now supported across all major browsers! Learn how to use it without creating spaghetti code.', 12),
(69, 'Avoid CSS selector soup - we\'ve got pro tips for using nesting without overnesting!', 12),
(70, 'Ampersand to the rescue! Use the parent selector in CSS nesting for powerful abilities.', 12),
(71, 'Media queries got you tangled up? Nest them directly inside your components with CSS nesting!', 12),
(72, 'JS devs: CSS nesting works a lot like component scoping in Svelte and React! Keep styling contained.', 12),
(73, 'CSS nesting is here! Unwrap pro tips on modern styling from the Syntax FM pod.', 12),
(74, 'We\'ve got the DL on leveraging CSS nesting for shorter selectors and tidier styling.', 12),
(75, 'Just announced: Astro 3.0 is out with view transitions, image optimization, and more optimizations! Excited to try the new release. #Astro3 #WebDev', 13),
(76, 'Loving how @Astrodotbuild keeps improving while still focusing on beginner-friendliness. Astro 3.0 sounds like another solid upgrade. #Astro3', 13),
(77, 'Cool to hear @FredKSchott talk Astro 3.0 on @SyntaxFM. View transitions and image optimization are big wins. #Astro3', 13),
(78, 'The Astro community continues to impress. Great to see a framework grow in a thoughtful, inclusive way. #Astro3', 13),
(79, '.@Astrodotbuild Launch Week is here! Tune into the latest @SyntaxFM to hear about Astro 3.0 and more from Fred. #Astro3 #WebDev', 13),
(80, 'Big fan of Astro\'s lightweight philosophy. More frameworks should aim for approachable docs and easy upgrades like Astro 3.0. #WebDev', 13),
(81, 'Excited about Astro 3.0! Can\'t wait to try the new view transitions and image optimization. Kudos to the Astro team. #Astro3', 13),
(82, 'Learn when and why to use .d.ts files in TypeScript', 14),
(83, 'Find out how Scott discovered his dog is part chihuahua from a DNA test!', 14),
(84, 'Get Scott and Wes\'s tips on developer soft skills', 14),
(85, 'Resources for debugging web performance issues', 14),
(86, 'Understand async vs defer for script loading in 2023', 14),
(87, 'Hear how Scott and Wes organize their code directories', 14),
(88, 'Learn how JavaScript type coercion works with .includes()', 14),
(89, 'Learn all about JavaScript closures and scoping in this great @SyntaxFM episode - closures demystified for beginners!', 15),
(90, 'Struggling with closures in JS? @SyntaxFM has you covered with real world examples of closures, scope, and closure usage.', 15),
(91, 'Want a deep dive into lexical scoping, closures, and closure usage? Get the full scoop in this @SyntaxFM podcast episode.', 15),
(92, 'Don\'t let closures confuse you! @SyntaxFM breaks it all down in simple terms with handy real-world examples. Check it out!', 15),
(93, 'Closures explained clearly and concisely by @SyntaxFM - don\'t miss this episode if JS closures mystify you!', 15),
(94, 'Get closure on closures with @SyntaxFM\'s straightforward explanations, metaphors, and real-world closure examples.', 15),
(95, 'Hear @acemarke explain the Herculean effort to make Redux libs work in AMD, CJS, ESM, Deno, Webpack, Vite, etc. respect gained for package authors!', 16),
(96, 'Ever wonder why even latest packages still use CommonJS? @acemarke walks through the complexities of supporting ESM, CJS & more simultaneously.', 16),
(97, 'Laugh and cry along with @acemarke as he describes shipping 5-10 build artifacts per Redux package entry point. We take working code for granted!', 16),
(98, 'Package authors make sacrifices so your code works seamlessly. @acemarke even made React prod builds generate sourcemaps to help users debug errors!', 16),
(99, 'What is the benefit of ESM vs CJS? @acemarke breaks it down and explains how tooling and module interop have hindered adoption.', 16),
(100, 'Devs rely on package authors without realizing their struggles. Follow @acemarke for enlightening talks on maintaining Redux and other libs.', 16),
(101, 'Learn how to take your #opengraph and #OGimages to the next level on the latest @SyntaxFM podcast!', 17),
(102, 'Want to dynamically generate custom OG images? @wesbos and @stolinski share different techniques using Satori, Cloudinary, Puppeteer and more on @SyntaxFM!', 17),
(103, 'Level up your #ogimage game! Check out the latest @SyntaxFM podcast for a deep dive into dynamically generating social media preview images.', 17),
(104, 'Don\'t miss the newest @SyntaxFM podcast unpacking pro techniques for creating dynamic and custom #opengraph images.', 17),
(105, 'Tired of basic OG images? @wesbos and @stolinski explore advanced techniques like Puppeteer, Satori, and Cloudinary on @SyntaxFM\'s latest episode!', 17),
(106, 'Up your #ogimage game with Puppeteer, Satori, Cloudinary, and more - latest @SyntaxFM podcast has the details!', 17),
(107, 'Take your #opengraph images to the next level! Learn techniques for dynamic OG image generation on the newest @SyntaxFM podcast.', 17),
(108, 'Get ready for the tastiest non-coding treats on @SyntaxFM! Tune in to hear @WesBos and @stolinski chat about concerts, home gyms, reality shows, and more.', 18),
(109, 'Want to level up your at-home fitness routine? @WesBos shares how he built a custom home gym with equipment imported from China on the latest @SyntaxFM.', 18),
(110, 'Frustrated by declining Google search quality? @WesBos and @stolinski commiserate and discuss alternatives on today\'s wide-ranging @SyntaxFM.', 18),
(111, '.@stolinski tries his hand at learning continuous headspins...using ChatGPT suggestions for materials to build a special spinny helmet! Only on @SyntaxFM.', 18),
(112, 'What\'s better than outdoor movie nights? @stolinski talks setting up a projector and screen in his backyard on the newest anything-but-coding @SyntaxFM.', 18),
(113, 'Looking for a fun sci-fi kids book? @stolinski recommends The First Cat in Space Ate Pizza on today\'s non-coding catch up @SyntaxFM.', 18),
(114, 'Need to revive an old appliance? @WesBos shares how he rewired and upgraded a vintage sewing machine motor on the latest @SyntaxFM.', 18),
(115, 'Up to 70% faster React? @aidenbaibai explains how @million_js optimizes reconciliation to skip virtual DOM diffing.', 19),
(116, 'Curious how @million_js makes React faster? @aidenbaibai gives an overview of replacing React\'s rendering + reconciliation.', 19),
(117, 'Text editors like Brackets and Atom chug on large files. @aidenbaibai explains how @code VS uses canvas for smooth scrolling.', 19),
(118, '.@aidenbaibai started coding in 5th grade and interned at @WyzeCam before finishing high school! Now working on @million_js.', 19),
(119, 'Slow React reconciliation? @aidenbaibai shares real world examples like laggy Ticketmaster and advice for faster rendering.', 19),
(120, '.@aidenbaibai built his retro VCR site without ever using a VCR! Fun personal sites show your personality.', 19),
(121, 'What to learn as a coding beginner? @aidenbaibai says just build what interests you. Language fundamentals matter but drive matters more.', 19),
(122, 'Want to learn #Rust but come from a #JavaScript background? We\'ve got you covered in part 2 of our Rust for JS devs series!', 20),
(123, 'Diving into numeric types, strings, string slices, arrays, tuples, structs, and more in part 2 of our Rust for JS devs podcast series.', 20),
(124, 'If you\'re a JS dev looking to pick up #Rust, don\'t miss our latest episode covering Rust\'s type system and other fundamentals.', 20),
(125, 'We\'re back with part 2 of Rust for JS devs! Learn all about Rust\'s powerful type system, from integer types to string slices.', 20),
(126, 'Rust experts @scottandwes are at it again - this time breaking down Rust\'s types, structs, and other building blocks for JS devs.', 20),
(127, 'Want to understand string slices, integer types, structs, and more in #Rust? Check out the latest ep of our Rust for JS devs podcast!', 20),
(128, 'Learn how to stream & pipe fetch responses for better performance! #javascript', 21),
(129, 'Track download progress and cancel requests mid-flight with these fetch API tricks! #webdev', 21),
(130, 'Handle errors and test JSON responses cleanly with these pro fetch tips and tricks! #javascript', 21),
(131, 'Debug requests easier by copying as fetch in your devtools! #javascript', 21),
(132, 'Level up your JavaScript skills with these 8 practical fetch API tricks covered on the @SyntaxFM podcast!', 21),
(133, 'Want to master the JavaScript fetch API? Don\'t miss these 8 pro tips and tricks!', 21),
(134, 'Take your fetch skills to the next level with streaming, progress tracking, error handling, and more handy tricks!', 21),
(135, 'Learn how to handle errors, track progress, test responses and more using the fetch API with these helpful tricks and tips!', 21),
(136, 'Hear how @Descript built an AI-powered video editor using cutting edge web tech like Web Codecs and XState 🎥', 22),
(137, '.@Descript focuses on AI that enhances creators rather than replaces them - transcription, voice cloning, eye contact etc 💡', 22),
(138, 'Get a deep dive on building complex UI like drag and drop trees 🌳 and dockable panels with Radix and XState from @Descript', 22),
(139, 'Reliable end-to-end testing was key for @Descript - adopted @PlaywrightJS for its automatic waiting and detailed failure reports 🧪', 22),
(140, 'Learn how @Descript uses canvas, web streams, and cloud processing to build a fast video editor that works on any device 🖥️', 22),
(141, 'IndexedDB usage can vary across browsers - Chrome allows much more than Firefox/Safari for features like offline video playback 📽️', 22),
(142, 'Learn about 6 freshly baked #JavaScript APIs like Promise resolvers, immutable arrays, observable events, and more! Some are shipping now, others proposed - get the scoop!', 23),
(143, 'Did you know #JavaScript may get array grouping, import assertions, Map.emplace() and more? We summarize 6 APIs ranging from shipping to proposed!', 23),
(144, 'Observable events may revolutionize #JavaScript event handling like Promises did for async. Learn about this and 5 other fresh APIs!', 23),
(145, 'Tired of modifying arrays and causing weird bugs? We cover new immutable array methods in JS to make your life easier!', 23),
(146, 'Importing JSON in #JavaScript may get easier with import assertions! Learn about this and 5 other fresh APIs ranging from shipped to proposed!', 23),
(147, 'Pattern matching and error handling may get way cooler in JS soon! We summarize 6 new APIs ranging from shipping now to just proposed ideas!', 23),
(148, 'Learn all about JavaScript decorators with @ScottTolinski and @wesbos! #javascript', 24),
(149, 'What are JS decorators? How do you use them? Find out on the latest @SyntaxFM episode!', 24),
(150, 'Get the scoop on decorators in JS - what they are, how to use them, and what\'s coming soon, with @SyntaxFM.', 24),
(151, 'Want the inside track on JS decorators? @SyntaxFM has you covered in their latest ep. #javascript #webdev', 24),
(152, 'Curious about JS decorators and how to use them? The latest @SyntaxFM ep has everything you need to know!', 24),
(153, 'Decorators are coming to JS! Learn how they work and how to use them now with @SyntaxFM\'s latest ep.', 24),
(154, 'Hear @brandonbayer_ describe how @flightcontrolapp brings your own cloud to retain control and get great dev experience on AWS!', 25),
(155, '@brandonbayer_ explains how Flight Control handles code building, Docker caching, preview envs & more for serverless AWS deploys', 25),
(156, 'Learn how Flight Control makes complex AWS infrastructure like load balancers, CDNs, Kubernetes easy to deploy from @brandonbayer_', 25),
(157, '.@brandonbayer_ talks using Temporal for workflow orchestration and how it simplifies complex async processes on AWS', 25),
(158, 'Find out how Flight Control aims to be composable & pluggable for custom infrastructure while maintaining great dev experience', 25),
(159, '@brandonbayer_ discusses the history of Heroku buildpacks and how Nix Packs improves on them for optimizing Docker caching', 25),
(160, 'Want to prevent back pain while programming all day? @ScottTolinksi shares his top posture tips and morning stretches on the latest @SyntaxFM!', 26),
(161, 'Is TypeScript just fancy duct tape holding your projects together? The answer may surprise you! Tune in to the latest @SyntaxFM with @WesBos and @ScottTolinski', 26),
(162, 'How can you limit cloud costs when hobby coding? @WesBos suggests sticking to regular servers over serverless on the new @SyntaxFM podcast episode.', 26),
(163, 'Tips for posture, morning stretches, the limits of TypeScript, and controlling cloud costs on the latest developer podcast from @WesBos and @ScottTolinski - tune into @SyntaxFM now!', 26),
(164, '.@ScottTolinski does NOT get the Sunday scaries or anxiety before going back to work. His routine may inspire you - listen to the latest @SyntaxFM!', 26),
(165, 'Hear @WesBos and @ScottTolinski wax poetic about pillows and mattresses 😴 Posture pro-tips for programming on the newest @SyntaxFM podcast episode - tune in now!', 26),
(166, 'Ever wonder why Facebook\'s HTML is filled with random CSS classes and div soup? The latest Syntax podcast digs into why.', 27),
(167, 'Think Facebook\'s frontend code looks messy? @wesbos and @stolinski explain the method behind the madness on Syntax.', 27),
(168, 'Curious why Facebook\'s HTML is so messy? The new Syntax podcast reveals some fascinating reasons behind their chaotic code.', 27),
(169, 'Facebook\'s HTML is notoriously messy, but @wesbos and @stolinski share some insightful reasons for their approach on Syntax.', 27),
(170, 'If you\'ve inspected Facebook\'s HTML and found it perplexing, this week\'s Syntax podcast offers clarity on their unconventional code.', 27),
(171, 'Coming up: @ryanflorence dives deep into @remix_run\'s architecture and how it uses standard web APIs #RemixJS', 28),
(172, 'Ever wonder how @remix_run\'s licensing model came about? The story behind @ryanflorence\'s framework\'s monetization journey', 28),
(173, 'Don\'t miss the details on @ryanflorence\'s broken bones 🩹 and how it impacted building @remix_run during COVID!', 28),
(174, '@remix_run creator @ryanflorence shares the framework\'s origin story and how it pioneered serverless functions before @Vercel', 28),
(175, 'Just how popular was @reacttraining\'s React Router? The surprising insight that led @ryanflorence to create @remix_run', 28),
(176, '@ryanflorence explains how @remix_run\'s unique form revalidation API came about and why it was missing from v1', 28),
(177, 'Learn how to write #JavaScript that runs on ANY runtime with the new standard APIs! #NodeJS #Deno #Cloudflare', 29),
(178, 'Stop worrying and love the standardization! We look at the browser APIs now working across Node, Deno, Cloudflare and more.', 29),
(179, 'Want your code to run anywhere? We cover the standard APIs to use instead of platform-specific ones. The future is HERE!', 29),
(180, 'Browser APIs meet serverless functions. Find out how Fetch, Streams, File and more now work on the edge! #Serverless', 29),
(181, 'Node, Deno, Cloudflare, Alibaba - too many choices! We look at how to write universal server-side JavaScript.', 29),
(182, 'If you write Node, this show will teach you the standard APIs to use for maximum portability across platforms.', 29),
(183, 'Heard of runtimes like Vercel, Netlify & Bun? Learn how to write JavaScript that runs EVERYWHERE with new standard APIs.', 29),
(184, 'Learn the differences between #JavaScript and #Rust at a high level in this episode!', 30),
(185, 'Discover how cargo, documentation, error handling, and other concepts differ between JS and Rust.', 30),
(186, 'If you\'re a JS dev interested in Rust, this episode covers some key things you\'ll want to know coming from Node!', 30),
(187, 'How do imports, async/await, and other parts of #Rust compare to what you know from JS? Find out in this episode!', 30),
(188, 'Want to get started with Rust but unsure how it maps to your JS skills? This episode has you covered!', 30),
(189, 'If #Rust looks intimidating but you know JS, this episode translates concepts between the two languages at a basic level.', 30),
(190, 'The early days of @nodemailer and how email evolved separately from HTTP APIs and the web, leading to complex protocols. Lots of history here!', 31),
(191, 'Hear @andrisreinman explain why CSS support is limited in email clients and how systems like DMARC emerged over time.', 31),
(192, 'Ever wonder why email is so hard? @andrisreinman takes us through the legacy protocols and constraints that make it tricky to work with.', 31),
(193, '@andrisreinman built @etherealemail to help test @nodemailer and avoid issues with real accounts. Now handles 100K+ fake emails daily!', 31),
(194, 'Avoid landing in spam folders by using major email sending providers and leveraging their enterprise deliverability knowledge.', 31),
(195, 'CRMs use @emailengine to sync user mailboxes via API. Cool use case for accessing accounts without managing servers.', 31),
(196, 'Want to learn all about polyfilling, transpiling & monkey patching? @wesbos & @stolinski break it down on the latest @SyntaxFM!', 32),
(197, 'Ever wonder what the difference is between a polyfill and a transpiler? We\'ve got you covered on the newest @SyntaxFM episode!', 32),
(198, 'Curious how monkey patching works? We just dropped a full episode on @SyntaxFM explaining polyfilling, transpiling & patching step-by-step!', 32),
(199, 'If you build web apps, you need to know how to polyfill, transpile & patch code. Get the full scoop on @SyntaxFM\'s newest ep!', 32),
(200, 'Listen to @wesbos & @stolinski dispel all the confusion around JS polyfilling, transpiling & monkey patching on @SyntaxFM\'s latest!', 32),
(201, 'We just released a monster @SyntaxFM ep breaking down polyfilling, transpiling, patching & more. Don\'t miss it!', 32),
(202, 'Learn how to delight users with validation toasts instead of confusing them! #JavaScript', 33),
(203, 'Ever get annoyed by bad UX from form validation? We\'ll teach you how to do it right! #webdev', 33),
(204, 'Frustrated by vague error messages? We\'ll show you how to provide specific and friendly validation feedback. #a11y', 33),
(205, 'Having trouble getting your toast messages looking right? We break down toast message best practices so you can get it right! #CSS', 33),
(206, 'Tired of confusing form errors? We\'ll teach you how to pinpoint errors and guide the user. #UX #webdev', 33),
(207, 'Want users to love interacting with your site? Proper validation feedback is key! We\'ll show you how. #JavaScript #HTML', 33),
(208, 'Learn how @Fastly ComputeEdge uses WebAssembly for high performance edge computing from @jaffathecake.', 34),
(209, 'Want to know more about WebAssembly and WASI? @jaffathecake explains it all.', 34),
(210, 'Need browser polyfills? Check out @polyfil_io which serves over 1 billion requests per day!', 34),
(211, '@jaffathecake discusses how WebAssembly provides security guarantees for untrusted code.', 34),
(212, 'Find out how @Fastly initialized JS runtimes in a novel way for fast cold starts from @jaffathecake.', 34),
(213, 'Edge functions are perfect for reducing latency with IoT. @jaffathecake explains.', 34),
(214, 'New feedback segment where Wes and Scott clarify previous episodes and correct mistakes!', 35),
(215, 'Scott has an absolutely wild story about getting terrorized on the road by a man in a monster truck!', 35),
(216, 'The guys discuss options for modifying CSS variables from within React components.', 35),
(217, 'What are the best JavaScript notebook options for quickly testing code and ideas?', 35),
(218, 'How can you determine a fair price when a domain broker wants to buy your domain name?', 35),
(219, 'Wes and Scott share tips for continuing to learn web development as a new parent without burning out.', 35),
(220, 'Learn how to ask for dev help like a pro! @SyntaxFM shares their top tips for getting your questions answered by maintainers 💡', 36),
(221, 'Stuck on a bug? @SyntaxFM has pro tips for crafting effective help requests so you can get unstuck faster! 🚀', 36),
(222, 'Getting dev help takes effort! @SyntaxFM breaks down how to write great issues, share code, and be respectful to get your questions answered 🔍', 36),
(223, 'Frustrated by a library bug? @SyntaxFM gives actionable advice for getting maintainers to understand and help fix your issue! 🙌', 36),
(224, 'Respect devs\' time and they\'ll respect yours! @SyntaxFM talks best practices for help requests like being responsive, searching existing issues, and more! 🤝', 36),
(225, 'Before you hit send on that angry \'fix this bug!\' message, listen to @SyntaxFM\'s tips on asking for help nicely and effectively 💬', 36),
(226, 'Learn how @stevekrouse built @valdotown as a social platform for writing & running code snippets - perfect for demos, utilities, automations!', 37),
(227, '\"Val town is a social website to write and run code\" says @stevekrouse on what makes @valdotown unique for developers', 37),
(228, 'Find out how @valdotown uses Deno and Render for running user code snippets - an interesting serverless approach!', 37),
(229, '\"Val is function that runs when hit\" - easily create & deploy serverless functions with @valdotown', 37),
(230, 'IoT and webhooks are common use cases for @valdotown\'s dead simple snippets', 37),
(231, 'Great actionable advice from @stevekrouse on personalized approaches to learning coding based on individual goals', 37),
(232, 'Try out @valdotown and join their Discord for a friendly community around running code snippets', 37),
(233, 'Scott and Wes quiz each other with AI-generated interview questions on JavaScript, CSS, Node.js and more!', 38),
(234, 'Hear Scott and Wes geek out over the history of Netflix, CSS, ES4 and more in this AI-powered interview quiz!', 38),
(235, 'What was the primary motivation behind XHTML? Find out in this ep as Scott and Wes quiz each other on web dev history!', 38),
(236, 'What\'s the difference between a type guard and a type assertion in TypeScript? Scott and Wes break it down on the show!', 38),
(237, 'The ins and outs of JavaScript inheritance, closures, task execution order and more on this ep of Syntax!', 38),
(238, 'Http status codes, Node.js events, HTML5 video optimization and more technical topics covered in this AI interview game!', 38),
(239, 'Just discovered some crazy new #AI tools for developers - auto-document your code, generate dummy data, format commits & more! π€―π€', 39),
(240, 'Level up your #coding with these futuristic AI tools ππ€ Get AI-powered auto-complete, code optimization, test generation and way more! The future is here!', 39),
(241, 'Devs, drop what you\'re doing and go try these mind-blowing new #AI coding tools! π€―π€ Supercharge your workflow with auto-documentation, dummy data gen, commit formatting & more!', 39),
(242, 'Go download these AI coding tools RIGHT NOW! πββοΈπ ̈́ Get AI-powered code optimization, documentation, data formatting and more! The future of coding is here!', 39),
(243, 'Your mind will be blown when you try these AI coding assistants! π€―π€ It can auto-document, optimize, generate data & tests...the list goes on! The future is now!', 39),
(244, 'The robots are here to help us code! π€π» Try out these futuristic AI coding tools to auto-document, format, generate tests & data, optimize code and more! ', 39),
(245, 'Just dropped a new episode with @colbyfayock talking all about @Cloudinary\'s AI media capabilities and new framework SDKs!', 40),
(246, 'Want to easily transform images and videos with AI? Check out our pod with @colbyfayock covering @Cloudinary\'s latest offerings!', 40),
(247, 'If you build sites and apps, you NEED to listen to our ep with @colbyfayock. We cover all the goodness from @Cloudinary like AI filling, background removal, framework SDKs, and more!', 40),
(248, 'AI generated media is here! Learn how @Cloudinary is using it for image filling, background removal, video intros, and more from @colbyfayock on our pod', 40),
(249, 'How do creators like @colbyfayock make YouTube vids and tutorials? Learn his full process and stack on the latest Syntax podcast!', 40),
(250, 'Getting sleep with a newborn is no joke. @colbyfayock shares his parenting advice and tips on the latest Syntax pod!', 40),
(251, 'What\'s the one piece of advice @colbyfayock has for new developers? Keep building projects! More wisdom on our latest podcast', 40),
(252, 'Want to build accessible components without compromising on customization? Check out headless UIs! ☝️', 41),
(253, 'Tired of giant monolithic UI libraries? Try headless components for extensible functionality without the bloat! 💪', 41),
(254, 'Struggling with accessibility in your custom components? Headless UIs have you covered! 🧑‍🦯', 41),
(255, 'Customizable component functionality without the markup? Headless UIs are here for you! 🎁', 41),
(256, 'Want full control of your component UI without sacrificing functionality? Look into headless components! 🔥', 41),
(257, 'Forget web components, headless UIs are the new hotness! 🥵', 41),
(258, 'Running headless WordPress? We break down the pros and cons on the latest Syntax podcast episode! 🎧', 41),
(259, 'Learn all about Lightning CSS and how it can supercharge your styles on the latest Syntax podcast!', 42),
(260, 'Want faster CSS builds and sweet future syntax support? Check out Lightning CSS discussed on @SyntaxFM', 42),
(261, 'If you write CSS, you need Lightning CSS in your toolkit. Hear why on Syntax!', 42),
(262, 'Next level CSS tooling has arrived with Lightning CSS. Listen to @SyntaxFM for the lowdown.', 42),
(263, 'Level up your CSS game with Lightning CSS! Speed, future syntax, and more covered on the Syntax podcast', 42),
(264, 'Curious what all the Lightning CSS hype is about? Tune into the latest Syntax podcast to learn!', 42),
(265, 'Lightning CSS is lighting up the CSS scene. Learn how on @SyntaxFM\'s fresh episode all about this new tool.', 42),
(266, 'Learn how @sentry processes 300k requests per second and coordinates distributed queues across mobile SDKs and backends from @mitsuhiko.', 43),
(267, 'Queues help distribute workload, implement backpressure, and smooth concurrency. Hear queue design principles for massive scale from @mitsuhiko.', 43),
(268, '@mitsuhiko explains how @sentry routes millions of events per day across Kafka and RabbitMQ queues by type like errors vs metrics.', 43),
(269, 'Mobile SDKs are distributed queues outside your control says @mitsuhiko. @sentry once lied to SDKs about quota to clear queue backlogs!', 43),
(270, 'Python leads in AI due to existing data science libs says @mitsuhiko. But Python packaging is fragmented without clear standards.', 43),
(271, '@mitsuhiko shares his queue design learnings from massive scale at @sentry and views on Python, JS, Rust, and staying up to date.', 43),
(272, 'Ride hype cycles - master one thing until it\'s back in favor again says @mitsuhiko. Great learning advice on staying relevant from @sentry architect.', 43),
(273, 'Up early for the dentist? Us too! Listen along as we dig into ORMs like Prisma and Mongoose. What\'s your fave? #webdev #orm', 44),
(274, 'Heard of Drizzle but not sure what it\'s about? We break down the popular new ORM and how it handles PlanetScale. #javascript', 44),
(275, 'Ever wondered what the difference is between a schema and model? We clear it up along with migrations, middleware and more! #databases', 44),
(276, 'Hate writing raw SQL but need a database? We explain how ORMs like Prisma provide nice abstractions. What ORM do you use? #programming', 44),
(277, 'On today\'s show: dentists, dad jokes, owls logos, racing pull requests, and of course... ORMs! What more could you want? #podcast #webdev', 44),
(278, 'BRB, researching Drizzle\'s inferencing capabilities 🧐 What ORM would you use for a new project these days? Let us know! #javascript', 44),
(279, 'Query builders, migrations, schemas, models... we break it all down when it comes to ORMs! What are your pain points working with data? #programming', 44),
(280, 'Just heard Google Domains is closing down? We break down the top domain registrars to use instead in 2023!', 45),
(281, 'Want phone support and fast chat? Check out @Hover! One of our top registrar picks.', 45),
(282, 'Avoid the bait & switch! Some registrars lure you in with cheap first-year pricing only to crank it way up on renewals.', 45),
(283, 'Migrating domains is easy - don\'t wait for them to expire. Just unlock, get the transfer code, and move to your new registrar!', 45),
(284, 'Who has the best domain search tools? We\'re loving @IWantMyName for hunting down the perfect available domain names.', 45),
(285, '.dev domains are hot right now but not all registrars offer them yet. Cloudflare says they\'ll support them soon though!', 45),
(286, 'Do you really need the .com? With so many new TLDs now, you can find short, catchy domains for cheap on the newer domain extensions.', 45),
(287, 'Hear @DustinSchau from @Netlify discuss @gatsbyjs plans for performance, integration with CMS data sources, and thoughts on React server components.', 46),
(288, 'Dustin talks about using @GraphQL as a unified data layer, especially useful for large companies integrating multiple CMS data sources.', 46),
(289, 'Dustin shares how low-code solutions are the future middle ground between pure dev and no-code for CMS editing and site building.', 46),
(290, '.@DustinSchau says React server components feel like a \'hard fork\', upgrades are challenging. Will take time to see how it pans out.', 46),
(291, 'Dustin is using Dracula Pro theme and Dank Mono font in VS Code. Hear his full editor and coding setup.', 46),
(292, 'Dustin\'s home theater setup runs on Ubuntu on an old Intel NUC. Hear his thoughts on stacks and tools for new and side projects.', 46),
(293, 'Get the inside scoop on @js_nation and @renderatlanta from @wesbos and @stolinski!', 47),
(294, 'Having trouble with rate limited APIs? We\'ve got pro tips for working within limits without compromising speed!', 47),
(295, 'Technical difficulties got you down? Hear how @stolinski handled audio issues & more on the latest Syntax podcast episode.', 47),
(296, 'Want the play-by-play on @wesbos and @stolinski\'s recent conferences? Tune in to Syntax for all the details!', 47),
(297, 'APIs giving you limits? We\'re serving up strategies for efficient and effective use of rate limited endpoints on Syntax.', 47),
(298, 'Want to easily share state down the call stack in #JavaScript? Check out AsyncLocalStorage and the upcoming Async Context API proposal. Game changer! 🎉 #webdev', 48),
(299, 'Tired of prop drilling in #React? AsyncLocalStorage/Async Context API allow you to skip passing refs and access context anywhere in your app! 🤯 #javascript', 48),
(300, 'Sharing context without passing refs explicitly? AsyncLocalStorage (Node) and Async Context API (proposal) enable just that in JS! #webdev', 48),
(301, 'Async storage/context = closure-like variable access but across async boundaries. Think middleware user population without passing refs! 😮 #javascript', 48),
(302, 'Memory leaks, testing pain? Async storage has downsides to consider before ditching your prop drilling. Evaluate carefully! #javascript #webdev', 48),
(303, 'Async context could replace passing data in promise chains, browser events, etc! Exciting possibilities ahead as practices emerge! #javascript', 48),
(304, 'Want to run JavaScript directly on hardware? @nickhehr explains how Excess brings nearly the full JS environment to cheap ESP32 and Pi Pico boards!', 49),
(305, 'Tired of messy microcontroller tooling and setup? @nickhehr made a CLI to get up and running with JavaScript on hardware fast!', 49),
(306, '@nickhehr shares his journey from web developer to maintainer of Tesla microcontroller and into JavaScript IoT standards.', 49),
(307, 'Think you need Linux for JavaScript? @nickhehr explains how Excess fits JS onto $5 microcontrollers like ESP32 and Pi Pico!', 49),
(308, '.@nickhehr discusses challenges of tooling, standards, and networking for JavaScript on embedded devices.', 49),
(309, '@nickhehr explains how Excess implements Web APIs like fetch, workers and more for microcontrollers!', 49),
(310, 'Want to learn electronics? @wesbos has you covered with this episode explaining voltages, sensors, coding, and more! #syntaxfm', 50),
(311, 'Did you know you can code microcontrollers with #JavaScript and #Rust? Learn how on the latest @SyntaxFM podcast!', 50),
(312, 'Turn old toys into #IoT devices! @wesbos explains basic #electronics concepts so you can build your own projects.', 50),
(313, '.@wesbos walks through basic electronics concepts like voltage, amperage, resistors, sensors, and relays on the @SyntaxFM podcast - perfect for beginners!', 50),
(314, 'Learn how @wesbos built Bluetooth speakers, LED mood lighting, and more using basic electronics knowledge on @SyntaxFM #diy', 50),
(315, 'What\'s a microcontroller? How do sensors work? What\'s the difference between DC and AC? @wesbos answers all this and more on @SyntaxFM!', 50),
(316, 'Learn how to take your GitHub workflow to the next level with Projects, Milestones, Labels, and more! @SyntaxFM #GitHub', 51),
(317, 'Stop juggling multiple apps - bring your project management into GitHub for a streamlined workflow. @SyntaxFM #GitHub', 51),
(318, 'GitHub now has built-in tools like Projects and Milestones to organize issues and track progress. @SyntaxFM simplifies software development!', 51),
(319, 'Automate your GitHub workflow with Actions - automatically run tests, approve pull requests, and more! @SyntaxFM #GitHubActions', 51),
(320, 'Want to engage your open source community? Use GitHub Discussions for suggestions, FAQs, and more. @SyntaxFM #GitHubDiscussions', 51),
(321, 'Don\'t forget about GitHub Labels to organize issues at a glance! @SyntaxFM has pro tips for GitHub project management.', 51),
(322, 'Hear straight from an @OpenAI engineer about how ChatGPT works under the hood and what the future could look like.', 52),
(323, 'Think AI is going to replace developers? Think again - it will change our work but unlikely to replace it anytime soon according to this OpenAI engineer.', 52),
(324, 'ChatGPT blew up fast internally too - the OpenAI team had to scramble to keep up with insane growth after public launch.', 52),
(325, 'Language models like ChatGPT trained to predict next word - simple but leads to learning facts about world. Human feedback trains on what people like.', 52),
(326, 'Future of work could shift to crafts that don\'t scale like gardening according to this OpenAI engineer. Less economics, more art and creativity?', 52),
(327, 'JSDoc lets you add types to regular JS for all the TS benefits without the overhead! #syntaxfm', 53),
(328, 'Turns out you can do way more with JSDoc types than regular TS, like typing errors and more docs. Wild stuff on the new #syntaxfm', 53),
(329, 'JSDoc types > TypeScript types? The Svelte team thinks so at least according to the latest episode #syntaxfm', 53),
(330, 'Wes and Scott dig into the JSDoc vs TypeScript drama and break down exactly why Svelte moved away. Learn why on the new #syntaxfm!', 53),
(331, 'Still use TypeScript but want better docs and types? Sprinkle some JSDoc on top for the best of both worlds #syntaxfm', 53),
(332, 'Svelte ditching TS doesn\'t mean you have to! Wes and Scott explain how they\'ll keep using TS but leverage JSDoc too on #syntaxfm', 53),
(333, 'Remove something in CSS? 🤔 Learn the differences between display:none, visibility:hidden, opacity:0, and more obscure tricks like pointer-events:none on today\'s show!', 54),
(334, 'Ever wonder what the difference is between 0 and 0px in CSS? Or unset vs initial? Learn these and other ways to visually hide elements on the latest Syntax podcast!', 54),
(335, 'Curious about no, none, and false attribute values in HTML? Want to know how to remove spacing from inline elements in CSS? We\'ve got you covered on the new Syntax podcast!', 54),
(336, 'Explore the myriad techniques for visually hiding elements in CSS including display:none, visibility:hidden, opacity:0, and pointer-events:none on the latest Syntax podcast!', 54),
(337, 'Dive into the differences between 0 and 0px, none and 0, unset and initial, and no, none, and false HTML attribute values on today\'s info-packed Syntax podcast!', 54),
(338, 'Learn how to wield unset, initial, 0px, none, and other cryptic CSS incantations to visually hide elements and remove styles on the newestSyntax podcast! 🧙‍♂️', 54),
(339, 'Hear the GitHub Next team share the inside story behind creating @GitHub Copilot and overcoming key reliability and latency challenges. #GitHub #AI', 55),
(340, '.@GitHub Next started as an R&D team to make risky long-term bets - like AI that can write code! Learn how they built trust and delivered value. #engineering', 55),
(341, 'Prompt crafting for AI is an art, not a science. GitHub Next explains how they iterated Copilot to handle code structuring and inconsistencies. #AI', 55),
(342, 'GitHub Next team shares their vision for AI as a developer superpower - not a replacement. It can augment productivity and collaboration. #Copilot', 55),
(343, 'Learn how GitHub Next is rethinking workflows like PRs and CLI in light of new AI capabilities. So much potential to improve the developer experience!', 55),
(344, 'Hear GitHub Next\'s thoughts on AI opportunities like: accessibility improvements, collaborative editing, and enhancing the command line experience.', 55),
(345, 'Get ready folks, the new @SyntaxFM website is coming! 🎉', 56),
(346, 'Can\'t wait to see all the tasty new features on @SyntaxFM built with @SvelteJS and @Prisma', 56),
(347, '🔥 Scott is loving light mode on the new @SyntaxFM site', 56),
(348, '💡Genius use of AI transcription by @wesbos to build the new @SyntaxFM site', 56),
(349, 'GitHub OAuth? PostCSS? PlanetScale? Oh my! The new @SyntaxFM site tech stack is 🔥', 56),
(350, 'Podcast nerds rejoice! Check out how @wesbos and @stolinski built the new @SyntaxFM site', 56),
(351, 'Want to run Node without actually installing Node? JavaScript executables bundle your app and the runtime into a single file. 🤯 #syntaxfm', 57),
(352, 'JavaScript executables let you take your Node app anywhere - other servers, old systems, USB sticks back in high school. 🎒😎 #syntaxfm', 57),
(353, 'JavaScript executable sizes criticized but Node is not the only hefty runtime out there. Comparable to other languages. 🤝 #syntaxfm', 57),
(354, 'Tools like Dino and Bun also working on lean standalone JavaScript executables. The future is portable for JS devs! 🚀 #syntaxfm', 57),
(355, 'Learn about the future of CSS from @bramus on Syntax this week including scroll-linked animations, scope styling, view transitions and more!', 58),
(356, 'CSS has evolved so much in the past year! Tune into Syntax to hear @bramus catch us up on scroll animations, nesting, scope styling and more!', 58),
(357, 'If you want to work at @Google, start writing blog posts about CSS! @bramus explains how blogging for 20 years landed him at Google!', 58),
(358, '.@bramus says learning CSS foundations will pay off long-term over frameworks. Tune into Syntax to learn the latest CSS basics!', 58),
(359, 'The future is bright for CSS! @bramus shares how we can animate based on scroll, scope styles and enable smooth DOM transitions!', 58),
(360, 'CSS is more powerful than ever! Learn about scroll-linked animations, scope styling, view transitions and more from @bramus on Syntax!', 58),
(361, 'Wes talks about finally attending an in-person conference after the pandemic at @reactathon! #SyntaxFM', 59),
(362, 'Should you use @sveltejs components in an @astrodotbuild site? Wes and Scott discuss integrating different frameworks. #SyntaxFM', 59),
(363, 'Wes breaks down the limitations and quirks around CSS custom properties. Better debugging support needed! #SyntaxFM', 59),
(364, 'Scott and Wes debate the value of professional certifications for JavaScript developers. #SyntaxFM', 59),
(365, 'Getting a team to care about code quality? Scott suggests letting the robots enforce linting and formatting rules! #SyntaxFM', 59),
(366, 'When should you add @getsentry to a new project? Wes & Scott suggest adding it early but only turning it on in production. #SyntaxFM', 59),
(367, 'Scott explains why box-sizing: border-box isn\'t the default in CSS even though we all want it to be! #SyntaxFM', 59),
(368, 'Is using @Lodash_JS in @NextJS outdated? Wes argues it has great performance and you can tree shake just the utilities you need. #SyntaxFM', 59),
(369, 'Find out what\'s actually inside those giant node_modules folders and why they get so big on the latest @SyntaxFM podcast!', 60),
(370, 'Node_modules folders blowing up your hard drive space? @WesBos and @stolinski explain what\'s in there and how to clean it up on @SyntaxFM.', 60),
(371, 'Text files, source maps, polyfills - just some of the culprits behind giant node_modules. Get the scoop on the latest @SyntaxFM podcast.', 60),
(372, '@WesBos and @stolinski dive into reasons for node_modules bloat on the latest hilariously titled @SyntaxFM podcast - don\'t miss it!', 60),
(373, 'Node_modules memes got you down? Find out what\'s actually going on and how to handle it from @WesBos and @stolinski on @SyntaxFM.', 60),
(374, '@SyntaxFM delivers again - this time exploring the oft-joked about but rarely explained node_modules folder size issue.', 60),
(375, 'Learn about all the latest updates in CSS like new units, gradients, animations and more from @argyleink on the @SyntaxFM podcast!', 61),
(376, 'Excited for CSS mixins, nesting divs without ampersand and animating discrete properties? @argyleink shares what\'s new in CSS on @SyntaxFM!', 61),
(377, 'Customize select menus, use HDR colors for smooth gradients and more - find out what\'s new in CSS from @argyleink on @SyntaxFM!', 61),
(378, '.@argyleink talks text wrap balance, style queries, view transitions and all the latest CSS features on @SyntaxFM - your CSS knowledge will be massively leveled up!', 61),
(379, 'CSS is booming right now! Learn about root units, animation composition, scroll start positions and more new features from @argyleink on @SyntaxFM.', 61),
(380, 'Cascade layers, trig functions, motion blur, and so much more - @argyleink covers all the latest updates in CSS on @SyntaxFM!', 61),
(381, 'Who will win between @vercel, @digitalocean, and other popular hosting providers? Check out our smackdown!', 62),
(382, 'Want to know the best place to host your #javascript, #react, or #nextjs app? We compare @vercel, @digitalocean, @heroku, and more!', 62),
(383, 'Before you choose a hosting provider, you\'ve got to listen to our comparison of @vercel, @digitalocean, @awscloud and others!', 62),
(384, 'We put the top hosting providers in the ring to battle it out. Find out who comes out on top in our ultimate smackdown episode!', 62),
(385, 'If you\'re overwhelmed figuring out the best place to host your app, we\'ve done the dirty work for you. Check out our comparison of @vercel, @digitalocean, @awscloud and more!', 62),
(386, 'Tired of wrestling with hosting providers? We make it easy to decide where to host your next app by breaking down the top options on the market.', 62),
(387, 'Before you choose where to host your next project, take a listen to our comparison of the strengths and weaknesses of @vercel @digitalocean @awscloud @heroku and more!', 62),
(388, 'Learn all about the signal hype - what signals are, why frameworks ❤️ them, and whether you need them in your apps!', 63),
(389, 'Are signals a game changer or overhyped? Get the lowdown on what signals are, why they\'re popular now, and whether you should use them!', 63),
(390, 'Devs are buzzing about signals - but WTF are they? Get the 101 on signals, why they\'re trending, and whether they\'ll really change how you code.', 63),
(391, 'Is the signal hype real? Check out our breakdown of what signals are, why frameworks love them, and whether you need to bother or not!', 63),
(392, 'Everyone\'s talking signals! Before jumping on the bandwagon, get the scoop on what signals are, why they\'re hot now, and whether they\'re worth it.', 63),
(393, 'Signals got you curious but confused? We break down what they are, why they\'re popular, and whether you should use them in your apps.', 63),
(394, 'Learn how @MuxHQ is powering modern video streaming on the web! Their infrastructure handles all the complexity behind delivering video.', 64),
(395, 'Why build your own video player when @MuxHQ provides production-ready web components? Plug and play adaptive streaming.', 64),
(396, 'Want to add video to your web app? @MuxHQ handles encoding, delivery, analytics - everything you need to go from upload to playback.', 64),
(397, '.@MuxHQ built their video platform using web components for cross-framework compatibility and longevity. Smart architecture decisions.', 64),
(398, 'Impressed by how @MuxHQ optimized their video pipeline with just-in-time transcoding. Only encode what\'s needed on demand.', 64),
(399, 'Who knew FFmpeg was still powering most video processing on the web? The classic open source tool behind @MuxHQ and more.', 64),
(400, 'Want better browser UI elements? The @OpenUI_Group is doing the research to propose new, flexible standards we desperately need! #UI #Accessibility', 65),
(401, 'Tired of ugly, unstylable browser video players? @OpenUI_Group is working on better custom solutions. #UI #Accessibility', 65),
(402, '@OpenUI_Group takes collaborative approach to solve common UI problems we face as devs. This is how standards SHOULD work! #UI #Standards', 65),
(403, 'Alerts and date pickers suck in browsers! @OpenUI_Group proposes better options. We need standards that are flexible and accessible by default!', 65),
(404, '@OpenUI_Group focuses on #Accessibility in their standards research. This is huge! Accessibility SHOULD be built-in, not tacked on.', 65),
(405, 'Ever wanted a standard switch UI component? @OpenUI_Group is on it! Their design examples are 💯 for building custom elements.', 65),
(406, 'The new Blue Sky social network is taking off like wildfire. Is this the future of Twitter? Listen in to find out! #bluesky #twitter', 66),
(407, 'Blue Sky is built on the AT protocol, an open decentralized standard. Could this be the foundation for the next era of social media? #bluesky #socialmedia', 66),
(408, 'Wes explains why he paid for the Twitter blue check and what benefits it brings. But is Twitter becoming too pay-to-play? #twitterblue #bluesky', 66),
(409, 'No blocking yet on Blue Sky but reporting system already exists. Early days but a promising start. #bluesky #socialmedia', 66),
(410, 'Devs are building bots and scrapers for Blue Sky already. Remember the early wild west days of Twitter? #bluesky #twitter', 66),
(411, 'So what\'s next for social media? Our prediction: federated and decentralized. Blue Sky could be the start of something big. #socialmedia #bluesky', 66),
(412, 'Learn how @WarpTerminal is reinventing the terminal with creator @ZachLLoyd! Insights on UX, Rust, AI assistants, and Zach\'s work on Google Docs.', 67),
(413, 'Hear @ZachLLoyd explain how @WarpTerminal integrates with existing shells using hooks for structured output. Cool technical details!', 67),
(414, 'Did you know @GoogleDocs moved to canvas rendering instead of HTML tables for performance? More secrets from Google Docs engineer @ZachLLoyd!', 67),
(415, 'Get the inside scoop on @WarpTerminal\'s design decisions like mouse support and inline command suggestions from creator @ZachLLoyd.', 67),
(416, '@WarpTerminal is built in Rust for performance instead of Electron. Hear why direct control was key from founder @ZachLLoyd.', 67),
(417, 'Learn how @scottsilinski and @wesbos built the Syntax merch giveaway site in just days using @SvelteKit, @Prisma, and @PlanetScale! It handled heavy traffic with ease. #WebDev #JavaScript', 68),
(418, 'Hear @scottsilinski and @wesbos discuss unique challenges like preventing code conflicts and tracking distribution for the Syntax merch giveaway. Fun web dev stories! #JavaScript', 68),
(419, '@scottsilinski and @wesbos share behind-the-scenes stories of the Syntax merch giveaway site - botnets, funny errors, sharding, and more! An entertaining web dev podcast. #WebDevelopment', 68),
(420, 'The Syntax merch giveaway site was a great chance for @scottsilinski to try @SvelteKit, @Prisma, and @PlanetScale. Now his new favorite stack! Hear why it was such a smooth dev experience. #JavaScript #WebDev', 68),
(421, 'How did @scottsilinski and @wesbos quickly build the Syntax merch giveaway site to handle heavy load? Tips on basic auth, middleware, client-server communication, and more! #LearnInPublic #WebDev', 68),
(422, 'Learn how @scottsilinski and @wesbos overcame challenges like preventing code conflicts and redirect handling for the Syntax merch giveaway site. Valuable web dev insights! #JavaScript #SvelteKit', 68),
(423, 'Learn all about #RPC and why it\'s gaining popularity for #JavaScript devs! @SyntaxFM', 69),
(424, 'Curious about how #RPC works and what the hype is all about? Get the scoop from @SyntaxFM!', 69),
(425, '@SyntaxFM breaks down #RPC, how it enables calling server functions from client, comparisons to REST, and more. Don\'t miss it!', 69),
(426, '.@SyntaxFM looks at RPC standards, use cases like @Reactjs server components, security considerations, and developer experience benefits.', 69),
(427, 'Want to understand RPC and key concepts like multiple clients, authentication, and more? Check out the latest @SyntaxFM episode now!', 69),
(428, 'Hear examples of RPC with Meteor, @electronjs, controlling drones, and more on @SyntaxFM\'s thorough RPC explainer.', 69),
(429, 'Learn why privacy policies and terms of service are a must for any online business from expert lawyers! #legal #onlinebusiness', 70),
(430, 'Get the key differences between privacy policies and terms of service straight from the legal pros! #onlinebusiness #legal', 70),
(431, 'Are you GDPR compliant? Find out the risks of common tools like Google Analytics and Google Fonts when it comes to GDPR. #GDPR #legal', 70),
(432, 'Even Google Fonts can get you fined under #GDPR! Learn what website tools and services may put you at legal risk. #onlinebusiness #legal', 70),
(433, 'Get tips on crafting effective privacy policies, terms of service, cookie consent and more for your online business from the experts! #legal #onlinebusiness', 70),
(434, 'Get ready for even better audio on @syntaxfm as @scottsilinski upgrades his podcast gear!', 71),
(435, 'Drooling over @scottsilinski\'s new Neumann MT48 audio interface - can\'t wait to hear how it improves the @syntaxfm audio quality!', 71),
(436, 'Upgrading podcast gear over here! Excited to hear how @scottsilinski\'s new Neumann interface improves @syntaxfm.', 71),
(437, 'New audio toys for @scottsilinski means exciting improvements coming soon to @syntaxfm - can\'t wait!', 71),
(438, 'Ooo shiny new audio gear! Let\'s see how @scottsilinski\'s Neumann interface steps up @syntaxfm\'s audio game!', 71),
(439, '@scottsilinski gives us the lowdown on his new Neumann MT48 audio interface for @syntaxfm. Expect great things for your ears!', 71),
(440, 'Y\'all aren\'t ready for these new #CSS color functions! Modify colors, ensure contrast, and mix colors... all dynamically 🔥 Learn how on the latest @SyntaxFM podcast', 72),
(441, 'Sick of specifying tons of hex codes? The CSS color revolution is coming! 🎨 Learn how color functions like relative color, contrast, and mixing will change your workflow on @SyntaxFM', 72),
(442, 'Tired: Specifying 50 slightly different hex values 😴 Wired: Using CSS color functions for dynamic theming ⚡️ Get the scoop from @WesBos and @stolinski on the latest @SyntaxFM podcast', 72),
(443, 'Color theory is coming to #CSS! 🎨 Get ready to dynamically modify hues, ensure contrast, and mix color spaces with new functions. More productive styles ahead on @SyntaxFM 🚀', 72),
(444, 'Forget hand jamming hex codes! CSS color functions will change how you theme sites. 🎨 Learn how relative color, contrast, and mixing work on the latest @SyntaxFM pod', 72),
(445, 'Level up your #CSS skills with color functions!👩‍🎨 Learn how to: - Modify hues dynamically - Ensure accessibility contrast - Mix color spaces It\'s a game changer! Tune into the latest @SyntaxFM podcast', 72),
(446, 'Learn the origin story of ESLint directly from creator @nzakas!', 73),
(447, 'Ever wonder how ESLint actually works under the hood? @nzakas explains how it parses JavaScript and traverses the AST.', 73),
(448, 'Improving ESLint config was a multi-year process. Hear @nzakas reflect on learnings from its evolution.', 73),
(449, '@nzakas shares why communication and leadership skills matter more than writing code as you become a senior engineer.', 73),
(450, 'How do senior ICs progress in their career? @nzakas explains the soft skills required beyond just writing code.', 73),
(451, 'What\'s next for ESLint? @nzakas talks performance, Rust, and linting multiple languages in one tool.', 73),
(452, 'Can you build sites in 2023 without Sass? @wesbos and @stolinski go through every Sass feature and discuss CSS alternatives on the latest Syntax podcast!', 74),
(453, 'Which Sass features do you still miss when working in vanilla CSS? Tune into the new @SyntaxFM to hear @wesbos and @stolinski debate replacements for variables, nesting, colors, looping, mixins, imports, math, functions, and more!', 74),
(454, 'Do we still need Sass in 2023 or has native CSS caught up? Get the scoop from @SyntaxFM as @wesbos and @stolinski break down every Sass feature and its CSS alternative! No bias, just facts on the CSS vs Sass debate.', 74),
(455, 'Sass loyalists: before you get mad, hear @wesbos and @stolinski out on whether vanilla CSS can replace Sass in 2023. Fair analysis of all Sass features on the new @SyntaxFM!', 74),
(456, 'Debating dropping Sass for vanilla CSS in your next project? Get the facts from @wesbos and @stolinski as they objectively break down every Sass feature on @SyntaxFM. CSS might have caught up more than you think!', 74),
(457, '@SyntaxFM is back with a full CSS vs Sass breakdown! @wesbos and @stolinski look at variables, nesting, colors, functions, imports and more. Can CSS replace Sass yet or not?', 74),
(458, 'Learn the difference between modals, popups, popovers, and dialog boxes. Plus tips for animations, focus management, and more!', 75),
(459, 'Escape key handling, backdrop styling, inert attributes, and animated dialogs - we cover it all in this deep dive into modal interfaces.', 75),
(460, 'Modals don\'t have to be annoying! Learn tips for proper implementation, including URLs, animations, accessibility, and how modals differ from other UI elements.', 75),
(461, 'Is that modal or popover styled properly for accessibility and expected browser behavior? Learn key details that might surprise you!', 75),
(462, 'Tired of floating modal windows breaking your site layout? We\'ll explain newer semantics like inert and backdrop that can help.', 75),
(463, 'Modals as UI excuses? Poor escape key handling? We\'re exploring common modal mistakes and how newer web APIs improve them all!', 75),
(464, 'Hear all about Tomagui - the tool unifying React Native and web! Consistent styling across platforms. 🎨', 76),
(465, 'Want to build for web and mobile? Get the inside scoop on Tomagui for unified React Native and web development! 📱🌐', 76),
(466, 'Learn how Tomagui optimizes styles, CSS classes, animations, layout and more for React Native and web dev. 💅', 76),
(467, 'Get advice for beginners looking to build web and mobile apps with React Native and Tomagui! 👶', 76),
(468, 'Excited to build web and mobile apps with React Native + Tomagui after this pod! 🔥', 76),
(469, 'BIG news: @SyntaxFM is joining @getsentry! More video, more content, but same authentic vibe. So excited for the future!', 77),
(470, 'The passion @davidjkramer still has for coding even while running Sentry shows why this partnership makes sense. Can\'t wait to see where it goes!', 77),
(471, '@SyntaxFM staying FREE thanks to @getsentry. No more ads or sponsorship hassle. Freedom to create awesome content for the community.', 77),
(472, 'Pumped for more @SyntaxFM video content thanks to @getsentry partnership. Visuals have been missing but no more! Coding videos incoming!', 77),
(473, 'Hear how the @SyntaxFM and @getsentry partnership started from an aligned vision of authenticity and passion. This feels RIGHT.', 77),
(474, 'Congrats @SyntaxFM on 600 episodes! Here\'s to 600 more with @getsentry lifting you up to new heights.', 77),
(475, 'Learn how OAuth really works under the hood in this great episode! #oauth #webdev', 78),
(476, 'Ever wonder what\'s really happening when you \"Log In with GitHub\"? This episode breaks it all down! #oauth #github', 78),
(477, 'The nitty gritty details of OAuth revealed! You\'ll finally understand client IDs, access tokens, and more. #webdev', 78),
(478, 'OAuth feels like magic but this episode lifts the curtain. Learn how it works and why it beats rolling your own auth. #oauth', 78),
(479, 'Tired of being confused by OAuth? This episode clearly explains authorization codes, refresh tokens, and how it all fits together!', 78),
(480, 'Stop being mystified by OAuth! This episode provides clarity on clients, secrets, tokens, and why OAuth simplifies auth. #webdev', 78),
(481, 'Learn how the @wordpress ecosystem has evolved in recent years with block editors, React admin, and more seamless local dev workflows.', 79),
(482, 'Hear how themes are changing to complement WordPress\' new block-based approach - and the pros and cons of headless CMS with @wordpress.', 79),
(483, '.@wordpress still powers over 40% of the web - learn how to leverage its REST API and @React for fast, customized sites and apps.', 79),
(484, 'Discover how @wordpress balances legacy needs of plugins with modern build tools like @webpack and @vitejs for faster workflows.', 79),
(485, 'Hear how the @wordpress editing experience is evolving to support real-time collaboration - and what\'s next for its block-based editor.', 79),
(486, 'Get the inside scoop on hosting, databases, jQuery usage, and more for streamlined @wordpress development and post-launch workflows.', 79),
(487, 'Can an AI like ChatGPT ask better interview questions than humans? @syntaxfm finds out in their gameshow format podcast!', 80),
(488, 'Want a fun listen to Scott and Wes answering tricky web dev questions generated just for them by ChatGPT? Check out the latest @syntaxfm episode!', 80),
(489, 'Hilarious listening to @syntaxfm try to answer obscure CSS, TS, GraphQL, Deno, Svelte questions from ChatGPT. Who will win, human or AI?', 80),
(490, 'ChatGPT tries to stump Scott and Wes on JS, CSS, TS, GraphQL, Deno, Svelte. Does it succeed? Listen in to the latest @syntaxfm for the answer!', 80),
(491, 'Interview prep? Check out Scott and Wes battling ChatGPT\'s custom-generated questions on @syntaxfm\'s latest episode. You\'ll learn a ton!', 80),
(492, 'Want a laugh? Listen to Scott on @syntaxfm desperately try to explain mapped types in TS after ChatGPT stumps him with an expert question!', 80),
(493, 'The new #ImportMaps standard lets you alias paths and modules in JS! 📁 Say goodbye to messy relative paths. 👋', 81),
(494, 'Tired of long relative paths in your JS imports? 😩 Import maps to the rescue! 🦸‍♂️ Define aliases in JSON for clean imports. #JavaScript', 81),
(495, 'Import maps are a game changer! 🔥 Define aliases in JSON to clean up your JS module imports once and for all. #webdev', 81),
(496, 'No more ../../.. in your JS! 🙅‍♂️ Import maps let you alias common paths for clean imports. The future is here! ✨ #JavaScript', 81),
(497, 'Want to use alias imports in JS without a bundler? Import maps have you covered! 💪 A new web standard for aliasing paths. #webdev', 81),
(498, 'Import maps are a big step toward standardizing module aliases across JS! 🎉 About time we had a common way to alias paths. #JavaScript', 81),
(499, 'Hear straight from a Googler about the power of web components and how to use them effectively.', 82),
(500, 'Want to understand web components better? We break down all their capabilities and integration points in this episode.', 82),
(501, 'If you think web components are only useful for simple widgets, think again! Learn how they enable interoperability across frameworks.', 82),
(502, 'Web components aren\'t just hype - they solve real problems around encapsulation, composition and reuse. Learn how.', 82),
(503, 'Shadow DOM, custom elements, and libraries like Lit give you real superpowers for component-driven development. Find out how.', 82);

INSERT INTO `AiTweet` (`id`, `content`, `showNote`) VALUES
(504, 'What are the pros and cons of offering continued support as a freelancer? Find out in the latest Syntax podcast!', 83),
(505, 'Struggling with testing animations in React? Scott and Wes share their strategies in the new Syntax episode.', 83),
(506, 'How to choose the right front-end framework for your next project. Syntax podcast helps you evaluate.', 83),
(507, 'Should you use small functions even if code won\'t be reused? Scott and Wes debate in the Syntax podcast.', 83),
(508, 'Taking effective notes is key for learning coding concepts. Scott and Wes share their strategies on Syntax podcast.', 83),
(509, 'When should you use CSS grid & gap properties? Pros and cons discussed on this week\'s Syntax podcast episode.', 83),
(510, 'Travis @TravisNeilson shares his unique cross-disciplinary perspective on #AI drawing on experience in design, engineering, and creative arts.', 84),
(511, 'Treating #AI systems like collaborators and companions rather than robots helps bring out their creative potential says Travis.', 84),
(512, 'Lowering technical barriers for artistry is a huge opportunity with #AI if creators learn to articulate ideas effectively.', 84),
(513, 'Building context over time is key for quality AI outputs says Travis - treat it like a conversation and keep adding relevant info.', 84),
(514, 'Customizing AI models to your priorities and seeding your ideas helps shape the experience you\'ll get says Travis.', 84),
(515, 'Keeping the human element in #AI interfaces will be vital as tools get more advanced says Travis - designers help negotiate this handshake.', 84),
(516, 'Should you switch careers to web dev later in life? Scott and Wes discuss on the latest Syntax podcast!', 85),
(517, 'Tips for writing code quickly and improving your typing speed - this week on Syntax!', 85),
(518, 'How can you improve web design if you don\'t have much design experience? Syntax has you covered.', 85),
(519, 'Dealing with high-paying but unsatisfying jobs - commiserate with Scott and Wes on the Syntax podcast.', 85),
(520, 'Do you really NEED a single page application for your next project? The pros weigh in on Syntax podcast!', 85),
(521, 'Another great potluck episode from @scotttolinski and @wesbos - dive into hot topics like career changes, coding quickly, and web design on @SyntaxFM!', 85),
(522, 'Want to test webhooks or outside API access on your local dev server? Check out tunneling tools like @Cloudflare Tunnel and @ngrok!', 86),
(523, 'Need HTTPS on localhost? We\'ve got you covered with a review of Caddy, mkcert, and more. Listen in to find out how tunneling works!', 86),
(524, 'Expose your local dev server securely with @Cloudflare Tunnel! Easy CLI setup for publicly accessible URLs. https://Syntax.fm', 86),
(525, 'Testing Stripe webhooks? Expose your local server with tunneling for quick validation. We dig into the options on @SyntaxFM', 86),
(526, 'Tunnel services FTW! Learn why @ngrok and @Cloudflare Tunnel are so useful for local development and testing.', 86),
(527, 'If you\'ve struggled with AWS complexity and deployments, @dax_io explains how SST and Open Next.js makes self-hosting Next + serverless viable.', 87),
(528, 'Fascinating look at how @Vercel\'s architecture for Next.js hosting works compared to rolling your own serverless platform on AWS.', 87),
(529, '\"Serverless pricing very cheap in practice despite appearing expensive\" - how @dax_io thinks about cost optimization on AWS', 87),
(530, '.@wesbos has used AWS for 12+ years - has it gotten better? He and @stolinski get the inside scoop from serverless expert @dax_io', 87),
(531, 'Think Next.js only works smoothly on @Vercel? @dax_io gives the inside scoop on Open Next.js for self-hosting anywhere with serverless.', 87),
(532, 'The Open Next.js project closes the gap between @Vercel and self-hosting - @dax_io shares how they enable Next.js to run anywhere', 87),
(533, 'Wes and Scott brainstorm how to make the @SyntaxFM website more useful and delightful! Some great ideas in here. #webdev', 88),
(534, 'Ever wondered how @SyntaxFM could integrate video, transcripts, search, and surfacing old content? Get the inside scoop in this episode!', 88),
(535, 'Curious what @SyntaxFM has cooking for their website? Get a peek behind the curtain in this insightful brainstorm sesh!', 88),
(536, 'How might @SyntaxFM make their old content more discoverable? Check out Wes and Scott\'s thoughts in this episode!', 88),
(537, 'What if @SyntaxFM added emojis and clip sharing to their podcast player? 😮 Get the lowdown on their website plans in this ep!', 88),
(538, 'Learn all about web streams, a powerful new web API for working with data! 💧', 89),
(539, 'Web streams allow you to work with data as it comes in, rather than waiting for completion. 🔄', 89),
(540, 'Use web streams for better performance, working with large data, and more! 🚀', 89),
(541, 'Web streams open up new possibilities like HTML rewriting on the fly. 🖊️', 89),
(542, 'Unlock the power of piping data between readable and writable streams. 📤', 89),
(543, 'Web streams are supported across browsers, Node, Deno, and more! ✅', 89),
(544, 'Developer and nomad @EricSartorius shares how he\'s worked remotely while traveling to 40+ countries over 9+ years!', 90),
(545, '\"Flexibility is key when working across time zones\" says world traveler @EricSartorius', 90),
(546, 'Is the digital nomad lifestyle all it seems on Instagram? @EricSartorius shares tips on budget travel and finding WiFi abroad', 90),
(547, '\"It\'s possible to travel very cheaply and efficiently\" - global nomad @EricSartorius spent just $10k visiting 10+ countries in one year!', 90),
(548, 'Climb a mountain in Antarctica? Just another goal for traveling developer @EricSartorius!', 90),
(549, 'Think you can\'t work productively while traveling? Nomad @EricSartorius shares how creating routines helps him work from anywhere', 90),
(550, 'Coming up: @scottolinski and @wesbos detail what makes websites slow and how to debug performance issues. Don\'t miss it!', 91),
(551, 'Ever wonder why some websites feel slow and laggy? Learn how to track down performance problems on the latest @SyntaxFM!', 91),
(552, 'Frustrated by a slow website? @scottolinski and @wesbos share their tips for improving performance on the new Syntax podcast.', 91),
(553, 'Websites feeling sluggish? Get actionable tips for speeding up your site on the latest performance-focused @SyntaxFM podcast.', 91),
(554, 'Debugging website speed can be tricky - luckily @scottolinski and @wesbos break it down on the new @SyntaxFM episode out now!', 91),
(555, 'Is your site lagging? @scottolinski and @wesbos analyze common performance pitfalls and solutions on their superb new @SyntaxFM podcast.', 91),
(556, 'Node in the browser is a total game changer! 🤯', 92),
(557, 'Run full Node apps in the browser with @StackBlitz\'s web containers and @CodeSandbox\'s Nodebox. The future is here!', 92),
(558, 'Node in browser unlocks powerful new possibilities for code demos, tutorials, and interactivity. Exciting times ahead!', 92),
(559, 'Node in browser means frictionless onboarding experiences for full stack frameworks. Learn by doing right away!', 92),
(560, 'Security and sandboxing benefits of running Node in browser instead of remote VMs. Smart solution from @StackBlitz and @CodeSandbox.', 92),
(561, 'Limitations remain due to browser restrictions, but early days for Node in browser. Expect rapid innovation in this space.', 92),
(562, 'Hear how @builderio allows marketers to visually compose UIs from React components without coding!', 93),
(563, 'Want drag and drop on your site in any framework? Learn how @builderio makes it possible!', 93),
(564, 'Builder.io overlays components with smart guessing to enable drag and drop editing right on your live site!', 93),
(565, '.@builderio has some sites with 80% of content visually composed! Hear how they integrated a coding-free editor on existing sites', 93),
(566, 'Visual programming tips for drag and drop: use reactive state management like MobX, avoid Redux and immutability @builderio', 93),
(567, '.@builderio outputs framework-agnostic JSON that can render UIs on React, Vue, Svelte, Solid and more!', 93),
(568, 'Chat about @OpenAI\'s ChatGPT, @github\'s Copilot, and more - how #AI and generative models are changing #development.', 94),
(569, 'Find out how devs can leverage #AI tools like @MidjourneyCo for images and @SentryIO for errors. But also, ethical concerns around #AIart.', 94),
(570, 'From uses to risks, we cover today\'s landscape of #AI tools for devs. How it helps... and harms? Tune in to hear more!', 94),
(571, 'We discuss if #AI is a solution or non-solution. Spoiler: it\'s nuanced! Hear more takes on #ChatGPT, @Bing, @Google\'s Bard, and beyond.', 94),
(572, 'Constantly raising quality bars with #AItools - good or bad for devs? How it impacts competition and copying. We hash it out this ep!', 94),
(573, 'When #AI goes off the rails - we cover funny and frightening examples. Plus terminology like models, training data, and #TensorFlow.', 94),
(574, 'Coming up: tips for defeating sloppy code through establishing coding conventions and automation - don\'t miss it!', 95),
(575, 'Want your codebase to sparkle? 🧼 We\'re breaking down strategies for clean code vs sloppy code - tune in!', 95),
(576, 'Ready to Marie Kondo your code? 🧹 We\'re talking clean coding standards, linting fixes, and eliminating sloppy code - let\'s go!', 95),
(577, 'Establishing codebase rules not your forte? We\'re exploring conventions for clean code, naming, docs, and being ruthlessly tidy!', 95),
(578, 'Is sloppy code dragging you down? 😫 We\'re sharing ways to establish order through linting, automation, and Sparkling organization!', 95),
(579, 'Up next: defeating messy code through linting, automation, and establishing Marie Kondo-approved coding conventions. Let\'s clean it up!', 95),
(580, 'Learn how @Astrodotbuild 2.0 focuses on #Markdown authoring with frontmatter type safety from creator @FredKSchott.', 96),
(581, 'Curious how @Astrodotbuild handles edge runtimes like @CloudflareApps Workers? Find out from creator @FredKSchott on the latest Syntax podcast.', 96),
(582, '.@Astrodotbuild creator @FredKSchott explains how it defaults to HTML everywhere with interactive JS islands unlike traditional SPAs #WebDev', 96),
(583, 'Want to build content-focused sites like blogs, docs & portfolios? @FredKSchott makes the case for @Astrodotbuild 2.0 on @SyntaxFM.', 96),
(584, 'How does @Astrodotbuild make data fetching easy? Creator @FredKSchott covers top-level awaits in components on the latest Syntax podcast.', 96),
(585, '.@Astrodotbuild uses file-based routing like @nextjs but runs data fetching in component frontmatter before template says @FredKSchott.', 96),
(586, 'The new Warp terminal built with Rust is refreshingly modern! Learn why @syntaxfm loves it on the latest podcast episode.', 97),
(587, 'Scott\'s been sick but powers through to chat Warp, Windows terminal, iTerm, Hyper and more on @syntaxfm! Terminals are getting a glow up!', 97),
(588, 'Warp terminal is Mac-only for now but plans to expand. Get the scoop on this and other terminals on the latest Syntax podcast!', 97),
(589, 'Annoyed by terminals? The new Warp aims to fix pain points like no click cursor, lack of shortcuts and more. Details on @syntaxfm!', 97),
(590, 'Dive into terminal terminology and get Scott and Wes\' takes on Warp, iTerm, Hyper, Windows Terminal and others on @syntaxfm\'s latest!', 97),
(591, 'Learn why logging is so valuable for debugging and visibility into your web app! #webdev', 98),
(592, 'Pro tips for implementing robust logging in your Node.js and web projects. #javascript', 98),
(593, 'What should you log? How much logging is too much? When do you need third party services? We\'ve got the answers! #webdev', 98),
(594, 'From security to debugging and everything in between, here\'s why logging is a web dev\'s best friend. #JavaScript', 98),
(595, 'Logging not just for errors! Learn how it provides insight into your users, bots, crashes and more. #webdev', 98),
(596, 'They say the best defense is a good offense. Is logging the best offense for avoiding web app issues? We think so! #javascript', 98),
(597, 'Learn the reactive programming concepts behind @solidjs with creator @ryansolid! Signals, derived values, and avoiding cascade updates.', 99),
(598, 'Fascinating deep dive into @solidjs and how it compares with React, RxJS and uses signals for fine-grained reactivity.', 99),
(599, 'If you want to understand reactivity in modern web dev, this podcast delivers. We break down @solidjs signals, API design, and more.', 99),
(600, '@ryansolid takes us through the history and evolution of @solidjs - from early inception to paths not taken with web components.', 99),
(601, 'How do @solidjs signals differ from observables and streams? Are web components an antipattern in frameworks? Answered here!', 99),
(602, 'Everything you wanted to know about next-gen reactivity and @solidjs from creator @ryansolid. Tune in for this jam-packed episode!', 99),
(603, 'Want to code against the OpenAI API in JS? @wesbos and @stolinski walk through how on the latest episode of Syntax!', 100),
(604, 'Curious about working with #OpenAI and #ChatGPT in your apps and sites? The latest Syntax podcast from @wesbos and @stolinski has you covered!', 100),
(605, '.@wesbos explains how he\'s using the OpenAI API for #podcast transcriptions on @SyntaxFM. So many cool uses for this tech!', 100),
(606, 'Thinking of playing around with OpenAI and ChatGPT? New @SyntaxFM ep with @wesbos + @stolinski covers the APIs, pricing, limits, and more!', 100),
(607, 'The OpenAI API pricing is changing rapidly says @wesbos on @SyntaxFM. GPT3 → GPT3.5 saw a 10x price drop! Exciting times.', 100),
(608, 'Some great #JavaScript tips for working with OpenAI and ChatGPT from @wesbos on the latest @SyntaxFM. Don\'t miss it!', 100),
(609, '.@stolinski asks some great questions as @wesbos walks through using the OpenAI API on the latest @SyntaxFM podcast episode.', 100),
(610, 'Got questions on smart homes, web components, JavaScript, and more? @wesbos and @stolinski have you covered in this jam-packed listener Q&A episode!', 101),
(611, 'Curious how @wesbos sets up his smart home? Looking for pros/cons on web components vs frameworks? Tune in to hear Scott and Wes dig into your questions!', 101),
(612, 'Hear @stolinski and @wesbos geeking out over electrical work, wire strippers, web component SSR, JavaScript mixins, and more in this info-packed listener Q&A ep!', 101),
(613, 'Web dev questions galore including smart homes, web components, SSR, mixins and more are tackled by @stolinski and @wesbos in this listener Q&A!', 101),
(614, 'Listen in as @wesbos and @stolinski wax poetic about dimmers, switches, wire connectors, web component routing, JavaScript mixins, and more!', 101),
(615, 'Don\'t miss @wesbos and @stolinski answering your questions on web dev topics like smart homes, web components vs frameworks, SSR, and mixins!', 101),
(616, 'Got config file overload? @wesbos and @stolinski share pro tips for taming the config beast! 🦁', 102),
(617, 'Config files - can\'t live with \'em, can\'t live without \'em! Here\'s how to organize these necessary evils from @SyntaxFM:', 102),
(618, 'Is your project drowning in config files? Fear not! @SyntaxFM has you covered with ideas to clean up and organize.', 102),
(619, 'Config file clutter got you down? Check out the latest @SyntaxFM podcast for tips on wrangling these unruly JS configs.', 102),
(620, 'Want to declutter your web dev project? The latest @SyntaxFM podcast tackles strategies for config file organization - check it out!', 102),
(621, 'Config files are a necessary evil - but they don\'t have to take over your codebase! Tips from @SyntaxFM on organizing these unruly configs:', 102),
(622, 'Learn how @QwikDev handles optimizations like code splitting automatically so you can focus on writing apps instead of performance! #QwikJS', 103),
(623, 'Hear the virtual machine analogy behind @QwikDev\'s magical resumability feature for seamless PWAs and SSR from @mhevery. #WebDev', 103),
(624, 'Tired of tooling hell required for lazy loading in #ReactJS? @QwikDev handles it all automatically! @mhevery explains how. #JavaScript', 103),
(625, '@QwikDev aims to provide the same capabilities as #React, #Angular, etc but with resumability built-in for free! @mhevery explains on #SyntaxFM.', 103),
(626, '.@mhevery walks through the many issues with manually lazy loading components in #ReactJS and how @QwikDev solves them automatically! #WebDev', 103),
(627, 'Don\'t miss the Suppper Club x @QwikDev episode of #SyntaxFM! @mhevery gives an overview of resumability and how Qwik works. #JavaScript', 103),
(628, 'Can\'t figure out those 3-way switch wires? @syntaxfm has you covered with handy electrical tips in their latest episode!', 104),
(629, 'Taking the leap from JavaScript to TypeScript for your project? @syntaxfm breaks down the refactoring benefits in their newest ep.', 104),
(630, 'Want to hear @wesbos and @stolinski chat TypeScript, wiring switches, and way more? Get your fill on the newest @syntaxfm pod!', 104),
(631, 'Level up your JavaScript with TypeScript - the @syntaxfm crew has the details on making the switch in their latest episode.', 104),
(632, 'Don\'t miss out on helpful wiring tricks, TypeScript tips, and more developer gold on the newest @syntaxfm pod!', 104),
(633, 'Want to make your site fast and polished after launch? 🚀 Join @SyntaxFM as they share pro tips for boosting performance through caching, optimization, removing bloat, and more!', 105),
(634, 'Struggling with site speed even after launch? @SyntaxFM has you covered with actionable ways to identify perf issues through network audits, Lighthouse, and other tools. Learn to trim the cruft and polish the user experience!', 105),
(635, '@SyntaxFM delivers a masterclass in post-launch site optimization - from the low-hanging fruit of image compression to advanced techniques like serverless deploys. Level up your page speed game now!', 105),
(636, 'Getting snappy page loads is crucial for user experience. @SyntaxFM breaks down their proven process for iterative perf boosting through network analysis, removing bloat, and strategic caching.', 105),
(637, 'Want your site to feel fast and flawless after launch? Learn how @SyntaxFM approaches polish and perf through tools like Lighthouse, Partytown, and eliminating unnecessary requests.', 105),
(638, '@SyntaxFM moves beyond the basics and dives deep on advanced perf tuning - proxying assets, multi-threaded workers, and incremental build times for a slick UX.', 105),
(639, 'Learn why @timClicks set out to make Rust more approachable for new developers in his book Rust in Action!', 106),
(640, 'Hear @timClicks explain concepts like ownership, lifetimes, and traits that can trip up new Rustaceans.', 106),
(641, 'What are good first #Rust projects for web devs? @timClicks suggests command line utilities & interactive games!', 106),
(642, 'Why is #Rust so much faster than other languages? @timClicks explains how it bundles dependencies into executables.', 106),
(643, '.@timClicks believes Rust can create a more environmentally sustainable computing industry through performance gains.', 106),
(644, 'What exactly are crates and cargo when it comes to #Rust? @timClicks breaks down the terminology 101 style.', 106),
(645, 'Can you run Rust code in the browser via WebAssembly? Hear @timClicks\' experience with WASM on Syntax FM!', 106),
(646, 'The future is ESM! Learn why and how to migrate your Node.js app to ECMAScript modules.', 107),
(647, 'Using import/export in Node.js? We breakdown the transition from CommonJS to ESM and things to watch out for.', 107),
(648, 'ECMAScript modules bring benefits like a standard spec and top level await but also have some downsides over CommonJS.', 107),
(649, 'Big episode today on finally moving to ECMAScript modules in Node. Tips for modularizing and importing JSON, remote URLs and more.', 107),
(650, 'Some popular NPM packages now ESM only - we discuss why this is forcing many to transition their Node apps.', 107),
(651, 'Want to use import/export syntax in Node.js? We explain how to configure your package.json and extensions for ESM.', 107),
(652, 'Want mixins in CSS? How about selecting grid rows? 😲 Scott and Wes share their wishlist for future CSS features on the latest Syntax podcast!', 108),
(653, 'Dreaming of native fit-text, overflow control, color functions, lighten/darken colors, and more in CSS? Check out Scott and Wes\' CSS wishlist on @SyntaxFM!', 108),
(654, 'Want to select first/last rows/columns in CSS Grid? Add resize handles to divs? Listen to @ScottTolinski and @wesbos share their CSS wishlist now!', 108),
(655, 'CSS is getting some amazing new features! Tune into the latest @SyntaxFM to hear Scott and Wes\' wishes including mixins, range selectors, grid rows, and more!', 108),
(656, 'CSS pros: what\'s on your wishlist? @ScottTolinski and @wesbos share theirs - color functions, fit-text, overflow control, and more! Listen to the latest @SyntaxFM', 108),
(657, 'If you could add anything to CSS, what would it be? @ScottTolinski and @wesbos share their wildest CSS dreams including some really useful stuff!', 108),
(658, 'Hear @calebp discuss growing up in Canada near Buffalo and their many similarities on the latest @SentryFM podcast!', 109),
(659, 'On the new @SentryFM, Buffalo gets an honorary Canadian citizenship from developer @calebp 🇨🇦🍁', 109),
(660, 'Everybody knows Buffalo is secretly Canadian at heart! Learn why on @SentryFM\'s supper club podcast with @calebp', 109),
(661, '.@wesbos reminisces about working at Target and underage drinking trips to Canada on @SentryFM\'s new ep with @calebp 😂🍺', 109),
(662, 'Who knew Buffalo TV stations reached all the way to Canada? @calebp shares his experience on the new @SentryFM podcast!', 109),
(663, '🇺🇸 or 🇨🇦? @SentryFM debates whether Buffalo and Michigan should actually be part of Canada on their podcast with @calebp!', 109),
(664, 'The State of JS 2022 survey is out! 📊 See where the JS community stands on salaries, frameworks, and more.', 110),
(665, 'Big takeaway from the State of JS: React still reigns supreme. But watch out for that up and comer SvelteKit. 🔥', 110),
(666, 'State of JS top framework is no surprise: React at #1. But Vue passing Angular for #2? Didn\'t see that coming!', 110),
(667, 'Salaries for JS devs vary widely according to State of JS. But high pay at FAANG is not necessarily the norm.', 110),
(668, 'Germany is way more represented in State of JS respondents than Syntax podcast listeners. Internationalization FTW! 🇩🇪', 110),
(669, 'Container queries are here! 🎉 Learn how to use this long awaited CSS feature from @wesbos and @stolinski', 111),
(670, 'Finally able to style components based on parent size instead of viewport! Check out examples from @wesbos and @stolinski', 111),
(671, 'Font sizes, border radius, code block widths - adjust them all dynamically with container queries! Podcast from @wesbos and @stolinski', 111),
(672, 'Browser support and polyfill options for container queries discussed by @wesbos and @stolinski - start using them today!', 111),
(673, 'Excited container queries are here? Us too! Tips for using them from @wesbos and @stolinski', 111),
(674, 'Container queries let you replace JS with CSS in many cases! Learn how from @wesbos and @stolinski', 111),
(675, 'Syntax podcast dives deep on container queries - real world examples from @wesbos and @stolinski', 111),
(676, 'Learn all about @sanity_io\'s awesome content platform from the @SyntaxFM podcast!', 112),
(677, 'The @SyntaxFM folks chat with @sanity_io about Grok, GraphQL, and the new Sanity Studio 3 release.', 112),
(678, 'Want to know more about @sanity_io and its flexible content platform? Check out this podcast from @SyntaxFM!', 112),
(679, 'What is Grok all about? How does @sanity_io CMS compare to GraphQL? Get the scoop from @SyntaxFM!', 112),
(680, '.@SyntaxFM and .@sanity_io discuss the past, present and future of CMS tools and content APIs - tune in!', 112),
(681, 'CMS history, Grok queries, GraphQL discussion, and more on this info-packed @SyntaxFM x @sanity_io crossover episode!', 112),
(682, 'Scott shares how he injured his knee in a ridiculous way - tune in to hear the story!', 113),
(683, 'With budgets tightening, how are Wes and Scott dealing with the impacts of a recession?', 113),
(684, 'Some business owners splash out on fancy cars - our hosts explain why they don\'t agree with this approach.', 113),
(685, 'Curious about YNAB, Copilot, and other personal budgeting tools? Get Wes and Scott\'s take.', 113),
(686, 'The JS module ecosystem has come a long way - learn whether AMD, CommonJS, or ES Modules reign supreme today.', 113),
(687, 'Should you buy or build that service? 🤔 Get key factors to consider before deciding in this bite-sized podcast!', 114),
(688, 'Struggling between integrating a third-party service or building it yourself? @SyntaxFM has pro tips on evaluating the tradeoffs.', 114),
(689, 'Unsure whether to buy or build authentication, search, checkout and more? Learn when it makes sense to outsource vs DIY in the latest @SyntaxFM!', 114),
(690, 'How do you know when it\'s worth it to build vs buy services like hosting, APIs, and cron jobs? Get pro insights from @SyntaxFM!', 114),
(691, 'Should your company focus on its core business or maintain services itself? @SyntaxFM discusses key considerations for buy vs build decisions.', 114),
(692, 'When should you lock into a vendor\'s service vs maintain flexibility? @SyntaxFM covers escapability as a factor in build vs buy choices.', 114),
(693, 'From French lit major to founding engineer @Tangible_App - the winding road of @KatherineMello5', 115),
(694, 'Learn about the carbon impact of buildings from @Tangible_App engineer Katherine Mello on @SyntaxFM', 115),
(695, 'Don\'t miss Katherine\'s journey through coding bootcamps and data viz to sustainable building startup @Tangible_App', 115),
(696, '@KatherineMello5 makes coding bootcamps and @WeWork chaos sound fun on the latest @SyntaxFM', 115),
(697, 'Could data visualization be your ticket to a unique career? @KatherineMello5 explains on @SyntaxFM', 115),
(698, '\"Walk the talk\" on sustainability, says @KatherineMello5 - applies to hosting too!', 115),
(699, 'Ring in 2023 by learning Rust, Svelte, Touri, and more with @SyntaxFM!', 116),
(700, 'This year, @SyntaxFM is leveling up their interview game - more great guests coming your way!', 116),
(701, 'From indoor skiing to battling - @SyntaxFM has big fitness goals set for the new year.', 116),
(702, '@SyntaxFM is prepping new courses on hot topics like container queries and TypeScript - skill up in 2023!', 116),
(703, 'The fellas at @SyntaxFM are committed to bringing you the best in web dev - stay tuned for what\'s coming!', 116),
(704, 'New year, new skills - @SyntaxFM is pushing their limits with big goals for 2023. Join them on the journey!', 116),
(705, 'Learn about the powerful new #TypeScript features \'as const\' and \'satisfies\' on the latest Syntax podcast!', 117),
(706, 'Stop duplicated types and get better inference with \'as const\' and \'satisfies\' in #TypeScript - listen to @SyntaxFM now!', 117),
(707, 'Generate frozen types from your data with \'as const\' and satisfy unknown metadata with \'satisfies\' in #TypeScript - tune in to @SyntaxFM', 117),
(708, 'TypeScript superpowers unlocked! Master \'as const\' and \'satisfies\' to boost your type safety on the latest @SyntaxFM podcast.', 117),
(709, 'Are your #TypeScript types satisfying you? Learn how \'as const\' and \'satisfies\' can take your type game to the next level on @SyntaxFM!', 117),
(710, 'Get ready to satisfy all your #TypeScript cravings with a deep dive on \'as const\' and \'satisfies\' - new episodes out now on @SyntaxFM!', 117),
(711, 'Hear @sarah_edo discuss her new book Engineering Management for the Rest of Us on @SyntaxFM!', 118),
(712, 'Learn how @sarah_edo transitioned from engineer to management @Google and @Netlify on the latest @SyntaxFM', 118),
(713, 'Get @sarah_edo\'s insights on keeping engineers productive and transitioning to management on @SyntaxFM', 118),
(714, '.@sarah_edo shares her motivation and process for writing Engineering Management for the Rest of Us on @SyntaxFM', 118),
(715, 'Find out how @sarah_edo published her new book and her tips for staying motivated as a manager on @SyntaxFM', 118),
(716, 'Get managerial advice from @sarah_edo on the latest @SyntaxFM as she discusses her new book Engineering Management for the Rest of Us', 118),
(717, 'Get ready for more server side rendering, alternative JS frameworks, Rust, CSS container queries and more trends in 2023 says @wesbos and @stolinski', 119),
(718, 'Will React improve form handling in 2023? @wesbos and @stolinski predict what\'s next for React and other popular frameworks', 119),
(719, 'Deno, Node.js, and Bun runtimes will mature in 2023 predicts @wesbos and @stolinski - which will you use?', 119),
(720, 'Want your JS code to run fast in 2023? @wesbos and @stolinski explain why Rust and runtimes like Bun will gain popularity', 119),
(721, 'The React docs beta has been going for YEARS - will it finally launch in 2023? Tune in to the predictions from @wesbos and @stolinski', 119),
(722, 'SvelteKit 1.0 just launched - @wesbos and @stolinski predict major growth is coming for the Svelte framework in 2023', 119),
(723, 'CSS container queries are coming to all major browsers - @wesbos and @stolinski explain why they\'ll go mainstream in 2023', 119),
(724, 'Learn how to narrow types from general to specific in #TypeScript using type guards, if statements, and handy predicates.', 120),
(725, 'Get a handle on fundamental TypeScript features like type narrowing and type guarding to write better typed code.', 120),
(726, 'Struggling with Union types in TS? We break down how to narrow options and safely access properties with type guards and predicates.', 120),
(727, 'TypeScript confusing you with wide types that need to be narrowed? We explain type guards, if/else, and predicates to shrink your types.', 120),
(728, 'Want to write better typed TS code? We guide you through type narrowing with typeof, property checks, if/else, and type predicate functions.', 120),
(729, 'How do you narrow those wide Union types in TS down to specifics? We break it all down - type guards, if/else, and handy predicate functions.', 120),
(730, 'Learn how @taviso built the Polypane browser as the ultimate dev tool to speed up development and make accessibility easy. #SyntaxFM', 121),
(731, 'Ever wish you could instantly toggle color blindness or dyslexia filters on a webpage? @taviso built that right into Polypane browser. #SyntaxFM', 121),
(732, 'Hover on 1 pane in Polypane and every other pane syncs hover immediately. The small delights that add up to big dev productivity. #SyntaxFM', 121),
(733, '.@taviso took his design workflow from Sketch and rebuilt it in the browser with Polypane. Multi-pane view, guides, overlays, and more. #SyntaxFM', 121),
(734, 'Polypane has a visual tab order overlay with numbered focus order + arrows. No more guessing your tab order! Thank you @taviso #SyntaxFM', 121),
(735, 'Contrast checker, disability simulators, focus testing, outline view, and way more accessibility tools built right into @taviso\'s Polypane browser. #SyntaxFM', 121),
(736, 'Wes and Scott revisit their 2022 web dev predictions - find out which technologies like SvelteKit, Rust and GitHub Copilot blew up this year!', 122),
(737, 'Did Wes and Scott\'s predictions for Next.js, GraphQL, dev tools and more pan out in 2022? Tune in to hear their review!', 122),
(738, 'Hear Wes and Scott reflect on hits and misses from last year\'s 2022 web dev prediction episode - lots of interesting tech covered!', 122),
(739, 'Curious which predictions about Svelte, Rust, GitHub Copilot and other web dev tech came true in 2022? Wes and Scott deliver the verdict!', 122),
(740, 'Web dev gurus @wesbos and @stolinski look back on their 2022 predictions - find out which technologies rose up and which fell flat this year!', 122),
(741, 'How accurate were Wes and Scott\'s 2022 web dev predictions? Find out if they nailed the growth of TypeScript, Deno, dev tools and more!', 122),
(742, 'Learn how to build desktop apps with #JavaScript using @ElectronJS and @tori_app from @syntaxfm!', 123),
(743, 'Want to build cross-platform desktop apps? @scotttolinski and @wesbos walk through using #JavaScript with @ElectronJS and @tori_app on the latest @syntaxfm', 123),
(744, 'Tired of heavy Electron apps? Check out lightweight @tori_app as an alternative for building desktop apps in #JavaScript on @syntaxfm', 123),
(745, '@scotttolinski shares his experience building desktop apps with @ElectronJS and @tori_app on the latest @syntaxfm #JavaScript', 123),
(746, 'Find out how @tori_app makes building desktop apps in #JavaScript easier than Electron on @syntaxfm', 123),
(747, 'Don\'t miss the breakdown of @ElectronJS and @tori_app for building desktop apps in JS from @scotttolinski and @wesbos on @syntaxfm!', 123),
(748, 'Hear how Kenneth Lyerly went from being an aerospace machinist to leading marketing teams and becoming a full-time developer!', 124),
(749, 'Kenneth bought a home in Orange County at just 23 years old while working in aerospace. After getting into web dev as a side project, he realized coding was his true passion.', 124),
(750, 'The COVID pandemic changed plans for Kenneth\'s pomade company in 2020. After rebuilding his team, burnout led him to take a second full-time remote web dev job.', 124),
(751, 'Kenneth now works mornings as a web dev for ResortPass and afternoons continues supporting the pomade company he helped build over 9 years.', 124),
(752, 'Balancing two full-time remote jobs takes serious work ethic! Kenneth\'s advice: \"If you wanna make that transition, you\'re gonna be willing to put in the time.\"', 124),
(753, 'Hear @davideast discuss @Google\'s new online IDE Project IDX, allowing coding in the browser with AI - sounds very futuristic! #syntaxfm', 125),
(754, 'Get insights into Project IDX, Google\'s experiment with online coding environments. Could this be the future of development? #syntaxfm', 125),
(755, 'Online dev environments like Project IDX solve major pain points around environment setup & config. Is local dev nearing extinction? #syntaxfm', 125),
(756, 'IDX brings AI assistance to online coding - code completion aware of context, answers queries about your code, and more! The future is here! #syntaxfm', 125),
(757, 'What if you could code from any device with just a browser, and not worry about installing dev tools and dependencies? IDX delivers. #syntaxfm', 125),
(758, 'Want to make app dev easier? IDX handles emulators for iOS and Android - write code and test it on virtual devices! #syntaxfm', 125),
(759, 'Tune in to hear tips on LevelUp Tutorials site redesigns, transitioning to freelancing, gaining confidence as a senior dev, and more!', 126),
(760, 'Want web dev news, framework hot takes, notification strategies, smart home automation tips? Check out the latest potluck episode!', 126),
(761, 'Get the scoop on Vitest, Tanstack, Hazel, label makers, WeCrashed, and more on this week\'s info-packed potluck podcast episode.', 126),
(762, 'Hear Scott and Wes discuss React Router, Twitter communities, HEIC images, standing desks, and lots more on the newest syntax podcast episode.', 126),
(763, 'The latest syntax podcast episode covers site performance, JavaScript testing, Mastodon, TV show picks, and much more - don\'t miss it!', 126),
(764, 'Learn about our website improvement plans, freelancing tips, senior dev traits, routers, testing, notifications and more on this week\'s syntax podcast!', 126),
(765, 'Serverless + databases? We\'ve got you covered! Tune in as we break down the top options like @PlanetScale, @MongoDB, @Supabase, and more! #JAMstack', 127),
(766, 'Heading serverless? Don\'t forget about your database! We discuss connection pooling, edge locations, scaling, and review top options like @FaunaDB, @PlanetScale, and @NeonDatabase. #serverless', 127),
(767, 'Shifting to #serverless? We stress test database options like @PlanetScale to over 300K requests! Learn the pros, cons, gotchas, and our top picks in this ep!', 127),
(768, 'We geek out hard on serverless database options! From @Firebase to @Supabase to @MongoDB Atlas, learn our top picks for your next JAMstack project!', 127),
(769, 'Want serverless SQL or NoSQL? We\'ve tried them all! Get the DL on @FaunaDB, @DynamoDB, @PlanetScale, @Supabase, @Firebase, and more!', 127),
(770, '@syntaxfm dives deep on databases for #serverless apps! Discover which options handle connection pooling, edge locations, and scaling the best!', 127),
(771, 'Learn how @RemotionVideo allows you to programmatically generate videos using React and other web tech 🎥', 128),
(772, 'Tired of clunky video editing tools? @RemotionVideo lets you make videos in CODE using React! 🤯', 128),
(773, 'The future is here - generate videos on the fly using nothing but React code thanks to @RemotionVideo! 📹', 128),
(774, '@RemotionVideo brings the power of coding to video production - no more clunky timelines and edits', 128),
(775, 'React code > After Effects, thanks to @RemotionVideo which lets you generate video completely in code 💻', 128),
(776, '@RemotionVideo uses React hooks and your components to render video frames for silky smooth programmatic video creation 🎞️', 128),
(777, 'The median JS payload is over 500kb! 😱 Check out the Web Almanac chapter on #JavaScript usage with @wesbos and @stolinski!', 129),
(778, 'Who knew the JavaScript chapter in the Web Almanac was only chapter 2 out of 23? 🤯 Tons of great stats in this eps of @SyntaxFM', 129),
(779, 'Michigan FINALLY beats Ohio State in football - but where\'s the data on rivalry smack talk percentages? 🏈 Get the podcast download for more!', 129),
(780, 'Still loading 500kb+ of #JavaScript on desktop in 2022? Yikes! Get the Web Almanac breakdown on @SyntaxFM to optimize your site!', 129),
(781, 'Thought you knew everything about modern JavaScript usage? Think again! Get schooled by the @SyntaxFM crew breaking down the Web Almanac trends.', 129),
(782, 'Want to understand the difference between SPA, MPA, SSR, SSG and more? @SyntaxFM has you covered with a breakdown of web rendering methods! #webdev', 130),
(783, 'Curious about progressive hydration, island architecture, streaming SSR? @SyntaxFM tackles the array of web rendering approaches in their latest episode. #learnonthego', 130),
(784, 'Do you know the difference between a SPA and MPA? Check out @SyntaxFM\'s thorough explainer on SPA, MPA, SSG, SSR and more web rendering methods!', 130),
(785, 'Understanding rendering methods like SPA vs SSR is key for web devs. Get the lowdown from @SyntaxFM\'s detailed overview of today\'s options!', 130),
(786, 'If you build web apps, you need to know your rendering methods. @SyntaxFM delivers a 101 on SPA, MPA, SSG, SSR, hydration, edge rendering and more!', 130),
(787, 'Hear how @Disney builds internal tools on legacy systems while using modern stacks like React and GraphQL. #webdev', 131),
(788, 'Getting the inside scoop on @Disney\'s CMS and workflows for Disney Plus, ABC News and more from engineer Vu Le. # SyntaxFM', 131),
(789, 'Tools for creativity! Learn how @Disney builds internal CMS for massive amounts of content. ', 131),
(790, '.@Disney has amazing perks like employee access to Disney Plus! Hear more from engineer Vu Le on what it\'s like to work there. #SyntaxFM', 131),
(791, 'The hidden side of @Disney...learn how they build internal tools to power their massive content workflow. #webdev #SyntaxFM', 131),
(792, 'Remote work flexibility, learning to code from marketing, and custom keyboards. Great convo with @Disney engineer Vu Le! #SyntaxFM', 131),
(793, 'Do you prefer named functions or arrow functions in variables? Tune in to hear @syntaxfm\'s takes!', 132),
(794, 'Getting feedback before launch is so much better than after! Hear @syntaxfm\'s thoughts on prepping for a site launch.', 132),
(795, 'Function definitions vs arrow functions - which do you prefer for readability? Check out the pros and cons on the latest @syntaxfm!', 132),
(796, 'Are your code style preferences improving readability or just petty? Find out what @syntaxfm thinks about tabs vs spaces and more!', 132),
(797, 'Exhausted from prepping for a launch? @syntaxfm totally relates - hear their advice on managing launch stress!', 132),
(798, 'What\'s the best way to define functions in JS for readability? @syntaxfm discusses named functions vs arrow functions in variables - don\'t miss it!', 132),
(799, 'GitHub is leveling up big time with new AI-powered tools like Copilot CLI, voice coding, and smarter pull requests. The future is now! 🤖⚡️ #GitHubNext', 133),
(800, 'Did you know GitHub is working on letting you code just by talking? Sign me up for voice coding with GitHub Copilot! 🗣️👩‍💻 #GitHubNext', 133),
(801, 'GitHub Blocks will let you embed interactive widgets right in your READMEs. No more static docs! ✨ #GitHubNext', 133),
(802, 'GitHub Copilot CLI and voice coding are going to change how we code forever. The robots are coming for our keyboards! 🤖🪄 #GitHubNext', 133),
(803, 'GitHub\'s new collaborative workspaces look amazing. Real-time editing, shared servers and terminals, multiplayer tabs - the future is now! 👥 #GitHubNext', 133),
(804, 'GitHub Copilot Radar will make navigating your codebase easier than ever. Jump to definition on steroids! 🔎📈 #GitHubNext', 133),
(805, 'GitHub is adding AI everywhere: Copilot for your own code, instant code reviews on PRs, explainable code summaries... Skynet is upon us! 🤖 #GitHubNext', 133),
(806, 'Hear the creator of Bun explain how it achieves 3x faster server-side React than Node!', 134),
(807, 'Learn why the lead Bun developer thinks package.json is \"just a better import map\" - and how it fits into Bun\'s approach', 134),
(808, 'The Bun runtime taps into the performance optimizations made by the Safari team for its JavaScriptCore engine', 134),
(809, 'Bun\'s testing library is shaping up to be 40x faster than Jest in some cases - imagine the speed gains on large test suites!', 134),
(810, 'Curious why a new JS runtime? Hear how Bun integrates tools like transpiling, bundling, and package managing to gain speed', 134),
(811, 'Bun\'s unique name comes from the creator\'s friend\'s pet bunny - the double meaning with bundling fit perfectly!', 134),
(812, 'Did you know the Playstation team contributes to improving JavaScriptCore? The benefits trickle up to Bun\'s performance too!', 134),
(813, 'Learn how @wesbos and @stolinski stay on top of the latest web dev news on Twitter - from who to follow to muting topics!', 135),
(814, 'Ever get confused between CRUD and real-time data protocols like WebSockets? @SyntaxFM breaks it down simply.', 135),
(815, 'Want a good laugh? @SyntaxFM covers the absolutely bonkers history of Google\'s messaging and video chat apps. So confusing!', 135),
(816, 'Get pro tips from @wesbos and @stolinski on curating your Twitter feed, unfollowing, using TweetDeck, and more!', 135),
(817, 'Up your Twitter game with actionable tactics from @SyntaxFM on optimizing who you follow and cutting through the noise.', 135),
(818, 'Serverless limitations discussed on the latest @SyntaxFM! 👀', 136),
(819, 'Cold starts, function size limits, and more - the latest @SyntaxFM covers common serverless gotchas.', 136),
(820, 'Before going all in on serverless, tune into the latest @SyntaxFM to learn what to watch out for!', 136),
(821, 'Hear @scotttalinski and @wesbos talk non-coding topics like reality TV, holidays & behind the scenes secrets on the latest Syntax Supper Club!', 137),
(822, 'Want a break from coding talk? Tune into the Syntax Supper Club ep for @scotttalinski & @wesbos chatting casually about TV, holidays & life!', 137),
(823, 'Curious what @scotttalinski & @wesbos chat about off-air? Get the inside scoop on their fave shows, holiday plans & more on the Supper Club ep!', 137),
(824, '@scotttalinski explains his & his wife\'s reality TV draft game - so relatable for TV fans! Hear all about it on the Supper Club ep.', 137),
(825, '.@wesbos shares a hilarious Saskatoon berry beer story! Get his holiday plans & other casual convos on the latest Supper Club podcast.', 137),
(826, 'Hear @scotttalinski\'s friend\'s experience filming a reality dance competition show - the behind-the-scenes secrets! Supper Club ep has it all.', 137),
(827, 'Want to build websites that work beautifully on any device? Tune into the latest @SyntaxFM podcast for pro tips on mastering responsive design!', 138),
(828, 'Don\'t miss the new @SyntaxFM podcast breaking down all the techniques for creating responsive websites that adapt perfectly across devices.', 138),
(829, 'If you build websites, you need to listen to the latest @SyntaxFM podcast on responsive design. Your mobile visitors will thank you!', 138),
(830, 'The new @SyntaxFM podcast has gold for anyone looking to step up their responsive design game. Don\'t miss their tips and tricks!', 138),
(831, 'Adaptive? Mobile-first? Desktop-first? Find out the best strategies for responsive design on the new action-packed @SyntaxFM podcast!', 138),
(832, 'Responsive web design can be tricky, but @SyntaxFM has you covered with a deep dive into all the tools and techniques in their latest podcast!', 138),
(833, 'The new #ReactUse hook handles promises in components - but watch out for those footguns! 😱', 139),
(834, 'Goodbye useEffect data fetching, hello React Use! 👋 Find out why it\'s a big deal on the latest @syntaxfm', 139),
(835, 'React Use helps with async data, but creates some API fragmentation. We break it all down on @syntaxfm!', 139),
(836, 'Will React Use make async data in components better or cause confusion? Get the lowdown on @syntaxfm 🎧', 139),
(837, 'The React Use hook handles promises, but modifies built-ins like fetch. Learn the pros and cons on @syntaxfm.', 139),
(838, 'How will React Use change async data fetching in your components? Get the scoop on the latest proposal on @syntaxfm!', 139),
(839, 'The creator of @nodejs is back with a new runtime called Deno! Learn why @ry thinks JavaScript is here to stay and how Deno improves on Node.', 140),
(840, 'Ever wonder how JavaScript runtimes like @nodejs and @deno_land are actually built? @ry shares his expertise on using V8, Rust, and more under the hood.', 140),
(841, 'JS has come a long way since Node started in 2009! @ry reflects on uncertainties around the web\'s future and why JS became the default language.', 140),
(842, '@deno_land ditches C++ for Rust and optimizes binding JS to native code for speed gains over @nodejs. How much faster is it really?', 140),
(843, '.@typescript has become \"JavaScript 2.0\" says @ry. He sees a future where browsers natively support TS comments. The CoffeeScript revival is not happening.', 140),
(844, 'The lack of security in @nodejs was a huge regret for @ry. @deno_land aims to be the most secure runtime by leveraging the JS sandbox.', 140),
(845, 'Just in: Usage stats for box model, columns, aspect ratio, transitions, transforms, animations, blend modes & more from the @HTTPArchive CSS almanac! #CSS', 141),
(846, 'Transitioning left & top? No no no! Only transition transform & opacity for best performance. More CSS animation wisdom from the trends. #webdev', 141),
(847, 'Wow - median transition duration jumped to 1s. Keep it snappy folks - long animations just annoy users. #UX #webdev', 141),
(848, 'Blend modes unlocked 🔓 Gradient borders, punching out backgrounds - they open up new creative possibilities in CSS! #webdev', 141),
(849, 'CSS container queries anticipated by many devs for responsive design revolution! Usage stats today on media queries & more. #webdev', 141),
(850, 'Sprites aren\'t just for games & retro sites! Clever CSS techniques with sprite sheets & steps timing functions #CSS #webdev', 141),
(851, 'Get right into it - no more millennial pauses at the start of #shortform vids! 🎥', 142),
(852, 'Show code clearly in #shorts - strategically use zooms, animations, and positioning to highlight key parts in vertical vids!', 142),
(853, 'Avoid the low quality content trap - #shortform vids work best when they provide genuinely useful tips and explanations!', 142),
(854, 'The challenges of #shortform - conveying enough detail in 60 secs or less takes practice! YouTube shorts especially restrictive at 1 min max', 142),
(855, 'Moving to text-based #video editing like @Descript for our #dev #podcast editing. Auto transcription seems perfect for jumping to key moments!', 142),
(856, 'Repurposing vs custom #shortform content - we discuss tips for adapting existing content as well as crafting new vids from scratch', 142),
(857, 'Bugs got you down? Don\'t miss @wesbos and @stolinski chat layout crashes, flexbox woes, and more on the latest live @SyntaxFM!', 143),
(858, 'The post-Webpack era is here! Hear @wesbos and @stolinski discuss blazing fast TurboPack and more on @SyntaxFM\'s new ep!', 143),
(859, 'Want the inside scoop on @Vercel\'s big announcements? Tune into the latest supersized @SyntaxFM live stream with @wesbos and @stolinski!', 143),
(860, '.@Vercel is shaking up bundling - find out how TurboPack fits into the post-Webpack landscape on @SyntaxFM w/ @wesbos & @stolinski', 143),
(861, 'Hear @wesbos and @stolinski take audience questions and discuss site bugs, TurboPack, and more on @SyntaxFM\'s live podcast!', 143),
(862, 'Don\'t miss @SyntaxFM\'s @wesbos & @stolinski break down @Vercel\'s latest, dig into layout crashes, and take your Q\'s on the live ep!', 143),
(863, 'Get the latest tasty web dev treats on @SyntaxFM as Scott & Wes discuss potlucks, meeting IRL, SSG vs SSR & domain privacy!', 144),
(864, 'Curious about SSG vs SSR? Want tips for meeting IRL or picking domains? Get the inside scoop on the latest @SyntaxFM episode!', 144),
(865, 'Potlucks, privacy & more on the menu in this info-packed @SyntaxFM ep. Tune in for Scott & Wes\' takes on SSG vs SSR, meeting IRL & ideal domains!', 144),
(866, 'Don\'t miss the newest @SyntaxFM! Scott & Wes dish out their usual combo of insightful web dev talk + hilarious banter. Potlucks, SSG vs SSR, privacy & more!', 144),
(867, '@SyntaxFM\'s Scott & Wes are at it again! Get their takes on potlucks, meetups, SSG vs SSR & privacy in the latest tasty web dev podcast.', 144),
(868, 'SSG vs SSR got you stumped? Privacy & domains confusing? Never fear, @SyntaxFM is here! Scott & Wes break it all down in their unique style.', 144),
(869, 'Want to define your data shape once and get both validation and TypeScript types? Check out Zod schema validation!', 145),
(870, 'Zod schema validation lets you define schemas and infer TS types - no duplication required. Plus runtime validation!', 145),
(871, 'How does Zod schema validation integrate across your app and DB? Listening to the latest Syntax podcast to find out!', 145),
(872, 'Curious about how Zod schema validation compares to Joi, Yup, and other alternatives? New Syntax podcast has the details!', 145),
(873, 'The Syntax podcast dives deep into Zod schema validation. Learn how it brings inference, validation, and integration to your TS app!', 145),
(874, 'Type validation and inference without duplication? Yup, Zod schema validation delivers. Tune into Syntax podcast for the scoop!', 145),
(875, 'Hear Dr. Courtney Talinski explain the difference between ADHD and just being energetic or distracted #ADHD', 146),
(876, 'Many programmers seem to have ADHD - find out why on the latest Syntax Supper Club podcast!', 146),
(877, 'Struggling to structure your day and stay on track with projects? Dr. Courtney Talinski shares tips for managing ADHD symptoms as an adult in a tech career', 146),
(878, 'How much do ADHD symptoms need to impair your everyday life to meet diagnostic criteria? Dr. Courtney Talinski breaks it down on @SyntaxFM', 146),
(879, 'ADHD looks different in adults, especially those working office jobs - learn what symptoms to watch out for on the Syntax Supper Club podcast', 146),
(880, 'Having trouble planning and staying focused? @drtalinski shares strategies for structuring your day with ADHD on the latest Syntax Supper Club episode!', 146),
(881, 'Want to hear some spooky web dev stories? Check out the latest Syntax podcast!', 147),
(882, 'You won\'t believe the web dev nightmares covered in this Syntax episode. Profane placeholders, mass outages, accidental deletions, and more!', 147),
(883, 'Think you\'ve made bad mistakes as a developer? Listen to Syntax for some code horror stories that will make you feel better!', 147),
(884, 'Syntax is here with a chilling new episode full of terror-inducing tales from web developers. Are you brave enough to listen?', 147),
(885, 'Accidental database deletions, streaming env secrets, and deprecated code nightmares - Syntax has all the spooky stories!', 147),
(886, 'Syntax went digging through the graves of dead code to find the creepiest web dev tales around. Listen if you dare!', 147),
(887, 'Learn the REAL meaning behind schema, promises, async/await, DOM, methods vs functions, props & more on the latest @SyntaxFM!', 148),
(888, 'Ever wondered what exactly \"props\" means? We break down props and other confusing buzzwords on the newest ep of @SyntaxFM!', 148),
(889, 'Demystify concepts like async vs sync, concurrent vs parallel, and stateless HTTP requests on the latest explainer ep of @SyntaxFM!', 148),
(890, 'Buzzwords broken down in simple terms: schema, promises, DOM, methods vs functions, props & more explained on @SyntaxFM\'s newest ep!', 148),
(891, 'Stop scratching your head! We explain schema, async/await, DOM, props & other concepts in plain English on @SyntaxFM\'s latest buzzword explainer.', 148),
(892, 'Think you know promises, methods vs functions, and other web dev terms? See if we can teach you something new in @SyntaxFM\'s latest buzzword deep dive!', 148),
(893, 'We bust through the jargon and explain schema, async vs sync, DOM, props & more web dev concepts on @SyntaxFM\'s newest buzzword explainer episode!', 148),
(894, 'Learn how @SkyUK uses #GraphQL as a aggregation layer across their streaming platform and apps.', 149),
(895, 'GraphQL abstracts calling multiple legacy APIs into one easy response for @SkyUK\'s frontend apps.', 149),
(896, '.@SkyUK has a central #GraphQL team but other teams can optionally implement their own GraphQL APIs and federate.', 149),
(897, 'Find out how @SkyUK monitors and auto-scales their #GraphQL APIs to handle demand spikes during live events.', 149),
(898, '.@SkyUK built client apps with React Native and Electron, but now leverages GraphQL caching with Apollo client.', 149),
(899, 'Want to learn how a major streaming provider uses #GraphQL? Hear @SkyUK\'s @filipecodes explain on the latest @SyntaxFM.', 149),
(900, 'Can you top these cringey web dev horror stories? Losing orders, crashing apps, costing millions - these are developer nightmares!', 150),
(901, 'Think you\'ve made bad mistakes as a developer? These scary stories of accidental database deletes and losing millions in sales will make you cringe!', 150),
(902, 'You\'ll laugh and cry hearing these creepy tales of dev disasters - from crashing school exams to losing millions in ecommerce sales overnight!', 150),
(903, 'These spooky web dev stories will make you scream! Tales of accidentally unleashing 404 alert floods and deleting customer orders - yikes!', 150),
(904, 'Make sure you test properly after hearing these blood-curdling tales of web development gone wrong. Lost sales, crashed apps - developers beware!', 150),
(905, 'Web developers be warned! Don\'t end up in a nightmare like these frightening stories - double check your work to avoid unleashing chaos!', 150),
(906, 'Ever get frustrated with hydration in SPA frameworks? 💧 Quick could be the answer! It serializes state to HTML to skip client-side initialization. 🚀', 151),
(907, 'The creator of Angular is back with a new framework called Quick that eliminates hydration for faster interactivity. 🏎️ Goodbye memoization! 🔥', 151),
(908, 'Quick uses Vite, JSX, SSR, and edge functions to skip hydration and speed up your sites. The future is server-side! ⚡️', 151),
(909, 'Tired of optimizing frameworks instead of your code? Quick has a built-in optimizer so you can focus on building. 🛠️', 151),
(910, 'Quick City adds routing, data loading, and more to Quick for a full-featured framework alternative with no hydration headaches! 🌊', 151),
(911, 'More and more frameworks embracing server-side rendering fundamentals like Quick - are we on the verge of a next-gen SSR revolution? 💫', 151),
(912, 'Learn all about the exciting new #tRPC specification from creator Alex Johansen!', 152),
(913, 'Want the power of GraphQL with the simplicity of calling functions? #tRPC may be for you!', 152),
(914, 'Type safety and editor integration across client and server? Yes please! #tRPC makes it happen.', 152),
(915, '@alex_johansen explains how #tRPC brings the best of REST, GraphQL, and TypeScript together in one spec.', 152),
(916, 'Tired of defining GraphQL schemas? With #tRPC your back-end functions define the API!', 152),
(917, 'Find out why #tRPC is gaining popularity as an alternative to REST and GraphQL for type safe APIs.', 152),
(918, 'Find out what web stats show about mobile vs desktop usage trends ➡️ #WebAlmanac', 153),
(919, 'Curious how website usage compares on mobile vs desktop? Check the #WebAlmanac stats!', 153),
(920, 'Cleaning tip: Deep clean your kitchen on Fridays to setup a sparkling clean start to your week!', 153),
(921, 'Vintage appliances like a Wolf stove are built to last - with regular cleaning & maintenance #WebAlmanac', 153),
(922, 'Many people\'s entire online world is just their phone nowadays - how do they stay productive? #WebAlmanac', 153),
(923, 'How do iPad coders integrate dev tools into their workflow? The Syntax hosts discuss ➡️', 153),
(924, 'Learn about bookmarklets, the forgotten ☁️ technique you need to bring back! 👀 #JavaScript', 154),
(925, 'Missing your old bookmarklet toolbar? 🤔 Time to bring bookmarklets back into your dev workflow! 💡', 154),
(926, 'Bookmarklets let you run JavaScript on ANY page with a click! 😮 What will you build? #SyntaxFM', 154),
(927, 'Don\'t forget about bookmarklets! Run JS on any page for highlighting, styling, prompts, and more! 🎉 #JavaScript', 154),
(928, 'Bookmarklets: JavaScript magic on any page with single click! 🧙‍♂️ What will you automate on websites now? 🤔 #SyntaxFM', 154),
(929, 'Don\'t have that browser extension yet? No worries! Bookmarklet to the rescue. 🦸‍♂️ JavaScript superpower on any page! ✨', 154),
(930, 'Hear the difference between Vim and @Neovim directly from contributor @TJDeVries!', 155),
(931, 'Want to know why @Neovim added Lua integration? Learn why it benefits non-web devs too on the latest @SyntaxFM!', 155),
(932, '@SyntaxFM talks adaptive UIs with @Neovim contributor @TJDeVries - see how Neovim enables more UI flexibility than Vim.', 155),
(933, '.@TJDeVries compares Lua simplicity to JavaScript on @SyntaxFM - see why it\'s great for small scripts and configuring your editor!', 155),
(934, 'Learn how the @LunarVim Neovim distribution provides more IDE-like functionality over Vim/Neovim defaults on @SyntaxFM.', 155),
(935, 'Don\'t miss @TJDeVries explaining @Neovim, Lua integration, and differences with Vim on the latest @SyntaxFM!', 155),
(936, 'Learn why you may not need a framework and can just use the browser APIs instead! #SyntaxFM', 156),
(937, 'Using vanilla JS? The DOM API and other browser APIs are way more powerful than you think!', 156),
(938, 'Tired of frameworks? Sometimes the built-in browser APIs are all you need. #SyntaxFM', 156),
(939, 'With URLSearchParams, History API, FormData, and more, many frameworks are unnecessary. #SyntaxFM', 156),
(940, 'The browser APIs like DOM, History, FormData, Intl, and more may be all you need for many projects. #SyntaxFM', 156),
(941, 'Forget jQuery! The DOM API gives you all the power you need to work with page elements. #SyntaxFM', 156),
(942, 'Learn what common #JavaScript terms like \"syntactic sugar\" and \"first class functions\" really mean in this episode!', 157),
(943, 'Ever wondered what people mean when they say \"Everything is an object\" in JS? We explain common JS jargon in plain English!', 157),
(944, 'Getting tripped up by JS buzzwords like \"declarative\" and \"imperative\"? We demystify them in this episode.', 157),
(945, 'JS jargon explained in plain English! Learn what \"syntactic sugar\" and \"first class functions\" actually mean.', 157),
(946, 'Demystifying JS jargon! We explain \"object literals\", \"first class functions\", \"syntactic sugar\" and more in plain English.', 157),
(947, 'Stop nodding along when people use JS jargon you don\'t understand! We explain terms like \"syntactic sugar\" in plain English.', 157),
(948, 'The incredible origin story of @prisma - from @graphcool to Prisma 1 to Prisma today. #webdev', 158),
(949, 'Want to understand how @prisma evolved from a GraphQL backend service into a general purpose ORM? We\'ve got you covered on the latest Syntax Supper Club!', 158),
(950, 'We finally get to the bottom of @prisma\'s relationship with GraphQL. Hint: it\'s an ORM now! Tune in to the latest Syntax Supper Club', 158),
(951, '.@nwcsNicholas takes us through @prisma\'s 6 year journey from Graphcool to Prisma 1 to Prisma today #javascript #typescript #webdev', 158),
(952, 'The @syntaxfm supper club is serving up piping hot takes on @prisma\'s evolution from Graphcool to Prisma 1 to Prisma today #webdev', 158),
(953, 'If you still think @prisma is a GraphQL-only tool, you need to listen to the latest Syntax Supper Club! #webdev #javascript #typescript', 158),
(954, 'Learn why using emoji for CSS grid areas might not be the best idea 😕', 159),
(955, 'Get tips on creating reliable timelines even when you don\'t have all the project details nailed down 📅', 159),
(956, 'Hear Scott\'s funny story about his neighbor schmoozing with Ciara without realizing who she was 😄', 159),
(957, 'Wes wants to tailgate and go to a Bills game someday, but Canada doesn\'t have tailgating culture 🏈', 159),
(958, 'Scott overindulged on drinks at the Broncos game and paid the price the next day 🍻😵‍💫', 159),
(959, 'Stuck on the last 10% of your project? Here are 9 tips from @SyntaxFM to push through the blahs and ship it!', 160),
(960, 'Is your project 90% done but you\'ve lost all motivation? Get your mojo back with these 9 productivity hacks from @SyntaxFM!', 160),
(961, 'Getting past project blahs is tough. Here are 9 actionable tips from @SyntaxFM to defeat boredom and finally ship your project!', 160),
(962, 'Feeling unmotivated on your project? Transform blah into DONE with these 9 productivity boosters recommended by @SyntaxFM!', 160),
(963, 'In a project slump? Reignite your spark and crush the finish line with these 9 battle-tested tactics from @SyntaxFM!', 160),
(964, 'The last 10% of a project is a slog. Rev up your engines and ship it with these 9 motivation maxims courtesy of @SyntaxFM!', 160),
(965, 'Coming up: @bdougie explains how @OpenSauced helps newbies contribute to #opensource projects.', 161),
(966, 'Ever wondered how @github\'s GraphQL API came to be? @bdougie shares its origin story.', 161),
(967, 'Curious about live streaming your dev work? @bdougie describes how he built a community around @OpenSauced.', 161),
(968, 'How can we make #opensource more approachable and diverse? @bdougie is on a mission to find out with @OpenSauced.', 161),
(969, '.@bdougie started @OpenSauced to help people learn how to contribute to open source, like he did early in his career.', 161),
(970, '.@bdougie\'s goal with @OpenSauced is to change open source and make it more accessible to everyone.', 161),
(971, 'Can you handle blood curdling screams while you work? Neither could @WesBos, so he built a soundproof office basement himself!', 162),
(972, 'Think soundproofing is as easy as foam tiles? Not even close! Hear the isolation science behind @WesBos\' new silent sanctuary.', 162),
(973, 'Ever wonder what contractors charge for small jobs these days? @WesBos found out the hard way building his new office.', 162),
(974, 'Teens + drop ceilings = no more ceilings, per @WesBos. Just one reason he soundproofed his new office himself.', 162),
(975, 'What would your dream office look like? @WesBos gives us the down low on his goals for maximum focus and comfort.', 162),
(976, 'The future is looking bright with new HTML frameworks like @EnhanceJS that embrace web standards! Check out our latest episode to learn more.', 163),
(977, 'Want to write lightweight components and ditch the JSX? @EnhanceJS uses pure functions and HTML template literals. Listen now!', 163),
(978, 'If you miss the simplicity of PHP, @EnhanceJS brings that ease of use to modern web dev. File-based routing, SSR, and more!', 163),
(979, 'Web standards FTW! The new @EnhanceJS framework shows how HTML, CSS and vanilla JS can build robust apps. We dissect it on the podcast.', 163),
(980, 'Forget about React and Vue. @EnhanceJS brings back the joy of web development with its HTML-first approach. Listen up devs!', 163),
(981, 'Hear the backstory on @ArcInternet and their mission to reinvent browsers for the 2020s. Some fascinating insights on building browsers!', 164),
(982, 'Tired of the same old browser UX? @ArcInternet is rethinking tabs, shortcuts, themes and more. Excited to see where they take it!', 164),
(983, '@ArcInternet realized browsers are lacking innovation in UX. Taking cues from Slack and Notion, they\'re reimagining workflows.', 164),
(984, 'Building browsers is complex! @ArcInternet iterated fast on prototypes to reinvent browser UX. Swift UI and focus on delight.', 164),
(985, 'Auto-archiving old tabs is genius. @ArcInternet solves tab overload through great product thinking.', 164),
(986, 'How do browsers make $? @ArcInternet plans subscriptions to retain user focus, avoiding search reliance like Chrome and Firefox.', 164),
(987, '.@ArcInternet is one of the most gorgeous apps out there. Customizable themes, amazing design. Browser joy!', 164),
(988, 'Learn how @SintacsFM and @WestBoss get things done with GTD systems and task prioritization!', 165),
(989, 'Want to boost productivity? Check out the latest @SintacsFM on techniques like Pomodoro and assigning points to tasks.', 165),
(990, 'Struggling to focus? @SintacsFM shares tips for managing tasks, scheduling creative time, and avoiding rabbit holes.', 165),
(991, 'Get inspired to overhaul your productivity with @SintacsFM\'s latest on GTD systems, Pomodoro, and keeping a log of ideas.', 165),
(992, 'Prioritize your frogs 🐸 with @SintacsFM\'s advice on sorting tasks, Productivity books, and making time for exploration.', 165),
(993, 'Time to level up your to-do list! @SintacsFM discusses tactics like the Getting Things Done system and Pomodoro technique.', 165),
(994, 'Just listened to the latest @SyntaxFM on AI coding tools like GitHub Copilot. So cool yet so scary!', 166),
(995, 'GitHub Copilot seems amazing but has some ethical concerns around use of open source code. Thoughts?', 166),
(996, 'Would you pay $10/month for GitHub Copilot? @SyntaxFM weighs in on whether it\'s worth the cost for developers.', 166),
(997, 'AI coding tools like GitHub Copilot are getting crazy good but could put some devs out of work. Double-edged sword?', 166),
(998, 'Security and privacy are legit worries with AI tools like Copilot that record your code. But so convenient!', 166),
(999, 'Alternatives like TabNine and Amazon CodeWhisperer give GitHub Copilot some competition in AI coding tools.', 166),
(1000, 'Learn how @Raycast built a native Mac productivity app with @reactjs and SQLite from scratch! #productivity #developers ', 167),
(1001, 'Hear how Raycast provides a great end-to-end dev experience for their extension API! #raycast #extensions #javascript', 167),
(1002, 'Find out how Raycast leverages your local SQLite database for lightning fast storage and retrieval! #sqlite #productivity', 167),
(1003, 'Discover where Raycast finds inspiration for new features - often from developers\' own workflows! #productivity #raysast', 167);

INSERT INTO `AiTweet` (`id`, `content`, `showNote`) VALUES
(1004, 'Raycast eats productivity apps for breakfast! Hear how they built a native app with a React API from the ground up! #raycast #macos #reactjs', 167),
(1005, 'Want to learn how to build an API from scratch? The latest episode of @SyntaxFM has everything you need to know - don\'t miss it!', 168),
(1006, 'Curious about REST vs GraphQL? How to handle auth & permissions? What about caching? Get the full low-down on building APIs in the new ep of @SyntaxFM!', 168),
(1007, 'If you need to build an API but don\'t know where to start, @SyntaxFM has you covered in their latest ep - a must listen for any web dev!', 168),
(1008, 'New @SyntaxFM ep unpacks everything you need to know about crafting a robust API - database, server, auth, caching, client, and more!', 168),
(1009, 'Need a comprehensive 101 on building APIs? The new @SyntaxFM ep delivers - covering REST, GraphQL, auth, caching, databases, and beyond!', 168),
(1010, 'Don\'t know the first thing about APIs? Never built one before? Not to worry - the new @SyntaxFM episode starts from square one and covers it all!', 168),
(1011, 'Learn how to use @postcss plugins like nesting, custom media queries, and color functions to write next-gen CSS today!', 169),
(1012, 'Want to use future CSS features like custom properties and color functions now? @postcss makes it possible!', 169),
(1013, 'The @postcss plugin ecosystem enables you to use future CSS features today. Check out the latest plugins on the new Syntax podcast!', 169),
(1014, 'Get hip to writing tomorrow\'s CSS today with @postcss plugins for nesting, custom media queries, and more on the Syntax podcast!', 169),
(1015, 'If you ❤️ CSS, you need to listen to the latest Syntax podcast on using @postcss to unlock future CSS features today!', 169),
(1016, 'Want to level up your CSS game? Learn how @postcss plugins enable you to use future CSS syntax on the new Syntax podcast!', 169),
(1017, 'Hear @ThePrimeagen explain where his epic handle comes from and his live coding stream style #supperclub', 170),
(1018, 'Remember playing Tony Hawk Pro Skater as a kid? It was a key part of many childhoods! #supperclub', 170),
(1019, 'Learn about the different types of coding streamers and why people tune in to watch live programming #supperclub', 170),
(1020, '@ThePrimeagen brings fun memes and education to his popular Twitch channel. Get his take! #supperclub', 170),
(1021, '.@syntacsfm host @ThePrimeagen to talk live coding and skateboarding #supperclub', 170),
(1022, 'Don\'t miss the story of @ThePrimeagen dropping in on a skateboard for the first time in years! #supperclub', 170),
(1023, 'This ep brought to you by @hasurahq for auto-generating GraphQL APIs instantly. #supperclub', 170),
(1024, 'Want to know how to measure the performance of different ways to create objects in JavaScript? We\'ve got the answer!', 171),
(1025, 'Pro tip: use the TS Quick Fixes extension in VSCode to easily scaffold out TypeScript types.', 171),
(1026, 'Debating standing desks? Scott and Wes weigh in with their experience on the latest Syntax potluck episode.', 171),
(1027, 'Find out Scott and Wes\' favorite performance testing tool for JavaScript on the latest Syntax podcast episode.', 171),
(1028, 'Curious why VSCode only shows type names sometimes when you hover over them? We explain on the Syntax podcast.', 171),
(1029, 'Get tips on optimizing JavaScript performance (and when not to optimize) on this week\'s potluck episode of Syntax!', 171),
(1030, 'Deno adds NPM support - now we can use existing Node packages! But with faster speeds and built-in TypeScript!', 172),
(1031, 'Node better watch out! Deno now supports NPM packages and has the fastest JS web server ever!', 172),
(1032, 'Deno aims to be the fastest JS runtime - with NPM support and TypeScript it may leave Node in the dust!', 172),
(1033, 'Deno is coming for Node\'s crown 👑 With NPM compatibility and a faster web server, Deno wants to be JS king!', 172),
(1034, 'The JS runtime wars heat up! Deno now supports NPM and has big speed improvements - advantage Deno?', 172),
(1035, 'Hear the amazing journey behind @stevesruiz\'s viral React drawing canvas #TLDraw!', 173),
(1036, 'Think you need Canvas for a drawing app? @stevesruiz explains how #TLDraw uses SVG & DOM for easier customizations.', 173),
(1037, 'Drawing apps made easy! Learn how @stevesruiz built the impressive #TLDraw in just a few months.', 173),
(1038, '.@stevesruiz took his variable width ink algorithms straight to an open source React canvas with #TLDraw - check it out!', 173),
(1039, 'Frustrated by limitations of Canvas? @stevesruiz shares how #TLDraw avoids them with SVG and DOM elements instead!', 173),
(1040, 'Interactive drawing apps don\'t have to be hard. Hear how @stevesruiz built the viral #TLDraw canvas with React and SVG.', 173),
(1041, 'Back to school means a new chapter for @ScottTolinski\'s son and @wesbos\'s home office! 📚', 174),
(1042, 'We\'re talking soundproofing panels and @wesbos\'s echoey new office on the latest @SyntaxFM!', 174),
(1043, 'Want to make your office an audio oasis? @ScottTolinski has pro tips for DIY soundproofing on @SyntaxFM\'s latest episode.', 174),
(1044, 'Keep the audio clean and the walls design-friendly with @ScottTolinski\'s advice for home studio soundproofing on @SyntaxFM.', 174),
(1045, 'Portfolio reviews AND kindergarten day 1? Don\'t miss the latest feel-good episode of @SyntaxFM with @wesbos and @ScottTolinski!', 174),
(1046, 'Grab your headphones and hear @wesbos and @ScottTolinski nerd out over sound panels on @SyntaxFM\'s newest episode - out now!', 174),
(1047, 'Get ready to rumble with margins, padding, flexbox, and grid in this ultimate CSS layout smackdown! 🥊 Who will be crowned champion? #layout #webdev', 175),
(1048, 'Do you have margin madness in your CSS? 🤪 We\'re breaking down solutions from padding only to spacer divs to flex and grid systems. Find your layout zen! 🧘‍♀️ #css #margins ', 175),
(1049, 'Collapsing margins got you down? We\'ll pick them up and shake out solutions like padding only, bottom margin, flexbox, grid, and more! 🏋️‍♀️ #css #webdev', 175),
(1050, 'Is your site spacing OUT? 🚀 We launch into orbit to explore fixes for margin and layout quirks with flexbox vs grid, padding vs margins, and trusty spacer divs! 🛰️ #webdev #css', 175),
(1051, 'Pitter patter, let\'s get at \'er! 👷 We build the perfect margin and layout with padding, grid, flexbox, and more. New spacers coming at ya! #syntaxfm #webdev', 175),
(1052, 'Margins melting down? We\'ve got you covered with pro padding strats, grid and flexbox experiments, and more! Space race to the top! 🏎️ #css #webdev', 175),
(1053, 'Want a self-hosted Firebase alternative? @BrandonTRoberts explains how @AppRight provides the database, auth, storage and more you need for web and mobile apps!', 176),
(1054, 'Tired of rolling your own backend? @AppRight is like a self-hosted Firebase to get your next project off the ground quickly.', 176),
(1055, 'Need realtime APIs in your app? @BrandonTRoberts shows how @AppRight provides WebSockets and other realtime functionality out of the box.', 176),
(1056, '.@BrandonTRoberts gives us the lowdown on @AppRight, the open source self-hosted backend for your next project. All the APIs and infrastructure you need, in a box!', 176),
(1057, 'Want to write serverless functions without the hassle? @BrandonTRoberts explains how @AppRight Cloud Functions work for Dart, Node, Python and more.', 176),
(1058, 'For your next mobile or web project, check out @AppRight. @BrandonTRoberts explains how it provides self-hosted backend infrastructure just like Firebase.', 176),
(1059, 'Want to understand threads, concurrency and parallelism in JS? This ep has you covered!', 177),
(1060, 'Ever dealt with the stress of getting your kid into a good school? Scott and Wes commiserate.', 177),
(1061, 'Green screening webcams got you blocked on the main thread? Web workers to the rescue!', 177),
(1062, 'Don\'t know the difference between concurrent and parallel? We break it down with highways and sandwiches.', 177),
(1063, 'JS only has one thread, but web workers let you sneak into the fast lane to avoid UI slowdowns.', 177),
(1064, 'Async/await don\'t block the main thread, but other intensive work just might. Web workers can help!', 177),
(1065, 'The @syntaxfm podcast turns 500! Tune in as @wesbos and @stolinski look back at favorite moments, top episodes, and answer YOUR questions! #syntax500', 178),
(1066, '500 episodes in and @syntaxfm is still going strong! Celebrate the milestone with @wesbos and @stolinski as they recap highlights. Thanks for listening!', 178),
(1067, 'What were your favorite @syntaxfm podcast moments? Share your top episodes as @wesbos and @stolinski look back on 500 shows!', 178),
(1068, 'After 500 shows, the @syntaxfm podcast is still a highlight of my week. Thank you @wesbos and @stolinski for the journey so far!', 178),
(1069, '500 episodes and 20 million downloads later, I\'m still loving @syntaxfm. Congrats @wesbos and @stolinski on an amazing milestone!', 178),
(1070, 'Get an intro to @sveltejs from creator @Rich_Harris! Learn how it improves dev experience without compromising user experience. #webdev', 179),
(1071, 'Hear @Rich_Harris explain the inspiration behind Svelte\'s templating language and its similarities to Handlebars. #webdev #javascript', 179),
(1072, '.@sveltejs doesn\'t need a virtual DOM for performance gains, explains creator @Rich_Harris. Learn why. #javascript #webdev', 179),
(1073, 'Constraints lead to creativity says @Rich_Harris on why @sveltejs provides structure. How frameworks can aid creativity. #webdev #javascript', 179),
(1074, '@sveltejs allows computers to handle performance without developer workarounds says creator @Rich_Harris. The benefit over React. #javascript', 179),
(1075, 'What\'s @Rich_Harris\'s favorite @sveltejs feature? Hint: It\'s about developer experience. Hear him explain. #javascript #webdev', 179),
(1076, 'Want to know the pros and cons of agency vs corporate vs startup web dev jobs? @scotttalensky and @wesbos give the inside scoop!', 180),
(1077, 'Thinking of going freelance or working at a startup? @scotttalensky & @wesbos compare the perks & downsides of every web dev job type!', 180),
(1078, 'Are all web dev jobs created equal? @scotttalensky & @wesbos explore the ups and downs of agencies, startups, corporate gigs & more!', 180),
(1079, 'Dreaming of ditching your dev job? @scotttalensky & @wesbos break down the pros & cons of agencies, startups, freelancing & more first!', 180),
(1080, 'Which web dev job is right for YOU? Get the inside scoop from @scotttalensky & @wesbos on agencies, startups, freelancing & more!', 180),
(1081, 'Want the scoop on startup vs corporate web dev gigs? @scotttalensky & @wesbos lay out every perk & pitfall in the latest ep!', 180),
(1082, 'Before you switch web dev jobs, learn from @scotttalensky & @wesbos about the pros & cons of every job type out there!', 180),
(1083, 'Brand new CSS proposals are coming down the pipe - get excited for if/else, masonry grids, caret styling, nesting, env vars, and improved media queries!', 181),
(1084, 'Big changes coming to CSS soon with new proposals for if/else, masonry layouts, caret styling, nesting, env vars, and range syntax for media queries - the future is bright!', 181),
(1085, 'If/else is coming to CSS along with masonry grids, caret styling, nesting, env vars, and awesome new media query functionality - CSS is evolving quickly!', 181),
(1086, 'Get ready for some awesome new CSS capabilities like if/else, masonry grids, caret styling, nesting, env vars, and new media query syntax - the future looks bright!', 181),
(1087, 'CSS if/else, masonry layouts, caret styling, nesting, env vars, and new media query syntax show how rapidly CSS is improving - lots of great stuff ahead!', 181),
(1088, 'Brand new CSS proposals bring functionality like if/else, masonry grids, caret styling, nesting, env vars, and improved media queries - CSS keeps getting better!', 181),
(1089, 'Shopifyengineering built Hydrogen in React using experimental features like Server Components! 😱 #JavaScript', 182),
(1090, 'Hydrogen lets you add ecommerce superpowers 💪 to any existing React app. Game changer from @ShopifyEng!', 182),
(1091, 'The future is BRIGHT 🌞 for headless ecommerce with Hydrogen. Shopify is even on the JS standards committee!', 182),
(1092, '.@ShopifyEng took a smart bet on React Server Components for Hydrogen. Will custom headless ecomm be the killer app? 💸', 182),
(1093, 'More reusable components on the way thanks to Hydrogen\'s server side data fetching approach. Excited to see the ecosystem grow! 🌱', 182),
(1094, 'Kudos to @ShopifyEng for making Hydrogen work across Node, Cloudflare Workers, Deno and more. 👏 Adapters FTW!', 182),
(1095, 'Learn when and how to cache slow #APIs for better performance!', 183),
(1096, 'Generating PDFs from HTML? Check out these options like Puppeteer and DOM-to-PDF #webdev', 183),
(1097, 'Is it too early to learn SvelteKit? Find out what\'s changing before v1!', 183),
(1098, 'Should you use Stripe or PayPal? Get the lowdown on payment processing #ecommerce', 183),
(1099, 'Get the scoop on caching, PDF generation, SvelteKit changes, Stripe vs PayPal, and more in our potluck episode!', 183),
(1100, 'Curious about caching, PDFs, payments, and SvelteKit? We\'ve got you covered in ep #495!', 183),
(1101, 'Want the DL on API caching, PDF generation, Stripe vs PayPal, and learning SvelteKit? Get all the dev news on the latest Syntax podcast!', 183),
(1102, 'Just the big 3 - Chromium, Gecko, WebKit - all you need these days! #browsers', 184),
(1103, 'New browser Arc looks amazing! Reinventing tabbing and more. @Arcbrowser', 184),
(1104, 'Most mobile browsers just skins on existing engines. Support the engine not the wrapper. #webdev', 184),
(1105, 'Browsers have come a long way since the days of 5 default ringtones and MIDI tones 🎶', 184),
(1106, 'If your audience uses it, test it! Otherwise Chromium, Gecko, WebKit will cover you. #browsers', 184),
(1107, 'Android you can choose engine. iOS/iPadOS still stuck on WebKit only. C\'mon Apple open it up! 🍎', 184),
(1108, 'Hear how @leeerob built the @syntaxfm site on @nextjs years ago! 👷', 185),
(1109, 'The @syntaxfm site had a perf issue loading ALL show notes on every page! 😱', 185),
(1110, 'What is React Suspense? Learn how it improves @nextjs app perf from @leeerob! ⚛️', 185),
(1111, '.@leeerob explains how selective hydration in React 18 improves performance! 🚀', 185),
(1112, 'Next.js makes React hydration easy, says @leeerob! 💧', 185),
(1113, 'Deferring JavaScript with React Suspense improves interactivity says @leeerob! ⏱', 185),
(1114, '@wesbos shares how hiding a loader div speeds up the Rogers website! 😆', 185),
(1115, 'Ever get frustrated with quirky web dev APIs? @shoptalkshow vents about the JS, TS, React things they wish just worked better - no fuss!', 186),
(1116, 'Tired of wonky date inputs and janky animations? Check out the #webdev wishlist from @shoptalkshow', 186),
(1117, '@shoptalkshow shares their dream web dev APIs - smooth drag and drop, no dependency arrays, and more. So many quirks we could live without!', 186),
(1118, 'What web dev APIs grind your gears? @shoptalkshow shares their wishlist of things they want to \'just work\' - native auth, 1 effect hook, and more!', 186),
(1119, 'Want better date pickers and auth right in the browser? The @shoptalkshow crew shares their wishlist for web dev APIs done right.', 186),
(1120, 'Don\'t you wish you could get native data binding and styled date inputs without any fuss? @shoptalkshow vents about their web dev wishlist.', 186),
(1121, 'Learn new #JavaScript skills by building silly stuff that makes you smile! It\'s all about that #TTFS, time to first smile.', 187),
(1122, 'Don\'t let your #coding skills stagnate! Reignite your passion by building dumb stuff that scratches your itches.', 187),
(1123, 'Developers, never lose your spark! Stay excited by exploring new tech with fun, meaningless side projects.', 187),
(1124, 'Want to learn #webdev skills? Build a virtual fart app! It\'s dumb but will teach you a ton about audio manipulation.', 187),
(1125, 'Feeling uninspired as a coder? Take Wes\' advice - scrape clearance sites or make ridiculous fart apps! #TTFS', 187),
(1126, 'Rekindle your love for coding with exploratory projects serving no purpose. It\'s about the journey, not the destination!', 187),
(1127, 'Meet @awesomemotive founder @saeedmb and learn how he leveraged blogging into a suite of web tools used by 20M sites! #WordPress', 188),
(1128, 'Longevity pays off. @saeedmb shares how over a decade of #WordPress blogging led to a thriving SaaS business. Never too late to start!', 188),
(1129, 'With @WordPress growth, there\'s always something new to write about says @saeedmb. Keep educating as the platform evolves.', 188),
(1130, 'Keys to @awesomemotive\'s content strategy: Dedicated content teams for each brand producing helpful tutorials.', 188),
(1131, '@saeedmb started solving his own problems, building tools he needed like @OptinMonster. Now serves 4M+ users!', 188),
(1132, 'User surveys drive new @awesomemotive product development and strategic acquisitions like @allinoneseopack.', 188),
(1133, 'Strong marketing skills key for @saeedmb - no prior business experience, but able to identify viral patterns and monetize #socialmedia.', 188),
(1134, 'Code sharing via GitHub between @awesomemotive brands, but focus is on solving user needs not tech stack. Valuable perspective!', 188),
(1135, 'With 274k YouTube subscribers, @WPBeginner leverages video both for acquisition and their site. But... [cont]', 188),
(1136, 'Having trouble starting that old @nodejs project? We\'ve got pro tips for compatibility across Node versions!', 189),
(1137, 'Don\'t let @npmjs errors stop you from working on old projects. Check out the latest Syntax podcast on resolving those issues.', 189),
(1138, 'Ever specify Node versions in package.json? It\'s a great way to ensure compatibility for your @nodejs projects.', 189),
(1139, 'Working with @gatsbyjs? We\'ve got solutions for those Node version issues on the latest Syntax podcast.', 189),
(1140, '.@npmjs errors got you down? We discuss fixes like reinstalling dependencies and tweaking Node versions on the Syntax podcast.', 189),
(1141, 'Learn all about Bun, the new lightning fast #JavaScript runtime! It\'s got built-in bundling, transpiling, and more! #webdev', 190),
(1142, 'Want to get up and running with Bun, the speedy new #JS runtime? Check out our breakdown of what it is and how to use it! #webdev', 190),
(1143, 'If you build for the web, keep an eye on Bun! It aims to be a faster drop-in replacement for Node. #JavaScript', 190),
(1144, 'Bun wants to do it all - bundle, transpile, server, and more! Learn about this new JS runtime on our latest episode. #webdev', 190),
(1145, 'Node got you down? Try out Bun for faster installs, built-in tools, and more! #JavaScript', 190),
(1146, 'We break down Bun, the new JS runtime aimed at blazing fast performance. It\'s one to watch in the JS ecosystem! #webdev', 190),
(1147, 'Learn all about graph databases and how to use them for web dev with @Neo4j from @adambcowley on the @SyntaxFM podcast!', 191),
(1148, 'Heard of Neo4j but not sure what graph databases are all about? Let @adambcowley explain it all on @SyntaxFM!', 191),
(1149, 'Graph databases like Neo4j are great for connected data - learn how they work on @SyntaxFM with @adambcowley!', 191),
(1150, '@adambcowley explains how to use Neo4j\'s Cypher querying language on the latest @SyntaxFM podcast episode.', 191),
(1151, 'Find out how graph databases like Neo4j handle schema, nodes, relationships, and more on the new @SyntaxFM podcast!', 191),
(1152, '@Neo4j\'s @adambcowley discusses the difference between Neo4j and AuraDB on @SyntaxFM\'s latest graph database deep dive.', 191),
(1153, 'Want to start a heated dev debate? Just bring up tabs vs spaces and semicolons! 😆 #SyntaxFM', 192),
(1154, 'Drooling over this passionate debate on snake_case vs camelCase with @wesbos and @stolinski! #SyntaxFM', 192),
(1155, 'Functional programming FTW says @stolinski and @wesbos! Do you agree? #SyntaxFM', 192),
(1156, 'Have you picked a side in the great semicolon schism? @wesbos and @stolinski duke it out! #SyntaxFM', 192),
(1157, 'For loop pain is real according to @stolinski and @wesbos - have array methods saved you too? 🙌 #SyntaxFM', 192),
(1158, 'Can we take a moment to appreciate the wonderfully whimsical naming cases like screaming snake and train case? #SyntaxFM', 192),
(1159, 'Want to improve your interview skills? Check out @SyntaxFM\'s tasty treat of web dev interview questions!', 193),
(1160, 'Hear @WesBos and @stolinski ask each other commonly asked web dev interview questions on the latest Stumped episode of @SyntaxFM!', 193),
(1161, 'What\'s the difference between a parameter and an argument? Find out on the latest ep of @SyntaxFM\'s Stumped!', 193),
(1162, 'Learn what a closure is, CSS specificity, prototypal inheritance and more web dev topics on @SyntaxFM\'s Stumped episode!', 193),
(1163, 'Get your web dev interview skills sharp by listening to @WesBos and @stolinski play Stumped on @SyntaxFM!', 193),
(1164, 'Want a fun way to prep for your next web dev interview? Don\'t miss the latest ep of Stumped on @SyntaxFM!', 193),
(1165, 'Hear how Liberty Mutual went from mainframes to 70,000 serverless functions to support 5000 developers! 🚀', 194),
(1166, 'Liberty Mutual aligns serverless with their \'only pay for what you need\' motto - how cost + autoscaling benefits them.', 194),
(1167, 'AWS Serverless Hero Christy Perreault dishes on supporting 5000 developers with 70K functions at Liberty Mutual.', 194),
(1168, 'Christy Perreault shares how Liberty Mutual lets devs use preferred languages like TypeScript and Python with serverless.', 194),
(1169, 'Get Christy\'s recommendations on using AWS CDK for local serverless development at enterprise scale.', 194),
(1170, 'Learn all about those pesky npm peer dependencies and when you actually need them in the latestSyntax podcast.', 195),
(1171, 'Having NAS networking issues? Check out the latest Syntax podcast to hear how @ScottTolinksi got his NAS working externally.', 195),
(1172, 'Curious about @home_assistant? Hear @ScottTolinski\'s initial impressions after setting it up on a Pi in the new Syntax podcast.', 195),
(1173, 'If you\'ve struggled with npm peer deps before, @wesbos has some pro tips that could save you future headaches.', 195),
(1174, 'The latest Syntax podcast dives deep into peer dependencies - when are they helpful vs just a total pain? Tune in to find out.', 195),
(1175, 'Learn how clamping & interpolating numbers can help you take control of values and create awesome animations! 📈', 196),
(1176, 'Didn\'t know about d3-interpolate? It\'s a tiny but super useful lib for interpolating numbers, colors, dates, and more! 🎨📆🔢', 196),
(1177, 'Need to split a numeric range into even steps? Quantize to the rescue! #JavaScript', 196),
(1178, 'Clamping locks values within min and max, really handy for animations and fluid typography! 🔒', 196),
(1179, 'Number manipulation with clamping, interpolation & quantizing - bend values to your will! 💪', 196),
(1180, 'Hear @pokeyrule explain how he codes by voice after getting RSI from typing!', 197),
(1181, 'Learn how @pokeyrule uses Talon voice coding to avoid repetitive strain injury when programming.', 197),
(1182, 'Don\'t miss Pokey\'s live voice coding demo explaining his process for writing code by voice on @SyntaxFM!', 197),
(1183, '@pokeyrule walks through how he crafted custom grammars to make coding by voice efficient using Talon on the latest Syntax podcast.', 197),
(1184, 'If you\'ve ever gotten RSI from coding, @pokeyrule explains how he transitioned to writing code completely by voice on @SyntaxFM.', 197),
(1185, '@pokeyrule details his journey from management back to programming using voice instead of keyboard to avoid RSI flare ups.', 197),
(1186, 'Learn how @wesbos has been #speaking at web dev conferences for 10 YEARS! Hear his tips on getting started. #webdev', 198),
(1187, 'Speaking at dev conferences is a LEGITIMIZER says @wesbos - establishes you as an expert! #speaking', 198),
(1188, 'Nothing beats traveling for FREE! @stolinski & @wesbos share how #speaking at conferences = #freetravel', 198),
(1189, 'Want to improve your #publicspeaking skills? Start by submitting talk proposals to dev conf CFPs! @stolinski @wesbos #speakingtips', 198),
(1190, 'Conference speaking leads to JOBS says @wesbos! Meet your next employer over kombucha 🍵 at a conference! #speaking #jobs', 198),
(1191, 'Connections connections connections! Meet titans of the industry @ conferences says @wesbos #connections #conferences #speaking', 198),
(1192, '#Speaking at conferences boosts your career in many ways besides money 💰 - @stolinski & @wesbos share tips #webdev', 198),
(1193, '🚨 Coming soon to CSS: Color functions that will change how you work with color! 🎨', 199),
(1194, 'Want to programmatically lighten/darken a color in CSS? It\'s coming! 🤯', 199),
(1195, 'CSS color functions will help fix color banding in gradients, improve accessibility contrast, and more! 🌈', 199),
(1196, 'No more opaque hex codes - CSS color functions let you easily set opacity on any color format! 🔥', 199),
(1197, 'CSS color functions enable color mixing, finding color contrasts, modifying hues, and tons more! The future is bright! 🌞', 199),
(1198, 'Get ready to level up your color skills when CSS color functions land! We break it down in the latest episode. 🎙️', 199),
(1199, 'Learn why #DX matters from @swyx ��', 200),
(1200, 'Hot take from @swyx - for sites use #Svelte, for apps use #React. Agree?', 200),
(1201, 'How @Reactjs could improve DX per @swyx', 200),
(1202, 'Hear how @Netlify structures its #DevRel team for better DX impact', 200),
(1203, '@swyx shares his learnings on learning in public - give it a try!', 200),
(1204, '\"#DX is about enhancing creativity through better productivity\" - wise words from @swyx', 200),
(1205, 'Want to communicate better at work and in life? Check out these 7 easy communication tips to level up your skills!', 201),
(1206, 'Struggling to get responses to your emails? Try numbering your questions. It makes it way easier for people to answer!', 201),
(1207, 'Pro tip: Bolding the key part of your email helps people zero in on what you\'re asking. So simple but so effective!', 201),
(1208, 'Emails that are a giant block of text are an instant turn off. Break it up with paragraphs!', 201),
(1209, 'Making a big ask of someone? Be sure to recognize it and give them an easy out. Takes the pressure off and gets better results.', 201),
(1210, 'Writing overly terse emails? Add a touch of friendliness. Goes a long way in setting a nice tone!', 201),
(1211, 'CC\'ing everyone under the sun? Mind those CCs. Only include people who really need to be looped in.', 201),
(1212, 'Learn about the new browser page transitions API proposal for animated page transitions on the web!', 202),
(1213, 'Native-like animations between web pages? Find out about the upcoming browser page transitions API.', 202),
(1214, ' Smoother page changes coming to the web! Excited for the new browser page transitions API.', 202),
(1215, 'Web pages set to get all jazzy with new browser page transitions API - learn about it on @SyntaxFM', 202),
(1216, 'Get the scoop on the upcoming browser page transitions API for animated page changes on @SyntaxFM', 202),
(1217, 'Will the new browser page transitions API finally bridge gap between native & web animations? Tune in to @SyntaxFM to find out!', 202),
(1218, 'Hear how @timleland built a weather #extension in 2015 that kickstarted his interest in browser extensions', 203),
(1219, 'The popular weather extension uses the @DarkSkyApp API which required a paid plan due to large number of users', 203),
(1220, '@timleland had his extension account hacked multiple times by bad actors trying to take over', 203),
(1221, 'The weather extension grew from a few hundred to 10000 users after a share on @lifehacker', 203),
(1222, 'After Google shut down their URL shortener, @timleland built his own browser extension for URL shortening', 203),
(1223, '@timleland purchased the domain t.ly for around $50k to use for his own URL shortening service', 203),
(1224, 'The t.ly URL shortener offers paid plans for advanced features like custom domains', 203),
(1225, 'When first launched, t.ly was abused by malicious actors until Tim implemented protections', 203),
(1226, 'Want to take your home automation to the next level? @syntaxfm looks at protocols like Zigbee and Zwave, integrations, and how to get full family buy-in!', 204),
(1227, 'Don\'t settle for a closed home automation system. Learn how @syntaxfm tweaks things with Homebridge for ultimate customization and harmony.', 204),
(1228, 'Frustrated by analog problems in your home? @syntaxfm explains how home automation can fix those little annoyances for good.', 204),
(1229, 'Home automation leading to family arguments? Get pro tips from @syntaxfm on how to gain full family buy-in to your automated home.', 204),
(1230, 'The new viewport units lvw and dvh will save us from frustrating height 100% fails on mobile! #CSS', 205),
(1231, 'Wes complains about the shifting URL bar on mobile browsers. Scott introduces the new viewport units to solve this! #webdev', 205),
(1232, 'No more LOL CSS moments with height 100% on mobile! The new viewport units handle the shifting browser UI. #webdev', 205),
(1233, 'The new viewport units provide more control over dimensions as UI elements slide in/out on mobile. Genius! 💡 #CSS', 205),
(1234, 'Apple trying to prevent keyboard abuse led to hacky solutions like slightly visible inputs. Devs will find a way! #webdev', 205),
(1235, 'More viewport units than we know what to do with! Should we just replace vh and vw with dvh and dvw now? #CSS', 205),
(1236, 'Hear all about @Netlify\'s edge functions and how they work with Deno from Eduardo Bouças. #serverless', 206),
(1237, 'Edge functions run closer to users for lower latency. How they differ from traditional serverless functions. @Netlify #edge', 206),
(1238, 'Understand the differences between Node and Deno ecosystems explained. Why Deno for edge functions? @Netlify #Deno', 206),
(1239, 'Importance of open standards for sustainability and avoiding lock-in discussed. @Netlify #webdev', 206),
(1240, 'Don\'t forget to be kind out there folks. Wise words from @eduardoboucas. #kindness', 206),
(1241, 'S-Town podcast highly recommended. Binge worthy storytelling. @stownthepodcast #podcasts', 206),
(1242, 'Want advice on hosting databases or getting fit? Check out the latest potluck episode!', 207),
(1243, 'Learn whether you really need to know regex and multiple languages from @wesbos and @stolinski on the new potluck!', 207),
(1244, 'Hear @wesbos and @stolinski discuss CSS environment variables and how they may change media queries.', 207),
(1245, 'Who is Gendo Ikari? Find out the anime villain origins on this potluck episode.', 207),
(1246, 'Get confidence to land your first web dev job from @stolinski\'s story on the new potluck episode.', 207),
(1247, 'Want to style parents based on child elements in CSS? The new has() selector lets you do it! 🎉 #CSS', 208),
(1248, 'Tired of repeating selectors like header p, main p, etc? Use the new where() selector to clean things up! 🧹 #CSS', 208),
(1249, 'Has(), where() and is() - 3 new CSS selectors that will change how you write styles. Check them out! 💪 #CSS', 208),
(1250, 'Use where() instead of is() in CSS for lower specificity. #CSS', 208),
(1251, 'New has(), where() and is() selectors coming to CSS soon! Time to get excited! 🙌 #CSS', 208),
(1252, 'Parent selectors, reduced repeats, and improved specificity - just some of what you can do with new CSS selectors! 🔥 #CSS', 208),
(1253, 'Hear @connor_finlayson explain the no code movement and if it will replace developers #NoCode', 209),
(1254, 'Get a list of popular no code tools like @Webflow and @Airtable from @connor_finlayson #WebDev', 209),
(1255, 'Where to find the best resources for learning no code tools according to @connor_finlayson', 209),
(1256, '@connor_finlayson gives his top advice for beginners looking to get started with no code #LearnToCode', 209),
(1257, 'Should developers be worried about no code taking their jobs? Find out what @connor_finlayson thinks #NoCode', 209),
(1258, 'For starting no code today, @connor_finlayson recommends Webflow, Zapier and Airtable as the top 3 tools', 209),
(1259, 'Debating imports, semicolons, for loops, types, and transpiling on the latest live @SyntaxFM podcast from @Reactathon!', 210),
(1260, 'Ever wondered what that weird old JavaScript and CSS code was for? @SyntaxFM digs into sliding doors, PNG fixes, and more from the early 2000s.', 210),
(1261, 'Hear @SyntaxFM try to stump each other with tricky syntax errors...while making tricky syntax errors of their own.', 210),
(1262, 'Play along as @SyntaxFM quizzes the audience on real JavaScript library names vs totally made up stuff in their JS or NAS segment.', 210),
(1263, 'Get Wes and Scott\'s takes on hiring American vs European devs, favorite snacks, and more in the audience Q&A part of the latest @SyntaxFM podcast.', 210),
(1264, 'Don\'t miss the special live edition of @SyntaxFM from @Reactathon, featuring hot takes, old code, syntax errors, JS or NAS, and audience Q&A!', 210),
(1265, 'Learn how to prevent malicious actors from abusing your website with @wesbos and @stolinski 👀 #webdev', 211),
(1266, 'Rate limiting, shadow banning, tokens, CAPTCHA, and more ways to stop bad actors on your site! 👮‍♂️ #webdev', 211),
(1267, 'Getting spammed? Site overloaded? @wesbos and @stolinski share techniques to protect your web app! 🔒 #webdev', 211),
(1268, 'Bots and spammers ruining your site? This episode has solutions! 🤖 #webdev', 211),
(1269, 'Abuse prevention pro tips from @wesbos and @stolinski - don\'t let the bad guys win! 🦹‍♂️ #webdev', 211),
(1270, 'Tired of endless CAPTCHAs? We hear you! Better options discussed within 😀 #webdev', 211),
(1271, 'Learn why developer @AnselmH switched careers to gardening and farming after 15 years in web dev.', 212),
(1272, 'Get @AnselmH\'s tips for avoiding #burnout in tech: focus on basics first, diversify skills, limit multitasking.', 212),
(1273, '@AnselmH explains how he started a market #garden business with his brother and the joys of growing your own food.', 212),
(1274, 'How can #developers and tech workers avoid burnout? @AnselmH shares his story transitioning from coding to #gardening.', 212),
(1275, 'Don\'t miss @AnselmH\'s advice for beginners: learn #HTML, #CSS, #JavaScript basics thoroughly before tackling frameworks.', 212),
(1276, 'Considering a career change to escape #burnout? Hear @AnselmH\'s inspiring story switching from web dev to running a market #garden.', 212),
(1277, 'Just getting started with @code? We break down all the built-in #Git tools and killer extensions for efficient workflows and visual power. All aboard the GUI train!', 213),
(1278, 'Struggling with merge conflicts and rebasing in Git? @code makes it intuitive with buttons, diffs, and staying in context. No more CLI confusion!', 213),
(1279, 'Tired of fuzzy Git commands and documentation? See all your options cleanly in @code\'s command palette. Such a time saver!', 213),
(1280, 'Want to master @code\'s Git tools? We\'ve got your definitive guide to built-ins like file history, blame, and status bar tricks. Coding enlightenment awaits!', 213),
(1281, 'Level up your @code skills with our pro tips on auto-push, branch changing, tracking changes, and more. You won\'t believe what the timeline view can do!', 213),
(1282, 'Want more @code Git wisdom? Hit us up with your best tips! We\'ll round up a Part 2 episode with all your brilliant shortcuts and hacks.', 213),
(1283, 'Learn all about cache control headers and how they can drastically improve your site\'s performance!', 214),
(1284, 'Do you understand caching? Brush up on cache control headers and how to leverage browser caching for a speed boost.', 214),
(1285, 'Tips for leveraging cache control headers - a must for any #webdev looking to improve site performance!', 214),
(1286, 'Don\'t miss this deep dive into cache control headers on @SyntaxFM - essential knowledge for web developers!', 214),
(1287, 'Want faster page loads? Optimize caching with cache control headers as explained on the latest @SyntaxFM podcast episode.', 214),
(1288, 'Caching pro tips coming at ya! Tune into @SyntaxFM to learn how cache control headers work.', 214),
(1289, 'Tom Preston-Werner @mojombo, founder of @github, gives his take on building startups with @redwoodjs, the new fullstack JS framework his team built.', 215),
(1290, 'RedwoodJS: An opinionated JS stack using React, GraphQL & Prisma. Top-notch docs & very quick to build. Optimized for scaling from side project to startup.', 215),
(1291, 'Just announced: @redwoodjs Startup Fund - investing $25-50k in startups using RedwoodJS. Backed by @mojombo and team.', 215),
(1292, '.@mojombo doesn\'t think you need to be great at math to code. He dropped advanced physics in college for CS despite acing calc tests.', 215),
(1293, 'Tom predicts full skeuomorphism will be back in UI design trends within 7 years. Maybe we need some neo-futuristic Flash sites again.', 215),
(1294, '.@mojombo keeps up with the fast-moving web by mainly reading Hacker News headlines.', 215),
(1295, 'Learn all about the various #TypeScript tooling options like type checkers, compilers, build tools, IDE integration and more!', 216),
(1296, 'Curious about setting up a TypeScript project? We break down all the tooling like compilers, build tools, configs and IDE setup.', 216),
(1297, 'Want to use TypeScript for server-side #NodeJS? We explain your options like @denoland, esno, tsnode and more!', 216),
(1298, 'For fast TypeScript compilation, @esbuild and SWC are your best bets. We explain how they fit into your toolchain.', 216),
(1299, 'Tools like @Vitejs and @ParcelJS make #TypeScript development fun and fast. We break down these smoking fast build tools.', 216),
(1300, 'Want full TypeScript support in your editor? @code VS Code has fantastic integration and support out of the box.', 216),
(1301, 'Level up your TypeScript game with this overview of all the compilers, build tools, IDEs, configs and more you need to know about!', 216),
(1302, 'Want to optimize your home office? Check out @stolinski\'s LevelUp Lodge tour for ideas on lighting, audio, desks, treadmills and more! #homeoffice', 217),
(1303, 'Looking for tips on building the ideal home studio? Don\'t miss @stolinski\'s LevelUp Lodge office tour! #podcaststudio', 217),
(1304, 'If you\'re a freelancer or work from home, you NEED an optimized workspace. Get ideas from @stolinski\'s LevelUp Lodge home office tour!', 217),
(1305, 'Productive home office requires: Good lighting ✅ Treadmill ✅ Pro audio gear ✅ Learn more from @stolinski\'s LevelUp Lodge tour!', 217),
(1306, 'Want to geek out on mics, monitors, cables and cameras? You\'ll love @stolinski\'s tour of his LevelUp Lodge home studio office!', 217),
(1307, 'Kung-fu movie posters, split AC units, standing mats...just some of the cool elements in @stolinski\'s LevelUp Lodge office tour!', 217),
(1308, 'If you record or podcast from home, @stolinski\'s LevelUp Lodge office tour is a must-listen for gear and setup ideas!', 217),
(1309, 'Hear @jaredpalmer discuss building @Turborepo, monorepos, company acquisitions, and more on the @SyntaxFM Supper Club!', 218),
(1310, 'Want to simplify monorepo builds? Learn how @Turborepo makes complex workflows accessible on the latest @SyntaxFM podcast.', 218),
(1311, 'Curious how @jaredpalmer\'s @Turborepo project started and got acquired by @Vercel? Tune into the @SyntaxFM Supper Club podcast!', 218),
(1312, 'Monorepos getting messy? @jaredpalmer explains how @Turborepo can help optimize your workflows on @SyntaxFM\'s Supper Club podcast.', 218),
(1313, 'Learn about advanced build techniques used at big tech companies and how @Turborepo makes them accessible on @SyntaxFM\'s new podcast series.', 218),
(1314, 'Hear @jaredpalmer\'s tips on side projects, incremental adoption, and solving your own problems on @SyntaxFM\'s Supper Club podcast.', 218),
(1315, 'Hear @wesbos and @stolinski discuss the benefits of @Nextjs even without server-side rendering!', 219),
(1316, 'Curious about NoSQL vs SQL databases? Learn when @MongoDB can be a great option.', 219),
(1317, 'How should game logic be implemented client vs server-side? Some great tips here.', 219),
(1318, '@wesbos and @stolinski weigh in on protestware in open source packages - hear their thoughts!', 219),
(1319, 'Dealing with Apple Silicon vs Intel apps? Learn how to check what code your apps are running.', 219),
(1320, 'Game devs: how do you prevent cheating? Some smart techniques discussed here for obscuring logic.', 219),
(1321, 'Want your #JavaScript to just work anywhere? Check out the new web interoperability initiative! 🚀', 220),
(1322, 'Tired of JS code breaking across environments? Help is on the way thanks to @Cloudflare and others working on web interoperability standards! 🔌', 220),
(1323, 'Node, Deno, Cloudflare, and more - JS runs everywhere but isn\'t always portable. A new working group aims to fix that! ✅', 220),
(1324, 'Writing universal JavaScript has never been easier thanks to the new web interoperability project. Syntax listeners get the inside scoop! 🎧', 220),
(1325, 'Portable JavaScript FTW! Tune into the latest Syntax podcast to learn about the exciting web interoperability announcement. 📻', 220),
(1326, 'JS devs rejoice! Wes and Scott discuss a promising new project to unify JavaScript across environments on the latest Syntax podcast. 🙌', 220),
(1327, 'Hear @victorsavkin explain how @NX_DEV can help manage and scale JavaScript monorepos.', 221),
(1328, 'Learn how @NX_DEV provides core task orchestration and caching for monorepos with optional plugins for migrations, generators, and more.', 221),
(1329, 'Don\'t miss @victorsavkin\'s advice on reinforcing learning through weekly diagrams and leveraging monorepo benefits even for small teams.', 221),
(1330, 'Get the inside scoop on monorepo build tools from ex-Google and Angular team member @victorsavkin on the latest Syntax podcast!', 221),
(1331, 'Monorepos don\'t have to be scary! Learn proven strategies for managing JavaScript monorepos with @NX_DEV from @victorsavkin on @SyntaxFM.', 221),
(1332, 'Curious about monorepos? @victorsavkin breaks it down covering @NX_DEV, task orchestration, caching, distribution, migrations, and more on @SyntaxFM.', 221),
(1333, 'Just heard about the getUserMedia API on @SyntaxFM! Time to build something fun with my webcam 🎥', 222),
(1334, 'The FileSystem API covered on @SyntaxFM sounds so useful! Going to try building a simple text editor with it this weekend 📝', 222),
(1335, 'Had no idea you could do speech recognition and synthesis solely with browser APIs! Mind blown from @SyntaxFM 🤯', 222),
(1336, 'Loving this overview of lesser-known browser APIs on @SyntaxFM - great way to learn something new! 🤓', 222),
(1337, 'So many creative ideas for side projects from today\'s @SyntaxFM episode on browser APIs 🌈 Excited to try some out myself!', 222),
(1338, 'Wow, I can\'t believe how easy the Clipboard API makes copy/paste in JS according to @SyntaxFM! Adding this to my toolbelt asap 🔥', 222),
(1339, 'ResizeObserver API sounds super handy from today\'s @SyntaxFM! No more hassling with scroll events to detect element visibility 🙌', 222),
(1340, 'Learn how to take control over TypeScript using type narrowing and guards instead of being yelled at! #TypeScript', 223),
(1341, 'Type narrowing and guards help avoid errors and assumptions in TypeScript code. We break it down on the latest episode!', 223),
(1342, 'Ever feel like TypeScript is yelling at you? We discuss how to narrow, guard, and control types to fix those errors.', 223),
(1343, 'Tired of TypeScript errors? We\'ve got your back with examples of type guards, narrowing, and discriminated unions to squash bugs.', 223),
(1344, 'Learn all about edge computing and edge functions on this week\'s episode!', 224),
(1345, 'Edge functions let you run code closer to users for speed. But what are the use cases?', 224),
(1346, 'Want to understand edge computing? We break it all down - the good, the bad, and the APIs.', 224),
(1347, 'Edge functions are like middleware on steroids. Faster, closer, more focused. But why use them?', 224),
(1348, 'Are edge functions the next evolution of serverless? Listen and find out!', 224),
(1349, 'Find out why developers still use @axios over native fetch! @wesbos & @stolinski go through the key features like interceptors, progress events, and custom timeouts.', 225),
(1350, 'Should you use Axios or fetch? @wesbos makes the case for Axios in today\'s episode! Tune in to hear how interceptors, adapters, and other features make Axios 💪.', 225),
(1351, 'Fetch not cutting it? @wesbos explains how Axios goes way beyond fetch with interceptors, progress events, default headers, and more! #javascript', 225),
(1352, 'Is Axios outdated? Not so fast! @wesbos makes the case for Axios over fetch in today\'s show. Don\'t miss it!', 225),
(1353, 'Using fetch but want more control? @wesbos lays out all the reasons to reach for Axios instead! Tune in for interceptors, adapters, and more! 🎧', 225),
(1354, 'Don\'t miss today\'s show! @wesbos breaks down why Axios is still a top choice over fetch. You\'ll be surprised by what it can do! 😲', 225),
(1355, 'Get ready for some serious stumping as @wesbos and @stolinski quiz each other on random JavaScript interview questions!', 226),
(1356, 'Ever been stumped by a tricky JavaScript interview question? Listen along as @wesbos and @stolinski try to answer some real stumpers!', 226),
(1357, 'Want to learn JavaScript concepts AND get some interview prep? Check out the latest episode of @SyntaxFM with @wesbos and @stolinski stumping each other!', 226),
(1358, 'Can you answer these tricky JavaScript questions? See if you fare better than @wesbos and @stolinski on the new Stumped episode of @SyntaxFM!', 226),
(1359, 'Laugh along as @wesbos and @stolinski hilariously stump each other with random JavaScript interview questions on @SyntaxFM!', 226),
(1360, 'Which JavaScript concept will completely stump @wesbos and @stolinski this time? Tune into the new Stumped episode of @SyntaxFM to find out!', 226),
(1361, 'Are you puzzling through building a custom #coupon engine? @wesbos and @stolinski break down do\'s and don\'ts on the latest @SyntaxFM!', 227),
(1362, 'Don\'t let janky coupon logic ruin your customer experience! Tune in to @SyntaxFM for pro tips on the coupon code conundrum.', 227),
(1363, '@SyntaxFM tackles the complex world of custom coupon engines - don\'t miss this episode if you need coupon logic clarity!', 227),
(1364, 'Coupon stacking? Single use codes? Country restrictions? @wesbos and @stolinski have you covered on the latest @SyntaxFM.', 227),
(1365, 'What happens when coupon logic goes wrong? @SyntaxFM looks at ingenious coupon exploits and how to avoid them.', 227),
(1366, 'Want to level up your custom coupon abilities? The latest @SyntaxFM has pro strategies for coupon success!', 227),
(1367, 'On this episode: teamwork tips, battling imposter syndrome, picking icon libraries, fixing broken service workers, fullstack Next.js pros and cons, when to go to production, and dealing with bad clients.', 228),
(1368, 'Want to work better with designers and PMs? @SyntaxFM shares their top tips for teamwork, communication, and delivering on time.', 228),
(1369, 'Ever feel like an imposter as a developer? @SyntaxFM discusses mindset shifts to get comfortable not knowing it all.', 228),
(1370, 'What icon library should you use in your projects? @SyntaxFM compares Font Awesome, React Icons, and more.', 228),
(1371, 'Uh oh... Broken service workers caching old site versions? @SyntaxFM explains how to nuke \'em and start fresh.', 228),
(1372, 'Should you build fullstack apps in Next.js? @SyntaxFM breaks down the pros and cons.', 228),
(1373, 'Not sure when to move your side project to production? @SyntaxFM shares their criteria for going live.', 228),
(1374, 'Getting stuck with bad clients? @SyntaxFM offers tips on managing expectations and having standards.', 228),
(1375, 'Just heard about the seriously impressive 3D capabilities now available in the browser using @SvelteJS and @threejs! #WebGL', 229),
(1376, 'Want to easily create 3D cubes, visualizations, and animations in your web apps? Check out Svelte Cubed! #SvelteJS', 229),
(1377, 'Physics sims, VR, 3D games - it\'s all possible in the browser now thanks to Three.js and wrappers like Svelte Cubed! #WebDev', 229),
(1378, 'Spinning cubes, marbles, cannons - the 3D browser fun never ends with @SvelteJS Cubed! #JavaScript', 229),
(1379, 'Level up your web apps with 3D cubes, charts, and animations using Svelte Cubed! So cool! #SvelteJS', 229),
(1380, '3D is the future of the web - start learning now with Svelte Cubed! 🎉 #WebDev', 229),
(1381, 'Find out why @ScottTolinski is jazzed about his new @Hyundai Ioniq 5 on the latest @SyntaxFM', 230),
(1382, 'On today\'s show, @WesBos helps a listener add some interactivity to their @Drupal powered site', 230),
(1383, 'Thinking of going electric? @ScottTolinski shares why he\'s loving his new @Hyundai Ioniq 5 on @SyntaxFM', 230),
(1384, 'Curious whether presentational @reactjs components can be non-leaf components? We\'ve got the answer on @SyntaxFM', 230),
(1385, '@ScottTolinski nerds out about the tech features in his new @Hyundai Ioniq 5 EV on today\'s @SyntaxFM', 230),
(1386, '.@WesBos recommends @AlpineJS to smoothly add interactions to an existing site on the latest @SyntaxFM', 230),
(1387, 'Want to be consistent at coding, content creation, or meeting any life goals? @WesBos and @stolinski share 18 hacks for maintaining consistency without burning out!', 231),
(1388, 'Struggling to stay consistent? @WesBos explains how capturing ideas, batch working, accountability partners, and SMART goals can help you stick to any plan.', 231),
(1389, 'Becoming a consistent content creator takes commitment, planning, and protecting time to produce. @stolinski shares his tips for battening down the consistency hatches.', 231),
(1390, 'Having trouble sticking with exercising, coding projects, or content goals? @WesBos says start small, create todo lists, and measure progress to build consistency.', 231),
(1391, 'Being consistently productive requires breaking big tasks down into smaller pieces according to @WesBos. What consistency hacks help you accomplish goals?', 231),
(1392, 'Staying consistent isn\'t easy, but it gets easier over time says @stolinski. His tips: commit to a schedule, capture ideas, batch work, and more. What helps you stay consistent?', 231),
(1393, 'Learn how @wesbos and @stolinski plan YouTube vids, conference talks, courses, blog posts and podcast eps! #contentcreation', 232),
(1394, 'Get @wesbos and @stolinski\'s pro tips for developing and organizing ideas for your online content! #makingcontent', 232),
(1395, 'Hear how @wesbos and @stolinski keep their YouTube, podcast, course and blog content fresh and helpful for devs! #syntaxfm', 232),
(1396, 'The secret to @wesbos and @stolinski\'s content success? Constantly capturing ideas and mind mapping content! #makingcontent', 232),
(1397, '@wesbos and @stolinski share their formula for creating bingeable online dev content across all mediums! #syntaxfm', 232),
(1398, 'Get actionable tips from @wesbos and @stolinski for planning YouTube vids, courses, talks, blog posts and podcast eps! #makingcontent', 232),
(1399, 'Huge news - optional TypeScript-style types may be coming to vanilla JS! 😱 #typescript', 233),
(1400, 'Would you like TypeScript\'s types but without the build step? New proposal could bring TS types to JS! 🎉 #typesinjavascript', 233),
(1401, 'TypeScript has proven itself - now proposal aims to bring same benefits directly into JavaScript. Here are the details! 👇', 233),
(1402, 'Types in JavaScript promise less bugs and better autocomplete without a build step. But would it make JS harder to learn? 🤔', 233),
(1403, 'Microsoft: \"Here\'s a proposal to add TypeScript syntax to JavaScript!\" Devs: \"Great, but hold the JSX please.\" 😅', 233),
(1404, 'Check out the latest Syntax Highlight episode where @wesbos and @stolinski review developer portfolios! Some amazing designs and great feedback. #webdev', 234),
(1405, 'Want tips on designing an awesome developer portfolio? The latest Syntax Highlight has great advice from @wesbos and @stolinski. Don\'t miss it! #webdev', 234),
(1406, 'Curious what makes a standout dev portfolio? Tune into the new Syntax Highlight ep with @wesbos and @stolinski for pro tips! #webdev', 234),
(1407, 'Looking for portfolio feedback? @wesbos and @stolinski give honest, helpful advice in the new Syntax Highlight. Submit yours! #SyntaxFM', 234),
(1408, 'The new Syntax Highlight has @wesbos and @stolinski reviewing developer portfolios. Essential listening for improving your own site! #SyntaxFM', 234),
(1409, 'How\'s your dev portfolio look? Get pro tips from @wesbos and @stolinski in the latest Syntax Highlight. Your site could be next! #SyntaxFM', 234),
(1410, 'Vitest aims to replace Jest with faster test runs, built-in TypeScript support, and easy setup. @SyntaxFM', 235),
(1411, '2022 is the year for speed! Vitest is a new, fast modern test runner for JavaScript. @SyntaxFM', 235),
(1412, 'Get ready to write tests faster than ever with Vitest\'s in-file testing and code coverage built-in. @SyntaxFM', 235),
(1413, 'Vitest utilizes Vite for fast ESM support, HMR for tests, and TinyPool for multithreading. The future is here! @SyntaxFM', 235),
(1414, 'Stop wasting time on slow test runs and complex setup. Vitest brings speed and simplicity to JavaScript testing. @SyntaxFM', 235),
(1415, 'Colocate your tests right inside your source files with Vitest\'s awesome in-file testing. Game changer! @SyntaxFM', 235),
(1416, 'Vitest aims to make testing JavaScript faster, easier, and more developer-friendly. Give it a spin today! @SyntaxFM', 235),
(1417, 'Ever wondered what @wesbos and @stolinski use to power their course platforms? They break it all down in this ep!', 236),
(1418, 'Course creators: Curious how @wesbos & @stolinski built their platforms? They compare stacks in the latest Syntax podcast!', 236),
(1419, 'Online course platforms can be complex! Learn how @wesbos and @stolinski built theirs with different stacks in this Syntax ep.', 236),
(1420, '.@wesbos just updated his course platform stack! Hear all about it and how it differs from @stolinski\'s stack on the latest Syntax podcast.', 236),
(1421, 'If you build online courses, you NEED to hear @wesbos and @stolinski compare their tech stacks on the newest Syntax podcast!', 236),
(1422, 'Online course creators: @wesbos and @stolinski explain their whole stacks on Syntax. Don\'t miss this jam-packed episode!', 236),
(1423, 'Learn how @render\'s auto SSL certs work with @Cloudflare proxy service ⚡️', 237),
(1424, 'Don\'t let Render and Cloudflare confuse you! We break it down on @SyntaxFM 🧩', 237),
(1425, '@wesbos moves hosting and solves SSL issues with Render + Cloudflare proxies 🖥️', 237),
(1426, 'Auto-renewing SSL certs through Render\'s HTTP challenge + Cloudflare proxy explained by @wesbos 🚦', 237),
(1427, 'How exactly does @letsEncrypt verify domain ownership for free SSL certs? @wesbos explains on @SyntaxFM 🔐', 237),
(1428, '@ScottTolinski goes live turning on Cloudflare proxy during the show! 🔴', 237),
(1429, 'What are some strategies for handling different permission levels in an app? Scott and Wes share their approach using granular permissions - listen in!', 238),
(1430, 'Have you ever gotten frustrated by package-lock merge conflicts? Don\'t go line-by-line - Scott and Wes explain an easier way to handle them.', 238),
(1431, 'What\'s your motivational trick for seeing side projects through to completion? The Syntax guys discuss when it\'s worth powering through (or abandoning) personal projects.', 238),
(1432, 'If you deal with painfully dry skin in winter, don\'t miss Scott and Wes\'s recommendations for O\'Keefe\'s hand and lip formulas. Might be just what your coding hands need!', 238),
(1433, 'Curious how Wes handles those tokens you see in his course URLs? He explains the various uses for passing data via links - PayPal callbacks, tracking, and more.', 238),
(1434, 'The Syntax guys tackle the age-old docs debate - is no documentation worse than bad documentation? Tune in to hear their thoughts and stories!', 238),
(1435, 'What\'s the deal with SSR, Jamstack and serverless? We break it all down on the latest Syntax podcast!', 239),
(1436, 'Trying to understand the differences between SSR, Jamstack and serverless? We\'ve got you covered on Syntax!', 239),
(1437, 'Jamstack, SSR, serverless - we demystify these web dev terms on the Syntax podcast. Listen in to learn the differences!', 239),
(1438, 'Heard about SSR, Jamstack and serverless but not sure how they differ? The Syntax podcast explains it all in simple terms!', 239),
(1439, 'Want the lowdown on SSR, Jamstack and serverless web approaches? We lay it out plain and simple on Syntax - give it a listen!', 239),
(1440, 'The 2021 @StateOfJS results are in! Tune in to hear @wesbos and @stolinski dig into the tastiest tidbits.', 240),
(1441, 'What were the biggest JS pain points this year? Most loved tools? Top languages beyond JS? Get the scoop in our State of JS 2021 podcast!', 240),
(1442, 'Interested to see how JS usage and preferences changed in 2021? We break down the @StateOfJS survey on the latest episode of Syntax!', 240),
(1443, 'JS keeping moving in the right direction? 👍 Learn what developers think of the current state of the language on @SyntaxFM\'s State of JS pod!', 240),
(1444, 'Curious what resources devs are using to learn JS and which podcast topped the list? 🎧 Get the State of JS 2021 download on @SyntaxFM!', 240),
(1445, 'JS may be moving forward, but date tools are still lacking. Hear our takeaways from the 2021 @StateOfJS survey on @SyntaxFM!', 240),
(1446, 'Get the inside scoop on @wesbos\'s recent 165,000 sticker drop - printing, packing, selling, shipping, costs, and more!', 241),
(1447, 'Ever wonder what it takes to ship stickers around the world? @wesbos breaks it down in this episode.', 241),
(1448, 'Sticker lover? You\'ll enjoy hearing @wesbos detail the massive logistics behind his latest sticker pack drop.', 241),
(1449, 'Want to sell stickers but don\'t know where to start? Don\'t miss this episode with @wesbos\'s pro tips and mistakes to avoid.', 241),
(1450, '@wesbos just dropped 165k stickers worldwide! Hear all about the printing, packing, selling, shipping, and costs on the latest ep.', 241),
(1451, 'How do you scale up printing & shipping for 165,000 stickers worldwide? @wesbos shares his secrets on the new episode.', 241),
(1452, 'Just dropped a spicy episode reviewing the latest @StateOfJS survey results - listen in for our hot takes!', 242),
(1453, 'The State of JS is looking good in 2022! Tune in to hear our review of the latest survey results and trends.', 242),
(1454, 'Devs seem mostly happy with JS frameworks - but build tools have room for improvement per the State of JS survey. Our analysis inside!', 242),
(1455, 'Is your JS skillset up to date in 2022? Get the full State of JS survey breakdown from @SyntaxFM to find out!', 242),
(1456, 'Big trends: React still dominating, Svelte on the rise, Vite blowing up. Get our full analysis of the State of JS 2022 survey now!', 242),
(1457, 'From language features to frameworks to build tools, we cover it all in our 2022 State of JS survey review. Listen in for the hot takes!', 242),
(1458, 'Are you using the right JS frameworks and build tools in 2022? Find out how your stack compares with the latest State of JS survey!', 242),
(1459, 'Learn the difference between array methods like map, filter, and reduce on the latest @SyntaxFM podcast!', 243),
(1460, 'Ever wonder when to use forEach vs for...in loops in JS? Get the lowdown on @SyntaxFM\'s This vs That episode.', 243),
(1461, '@SyntaxFM breaks down hasOwnProperty vs the \'in\' operator for checking object properties.', 243),
(1462, 'Should you use position or translate to move elements in CSS? Find out on @SyntaxFM\'s latest tasty treat!', 243),
(1463, 'When should you use Object.assign vs object spread to copy objects in JavaScript? @SyntaxFM has the answers!', 243),
(1464, 'Curious about the differences between JS & CSS features? @SyntaxFM\'s latest episode has you covered with This vs That comparisons!', 243),
(1465, 'Don\'t miss our deep dive into distributed tracing with @bentlegen, explaining how it helps debug modern web app issues!', 244),
(1466, 'Hear @bentlegen\'s unique career path from graphics drivers to web dev + his experiences at Disqus, Freshbooks & Sentry!', 244),
(1467, 'Learn how Sentry evolved from a Django plugin to a complex React/TypeScript app with 100K+ lines of code!', 244),
(1468, 'Hear @bentlegen\'s war stories about the wild west days of JavaScript running on others\' websites!', 244),
(1469, 'Find out how remote work is changing the Canadian software landscape with @bentlegen!', 244),
(1470, 'Get @bentlegen\'s pro tips on fully converting large apps to TypeScript - it takes rigor and avoiding refactors!', 244),
(1471, 'Want examples of large JS apps? Check out @getsentry and WordPress\'s Calypso - both huge open source React/TypeScript codebases!', 244),
(1472, 'The Fetch API is coming to Node.js! 🎉 Learn when and how you\'ll be able to use it in the latest episode of Syntax.', 245),
(1473, 'JSON modules are on their way! 📦 Find out how you\'ll be able to import JSON directly in JavaScript.', 245),
(1474, 'Pipe syntax could make chaining JavaScript functions way cleaner. Learn about the pipeline operator proposal on the newest Syntax podcast.', 245),
(1475, 'BigInts got you down? 🤯 New math methods are proposed to make working with really big numbers easier.', 245),
(1476, 'Template literals getting you cooked? 🍳 String.cooked may help parse those bad boys. More in the newest Syntax episode.', 245),
(1477, 'Do HTML menu and nav tags really differ? @SyntaxFM debates proper semantic usage.', 246),
(1478, 'Where should you securely store 2FA recovery codes? @SyntaxFM won\'t tell you directly, but discusses pros and cons of options.', 246),
(1479, '@SyntaxFM explores getting unstuck from tutorial purgatory and knowing when you\'re ready for a junior web dev role.', 246),
(1480, 'Are frameworks like @NextJS removing too much complexity? @SyntaxFM argues they don\'t abstract away enough.', 246),
(1481, '.@remix_run vs @SvelteKit? @SyntaxFM debates differences and whether one makes the other obsolete.', 246),
(1482, 'Keeping up with new web tech overwhelming? @SyntaxFM shares strategies like reading release notes and finding experts to follow.', 246),
(1483, 'Want to know what\'s coming down the pipeline in your favorite OSS projects? 🕵️‍♂️Here\'s how to spelunk those repos for intel on new features and changes!', 247),
(1484, 'Stay ahead of breaking changes in OSS projects you use by snooping around RFCs, issues, PRs, and following project contributors on Twitter. We\'ll show you how on the latest Syntax podcast!', 247),
(1485, 'Getting surprised by breaking changes in OSS sucks. 😣 Learn our pro tips for peeking into project repos to get the inside scoop on what\'s coming next!', 247),
(1486, 'Curious what new features are coming to your fave frameworks and libraries? We\'ll teach you how to dig into RFCs, issues, PRs and Twitter to find out on Syntax podcast!', 247),
(1487, 'Want the 411 on upcoming changes to React, Vue, Svelte etc? Check the RFCs, issues, PRs and follow project leads on Twitter. More pro tips on Syntax podcast!', 247),
(1488, 'Don\'t get blindsided by breaking changes in OSS projects. Learn how to lurk RFCs, issues, PRs and Twitter to stay looped in on the latest developments.', 247),
(1489, 'Josh Wardle (@powerlanguish) joins to discuss creating the viral hit Wordle with vanilla JS and web components. An amazing story of building something for fun that exploded.', 248),
(1490, 'Hear the origins and growth timeline of Wordle, Josh\'s background, the tech stack, and lessons learned like: focus on humans, authenticity enables virality, and the importance of UI juice.', 248),
(1491, 'If you\'ve played Wordle, you\'ll love this deep dive with its creator Josh Wardle. We cover the tech behind it, his thoughts on growth and ethics, the sale to NYT, and more. Don\'t miss it!', 248),
(1492, 'The Wordle origin story you\'ve been waiting for 👇 Creator Josh Wardle joins us to share how he built it, why it went viral, monetization philosophy, sale to NYT, and even some dev lessons learned along the way.', 248),
(1493, 'Wordle creator Josh Wardle tells the origin story behind the viral hit. Learn how he built it with vanilla JS/web components, growth timeline, avoiding ads, dealing with copycats, sale to NYT, and more!', 248),
(1494, 'Did you know Wordle was built by a single dev for fun, with no ads or tracking? Creator Josh Wardle joins us to share the viral growth story, sale to NYT, lessons learned, and thoughts on ethics in tech.', 248),
(1495, 'From art major to product manager to software dev, hear the winding career path of Wordle creator Josh Wardle. He joins to share the viral game\'s origin story, growth, tech details, sale to NYT and more on Syntax podcast.', 248),
(1496, 'The ultimate smackdown between traditional, serverless and Cloudflare Workers for your Node servers! 🥊', 249),
(1497, 'Having issues with third party APIs in your projects? We discuss solutions using your own serverless functions. 🤯', 249),
(1498, 'Find out why JSDOM doesn\'t work in Cloudflare Workers and how to work around it. 😱', 249),
(1499, 'Get Wes and Scott\'s tips on structuring your code to make migrating between servers easier. 💡', 249),
(1500, 'Learn when serverless functions are and aren\'t a good choice compared to traditional Node hosting. 🌎', 249),
(1501, 'Thinking of moving your API to Cloudflare Workers? Understand the limitations before you dive in! 🚧', 249),
(1502, 'Get your portfolio reviewed on the show! Just submit it to https://syntax.fm/show/syntax-highlight @sintaxfm @wesbos', 250),
(1503, 'Learn how small tweaks to typography, color, and animation can take your portfolio from good to great! @sintaxfm @wesbos', 250);

INSERT INTO `AiTweet` (`id`, `content`, `showNote`) VALUES
(1504, 'Having a strong \'about me\' section is crucial - distill what you do into just a couple sentences @sintaxfm @wesbos', 250),
(1505, 'Protip: add your skills/experience in a simple list format. Skip the overused progress bars! @sintaxfm @wesbos', 250),
(1506, 'Good portfolios showcase your personality and interests, not just skills. @sintaxfm @wesbos', 250),
(1507, 'Skip the complex animations and focus on site speed. Fast load times are vital these days! @sintaxfm @wesbos', 250),
(1508, 'Little touches like favicon, 404 pages, and hover effects show attention to detail in your portfolio @sintaxfm @wesbos', 250),
(1509, 'Ensure your portfolio site is usable without CSS at all via proper semantic HTML @sintaxfm @wesbos', 250),
(1510, 'Have a friend take some pro photos of you for the about section - default to selfies hurts the polish @sintaxfm @wesbos', 250),
(1511, 'Devs: squash that beef and be a team! Here are tips for working together toward your goals. #webdev', 251),
(1512, 'Avoid developer ego trips! Tips on listening, learning, and constructive communication for your team. #developers #teams', 251),
(1513, 'Great teammates respect each other\'s code and celebrate wins together. Here\'s how: #javascript', 251),
(1514, 'Don\'t insult your teammates through their code. Be constructive and egoless in code reviews. #webdev #teams', 251),
(1515, 'Junior devs: listen and discuss respectfully. Senior devs: clarify requirements. Tips for teamwork: #webdevelopment', 251),
(1516, 'Learn all about monorepos and managing multiple packages in one repo with @wesbos and @stolinski! #monorepo', 252),
(1517, 'Curious about tools like Turborepo, NX and Lerna for monorepos? We break it down on the latest Syntax podcast!', 252),
(1518, 'If you\'ve got a complex JS project with multiple packages, you need a monorepo. @wesbos and @stolinski discuss how they work on Syntax.', 252),
(1519, 'Hear @wesbos and @stolinski nerd out hard on monorepos, workspaces, Turborepo, NX and more on the latest Syntax podcast!', 252),
(1520, 'Managing a JS project with multiple packages? Monorepos to the rescue! Learn all about them on the latest Syntax podcast.', 252),
(1521, 'Upgrading your #NodeJS dependencies? Follow these tips from @wesbos and @stolinski for a smooth update 🧵', 253),
(1522, 'Minor updates should be backwards compatible, but major version bumps often introduce breaking changes. Always check those release notes! 📝', 253),
(1523, 'Use tools like npm-check-updates to scan for available updates. Then commit after each batch of changes so you can easily roll back if needed. 🛠️', 253),
(1524, 'TypeScript is your friend during upgrades! It will yell at you if APIs no longer exist. 🚨', 253),
(1525, 'Monitor errors closely after deploying updated dependencies - tools like Sentry can alert you to any regressions. 👀', 253),
(1526, 'Hope for the best, but have a plan to fix issues moving forward vs rolling back. Future you will thank you! 🙌', 253),
(1527, 'Dependency updates inevitable, but following a process like @wesbos\'s will make them less painful. Patch, minor, major, test, repeat! 🔁', 253),
(1528, 'Want to improve your skills in 2022? @SyntaxFM has great advice for beginner, intermediate, and advanced devs on what to focus on.', 254),
(1529, 'Level up your coding skills this year! @SyntaxFM recommends semantic HTML, data manipulation, CSS variables, server side code, CI/CD, and more.', 254),
(1530, 'Soft skills are 🔑 for devs in 2022 says @SyntaxFM. Learn emailing, organizing repos, public speaking, and teaching others.', 254),
(1531, 'Spice up your portfolio in 2022! @SyntaxFM suggests CSS animations, bots, and 3D for some fun coding side projects.', 254),
(1532, 'The hosts of @SyntaxFM share their wisdom on important coding concepts, soft skills, and fun side projects for every skill level. Check out the episode on what devs should focus on in 2022!', 254),
(1533, 'Find out which common #webdev hacks are actually A-OK according to @wesbos and @stolinski!', 255),
(1534, 'Ever felt guilty about using negative margins or inline styles? @wesbos and @stolinski explain why they can be 👌.', 255),
(1535, '@wesbos and @stolinski tackle web dev myths - are nonstandard HTML elements and parseInt radix rules really necessary?', 255),
(1536, 'Get ready to rewrite your lint config!  @wesbos and @stolinski challenge unnecessary web dev rules on the latest Syntax podcast.', 255),
(1537, '@wesbos and @stolinski discuss handy CSS tricks, inline styles, custom HTML elements and more #webdev hacks we like.', 255),
(1538, 'Centering with position:absolute? No button type? Learn why @wesbos and @stolinski are fine bending some web dev rules.', 255),
(1539, 'Want to protect images on your site? @WesBos explains how platforms like Facebook do it using access tokens in URLs. #imageprotection', 256),
(1540, 'When should you learn #TypeScript? @stolinski says gain proficiency in #JavaScript first so you understand the problems TS solves.', 256),
(1541, 'Having trouble staying focused learning one thing? @WesBos says finish projects to flex those skills instead of jumping around. #learningfocus', 256),
(1542, 'Working across time zones? @stolinski recommends clear communication, task tracking, video recordings to show issues. #timezonecollab', 256),
(1543, 'Adding Prettier to a large project? @WesBos did it in 2 hours. Use git\'s ignore revisions flag to preserve history. #prettier', 256),
(1544, 'Thoughts on monorepos? @stolinski uses one and loves it! Easier to share code between packages. #monorepo', 256),
(1545, 'Need to build internal tools fast? @stolinski explains how @RetoolApp makes it easy to start shipping today. #retool #internaltools', 256),
(1546, 'Learn why @remix_run delivers on the hype for modern web development in our latest episode!', 257),
(1547, 'Hear @WesBos and @ScottTolinski chat about @remix_run and its approach to data fetching, routing, and more.', 257),
(1548, 'If you\'ve been curious about @remix_run, this overview from @SyntaxFM will give you the details you need to understand it.', 257),
(1549, 'Do you love React but want smoother data fetching and server rendering? @remix_run might be for you! Tune in to our episode to learn more.', 257),
(1550, '.@remix_run comes from the makers of React Router and provides excellent DX for modern web development. Listen to our episode now!', 257),
(1551, 'Curious how @remix_run compares to Next, SvelteKit, Gatsby and more? Check out our latest episode for a discussion!', 257),
(1552, 'Svelte predicted to gain popularity in 2022 says @wesbos! #2022predictions', 258),
(1553, 'Next.js data layer and improvements to TypeScript support wished for by @stolinski for 2022 #2022predictions', 258),
(1554, 'Cloudflare adding features like images, videos and more - major competitor to AWS incoming says @wesbos #2022predictions', 258),
(1555, 'CSS gets new methodologies like Open Props and updates to specs like container queries in @stolinski and @wesbos 2022 predictions #2022predictions', 258),
(1556, 'Remote development with cloud coding and iPad setups a growing trend for 2022 says @wesbos #2022predictions', 258),
(1557, '@stolinski predicts GraphQL servers, tools and improvements to land in 2022 #2022predictions', 258),
(1558, 'JavaScript Temporal API could replace Date API in 2022 per hopes of @stolinski and @wesbos #2022predictions', 258),
(1559, 'Want to get more out of JavaScript? 💪 Here are 12 one-liners that will seriously up your JS game!', 259),
(1560, 'Working with arrays or objects in JS? We\'ve got handy one-liners to help you clone, edit, and destructure with ease.', 259),
(1561, 'Need to quickly generate a unique ID or random color in JS? We\'ve got simple one-liners for that! No libs required. 🌈', 259),
(1562, 'Debugging JS got you down? Try out some PHP-style debugging with handy one-liners from the show. 🐛🔎', 259),
(1563, 'The Temporal API is here! Learn how to easily get today\'s date with a simple one-liner. The future is now! ⏱', 259),
(1564, 'Tired of clunky if statements cluttering up your code? Try out some bracket-free if statements with one-liners! 😎', 259),
(1565, 'Want your JS console.logs to stand out? Label them by passing an object instead of bare values. So long, guessy debugging! 🏷', 259),
(1566, 'Get ready for the @SyntaxFM 2021 recap! 104 episodes, course updates, tech experiments, moving houses, and more. Don\'t miss it!', 260),
(1567, 'Want the scoop on the hot tech and topics of 2021? @SyntaxFM has you covered with their annual recap episode.', 260),
(1568, 'The @SyntaxFM 2021 highlights are here! Find out what Scott and Wes were up to this year with course updates, moving woes, and more.', 260),
(1569, '104 episodes in 2021?! ? Hear all about the monumental year from @SyntaxFM as Scott and Wes recap 2021.', 260),
(1570, 'Curious what crazy tech experiments and projects Scott and Wes tackled in 2021? Get the scoop in the @SyntaxFM annual recap!', 260),
(1571, 'SvelteKit rewrites, TypeScript courses, T-shirt businesses, oh my! Get the full @SyntaxFM 2021 recap now.', 260),
(1572, 'Moving houses AND businesses, 104 episodes, plus new courses - @SyntaxFM crammed it all into 2021. Hear their annual recap for all the deets!', 260),
(1573, 'Get ready to stuff your face with the tastiest treats in web dev! 🍪🥧 Join @wesbos and @stolinski for a snackluck packed with JS, CSS, workflows and more.', 261),
(1574, 'Ever wonder how those in-flight entertainment systems work? @wesbos and @stolinski hack into the tech behind it in the latest snackluck ep!', 261),
(1575, 'From staying up to date on packages to battling boredom as a non-beginner dev, this snackluck has tips to level up your skills and passion 🔥', 261),
(1576, 'This snackluck Q&A covers Angular, 3D libraries, motivation, NPM updates, NAS servers, meeting Diplo and more! An action-packed ep with @wesbos and @stolinski 💥', 261),
(1577, '.@wesbos met Macklemore and @stolinski met Diplo! The stories behind these celebrity encounters on the latest Syntax snackluck 🤩', 261),
(1578, 'Bluey, violent kung fu films and the Detroit Lions - the viewing habits of @wesbos and @stolinski revealed on this holiday snackluck! 📺', 261),
(1579, 'Gitpod allows developers to code in any browser without needing a high-spec computer. The future is here! #coding #webdev', 262),
(1580, 'Who knew you could develop a full app on an iPad? The Gitpod folks are doing some really innovative stuff to make coding more accessible. #coding #iPad', 262),
(1581, 'Want to work remotely from anywhere? Jeff from Gitpod lives in a van traveling around Australia coding from 6 internet connections! #remotework #digitalnomad', 262),
(1582, 'The NFT Bay: Jeff from Gitpod explains how he cloned all NFTs and put them online for free as an experiment. Fascinating discussion! #NFTs #blockchain', 262),
(1583, 'Still confused about blockchains, crypto, and web3? This ep covers it all with a balanced perspective from Gitpod\'s Jeff. #web3 #crypto #blockchains', 262),
(1584, 'Some great sick picks this week on low-tech (Uniqlo heat tech!) to high-tech (Helinox camping chairs). Improving remote work! #sickpicks #remotework', 262),
(1585, 'The new #Gatsby 4 release brings performance improvements and feature parity with Next.js! Check out deferred static generation and server side rendering options.', 263),
(1586, 'Want faster build times for your #Gatsby site? Gatsby 4 introduces parallel queries to significantly speed up performance.', 263),
(1587, 'With new deferred static generation, your #Gatsby pages won\'t build until requested, solving slow build time issues.', 263),
(1588, 'Gatsby 4 introduces server side rendering and build time GraphQL access for frequently updating data. What will they think of next?', 263),
(1589, '#Gatsby 4 deprecated Gatsby admin since devs don\'t need a UI for configs. Focused on perf with parallel queries instead.', 263),
(1590, 'The lines blur between #Gatsby and #Nextjs with new deferred static generation and SSR options in Gatsby 4.', 263),
(1591, 'The Gatsby team continues to deliver with #Gatsby 4. What features would you like to see next?', 263),
(1592, 'Learn why @figma uses #WebAssembly and @rustlang for performance improvements 🚀', 264),
(1593, 'How do 302, 307, and 301 redirect status codes differ? We break it down on the latest episode of Syntax 👇', 264),
(1594, '@scotttolinski shares how he manages #ADHD as a developer - great tips for focus and concentration', 264),
(1595, 'Ever wonder how @figma built their lighting fast editor? C++ and Rust via WebAssembly! #Wasm', 264),
(1596, 'What\'s the difference between REST, RPC, gRPC, GraphQL and webhooks? We demystify these concepts on the latest Syntax', 264),
(1597, 'Want to batch API requests? @wesbos explains how #GraphQL is perfect for this', 264),
(1598, 'Struggling with commit messages? @scotttolinski makes the case for conventional commits', 264),
(1599, 'Learn how to build a @sveltejs app coming from React! #webdev', 265),
(1600, 'Local state, reactivity, conditional rendering, input binding, and child components in @sveltejs. #javascript', 265),
(1601, 'How to do common things in @sveltejs you\'re used to in React. #frontend', 265),
(1602, '@sveltejs has some great features for building web apps! #development', 265),
(1603, 'Transition your React skills over to @sveltejs. We cover all the basics. #programming', 265),
(1604, 'We break down @sveltejs development like a React developer would understand it. #coding', 265),
(1605, 'Hear how JavaScript and web tech is being used for industrial automation with @antrogen', 266),
(1606, 'Getting started with PLCs, sensors and industrial equipment? @antrogen shares his experience and resources.', 266),
(1607, 'Predict equipment failures before they happen using machine learning and industrial data with @antrogen', 266),
(1608, 'What\'s it like developing apps for car head units and factories? @antrogen gives the inside scoop.', 266),
(1609, 'Home automation is one thing but @antrogen took it to the next level automating entire factories with JavaScript.', 266),
(1610, 'Think JavaScript is just for web apps and web sites? Think again says @antrogen who used it for nuclear plants and wind farms.', 266),
(1611, 'Want your site to look 🔥 on social? Don\'t forget those @opengraph meta tags! 📲 #webdev', 267),
(1612, 'Ever wonder what\'s up with those weird meta tags in your HTML? We\'ve got you covered on @SyntaxFM 🧠️', 267),
(1613, 'RT if you\'ve ever forgotten viewport meta and had a wonky mobile site 😆 #webdev #SyntaxFM', 267),
(1614, 'Sharing a site on social media? Open graph meta tags are clutch for custom previews 🖼️📲 #SyntaxFM', 267),
(1615, 'Old school keyword meta tags are so last decade darlings, leave them in the past where they belong 😅 #SyntaxFM', 267),
(1616, 'Turns out meta tags can do some pretty nifty things! Tune into the latest ep of @SyntaxFM to find out more 🤓', 267),
(1617, 'Can you believe we used to only have 216 web colors? 🎨 Web dev has come so far. Tune into @SyntaxFM to hear more!', 268),
(1618, 'Web devs used to waste SO much time on build configs, but tools keep getting simpler. 🙌 Less yak shaving, more building! @SyntaxFM', 268),
(1619, 'Async/await and promises changed JS flow control forever. 🌀 Learn more web dev history on the latest @SyntaxFM!', 268),
(1620, 'Controlling layouts with floats? 😬 Thank goodness for Flexbox and Grid layout! More web dev progress on @SyntaxFM.', 268),
(1621, 'Devs used to have to fully restart projects to see changes! 🔄 Now we have hot reloading. The future is now on @SyntaxFM.', 268),
(1622, 'GitHub Copilot guesses your code with startling accuracy. This AI pair programmer suggests completions as you type. @SyntaxFM', 269),
(1623, 'GitHub Copilot isn\'t going to design your app, but it will speed up development tremendously via smart autocomplete. @SyntaxFM', 269),
(1624, 'Still not sold on AI pair programming? GitHub Copilot converts code patterns across languages. Wild stuff from @SyntaxFM', 269),
(1625, '.@SyntaxFM put GitHub Copilot to the test. Their verdict: it\'s not perfect but will make you a faster, more accurate developer.', 269),
(1626, 'GitHub Copilot won\'t replace dev creativity, but it will remove repetitive coding work. The future is here says @SyntaxFM', 269),
(1627, 'GitHub Copilot is just fancy autocomplete...for now. But .@SyntaxFM sees a lot of wow potential in this AI pair programmer.', 269),
(1628, 'Having issues in your code? @wesbos and @stolinski share pro tips for troubleshooting and debugging - isolation, sanity checks, read errors carefully, use tools like debuggers. Level up your troubleshooting game!', 270),
(1629, 'Debugging got you down? @wesbos and @stolinski are here to help - tips for isolating issues, sanity checks, proper error reading, using debug tools, and more. Become a pro troubleshooter!', 270),
(1630, 'Want to take your development skills to the next level? Don\'t miss these troubleshooting tips from @wesbos and @stolinski - replicate issues, comment out code, understand errors, and more. You\'ll be debugging like a pro!', 270),
(1631, 'The dreaded runtime error got you puzzled? Fear not! @wesbos and @stolinski have pro troubleshooting tips - isolate, replicate, use debug tools, read errors carefully. Level up your debugging game!', 270),
(1632, 'Get Wes and Scott\'s candid thoughts on the new 16-inch #AppleSilicon #MacBookPro!', 271),
(1633, 'Hear all about the #M1Max MacBook Pro\'s speed for #videoediting and #development from working pros @wesbos and @stolinski.', 271),
(1634, 'How fast is the new 16-inch #MacBookPro for #JavaScript, #Node, and more? @wesbos and @stolinski weigh in on the latest Syntax FM.', 271),
(1635, 'Curious how the #MacBookPro16 performs for real work? @wesbos and @stolinski share their hands-on review on the latest Syntax podcast!', 271),
(1636, 'What\'s it like developing on the new blazing fast #M1Max MacBook Pro? @wesbos and @stolinski give their pro takes on Syntax FM.', 271),
(1637, '@wesbos and @stolinski nerd out on all things 16-inch #MacBookPro - performance, hardware, screens, battery, and more on Syntax podcast.', 271),
(1638, 'Learn how @github Copilot is changing workflows 🤖', 272),
(1639, 'Hear tips for buying glasses & eye exams on the cheap 👓', 272),
(1640, 'Find out how Wes & Scott deal with work stress and negativity 😧', 272),
(1641, 'Would W&S rather work at FAANG or a small startup? 🤔', 272),
(1642, 'Get the meaning behind “grok” in dev culture 💡', 272),
(1643, 'Discover W&S\'s design process for new projects 🎨', 272),
(1644, 'See how Wes designed his Level Up Tutorials site in Figma 🖥', 272),
(1645, 'Learn how headless CMS admin UIs and hosting works 💻', 272),
(1646, 'Understand how CORS browser security works 🚨', 272),
(1647, 'Hear how W&S implement GraphQL authentication 🔐', 272),
(1648, 'The new Rust compiler in Next 12 brings up to 5x faster builds! 🚀 #Nextjs', 273),
(1649, 'Next.js 12 has middleware support so you can intercept requests like in Express! 🤯 #Nextjs', 273),
(1650, 'React 18 support is here in Next 12! Try out those long awaited concurrent features. ☑️ #Nextjs', 273),
(1651, 'Next.js 12 has AVIF image support for tiny image files on the web! 📸 #Nextjs', 273),
(1652, 'Next.js 12 detects bots so your ISR pages load fast for users and crawlers! 🤖 #Nextjs', 273),
(1653, 'ES modules are now natively supported in Next.js 12! 🎉 #Nextjs', 273),
(1654, 'Hear @tomac_s talk about running Node and other environments in the browser using @StackBlitzIO\'s web containers. The future is here!', 274),
(1655, 'Want to code without installing anything locally? @tomac_s explains how @StackBlitzIO lets you run Node, databases, and more in the browser!', 274),
(1656, 'Browser as dev environment? @tomac_s talks reinventing online coding with @StackBlitzIO\'s web containers for true offline, performant coding.', 274),
(1657, 'Tired of Ops and environment issues? @tomac_s shares how @StackBlitzIO uses web containers to run Node FAST in your browser - the new dev workflow.', 274),
(1658, '.@StackBlitzIO web containers let you code with Node/databases offline in the browser! @tomac_s shares how WASM is enabling next-gen workflows.', 274),
(1659, 'Node in the BROWSER? 🤯 Learn how @StackBlitzIO uses WASM for blazing fast offline dev environments directly in your browser from @tomac_s.', 274),
(1660, 'Learn all about the hot new #Astro framework for static sites on the latest @SyntaxFM podcast!', 275),
(1661, 'Want fast static sites with minimal JS? #Astro may be your new go-to framework. Get the lowdown on @SyntaxFM!', 275),
(1662, 'If you build sites & love Svelte and React, but want less JS, check out #Astro. @SyntaxFM podcast explains it all!', 275),
(1663, 'Tired of configuring #TypeScript, #Sass, and markdown for every new project? @SyntaxFM says Astro has you covered!', 275),
(1664, '#Astro is being called part of the \'3rd wave\' of JS frameworks. Find out why on the latest ep of @SyntaxFM podcast!', 275),
(1665, 'Building static sites but want components and less JS? #Astro could be your new BFF. @SyntaxFM breaks it all down in their new ep!', 275),
(1666, 'Want to impress at your next CSS interview? Learn how Scott and Wes would handle tricky questions on the latest Syntax podcast episode!', 276),
(1667, 'Up your CSS game ⬆️ Listen to Scott and Wes quiz each other on CSS interview questions and concepts on the Syntax podcast!', 276),
(1668, 'Looking to level up your CSS skills? Don\'t miss the latest Syntax episode where Scott and Wes face off on CSS interview questions!', 276),
(1669, 'Think you know CSS? See how the Syntax hosts Scott and Wes handle tricky CSS interview questions on their Stumped game segment!', 276),
(1670, 'Could you answer these CSS interview questions? Find out on the new Syntax podcast episode as Scott and Wes quiz each other\'s knowledge!', 276),
(1671, 'Want a fun way to learn CSS? Listen to Scott and Wes answer (and struggle with) CSS interview questions on Syntax\'s latest Stumped game!', 276),
(1672, 'Learn how PNPM makes package management faster π', 277),
(1673, 'Monorepos help organize multiple packages in one repo. Here\'s how to set one up with PNPM β ̈', 277),
(1674, 'Git submodules let you mix private and public packages in a monorepo ππ', 277),
(1675, 'Publishing packages from a PNPM monorepo to NPM is a breeze π¬οΈ', 277),
(1676, 'Tired of slow NPM installs? PNPM offers faster performance via workspaces πββοΈπ ̈', 277),
(1677, ' Grab your flashlight and huddle around the campfire for this scary episode of horror stories from web developers! 😨', 278),
(1678, 'These dev horror stories will make you think twice before you deploy to production on a Friday evening! 😱', 278),
(1679, 'Devs share their tales of unintended data deletion, performance crashes, forgot WHERE clauses and more. Spooky indeed! 👻', 278),
(1680, 'Mass email mishaps, accidental photo leaks, catastrophic dependency updates - these web dev horror stories have it all! 😰', 278),
(1681, 'You\'ll laugh and cringe at these creepy tales of production bugs, failed demos, and servers brought down by spilled soda. 😬', 278),
(1682, 'Web developers confess their sins of missing WHERE clauses, runaway updates, and other scary slip-ups. Learn from their mistakes! 😫', 278),
(1683, 'Got a dev horror story that will make you shudder? Check out the latest @syntaxfm Hasty Treat for tales of daring dev disasters!', 279),
(1684, 'Think you\'ve made some dev mistakes? Check out @syntaxfm\'s spooky stories minisode for a few frightful fails to make you feel better.', 279),
(1685, 'Need a little dev schadenfreude this Halloween? Get your fill of shocking stories on @syntaxfm\'s special Hasty Treat!', 279),
(1686, 'Hear IT professionals recount their most terrifying tales of woe in @syntaxfm\'s bone-chilling Hasty Treat mini-sode.', 279),
(1687, 'You\'ll laugh, you\'ll cry, you\'ll double check your staging environment after the latest bone-chilling @syntaxfm Hasty Treat.', 279),
(1688, 'What\'s scarier than broken code and crashed servers? The latest hair-raising Hasty Treat from @syntaxfm!', 279),
(1689, 'Want to start teaching your kids coding concepts? Try logic puzzles and toys before diving into code. Make them curious problem solvers first! #SyntaxFM', 280),
(1690, 'When adding untrusted packages to your portfolio, explain clearly that you implemented an existing design. Don\'t try to pass it off as your own work. #SyntaxFM', 280),
(1691, 'Negative values in CSS are perfectly valid techniques, despite feeling dirty. Use negative margins and more with confidence! #SyntaxFM', 280),
(1692, 'Managed services like MongoDB Atlas are better than self-hosted for databases. Security, features, and performance matter. #SyntaxFM', 280),
(1693, 'For brochure sites, use fast static site generators like @sveltejs, @gatsbyjs, or @Nextjs static export. Fast HTML for the win! #SyntaxFM', 280),
(1694, 'Learn about JUST, a handy JavaScript utility function library perfect for every dev! #javascript', 281),
(1695, 'Small but mighty! JUST packs a punch with tiny but useful JavaScript utility functions. #webdev', 281),
(1696, 'Tired of bulky utility libraries? Try JUST for guilt-free, small JavaScript utility functions! #programming', 281),
(1697, 'JUST might be your new favorite JavaScript utility function library. All the functions you need, sans bloat! #coding', 281),
(1698, 'Get your hands on some sweet JavaScript utility functions with JUST! All the handy utils without the overhead. #devlife', 281),
(1699, 'Devs, get JUST what you need! This episode covers a lightweight JavaScript utility function library. #podcast', 281),
(1700, 'Want the inside scoop on how @syntaxfm makes their tasty web dev treats? We\'re dishing all the details in our latest meta episode on podcasting!', 282),
(1701, 'Ever wondered what goes into running a dev podcast? @wesbos and @stolinski share everything from planning to recording to sponsors in the latest @syntaxfm podcast.', 282),
(1702, 'Curious how @syntaxfm consistently churns out great web dev content week after week for years? The secret sauce is revealed in their latest podcast on podcasting!', 282),
(1703, 'Want to start your own dev podcast but not sure where to begin? @wesbos and @stolinski have 400 eps of advice for you in the new @syntaxfm podcast.', 282),
(1704, 'How do @wesbos and @stolinski keep coming up with new @syntaxfm episode ideas 400 eps later? Their process revealed in the latest podcast!', 282),
(1705, 'Hear @wesbos and @stolinski geek out about audio gear, planning, sponsors, and more podcast nerdery in the latest meta @syntaxfm episode!', 282),
(1706, 'What happens behind the scenes to make @syntaxfm a hit dev podcast? @wesbos and @stolinski take you inside the podcasting sausage factory.', 282),
(1707, 'Learn about the new CSS color spaces like Lab and LCH that provide perceptually uniform colors!', 283),
(1708, 'CSS color functions for mixing, contrast checking, and more are coming! Get ready to seriously upgrade your color game!', 283),
(1709, 'Hex values with alpha transparency are now supported! Farewell RGBA, we barely knew ye.', 283),
(1710, 'Accent colors let you style form inputs with your brand palette - say goodbye to ugly default form colors!', 283),
(1711, 'CurrentColor sets a property to the current text color - great for borders, box shadows, and more.', 283),
(1712, 'Want tips on showcasing your skills when applying for dev jobs? Learn when frameworks can be an asset on your portfolio site.', 284),
(1713, 'Curious about testing approaches for @sveltejs components? The Syntax hosts discuss common practices.', 284),
(1714, 'Using @WordPress as a headless CMS? The hosts share hosting strategies and gotchas when combining WP + a static site generator.', 284),
(1715, 'Have an old lantern? Add some 🔥 with a flame light bulb for a fun DIY project.', 284),
(1716, 'Hear @stolinski and @wesbos discuss if you should use semantic HTML tags or default to divs on a new potluck episode.', 284),
(1717, 'Learn about using services like @Cloudinary vs hosting images yourself. When does it make sense to reach for external services?', 284),
(1718, 'Coming up on @SyntaxFM: @wesbos and @stolinski discuss why PHP doesn\'t deserve all the hate it gets and how JS is reinventing many of its features.', 285),
(1719, 'Ever wondered why JS devs are now embracing mixing logic/templates, URL-based routing, and other PHP staples? Find out on the latest fiery @SyntaxFM podcast!', 285),
(1720, 'On @SyntaxFM: @wesbos & @stolinski dish on the merits of PHP and how it has influenced many modern JS frameworks and features.', 285),
(1721, 'JS devs love to hate on PHP, but @wesbos makes the case for why it laid the groundwork for many things we take for granted in JS. Tune in to @SyntaxFM!', 285),
(1722, 'PHP got a bad rap, but @SyntaxFM looks at how JS is bringing back its best bits like hot reloading, massive standard libs, and more. Don\'t miss this spicy take!', 285),
(1723, 'If you write JS but have never touched PHP, this ep of @SyntaxFM explains how PHP influenced many frameworks and features you use every day.', 285),
(1724, 'Podcast hosts @syntaxfm @shoptalkshow face off in #FrontEndFeud! Who will win? Find out in the latest @JSPartyFM episode!', 286),
(1725, 'Think you know #frontend better than @syntaxfm and @shoptalkshow? See how they match up in Front End Feud on @JSPartyFM!', 286),
(1726, 'Can @syntaxfm beat out @shoptalkshow in a battle of #frontend knowledge on the new @JSPartyFM? Listen to find out who wins Front End Feud!', 286),
(1727, 'Friendly competition between podcast hosts as @syntaxfm and @shoptalkshow throw down in Front End Feud on @JSPartyFM! Who will reign supreme?', 286),
(1728, 'If you love podcasts & #frontend, you\'ve gotta listen to @JSPartyFM\'s Front End Feud! @syntaxfm vs @shoptalkshow in a battle of web dev knowledge!', 286),
(1729, 'Want a fun twist on your usual #frontend podcasts? Check out @JSPartyFM\'s Front End Feud with @syntaxfm vs @shoptalkshow!', 286),
(1730, 'Check out Lucylang for concise state machines that compile to xstate! #lucylang', 287),
(1731, 'MD Specs brings MDX style components to Svelte! Write components in your Svelte markdown. #mdspecs #svelte', 287),
(1732, 'Fig terminal adds autocomplete for folders, Git, and more right inside your existing terminal! #fig', 287),
(1733, 'Warp is a new terminal built in Rust with collaboration features. Faster than Electron apps! #warpdev', 287),
(1734, 'Raycast is a fast app launcher and workflow tool for Mac. All the power of Alfred! #raycast', 287),
(1735, 'Obsidian is a Versus Code style note taking app with markdown and mind maps. Organize your thoughts! #obsidian', 287),
(1736, 'Descript can transcribe your audio and video, then edit it via text. The future of editing! #descript', 287),
(1737, 'Scott moved his entire @LevelUpTuts site from React to @sveltejs in just 2 months! Hear his thoughts on the transition.', 288),
(1738, 'Want to move from React to @sveltejs? Scott discusses how he converted React components to Svelte in his Level Up Tutorials rewrite.', 288),
(1739, 'No useful metrics comparing @reactjs and @sveltejs builds for Scott\'s Level Up Tutorials rewrite. Apples and oranges!', 288),
(1740, '.@stolinski doesn\'t hate React but prefers @sveltejs for his use case after rewriting the @LevelUpTuts front-end.', 288),
(1741, 'Quick progress moving Level Up Tutorials from @reactjs to @sveltejs for Scott - concepts transfer between frameworks.', 288),
(1742, 'Scott removed unused parts of Apollo when switching @LevelUpTuts from @reactjs to @sveltejs - customized needs matter.', 288),
(1743, '@stolinski converted React\'s useState to Svelte variables for his @LevelUpTuts rewrite. bindings > setState!', 288),
(1744, 'Learn what webhooks are and how to use them to connect your apps and workflows! @SyntaxFM #webhooks ', 289),
(1745, 'Have you heard of webhooks but aren\'t sure how they work? @SyntaxFM breaks it down in simple terms! #webdevelopment ', 289),
(1746, 'Setting up webhooks locally can be tricky. @SyntaxFM shares tools like ngrok and Insomnia to simplify testing. #javascript ', 289),
(1747, 'Webhooks allow different services to communicate, like payment webhooks from Stripe. Learn how it works on @SyntaxFM! #nodejs', 289),
(1748, 'Don\'t let webhooks intimidate you! They\'re simpler than you think. Listen to @SyntaxFM explain in plain English. #webdev', 289),
(1749, 'Want a primer on webhooks and how to implement them? Get the scoop from @SyntaxFM. #programming', 289),
(1750, 'Just heard about some exciting new #JavaScript features landing in ES2022 on @SyntaxFM!', 290),
(1751, 'The new .at() method on arrays in ES2022 is a game changer! Learn more on the latest @SyntaxFM', 290),
(1752, 'Private fields and methods are now native in JS classes thanks to ES2022! Tune in to @SyntaxFM to learn more', 290),
(1753, 'ES2022 is shipping top level await! No more IIFEs needed. More JS goodies on the latest @SyntaxFM', 290),
(1754, 'Regex just got a major upgrade in ES2022 thanks to the new indices flag. More regex magic on @SyntaxFM', 290),
(1755, 'Classes in JS just got a major glow up thanks to ES2022. Static blocks, fields init, and more. Listen in on @SyntaxFM!', 290),
(1756, 'Wes Bos is now getting crazy fast internet speeds at his rural cottage thanks to @SpaceX\'s Starlink satellite internet! 🛰🚀', 291),
(1757, 'No more pixelated video calls or struggling with 10MB down - Wes is seeing 200MB down with Starlink! 📶⚡️', 291),
(1758, 'Starlink is a gamechanger for rural internet access. Check out @wesbos\'s review of the service, speeds, and equipment! 🏡🌌', 291),
(1759, 'Kids notice the instant streaming improvement with Starlink satellite internet at the cottage. The future is here! 👨‍👩‍👧‍👦⚡️', 291),
(1760, 'For rural users, Starlink equipment cost is 100% worth blazing internet speeds. City dwellers just don\'t get it! 🚫🏙💨', 291),
(1761, 'No more janky setups - Starlink gives @wesbos enterprise-level networking at the cottage! 🌲🌌📡', 291),
(1762, 'Saying goodbye to the Syntax studio after many great episodes recorded there 😢', 292),
(1763, 'Should you use Sass/SCSS in new projects in 2021? Depends on the context but it still has advantages!', 292),
(1764, 'When will CSS Houdini ship? Support is scattered but it could enable lots of new CSS abilities.', 292),
(1765, 'Building sites without JS is a noble goal but beware going too far - progressive enhancement is key.', 292),
(1766, 'Decentralized data ownership with Solid seems promising. Less data for devs to store can be a good thing.', 292),
(1767, 'Bartering dev skills for services sounds nice but can get messy. Small exchanges might work better than big projects.', 292),
(1768, 'Perspectives on digital rights management (DRM) - a necessary evil? Don\'t let it ruin the user experience.', 292),
(1769, 'The Framework laptop offers a Linux/repair focused alternative to Macs. Cool idea but Linux still has quirks.', 292),
(1770, 'Frontity allows React powered WordPress sites while keeping WP\'s benefits. Promising new approach.', 292),
(1771, 'Using GraphQL w/ Svelte via codegen is smooth. Apollo integrations work well.', 292),
(1772, 'Can Prisma make Mongo queries easier? Migrations help but aggregations may still need custom work.', 292),
(1773, 'Confused about Next.js hosting options? We break down the pros and cons of Vercel, Netlify, and beyond. #Nextjs', 293),
(1774, 'Hot take: Safari is the new Firefox - constantly pushing the envelope with new CSS features. Agree or disagree? #CSS', 293),
(1775, 'The struggle is real when trying to integrate custom CMS forms into modern JS apps. We need better options here! #Forms #CMS', 293),
(1776, 'SvelteKit did NOT abandon TypeScript. They changed how they author types, but TS is still fully supported. Important distinction! #TypeScript', 293),
(1777, 'React Native takes a very different approach than Electron/Turborepo for building native mobile/desktop apps. #ReactNative', 293),
(1778, 'Firefox has its flaws, but it\'s not the new IE. Show some respect to the fox! #Firefox', 293),
(1779, 'Getting tripped up by terms like process, worker, job, task, and daemon? We break down what they all mean. #Computing', 293),
(1780, 'Want to know what tech stacks power your favorite websites & apps? Find out the secrets behind the new @SyntaxFM website!', 294),
(1781, 'Learn how @WesBos & @stolinski built the new @SyntaxFM site with SvelteKit, Prisma, PlanetScale, Vercel, Mux, and more!', 294),
(1782, '.@SyntaxFM lifts the curtain on their website tech! Discover the stacks, services, & sauces they used for the new Syntax site.', 294),
(1783, 'Curious what\'s under the hood of the new @SyntaxFM site? Listen as @WesBos & @stolinski reveal the SvelteKit, Prisma, & other secret sauces!', 294),
(1784, 'The new @SyntaxFM site has launched! Hear @WesBos & @stolinski share the serverless functions, Prisma types, & other tasty tech powering it.', 294),
(1785, 'Want the inside scoop on how @SyntaxFM built their new website? Don\'t miss their breakdown of the SvelteKit, FlexSearch, Mux, and more!', 294),
(1786, 'You\'ll laugh, you\'ll cry, you\'ll double check your deploys after hearing these spooky coding horror stories!', 295),
(1787, 'Think you\'ve made bad mistakes as a developer? Check out these absolutely wild coding horror stories.', 295),
(1788, 'These cringey coding horror stories will make you hug your rubber duck tight tonight.', 295),
(1789, 'Grab some candy corn and get ready for a fright with these creepy coding horror stories!', 295),
(1790, 'Code gone wrong! The Syntax hosts share utterly terrifying tales of dev disasters.', 295),
(1791, 'Laughing through the pain, crying through the laughter. It\'s the annual coding horror story time on Syntax!', 295),
(1792, 'Coming up: Tales of accidentally deleted databases, exposed customer data, broken site functionality and more. The horror! 😱', 296),
(1793, 'Ever wonder what happens when a developer fat fingers the delete database command? You\'re about to find out in this cringe-worthy edition! 😳', 296),
(1794, 'Think your on-the-job mistakes were bad? Wait until you hear these mortifying stories of developers bombing databases and breaking things! 🤯', 296),
(1795, 'Up next: Brace yourself for some major cringe as developers confess their biggest fails, from wiped databases to exposed data and more. 😬', 296),
(1796, 'Developers anonymously submit their most embarrassing mistakes: accidentally deleting databases, breaking site functionality, exposing data and more. Grab some popcorn for the cringe! 🍿', 296),
(1797, 'You\'ll laugh, you\'ll cry, you\'ll cringe big time. Developers share their biggest facepalm moments including deleted databases, broken sites and more! 🤦‍♂️', 296),
(1798, 'Hear the creator of Swift discuss his new Python-inspired #AI language Mojo!', 297),
(1799, '\"New hardware needs new languages\" says @clattner_llvm on why he created Mojo after Swift and Clang at @modular_ai', 297),
(1800, 'Mojo scales down to small systems unlike Python says @clattner_llvm. Compiles to binary or uses JIT like JS', 297),
(1801, '\"Python ecosystem propelled it in ML\" - @clattner_llvm on why he chose Python and not JS for his new lang Mojo', 297),
(1802, '\"AI interactions with real world\" is what excites @clattner_llvm most about AI\'s potential', 297),
(1803, 'Learn how ML models work and the role of GPUs from the creator of Swift @clattner_llvm', 297),
(1804, 'Hear @brad_frost explain the ingredients for creating a design system - from design tokens to developer experience! #designsystems', 298),
(1805, 'Learn why @brad_frost believes web components are the best way to deliver reusable front-end code at scale. #webcomponents', 298),
(1806, '\"A design system is the official story of how an organization designs and builds UIs\" - timeless wisdom from @brad_frost', 298),
(1807, 'Ever struggled with keeping design and code in sync? @brad_frost has solutions for creating that virtuous cycle. #designsystems', 298),
(1808, 'The 3 pillars of a design system according to @brad_frost: design library, code library, and documentation website.', 298),
(1809, 'Naming things is hard but critical for great developer experience says @brad_frost. Wise words on governance and language.', 298),
(1810, 'The latest in AI for web devs: @Vercel\'s vzero to generate React UI from prompts, @AnthropicAI\'s Claude chatbot, and new @Cloudflare Workers AI services! 🤖', 299),
(1811, 'Web devs, want UI code generated from English prompts? Check out @Vercel\'s new vzero.dev! 🧙‍♂️👨‍💻', 299),
(1812, 'Chatbots leveling up - try @AnthropicAI\'s Claude for natural conversations! 🤖💬', 299),
(1813, 'Run AI services seamlessly in @Cloudflare Workers now - speech-to-text, translation, and more! ⚡️', 299),
(1814, 'New AI hardware devices also on the horizon - but are they actually useful? 🤔💡', 299),
(1815, 'Remember when Left Pad breaking caused npm Armageddon? 😆 The honorable deaths of the libraries we used to need. #syntaxfm', 300),
(1816, 'CSS Grid said bye bye to the 960 Grid System. Temporal is replacing Moment.js. The cycle of life in web dev libraries! #syntaxfm', 300),
(1817, 'jQuery\'s reign has ended. Long live vanilla JS selectors, animations and fetch! #syntaxfm', 300),
(1818, 'Express may be on its last legs with Hapi and standardization of request/response. #syntaxfm', 300),
(1819, 'Underscore out, Maps/Sets in. Lodash losing ground to native JS features. #syntaxfm', 300),
(1820, 'WebSockets sent Socket.IO packing. Sass stepped aside for CSS variables. The honorable deaths of web dev\'s past heroes. #syntaxfm', 300),
(1821, 'Just in: Top CSS frameworks, utilities, features and pain points based on huge dev survey in 2023 #css', 301),
(1822, 'What CSS features do devs love and hate the most this year? Listen to find out! #webdev #css', 301),
(1823, 'Think you know the most popular CSS frameworks and tools? See how your guesses compare to thousands of devs! #syntaxfm', 301),
(1824, 'Big changes in CSS framework usage and must-have features compared to recent years. #css #webdev', 301),
(1825, 'CSS has come so far, but there are still highly desired layout features missing. Learn the top 5! #cssgrid #flexbox', 301),
(1826, 'Ever wondered how your CSS toolbox compares to other devs? Get insights from a massive survey! #css #frontend', 301),
(1827, 'Curious what CSS features developers are most excited for this year? Tune in to find out! #css #webdev #frontend', 301),
(1828, 'What are the CSS tools and frameworks standing the test of time? Hear the 2023 report! #css #webdev #frontend', 301),
(1829, 'Thinking of trying a new CSS framework? Get insights into dev retention rates before deciding! #css #webdev #frontend', 301),
(1830, 'Devs - pimp your home office ride with these web dev workstation optimization hacks! ???? #syntaxfm', 302),
(1831, 'Peep the home office feng shui tips - get your flow state ON! ???????? #syntaxfm', 302),
(1832, 'Optimize your dev dungeon with pro work-from-home advice! Crank your productivity AND your comfort! ???? #syntaxfm', 302),
(1833, 'Get your home office setup dialed for max productivity with these pro dev tips! ????????', 302),
(1834, 'Working from your childhood bedroom? ???? Level up your home office game with workflow + comfort hacks from the #syntaxfm crew!', 302),
(1835, 'Stuck working from a cluttered spare room? You need these home office feng shui tips STAT! ???? TY @syntaxfm', 302),
(1836, 'Want to enable strict mode in #TypeScript? We break down the key settings like NoImplicitAny and AlwaysStrict.', 303),
(1837, 'Avoid bugs by turning on TypeScript\'s strict mode! We explain the different options like StrictNullChecks and StrictFunctionTypes.', 303),
(1838, 'We\'re getting strict with TypeScript! Learn what NoImplicitThis, StrictBindCallApply, and other strict settings do on this episode.', 303),
(1839, 'Using strict mode in TypeScript? We describe each setting like StrictPropertyInitialization and UseUnknownInCatchVariables.', 303),
(1840, 'Get familiar with TypeScript\'s strict mode options like StrictNullChecks and AlwaysStrict for a safer codebase!', 303),
(1841, 'Level up your TypeScript knowledge! We explain the purpose behind settings like NoImplicitAny when enabling strict mode.', 303),
(1842, 'Want to brush up on key #JavaScript interview questions? Check out the latest @SyntaxFM episode where @wesbos and @stolinski quiz each other.', 304),
(1843, 'Hear @wesbos and @stolinski define concepts like first class functions, the spread operator, weak maps and more on the latest #JavaScript focused episode of @SyntaxFM!', 304),
(1844, 'Hilarious episode of @SyntaxFM with @wesbos and @stolinski quizzing each other on #JavaScript interview questions. Learn about label statements, query strings, and preventing default behavior.', 304),
(1845, 'Hear @wesbos and @stolinski cleverly stump each other on coding interview questions covering Array.some, deleting cookies, and loading CSS/JS dynamically in #JavaScript on @SyntaxFM.', 304),
(1846, '@wesbos and @stolinski masterfully handle coding interview questions on event loop tasks, Object.is, and error objects in #JavaScript on the latest ep of @SyntaxFM.', 304),
(1847, 'Want to improve your #JavaScript interview skills? Don\'t miss the latest ep of @SyntaxFM with @wesbos and @stolinski quizzing each other on key concepts like weak maps, first class functions and more.', 304),
(1848, 'Ever wondered how to spot a toxic client before agreeing to work with them? @wesbos and @stolinski walk through common red flags on the latest episode.', 305),
(1849, 'Don\'t work with toxic clients! Learn to recognize the signs on @SyntaxFM with @wesbos and @stolinski - unclear vision, scope creep, bad communication, rudeness, and unwarranted bragging.', 305),
(1850, 'Get tips for dealing with toxic clients from @SyntaxFM. @wesbos and @stolinski talk identifying bad clients by their unclear vision, expanding scope, odd communication, rudeness, and bragging.', 305),
(1851, 'How can you tell if a client will be toxic before starting work? The latest @SyntaxFM covers common red flags like unclear vision, scope creep, bad communication, rudeness, and bragging.', 305),
(1852, 'Want to avoid toxic clients as a freelancer? @wesbos and @stolinski share tips on @SyntaxFM for spotting bad clients early based on unclear vision, scope creep, communication issues, rudeness, and unwarranted bragging.', 305),
(1853, '@SyntaxFM helps freelancers recognize signs of toxic clients early, like lack of clear vision, scope creep, poor communication, rudeness, and too much bragging.', 305),
(1854, 'New devs - get comfortable with code breaking often! It\'s all part of the process. Learn more debugging tips in our new podcast.', 306),
(1855, 'Want advice for starting your dev career? @scotttolinski and @wesbos share their top tips for beginners in the latest Syntax podcast.', 306),
(1856, 'Getting stuck on bugs? Take a walk! Stepping away from the screen can help you solve problems in new ways. More new dev advice on @SyntaxFM.', 306),
(1857, 'Soft skills are just as important as coding skills according to the pros on @SyntaxFM. Level up your people skills as you learn to code.', 306),
(1858, 'Practice makes perfect! Keep interviewing and talking about code even when you aren\'t job hunting. Sharpen your skills on @SyntaxFM.', 306),
(1859, 'Still learning the basics? @scotttolinski and @wesbos say master vanilla JS before jumping into frameworks. More new dev tips on @SyntaxFM!', 306),
(1860, 'CSS gets a bad rap, but it\'s not that bad! Learn why the hate is misguided and how to fix common CSS issues.', 307),
(1861, 'Still making tired CSS jokes? Time to level up your CSS game! We\'ve got pro tips for debugging, planning, and more.', 307),
(1862, 'Sick of CSS layout struggles? flexbox.io and cssgrid.io have you covered with free video courses!', 307),
(1863, 'Scoping issues got you down? BEM your way to cleaner CSS! Plus more pro tips on the latest Syntax podcast.', 307),
(1864, 'Treat CSS as a first-class citizen on your projects! Plan it out, purge unused code, and stop hating.', 307),
(1865, 'Hot take: if you still make dumb CSS jokes in 2022, you\'re the problem! We\'re reclaiming CSS over at Syntax podcast.', 307),
(1866, '!important in your CSS? ð ̈ Time for an intervention! Tune in to the latest Syntax podcast for CSS best practices.', 307),
(1867, 'Want to know when your code should be DRY vs. a little moist? We\'ve got you covered in our latest potluck episode!', 308),
(1868, 'Ever struggle with freelance project timelines? We share tips on communicating with clients when projects take longer than expected.', 308),
(1869, 'Looking for font debugging tools in Firefox? We\'ve got just what you need to test local vs web fonts.', 308),
(1870, 'Hear some wacky AI-generated listener questions and more during our fun new potluck episode!', 308),
(1871, 'Ever wonder what else the link tag can do? Tune in to hear about all its weird and wonderful uses! #linktag', 309),
(1872, 'CSS, fonts, favicons - just scratching the surface of what the link tag can do! #linktag', 309),
(1873, 'The link tag - not just for links! Find out its many talents in our latest episode. #linktag', 309),
(1874, 'Preloading, prefetching, preconnecting - level up your link tag skills! #linktag', 309),
(1875, 'Integrity checksums? Module preloading? Expand your link tag knowledge today! #linktag', 309),
(1876, 'Learn the basics of #HTML, #CSS, and #JavaScript for building your first website from @SyntaxFM!', 310),
(1877, 'The foundation of any #website starts with #HTML structure. Learn how from the basics with @SyntaxFM', 310),
(1878, 'Adding styles and appearance to a #website is done with #CSS! Learn core concepts like the cascade from @SyntaxFM', 310),
(1879, 'Curious how to make your first #website but have no experience? This episode from @SyntaxFM breaks it down step-by-step for beginners!', 310),
(1880, 'Don\'t know where to start with #webdev? @SyntaxFM has you covered with an episode explaining core concepts for beginners!', 310),
(1881, 'If you want to build your first #website but don\'t know where to start, this episode from @SyntaxFM is perfect for #beginners and novices!', 310),
(1882, 'Learn how to create your first #website from scratch with @SyntaxFM\'s episode on #HTML, #CSS, and #JavaScript fundamentals!', 310),
(1883, 'Learn all about @TypeScript\'s powerful built-in utility types for creating complex types easily!', 311),
(1884, 'Ever wanted to omit certain fields from a @TypeScript type dynamically? The Omit utility type has got you covered!', 311),
(1885, 'Having trouble with @TypeScript return types? ReturnType utility to the rescue!', 311),
(1886, 'Wish your @TypeScript types could be more flexible? Partial and Required utility types are what you need!', 311),
(1887, 'Don\'t repeat type definitions! Use @TypeScript\'s Pick utility for reusing properties from existing types.', 311),
(1888, 'Should you push clients to adopt newer web tech over traditional WordPress? It depends! #WordPress #WebDev', 312),
(1889, 'Managing and hosting your own backend server can be a pain. Services like @Render may help simplify Node app deployment. #Backend #Hosting', 312),
(1890, 'What\'s the best way to optimize home cooling with a fan in the summer? This Canadian woodworker scientifically tested it out. #Cooling #DIY', 312),
(1891, 'Preparing for web developer job interviews? Make sure to highlight your professional experience even if not directly coding related. #Jobs #WebDev', 312),
(1892, 'Want a fascinating podcast? Check out I Was There Too where minor movie characters are interviewed about their experiences. #Podcasts #Movies', 312),
(1893, 'Just in: Next.js 11 dropped some 🔥 performance updates! We\'ve got the deets on the latest tasty web dev treats!', 313),
(1894, 'Starry eyes 🤩 over the new Astro framework for shipping less JS to the client. We break it down on the latest Syntax pod!', 313),
(1895, 'Curious about GitHub Copilot and how it could change your dev workflow? We ponder whether it will steal all our jobs on the new Syntax ep 🤖👩‍💻', 313),
(1896, 'The Notion API is finally here and we are hyped! Tune into the latest Syntax for the scoop on integrating it into your stack!', 313),
(1897, 'Hear ye, hear ye Solid JS 1.0 is upon us! We chat about the new declarative UI library on the latest must-listen Syntax pod 🎧🎙️', 313),
(1898, 'We spill the tea on Stackblitz ⚡️ for running node in the browser on this week\'s hoppin\' Syntax podcast! 🎙️🔥', 313),
(1899, 'Hear @wesbos @stolinski join @chriscoyier @davatron5000 talking podcasting, web dev stacks, WordPress, and more! #webdev', 314),
(1900, 'Want the tastiest treats on JS, CSS, web dev? Get the inside scoop from @SyntaxFM!', 314),
(1901, '\"Don\'t adopt new tech too early\" - wise words on learning fatigue from @SyntaxFM', 314),
(1902, 'Crossover podcast fun with @SyntaxFM and @ShopTalkShow', 314),
(1903, 'The world of web dev moves so fast! @SyntaxFM helps make sense of it each week #podcasts', 314),
(1904, '@SyntaxFM and @ShopTalkShow discuss balancing learning new tech vs fatigue  - good perspective!', 314),
(1905, '@wesbos gives the lowdown on lawncare YouTube - unexpected gems right there!', 314),
(1906, 'Learn pro tips for making great favicons on the latest @SyntaxFM podcast!', 315),
(1907, 'Favicons might seem simple, but there\'s a lot you can do to take them to the next level. Tune in to @SyntaxFM now!', 315),
(1908, 'Want the 411 on making awesome animated and dark mode favicons? We\'ve got you covered on @SyntaxFM\'s latest episode.', 315),
(1909, 'Level up your favicon game with handy tricks and tools from the @SyntaxFM crew. Check out their new ep now!', 315),
(1910, 'Don\'t snooze on favicons - they\'re more powerful than you think! Get the lowdown on the @SyntaxFM podcast.', 315),
(1911, 'Got favicons figured out? Think again! The @SyntaxFM fellas have next-level strategies you need to know.', 315),
(1912, 'Take your favicons from meh ???? to wow ???? with pro tips from @SyntaxFM\'s latest ep. Have a listen!', 315),
(1913, 'Get answers to questions on using Svelte in production, implementing permissions APIs, and whether Rescript could replace TypeScript.', 316),
(1914, 'Learn Scott\'s thoughts on always using the bleeding edge vs stable technology and when it makes sense to jump ship.', 316),
(1915, 'Hear discussions on potential vendor lock-in with Next.js, leaving stability for new tech, and Wes\' framework coverage philosophy.', 316),
(1916, 'Learn how the mighty Stylelint can level up your #CSS game and enforce code quality on your team.', 317),
(1917, 'Want your CSS to be squeaky clean and consistent, even with many devs? Get ready to fall in love with Stylelint.', 317),
(1918, 'Missing the structure and standards from ESLint in your CSS? @wesbos and @stolinski have you covered with their breakdown of the powerful Stylelint.', 317),
(1919, 'Manage CSS at scale! @wesbos and @stolinski highlight how Stylelint helps big teams write consistent, quality CSS.', 317),
(1920, 'Curious about CSS linting and enforcing code standards? @wesbos and @stolinski have all the deets on Stylelint - the ESLint for your styles!', 317),
(1921, '.stylelintrc is the new .eslintrc - @wesbos and @stolinski explain how to configure Stylelint to lint CSS/Sass and enforce your team\'s standards.', 317),
(1922, 'React 18 has some exciting improvements like suspense and SSR streaming! Learn all about the new features on the latest Syntax podcast', 318),
(1923, 'Want the lowdown on React 18 and all its new bells and whistles like suspense and SSR? We break it down on Syntax!', 318),
(1924, 'If you\'re curious about React 18 and what it brings to the table, listen to the latest Syntax podcast for the full scoop!', 318),
(1925, 'React 18 is coming in hot with suspense, SSR, and more awesomeness. Get the details on the new Syntax podcast episode out now!', 318),
(1926, 'The Syntax boys are back breaking down all the deets on React 18! Don\'t miss their latest episode covering suspense, SSR, and beyond!', 318),
(1927, 'Want to 10x your dev speed? 🚀 Try out Vite or Parcel 2 for blazing fast builds and hot reloads!', 319),
(1928, 'Say goodbye to long wait times - Vite and Parcel 2 rebuild in milliseconds with smart caching and ESM. The future is here 🔥', 319),
(1929, 'Vite has handy glob imports while Parcel 2 is still in dev. For now, Vite has a slight edge in DX over Parcel.', 319),
(1930, 'React, Vue, Svelte all work out of the box with Vite and Parcel 2. Modern build tools FTW! 🙌', 319),
(1931, 'No more giant Babel configs needed! Vite and Parcel 2 avoid Babel for speed but still allow plugins if needed.', 319),
(1932, 'Want helpful tips for improving your dev portfolio? @scotttolinski and @wesbos review websites on the latest @SyntaxFM!', 320),
(1933, 'On the latest @SyntaxFM, @scotttolinski shares his brilliant office naming ideas as he prepares to move. Not to be missed!', 320),
(1934, '.@wesbos emphasizes why accessibility should be a priority, even on cool, animated portfolio sites on @SyntaxFM.', 320),
(1935, 'Learn how small touches of whimsy can enhance your portfolio site, as discussed by @scotttolinski and @wesbos on @SyntaxFM.', 320),
(1936, '\"Restraint is key\" when adding special effects says @scotttolinski - wise advice on @SyntaxFM portfolio review episode.', 320),
(1937, 'What should you know about HTML headings and structure when building your portfolio site? @wesbos explains on new @SyntaxFM.', 320),
(1938, 'Up next on #SyntaxFM: We demystify those pesky JavaScript timing buzzwords like async, defer, and more!', 321),
(1939, 'Ever get tripped up by terms like synchronous, asynchronous, and concurrent in #JavaScript? We break them down in simple terms on the latest #SyntaxFM', 321),
(1940, 'Callbacks, blocking, lazy loading, and more - we tackle the JavaScript timing buzzwords so you don\'t have to! Tune in to the new #SyntaxFM', 321),
(1941, 'Threads, async, defer, and lazy loading explained in plain English. We decode the JavaScript timing buzzwords on #SyntaxFM - listen now!', 321),
(1942, 'Want to better understand synchronous vs asynchronous operations in JavaScript? We break it down in simple terms on the newest #SyntaxFM episode.', 321),
(1943, 'If JavaScript buzzwords like synchronous, concurrent, and blocking make your head spin, we\'ve got you covered on the latest action-packed #SyntaxFM!', 321),
(1944, 'Want to take your dev tools skills to the next level? @wesbos and @stolinski unpack all the hidden gems in the elements tab!', 322),
(1945, 'Debug layouts, preview animations, manipulate the DOM, and more with these pro tips for mastering the elements tab in dev tools.', 322),
(1946, 'The elements tab is so much more powerful than inspecting HTML and CSS. Learn how to customize, tweak, and debug like a pro with @wesbos and @stolinski!', 322),
(1947, 'Get to know your dev tools! Tune in to @syntaxfm as @wesbos and @stolinski reveal must-know tips for editing the DOM, tracking changes, compatibility checking, and way more in the elements tab.', 322),
(1948, 'Up your dev tools game with @wesbos and @stolinski as they explore animations, computed styles, layout, and tons of customizations for the elements tab on the latest @syntaxfm', 322),
(1949, 'Elements tab power-user? Think again! @wesbos and @stolinski share next-level tips in the latest @syntaxfm for manipulating DOM, debugging styles, replaying animations, checking compatibility, and customizing your dev tools.', 322),
(1950, 'Upcoming #JavaScript proposals could change how we work with arrays, dates, async code, and more! 🎉', 323),
(1951, 'Native JSON imports? Async do blocks? Immutable arrays? We cover 7 exciting #JavaScript proposals that may land in the language soon!', 323),
(1952, 'Want to know what future JavaScript may look like? We talk through 7 interesting proposals like native JSON modules, pattern matching, and more!', 323),
(1953, 'The Temporal proposal aims to improve working with dates in JS - learn more about this and 6 other fascinating proposals that could land in the language!', 323),
(1954, 'Async do blocks, immutable arrays, pattern matching - these JavaScript proposals could level up how we write JS code! 🚀', 323),
(1955, 'JSON modules without transpilation? Pattern matching like Rust? Check out these 7 JavaScript proposals that might make it into the language!', 323),
(1956, 'Tons of great web dev questions answered by @scotttolinski and @wesbos including using Docker, Python vs JS, code prediction tools, and more!', 324),
(1957, 'Want tips on minimum coding setup for beginners? How to export components as web components? @scotttolinski and @wesbos have you covered on the latest Syntax podcast!', 324),
(1958, '@scotttolinski and @wesbos dig into pros/cons of Docker, storing tons of audio files, PropTypes with TypeScript, and more on the Syntax podcast - so many great web dev topics!', 324),
(1959, 'Love @scotttolinski and @wesbos giving advice to an overwhelmed dev dealing with many languages at work - talk to your manager and don\'t be too hard on yourself!', 324),
(1960, 'If you do web development you need to be listening to the @SyntaxFM podcast - the latest episode covers web components, Python vs JS, Docker frustrations, and way more.', 324),
(1961, '@scotttolinski and @wesbos are back at it answering your web dev questions on everything from coding setups to PropTypes to podcast picks!', 324),
(1962, 'Could another site trick your users into submitting unauthorized requests? Learn how CSRF works and how to protect your app! #CSRF', 325),
(1963, 'Beware of cross-site request forgeries! We explain what CSRF is and how cookies can allow it. #CSRF', 325),
(1964, 'Don\'t let hackers forge requests from your site! Check out ways to prevent CSRF like SameSite cookies, CSRF tokens, and referrer headers. #CSRF', 325),
(1965, 'Add CSRF protection to your app with tokens, referrer headers, CAPTCHAs, and more. Learn how on the latest Syntax podcast! #CSRF', 325),
(1966, 'How relaxed are your cookies? 🍪 See how the SameSite attribute can help prevent CSRF requests. #CSRF', 325),
(1967, 'Yikes, even browser vendors make spelling mistakes! The referrer header was originally spelled wrong. #CSRF #TIL 😆', 325),
(1968, 'Learn how container queries work and will allow styling based on available element space from CSS expert @TerribleMiri!', 326),
(1969, 'Hear how cascade layers will let us define specificity order instead of fighting it w/ @TerribleMiri on @SyntaxFM', 326),
(1970, 'Scope is coming to CSS to solve naming conflicts between components says @TerribleMiri on the latest @SyntaxFM podcast episode', 326),
(1971, '.@TerribleMiri shares how she helped make container queries a reality and her work on cascade layers and scope in CSS on the new @SyntaxFM podcast!', 326),
(1972, 'Container queries are coming to CSS thanks to work by @TerribleMiri! Learn how they measure element space for responsive styling on @SyntaxFM', 326),
(1973, 'Calling all CSS nerds! ???? @TerribleMiri breaks down container queries, cascade layers, scope & more on the latest ep of @SyntaxFM', 326),
(1974, 'Learn what SvelteKit is all about in our latest episode! It\'s a new way to build apps with #Svelte - works anywhere, has SSR, SSG, adapters, routing, layouts, code splitting, and more! 🔥', 327),
(1975, 'Looking for a modern web dev framework? Check out @SvelteKit - it has file-based routing, API routes, PostCSS, TS support, code splitting, and cool imports for code organization! 👌', 327),
(1976, 'If you like @nextjs, you\'ll love @SvelteKit! It\'s a powerful new option for building web apps with #Svelte. Shines for flexibility, features, and focusing on HTML/JS. 💡', 327),
(1977, '.@SvelteKit is a fresh take on building web apps - works anywhere, includes features you need, and has a great plugin system. Easier than doing from scratch! 🙌', 327),
(1978, 'For a fast, batteries-included web dev experience, look no further than @SvelteKit! Has adapters, hydration control, layouts, code splitting, and more right out of the box. 🔋', 327),
(1979, 'Need an alternative to @nextjs or @nuxtjs? Check out @SvelteKit - it\'s in beta but already shines for file-based routing, APIs, SSR, and integrations. Promising new option! 👀', 327),
(1980, 'Just in: Wes and Scott talk TypeScript interfaces vs types, React classes vs hooks, first jobs, problem solving strategies, and more in this audience Q&A episode!', 328),
(1981, 'Want to hear Wes and Scott\'s takes on CMS tools, caching GraphQL APIs, using Svelte for new projects, and stainless steel blender bottles? Check out the latestSyntax podcast!', 328),
(1982, 'This week on Syntax: Audience questions on React, TypeScript, CMS tools, problem solving, first web jobs, Svelte, sleep habits, spice organization, and yes, even blender bottles. An action-packed episode!', 328),
(1983, 'Audience Q&A time on @SyntaxFM! 🎙️ Scott and Wes answer your questions on React, TypeScript, CMS tools, caching, scaffolding generators, Svelte, sleep habits, organization, and more.', 328),
(1984, 'Spice organization got you frazzled? This week Wes shares his tips for tidy spices using deli containers on @SyntaxFM\'s audience Q&A episode.', 328),
(1985, 'Up this week on @SyntaxFM: Wes and Scott tackle audience questions on TypeScript, React, CMS tools, caching GraphQL APIs, using Svelte, sleep habits, first web jobs, and the best blender bottles.', 328),
(1986, 'Learn how @wesbos built a Telegram #vaccine bot with #NodeJS and booked his shot! #COVID19', 329),
(1987, 'Reverse engineering pharmacy websites? @wesbos explains how he scraped #vaccine availability using #JavaScript and fetched appointment data.', 329),
(1988, '@wesbos talks hacking together a #vaccine bot to beat vaccine appointment chaos. #DevLife', 329),
(1989, 'Having trouble booking a vaccine? @wesbos coded a Telegram bot to snag appointments using #NodeJS and APIs. Genius! ', 329),
(1990, '@wesbos shares how he automated #vaccine appointment bookings using #JavaScript. Don\'t miss this crazy #dev story!', 329),
(1991, '@wesbos gaming vaccine appointment chaos with homegrown Telegram bots and clever #JavaScript. The devotion!', 329),
(1992, 'Want to add types to your React app? Learn how to set up React + TypeScript and type components, props, state, and more! #react #typescript', 330),
(1993, 'Using React? Don\'t miss this in-depth look at integrating TypeScript for a type-safe React codebase. We cover components, hooks, state, and much more! #reactjs #typescript', 330),
(1994, 'Level up your React skills! Get the scoop on typing components, props, state, effects and other core React concepts with TypeScript. #react #typescript', 330),
(1995, 'React + TypeScript = 🤯 Learn how to supercharge your React apps by adding TypeScript for a type-safe codebase. We deep dive on all the key concepts. #reactjs #typescript', 330),
(1996, 'Take your React apps to the next level by adding TypeScript! Tune in to learn how to setup React with TS and type components, state, effects & more. #react #typescript', 330),
(1997, 'Want typed React components? We walk through typing components, props, state, effects & more with React + TS. Essential info for using the two together!', 330),
(1998, 'Want to get paid for your passion projects? @syntaxfm shares tips for devs on @YouTube sponsors, premium plugins, merch, courses, donations and more!', 331),
(1999, 'Turn your coding skills into cash with @syntaxfm\'s advice on selling online courses, plugins, merch and scoring sweet brand deals for developers.', 331),
(2000, '@syntaxfm helps devs keep it 💯 while still getting paid. Learn how to ethically monetize your projects with their tips on donations, collabs, ads and sponsorships.', 331),
(2001, '⛽️ Running on empty trying to fund your dev work? Let @syntaxfm fill your tank with ways to make money via plugins, training, donations, merch and more!', 331),
(2002, '@syntaxfm helps devs save their integrity AND pay their bills. Here\'s how to score brand deals, donations and more without selling out.', 331),
(2003, 'Devs, time to get paid! @syntaxfm shares how to monetize your skills with courses, plugins, merch, ads, collabs and more 💰', 331);

INSERT INTO `AiTweet` (`id`, `content`, `showNote`) VALUES
(2004, 'Get ready for some spicy takes on tabs vs spaces, light vs dark mode, exports, and more!', 332),
(2005, 'Ever argue about whether foobarbaz is helpful when learning code? We\'ve got strong opinions!', 332),
(2006, 'Wes Bos and Scott Tolinski are revealing their MOST controversial dev opinions - don\'t miss it!', 332),
(2007, 'Which code editor reigns supreme according to Wes and Scott? Hint: It\'s not Vi(m)!', 332),
(2008, 'Today: Wes and Scott are arguing about themes, exports, naming, and foobarbaz examples. Grab your popcorn!', 332),
(2009, 'Should your CSS variables describe color or intention? Let the bike shedding commence!', 332),
(2010, 'Want to enable drag and drop between web apps or customize drag behavior? @wesbos explains JavaScript\'s native #DragAndDrop API and how to leverage it on the latest @SyntaxFM ✅', 333),
(2011, 'Did you know you can store data and metadata about a drag event in JavaScript? Unlock inter-app drag and drop with the native API! More from @SyntaxFM ✅', 333),
(2012, 'Craft a native-feeling drag and drop experience in the browser with JavaScript\'s API - @wesbos shares how on @SyntaxFM\'s latest episode! ✅', 333),
(2013, 'Get the low-down on issues like customizing drag UI and implementing accessibility with the native JavaScript drag and drop API from @SyntaxFM! ✅', 333),
(2014, '@SyntaxFM explores JavaScript\'s #DragAndDrop API for enabling desktop-quality drag and drop in the browser - tune in to learn how! ✅', 333),
(2015, 'Don\'t reinvent the wheel! Learn how to leverage JavaScript\'s native drag and drop API for seamless, inter-app drag and drop on @SyntaxFM\'s latest ✅', 333),
(2016, 'Coming up: Ever wonder why we have SO many HTML tags? @SyntaxFM is diving deep into semantic HTML, accessibility, and even making up their own tags!', 334),
(2017, 'Want your site to be more accessible and rank better in @Google? @SyntaxFM explains why semantic HTML tags are 🔑', 334),
(2018, '⚠️ PSA: Don\'t use divs and spans for everything! @SyntaxFM breaks down when you should use semantic HTML tags instead.', 334),
(2019, '🤯 Who knew there were so many HTML tags most devs never use?! Tune into @SyntaxFM to learn some new ones!', 334),
(2020, '😱 @SyntaxFM just explained the difference between UL and OL tags - it\'s not what you think! (Hint: Order matters)', 334),
(2021, 'Links ≠ Buttons 🚫 Learn why mixing them up is an accessibility ❌ and how to use HTML tags properly from @SyntaxFM', 334),
(2022, 'Heading tags aren\'t just for styling! @SyntaxFM explains why they are critical for accessibility and SEO 🔍', 334),
(2023, 'What HTML tag should exist but doesn\'t? The hosts of @SyntaxFM discuss the tags they wish were native - like autosizing textareas!', 334),
(2024, 'Coming up: The tricky world of styling native HTML elements like selects, inputs, sliders - and how to handle it! #webdev', 335),
(2025, 'Ever tried styling a checkbox? It\'s painful! We\'ll discuss techniques like pseudo elements & pointer events to style the unstylable #html #css', 335),
(2026, 'New web standards effort Open UI wants better native UI controls built into HTML - select lists, date pickers, sliders. We\'re intrigued! #html #accessibility', 335),
(2027, 'Tired of re-implementing the same UI elements in every project? Maybe native web components are the future? #html #webcomponents', 335),
(2028, 'Thinking of building your own custom video player? It\'s a bigger task than you think - compatibility, accessiblity, and more to consider! #html #video', 335),
(2029, 'Heard of shadow DOM? It makes elements like inputs and media players tricky to customize. We discuss ways around it! #html #css #dom', 335),
(2030, 'Get freelancing advice, tips for learning in public, React migration strategies, and more in the latest dev Q&A episode!', 336),
(2031, 'Wes and Scott tackle your questions on freelancing, CSS design, legacy codebases, Rust vs Node backends, and more!', 336),
(2032, 'Struggling with CSS design as a beginner? The latest Syntax episode has some great tips for you!', 336),
(2033, 'Want tips for integrating React into an old codebase or CMS? Check out the latest Syntax podcast episode for strategies!', 336),
(2034, 'How can you leverage previous work experience when freelancing? Wes and Scott share tips in the new podcast episode!', 336),
(2035, 'Ever feel like your codebase is full of duct tape and bailing wire? We\'re talking all about the dreaded technical debt today!', 337),
(2036, 'Technical debt - like a garden left unpruned, it\'s only a matter of time before things get wild and unwieldy.', 337),
(2037, 'Big codebases at old companies tend to accrue lots of tech debt. But you don\'t have to scrap it all - here are some strategies!', 337),
(2038, 'Technical debt happens inevitably in any project, but good practices like testing and styling systems can help avoid the worst of it.', 337),
(2039, 'Sometimes you just have to work around technical debt rather than taking time to fix it. We have stories and strategies!', 337),
(2040, 'Want tips for moving from @WordPress to @markdown? The latest Syntax podcast has you covered.', 338),
(2041, 'Hear @scotttolinski and @wesbos give their takes on dropping IE11 support and whether Safari is the new IE.', 338),
(2042, 'Getting your course or videos pirated? @wesbos shares his advice for moving past frustration and focusing on your true supporters.', 338),
(2043, 'Having trouble accurately testing responsive design on mobile? @scotttolinski breaks down methods for mobile testing using real devices.', 338),
(2044, 'Want to stay on the cutting edge? Check out these hot new web dev frameworks - Astro, Vitkit, SvelteKit and Remix. The future is server!', 339),
(2045, 'Tired of complexity? New frameworks like Astro, Vitkit, SvelteKit and Remix aim for simplicity with SSR, routing, and more out of the box.', 339),
(2046, 'Does the future look bright? With upcoming frameworks like Astro, SvelteKit, Vitkit and Remix, we think so! SSR and simplicity ftw!', 339),
(2047, 'What\'s new in web dev? Astro, SvelteKit, Vitkit and Remix! These fresh frameworks tackle SSR, routing, data loading and more.', 339),
(2048, 'Stay ahead of the curve! Check out Astro, SvelteKit, Vitkit and Remix - the next gen of web frameworks focused on SSR and simplicity.', 339),
(2049, 'Want a peek at the future? We discuss hot new frameworks Astro, SvelteKit, Vitkit and Remix on the latest Syntax podcast episode!', 339),
(2050, 'Learn the difference between any and unknown in TypeScript', 340),
(2051, 'See how to use the never type for mutually exclusive React props', 340),
(2052, 'Find out how definition files explain untyped code to the TS compiler', 340),
(2053, 'Generics allow varied return types from a single TS function', 340),
(2054, 'Type assertions are escape hatches to override TS type inferences', 340),
(2055, 'Want to take your Git skills to the next level? Learn all about rebase in this podcast!', 341),
(2056, 'When should you rebase vs merge? Find out in this deep dive podcast episode!', 341),
(2057, 'Get conflict resolution tips using rebase in this podcast. Your future self will thank you!', 341),
(2058, 'Struggling with messy commits before PR? Rebase is here to save the day!', 341),
(2059, 'Git rebase not clicking? We break down exactly how it works and when to use it in this podcast.', 341),
(2060, 'Level up your Git game and impress your colleagues with pro rebase skills after listening to this podcast!', 341),
(2061, 'Want your commits PR-ready? Rebase those bad boys before merging. We explain how in this podcast!', 341),
(2062, 'Learn how @wesbos designed, sold, and shipped 1,700 t-shirts using TypeScript to optimize order fulfillment! #syntaxfm', 342),
(2063, 'Hear @wesbos explain overcoming shipping and logistics challenges when self-publishing merch. #syntaxfm', 342),
(2064, '@wesbos shares his motivation behind handcrafting a custom merch process vs using print-on-demand services. Quality over convenience! #syntaxfm', 342),
(2065, '.@wesbos built an entire logistics system with TypeScript to sell t-shirts! Hear his lessons learned on automation, shipping, packaging, and more. #syntaxfm', 342),
(2066, 'Don\'t miss @wesbos\'s journey to sell self-designed t-shirts, including setting up Snipcart, custom shipping, label printing, and order fulfillment! #syntaxfm', 342),
(2067, '@wesbos explains the advantage of handcrafted merch over mass produced items. Smaller batches allow for more quality and care! #syntaxfm', 342),
(2068, 'The future is here! Container queries just hit Chrome Canary. Learn all about this game-changing new CSS feature on the latest Syntax podcast.', 343),
(2069, 'Have you tried container queries yet? They just dropped in Chrome Canary and are set to revolutionize responsive CSS. Get the scoop on Syntax!', 343),
(2070, 'Container queries are coming! Find out how they work and what you can build with them in this forward-looking new Syntax episode.', 343),
(2071, 'CSS is evolving fast. Container queries are the next big thing for responsive web design. Learn how they work on the Syntax podcast!', 343),
(2072, 'Container queries will change how you write CSS forever. Learn about this powerful new feature on the latest Syntax podcast episode.', 343),
(2073, 'Get ready to throw out your media queries and embrace container queries! Find out why on the new Syntax podcast.', 343),
(2074, 'Learn all about the powerful dev tools tabs available in Chrome and Firefox from @stolinski and @wesbos!', 344),
(2075, 'Debugging network requests, performance problems, memory leaks, and more - the browser dev tools tabs have you covered. Tips from @stolinski and @wesbos', 344),
(2076, 'Master console logging, service workers, storage, and way more with these pro tips for dev tools tabs from @stolinski and @wesbos', 344),
(2077, 'Firefox vs Chrome - how do the dev tools tabs differ across browsers? @stolinski and @wesbos break it down.', 344),
(2078, 'Want to boost your dev skills and workflow? Don\'t miss this deep dive into browser dev tools from @stolinski and @wesbos!', 344),
(2079, 'Network requests giving you headaches? Console logs making a mess? Tame them both with these dev tools tabs tricks from @stolinski and @wesbos!', 344),
(2080, 'The new #CSS nesting draft looks just like Sass nesting! Write nested styles easier with @nest and ampersand. #webdev', 345),
(2081, 'Stop duplicating selectors! Use CSS nesting to scope styles easily. #CSS', 345),
(2082, 'CSS nesting helps prevent refactoring errors and makes styles easier to read and write. #CSS', 345),
(2083, 'Scope a style? Nest it in CSS! #CSS', 345),
(2084, 'Media queries can be nested in CSS now for better mobile-first styles! #CSS #responsivedesign', 345),
(2085, 'Will CSS nesting work on older browsers? Looks to be backwards compatible! #CSS', 345),
(2086, 'Want to try CSS nesting now? Transpile it with PostCSS! #CSS #webdev', 345),
(2087, 'Struggling with logic on personal projects? It\'s normal! Keep learning and you\'ll get there. #WebDev', 346),
(2088, 'Feeling overwhelmed at a new job? Ask questions and pair program. Most devs want to help!', 346),
(2089, 'The best video hosting services for your next project. We\'ve tried them all!', 346),
(2090, 'Monorepos: Worth the pain or more trouble than they\'re worth? #WebDev', 346),
(2091, 'Refreshing API tokens with parallel requests. We\'ve all been there!', 346),
(2092, 'Learn about essential #VSCode extensions like Easy Snippet, Error Lens and more for faster web dev workflows!', 347),
(2093, 'Level up your #VSCode game with pro tips and must-have extensions from @syntaxfm - you\'ll be coding faster in no time!', 347),
(2094, 'Get more done in #VSCode with handy extensions like Better Comments, File Utils, GitLens and more from @syntaxfm - don\'t code without them!', 347),
(2095, 'Tired of fighting with #VSCode? Get pro tips for extensions, shortcuts and workflows from @syntaxfm to code faster and happier!', 347),
(2096, 'Struggling with #VSCode? Get rapid fire recommendations from @syntaxfm for extensions, settings and shortcuts to improve your workflow!', 347),
(2097, 'Want to get more done in #VSCode every day? Don\'t miss the latest tips and extension recommendations from @syntaxfm!', 347),
(2098, 'Hear the origin story of @caddyserver straight from @mholt. Learn how it\'s improving reliability and security across the web.', 348),
(2099, 'Tired of web server config? @caddyserver handles TLS, proxies, load balancing and more with a simple configuration file.', 348),
(2100, '@caddyserver came along at the perfect time to pair automated TLS certs from @letsencrypt with an easy to use web server.', 348),
(2101, 'Learn why @caddyserver chose @golang to build a robust, secure, and developer-friendly web server.', 348),
(2102, 'Every public website should use HTTPS says @caddyserver creator @mholt. We discuss the importance of encryption for all.', 348),
(2103, '@caddyserver creator @mholt walks through how easy features like load balancing are to implement in Go. Great episode on web servers!', 348),
(2104, 'Learn what the n+1 query problem is and how to solve it with @SyntaxFM!', 349),
(2105, 'Battling slow GraphQL queries? The n+1 problem could be to blame. Here\'s how to fix it.', 349),
(2106, 'Too many trips to the DB? We break down the n+1 problem on @SyntaxFM', 349),
(2107, 'Don\'t let the n+1 problem slow down your app! Check out solutions on the latest Syntax podcast.', 349),
(2108, 'Query optimization 101: let @SyntaxFM explain the n+1 problem and fixes like DataLoader and Prisma.', 349),
(2109, 'Getting bored of too many DB queries? We feel you. Learn how to solve the n+1 problem with @SyntaxFM!', 349),
(2110, 'Get portfolio feedback and tips for standing out in the job hunt. @scotttolinski and @wesbos provide real advice for getting hired.', 350),
(2111, 'Want to improve your portfolio? @scotttolinski & @wesbos critique real examples on the latest Syntax Highlight episode.', 350),
(2112, 'Stand out from the competition during your job search with these portfolio tips from @scotttolinski & @wesbos on Syntax Podcast.', 350),
(2113, 'Looking for web dev job? @scotttolinski & @wesbos share advice for improving portfolios on the latest Syntax Highlight.', 350),
(2114, 'Learn how to make your portfolio shine when applying for web dev jobs. @scotttolinski and @wesbos provide real feedback on Syntax podcast.', 350),
(2115, 'Get actionable tips for improving your portfolio when applying for web dev jobs from @scotttolinski & @wesbos on Syntax podcast.', 350),
(2116, 'Generate fully typed APIs without writing types using @GraphQLCodegen!🚀 #GraphQL', 351),
(2117, 'Never write another React form thanks to @PericlesForms - just pass your GraphQL mutation and it handles the rest!📝', 351),
(2118, '@OGraphQL has created some INCREDIBLE #GraphQL tools like @GraphQLInspector and @GraphQLScalars - check them out!🔥', 351),
(2119, 'Swagger docs can generate entire #TypeScript APIs, React components, and more automatically!💪 So handy for #GraphQL too!', 351),
(2120, 'Strong typing is a game changer - enables awesome low code tools like @GraphQLCodegen and @PericlesForms!👏 #GraphQL', 351),
(2121, 'Don\'t reinvent the wheel - leverage tools like @GraphQLCodegen and @PericlesForms for nearly effortless #GraphQL code!', 351),
(2122, '.@CSSTricks talks benefits of low code #GraphQL tools like @GraphQLCodegen and @PericlesForms - customize as needed!', 351),
(2123, 'Learn how to roll your own rock solid authentication using sessions, JWTs, cookies, and more.', 352),
(2124, 'Should you build your own authentication or use a package? @ScottTolinski and @wesbos weigh in.', 352),
(2125, 'Ever wonder how concepts like JWTs, CORS, CSRF and salted password hashing work? We break it all down in plain English.', 352),
(2126, 'HTTP-only secure cookies are the way to go for auth tokens according to @ScottTolinski. Here\'s why.', 352),
(2127, 'Local HTTPS development frustrating you? @ScottTolinski swears by @caddyserver for lightning fast SSL certs.', 352),
(2128, 'What\'s the difference between encryption, hashing and salting? @wesbos breaks it down.', 352),
(2129, 'Top-notch authentication requires understanding concepts like CSRF, CORS, sessions and more. @SyntaxFM covers them all.', 352),
(2130, 'Learn all about env vars with @wesbos and @stolinski! Keys? Secrets? Dotenv files? They cover it all!', 353),
(2131, 'Ever wonder where to securely store your API keys and database URLs? @wesbos and @stolinski have pro tips for handling env vars right.', 353),
(2132, 'Encrypt your secrets and prefix your client vars - it\'s time to level up your env var game with @wesbos and @stolinski!', 353),
(2133, 'Stop committing secrets to source control! Follow @wesbos and @stolinski\'s advice for managing env vars like a pro.', 353),
(2134, 'Curious how hosts provide dynamic env vars? How node_options works? .env best practices? Learn from @wesbos and @stolinski!', 353),
(2135, 'Env vars can be a pain, but @wesbos and @stolinski break it down into pro tips you can use right away!', 353),
(2136, 'Learn whether @Vercel or @Netlify is best for your next project 👀', 354),
(2137, 'How to structure databases and efficiently write GraphQL mutations for dynamite APIs', 354),
(2138, 'Level up your #testing game with new @Cypress_io features like component testing and test automation 🧪', 354),
(2139, 'Hear @ WesBos and @stolinski weigh in on remote work perks, career changes, securing @Nextjs routes, and whether devs should learn both @Vuejs and @Reactjs.', 355),
(2140, 'Get the scoop on what it would take to recruit @WesBos and @stolinski away from their current gigs.', 355),
(2141, 'TheSyntaxFM duo shares thoughts on @Clubhouse app - the good, bad and ugly.', 355),
(2142, '@WesBos spends his time on courses, @stolinski coding for @LevelUpTutorials. They don\'t do client work anymore.', 355),
(2143, '.@WesBos outsources admin work, @stolinski some dev, video and social. But they keep most work in house.', 355),
(2144, 'Curious what careers @WesBos and @stolinski would have if not web devs? (Hint: tractor hacking is involved)', 355),
(2145, 'Want to upgrade your coding desk setup? @wesbos and @stolinski walk through all their gear for the ultimate web dev workspace.', 356),
(2146, 'Dreaming of the perfect desk setup? Get ideas from @wesbos and @stolinski as they run through their develper gear arsenal.', 356),
(2147, 'Keyboards, cameras, lighting - @wesbos and @stolinski cover it all in their ultimate web dev desk setup extravaganza.', 356),
(2148, 'Step into the shoes of @wesbos and @stolinski and explore their desks, gear, and wishlists for the optimum dev environment.', 356),
(2149, 'Want pro tips for building the ideal coding workspace? @wesbos and @stolinski have you covered with their desk setup lowdown.', 356),
(2150, 'From monitors to notebooks and everything in between, @wesbos and @stolinski leave no stone unturned in the ultimate desk gear guide.', 356),
(2151, 'Want to get hired as a web dev in 2021? @WesBos and @Stolinski share the key skills you need - clean code, JS/CSS fundamentals, React/Vue, and more! #webdev', 357),
(2152, 'Looking for a web dev job this year? @WesBos & @Stolinski cover must-have skills like communication, email writing, React/Vue, and fundamental JS/CSS. Essential tips for making your resume stand out! #webdev', 357),
(2153, 'Fundamentals, frameworks, and soft skills - master these hireable skills in 2021 with tips from @WesBos and @Stolinski on the latest Syntax podcast episode. Your next web dev job awaits! #webdev', 357),
(2154, 'Clean code, React/Vue, CSS fundamentals, communication & writing skills - @WesBos and @Stolinski share the resume boosters you need to land a web dev role. Listen now! #webdev', 357),
(2155, 'Want a new web dev job in 2021? Level up your fundamentals, learn React/Vue, improve soft skills like communication & email writing says @WesBos & @Stolinski. Get hired! #webdev', 357),
(2156, 'The web dev skills that\'ll get you hired in 2021: JavaScript, CSS, React/Vue, APIs, soft skills & more, courtesy of @WesBos and @Stolinski. Essential listening! #webdev', 357),
(2157, 'Hear from @tannerlinsley on building the popular data fetching library React Query 👏', 358),
(2158, 'React Query recently surpassed Relay in GitHub stars! Learn why it\'s so popular from its creator @tannerlinsley 🚀', 358),
(2159, 'Struggling with data fetching, caching, race conditions in React? @tannerlinsley shares how React Query solves these common problems.', 358),
(2160, 'Want to build your own browser dev tools like React Query has? Get pro tips from @tannerlinsley on avoiding the tangled browser API 💡', 358),
(2161, 'Curious what React Server Components means for the future of React Query and data fetching? Get @tannerlinsley\'s insights 🤔', 358),
(2162, 'Get @tannerlinsley\'s thoughts on Remix Runway, a new React framework taking a different approach to routing and static sites 🔥', 358),
(2163, 'Learn how @Cypress_io has become a fantastic end-to-end testing solution with cross-browser support and visual debugging.', 359),
(2164, 'Testing in a real browser with @Cypress_io helps debug issues quickly compared to traditional unit testing.', 359),
(2165, 'The new Cypress Studio records test runs for you - automate testing without writing all the code!', 359),
(2166, '.@Cypress_io has really improved the testing experience with easy mocking, great plugins, and an insightful dashboard.', 359),
(2167, 'Using data-testid for selections and intercepting network requests are two great techniques with @Cypress_io.', 359),
(2168, 'For anyone afraid of testing, @Cypress_io finally makes it feel approachable and even fun.', 359),
(2169, 'Got a burning web dev question? @wesbos and @stolinski probably have thoughts on it. Learn promsie rollbacks, hosting, pricing, tools, and more!', 360),
(2170, 'Want tips on learning new web tech quickly? @wesbos recommends small projects hitting key features. More advice in this potluck episode.', 360),
(2171, 'If you\'re doing full stack work, get the full stack title! More career advice from @stolinski in the latest syntax potluck.', 360),
(2172, '@wesbos explains why clients should own their own GitHub repos for Gatsby + WordPress sites. More hosting wisdom in this potluck episode.', 360),
(2173, 'Learn whether you still need Webpack when using TypeScript compilers like TSC and SWC in our latest episode!', 361),
(2174, 'Do you know the difference between a TS compiler and bundler? We break it down in simple terms on the latest Syntax podcast!', 361),
(2175, 'Want faster TypeScript compilation? @wesbos and @stolinski discuss options like Esbuild and SWC on the newest Syntax episode.', 361),
(2176, 'When should you use Babel vs TSC to compile your TypeScript code? Get the lowdown from @wesbos and @stolinski on Syntax!', 361),
(2177, 'TypeScript experts @wesbos and @stolinski are back with pro tips on TS compilation and bundling in episode #327 of Syntax!', 361),
(2178, 'If you love TypeScript, don\'t miss episode 327 of Syntax! @wesbos and @stolinski answer common TS compiler and bundler questions.', 361),
(2179, 'Want your resume or online presence reviewed? @wesbos and @stolinski give honest feedback on sites, resumes, Twitter accounts and more.', 362),
(2180, 'What makes for a kickass online presence as a developer? @wesbos and @stolinski weigh in with their seasoned perspectives.', 362),
(2181, '@wesbos and @stolinski critique resumes and websites - the good, the bad and the ugly. Take notes for your own online presence!', 362),
(2182, 'The importance of curating an online presence long before a job search begins. Tips from @wesbos and @stolinski on the Syntax podcast', 362),
(2183, 'Too much junk mail? @wesbos rants and gives tips for reducing the paper piles. An issue we can all relate to!', 362),
(2184, 'Hilarious story from @stolinski about getting a new car from Ford thanks to Twitter. The power of social media!', 362),
(2185, 'Learn about the different #keyboardevents like keydown, keyup, and beforeinput 🎹', 363),
(2186, 'Find out what metadata is available on keyboard events - key, code, location, repeat 🔑', 363),
(2187, 'Get pro tips on implementing keyboard shortcuts in your web apps ⌨️', 363),
(2188, 'Learn how to use modifier keys like ctrl, alt, shift and meta (cmd) with key events ❗️', 363),
(2189, 'Discover how to listen for media keys like play, pause, next track in the browser 🎧', 363),
(2190, 'Learn the basics of TypeScript - types, benefits, compilation and more in our latest episode!', 364),
(2191, 'If you\'ve been curious about TypeScript, this is the episode for you! We cover all the fundamentals you need to get started.', 364),
(2192, 'Type hints, easy refactoring, and preventing bugs are just some of the benefits of using TypeScript. Check out our fundamentals episode!', 364),
(2193, 'Get an intro to primitive types, custom types, unions, inference and more in our TypeScript fundamentals episode. Everything you need to know to get started!', 364),
(2194, 'New to TypeScript? We\'ve got you covered! Learn all about types, compilation, benefits and more TypeScript fundamentals in our latest episode.', 364),
(2195, 'Don\'t miss our TypeScript fundamentals episode! We cover types, inference, benefits, compilation and everything else you need to know to get started with TS today.', 364),
(2196, 'The new @LevelUpTuts site rebuilt using Node, React, Snowpack, and more! Hear all about the tech stack and decisions from @stolinski', 365),
(2197, 'Say goodbye to Meteor and hello to a lightning fast Node/React rebuild of @LevelUpTuts! Tune in to the latest @SyntaxFM to hear all about it.', 365),
(2198, 'Curious what it takes to rebuild a complex site like @LevelUpTuts? @stolinski shares the story on the latest @SyntaxFM episode.', 365),
(2199, 'A faster, slicker, and more powerful @LevelUpTuts site rebuilt from the ground up using the latest web tech. Get the scoop on @SyntaxFM now!', 365),
(2200, '.@stolinski rebuilt his baby (@LevelUpTuts) using Node, React, Snowpack, and more powerful tools. Listen in to @SyntaxFM for the details!', 365),
(2201, 'The new @LevelUpTuts site is flying thanks to its rebuild in React, Node, and more modern web tech. Hear the story on the latest @SyntaxFM!', 365),
(2202, 'Learn all about the new Deno runtime from @wesbos and @stolinski on the latest @SyntaxFM podcast!', 366),
(2203, 'Curious about Deno and how it compares to Node.js? Tune in to the latest @SyntaxFM podcast for a great intro.', 366),
(2204, 'If you want to understand Deno\'s sandboxing, ESM modules, and more, check out the new @SyntaxFM podcast episode.', 366),
(2205, 'The new @SyntaxFM podcast covers everything you need to know to get started with Deno in 2021.', 366),
(2206, 'Get the lowdown on Deno direct from @wesbos and @stolinski on @SyntaxFM - don\'t miss it!', 366),
(2207, 'Deno is the new hotness in JavaScript runtimes. Learn why on the latest jam-packed @SyntaxFM podcast.', 366),
(2208, 'The new #AVIF image format is unreal! Half the size of WebP with no visible quality loss. 😱 #webdev', 367),
(2209, 'AVIF is derived from video compression and royalty free - key reasons for great browser support. 🎉 #imageformats', 367),
(2210, 'AVIF has awesome lossy compression - remove data without hurting image quality. 🔥 Files are insanely small! #webperf', 367),
(2211, 'Tools like @Cloudinary, @gatsbyjs, and Squoosh make converting to AVIF a breeze. 💨 This will be huge for page load times! #AVIF', 367),
(2212, 'AVIF has landed in Chrome and Firefox. Support is coming! Time to start testing it out. 🚀 #AVIF #webdev', 367),
(2213, 'Pro tip: Use the Quick Look plugin to preview AVIF images in Finder on your Mac. 👀 #AVIF #webdev', 367),
(2214, 'PSA: Add support for Apple\'s HEIC format to your image uploaders! It\'s 2022, come on people! 😠#webdev #HEIC', 367),
(2215, 'Want tips for quickly transitioning into a high paying dev job? This episode covers that journey!', 368),
(2216, 'Struggling with imposter syndrome as a new developer? Scott and Wes share their advice.', 368),
(2217, 'Curious how Scott and Wes build component libraries? They break it down in this QA episode.', 368),
(2218, 'Should developers focus on reducing emissions? Scott and Wes weigh in on this important question.', 368),
(2219, 'Learn how to create consistent, maintainable font and typography systems with @SyntaxFM!', 369),
(2220, 'Struggling with CSS font sizes? @SyntaxFM covers how to design rock solid type systems so you never have to style fonts again.', 369),
(2221, 'Want your fonts to look professionally designed? @SyntaxFM shares their approach to crafting the perfect CSS typography system.', 369),
(2222, '@SyntaxFM dives into typography - from units to variables to generators that do the design work for you!', 369),
(2223, 'Does your CSS font styling feel random? @SyntaxFM explains why you need a typography system and how to build one.', 369),
(2224, 'Tired of fiddling with font sizes? @SyntaxFM discusses how to leverage tools like type-scale.com to generate the perfect CSS font sizes!', 369),
(2225, 'Don\'t miss the LIVE podcast from @reactathon with @scotupt and @wesbos! Hear their #React wishlist items and hilarious JS or Nay guesses 😂', 370),
(2226, 'Ever wondered if Graphene, Toy Machine or Sputnik V are real JavaScript libraries or just made up? Find out during JS or Nay at the LIVE @reactathon podcast!', 370),
(2227, 'Get ready for some spicy #JavaScript hot takes from @scotupt and @wesbos during their live @reactathon podcast ep! 🔥 From console.log and optional chaining to Framework opinions - they cover it all!', 370),
(2228, '.@scotupt and @wesbos bring the laughs during JS or Nay at the live @reactathon podcast ep! 😂 Guessing if libs like Capcom Strand and Floodlight are real or fake is hilarious when you have no idea what they\'re talking about!', 370),
(2229, 'During the @reactathon live show, @scotupt and @wesbos discuss underrated technologies like @denoland, @remix_run and @xstatejs. Agree or disagree? Listen to find out their takes!', 370),
(2230, 'Want to work at a FAANG? @scotupt and @wesbos share their advice during the @reactathon live podcast on weighing startup vs corporate jobs, learning @typescript and more!', 370),
(2231, 'Learn all about null, undefined, void, never and more faulty values in JavaScript on the latest ep of @SyntaxFM!', 371),
(2232, 'Ever wonder about the difference between undefined and null in JS? @wesbos and @stolinski explain on the new @SyntaxFM!', 371),
(2233, 'Negative zero?! Yup, it\'s a thing! Dive into faulty JS values on the new nothing-themed ep of @SyntaxFM 🤯', 371),
(2234, 'JS devs - don\'t miss the new ep of @SyntaxFM! It covers void, never, falsey values, empty arrays/objects and more.', 371),
(2235, 'This week on @SyntaxFM: Much ado about nothing(ness)! Tune in to learn about undefined, null, void, never and faulty values in JS.', 371),
(2236, 'Intrigued by void, never, null and undefined in JS? The latest @SyntaxFM ep has you covered!', 371),
(2237, 'Scott and Wes predict the web dev trends for 2021 - get ready for growth of #Deno, #TypeScript, #MDX, #Jamstack and more!', 372),
(2238, '2021 will see improvements to #React SSR, #TypeScript tooling, #WASM, #ESM, and #CSS variables according to @stolinski and @wesbos!', 372),
(2239, 'Remote work and programming communities will improve in 2021 says @stolinski and @wesbos - more opportunities ahead!', 372),
(2240, '@stolinski and @wesbos predict build tools and #JavaScript tooling will get easier in 2021 - say bye to messy config files!', 372),
(2241, 'Hear @stolinski and @wesbos discuss their 2021 #webdev predictions - trends like #Jamstack, #AI, #PWAs and more on the way!', 372),
(2242, '@stolinski & @wesbos share their 2021 predictions on @SyntaxFM - don\'t miss thoughts on #React, #Nextjs, #VSCode, #MDX and more!', 372),
(2243, 'Want to code faster than a speeding bullet? Learn how @ScottTolinski uses his favorite keyboard shortcuts and window management tools to get hyper productive in this episode!', 373),
(2244, 'If you\'re still not using a hyper key for custom shortcuts, you\'re missing out big time! Learn how @wesbos sets up his hyper key for max productivity.', 373),
(2245, 'Stop wasting time manually resizing windows 🛑 Learn how @wesbos uses BetterTouchTool\'s custom snap areas to optimize his workspace.', 373),
(2246, '.@ScottTolinski shares how he uses Rocket to bring Slack-style emojis everywhere for faster communication (and more fun!)', 373),
(2247, 'Tired of memorizing esoteric keyboard shortcuts? @wesbos explains how he sets up shortcuts that fit his mental model for each task.', 373),
(2248, 'Don\'t accept the default! @ScottTolinski customizes his VS Code shortcuts for max productivity.', 373),
(2249, 'CSS subgrid arrived but with limited browser support - find out what else Scott and @wesbos predicted for 2020!', 374),
(2250, 'The duo declare IE officially dead for most developers in 2020! What other old tech saw its demise this year?', 374),
(2251, 'NPM made big improvements while highly anticipated NPM Tink never arrived - more 2020 recap with @wesbos on the latest Syntax podcast', 374),
(2252, '@wesbos discusses the long-awaited ES modules support across Node, Deno, webpack and more in 2020 predictions recap on Syntax', 374),
(2253, 'Deno 1.0, Snowpack, unbundled modules and more - did @wesbos and @stolinski get their 2020 web dev predictions right?', 374),
(2254, '@wesbos looked to React Suspense for data loading in 2020 but admits it hasn\'t taken off as expected. More trend recap on Syntax!', 374),
(2255, 'Svelte gained lots of fans in 2020 says @stolinski - find out what other frameworks and tools had big years on the Syntax podcast', 374),
(2256, 'Learn how hosting and web services charge you - per time, resources, bandwidth, users, apps, and work. Find the right pricing model for your needs!', 375),
(2257, 'Ever wondered what a \"dyno\" is or why you have to pay for transforms? We break down pricing models like serverless, VPS, bandwidth, and more.', 375),
(2258, 'Tired of complex pricing pages with fractions of pennies per whosits and whatsits? We explain hosting and web service pricing simply.', 375),
(2259, 'We dig into pricing for serverless, VPS, bandwidth, users, apps, and work so you can pick the right hosting and understand the costs.', 375),
(2260, 'Want to estimate costs for a new hosting provider or web service? We break down how pricing works per time, resources, users, apps, and more.', 375),
(2261, 'Pricing pages full of fractions of cents per minute mystify you? We demystify how hosting providers and web services charge for resources used.', 375),
(2262, 'Are the new Apple Silicon Macs good for web devs? Find out!', 376),
(2263, 'Scott and Wes discuss whether it\'s time to upgrade to the new Macs for web development.', 376),
(2264, 'New Macs are out - will web developers need to switch over? The Syntax guys discuss.', 376),
(2265, 'Want to beat the #ps5 bots? @wesbos explains his web scraping strategy using @PuppeteerJS and @LowDBjs!', 377),
(2266, 'Having trouble scoring a #ps5? Tune in to learn bot tips from @stolinski and @wesbos!', 377),
(2267, 'Bots got you down? Learn how to level up your inventory-checking game with our latest episode!', 377),
(2268, 'Ready to outsmart the #ps5 scalpers? We\'ve got just the bot strategies for you!', 377),
(2269, 'We\'re dropping bot knowledge on how to snag hard-to-find items like the #ps5 - listen in!', 377),
(2270, 'Can a dev outsmart retail bots? Find out on our latest episode!', 377),
(2271, 'Hear @brianleroux explain the core concepts behind #serverless and how it enables new programming models!', 378),
(2272, 'Get the lowdown on tools like @architect_io @BeginHQ @nodejs @denoland from serverless expert @brianleroux on @SyntaxFM!', 378),
(2273, 'Curious about using #TypeScript for #serverless functions? Learn why it rocks from @brianleroux on the latest @SyntaxFM!', 378),
(2274, '.@brianleroux shares pro tips for overcoming limitations like statelessness and cold starts in #serverless on @SyntaxFM - don\'t miss it!', 378),
(2275, 'Learn how #serverless can integrate with legacy apps through proxies and incrementally moving functionality with @brianleroux on @SyntaxFM!', 378),
(2276, 'Find out how tools like @architect_io and @BeginHQ are improving #serverless developer experience from @brianleroux on @SyntaxFM!', 378),
(2277, 'Hear @wesbos and @stolinski chat about the tech behind their recent Syntax 300 live stream podcast episode!', 379),
(2278, 'Getting a live podcast setup with remote guests? Learn how @wesbos and @stolinski made it happen for Syntax 300', 379),
(2279, 'Interested in live podcast streaming? Find out what @wesbos and @stolinski used to make their Syntax 300 episode happen live', 379),
(2280, 'Podcast live streaming tech walkthrough: Learn how @wesbos and @stolinski recorded Syntax episode 300 with remote guests live', 379),
(2281, 'Curious how podcasters live stream video with remote guests? Get the inside tech details from @wesbos and @stolinski on Syntax 300', 379),
(2282, 'Live streaming a podcast sounds complicated, but @wesbos and @stolinski break down exactly how they made it happen for Syntax 300', 379),
(2283, 'Want to know how @gatsbyjs and @nextjs compare for 2021? We break down static vs server rendering, data management, dynamic pages, and more!', 380),
(2284, 'Curious when to use @gatsbyjs vs @nextjs? We compare features like static generation, revalidation, folder routing, and preview modes.', 380),
(2285, 'If you\'re weighing @gatsbyjs vs @nextjs for your next project, this episode has you covered! We dig into the pros and cons of each.', 380),
(2286, 'How do @gatsbyjs and @nextjs stack up in 2021? Tune in to find out!', 380),
(2287, 'We geek out on everything @gatsbyjs vs @nextjs - don\'t miss it!', 380),
(2288, 'Debating between @gatsbyjs and @nextjs? This thorough comparison has got you covered!', 380),
(2289, 'Drop classes and embrace hooks! @wesbos & @stolinski explain why hooks are worth the switch 🔥', 381),
(2290, 'Decoupling state, less duplication, better refs - just some of the reasons @wesbos & @stolinski love React hooks over classes!', 381),
(2291, 'Forget classes! @wesbos makes the case for pure function components with React hooks instead', 381),
(2292, 'Classes schmasses. @stolinski tells us why he converted his entire codebase to React hooks and never looked back!', 381),
(2293, 'More explicit naming, reusable code, improved state - @wesbos breaks down the React hook benefits over class components', 381),
(2294, 'Just in time for the holidays - @wesbos and @stolinski walk through their 2020 gift guide for your favorite web dev! ', 382),
(2295, 'Stuck on gift ideas for the web dev in your life? @wesbos and @stolinski have you covered with recs for tech, fitness, clothing, and more!', 382),
(2296, 'Looking for the perfect gift for a web dev friend or family member? Tune in to the latest @syntaxfm holiday gift guide ep with @wesbos and @stolinski!', 382),
(2297, 'The holidays are here and @syntaxfm has you covered if you need gift ideas for the web devs in your life! Tons of great recommendations from @wesbos and @stolinski', 382),
(2298, '@wesbos and @stolinski deliver a huge list of gift ideas on the latest holiday @syntaxfm gift guide ep - don\'t miss it!', 382),
(2299, 'Need ideas for your web dev shopping list this year? The @syntaxfm 2020 web dev gift guide from @wesbos and @stolinski has you covered!', 382),
(2300, 'Learn how #conventionalcommits can supercharge your commit messages and enable automatic versioning on @SyntaxFM', 383),
(2301, '🚀 Improve your #Git commits and simplify releases with #conventionalcommits - here\'s how they work on the latest @SyntaxFM', 383),
(2302, 'Struggling with good #Git commit messages? #conventionalcommits to the rescue! 🦸‍♂️ Tune in to @SyntaxFM to level up your commits', 383),
(2303, 'Stop guessing and start committing - learn how #conventionalcommits bring intention and function to your #Git commits on @SyntaxFM', 383),
(2304, 'Forget cryptic commit messages! #conventionalcommits level up your Git game with a proven convention. Listen up on @SyntaxFM 🔥', 383),
(2305, 'Hear @scottydotjs and @wesbos discuss how to effectively troubleshoot bugs and fix problems in your code!', 384),
(2306, 'Get pro tips on building your own component library and managing it from @scottydotjs and @wesbos!', 384),
(2307, 'Learn how @RustLang can supercharge your web dev projects when combined with WebAssembly from @scottydotjs and @wesbos!', 384),
(2308, 'The age old framework vs library debate is tackled by @scottydotjs and @wesbos - they say it doesn\'t really matter!', 384),
(2309, '.@sanity_io makes customizing your CMS diff view easy says @wesbos - read their new blog post on it!', 384),
(2310, 'Submit your web dev questions to @SyntaxFM and hear @scottydotjs and @wesbos discuss topics like React, debugging, and more!', 384),
(2311, 'Learn why you should never trust client side validation for security or app logic. Some great examples from @wesbos on @SyntaxFM!', 385),
(2312, 'Client validation is easy for users to manipulate - great examples from @wesbos on why server validation is so important. Don\'t skip it!', 385),
(2313, 'Manipulating client side validation to order unavailable products? @wesbos has you covered on @SyntaxFM - listen in to learn why server validation matters!', 385),
(2314, 'Hilarious example from @wesbos on how he manipulated client validation to \'order\' an out of stock product. Learn why server validation is key on the latest @SyntaxFM', 385),
(2315, 'Think client validation is enough? Think again! Tune into the latest @SyntaxFM to learn from @wesbos\'s regrettable story about why server validation is so important.', 385),
(2316, 'Server validation isn\'t just for security - it improves consistency across platforms. More pro tips on validating user data from @wesbos on @SyntaxFM', 385),
(2317, 'Learn how a passion for @reactjs and chance encounter led to the creation of @reactathon, one of the premier React conferences out there! 🎤📢', 386),
(2318, 'Ever wanted to start your own developer conference? 🤔 @bdunphy shares his origin story and top tips for identifying your motivation, audience and abilities. 💡', 386),
(2319, 'The inside scoop on building a conference from scratch through passion, hustle and transparency. @bdunphy takes us behind the scenes of @reactathon\'s wild ride! 🎢', 386),
(2320, '.@syntaxfm at @reactathon? Find out how the premier React conference hosted everyone\'s favorite web dev podcasters for a special live show! 🎙️', 386),
(2321, 'From hosting @reactjs meetups to running major multi-day conferences...@bdunphy recounts the exhilarating journey behind @reactathon! 🚀', 386),
(2322, 'Want to start a conference but intimidated by the workload? @bdunphy explains how he leveraged his unique skills to grow @reactathon solo!', 386),
(2323, 'Pinterest layouts without JS are finally here! CSS Grid Level 3 brings masonry to the native web 🧱', 387),
(2324, 'CSS Masonry explained: How the new spec packs grid items together in customizable layouts with no JS required! 🖼️', 387),
(2325, 'The future is here! CSS Masonry is landing, completing the holy trinity of Grid, Flexbox and Masonry 🔥', 387),
(2326, 'No more hacky JS solutions! CSS Masonry allows packing grid items in any direction, even RTL flows! 💪', 387),
(2327, 'We\'ve been waiting years for this! CSS Masonry fills the last gap, completing the CSS layout dream team! 🎉', 387),
(2328, 'Get ready for the Neumasonry revival as CSS Masonry drops, allowing flexible Pinterest style layouts! 😎', 387),
(2329, 'The Masonry auto flow property controls packing vs skipping with next row. Learn how in our deep CSS Grid 3 dive! 🤓', 387),
(2330, 'Want to add dark mode and theming to your site? @scotttolinski and @wesbos share their tips on @SyntaxFM!', 388),
(2331, 'Learn how to use color variables, system colors, override classes, and more for implementing dark mode in web dev on the latest @SyntaxFM!', 388),
(2332, 'Struggling with issues like color contrast, inverse sections, SVG colors, and opacity in your themes? @scotttolinski and @wesbos have solutions on @SyntaxFM!', 388),
(2333, 'Get the scoop on upcoming CSS features like color contrast and relative color that will make theming and dark mode much easier from @SyntaxFM!', 388),
(2334, '@scotttolinski and @wesbos walk through the gotchas and solutions for implementing dark mode in web dev on the latest @SyntaxFM - don\'t miss it!', 388),
(2335, 'Get the inside scoop on @jasonlangsdorf\'s new studio setup for creating engaging web dev content!', 389),
(2336, 'What does @jasonlangsdorf think about AI? Find out his perspective on using it as a creation vs publishing tool.', 389),
(2337, 'Ever wondered how @jasonlangsdorf consistently makes great content? He shares his approach to focus and exploration.', 389),
(2338, 'Curious about the React ecosystem these days? @jasonlangsdorf gives his candid thoughts on how he feels it\'s evolving.', 389),
(2339, '.@jasonlangsdorf started seriously pursuing video content back in 2015/2016. Now he\'s going full-time to keep pushing the medium further!', 389),
(2340, 'With so much noise online, @jasonlangsdorf predicts in-person relationships will become even more important for cutting through.', 389),
(2341, 'Learn how @Cloudflare Workers allows deploying serverless code at the edge for speed and scale! #serverless', 390),
(2342, 'Find out how @Cloudflare Workers can modify responses and proxy apps entirely! #edgecomputing', 390),
(2343, 'Hear how @Cloudflare leverages service workers for a standardized edge computing model. #webdev', 390),
(2344, 'Discover how the Winter CG group collaborates on web standards across runtimes like @Cloudflare Workers. #javascript', 390),
(2345, 'Local dev with Wrangler CLI uses the actual @Cloudflare Workers runtime for consistency. #javascript', 390),
(2346, 'Check out the new @Cloudflare AI integration for easy model deployment! #ai #machinelearning', 390),
(2347, 'Don\'t miss the handy cache API in @Cloudflare Workers for persisting data at the edge. #apilearn', 390),
(2348, 'Hear the inside scoop on the tough early days at @npmjs from ex-CTO @darcyclarke', 391),
(2349, 'Get the backstory on @Shopify\'s acquisition of @jet_cooper from @darcyclarke', 391),
(2350, '.@darcyclarke coded for the Grammys and built a book for @ManningBooks while working 3 jobs - true hustle!', 391),
(2351, 'Why monorepos struggle with legacy packages and how @volt_sh plans to fix it with @darcyclarke', 391),
(2352, 'Learn how enterprises securely use private registries on-prem from ex-@npmjs CTO @darcyclarke', 391),
(2353, '.@darcyclarke aims to build the Google of packages with his new project @volt_sh - indexing all packages and metadata', 391),
(2354, 'Learn all about those mysterious #JavaScript maps and sets on the latest @SyntaxFM!', 392),
(2355, 'Spice up your #JavaScript with maps & sets instead of plain arrays & objects - here\'s why on @SyntaxFM', 392),
(2356, 'Buffalo sauce objects & honey garlic arrays - aka maps & sets in JS. Get the scoop on @SyntaxFM', 392),
(2357, 'Stop reaching for arrays & objects in #JavaScript - learn when maps & sets are better on the latest @SyntaxFM', 392),
(2358, 'Map out when to use maps & set your sets straight on @SyntaxFM - #JavaScript maps & sets demystified', 392),
(2359, 'Learn when and how to use the powerful stale while revalidate caching technique for faster page loads!', 393),
(2360, 'Understand why stale while revalidate caching avoids making users wait for background tasks to complete.', 393),
(2361, 'Find out how stale while revalidate caching can instantly serve cached assets while kicking off fresh regenerations in the background.', 393),
(2362, 'Stale while revalidate lets you serve cached content FAST while asynchronously generating fresh content behind the scenes. Genius!', 393),
(2363, 'Don\'t make users wait on slow operations - use stale while revalidate caching for speed while you generate fresh assets in the background.', 393),
(2364, 'Stale while revalidate is like serving day-old bread: not ideal, but better than making every user wait for a fresh loaf!', 393),
(2365, 'Just launched the new @SyntaxFM site? 🎉 Hear all the bugs we hit and lessons we learned in the latest episode!', 394),
(2366, 'Too much data crashed the database and caused timeouts when generating AI transcripts. More launch lessons on @SyntaxFM', 394),
(2367, 'Error monitoring with @getsentry was essential for a smooth launch of the new @SyntaxFM site. More tales from launch day on the podcast!', 394),
(2368, 'We launched @SyntaxFM with TypeScript errors! Learn why that was totally fine and more launch lessons on the latest episode.', 394),
(2369, 'Local dev is FAST but that caused issues when actually launching live. More launch lessons from the new @SyntaxFM site on the podcast!', 394),
(2370, 'Wes came in clutch improving design and polish for the new @SyntaxFM site. Hear more launch tales on the latest episode!', 394),
(2371, '.@Vercel has made launching web apps so much faster these days. More lessons learned from the @SyntaxFM site launch on the podcast!', 394),
(2372, 'Just heard a great @syntaxfm podcast on how to build a website or web app from start to finish - so many great tips!', 395),
(2373, 'Want to learn how to build a website or web app? The latest @syntaxfm podcast covers it all - design, data, testing, hosting, and more.', 395),
(2374, 'If you\'re a web developer looking to level up your skills, don\'t miss the new @syntaxfm podcast on building websites and web apps end-to-end.', 395),
(2375, 'The workflow, languages, frameworks, hosting - @syntaxfm\'s latest podcast has everything you need to know about building for the web.', 395),
(2376, 'Building for the web can seem daunting, but @syntaxfm breaks it down step-by-step in their latest episode on the topic.', 395),
(2377, 'From design systems to end-to-end testing, the @syntaxfm podcast on building websites covers all the steps - highly recommend!', 395),
(2378, 'Just heard @MarkTechson explain the new deferred loading syntax in Angular 17 - super declarative and easy perf optimization!', 396),
(2379, 'Loving the new Angular.dev site - great learning paths, interactive playground, and gorgeous scrolling!', 396),
(2380, '.@MarkTechson shares how frameworks like Angular and Svelte collaborate behind the scenes - all about moving the web forward!', 396),
(2381, 'Turns out @MarkTechson uses VS Code high contrast theme after helping color blind student debug - amazing dedication!', 396),
(2382, 'Don\'t rush to latest web trends says @MarkTechson - focus on fundamentals and spot shifts not fads #angular', 396),
(2383, 'Huge fan of tech radar concept for tracking web tech mentioned by @MarkTechson - adopting not every trend is key', 396),
(2384, 'Go check out @MarkTechson\'s Angular encouragement videos #goodmorningwithmark for getting unstuck', 396),
(2385, 'Want to step up your CSS game? Check out these 5 new CSS features covered in the latest Syntax podcast episode!', 397),
(2386, 'Learn about cool new CSS powers like nth child microsyntax, CSS motion path, and more on the newest Syntax podcast!', 397),
(2387, 'Level up your CSS skills with the latest Syntax podcast going over 5 fresh CSS features you need to know about!', 397),
(2388, 'Curious what new CSS superpowers are coming down the pipeline? Get the scoop in the latest Syntax podcast episode!', 397),
(2389, 'Syntax podcast is back with a jam-packed episode all about 5 new must-know CSS features. Tune in to get the details!', 397),
(2390, 'The Syntax crew has done it again - an info-packed new ep highlighting 5 cutting edge CSS features you\'ll want in your toolkit.', 397),
(2391, 'TypeScript is here to stay despite the haters! Learn why on the latest @SyntaxFM potluck episode.', 398),
(2392, 'Want to build web apps with Flutter? 🦋 It\'s possible but missing key browser APIs. More in the new potluck ep from @SyntaxFM.', 398),
(2393, 'Having trouble with modern workflows for your WordPress site? We\'ve got you covered on the new @SyntaxFM potluck episode.', 398),
(2394, 'Looking for a new Rust project idea? We\'ve got tons of recommendations on the latest potluck episode from @SyntaxFM - don\'t miss it!', 398),
(2395, 'Did you know you can use MongoDB to store AI embeddings for powerful semantic search? Just one of many tips in the new @SyntaxFM potluck ep!', 398),
(2396, 'Shoelace is a 🔥 web component library for framework-agnostic components. More tips like this on the new @SyntaxFM potluck episode.', 398),
(2397, 'Secure remote access solutions like @Tailscale are a must for web devs. Tons more tips in the latest potluck episode from @SyntaxFM!', 398),
(2398, 'Learn how CSS Layers can solve your specificity problems in this week\'s episode of Syntax!', 399),
(2399, 'Struggling with CSS cascade and overrides? @wesbos and @stolinski discuss how CSS Layers can help on the latest Syntax podcast!', 399),
(2400, 'If you write CSS, you need to listen to this week\'s Syntax podcast on CSS Layers - a new way to control cascading and overrides.', 399),
(2401, 'CSS Layers are supported across browsers and help solve specificity issues - listen to the latest @SyntaxFM podcast to learn how they work!', 399),
(2402, 'Tired of !important and super specific selectors? Give CSS Layers a try - @SyntaxFM covers how they work on the newest episode.', 399),
(2403, 'Get your specificity issues under control with CSS Layers - now supported across browsers. Learn how they work on @SyntaxFM\'s newest podcast episode.', 399),
(2404, 'Want to get into #DevRel? @whitep4nth3r shares her advice on the skills you need and how to gain experience. #webdev', 400),
(2405, 'Devs don\'t want to be marketed to by companies says @whitep4nth3r. Learn why authenticity is so key in #DevRel.', 400),
(2406, 'How much time should DevRel folks spend writing about the product vs their own interests? @whitep4nth3r weighs in.', 400),
(2407, '.@whitep4nth3r shares the challenges of blogging quotas in #DevRel roles. Learn why they may not yield the best content.', 400),
(2408, 'Pick just 1 platform, not all, recommends @whitep4nth3r for those wanting to get into #DevRel. Focus your efforts in 1 place first.', 400),
(2409, 'What was one of @whitep4nth3r\'s favorite early internet sites? The mysterious Hell.com. She recreated it with Astro and jQuery!', 400),
(2410, 'Get ready for some exciting new #JavaScript APIs landing in 2024 like standardized source maps, temporal and array grouping!', 401),
(2411, 'Learn how to format durations localized to any language with the new Intl duration format #JavaScript API!', 401),
(2412, 'Import JSON files directly into your #JavaScript without any compilers! JSON imports are coming!', 401),
(2413, 'Change #regex flags within expressions using the new regex modifiers proposal - handy for browser TextMate support!', 401),
(2414, 'Easily group arrays by any property with the new array grouping #JavaScript method! No more reduces!', 401),
(2415, 'Immutable array methods like sort and splice are here! Upgrade your array skills for 2024!', 401),
(2416, 'Just launched podcast with @mikrut of @payloadcms talking how it provides batteries-included backend for #TypeScript web apps', 402),
(2417, 'Want to build full web apps fast without constantly re-building admin UIs and backends? Get insight into @payloadcms on latest podcast', 402),
(2418, 'New @SyntaxFM podcast covers how @payloadcms moves past traditional CMS to provide structured data and tooling for whole #TypeScript apps', 402),
(2419, 'Tired of complexity in #JamStack and headless systems? Get the inside scoop on @payloadcms plans to simplify in our latest podcast', 402),
(2420, '.@payloadcms creator shares his vision to make it the #Laravel or #RubyOnRails of TypeScript web dev in our new podcast episode', 402),
(2421, 'Want the inside scoop on @payloadcms plans with @NextJs, visual editing, component library and more? Check our latest podcast episode', 402),
(2422, 'Get the scoop on using #ARIA roles & labels to make your sites tasty & accessible!', 403),
(2423, 'Want your web apps scrumptious for users AND screen readers? We\'ve got the recipe with ARIA!', 403),
(2424, 'Accessibility lawsuits are no trick - make sure your site plays nice with #a11y!', 403),
(2425, '#ARIA roles describe an element\'s purpose, while labels provide context to users. Our tips will have you cooking!', 403),
(2426, 'Use #ARIA labeled by to associate labels from one element\'s ID to another - a frightful tool for accessibility!', 403),
(2427, 'Can you really trust random npm packages? 🤔 We discuss scanning for malicious code and tools like @socketdev to parse packages safely', 404),
(2428, 'Ever wonder how @WebTorrent works? 🌐 We break down the p2p magic behind streaming video right in your browser', 404),
(2429, 'What\'s this new Wormhole thing for sharing files? 📎 End-to-end encryption, built on WebTorrent, and some very clever streaming', 404),
(2430, 'Thoughts on the ethics of protestware injected into popular open source packages? 💭 Some interesting examples that made it into production', 404),
(2431, 'Learn how the observer pattern can take your webdev skills to the next level! #webdev', 405),
(2432, 'Gaming and web apps both use the observer pattern - find out why on the latest #SyntaxFM podcast!', 405),
(2433, 'Keen to master observables and reactivity in JS? Start here with the observer design pattern basics. #JavaScript', 405),
(2434, 'Level up: learn why the observer pattern is key for decoupled and scalable web architecture. #webdev', 405),
(2435, 'Take your #Angular skills up a notch by understanding its observer and observable features. Listen in!', 405),
(2436, 'Want the low-down on promises, streams, observables AND observer pattern? We\'ve got you covered on the #SyntaxFM pod', 405);

INSERT INTO `Guest` (`id`, `name`, `name_slug`, `twitter`, `github`, `url`, `of`) VALUES
('00c03566-061b-4d1c-a056-7ce6f01ab080', 'Harry Dry', 'harry-dry', 'harrydry', NULL, 'https://marketingexamples.com/', ''),
('0115f161-4547-4665-97a1-cd34dc4d94c2', 'Tanner Linsley', 'tanner-linsley', 'tannerlinsley', 'tannerlinsley', 'https://tannerlinsley.com/', ''),
('0ec997f0-2c90-4fae-9647-6d174db9b9ce', 'Andris Reinman', 'andris-reinman', 'andrisreinman', 'andris9', NULL, ''),
('1225d40d-ba6d-4e98-9ad2-8abaaeae2a73', 'Tomek Sułkowski', 'tomek-sulkowski', 'sulco', 'sulco', NULL, ''),
('132d74f9-4bec-478b-8ed9-9b1a33cedd66', 'Matt Rothenberg', 'matt-rothenberg', 'mattrothenberg', 'mattrothenberg', 'https://mattrothenberg.com/', ''),
('19a3f83b-de3d-4bd3-8329-6f9c8aacc31a', 'Steve Sewell', 'steve-sewell', 'Steve8708', 'steve8708', NULL, ''),
('1caeb787-4955-4574-80a6-96e6c0961903', 'Jared Palmer', 'jared-palmer', 'jaredpalmer', 'jaredpalmer', 'https://jaredpalmer.com/', ''),
('219b22d1-460f-40ce-b33a-eb3138fc672c', 'Eduardo Bouças', 'eduardo-boucas', 'eduardoboucas', 'eduardoboucas', 'https://eduardoboucas.com', ''),
('2498daa6-828d-4177-8d1f-3f6f219169f3', 'Connor Finlayson', 'connor-finlayson', 'FinlaysonConnor', NULL, 'https://www.connorfinlayson.com', ''),
('26e07c05-bb55-43cf-b641-3a0bf56eaf68', 'Hans Skillrud', 'hans-skillrud', 'DeepSpaceHans', NULL, 'https://www.deepspacehans.com/', ''),
('270f7adf-ffb5-423f-b179-9d93eb59fbc9', 'Dustin Schau', 'dustin-schau', 'SchauDustin', 'DSchau', 'https://dustinschau.com/', ''),
('2b1e1464-c80a-4485-bf6b-fac507cc8f1d', 'Miriam Suzanne', 'miriam-suzanne', NULL, 'mirisuzanne', 'https://www.miriamsuzanne.com/', ''),
('2d41a747-5825-4efd-a9e6-f65b4fdbf1f7', 'Filipe Ferreira', 'filipe-ferreira', 'fbritoferreira', 'fbritoferreira', 'https://fbritoferreira.com', ''),
('2d4a809a-afca-4a7e-a050-0eb62ff8f9a5', 'Ryan Carniato', 'ryan-carniato', 'RyanCarniato', NULL, NULL, ''),
('2e4a2d14-41fb-43d7-a32e-2caae253c6a2', 'Justin Fagnani', 'justin-fagnani', 'justinfagnani', 'justinfagnani', 'https://justinfagnani.com/', ''),
('30cea231-c01f-4648-ba50-74a423e0d96a', 'TJ DeVries', 'tj-devries', 'teej_dv', 'tjdevries', NULL, ''),
('3129d04f-359c-424f-86ee-bc8847293a3e', 'Dylan Jhaveri', 'dylan-jhaveri', 'dylanjha', 'dylanjha', 'https://www.mux.com/', ''),
('3250bc02-a42d-45c2-b611-c46708c52b7a', 'Brad Touesnard', 'brad-touesnard', 'bradt', 'bradt', 'https://bradt.ca', ''),
('36f48799-cf06-436b-894a-0049ee57ac9b', 'Jerome Hardaway', 'jerome-hardaway', 'JeromeHardaway', 'jeromehardaway', NULL, ''),
('371cf332-28fa-47c6-a3e3-52eefa857a18', 'Matt Holt', 'matt-holt', 'mholt6', 'mholt', 'https://matt.life/', ''),
('373e2985-fec9-4461-adef-14ccd4ca7a76', 'Geoffrey Huntley', 'geoffrey-huntley', 'GeoffreyHuntley', 'ghuntley', 'https://www.ghuntley.com', 'Gitpod'),
('3b0251d2-e109-4795-b21a-ca615354b811', 'Benjamin Dunphy', 'benjamin-dunphy', 'benghamine', 'dunphyben', NULL, ''),
('3bfcb059-2cb9-40a2-a77a-a89971d8948b', 'Jason Bahl', 'jason-bahl', 'jasonbahl', 'jasonbahl', 'https://www.wpgraphql.com', ''),
('419d9a6a-234a-4b01-945e-ebd4a19a1124', 'David K Piano', 'david-k-piano', 'davidkpiano', 'davidkpiano', NULL, ''),
('445b630c-be84-4644-8a7c-d0aa476db4d8', 'Victor Savkin', 'victor-savkin', 'victorsavkin', 'vsavkin', 'https://nx.app/company', ''),
('44a43cbb-c371-4078-bd23-0bab3c620252', 'Josh Comeau', 'josh-comeau', 'joshwcomeau', 'joshwcomeau', 'https://www.joyofreact.com/', ''),
('4533bbe8-ae0a-4257-995c-9ad14f43ccc5', 'The Primeagan', 'the-primeagan', 'ThePrimeagen', 'ThePrimeagen', NULL, ''),
('45786191-aeb9-4893-9686-d62ce35a147c', 'Eric Sartorius', 'eric-sartorius', 'EricSSartorius', 'ericssartorius', 'https://www.purefunc.io/', ''),
('48be657c-9db4-4208-afe3-8d18387f8343', 'Nikolas Burk', 'nikolas-burk', 'nikolasburk', 'nikolasburk', NULL, ''),
('48beb7d1-5408-4d62-8cc1-99c357670a42', 'Andrey Mishchenko', 'andrey-mishchenko', NULL, NULL, NULL, ''),
('49203747-a989-42a6-80f8-d9f010cbbbd1', 'Espen Hovlandsdal', 'espen-hovlandsdal', 'rexxars', 'rexxars', 'https://espen.codes/', ''),
('4ea1905b-b1e6-492a-9b71-3a19d9db9472', 'Travis Neilson', 'travis-neilson', 'travisneilson', 'travisneilson', 'http://travisneilson.com/', 'Google'),
('51bc398d-093f-4989-9f79-ecf6e4444fe4', 'Ryan Dahl', 'ryan-dahl', NULL, 'ry', 'https://tinyclouds.org/', ''),
('5c1b28d2-40a4-4a26-ba91-e721420a2140', 'Stuart Bloxham', 'stuart-bloxham', NULL, 'sbloxy123', 'https://www.stuartbloxham.tech/', ''),
('6022b551-db63-46d3-bef2-8b259d6c143f', 'Nicholas Zakas', 'nicholas-zakas', 'slicknet', 'nzakas', 'https://humanwhocodes.com/blog/', ''),
('613fc4c4-bebf-4295-9f7f-3ea4b24ff4f9', 'Darcy Clarke', 'darcy-clarke', 'darcy', 'darcyclarke', 'https://www.darcyclarke.me', ''),
('636ec37b-1389-4870-8747-e03a5be01b7f', 'Donata Skillrud', 'donata-skillrud', 'DonataSkillrud', NULL, 'https://termageddon.com/', ''),
('663038fa-4ce4-49a4-9dec-9366c7d24777', 'Jonny Burger', 'jonny-burger', 'JNYBGR', 'JonnyBurger', 'https://www.jonny.io', ''),
('68918036-daec-413e-8111-1580ab99e5f1', 'David Cramer', 'david-cramer', 'zeeg', 'dcramer', 'https://cra.mr/', 'Sentry'),
('68dc2089-38c4-430f-ae53-cea2fdc5ab36', 'Simen Svale Skogsrud', 'simen-svale-skogsrud', 'svale', 'simen', 'https://sanity.io', ''),
('6a17ec3b-1570-42e4-8ecd-fe3a00fd1b35', 'Pokey Rule', 'pokey-rule', 'PokeyRule', 'pokey', NULL, ''),
('6a182a69-4623-42f7-afc9-d2f8e958ba87', 'Adam Gargoyle', 'adam-gargoyle', 'argyleink', 'argyleink', 'https://nerdy.dev', ''),
('6b6958a3-c137-4018-9763-748928cef6e3', 'Sarah Drasner', 'sarah-drasner', 'sarah_edo', 'sdras', 'https://sarahdrasnerdesign.com', ''),
('6fd870b1-a174-4d59-9c82-c5f99aa3b2bf', 'Adam Cowley', 'adam-cowley', 'adamcowley', 'adam-cowley', 'https://adamcowley.co.uk/', ''),
('71f15836-4f2e-496a-b37a-aaa1bb074007', 'Heather Payne', 'heather-payne', 'heatherpayne', 'heatherpayne', 'https://bento.me/heatherpayne', 'Juno College / Hacker You'),
('71f74245-7d69-483a-b838-0619ea9cbecd', 'Brad Frost', 'brad-frost', 'brad_frost', 'bradfrost', 'https://bradfrost.com/', 'Big Medium'),
('73c15d42-e19f-4064-99c3-9726a906e9fb', 'Chis Coyier', 'chis-coyier', 'chriscoyier', 'chriscoyier', 'https://chriscoyier.net/', ''),
('73e558d6-0980-4879-9463-7d4270682635', 'Steve Krouse', 'steve-krouse', 'stevekrouse', 'stevekrouse', 'https://stevekrouse.com/', ''),
('76b31178-64fb-4580-bcd0-4a29d14aa200', 'Pauline Narvas', 'pauline-narvas', 'paulienuh', 'pawlean', 'https://www.paulinenarvas.com', 'Gitpod'),
('775d9f6c-4667-4580-94ff-1e6b1e224be0', 'Tom Preston-Werner', 'tom-preston-werner', 'mojombo', 'mojombo', 'https://tom.preston-werner.com/', ''),
('7968c23b-b917-4fd1-afd0-0a9d6e6e4ead', 'Shawn Wang', 'shawn-wang', 'swyx', 'sw-yx', 'https://www.swyx.io/', ''),
('79d92bbd-e53d-4b83-87f3-d5106105a390', 'Miško Hevery', 'misko-hevery', 'mhevery', 'mhevery', 'http://misko.hevery.com/', ''),
('7aba04f1-36c2-4f03-989a-646e0334e898', 'Rich Harris', 'rich-harris', 'rich_harris', 'Rich-Harris', 'https://svelte.dev', ''),
('811ef008-261a-4998-8155-e94b71545504', 'Ian Ramzy', 'ian-ramzy', NULL, 'ianramzy', 'https://ianramzy.com', ''),
('8739900b-9fe3-405a-8e67-1999e996f642', 'Jared Sumner', 'jared-sumner', 'jarredsumner', 'Jarred-Sumner', 'https://bun.sh', ''),
('8a99f927-3ee6-495b-aa32-0214520460ad', 'Jake Champion', 'jake-champion', 'jakedchampion', 'JakeChampion', 'https://jakechampion.name/', ''),
('8b54e975-a2e9-483f-af27-3e39e0eccf7c', 'Dr. Courtney Tolinski', 'dr-courtney-tolinski', 'DrTolinski', NULL, NULL, ''),
('8dcd396d-652b-4edd-956d-d723174ec4cd', 'Tim Leland', 'tim-leland', 'TimLeland', NULL, 'https://timleland.com', ''),
('8e119f0b-509f-476d-a345-88efb7c7cb4e', 'Mark Erikson', 'mark-erikson', 'acemarke', 'markerikson', 'https://blog.isquaredsoftware.com/', ''),
('90b70626-9cad-447c-a00f-36e3df4f59fe', 'Brandon Bayer', 'brandon-bayer', 'flybayer', 'flybayer', 'https://www.flightcontrol.dev/', ''),
('9203b224-45a5-4450-ae4b-cfba7fc7877e', 'Nick Hehr', 'nick-hehr', 'hipsterbrown', 'HipsterBrown', 'https://www.hipsterbrown.com/', ''),
('94981948-8a1b-4e2b-9228-b1fc4f02e451', 'Chris Lattner', 'chris-lattner', 'clattner_llvm', 'lattner', 'https://www.nondot.org/sabre/', 'Modular AI'),
('995f373e-b121-4a35-b979-456b7dcd3d02', 'Tim McNamara', 'tim-mcnamara', 'timClicks', 'timClicks', 'https://tim.mcnamara.nz/', ''),
('9b0a900b-6b5a-4539-bbde-d8cdccd62c84', 'Steve Ruiz', 'steve-ruiz', 'steveruizok', 'steveruizok', 'https://www.steveruiz.me/', ''),
('9d81aee0-7ae1-4b96-92b0-b52dc5e9cc24', 'bdougie', 'bdougie', 'bdougieYO', 'bdougie', 'https://b.dougie.dev/', ''),
('a06f6195-7c01-4cd3-9058-4c0888d956bb', 'Kristi Perreault', 'kristi-perreault', 'kperreault95', 'kristiperreault', 'https://kristiperreault.medium.com/', ''),
('a248f3e6-f6af-4a23-91a6-78b46186a78e', 'Brian Leroux', 'brian-leroux', 'brianleroux', 'brianleroux', 'https://brian.io/', ''),
('a73c9c96-9a26-49ab-80c4-cabcc9b4c3ac', 'Taylor Desseyn', 'taylor-desseyn', 'tdesseyn', NULL, 'https://solo.to/tdesseyn', ''),
('a74bf07a-6368-4c17-aa4a-9f60bd915a41', 'Jason Lengstorf', 'jason-lengstorf', 'jlengstorf', 'learnwithjason', 'https://www.learnwithjason.dev/', ''),
('abd451b9-cb29-4405-9545-7b8f80edddbb', 'Mark Techson', 'mark-techson', 'marktechson', 'marktechson', 'https://marktechson.com', ''),
('add00e02-61ee-4310-baac-47da1856266d', 'Fred Schott', 'fred-schott', 'fredkschott', 'fredkschott', 'https://fredkschott.com', 'Astro'),
('b2f163e4-39ce-4844-9f00-5a5c5adb5a14', 'Josh Wardle', 'josh-wardle', 'powerlanguish', 'powerlanguage', 'https://www.powerlanguage.co.uk/', ''),
('b58c4e02-25a9-4180-85a6-454fe74a1c0e', 'Ben Vinegar', 'ben-vinegar', 'bentlegen', 'benvinegar', 'https://benv.ca/', ''),
('b6fa1079-3c0d-4d81-ad8c-91d481f17be5', 'Dave Rupert', 'dave-rupert', 'davatron5000', 'davatron5000', 'https://daverupert.com/', ''),
('b7557b7f-4149-4f4d-a04b-a044edbba790', 'Dax Raad', 'dax-raad', 'thdxr', 'thdxr', 'https://thdxr.com/', ''),
('b762f167-5fb3-4014-a15b-22366bbed6f9', 'Andrew Lisowski', 'andrew-lisowski', 'HipsterSmoothie', 'hipstersmoothie', 'https://www.hipstersmoothie.com/', ''),
('b76e1be6-7af0-4d61-8fd6-d6bbcfd8d47f', 'Idan Gazit', 'idan-gazit', 'idangazit', 'idan', 'https://gazit.me/', ''),
('b9334d13-6154-4032-9c58-7e22a512f82e', 'Lee Robinson', 'lee-robinson', 'leeerob', 'leerob', 'https://leerob.io', ''),
('bb0bf9c1-df2c-40c2-b4f6-f2cbc0ad37be', 'Syed Balkhi', 'syed-balkhi', 'syedbalkhi', NULL, 'https://syedbalkhi.com/', ''),
('be433cf8-8380-4bb5-b205-149b7754c62c', 'Drew Conley', 'drew-conley', 'drewconley13', 'drewconley', 'https://www.coopmode.dev', ''),
('bfd1744e-9996-4e4c-802b-125503149ac8', 'Ryan Florence', 'ryan-florence', 'ryanflorence', 'ryanflorence', 'https://ryanflorence.com/', ''),
('c050735b-0fab-4fd5-a65e-8000c4e6cb8c', 'Alex Johansson', 'alex-johansson', 'alexdotjs', 'KATT', 'https://katt.dev/', ''),
('c48aa268-dcd4-48b1-8bef-8c8b3b4f5969', 'Etienne Lemay', 'etienne-lemay', 'EtienneLem', 'EtienneLem', NULL, 'Missive'),
('c545c6d4-e023-4a1a-9d38-744a39c49bcb', 'Filipe Névola', 'filipe-nevola', 'filipenevola', 'filipenevola', 'https://www.filipenevola.com', ''),
('c90c8d76-ab38-44a1-873b-f2ac81d82415', 'James Mikrut', 'james-mikrut', 'jamesmikrut', NULL, 'https://payloadcms.com/', ''),
('ca591e61-93fd-42d3-bf73-3a611cb8fdff', 'Vu Le', 'vu-le', 'vukyle', 'vukyle', 'https://www.vukyle.com/', ''),
('d072f986-0509-4e9e-9f6a-480859427ee2', 'Sacha Greif', 'sacha-greif', 'SachaGreif', 'sachag', 'https://sachagreif.com/', 'State of JS Survey'),
('d0ed1922-2127-4b09-9238-658fd45270b9', 'Salma Alam-Naylor', 'salma-alam-naylor', 'whitep4nth3r', 'whitep4nth3r', 'https://whitep4nth3r.com/', ''),
('d1cb4ef4-a466-441e-9c39-621fc9be7ef1', 'Brendan Irvine-Broque', 'brendan-irvine-broque', 'irvinebroque', 'irvinebroque', NULL, ''),
('d30e0c20-cb8b-402e-acb7-90b3477391e5', 'Kenneth Lyerly', 'kenneth-lyerly', 'kenput3r', 'kenput3r', 'https://ken.dev', ''),
('d7cdad8d-4407-4d8b-aaac-c54a01987bb5', 'Aiden Bai', 'aiden-bai', 'aidenybai', 'aidenybai', 'https://aidenybai.com/', ''),
('dbc5ec85-6310-4eb6-8580-1aa1348ee09b', 'Sara Soueidan', 'sara-soueidan', 'SaraSoueidan', 'SaraSoueidan', 'https://www.sarasoueidan.com/', ''),
('dce53b10-0839-41a9-a130-8742701cb79f', 'Anselm Hannemann', 'anselm-hannemann', 'helloanselm', 'anselmh', 'https://helloanselm.com', ''),
('e261d4b7-0213-43fe-b262-e9eb10ba0222', 'Armin Ronacher', 'armin-ronacher', 'mitsuhiko', 'mitsuhiko', 'http://armin.ronacher.eu/', ''),
('e436fd86-4653-4548-9c32-0e99c4a9bc22', 'Thomas Mann', 'thomas-mann', 'thomaspaulmann', 'thomaspaulmann', 'thomaspaulmann.com', ''),
('e45055e2-6436-48d7-ae97-815ab7d0fe8e', 'Brandon Roberts', 'brandon-roberts', 'brandontroberts', 'brandonroberts', 'https://brandonroberts.dev', ''),
('e4730765-169b-4d69-8a96-85a8a20309e8', 'Colby Fayock', 'colby-fayock', 'colbyfayock', 'colbyfayock', 'https://www.colbyfayock.com/', ''),
('e59e1a8d-9772-4a50-bf4f-6899d8ab37c8', 'Fabian Kägy', 'fabian-kaegy', 'fabiankaegy', 'fabiankaegy', 'https://fabian-kaegy.com/', ''),
('e5baa84e-7550-45c3-9e10-72a1b2bf3c37', 'Anth Rogan', 'anth-rogan', 'RoganFPS', 'anthrogan', NULL, ''),
('ea9fc336-36f5-4df5-b596-f1ffa82381ad', 'David East', 'david-east', '_davideast', 'davideast', 'https://davidea.st/', ''),
('f0a8feb0-1099-4558-9082-1e4370d4f5ba', 'Bramus Van Damme', 'bramus-van-damme', 'bramus', 'bramus', 'https://www.bram.us/', ''),
('f0c7d7fd-9e3e-421e-b72c-3758e123c532', 'Hursh Agrawal', 'hursh-agrawal', 'hursh', 'hurshagrawal', 'http://www.hurshagrawal.com', ''),
('f429e4ad-c57e-41c5-bec9-6d2cbda32185', 'Caleb Porzio', 'caleb-porzio', 'calebporzio', 'calebporzio', 'https://calebporzio.com/', ''),
('f70c4fb1-1f1f-4e7e-9130-860a21c0309f', 'Josh Larson', 'josh-larson', 'jplhomer', 'jplhomer', 'https://www.jplhomer.org/', ''),
('f958e9fa-de3a-45f0-9ef5-7ed54072cf7d', 'Rita Kozlov', 'rita-kozlov', 'ritakozlov_', 'rita3ko', 'https://ritakozlov.com/', ''),
('f9d174aa-93d8-4a31-87d8-db7c7f569c00', 'Courtland Allen', 'courtland-allen', 'csallen', 'courthead', 'https://www.indiehackers.com/csallen', 'Indie Hackers'),
('fa9658a1-0261-4877-8e0b-e2e6d04b88a1', 'Nate Weinert', 'nate-weinert', 'natebirdman', 'natew', 'https://tamagui.dev', ''),
('fe1763f2-2c8b-463f-83a5-28a7c105d739', 'Katherine Mello', 'katherine-mello', 'mell0kat', 'mell0kat', 'https://www.rolling-with-kat.blog', ''),
('fed86238-d2a2-402c-a37d-d559fa407aa0', 'Feross Aboukhadijeh', 'feross-aboukhadijeh', 'feross', 'feross', 'https://feross.org/', ''),
('ff2c430d-7884-4e43-901a-65b05dfbf6b0', 'Kilian Valkhof', 'kilian-valkhof', 'kilianvalkhof', 'Kilian', 'https://kilianvalkhof.com', '');

INSERT INTO `Link` (`id`, `name`, `url`, `timestamp`, `showNote`) VALUES
(1, 'Syntax Survey', 'https://syntax.fm/survey', '00:00', 2),
(2, 'Syntax Toronto Meetup', 'https://syntax.fm/meetup', '00:24', 2),
(3, 'Sentry', 'https://sentry.io/', '02:10', 2),
(4, 'Century', 'https://century.io/', '02:33', 2),
(5, 'Bun JS', 'https://bun.sh/', '02:47', 2),
(6, 'Hasura', 'https://hasura.io/', '32:51', 2),
(7, 'Algolia', 'https://www.algolia.com/', '32:58', 2),
(8, 'Stripe', 'https://stripe.com/', '32:58', 2),
(9, 'Capacitor', 'https://capacitorjs.com/', '32:58', 2),
(10, 'Headings Map (Firefox)', 'https://addons.mozilla.org/en-US/firefox/addon/headingsmap/', '22:34', 3),
(11, 'Headings Map (Chrome)', 'https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi?hl=en', '22:34', 3),
(12, 'ally.ac', 'https://www.ally.ac/', '22:19', 3),
(13, 'Guidance Counselor podcast', 'https://podcasts.apple.com/us/podcast/the-guidance-counselor/id1499882229', '55:24', 4),
(14, 'Unicorn Finders podcast', 'https://podcasts.apple.com/us/podcast/unicorn-finders/id1608561091', '55:32', 4),
(15, 'Taylor\'s website', 'https://www.tdesseyn.com/', '55:44', 4),
(16, 'State of CSS Survey', 'https://stateofcss.com', '00:21', 5),
(17, 'Sentry', 'https://sentry.io', '03:59', 5),
(18, 'Kodiak Cakes', 'https://kodiakcakes.com/', '56:09', 5),
(19, 'Beba Clip Containers', 'https://bebacomfort.com/products/beba-clip-container', '55:29', 5),
(20, 'FITC Web Unleashed', 'https://fitc.ca/event/webu22/', '58:25', 5),
(21, 'Syntax TikTok', 'https://www.tiktok.com/@syntaxfm', '01:00:08', 5),
(22, 'Tori', 'https://tori.js.org/', '00:00', 6),
(23, 'Electron', 'https://electronjs.org/', '00:00', 6),
(24, 'Psychology Today', 'https://www.psychologytoday.com', '22:14', 7),
(25, 'Headspace', 'https://www.headspace.com', '27:15', 7),
(26, 'Calm', 'https://www.calm.com', '27:22', 7),
(27, 'Svelte', 'https://svelte.dev/', '00:02:24', 8),
(28, 'SvelteKit', 'https://kit.svelte.dev/', '00:03:25', 8),
(29, 'Prisma', 'https://www.prisma.io/', '00:21:05', 8),
(30, 'Charles Proxy', 'https://www.charlesproxy.com/', '16:45', 9),
(31, 'Proxyman', 'https://proxyman.io', '25:25', 9),
(32, 'HTTP Toolkit', 'https://httptoolkit.tech/', '26:55', 9),
(33, 'mitmproxy', 'https://mitmproxy.org/', '28:56', 9),
(34, 'Little Snitch', 'https://www.obdev.at/products/littlesnitch/index.html', '29:43', 9),
(35, 'Fiddler', 'https://www.telerik.com/fiddler', '32:10', 9),
(36, 'Stuart\'s Portfolio', 'https://www.stuartblockson.tech/', '26:29', 10),
(37, 'Sentry', 'https://sentry.io', '00:11', 11),
(38, 'Vampire Survivors', 'https://store.steampowered.com/app/1794680/Vampire_Survivors/', '36:29', 11),
(39, 'Better Display', 'https://github.com/waydabber/BetterDisplay', '45:54', 11),
(40, 'Syntax FM', 'https://syntax.fm', '00:25', 12),
(41, 'Wes\' CSS nesting tweet', 'https://twitter.com/wesbos/status/1627697402181840896', '00:43', 12),
(42, 'Bling.js', 'https://github.com/ericelliott/blingjs', '28:14', 12),
(43, 'Lightning CSS', 'https://lightningcss.dev/', '29:39', 12),
(44, 'Astro', 'https://astro.build', '00:39', 13),
(45, 'Sentry', 'https://sentry.io/', '01:41', 13),
(46, 'Vercel', 'https://vercel.com', '23:02', 13),
(47, 'Civet', 'https://github.com/civetweb/civet', '06:53', 14),
(48, 'Sanity Grok', 'https://www.sanity.io/docs/graphql', '17:16', 14),
(49, 'Ask the Code plugin', 'https://www.askthecode.com/', '37:53', 14),
(50, 'Talk with the Docs plugin', 'https://talkwithdocs.com/', '38:39', 14),
(51, 'Web Performance Resources', 'https://www.webperf.tips/', '23:12', 14),
(52, 'Syntax.fm Podcast', 'https://syntax.fm', '00:21', 15),
(53, 'Wes\' Beginner JS Course', 'https://LearnJavaScript.today', '01:19', 15),
(54, 'Tricky Bits: Closures Article', 'https://wesbos.com/javascript-closures', '20:34', 15),
(55, 'Mark Erikson\'s ESM blog post', 'https://blog.isquaredsoftware.com/posts/publishing-packages-esm/', '00:36', 16),
(56, 'Are The Types Wrong?', 'https://www.arethetypeswrong.com/', '32:13', 16),
(57, 'Satori', 'https://satori.dev', '11:32', 17),
(58, 'Vercel', 'https://vercel.com', '11:14', 17),
(59, 'Cloudinary', 'https://cloudinary.com', '14:22', 17),
(60, 'Puppeteer', 'https://github.com/puppeteer/puppeteer', '18:05', 17),
(61, 'Playwright', 'https://playwright.dev/', '26:37', 17),
(62, 'Canva', 'https://www.canva.com/', '29:08', 17),
(63, 'Sentry', 'https://sentry.io', '00:30', 18),
(64, 'MacroFactor', 'https://macrofactorapp.com/', '19:21', 18),
(65, 'Million.js', 'https://millionjs.org', '00:54', 19),
(66, 'JS Framework Benchmark', 'https://github.com/krausest/js-framework-benchmark', '14:08', 19),
(67, 'Million.js Kitchen Sink', 'https://sink.millionjs.org/', '48:56', 19),
(68, 'Syntax Podcast', 'https://syntax.fm', '00:01', 20),
(69, 'Sentry', 'https://sentry.io/', '04:41', 20),
(70, 'Syntax podcast', 'https://syntax.fm', '00:01', 21),
(71, 'Syntax Podcast', 'https://syntax.fm', '00:39', 22),
(72, 'Dev Tools FM Podcast', 'https://devtools.fm', '02:04', 22),
(73, 'libavjs', 'https://github.com/Descript/libavjs', '11:24', 22),
(74, 'Radix UI', 'https://www.radix-ui.com/', '18:41', 22),
(75, 'XState', 'https://xstate.js.org/', '19:57', 22),
(76, 'Playwright', 'https://playwright.dev/', '31:49', 22),
(77, 'Iosevka font', 'https://typeof.net/Iosevka/', '51:51', 22),
(78, 'Lexical', 'https://lexical.dev/', '56:34', 22),
(79, 'Shad CN', 'https://shadcn.com/', '58:27', 22),
(80, 'Sentry', 'https://sentry.io', '00:34', 23),
(81, 'Promise resolvers', 'https://github.com/tc39/proposal-promise-with-resolvers', '01:37', 23),
(82, 'Array.at()', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at', '04:08', 23),
(83, 'Immutable array methods', 'https://v8.dev/features/immutable-array-builtins', '05:40', 23),
(84, 'Array.fromAsync()', 'https://github.com/tc39/proposal-array-from-async', '21:51', 23),
(85, 'Array grouping', 'https://github.com/tc39/proposal-array-grouping', '27:21', 23),
(86, 'Observable events', 'https://github.com/allenwb/ESObservables/', '31:17', 23),
(87, 'Import assertions', 'https://github.com/tc39/proposal-import-assertions', '35:18', 23),
(88, 'Map.emplace()', 'https://github.com/tc39/proposal-upsert', '39:25', 23),
(89, 'Decorators', 'https://github.com/tc39/proposal-decorators/', '41:31', 23),
(90, 'Pattern matching', 'https://github.com/tc39/proposal-pattern-matching', '43:49', 23),
(91, 'Angular', 'https://angular.io/', '05:55', 24),
(92, 'Lit', 'https://lit.dev/', '05:55', 24),
(93, 'TC39 Decorator Proposal', 'https://github.com/tc39/proposal-decorators', '04:06', 24),
(94, 'Flight Control', 'https://flightcontrol.dev/', '00:26', 25),
(95, 'Blitz JS', 'https://blitzjs.com/', '01:33', 25),
(96, 'Temporal', 'https://temporal.io/', '25:31', 25),
(97, 'StackBlitz example', 'https://stackblitz.com/edit/typescript-8svz9m?file=index.ts', '06:07', 26),
(98, 'Past Syntax episode on stretching', 'https://syntax.fm/show/157/hasty-treat-stretching-at-your-desk', '20:15', 26),
(99, 'Stylex', 'https://www.stylex.com', '04:25', 27),
(100, 'Remix', 'https://remix.run', '00:36', 28),
(101, 'React Router', 'https://reactrouter.com', '00:48', 28),
(102, 'Cloudflare Workers', 'https://workers.cloudflare.com', '09:49', 28),
(103, 'Vercel', 'https://vercel.com', '11:55', 28),
(104, 'Tailwind UI', 'https://tailwindui.com', '17:11', 28),
(105, 'Structured Clone', 'https://developer.mozilla.org/en-US/docs/Web/API/StructuredClone', '26:19', 29),
(106, 'Worker Tools', 'https://worker.tools/', '29:19', 29),
(107, 'Fetch API', 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API', '11:10', 29),
(108, 'new URL()', 'https://developer.mozilla.org/en-US/docs/Web/API/URL/URL', '14:55', 29),
(109, 'URLSearchParams', 'https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams', '15:20', 29),
(110, 'Web Streams', 'https://developer.mozilla.org/en-US/docs/Web/API/Streams_API', '23:00', 29),
(111, 'File System Access API', 'https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API', '36:56', 29),
(112, 'File API', 'https://developer.mozilla.org/en-US/docs/Web/API/File', '39:36', 29),
(113, 'Rust By Example - Doc Comments', 'https://doc.rust-lang.org/rust-by-example/meta/doc.html', '14:36', 30),
(114, 'Cargo', 'https://doc.rust-lang.org/cargo/', '07:09', 30),
(115, 'Nodemailer', 'https://nodemailer.com', '01:18', 31),
(116, 'Mailtrain', 'https://mailtrain.org/', '01:30', 31),
(117, 'Ethereal Email', 'https://ethereal.email/', '01:36', 31),
(118, 'Email Engine', 'https://emailengine.app/', '01:59', 31),
(119, 'Scott\'s July 4th Post', 'https://www.stolinski.com/blog/july-4th', '01:02', 32),
(120, 'Miri Smart WiFi Air Purifier', 'https://mirismart.com/products/wifi-air-purifier', '49:21', 32),
(121, 'Self Closing Braided Cable Sleeve', 'https://www.aliexpress.com/item/1005004579680213.html', '56:34', 32),
(122, 'Shruti Kapoor Blog Post', 'https://www.freecodecamp.org/news/form-validation-with-html5-and-javascript/', '35:45', 33),
(123, 'Polyfill.io', 'https://polyfill.io', '00:51', 34),
(124, 'Fastly', 'https://fastly.com', '01:31', 34),
(125, 'WASI', 'https://webassembly.org/docs/wasi/', '21:37', 34),
(126, 'Hono', 'https://honojs.dev/', '37:18', 34),
(127, 'Worker Tools', 'https://worktools.dev/', '36:23', 34),
(128, 'Manuel Matjovic\'s CSS corrections blog post', 'https://manuel.matjovic.com/blog/syntax-css-nothing/', '10:27', 35),
(129, 'TS Lab', 'https://github.com/yuvipanda/tslab', '20:38', 35),
(130, 'Numi', 'https://numi.app/', '25:13', 35),
(131, 'Light Table', 'https://www.lighttable.com/', '25:20', 35),
(132, 'Domain name sales Twitter account', 'https://twitter.com/domainnamesales', '40:09', 35),
(133, 'Syntax.fm', 'https://syntax.fm', '00:03', 36),
(134, 'val.town', 'https://val.town', '00:39', 37),
(135, 'Sunbeam', 'https://sunbeam.io/', '40:48', 37),
(136, 'Seymour Papert', 'https://en.wikipedia.org/wiki/Seymour_Papert', '42:26', 37),
(137, 'Brett Victor', 'http://worrydream.com/', '48:43', 37),
(138, 'Dynamic Land', 'https://dynamicland.org/', '48:54', 37),
(139, 'Future of Coding', 'https://futureofcoding.org/', '49:01', 37),
(140, 'Tom McWright', 'https://twitter.com/TMWC', '55:37', 37),
(141, 'Syntax.fm Podcast', 'https://syntax.fm', '00:02', 38),
(142, 'Wikipedia on Netflix', 'https://en.wikipedia.org/wiki/Netflix', '02:29', 38),
(143, 'CSS Zen Garden', 'http://www.csszengarden.com/', '44:54', 38),
(144, 'CodeAI', 'https://github.com/withspectrum/codeai', '04:16', 39),
(145, 'Amazon CodeWhisperer', 'https://aws.amazon.com/codewhisperer/', '09:59', 39),
(146, 'GitHub Copilot Labs', 'https://github.com/features/copilot-labs', '10:48', 39),
(147, 'lintrule', 'https://lintrule.com/', '14:32', 39),
(148, 'opencommit', 'https://www.opencommit.dev/', '18:15', 39),
(149, 'Replit Ghostwriter', 'https://blog.replit.com/ghostwriter', '21:15', 39),
(150, 'Anthropic Model', 'https://www.anthropic.com/', '22:17', 39),
(151, 'Codegeeks', 'https://codegeex.com/', '24:05', 39),
(152, 'Codeum AI', 'https://codeum.ai/', '26:37', 39),
(153, 'TabNine', 'https://www.tabnine.com/', '31:12', 39),
(154, 'Cloudinary', 'https://cloudinary.com', '00:40', 40),
(155, 'Space Jellyfish', 'https://spacejelly.dev/', '03:15', 40),
(156, 'Cloudinary AI', 'https://cloudinary.com/solutions/ai', '05:03', 40),
(157, 'Midjourney', 'https://www.midjourney.com/', '06:02', 40),
(158, 'Function Calls API', 'https://platform.openai.com/docs/guides/function', '22:55', 40),
(159, 'Mojo', 'https://mojo.dev/', '23:14', 40),
(160, 'Unpick', 'https://unpick.app/', '30:54', 40),
(161, 'Sentry', 'https://sentry.io/', '34:22', 40),
(162, 'Next.js Examples', 'https://github.com/vercel/next.js/tree/canary/examples', '35:41', 40),
(163, 'Microsoft Edge Select Menu', 'https://github.com/MicrosoftEdge/Demos/blob/main/select-menu/README.md', '17:00', 41),
(164, 'Shoelace Web Components', 'https://shoelace.style/', '26:32', 41),
(165, 'WonderCraft AI', 'https://www.wondercraft.ai/', '39:29', 41),
(166, 'Lightning CSS', 'https://www.lightningcss.dev/', '00:27', 42),
(167, 'oklch.com', 'https://www.oklch.com/', '06:18', 42),
(168, 'Syntax.fm', 'https://syntax.fm', '28:54', 42),
(169, 'Flask', 'https://flask.palletsprojects.com/', '02:33', 43),
(170, 'Jinja', 'https://jinja.palletsprojects.com/', '02:47', 43),
(171, 'Twig', 'https://twig.symfony.com/', '02:55', 43),
(172, 'Celery', 'https://docs.celeryq.dev/', '06:50', 43),
(173, 'RabbitMQ', 'https://www.rabbitmq.com/', '09:09', 43),
(174, 'Kafka', 'https://kafka.apache.org/', '08:41', 43),
(175, 'Stripe', 'https://stripe.com/', '12:17', 43),
(176, 'GlobalCollect', 'https://www.ingenico.com/globalcollect', '12:17', 43),
(177, 'PyO3', 'https://pyo3.rs/', '42:36', 43),
(178, 'Maturin', 'https://github.com/PyO3/maturin', '42:50', 43),
(179, 'NumPy', 'https://numpy.org/', '43:12', 43),
(180, 'SciPy', 'https://www.scipy.org/', '43:12', 43),
(181, 'Next.js', 'https://nextjs.org/', '47:43', 43),
(182, 'Rye', 'https://github.com/mitsuhiko/pipsi', '55:18', 43),
(183, 'Syntax', 'https://syntax.fm', '00:01', 44),
(184, 'Prisma', 'https://www.prisma.io/', '24:41', 44),
(185, 'Drizzle', 'https://drizzle.dev/', '34:26', 44),
(186, 'I Think You Should Leave', 'https://www.netflix.com/title/80986854', '53:49', 44),
(187, 'Namecheap', 'https://www.namecheap.com/', '12:51', 45),
(188, 'GoDaddy', 'https://www.godaddy.com/', '18:06', 45),
(189, 'Gandi', 'https://www.gandi.net/', '19:48', 45),
(190, 'Hover', 'https://www.hover.com/', '22:17', 45),
(191, 'Name.com', 'https://www.name.com/', '24:26', 45),
(192, 'Cloudflare', 'https://www.cloudflare.com/', '26:53', 45),
(193, 'Porkbun', 'https://porkbun.com/', '21:37', 45),
(194, '101 Domain', 'https://www.101domain.com/', '20:28', 45),
(195, 'DNSimple', 'https://dnsimple.com/', '31:46', 45),
(196, 'Domainer', 'https://domainr.com/', '33:10', 45),
(197, 'I Want My Name', 'https://iwantmyname.com/', '33:16', 45),
(198, 'Dustin\'s dotfiles', 'https://github.com/dshauforward/dotfiles', '46:54', 46),
(199, 'Fly.io', 'https://fly.io/', '51:38', 46),
(200, 'Figma database deep dive', 'https://www.figma.com/blog/how-figmas-database-infrastructure-evolved-over-10-years/', '52:23', 46),
(201, 'JS Nation', 'https://www.js-nation.com/', '01:56', 47),
(202, 'Render Atlanta', 'https://renderatl.com/', '02:38', 47),
(203, 'OpenAI', 'https://openai.com/', '04:55', 47),
(204, 'Async Context API Proposal', 'https://github.com/tc39/proposal-async-context', '02:13', 48),
(205, 'Next.js Usage', 'https://nextjs.org/docs/basic-features/data-fetching#accessing-the-request-and-response-objects', '10:18', 48),
(206, 'Excess', 'https://www.exceedjs.com/', '04:14', 49),
(207, 'JerryScript', 'https://jerryscript.net/', '05:15', 49),
(208, 'Rocky.js', 'https://developer.pebble.com/docs/rockyjs/', '05:15', 49),
(209, 'Tesla', 'https://tessel.github.io/', '06:34', 49),
(210, 'Hoodie', 'https://hood.ie/', '07:40', 49),
(211, 'Stack-Chan', 'https://www.niche-life.com/stack-chan/', '17:18', 49),
(212, 'Arduino', 'https://www.arduino.cc/', '25:59', 49),
(213, 'Johnny-Five', 'http://johnny-five.io/', '27:09', 49),
(214, 'J5e', 'https://j5e.dev/', '27:19', 49),
(215, 'ECMA-419', 'https://www.ecma-international.org/publications-and-standards/standards/ecma-419/', '22:39', 49),
(216, 'WLED', 'https://github.com/Aircoookie/WLED', '07:17', 50),
(217, 'Unraveling the mysteries of resistors', 'https://www.youtube.com/watch?v=WxipoY0y7XM', '38:29', 50),
(218, 'ESP Rust book', 'https://esp-rs.github.io/book/', '51:16', 50),
(219, 'Syntax Website Repo', 'https://github.com/SyntaxFM/syntaxfm.github.io', '12:46', 51),
(220, 'GitHub Actions Course', 'https://leveluptutorials.com', '22:36', 51),
(221, 'OpenAI', 'https://openai.com', '00:36', 52),
(222, 'ChatGPT', 'https://chat.openai.com/', '01:28', 52),
(223, 'GitHub Copilot', 'https://copilot.github.com/', '08:45', 52),
(224, 'JSDoc Documentation', 'https://jsdoc.app/', '00:00', 53),
(225, 'TypeScript Handbook - JSDoc Reference', 'https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html', '00:00', 53),
(226, 'SvelteJS', 'https://svelte.dev/', '00:33', 53),
(227, 'Rich Harris on Svelte without TypeScript', 'https://www.youtube.com/watch?v=YAlrNjDLhaA', '00:33', 53),
(228, 'Syntax.fm', 'https://syntax.fm', '00:37', 54),
(229, 'LCH color', 'https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/', '14:32', 54),
(230, 'GitHub Next', 'https://githubnext.com', '00:59', 55),
(231, 'Ariakit', 'https://ariakit.org', '01:00', 55),
(232, 'Liveblocks', 'https://liveblocks.io', '01:01', 55),
(233, 'Syntax GitHub Repo', 'https://github.com/SyntaxFM/syntaxfm', '04:53', 56),
(234, 'Node executable docs', 'https://nodejs.org/api/cli.html#executable', '00:30', 57),
(235, 'Dino', 'https://deno.land/', '15:34', 57),
(236, 'Bun', 'https://bun.sh/', '15:49', 57),
(237, 'Scroll Driven Animations', 'https://scroll-driven-animations.style/', '55:22', 58),
(238, 'Reactathon', 'https://www.reactathon.com/', '00:02', 59),
(239, 'SvelteKit', 'https://kit.svelte.dev/', '05:12', 59),
(240, 'CSS custom properties', 'https://developer.mozilla.org/en-US/docs/Web/CSS/--*', '08:20', 59),
(241, 'AWS Certifications', 'https://aws.amazon.com/certification/', '22:01', 59),
(242, 'Sentry', 'https://sentry.io', '30:47', 59),
(243, 'Lodash', 'https://lodash.com/', '37:55', 59),
(244, 'Fetch API', 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API', '43:55', 59),
(245, 'React Native', 'https://reactnative.dev/', '45:18', 59),
(246, 'DaisyDisk', 'https://daisydiskapp.com', '04:30', 60),
(247, 'BundlePhobia', 'https://bundlephobia.com', '10:35', 60),
(248, 'core-js', 'https://www.npmjs.com/package/core-js', '10:11', 60),
(249, 'PNPM', 'https://pnpm.io/', '18:08', 60),
(250, 'npkill', 'https://www.npmjs.com/package/npkill', '23:00', 60),
(251, 'gradient.style', 'https://gradient.style', '08:25', 61),
(252, 'Disney Animation Principles', 'https://www.youtube.com/watch?v=haa7n3UGyDc', '19:09', 61),
(253, 'live-transitions.pages.dev', 'https://live-transitions.pages.dev/', '20:53', 61),
(254, 'Open Props CSS gradients', 'https://open-props.style/', '23:49', 61),
(255, 'Syntax.fm', 'https://syntax.fm', '00:01', 62),
(256, 'FlightControl', 'https://flightcontrol.dev/', '12:01', 62),
(257, 'Railway', 'https://railway.app/', '14:08', 62),
(258, 'Preact Signals', 'https://github.com/preactjs/signals', '12:34', 63),
(259, 'Mux', 'https://mux.com', '01:40', 64),
(260, 'Open UI', 'https://open-ui.org', '20:08', 65),
(261, 'Century', 'https://century.io', '53:51', 65),
(262, 'Blue Sky', 'https://blueskyweb.org/', '00:10', 66),
(263, 'Mastodon', 'https://mastodon.social/', '02:20', 66),
(264, 'Nostr', 'https://nostr.io/', '02:55', 66),
(265, 'Substack', 'https://substack.com/', '02:45', 66),
(266, 'Damo', 'https://damus.io/', '02:55', 66),
(267, 'Warp', 'https://www.warp.dev/', '00:47', 67),
(268, 'Zach\'s Blog', 'https://zach.lloyd.co/', '00:52', 67),
(269, 'Flutter', 'https://flutter.dev/', '19:27', 67),
(270, 'HarfBuzz', 'https://www.freedesktop.org/wiki/Software/HarfBuzz/', '28:57', 67),
(271, 'Prisma', 'https://www.prisma.io/', '06:34', 68),
(272, 'Voucherify', 'https://voucherify.io/', '20:06', 68),
(273, 'Vercel', 'https://vercel.com/', '10:05', 68),
(274, 'PlanetScale', 'https://planetscale.com/', '35:00', 68),
(275, 'SvelteKit', 'https://kit.svelte.dev/', '11:29', 68),
(276, 'Sentry', 'https://sentry.io/', '09:40', 68),
(277, 'Syntax.fm', 'https://syntax.fm', '00:06', 69),
(278, 'Solid JS', 'https://www.solidjs.com/', '10:04', 69),
(279, 'Termageddon', 'https://termageddon.com', '00:39', 70),
(280, 'Neumann', 'https://www.neumann.com/', '01:50', 71),
(281, 'MT48', 'https://www.neumann.com/mt48', '02:50', 71),
(282, 'Better Color Tools', 'https://better-color-tools.com/', '15:08', 72),
(283, 'ESLint RFCs', 'https://github.com/eslint/rfcs', '43:56', 73),
(284, 'Languages Plugin RFC', 'https://github.com/eslint/rfcs/pull/86', '43:56', 73),
(285, 'Lea Verou CSS Nesting Explainer', 'https://lea.verou.me/2020/09/nesting-in-css-with-scope/', '17:24', 74),
(286, 'MDN Dialog', 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog', '19:39', 75),
(287, 'W3C Spec', 'https://www.w3.org/TR/html53/interactive-elements.html#the-dialog-element', '19:39', 75),
(288, 'Tomagui', 'https://tomagui.dev', '00:37', 76),
(289, 'Syntax.fm', 'https://Syntax.fm', '00:00', 76),
(290, 'Sentry', 'https://sentry.io', '00:43', 77),
(291, 'Syntax.fm', 'https://syntax.fm', '00:58', 77),
(292, 'OAuth 2 Simplified', 'https://aaronparecki.com/oauth-2-simplified/', '00:30', 78),
(293, '10up', 'https://10up.com', '01:12', 79),
(294, 'Syntax podcast', 'https://syntax.fm', '00:01', 80),
(295, 'Custom Elements Everywhere', 'https://custom-elements-everywhere.com/', '21:43', 82),
(296, 'Template Instantiation proposal', 'https://github.com/tc39/proposal-template-instantiation', '13:07', 82),
(297, 'Sentry', 'https://sentry.io/', '00:33', 83),
(298, 'Obsidian', 'https://obsidian.md/', '27:45', 83),
(299, 'Travis\'s YouTube Channel', 'https://www.youtube.com/travisneilson', '04:45', 84),
(300, 'Midjourney', 'https://www.midjourney.com/', '34:37', 84),
(301, 'Spotify', 'https://www.spotify.com/', '20:07', 84),
(302, 'Syntax podcast', 'https://Syntax.fm', '00:00', 85),
(303, 'Sentry', 'https://sentry.io/', '00:37', 85),
(304, 'Tailwind UI', 'https://tailwindui.com', '17:00', 85),
(305, 'ngrok', 'https://ngrok.com', '20:53', 86),
(306, 'Cloudflare Tunnel', 'https://developers.cloudflare.com/cloudflare-one/connections/connect-apps', '23:24', 86),
(307, 'Sentry', 'https://sentry.io/', '01:12', 87),
(308, 'SST', 'https://sst.dev/', '03:15', 87),
(309, 'Vercel', 'https://vercel.com/', '06:02', 87),
(310, 'Open Next.js', 'https://opennextjs.org/', '07:59', 87),
(311, 'Serverless Next.js', 'https://github.com/serverless-nextjs/serverless-next.js', '09:09', 87),
(312, 'Cloudflare Workers', 'https://workers.cloudflare.com/', '15:03', 87),
(313, 'Sentry', 'https://sentry.io/', '01:21', 88),
(314, 'FlexSearch', 'https://github.com/nextapps-de/flexsearch', '10:59', 88),
(315, 'OpenAI Whisper', 'https://github.com/openai/whisper', '15:33', 88),
(316, 'MDN Web Streams', 'https://developer.mozilla.org/en-US/docs/Web/API/Streams_API', '02:33', 89),
(317, 'Sentry', 'https://sentry.io/', '01:03', 89),
(318, 'Eric\'s Company PureFunk', 'https://purefunk.co/', '01:51', 90),
(319, 'Sentry', 'https://sentry.io/', '03:03', 91),
(320, 'StackBlitz', 'https://stackblitz.com', '02:49', 92),
(321, 'CodeSandbox', 'https://codesandbox.io', '02:49', 92),
(322, 'Svelte', 'https://svelte.dev', '04:32', 92),
(323, 'Replit', 'https://replit.com', '06:19', 92),
(324, 'Figma', 'https://figma.com', '21:11', 92),
(325, 'PenPod', 'https://penpot.app', '22:46', 92),
(326, 'Builder.io Demo', 'https://www.builder.io/demo', '13:01', 93),
(327, 'Sentry', 'https://sentry.io', '02:45', 94),
(328, 'OpenAI', 'https://openai.com/', '09:48', 94),
(329, 'Midjourney', 'https://www.midjourney.com/', '10:17', 94),
(330, 'TensorFlow', 'https://www.tensorflow.org/', '18:36', 94),
(331, 'Sentry', 'https://sentry.io', '00:52', 95),
(332, 'Prettier', 'https://prettier.io', '20:39', 95),
(333, 'ESLint', 'https://eslint.org', '27:08', 95),
(334, 'Stylint', 'https://stylelint.io', '27:10', 95),
(335, 'Astro', 'https://astro.build', '00:43', 96),
(336, 'MDX', 'https://mdxjs.com/', '12:47', 96),
(337, 'Remix', 'https://remix.run/', '15:05', 96),
(338, 'SvelteKit', 'https://kit.svelte.dev/', '15:05', 96),
(339, 'Open Next', 'https://open-next.js.org/', '17:55', 96),
(340, 'Syntax.fm', 'https://Syntax.fm', '00:01', 97),
(341, 'Command Line Power User', 'https://commandlinepoweruser.com', '10:25', 97),
(342, 'Sentry', 'https://sentry.io/', '01:48', 98),
(343, 'Better Stack', 'https://betterstack.com/logtail', '21:18', 98),
(344, 'Winston', 'https://github.com/winstonjs/winston', '22:54', 98),
(345, 'Solid JS', 'https://www.solidjs.com/', '00:00', 99),
(346, 'Knockout JS', 'https://knockoutjs.com/', '05:00', 99),
(347, 'Marco JS', 'https://github.com/paypal/marco', '07:06', 99),
(348, 'Sentry', 'https://sentry.io/', '01:24', 100),
(349, 'Syntax', 'https://syntax.fm/', '00:03', 100),
(350, 'Klein wire strippers', 'https://www.kleintools.com/catalog/combination-cutting-tools/hybrid-pliers-stripper-cutter-long-nose-k12065cr', '05:58', 101),
(351, 'Server-side rendering web components', 'https://www.toptal.com/front-end/server-side-rendering-web-components', '14:05', 101),
(352, 'SSR with Next.js', 'https://css-tricks.com/building-web-components-with-vanilla-javascript/', '14:56', 101),
(353, 'Vite Auto Open File', 'https://gist.github.com/wesbos/da56b8700e5f2025e118bfa8f57e5c0c', '08:24', 102),
(354, 'Kent C Dodds Twitter thread', 'https://twitter.com/kentcdodds/status/1292092713911312385', '13:11', 102),
(355, 'Qwik', 'https://qwik.builder.io/', '01:14', 103),
(356, 'Syntax.fm', 'https://syntax.fm', '00:00', 103),
(357, 'Sentry', 'https://sentry.io/', '00:39', 104),
(358, 'Lighthouse', 'https://developers.google.com/web/tools/lighthouse', '06:58', 105),
(359, 'PageSpeed Insights', 'https://pagespeed.web.dev/', '07:20', 105),
(360, 'Polypane', 'https://polypane.app/', '06:58', 105),
(361, 'Partytown', 'https://partytown.builder.io/', '15:26', 105),
(362, 'SvelteKit', 'https://kit.svelte.dev/', '15:26', 105),
(363, 'Gatsby', 'https://www.gatsbyjs.com/', '17:31', 105),
(364, 'Rust in Action book', 'https://www.manning.com/books/rust-in-action', '03:45', 106),
(365, 'Bevy game engine', 'https://bevyengine.org/', '24:09', 106),
(366, 'Syntax.fm', 'https://syntax.fm', '00:39', 107),
(367, 'Sentry.io', 'https://sentry.io/', '01:44', 107),
(368, 'Svelte', 'https://svelte.dev/', '22:17', 108),
(369, 'CSS color function', 'https://drafts.csswg.org/css-color/#modifying-colors', '20:03', 108),
(370, 'Alpine JS', 'https://alpinejs.dev/', '00:47', 109),
(371, 'LiveWire', 'https://laravel-livewire.com/', '00:47', 109),
(372, 'State of JS 2022', 'https://2022.stateofjs.com/', '00:31', 110),
(373, 'Data Explorer', 'https://2022.stateofjs.com/en-US/data-explorer/', '03:22', 110),
(374, 'Can I Use', 'https://caniuse.com', '17:40', 111),
(375, 'Container Query Polyfill', 'https://github.com/jonathantneal/container-query-polyfill', '24:05', 111),
(376, 'Sanity', 'https://www.sanity.io/', '00:39', 112),
(377, 'YNAB', 'https://www.youneedabudget.com/', '17:01', 113),
(378, 'Copilot', 'https://www.copilot.money/', '17:10', 113),
(379, 'Syntax.fm', 'https://syntax.fm', '00:01', 114),
(380, 'Tangible', 'https://www.tangiblematerials.com/', '00:49', 115),
(381, 'Observable', 'https://observablehq.com/', '25:47', 115),
(382, 'Data Visualization Society', 'https://www.datavisualizationsociety.com/', '29:33', 115),
(383, 'UpLift Desk', 'https://www.upliftdesk.com/', '44:26', 115),
(384, 'Container Queries', 'https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries', '07:18', 116),
(385, 'Rust', 'https://www.rust-lang.org/', '09:13', 116),
(386, 'Touri', 'https://touri.dev/', '10:39', 116),
(387, 'Shoelace Web Components', 'https://shoelace.style/', '20:55', 116),
(388, 'Syntax.fm', 'https://syntax.fm', '00:01', 117),
(389, 'Scrivener', 'https://www.literatureandlatte.com/scrivener/overview', '32:13', 118),
(390, 'Mayfly', 'https://www.mayfly.com/', '34:21', 118),
(391, 'Engineering Management for the Rest of Us', 'https://www.amazon.com/Engineering-Management-Rest-Sarah-Drasner/dp/1492075046', '00:48', 118),
(392, 'Syntax podcast', 'https://syntax.fm', '00:01', 119),
(393, 'Syntax', 'https://syntax.fm', '00:31', 120),
(394, 'Polypane', 'https://polypane.app', '01:02', 121),
(395, 'Fix Ally', 'https://fixaoneoney.com', '55:51', 121),
(396, 'Superposition', 'https://superposition.design/', '57:06', 121),
(397, 'SvelteKit', 'https://kit.svelte.dev/', '02:26', 122),
(398, 'Rome tools', 'https://rome.tools/', '07:01', 122),
(399, 'Deno', 'https://deno.land/', '08:32', 122),
(400, 'Tailwind CSS', 'https://tailwindcss.com/', '10:58', 122),
(401, 'Open props', 'https://open-props.style/', '11:12', 122),
(402, 'GitHub Copilot', 'https://copilot.github.com/', '18:13', 122),
(403, 'Temporal API', 'https://tc39.es/proposal-temporal/', '46:37', 122),
(404, 'Tori', 'https://tori.dev/', '11:12', 123),
(405, 'Electron', 'https://www.electronjs.org/', '10:17', 123),
(406, 'ResortPass', 'https://www.resortpass.com/', '12:20', 124),
(407, 'Suavecito', 'https://suavecito.com/', '46:21', 124),
(408, 'Firebase', 'https://firebase.google.com', '00:26', 125),
(409, 'Nix package manager', 'https://nixos.org/', '14:25', 125),
(410, 'Cobalt2 theme', 'https://github.com/wesbos/cobalt2-vscode', '52:58', 125),
(411, 'Linode', 'https://linode.com/syntax', '00:26', 126),
(412, 'Sentry', 'https://sentry.io/', '00:39', 126),
(413, 'Freshbooks', 'https://freshbooks.com/syntax', '00:54', 126),
(414, 'Prismic', 'https://prismic.io/', '01:46', 127),
(415, 'LogRocket', 'https://logrocket.com/', '00:51', 127),
(416, 'PlanetScale', 'https://planetscale.com/', '06:01', 127),
(417, 'Supabase', 'https://supabase.io/', '18:23', 127),
(418, 'Neon', 'https://neon.tech/', '22:45', 127),
(419, 'Railway', 'https://railway.app/', '23:19', 127),
(420, 'MongoDB Atlas', 'https://www.mongodb.com/atlas/database', '24:18', 127),
(421, 'Fauna', 'https://fauna.com/', '20:47', 127),
(422, 'DynamoDB', 'https://aws.amazon.com/dynamodb/', '19:51', 127),
(423, 'Remotion', 'https://remotion.dev/', '00:36', 128),
(424, 'After Effects', 'https://www.adobe.com/products/aftereffects.html', '04:05', 128),
(425, 'Web Almanac', 'https://almanac.httparchive.org/en/2022/', '00:21', 129),
(426, 'Syntax Podcast', 'https://syntax.fm', '00:38', 131),
(427, 'Tuple', 'https://tuple.app/', '01:15', 131),
(428, 'Linode', 'https://www.linode.com/', '00:54', 132),
(429, 'LogRocket', 'https://logrocket.com/', '00:54', 132),
(430, 'FreshBooks', 'https://www.freshbooks.com/', '00:54', 132),
(431, 'GitHub Next', 'https://githubnext.com', '00:01', 133),
(432, 'Container queries enabled in Firefox Nightly', 'https://bugzilla.mozilla.org/show_bug.cgi?id=1764279', '02:15', 133),
(433, 'bun.sh', 'https://bun.sh', '00:38', 134),
(434, 'tuple.app/syntax', 'https://tuple.app/syntax', '01:09', 134),
(435, 'TweetDeck', 'https://tweetdeck.twitter.com', '05:34', 135),
(436, 'Syntax.fm', 'https://syntax.fm', '00:16', 136),
(437, 'Sentry', 'https://sentry.io/', '01:03', 136),
(438, 'Magic Bell', 'https://magicbell.com/', '02:05', 136),
(439, 'Saskatoon Berries', 'https://en.wikipedia.org/wiki/Amelanchier_alnifolia', '04:34', 137),
(440, 'Syntax podcast', 'https://syntax.fm', '00:01', 138),
(441, 'React Use RFC', 'https://github.com/reactjs/rfcs/blob/main/text/0398-react-use.md', '00:35', 139),
(442, 'Node.js', 'https://nodejs.org/', '00:37', 140),
(443, 'Deno', 'https://deno.land/', '00:37', 140),
(444, 'Rust', 'https://www.rust-lang.org/', '06:40', 140),
(445, 'Tokio', 'https://tokio.rs/', '12:22', 140),
(446, 'HTTP Archive CSS Almanac', 'https://almanac.httparchive.org/en/2020/css', '00:21', 141),
(447, 'Sentry', 'https://sentry.io/', '02:00', 142),
(448, 'Freshbooks', 'https://www.freshbooks.com/', '02:50', 142),
(449, 'Descript', 'https://www.descript.com/', '31:55', 142),
(450, 'Syntax Podcast', 'https://syntax.fm', '00:00', 143),
(451, 'Vercel', 'https://vercel.com', '04:30', 143),
(452, 'Zod', 'https://zod.dev/', '00:33', 145),
(453, 'LogRocket', 'https://logrocket.com/signup/', '02:55', 145),
(454, 'Linode', 'https://www.linode.com/syntax', '04:00', 145),
(455, 'Zod Discord', 'https://zod.dev/', '23:05', 145),
(456, 'CHADD', 'https://chadd.org', '08:03', 146),
(457, 'Docker GitHub incident', 'https://github.com/moby/moby/issues/22801', '21:00', 147),
(458, 'Zod', 'https://github.com/colinhacks/zod', '06:43', 148),
(459, 'Sanity', 'https://www.sanity.io/', '03:18', 148),
(460, 'Shaka Player', 'https://shaka-player-demo.appspot.com/', '20:44', 149),
(461, 'Sentry', 'https://sentry.io/', '22:18', 150),
(462, 'React Virtualized', 'https://github.com/bvaughn/react-virtualized', '08:24', 150),
(463, 'React Window', 'https://github.com/bvaughn/react-window', '08:24', 150),
(464, 'Quick', 'https://quickjs.dev', '05:19', 151),
(465, 'Quick Optimizer', 'https://quickjs.dev/docs/optimizing/optimizer', '16:13', 151),
(466, 'Quick City', 'https://quickjs.dev/guides/quick-start', '19:51', 151),
(467, 'Tola', 'https://www.tola.io/', '02:05', 152),
(468, 'React Query', 'https://tanstack.com/query', '04:43', 152),
(469, 'Wolf Stoves', 'https://www.wolfstoves.com/', '02:47', 153),
(470, 'Bookmarklet maker', 'https://github.com/mrcoles/bookmarklet-maker', '07:42', 154),
(471, 'CSS Tricks - Useful Bookmarklets', 'https://css-tricks.com/useful-bookmarklets/', '08:34', 154),
(472, 'Neovim', 'https://neovim.io/', '03:52', 155),
(473, 'LuaJIT', 'https://luajit.org/', '07:21', 155),
(474, 'Telescope', 'https://github.com/nvim-telescope/telescope.nvim', '14:33', 155),
(475, 'FVim', 'https://github.com/Kethku/neovide', '16:28', 155),
(476, 'LunarVim', 'https://www.lunarvim.org/', '17:56', 155),
(477, 'Syntax.fm', 'https://syntax.fm', '00:00', 156),
(478, 'Prismic', 'https://prismic.io/syntax', '20:45', 156),
(479, 'Level Up Tutorials', 'https://LevelUpTutorials.com', '07:43', 156),
(480, 'Stack Overflow post', 'https://stackoverflow.com/questions/38394767/are-es6-classes-just-syntactic-sugar-over-prototypal-inheritance', '08:43', 157),
(481, 'Prisma', 'https://www.prisma.io/', '00:38', 158),
(482, 'Graphcool', 'https://www.graph.cool/', '02:29', 158),
(483, 'GraphQL', 'https://graphql.org/', '05:25', 158),
(484, 'Syntax.fm', 'https://syntax.fm', '00:11', 159),
(485, 'Linode', 'https://linode.com/syntax', '02:13', 160),
(486, 'LogRocket', 'https://logrocket.com/syntax', '03:02', 160),
(487, 'OpenSauced', 'https://opensauced.pizza', '00:39', 161),
(488, 'OpenSauced Beta', 'https://beta.insights.opensauced.pizza', '06:55', 161),
(489, 'Prismic', 'https://prismic.io', '00:48', 162),
(490, 'LogRocket', 'https://logrocket.com', '00:56', 162),
(491, 'FreshBooks', 'https://www.freshbooks.com', '00:56', 162),
(492, 'Enhance JS', 'https://enhance.dev/', '00:30', 163),
(493, 'Enhance JS Talk', 'https://www.youtube.com/watch?v=mTpjpR4v158', '04:06', 163),
(494, 'Arc', 'https://arc.net', '42:11', 164),
(495, 'Arc on Twitter', 'https://twitter.com/ArcInternet', '42:07', 164),
(496, 'Eat That Frog', 'https://www.eatthatfrog.com/', '03:13', 165),
(497, 'Pomodoro technique', 'https://francescocirillo.com/pages/pomodoro-technique', '18:30', 165),
(498, 'TabNine', 'https://www.tabnine.com/', '21:17', 166),
(499, 'Kite', 'https://www.kite.com/', '21:22', 166),
(500, 'CodeWhisperer', 'https://aws.amazon.com/codewhisperer/', '21:43', 166);

INSERT INTO `Link` (`id`, `name`, `url`, `timestamp`, `showNote`) VALUES
(501, 'Raycast', 'https://www.raycast.com', '00:48', 167),
(502, 'Spotlight', 'https://support.apple.com/en-us/HT204014', '02:24', 167),
(503, 'React reconciler', 'https://reactjs.org/docs/reconciliation.html', '18:53', 167),
(504, 'SQLite', 'https://www.sqlite.org/index.html', '27:36', 167),
(505, 'Syntax.fm', 'https://syntax.fm', '00:01', 168),
(506, 'PaymentsHub', 'https://developer.paymentshub.com/syntax', '00:48', 168),
(507, 'LogRocket', 'https://logrocket.com/syntax', '33:27', 168),
(508, 'Freshbooks', 'https://www.freshbooks.com/syntax', '45:53', 168),
(509, 'Prismic', 'https://prismic.io', '01:43', 169),
(510, 'Sentry Dex', 'https://sentry.io/events/dex/', '03:34', 169),
(511, 'Hasura', 'https://hasura.io', '10:17', 170),
(512, 'JSPerf', 'https://jsperf.com', '04:12', 171),
(513, 'TS Quick Fixes', 'https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.ts-quick-fix', '08:36', 171),
(514, 'Big Changes Ahead for Deno', 'https://deno.com/blog/v1.26', '00:29', 172),
(515, 'TLDraw', 'https://www.tldraw.com', '04:56', 173),
(516, 'Globbs', 'https://globbs.design', '06:54', 173),
(517, 'Excalidraw', 'https://excalidraw.com/', '08:18', 173),
(518, 'TLDraw GitHub', 'https://github.com/tldraw/tldraw', '10:12', 173),
(519, 'Syntax.fm', 'https://syntax.fm', '00:01', 174),
(520, 'Sanity.io', 'https://www.sanity.io/', '00:11', 174),
(521, 'LogRocket', 'https://logrocket.com/', '00:11', 174),
(522, 'MagicBell', 'https://magicbell.com/', '00:11', 174),
(523, 'Sentry', 'https://sentry.io/', '01:40', 175),
(524, 'Auth0', 'https://auth0.com/', '02:52', 175),
(525, 'AppRight', 'https://appright.io', '00:36', 176),
(526, 'Hasura', 'https://hasura.io/', '00:59', 176),
(527, 'LightStep', 'https://lightstep.com/', '15:39', 176),
(528, 'MySQL', 'https://www.mysql.com/', '03:25', 176),
(529, 'MongoDB', 'https://www.mongodb.com/', '03:34', 176),
(530, 'Postgres', 'https://www.postgresql.org/', '03:54', 176),
(531, 'NGRX', 'https://ngrx.io/', '01:33', 176),
(532, 'Remix', 'https://remix.run/', '31:53', 176),
(533, 'Ionic', 'https://ionicframework.com/', '29:00', 176),
(534, 'Angular', 'https://angular.io/', '30:09', 176),
(535, 'Firebase', 'https://firebase.google.com/', '02:11', 176),
(536, 'DigitalOcean', 'https://www.digitalocean.com/', '13:18', 176),
(537, 'Kubernetes', 'https://kubernetes.io/', '26:12', 176),
(538, 'Docker Swarm', 'https://docs.docker.com/engine/swarm/', '27:17', 176),
(539, 'Syntax Podcast', 'https://Syntax.fm', '00:01', 177),
(540, 'Sentry Conference', 'https://sentry.io/events/dex/', '02:45', 178),
(541, 'Svelte', 'https://svelte.dev', '00:03', 179),
(542, 'SvelteKit', 'https://kit.svelte.dev/', '27:18', 179),
(543, 'LightStep', 'https://lightstep.com/', '00:37', 180),
(544, 'FreshBooks', 'https://freshbooks.com/', '00:37', 180),
(545, 'LogRocket', 'https://logrocket.com/', '00:37', 180),
(546, 'Sentry', 'https://sentry.io/', '00:53', 181),
(547, 'Sanity', 'https://www.sanity.io/', '02:14', 181),
(548, 'Shopify', 'https://www.shopify.com/', '02:36', 181),
(549, 'Hydrogen', 'https://hydrogen.shopify.dev/', '00:57', 182),
(550, 'Shopify', 'https://www.shopify.com', '01:13', 182),
(551, 'Vercel', 'https://vercel.com', '04:25', 182),
(552, 'Netlify', 'https://www.netlify.com', '04:25', 182),
(553, 'Heroku', 'https://www.heroku.com', '04:25', 182),
(554, 'Gatsby', 'https://www.gatsbyjs.com/', '04:44', 182),
(555, 'Next.js', 'https://nextjs.org/', '04:44', 182),
(556, 'Remix', 'https://remix.run/', '05:03', 182),
(557, 'React', 'https://reactjs.org/', '05:33', 182),
(558, 'Vue', 'https://vuejs.org/', '05:33', 182),
(559, 'Svelte', 'https://svelte.dev/', '05:33', 182),
(560, 'Angular', 'https://angular.io/', '05:33', 182),
(561, 'Ember', 'https://emberjs.com/', '05:33', 182),
(562, 'Laravel', 'https://laravel.com/', '15:06', 182),
(563, 'Vite', 'https://vitejs.dev/', '19:22', 182),
(564, 'Webpack', 'https://webpack.js.org/', '19:22', 182),
(565, 'Veet', 'https://vitejs.dev/', '19:22', 182),
(566, 'Evan Yu', 'https://github.com/yyx990803', '20:03', 182),
(567, 'Node.js', 'https://nodejs.org/', '20:03', 182),
(568, 'React Server Components', 'https://reactjs.org/docs/react-server-components.html', '21:43', 182),
(569, 'npm', 'https://www.npmjs.com/', '23:35', 182),
(570, 'Next.js', 'https://nextjs.org/', '23:35', 182),
(571, 'Remix', 'https://remix.run/', '23:35', 182),
(572, 'React 18', 'https://reactjs.org/blog/2022/03/29/react-v18.html', '22:32', 182),
(573, 'V8 isolates', 'https://v8.dev/features/isolates', '28:41', 182),
(574, 'Deno', 'https://deno.land/', '29:01', 182),
(575, 'Bun', 'https://bun.sh/', '30:42', 182),
(576, 'Cloudflare Workers', 'https://workers.cloudflare.com/', '30:42', 182),
(577, 'Winter CG', 'https://wicg.github.io/admin/charter.html', '27:18', 182),
(578, 'Web interoperability runtimes CG', 'https://wicg.github.io/admin/charter.html', '31:21', 182),
(579, 'Agalia', 'https://www.agalia.com/', '33:41', 182),
(580, 'WebKit', 'https://webkit.org/', '33:41', 182),
(581, 'bite dance', 'https://www.bytedance.com/', '33:41', 182),
(582, 'TikTok', 'https://www.tiktok.com/', '33:41', 182),
(583, 'SvelteKit API changes', 'https://github.com/sveltejs/kit', '09:12', 183),
(584, 'Arc Browser', 'https://arcbrowser.io/', '08:11', 184),
(585, 'Can I Use', 'https://caniuse.com', '18:04', 184),
(586, 'Next.js', 'https://nextjs.org', '00:37', 185),
(587, 'Vercel', 'https://vercel.com', '00:45', 185),
(588, 'React', 'https://reactjs.org/', '04:09', 185),
(589, 'Lightstep', 'https://www.lightstep.com/', '13:15', 185),
(590, 'Date input values', 'https://twitter.com/wesbos/status/1624320583301242880', '04:08', 186),
(591, 'Web Authentication API', 'https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API', '14:50', 186),
(592, 'LogRocket', 'https://logrocket.com/', '02:55', 187),
(593, 'Linode', 'https://www.linode.com/', '04:04', 187),
(594, 'WPBeginner', 'https://wpbeginner.com/', '02:19', 188),
(595, 'OptinMonster', 'https://optinmonster.com/', '03:16', 188),
(596, 'MonsterInsights', 'https://www.monsterinsights.com/', '11:22', 188),
(597, 'All in One SEO', 'https://www.seobetter.com/', '12:04', 188),
(598, 'AwesomeMotive YouTube', 'https://www.youtube.com/@awesomemotive', '18:50', 188),
(599, 'Prismic', 'https://prismic.io/', '00:21', 189),
(600, 'Sentry', 'https://sentry.io/', '00:21', 189),
(601, 'FreshBooks', 'https://www.freshbooks.com/', '00:21', 189),
(602, 'Gatsby', 'https://www.gatsbyjs.com/', '02:57', 189),
(603, 'Bun', 'https://bun.sh', '00:27', 190),
(604, 'FreshBooks', 'https://freshbooks.com/syntax', '01:13', 190),
(605, 'LightStep', 'https://lightstep.com/syntax', '02:08', 190),
(606, 'Neo4j', 'https://neo4j.com/', '05:05', 191),
(607, 'GraphAcademy', 'https://neo4j.com/graphacademy/', '02:12', 191),
(608, 'Wikipedia naming conventions', 'https://en.wikipedia.org/wiki/Naming_convention_(programming)', '13:55', 192),
(609, '30 Seconds of Interviews', 'https://30secondsofinterviews.org', '00:49', 193),
(610, 'Sentry', 'https://sentry.io/', '03:04', 193),
(611, 'LightStep', 'https://lightstep.com/syntax', '02:48', 193),
(612, 'AWS CDK', 'https://aws.amazon.com/cdk/', '23:53', 194),
(613, 'CDK workshop', 'https://cdkworkshop.com', '23:43', 194),
(614, 'PPPoE', 'https://en.wikipedia.org/wiki/Point-to-Point_Protocol_over_Ethernet', '02:26', 195),
(615, 'Home Assistant', 'https://www.home-assistant.io/', '04:51', 195),
(616, 'Mushroom Theme', 'https://github.com/piitaya/lovelace-mushroom', '05:40', 195),
(617, 'd3-interpolate', 'https://github.com/d3/d3-interpolate', '10:34', 196),
(618, 'Emily Shea\'s video', 'https://www.youtube.com/watch?v=GyZtYzFq4WY', '03:20', 197),
(619, 'Talon Voice', 'https://talonvoice.com/', '06:01', 197),
(620, 'Syntax.fm Podcast', 'https://syntax.fm', '00:01', 198),
(621, 'CFP Weekly', 'https://www.cfpweekly.com/', '16:32', 198),
(622, 'Color for the Color Challenged', 'https://www.cambridgeincolour.com/tutorials/color-perception.htm', '10:38', 199),
(623, 'Better Color Tools', 'https://better-color-tools.pages.dev/', '20:32', 199),
(624, 'Taming the Meta Language', 'https://overreacted.io/the-elements-of-ui-engineering/', '07:31', 200),
(625, 'The Pragmatic Engineer', 'https://blog.pragmaticengineer.com/', '20:05', 200),
(626, 'Syntax Podcast', 'https://syntax.fm', '00:01', 201),
(627, 'Page Transitions API explainer', 'https://github.com/WICG/page-transitions', '00:15', 202),
(628, 'Chrome flags', 'chrome://flags/#document-transition', '17:28', 202),
(629, 'Homebridge', 'https://homebridge.io/', '11:31', 204),
(630, 'Demo of viewport units', 'https://www.bram.us/2020/07/28/experimenting-with-new-viewport-units/', '06:09', 205),
(631, 'API for keyboard info', 'https://wicg.github.io/keyboard-map/', '13:50', 205),
(632, 'Netlify', 'https://netlify.com', '00:37:39', 206),
(633, 'PlanetScale', 'https://planetscale.com', '00:35:23', 206),
(634, 'S-Town', 'https://stownpodcast.org/', '00:52:23', 206),
(635, 'Sentry', 'https://sentry.io', '00:50', 207),
(636, 'Sanity', 'https://www.sanity.io', '00:50', 207),
(637, '.tech Domains', 'https://get.tech/', '00:50', 207),
(638, 'Magic Bell', 'https://www.magicbell.com/', '01:21', 208),
(639, 'LogRocket', 'https://logrocket.com/', '02:37', 208),
(640, 'Webflow', 'https://webflow.com', '05:48', 209),
(641, 'Airtable', 'https://airtable.com', '16:54', 209),
(642, 'Zapier', 'https://zapier.com', '18:04', 209),
(643, 'Make', 'https://make.com', '19:01', 209),
(644, 'Bubble', 'https://bubble.io', '18:11', 209),
(645, 'Makerpad', 'https://www.makerpad.co/', '24:50', 209),
(646, 'SeedProd', 'https://seedprod.com/', '25:32', 209),
(647, 'Strapi', 'https://strapi.io/', '40:16', 209),
(648, 'Century', 'https://sentry.io', '00:36', 210),
(649, 'FreshBooks', 'https://www.freshbooks.com', '39:07', 210),
(650, 'PaymentsHub', 'https://developer.paymentshub.com/syntax', '25:04', 210),
(651, 'Sentry', 'https://sentry.io/', '09:08', 210),
(652, 'Syntax.fm', 'https://syntax.fm/', '00:00', 210),
(653, 'Linode', 'https://linode.com/syntax', '00:59', 211),
(654, 'Sentry', 'https://sentry.io/', '02:08', 211),
(655, 'Anselm\'s Website', 'https://anselm-hannemann.com/', '22:05', 212),
(656, 'Anselm\'s Instagram', 'https://www.instagram.com/schaufel_und_gabel/', '59:22', 212),
(657, 'Riverside', 'https://riverside.fm/', '00:35', 213),
(658, 'GitHub', 'https://github.com', '12:10', 213),
(659, 'Tower', 'https://www.git-tower.com/', '12:36', 213),
(660, 'Kraken', 'https://www.gitkraken.com/', '12:36', 213),
(661, 'Espanso', 'https://espanso.org/', '56:39', 213),
(662, 'FreshBooks', 'https://www.freshbooks.com/', '55:31', 213),
(663, 'Level Up Tutorials', 'https://leveluptutorials.com/', '01:00:46', 213),
(664, 'Wes Bos Courses', 'https://wesbos.com/courses', '01:01:29', 213),
(665, 'Cache Control Header Docs', 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', NULL, 214),
(666, 'RedwoodJS', 'https://redwoodjs.com', '01:33', 215),
(667, 'Where Good Ideas Come From', 'https://www.amazon.com/Where-Good-Ideas-Come-Innovation/dp/1594485380', '21:29', 215),
(668, 'RedwoodJS Startup Fund', 'https://www.redwoodjs.com/startups', '37:35', 215),
(669, 'esbuild', 'https://esbuild.github.io/', '05:48', 216),
(670, 'SWC', 'https://swc.rs/', '05:51', 216),
(671, 'Vite', 'https://vitejs.dev/', '29:09', 216),
(672, 'Parcel', 'https://parceljs.org/', '29:21', 216),
(673, 'Bun', 'https://bun.sh/', '32:13', 216),
(674, 'Deno', 'https://deno.land/', '15:48', 216),
(675, 'esno', 'https://github.com/antfu/esno', '16:55', 216),
(676, 'tsnode', 'https://github.com/TypeStrong/ts-node', '22:07', 216),
(677, 'Sentry', 'https://sentry.io', '06:21', 217),
(678, 'Sanity.io', 'https://www.sanity.io/', '05:40', 217),
(679, 'Structured Content Conference', 'https://structuredcontent.com/', '05:40', 217),
(680, 'Fully Jarvis Standing Desk', 'https://www.fully.com/standing-desks/jarvis.html', '14:54', 217),
(681, 'Turborepo', 'https://turborepo.org', '56:09', 218),
(682, 'Vercel', 'https://vercel.com', '56:09', 218),
(683, 'Soma', 'https://www.soma.com', '56:37', 218),
(684, 'Prismic', 'https://prismic.io', '17:45', 219),
(685, 'LogRocket', 'https://logrocket.com', '30:50', 219),
(686, 'Auth0', 'https://auth0.com', '47:27', 219),
(687, 'wintercg.org', 'https://wintercg.org', '20:42', 220),
(688, 'NX', 'https://nx.dev', '00:00', 221),
(689, 'Basil', 'https://bazel.build/', '06:22', 221),
(690, 'HHKB keyboard', 'https://hhkeyboard.us/', '54:13', 221),
(691, 'MDN Web Docs', 'https://developer.mozilla.org/en-US/', '00:00', 222),
(692, 'JavaScript30', 'https://javascript30.com/', '06:56', 222),
(693, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '07:56', 222),
(694, 'Motion One', 'https://motion.dev/', '24:45', 222),
(695, 'Sentry', 'https://sentry.io/', '02:20', 223),
(696, 'PaymentsHub', 'https://www.paymentshub.com/', '04:00', 223),
(697, 'Syntax.fm', 'https://syntax.fm', '00:02', 224),
(698, 'Linode', 'http://linode.com/syntax', '00:37', 224),
(699, 'LogRocket', 'https://logrocket.com/syntax/', '00:37', 224),
(700, 'Freshbooks', 'https://freshbooks.com/syntax', '00:37', 224),
(701, 'Linode', 'https://linode.com/syntax', '01:26', 225),
(702, 'Sentry', 'https://sentry.io/', '02:09', 225),
(703, 'WeakMap MDN', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap', '05:08', 226),
(704, 'StackOverflow', 'https://stackoverflow.com/', '18:41', 226),
(705, 'Prismic', 'https://prismic.io', '01:04', 227),
(706, 'LogRocket', 'https://logrocket.com', '02:26', 227),
(707, '5280\'s Best Coffee Shops in Denver', 'https://www.5280.com/2019/10/the-best-coffee-shops-in-denver/', '11:04', 228),
(708, 'React Icons', 'https://react-icons.github.io/react-icons/', '21:27', 228),
(709, 'Svelte Cubed', 'https://svelte-cubed.vercel.app/', '02:46', 229),
(710, 'Three.js', 'https://threejs.org/', '05:15', 229),
(711, 'Hyundai Ioniq 5', 'https://www.hyundaiusa.com/us/en/vehicles/ioniq-5', '00:59', 230),
(712, 'Doug DeMuro Ioniq 5 video', 'https://www.youtube.com/user/ddemuro', '02:54', 230),
(713, 'Century', 'https://sentry.io/', '02:33', 231),
(714, 'Magic Bell', 'https://www.magicbell.com/', '03:36', 231),
(715, 'Reactathon Conference', 'https://www.reactathon.com', '15:50', 232),
(716, 'Level Up Links Newsletter', 'https://www.leveluptutorials.com/pro', '24:35', 232),
(717, 'Blog Post', 'https://devblogs.microsoft.com/typescript/types-for-javascript/', '02:04', 233),
(718, 'Proposal Repo', 'https://github.com/microsoft/TypeScript-TC39-Proposals', '05:13', 233),
(719, 'bald.design', 'https://bald.design', '04:13', 234),
(720, 'huangande.dev', 'https://huangande.dev', '08:11', 234),
(721, 'Kenny Thai', 'https://kennythai.com', '09:19', 234),
(722, 'abgn.me', 'https://abgn.me', '11:17', 234),
(723, 'bradleyshellnut.com', 'https://bradleyshellnut.com', '14:53', 234),
(724, 'hunterjennings.dev', 'https://hunterjennings.dev', '18:01', 234),
(725, 'matthewfarlim.com', 'https://matthewfarlim.com', '21:13', 234),
(726, 'Vitest', 'https://vitest.dev', '00:27', 235),
(727, 'Sentry', 'https://sentry.io/', '02:39', 235),
(728, 'Magicbell', 'https://magicbell.com/', '03:53', 235),
(729, 'State of JS', 'https://stateofjs.com/', '05:02', 235),
(730, 'Vite', 'https://vitejs.dev/', '05:16', 235),
(731, 'Jest', 'https://jestjs.io/', '05:25', 235),
(732, 'Testing Library', 'https://testing-library.com/', '12:58', 235),
(733, 'C8', 'https://github.com/bcoe/c8', '10:45', 235),
(734, 'TinyPool', 'https://github.com/vitejs/tinypool', '10:16', 235),
(735, 'Tiny Spy', 'https://github.com/Aslemammad/tinyspy', '10:45', 235),
(736, 'Syntax.fm', 'https://syntax.fm', '00:02', 236),
(737, '.tech Domain Game', 'https://get.tech/syntax', '01:51', 236),
(738, 'Render', 'https://render.com', '03:32', 237),
(739, 'Cloudflare', 'https://www.cloudflare.com/', '04:28', 237),
(740, 'Let\'s Encrypt', 'https://letsencrypt.org/', '05:43', 237),
(741, 'sanity.io', 'https://www.sanity.io/', '38:35', 238),
(742, 'Haul - Sanity Shopify Starter', 'https://www.sanity.io/create?template=sanity-io%2Fsanity-template-nextjs-ecommerce', '39:17', 238),
(743, 'Syntax.fm', 'https://Syntax.fm', '00:24', 239),
(744, 'LogRocket', 'https://logrocket.com/syntax', '01:28', 239),
(745, 'Retool', 'https://retool.com/syntax', '02:27', 239),
(746, 'State of JS', 'https://2022.stateofjs.com/en-US/', '00:11', 240),
(747, 'Touri', 'https://tauri.studio/', '10:11', 240),
(748, 'Sentry', 'https://sentry.io/', '18:38', 240),
(749, 'Sanity', 'https://www.sanity.io/', '27:11', 240),
(750, 'FreshBooks', 'https://www.freshbooks.com/', '53:05', 240),
(751, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '57:28', 240),
(752, 'Zig Pak', 'https://www.zigpak.com/', '05:24', 241),
(753, 'Stallion Express', 'https://www.stallionexpress.com/', '20:38', 241),
(754, 'State of JS Survey', 'https://stateofjs.com', '00:11', 242),
(755, 'MDN Web Docs - Optional chaining', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining', '10:23', 242),
(756, 'MDN Web Docs - Nullish coalescing', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator', '10:23', 242),
(757, 'Motion Design', 'https://motion.dev/', '15:29', 242),
(758, 'MDN Web Docs - Intl', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl', '16:43', 242),
(759, 'MDN Web Docs - Page Visibility API', 'https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API', '19:01', 242),
(760, 'MDN Web Docs - Broadcast Channel API', 'https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API', '19:10', 242),
(761, 'MDN Web Docs - Web Share API', 'https://developer.mozilla.org/en-US/docs/Web/API/Web_Share_API', '20:53', 242),
(762, 'Vite', 'https://vitejs.dev/', '43:14', 242),
(763, 'Rome', 'https://rome.tools/', '44:30', 242),
(764, 'Sentry', 'https://sentry.io', '02:59', 243),
(765, 'Prismic', 'https://prismic.io/', '01:32', 243),
(766, 'AWS X-Ray', 'https://aws.amazon.com/xray/', '12:50', 244),
(767, 'ClickHouse', 'https://clickhouse.com/', '28:32', 244),
(768, 'Calypso', 'https://github.com/Automattic/wp-calypso', '37:51', 244),
(769, 'Magic Bell', 'https://magicbell.com', '01:27', 245),
(770, 'Sentry', 'https://sentry.io', '02:50', 245),
(771, 'SvelteKit', 'https://kit.svelte.dev/', '33:15', 246),
(772, 'Remix', 'https://remix.run/', '33:44', 246),
(773, 'Sanity and Remix', 'https://www.sanity.io/blog/build-remix-website-with-sanity-studio-live-preview', '37:04', 246),
(774, 'Svelte RFCs', 'https://github.com/sveltejs/rfcs', '06:44', 247),
(775, 'React RFCs', 'https://github.com/reactjs/rfcs', '06:44', 247),
(776, 'Vue RFCs', 'https://github.com/vuejs/rfcs', '06:44', 247),
(777, 'Josh Wardle', 'https://www.powerlanguage.co.uk/', '00:48', 248),
(778, 'Syntax FM', 'https://syntax.fm/', '00:11', 248),
(779, 'Wordle', 'https://www.powerlanguage.co.uk/wordle/', '00:21', 248),
(780, 'New York Times', 'https://www.nytimes.com/', '05:15', 248),
(781, 'Hashnode', 'https://hashnode.com/', '01:09', 249),
(782, 'Linode', 'https://linode.com/syntax', '03:00', 249),
(783, 'Works With Workers', 'https://workers.cloudflare.com/works-with/', '22:55', 249),
(784, 'Syntax.fm', 'https://syntax.fm', '00:04', 250),
(785, 'Linode', 'https://linode.com/syntax', '00:19', 250),
(786, 'Sanity', 'https://www.sanity.io/', '03:19', 251),
(787, 'Sentry', 'https://sentry.io/', '02:01', 251),
(788, 'Turborepo', 'https://turborepo.org/', '30:21', 252),
(789, 'NX', 'https://nx.dev/', '39:38', 252),
(790, 'Lerna', 'https://lerna.js.org/', '47:17', 252),
(791, 'Rush.js', 'https://rushjs.io/', '48:15', 252),
(792, 'LogRocket', 'https://logrocket.com/syntax/', '00:48', 253),
(793, 'Magic Bell', 'https://magicbell.com/', '01:19', 253),
(794, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '05:33', 254),
(795, 'Level Up Tutorials Discord', 'https://discord.gg/leveluptutorials', '06:38', 254),
(796, 'Syntax Highlight', 'https://syntax.fm/show/317/syntax-highlight-portfolio-reviews-for-developers', '05:51', 254),
(797, 'Emailing Busy People', 'https://syntax.fm/show/117/how-to-email-busy-people', '11:52', 254),
(798, 'Stripe', 'https://stripe.com/', '20:04', 254),
(799, 'Subatomic CSS', 'https://github.com/davidkpiano/subatomic', '20:15', 254),
(800, 'Stylent', 'https://stylent.dev/', '35:05', 254),
(801, 'Linode', 'https://linode.com/syntax', '33:37', 254),
(802, 'Freshbooks', 'https://freshbooks.com/syntax', '42:07', 254),
(803, 'Level Up Tutorials Pro', 'https://www.leveluptutorials.com/pro', '49:54', 254),
(804, 'Wes Bos Courses', 'https://wesbos.com/courses', '50:32', 254),
(805, 'Level Up Tutorials', 'https://leveluptutorials.com', '07:15', 255),
(806, 'Svelte', 'https://svelte.dev', '24:12', 255),
(807, 'Syntax.fm', 'https://syntax.fm', '00:02', 256),
(808, 'Prismic', 'https://prismic.io', '00:57', 256),
(809, 'Slice Machine', 'https://slicemachine.dev', '18:44', 256),
(810, 'LogRocket', 'https://logrocket.com', '33:52', 256),
(811, 'Retool', 'https://retool.com', '53:05', 256),
(812, 'Remix Docs', 'https://remix.run/docs', '01:08', 257),
(813, 'Open UI', 'https://open-ui.org', '10:58', 258),
(814, 'Starship', 'https://starship.rs/', '26:53', 258),
(815, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '27:04', 258),
(816, 'Wes Bos Courses', 'https://wesbos.com/courses', '28:01', 258),
(817, 'Wise', 'https://wise.com/', '57:07', 258),
(818, 'Paul Irish random color', 'https://www.paulirish.com/2009/random-hex-color-code-snippets/', '06:15', 259),
(819, 'Wes Bos dump', 'https://github.com/wesbos/dump', '16:07', 259),
(820, 'Syntax.fm', 'https://syntax.fm', '00:42', 260),
(821, 'Sentry', 'https://sentry.io/', '00:52', 260),
(822, 'Mux', 'https://mux.com', '00:52', 260),
(823, 'Syntax.fm', 'https://syntax.fm', '00:01', 261),
(824, 'Sanity', 'https://www.sanity.io/', '03:27', 261),
(825, 'LogRocket', 'https://logrocket.com/', '04:34', 261),
(826, 'Gitpod', 'https://www.gitpod.io/', '00:27', 262),
(827, 'NFT Bay', 'https://nftbay.org/', '07:14', 262),
(828, 'No Yammer', 'https://noyammer.com/', '12:10', 262),
(829, 'Helinox', 'https://www.helinox.com/', '54:06', 262),
(830, 'Zombo', 'https://zombo.com/', '55:18', 262),
(831, 'West Boss Courses', 'https://westbosst.com/courses', '58:50', 262),
(832, 'Level Up Tutorials', 'https://leveluptutorials.com/', '58:58', 262),
(833, 'Gitpod Community', 'https://www.gitpod.io/chat/', '59:51', 262),
(834, 'Gitpod Workshops', 'https://www.gitpod.io/blog/gitpod-workshops/', '01:00:33', 262),
(835, 'Syntax.fm', 'https://syntax.fm', '00:03', 263),
(836, 'Prismic', 'https://prismic.io/syntax', '02:22', 263),
(837, 'Sentry', 'https://sentry.io/', '02:44', 263),
(838, 'Lighthouse', 'https://github.com/GoogleChrome/lighthouse', '02:22', 264),
(839, 'Figma + Rust Blog Post', 'https://www.figma.com/blog/how-figmas-multiplayer-technology-works/', '15:34', 264),
(840, 'Conventional Commits', 'https://www.conventionalcommits.org/en/v1.0.0/', '43:06', 264),
(841, 'React Hooks in Svelte', 'https://github.com/beyonk-adventures/svelte-reactive-store-hooks', '14:31', 265),
(842, 'Node-RED', 'https://nodered.org', '27:05', 266),
(843, 'Daily.dev', 'https://daily.dev', '58:12', 266),
(844, 'Spotless App', 'https://spotlessapp.com/', '58:51', 266),
(845, 'MDN web docs on meta tags', 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta', '00:29', 267),
(846, 'That\'s a Nice Touch TikTok', 'https://www.tiktok.com/@thatsanicetouch', '13:58', 267),
(847, 'Syntax Podcast', 'https://syntax.fm', '00:02', 268),
(848, 'Freshbooks', 'https://freshbooks.com/', '00:45', 268),
(849, 'Sentry', 'https://sentry.io/', '00:45', 268),
(850, 'Linode', 'https://www.linode.com/', '00:45', 268),
(851, 'Stripe', 'https://stripe.com/', '39:30', 268),
(852, 'Syntax.fm', 'https://syntax.fm', '00:27', 269),
(853, 'LogRocket', 'https://logrocket.com/', '02:44', 269),
(854, 'FreshBooks', 'https://freshbooks.com/', '03:25', 269),
(855, 'Forehead', 'https://apps.apple.com/us/app/forehead/id1648551921', '52:14', 270),
(856, 'Exynos Charger', 'https://www.kickstarter.com/projects/2091139540/exynos-the-240w-6port-charger', '53:02', 270),
(857, 'Sentry', 'https://sentry.io/', '02:34', 271),
(858, 'Sanity CMS', 'https://www.sanity.io/', '02:45', 271),
(859, 'Stranger in a Strangeland', 'https://en.wikipedia.org/wiki/Stranger_in_a_Strange_Land', '21:08', 272),
(860, 'Chamberlain Smart Garage Control', 'https://www.chamberlain.com/smart-garage-control/p/MYQ-G0401-SP', '54:23', 272),
(861, 'Next.js', 'https://nextjs.org', '00:03', 273),
(862, 'Sanity', 'https://www.sanity.io/', '01:19', 273),
(863, 'LogRocket', 'https://logrocket.com/', '01:38', 273),
(864, 'StackBlitz', 'https://stackblitz.com', '00:33', 274),
(865, 'Fugu API Tracker', 'https://fugue.status.im/', '10:04', 274),
(866, 'Astro', 'https://astro.build', '53:17', 274),
(867, 'Astro', 'https://astro.build', '00:33', 275),
(868, 'Syntax.fm', 'https://syntax.fm', '00:37', 275),
(869, 'Linode', 'https://linode.com/syntax', '02:50', 275),
(870, 'Syntax podcast', 'https://Syntax.fm', '00:01', 276),
(871, 'What is PNPM video', 'https://www.youtube.com/watch?v=6iZiqQZBQJY', '04:40', 277),
(872, 'LogRocket', 'https://logrocket.com/signup/', '04:08', 277),
(873, 'Paige Niedringhaus monorepo post', 'https://www.paigeniedringhaus.com/blog/monorepos-with-lerna-and-yarn-workspaces/', '16:33', 277),
(874, 'LogRocket', 'https://logrocket.com/', '18:09', 278),
(875, 'Mux', 'https://mux.com/', '38:24', 278),
(876, 'Linode', 'https://www.linode.com/', '30:22', 278),
(877, 'Syntax.fm Podcast', 'https://syntax.fm', '00:00', 279),
(878, 'Sentry', 'http://sentry.io/', '01:34', 279),
(879, 'Linode', 'http://linode.com/', '02:23', 279),
(880, 'Prismic', 'https://prismic.io/', '00:34', 280),
(881, 'Sentry', 'https://sentry.io/', '00:34', 280),
(882, 'Cloudinary', 'https://cloudinary.com/', '00:34', 280),
(883, 'MongoDB Atlas', 'https://www.mongodb.com/atlas', '12:27', 280),
(884, 'SvelteKit', 'https://kit.svelte.dev/', '42:39', 280),
(885, 'Gatsby', 'https://www.gatsbyjs.com/', '41:55', 280),
(886, 'Next.js', 'https://nextjs.org/', '41:55', 280),
(887, 'JUST', 'https://github.com/angus-c/just', '03:43', 281),
(888, 'FreshBooks', 'https://freshbooks.com/syntax', '09:04', 282),
(889, 'LogRocket', 'https://logrocket.com/syntax', '19:45', 282),
(890, 'Cloudinary', 'https://cloudinary.com', '34:03', 282),
(891, 'Sentry', 'https://sentry.io', '01:33', 283),
(892, 'Sanity CMS', 'https://www.sanity.io/', '02:34', 283),
(893, 'Cloudinary', 'https://cloudinary.com/', '07:00', 284),
(894, 'Auth0', 'https://auth0.com/', '19:15', 284),
(895, 'Sentry', 'https://sentry.io/', '33:48', 284),
(896, 'Laravel', 'https://laravel.com/', '13:12', 285),
(897, 'Syntax', 'https://syntax.fm', '00:01', 286),
(898, '.tech Domains', 'https://get.tech/syntax', '00:51', 286),
(899, 'LogRocket', 'https://logrocket.com/syntax', '34:24', 286),
(900, 'Mux', 'https://mux.com/syntax', '47:16', 286),
(901, 'Lucy Language', 'https://lucylang.org', '03:36', 287),
(902, 'MD Specs', 'https://md.specs.zone/', '06:33', 287),
(903, 'Fig', 'https://fig.io/', '13:29', 287),
(904, 'Warp', 'https://www.warp.dev/', '16:17', 287),
(905, 'Raycast', 'https://www.raycast.com/', '19:49', 287),
(906, 'Obsidian', 'https://obsidian.md/', '24:00', 287),
(907, 'Descript', 'https://www.descript.com/', '27:00', 287),
(908, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '00:47', 288),
(909, 'Prismic', 'https://prismic.io/', '00:54', 288),
(910, 'Sentry', 'https://sentry.io/', '01:09', 288),
(911, 'Cloudinary', 'https://cloudinary.com/', '01:13', 288),
(912, 'SvelteKit', 'https://kit.svelte.dev/', '02:15', 288),
(913, 'Sean Sicks blog post', 'https://seansm.dev/posts/2022-10-14-svelte-feedback/', '03:52', 288),
(914, 'Vime', 'https://vimejs.com/', '10:36', 288),
(915, 'Prismic', 'https://prismic.io/', '13:52', 288),
(916, 'Render', 'https://render.com/', '34:23', 288),
(917, 'Vercel', 'https://vercel.com/', '35:30', 288),
(918, 'Cloudflare', 'https://www.cloudflare.com/', '35:30', 288),
(919, 'Pancake', 'https://pancake-charts.surge.sh/', '36:36', 288),
(920, 'Svelte REPL', 'https://svelte.dev/repl', '43:33', 288),
(921, 'Svelte Motion', 'https://sveltemotion.com/', '40:46', 288),
(922, 'Snell', 'https://snell.be/', '50:25', 288),
(923, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '55:00', 288),
(924, 'Level Up Tutorials', 'https://www.leveluptutorials.com/pro', '54:57', 288),
(925, 'Linode', 'https://www.linode.com/syntax', '02:23', 289),
(926, 'LogRocket', 'https://logrocket.com/syntax', '03:30', 289),
(927, 'ngrok', 'https://ngrok.com', '14:18', 289),
(928, 'Stripe Webhooks', 'https://stripe.com/webhooks', '17:51', 289),
(929, 'Insomnia', 'https://insomnia.rest/', '16:58', 289),
(930, 'Webhook.site', 'https://webhook.site/', '19:40', 289),
(931, 'Sanity', 'https://www.sanity.io/', '11:58', 290),
(932, 'LogRocket', 'https://logrocket.com/', '20:57', 290),
(933, 'Auth0', 'https://auth0.com/', '28:18', 290),
(934, 'Ultraloq', 'https://ultraloq.com/', '32:40', 290),
(935, 'Starlink', 'https://www.starlink.com/', '08:29', 291),
(936, 'Unifi', 'https://unifi-network.ui.com/', '16:48', 291),
(937, 'Is Houdini Ready Yet', 'https://ishoudinireadyyet.com', '05:59', 292),
(938, 'Linode', 'https://linode.com/syntax', '46:46', 292),
(939, 'Auth0', 'https://auth0.com/syntax', '27:47', 292),
(940, 'Sentry', 'https://sentry.io/syntax', '15:47', 292),
(941, 'Frontity', 'https://frontity.org/', '42:08', 292),
(942, 'Century', 'https://sentry.io', '02:23', 293),
(943, 'Netlify', 'https://www.netlify.com/', '04:23', 293),
(944, 'Builder.io', 'https://www.builder.io/', '20:02', 293),
(945, 'SvelteKit', 'https://kit.svelte.dev/', '29:25', 293),
(946, 'Turborepo', 'https://turborepo.org/', '38:34', 293),
(947, 'Sentry', 'https://sentry.io', '41:20', 293),
(948, 'SvelteKit', 'https://kit.svelte.dev/', '05:11', 294),
(949, 'Mux', 'https://mux.com/', '06:46', 294),
(950, 'FlexSearch', 'https://github.com/nextapps-de/flexsearch', '07:29', 294),
(951, 'Deepgram', 'https://www.deepgram.com/', '21:31', 294),
(952, 'OpenAI', 'https://openai.com/', '21:31', 294),
(953, 'Anthropic', 'https://www.anthropic.com/', '21:31', 294),
(954, 'Prisma', 'https://www.prisma.io/', '19:00', 294),
(955, 'Vercel', 'https://vercel.com/', '24:37', 294),
(956, 'Fly.io', 'https://fly.io/', '24:37', 294),
(957, 'PlanetScale', 'https://planetscale.com/', '27:35', 294),
(958, 'Syntax.fm', 'https://syntax.fm', '00:01', 295),
(959, 'Sentry', 'https://sentry.io/', '00:11', 295),
(960, 'Mojo', 'https://mojo.ai', '54:23', 297),
(961, 'Modular', 'https://modular.ai', '54:23', 297),
(962, 'Brad Frost\'s website', 'https://bradfrost.com', '01:42', 298),
(963, 'Atomic Design book', 'https://atomicdesign.bradfrost.com/', '03:51', 298),
(964, 'Material Design', 'https://material.io', '09:55', 298),
(965, 'Shopify Polaris', 'https://polaris.shopify.com/', '09:55', 298),
(966, 'Carbon Design System', 'https://www.carbondesignsystem.com/', '09:55', 298),
(967, 'Anthropic', 'https://www.anthropic.com/', '09:34', 299),
(968, 'Claude', 'https://www.anthropic.com/', '09:36', 299),
(969, 'Cloudflare', 'https://www.cloudflare.com/', '18:48', 299),
(970, 'Syntax podcast', 'https://syntax.fm/', '00:00', 300),
(971, 'Sentry', 'https://sentry.io/', '02:02', 300),
(972, '960 Grid System', 'https://960.gs/', '23:33', 300),
(973, 'State of CSS 2023', 'https://stateofcss.com', '00:11', 301),
(974, 'Tailwind CSS', 'https://tailwindcss.com/', '01:43', 301),
(975, 'Bootstrap', 'https://getbootstrap.com/', '04:08', 301),
(976, 'Lightning CSS', 'https://github.com/pigment/lightning', '21:45', 301),
(977, 'Project Wallace', 'https://www.projectwallace.com/', '23:25', 301),
(978, 'Atomizer', 'https://acss.io/', '24:49', 301),
(979, 'Open Props', 'https://open-props.style/', '26:27', 301),
(980, 'Shoelace', 'https://shoelace.style/', '28:09', 301),
(981, 'Styled Components', 'https://styled-components.com/', '32:10', 301),
(982, 'CSS Modules', 'https://github.com/css-modules/css-modules', '32:10', 301),
(983, 'Prettier', 'https://prettier.io/', '33:30', 301),
(984, 'AutoPrefixer', 'https://github.com/postcss/autoprefixer', '33:47', 301),
(985, 'Stylelint', 'https://stylelint.io/', '33:55', 301),
(986, 'Boxing 1970s', 'https://www.youtube.com/playlist?list=PLLUh6UiTrixYzLUBXx18B3jMfe2avhSxz', '53:56', 301),
(987, 'Birch desktop grommets', 'https://amzn.to/3HObT7l', '10:04', 302),
(988, 'VIVO monitor arm', 'https://amzn.to/3If6Uoi', '22:12', 302),
(989, 'Syntax', 'https://syntax.fm', '00:00', 303),
(990, 'Builderment', 'https://builderment.com', '46:21', 304),
(991, 'Level Up Tutorials', 'https://www.leveluptutorials.com/', '48:30', 304),
(992, 'Wes Bos Courses', 'https://wesbos.com/courses', '48:14', 304),
(993, 'Syntax Podcast', 'https://syntax.fm', '00:00', 305),
(994, 'Linode', 'https://linode.com/syntax', '01:38', 305),
(995, 'Sanity', 'https://www.sanity.io/', '00:02', 306),
(996, 'Sentry', 'https://sentry.io/', '00:03', 306),
(997, 'Cloudinary', 'https://cloudinary.com/', '00:04', 306),
(998, 'CSS Tricks Flexbox Guide', 'https://css-tricks.com/snippets/css/a-guide-to-flexbox/', '04:09', 307),
(999, 'flexbox.io', 'https://flexbox.io', '07:10', 307),
(1000, 'cssgrid.io', 'https://cssgrid.io', '07:10', 307);

INSERT INTO `Link` (`id`, `name`, `url`, `timestamp`, `showNote`) VALUES
(1001, 'Syntax.fm Question Submission', 'https://syntax.fm/', '00:37', 308),
(1002, 'Sanitize HTML in JS', 'https://wesbos.com/sanitization-html-es6-template-strings/', '12:01', 308),
(1003, 'Level Up Tutorials', 'https://LevelUpTutorials.com', '55:44', 308),
(1004, 'Wes Bos Courses', 'https://wesbos.com/courses', '54:56', 308),
(1005, 'Ship Weird Blog Post', 'https://www.ryanflorence.com/2023/ship-weird/', '04:16', 309),
(1006, 'MDN Link Tag', 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link', '05:26', 309),
(1007, 'HTML Spec', 'https://html.spec.whatwg.org/', '05:43', 310),
(1008, 'Type Challenges', 'https://github.com/type-challenges/type-challenges', '06:02', 311),
(1009, 'TypeScript Utility Types', 'https://www.typescriptlang.org/docs/handbook/utility-types.html', '07:19', 311),
(1010, 'Prismic', 'https://prismic.io/', '15:03', 312),
(1011, 'LogRocket', 'https://logrocket.com/', '16:34', 312),
(1012, 'Render', 'https://render.com/', '18:28', 312),
(1013, 'Drupal', 'https://www.drupal.org/', '27:11', 312),
(1014, 'I Was There Too', 'https://www.iwasheretoo.com/', '45:22', 312),
(1015, 'GitHub Copilot', 'https://copilot.github.com/', '02:53', 313),
(1016, 'Next.js', 'https://nextjs.org', '08:16', 313),
(1017, 'Astro', 'https://astro.build/', '08:56', 313),
(1018, 'Notion API', 'https://developers.notion.com/', '09:51', 313),
(1019, 'Petite Vue', 'https://github.com/vuejs/petite-vue', '11:34', 313),
(1020, 'Stackblitz', 'https://stackblitz.com', '14:01', 313),
(1021, 'Solid JS', 'https://www.solidjs.com/', '15:32', 313),
(1022, 'Stately', 'https://stately.ai/', '16:41', 313),
(1023, 'Web3.js', 'https://web3js.readthedocs.io/', '18:20', 313),
(1024, 'Syntax.fm', 'https://syntax.fm', '00:01', 314),
(1025, 'SvelteKit', 'https://kit.svelte.dev/', '08:23', 314),
(1026, 'Next.js', 'https://nextjs.org/', '14:08', 314),
(1027, 'KeystoneJS', 'https://keystonejs.com/', '15:42', 314),
(1028, 'Prismic', 'https://prismic.io/', '25:09', 314),
(1029, 'Sentry', 'https://sentry.io/', '24:05', 314),
(1030, 'Cloudinary', 'https://cloudinary.com/', '50:51', 314),
(1031, 'Favicon Wikipedia', 'https://en.wikipedia.org/wiki/Favicon', '00:52', 315),
(1032, 'LogRocket', 'https://logrocket.com/syntax', '02:25', 315),
(1033, 'Sanity', 'https://www.sanity.io/syntax', '03:08', 315),
(1034, 'MDN Web Manifest', 'https://developer.mozilla.org/en-US/docs/Web/Manifest', '06:02', 315),
(1035, 'CSS Tricks - Favicon', 'https://css-tricks.com/favicon-quiz/', '09:44', 315),
(1036, 'Can I Use - SVG Favicon', 'https://caniuse.com/?search=svg%20favicon', '11:44', 315),
(1037, 'Key Code Info', 'https://keycode.info/', '14:48', 315),
(1038, 'Fav.farm', 'https://fav.farm/', '19:29', 315),
(1039, 'Use Wicked Favicon', 'https://github.com/wesbos/use-wicked-favicon', '21:42', 315),
(1040, 'Uses Tech', 'https://usesthis.com/', '21:03', 315),
(1041, 'Syntax.fm', 'https://syntax.fm', '00:50', 316),
(1042, 'Level Up Tutorials', 'https://www.leveluptutorials.com/pro', '58:32', 316),
(1043, 'Wes Bos Courses', 'https://wesbos.com/courses', '59:12', 316),
(1044, 'Awesome Stylelint', 'https://github.com/stylelint/awesome-stylelint', '07:00', 317),
(1045, 'Change Log Podcast with Ryan Dahl', 'https://changelog.com/podcast/460', '39:07', 318),
(1046, 'Beginner JavaScript Course', 'https://beginnerjavascript.com/', '44:33', 318),
(1047, 'Level Up Tutorials Svelte Course', 'https://leveluptutorials.com/pro', '43:41', 318),
(1048, 'Vite', 'https://vitejs.dev', '00:28', 319),
(1049, 'Parcel', 'https://parceljs.org', '00:28', 319),
(1050, 'LogRocket', 'https://logrocket.com/syntax', '01:13', 319),
(1051, 'Prismic', 'https://prismic.io/syntax', '02:07', 319),
(1052, 'Coolors Contrast Checker', 'https://coolors.co/contrast-checker', '06:05', 320),
(1053, 'Sentry', 'https://sentry.io/', '01:10', 321),
(1054, 'Freshbooks', 'https://www.freshbooks.com/', '01:53', 321),
(1055, 'Draggable', 'https://draggablejs.netlify.app', '05:21', 322),
(1056, 'Sentry', 'https://sentry.io/', '29:17', 322),
(1057, 'Linode', 'https://linode.com/syntax', '15:41', 322),
(1058, 'Mux', 'https://mux.com/syntax', '42:01', 322),
(1059, 'GitHub ECMAScript Proposals Repo', 'https://github.com/tc39/proposals', '05:25', 323),
(1060, 'JSON Modules Proposal', 'https://github.com/tc39/proposal-json-modules', '07:34', 323),
(1061, 'Async Do Proposal', 'https://github.com/tc39/proposal-async-do-expressions', '13:18', 323),
(1062, 'Change Array By Copy Proposal', 'https://github.com/tc39/proposal-change-array-by-copy', '15:12', 323),
(1063, 'Temporal Proposal', 'https://github.com/tc39/proposal-temporal', '17:58', 323),
(1064, 'As Pattern Proposal', 'https://github.com/tc39/proposal-as-pattern', '18:48', 323),
(1065, 'Pattern Matching Proposal', 'https://github.com/tc39/proposal-pattern-matching', '21:45', 323),
(1066, 'SvelteKit Course', 'https://leveluptutorials.com/pro', '01:11', 324),
(1067, 'Sanity CMS', 'https://www.sanity.io/', '00:42', 324),
(1068, 'LogRocket', 'https://logrocket.com/', '00:42', 324),
(1069, 'Linode', 'https://www.linode.com/', '00:42', 324),
(1070, 'Lit HTML', 'https://lit.dev/', '08:13', 324),
(1071, 'React to Web Components', 'https://github.com/IfeanyiMala/react-to-webcomponent', '05:26', 324),
(1072, 'Affinity', 'https://affinity.serif.com/en-us/', '56:25', 324),
(1073, 'Igalia', 'https://www.igalia.com/', '30:45', 326),
(1074, 'StackEdit', 'https://stackedit.io/', '31:50', 326),
(1075, 'oddbird.net', 'http://oddbird.net/', '56:59', 326),
(1076, 'SvelteKit', 'https://kit.svelte.dev/', '02:39', 327),
(1077, 'Svelte', 'https://svelte.dev/', '03:37', 327),
(1078, 'Vite', 'https://vitejs.dev/', '04:09', 327),
(1079, 'Next.js', 'https://nextjs.org/', '06:11', 327),
(1080, 'Sapper', 'https://sapper.svelte.dev/', '10:39', 327),
(1081, 'Tailwind CSS', 'https://tailwindcss.com/', '14:17', 327),
(1082, 'MDsveX', 'https://mdsvex.com/', '20:18', 327),
(1083, 'TinaCMS', 'https://tina.io', '19:37', 328),
(1084, 'Cloudinary', 'https://cloudinary.com/', '48:31', 328),
(1085, 'Secret Hub', 'https://secrethub.io/', '28:27', 328),
(1086, 'Svelte', 'https://svelte.dev/', '53:20', 328),
(1087, 'Level Up Tutorials', 'https://leveluptutorials.com/', '59:21', 328),
(1088, 'Wes Bos Courses', 'https://wesbos.com/courses', '01:01:57', 328),
(1089, 'Wes Bos\' GitHub', 'https://github.com/wesbos', '23:05', 329),
(1090, 'React TypeScript Cheatsheet', 'https://react-typescript-cheatsheet.netlify.app/', '02:55', 330),
(1091, 'Deque', 'https://deque.com/', '01:15', 331),
(1092, 'LogRocket', 'https://logrocket.com/', '02:18', 331),
(1093, 'Prismic', 'https://prismic.io/syntax', '00:19', 332),
(1094, 'LogRocket', 'https://logrocket.com/syntax', '00:53', 332),
(1095, 'Mux', 'https://mux.com', '00:53', 332),
(1096, 'Sentry', 'https://sentry.io/', '02:33', 333),
(1097, '.tech', 'https://go.tech/', '03:59', 333),
(1098, 'Misiv', 'https://misiv.com/', '17:19', 333),
(1099, 'Transmat', 'https://github.com/GoogleChromeLabs/transmat', '26:25', 333),
(1100, 'MDN list of HTML Elements', 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element', '00:17', 334),
(1101, 'Prismic', 'https://prismic.io/', '18:41', 334),
(1102, 'Sentry', 'https://sentry.io/', '34:42', 334),
(1103, 'Cloudinary', 'https://cloudinary.com/', '56:16', 334),
(1104, 'Sanity', 'https://www.sanity.io/', '02:11', 335),
(1105, 'LogRocket', 'https://logrocket.com/', '03:17', 335),
(1106, 'Open UI', 'https://open-ui.org/', '17:47', 335),
(1107, 'Sentry', 'https://sentry.io', '01:11', 337),
(1108, 'Prismic', 'https://prismic.io', '02:05', 337),
(1109, 'Sanity', 'https://www.sanity.io/', '16:51', 338),
(1110, 'Sentry', 'https://sentry.io/', '00:09', 338),
(1111, 'Cloudinary', 'https://cloudinary.com/', '27:59', 338),
(1112, 'Astro', 'https://astro.build', '00:27', 339),
(1113, 'Vitkit', 'https://vitekit.dev', '12:08', 339),
(1114, 'SvelteKit', 'https://kit.svelte.dev', '16:02', 339),
(1115, 'Remix', 'https://remix.run', '19:03', 339),
(1116, 'Whitley Print Shop', 'https://whitley.co/', '02:30', 342),
(1117, 'Sticker Mule', 'http://stickermule.com', '30:45', 342),
(1118, 'AS Color', 'https://ascolour.com/', '49:58', 342),
(1119, 'Baratza Encore Conical Burr Coffee Grinder', 'https://www.baratza.com/grinder/encore/', '50:36', 342),
(1120, 'Miriam Suzanne\'s post', 'https://css-tricks.com/css-container-queries/', '03:57', 343),
(1121, 'Codepens', 'https://codepen.io/collection/ABmJVj', '19:58', 343),
(1122, 'Syntax.fm', 'https://syntax.fm', NULL, 344),
(1123, 'Syntax podcast', 'https://Syntax.fm', '00:00', 345),
(1124, 'CSS Nesting specification', 'https://drafts.csswg.org/css-nesting-1/', '05:47', 345),
(1125, 'Mux', 'https://mux.com', '07:06', 346),
(1126, 'Vimeo', 'https://vimeo.com', '11:49', 346),
(1127, 'Cloudinary', 'https://cloudinary.com/', '13:34', 346),
(1128, 'Easy Snippet', 'https://marketplace.visualstudio.com/items?itemName=PavelGershteyn.easy-snippet', '04:01', 347),
(1129, 'Add Missing Function Declaration', 'https://devblogs.microsoft.com/typescript/announcing-typescript-4-2/#add-missing-function-declaration', '05:33', 347),
(1130, 'Error Lens', 'https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens', '07:41', 347),
(1131, 'Caddy', 'https://caddyserver.com', '00:11', 348),
(1132, 'Let\'s Encrypt', 'https://letsencrypt.org', '05:22', 348),
(1133, 'ACME Protocol', 'https://en.wikipedia.org/wiki/ACME_Protocol', '08:39', 348),
(1134, 'Hasura', 'https://hasura.io', '01:49', 349),
(1135, 'Sentry', 'https://sentry.io/', '03:43', 349),
(1136, 'Apollo', 'https://www.apollographql.com/', '11:33', 349),
(1137, 'Mercurius', 'https://mercurius.dev/', '11:33', 349),
(1138, 'DataLoader', 'https://github.com/facebook/dataloader', '11:33', 349),
(1139, 'Apollo Studio', 'https://www.apollographql.com/studio', '17:45', 349),
(1140, 'Prisma', 'https://www.prisma.io/', '18:52', 349),
(1141, 'shaquillehansford.com', 'https://www.shaquillehansford.com/', '04:54', 350),
(1142, 'benlamers.dev', 'https://benlamers.dev/', '11:39', 350),
(1143, 'zubairaziz.com', 'https://zubairaziz.com/', '20:28', 350),
(1144, 'codebyphil.dev', 'https://codebyphil.dev/', '29:45', 350),
(1145, 'sample.johngeorge.me', 'https://sample.johngeorge.me/', '37:44', 350),
(1146, 'stordahl.dev', 'https://stordahl.dev/', '46:49', 350),
(1147, 'GraphQL Code Generator', 'https://graphql-code-generator.com/', '03:32', 351),
(1148, 'Apollo Day talk on GraphQL tools', '', '03:58', 351),
(1149, 'The Guild', 'https://the-guild.dev/', '15:00', 351),
(1150, 'GraphQL Scalars', 'https://github.com/Urigo/graphql-scalars', '15:15', 351),
(1151, 'Pericles', 'https://github.com/costajob/pericles', '16:00', 351),
(1152, 'Prismic', 'https://prismic.io/', '01:32', 352),
(1153, 'Caddy', 'https://caddyserver.com/', '32:46', 352),
(1154, 'Hasura', 'https://hasura.io/', '43:06', 352),
(1155, 'NextAuth', 'https://next-auth.js.org/', '52:11', 352),
(1156, 'Passport.js', 'http://www.passportjs.org/', '52:11', 352),
(1157, 'Sanity', 'https://www.sanity.io/', '01:16', 353),
(1158, 'Sentry', 'https://sentry.io/', '02:50', 353),
(1159, 'crossenv', 'https://www.npmjs.com/package/cross-env', '19:31', 353),
(1160, 'Vonage', 'https://www.vonage.com/', '45:20', 354),
(1161, 'Advanced React Course', 'https://AdvancedReact.com', '57:20', 354),
(1162, 'Syntax.fm Podcast', 'https://syntax.fm', '00:00', 355),
(1163, 'Prismic', 'https://prismic.io/', '01:26', 355),
(1164, 'LogRocket', 'https://logrocket.com/', '02:45', 355),
(1165, 'Next.js', 'https://nextjs.org/', '12:59', 355),
(1166, 'Vue', 'https://vuejs.org/', '24:30', 355),
(1167, 'React', 'https://reactjs.org/', '24:30', 355),
(1168, 'Clubhouse', 'https://www.joinclubhouse.com/', '17:52', 355),
(1169, 'syntax.fm', 'https://syntax.fm', '00:01', 356),
(1170, 'Cypress', 'https://www.cypress.io/', '00:56', 356),
(1171, 'Sanity CMS', 'https://www.sanity.io/', '00:56', 356),
(1172, 'LogRocket', 'https://logrocket.com/', '00:56', 356),
(1173, 'Hasura', 'https://hasura.io/', '00:58', 356),
(1174, 'Sentry', 'https://sentry.io/', '02:10', 357),
(1175, 'FreshBooks', 'https://www.freshbooks.com/', '02:32', 357),
(1176, 'LeetCode', 'https://leetcode.com/', '19:12', 357),
(1177, 'React Query', 'https://react-query.tanstack.com/', '00:20', 358),
(1178, 'Nozzle', 'https://usenozzle.com/', '02:01', 358),
(1179, 'React Query GitHub', 'https://github.com/tannerlinsley/react-query', '03:10', 358),
(1180, 'Relay GitHub', 'https://github.com/facebook/relay', '03:10', 358),
(1181, 'React Query Devtools', 'https://react-query.tanstack.com/guides/devtools', '25:10', 358),
(1182, 'Remix Runway', 'https://remix.run/', '45:50', 358),
(1183, 'Cypress', 'https://www.cypress.io', '02:23', 359),
(1184, 'Syntax', 'https://syntax.fm', '00:02', 359),
(1185, 'LogRocket', 'https://logrocket.com/signup/', '01:53', 359),
(1186, 'Deque Systems', 'https://www.deque.com/', '02:23', 359),
(1187, 'FileReader API', 'https://developer.mozilla.org/en-US/docs/Web/API/FileReader', '31:23', 360),
(1188, 'q', 'https://github.com/kriskowal/q', '42:26', 360),
(1189, 'SWC', 'https://swc.rs/', '10:23', 361),
(1190, 'Esbuild', 'https://esbuild.github.io/', '13:42', 361),
(1191, 'Ash Connolly\'s site', 'https://ashc0nn0lly.com/', '09:44', 362),
(1192, 'Maddy Bidwell\'s site', 'https://maddy.dev/', '20:58', 362),
(1193, 'Lea Lundqvist\'s site', 'https://lea.link/', '24:49', 362),
(1194, 'Ismael Galu\'s site', 'https://smakosh.com/', '32:29', 362),
(1195, 'keycode.info', 'https://keycode.info', '03:10', 363),
(1196, 'LogRocket', 'https://logrocket.com/syntax', '01:28', 363),
(1197, 'Prismic', 'https://prismic.io/syntax', '02:48', 363),
(1198, 'Overkill', 'https://github.com/sindresorhus/overkill-for-mac', '18:08', 363),
(1199, 'LevelUpTutorials', 'https://www.leveluptutorials.com/', '00:16', 364),
(1200, 'LogRocket', 'https://logrocket.com/signup/', '10:28', 364),
(1201, 'Sanity', 'https://www.sanity.io/', '19:27', 364),
(1202, 'Cloudinary', 'https://cloudinary.com/', '27:34', 364),
(1203, 'LevelUpTutorials', 'https://www.leveluptutorials.com/pro', '57:05', 364),
(1204, 'Wes Bos Courses', 'https://wesbos.com/courses', '56:35', 364),
(1205, 'LevelUpTutorials', 'https://www.leveluptutorials.com', '00:00', 365),
(1206, 'FreshBooks', 'https://freshbooks.com/syntax', '01:17', 365),
(1207, 'Sentry', 'https://sentry.io/', '01:48', 365),
(1208, 'Snowpack', 'https://www.snowpack.dev/', '07:49', 365),
(1209, 'Mercurius', 'https://mercurius.dev/', '12:30', 365),
(1210, 'Render', 'https://render.com', '15:20', 365),
(1211, 'Cypress', 'https://www.cypress.io/', '21:14', 365),
(1212, 'Deno', 'https://deno.land/', '00:21', 366),
(1213, 'Oak', 'https://github.com/oakserver/oak', '06:08', 366),
(1214, 'Axe', 'https://www.deque.com/axe/', '14:01', 366),
(1215, 'Sentry', 'https://sentry.io/', '24:30', 366),
(1216, 'Mux', 'https://mux.com/', '35:23', 366),
(1217, 'Begin', 'https://begin.com/', '47:13', 366),
(1218, 'Sentry', 'https://sentry.io/', '00:59', 367),
(1219, 'FreshBooks', 'https://www.freshbooks.com/', '01:59', 367),
(1220, 'Jake Archibald on AVIF', 'https://jakearchibald.com/2020/avif-has-landed/', '19:03', 367),
(1221, 'Syntax.fm', 'https://syntax.fm', '00:44', 368),
(1222, 'LogRocket', 'https://logrocket.com/syntax', '17:13', 368),
(1223, 'Prismic', 'https://prismic.io/syntax', '29:57', 368),
(1224, 'Linode', 'https://linode.com', '45:54', 368),
(1225, 'type-scale.com', 'https://type-scale.com/', '20:56', 369),
(1226, 'Syntax', 'https://syntax.fm/', '25:45', 369),
(1227, 'Pigeonhole', 'https://pigeonhole.at/', '04:03', 370),
(1228, 'React Router', 'https://reactrouter.com/', '42:19', 370),
(1229, 'Houdini.how', 'https://houdini.how/', '41:52', 370),
(1230, 'Prismic', 'https://prismic.io/syntax', '01:17', 371),
(1231, 'LogRocket', 'https://logrocket.com/syntax', '02:43', 371),
(1232, 'Syntax podcast', 'https://syntax.fm', '00:01', 372),
(1233, 'Sanity CMS', 'https://www.sanity.io/', '00:45', 372),
(1234, 'LogRocket', 'https://logrocket.com/', '00:45', 372),
(1235, 'Linode', 'https://www.linode.com/', '00:45', 372),
(1236, 'ES Modules', 'https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/', '02:15', 372),
(1237, 'Snowpack', 'https://www.snowpack.dev/', '02:48', 372),
(1238, 'Deno', 'https://deno.land/', '08:24', 372),
(1239, 'WebAssembly', 'https://webassembly.org/', '09:43', 372),
(1240, 'ESBuild', 'https://esbuild.github.io/', '14:41', 372),
(1241, 'Rome', 'https://rome.tools/', '16:22', 372),
(1242, 'MDX', 'https://mdxjs.com/', '33:31', 372),
(1243, 'Gatsby', 'https://www.gatsbyjs.com/', '34:14', 372),
(1244, 'Next.js', 'https://nextjs.org/', '34:41', 372),
(1245, 'Circle', 'https://circle.so/', '20:44', 372),
(1246, 'GitHub Discussions', 'https://github.blog/2020-05-06-new-from-satellite-2020-github-codespaces-github-discussions-securing-code-in-private-repositories-and-more/', '20:10', 372),
(1247, 'Forum', 'https://www.forumproduct.com/', '20:24', 372),
(1248, 'CSS Variables', 'https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties', '41:38', 372),
(1249, 'Ted Lasso', 'https://tv.apple.com/us/show/ted-lasso/umc.cmc.3fecri5zv7buc3i36fhcn2z89', '49:25', 372),
(1250, 'Dimmable Bi-Color LED Light', 'https://www.amazon.com/Dimmable-Bi-Color-3300-5600K-Photography-Lighting/dp/B078JZTM8Z', '49:39', 372),
(1251, 'Carabiner Elements', 'https://bjango.com/mac/carabinelements/', '03:42', 373),
(1252, 'BetterTouchTool', 'https://folivora.ai/', '05:36', 373),
(1253, 'Uberlayer', 'https://infinitapps.com/uberlayer/', '15:41', 373),
(1254, 'Rocket', 'https://matthewpalmer.net/rocket/', '20:32', 373),
(1255, 'TextExpander', 'https://textexpander.com/', '21:26', 373),
(1256, 'Clippy', 'https://bjango.com/mac/carabinelements/', '24:06', 373),
(1257, 'LogRocket', 'https://logrocket.com/syntax', '21:45', 374),
(1258, 'FreshBooks', 'http://freshbooks.com/syntax', '22:47', 374),
(1259, 'Mux', 'https://mux.com', '11:27', 375),
(1260, 'Cloudflare Workers', 'https://workers.cloudflare.com/', '23:36', 375),
(1261, 'FreshBooks', 'https://freshbooks.com', '00:25', 376),
(1262, 'Sentry', 'https://sentry.io', '00:33', 376),
(1263, 'mcbroken.com', 'https://mcbroken.com/', '05:56', 377),
(1264, 'LowDB', 'https://github.com/typicode/lowdb', '08:45', 377),
(1265, 'Twilio', 'https://www.twilio.com/', '10:42', 377),
(1266, 'Postmark', 'https://postmarkapp.com/', '10:42', 377),
(1267, 'Architect', 'https://architect.io', '25:23', 378),
(1268, 'Begin', 'https://begin.com', '26:15', 378),
(1269, 'Aleph.js', 'https://alephjs.org', '19:17', 378),
(1270, 'Netlify', 'https://netlify.com', '39:04', 378),
(1271, 'LogRocket', 'https://logrocket.com/syntax', '02:11', 379),
(1272, 'OBS', 'https://obsproject.com/', '05:14', 379),
(1273, 'Principle', 'https://principleformac.com/', '17:42', 379),
(1274, 'Mux', 'https://mux.com', '15:29', 379),
(1275, 'React HLS Player', 'https://github.com/video-dev/react-hls-player', '15:34', 379),
(1276, 'Loopback', 'https://rogueamoeba.com/loopback/', '20:59', 379),
(1277, 'Blackhole', 'https://github.com/ExistentialAudio/BlackHole', '22:03', 379),
(1278, 'Gatsby', 'https://gatsbyjs.com', '00:11', 380),
(1279, 'Next.js', 'https://nextjs.org', '00:11', 380),
(1280, 'Sentry', 'https://sentry.io/', '01:36', 381),
(1281, 'Zustand', 'https://github.com/pmndrs/zustand', '08:01', 381),
(1282, 'Jotai', 'https://jotai.org/', '09:10', 381),
(1283, 'Vue Composition API', 'https://vuejs.org/guide/extras/composition-api-faq.html', '23:32', 381),
(1284, 'Syntax.fm', 'https://syntax.fm', '00:01', 382),
(1285, 'LogRocket', 'https://logrocket.com/syntax', '17:06', 382),
(1286, 'FreshBooks', 'https://freshbooks.com/syntax', '47:59', 382),
(1287, 'Sentry', 'https://sentry.io/', '01:02', 383),
(1288, 'Conventional Commits', 'https://www.conventionalcommits.org/', '00:26', 383),
(1289, 'syntax.fm', 'https://syntax.fm', '00:26', 384),
(1290, 'daily.co', 'https://daily.co', '02:45', 384),
(1291, 'Svelte', 'https://svelte.dev', '03:35', 384),
(1292, 'Lodash', 'https://lodash.com', '06:33', 384),
(1293, 'Storybook', 'https://storybook.js.org', '21:40', 384),
(1294, 'Sanity Blog Post', 'https://www.sanity.io/blog/create-custom-diff-components', '27:53', 384),
(1295, 'disable-react-devtools', 'https://github.com/wix/disable-react-devtools', '17:54', 385),
(1296, 'Reactathon Conference', 'https://www.reactathon.com/', '00:50', 386),
(1297, 'CSS Grid Level 3', 'https://drafts.csswg.org/css-grid-3/', '03:57', 387),
(1298, 'David DeSandro', 'https://desandro.github.io/', '05:35', 387),
(1299, 'caniuse.com', 'https://caniuse.com/', '12:47', 387),
(1300, 'Sentry', 'https://sentry.io', '00:56', 388),
(1301, 'Learn with Jason', 'https://www.learnwithjason.dev', '57:45', 389),
(1302, 'Cloudflare Workers', 'https://workers.cloudflare.com', '00:33', 390),
(1303, 'Sentry', 'https://sentry.io/', '00:59', 390),
(1304, 'Winter CG', 'https://wintercg.com/', '37:28', 390),
(1305, 'Volt', 'https://volt.sh', '22:23', 391),
(1306, 'Socket', 'https://socket.dev/', '45:48', 391),
(1307, 'Manifest Confusion blog post', 'https://blog.volt.sh/2022/06/06/the-massive-bug-at-the-heart-of-the-npm-ecosystem-manifest-confusion/', '48:56', 391),
(1308, 'Syntax.fm', 'https://syntax.fm', '00:17', 392),
(1309, 'Sentry.io', 'https://sentry.io/', '01:36', 392),
(1310, 'Centux Replay', 'https://sentry.io/', '01:05', 393),
(1311, 'Syntax Open Graph Images', 'https://syntax.fm/og/600.jpeg', '02:24', 393),
(1312, 'Caching Headers Episode', 'https://syntax.fm/show/464/caching-control-headers-explained', '21:37', 393),
(1313, 'Syntax.fm', 'https://syntax.fm', '00:11', 394),
(1314, 'Vercel', 'https://vercel.com', '22:07', 394),
(1315, 'Sentry', 'https://sentry.io/', '00:42', 394),
(1316, 'Statamic', 'https://statamic.com', '33:54', 395),
(1317, 'Syntax Website Components', 'https://syntax.fm/components', '22:57', 395),
(1318, 'Syntax Website Themes', 'https://syntax.fm/themes', '22:57', 395),
(1319, 'Angular.dev', 'https://angular.io', '05:20', 396),
(1320, 'Syntax.fm', 'https://syntax.fm', '06:22', 396),
(1321, 'Thoughtworks Tech Radar', 'https://www.thoughtworks.com/radar', '47:39', 396),
(1322, 'nth child microsyntax', 'https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child', '02:10', 397),
(1323, 'CSS motion path', 'https://developer.mozilla.org/en-US/docs/Web/CSS/motion_path', '07:16', 397),
(1324, 'scroll snap', 'https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap', '11:23', 397),
(1325, 'scroll driven animations', 'https://web.dev/scroll-animations/', '15:12', 397),
(1326, 'margin trim', 'https://developer.mozilla.org/en-US/docs/Web/CSS/margin-trim', '17:48', 397),
(1327, 'Stripe Flow to TypeScript', 'https://stripe.com/blog/typed-configuration', '05:59', 398),
(1328, 'Flutter for Web', 'https://flutter.dev/multi-platform/web', '08:37', 398),
(1329, 'Tailscale', 'https://tailscale.com/', '14:06', 398),
(1330, 'Bandcamp', 'https://bandcamp.com/', '17:16', 398),
(1331, 'Comment Tagged Templates', 'https://marketplace.visualstudio.com/items?itemName=bierner.comment-tagged-templates', '51:14', 398),
(1332, 'Shoelace Web Components', 'https://shoelace.style/', '36:41', 398),
(1333, 'Syntax.fm Podcast', 'https://syntax.fm', '00:01', 399),
(1334, 'Sentry', 'https://sentry.io/', '00:27', 399),
(1335, 'Tailwind CSS', 'https://tailwindcss.com/', '19:07', 399),
(1336, 'Nerdy.dev', 'https://nerdy.dev', '23:19', 399),
(1337, 'Una.im', 'https://una.im/', '25:04', 399),
(1338, 'whitep4nth3r\'s Twitch', 'https://twitch.tv/whitep4nth3r', '58:39', 400),
(1339, 'Hell.com', 'https://en.wikipedia.org/wiki/Hell.com', '55:39', 400),
(1340, 'Sentry', 'https://sentry.io/', '02:24', 401),
(1341, 'Payload', 'https://payloadcms.com', '00:33', 402),
(1342, 'Drizzle', 'https://drizzle.dev/', '13:55', 402),
(1343, 'Syntax', 'https://syntax.fm', '38:09', 402),
(1344, 'ally Project ARIA roles', 'https://www.theallyproject.com/blog/aria-roles/', '14:18', 403),
(1345, 'socket.dev', 'https://socket.dev', '00:34', 404),
(1346, 'WebTorrent', 'https://webtorrent.io', '36:37', 404),
(1347, 'Wormhole', 'https://wormhole.app', '44:00', 404),
(1348, 'sentry.io', 'https://sentry.io/', '01:50', 405);

INSERT INTO `Role` (`id`, `name`) VALUES
('1b2d4ff2-b045-4ca9-bed0-b608884d403a', 'author'),
('9fb9c286-7504-4ce7-b939-765561e28e53', 'admin'),
('a5de2ab4-e4c0-478d-b319-2c439e423b70', 'user');

INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00000', 0, 'Preview', '2017-06-27 16:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax000.mp3?dest-id=532671', '\n## Show Notes\n\nIt\'s Coming! Subscribe now so we can launch this puppy with a bang!\n', 'ed9dd64fc6beec1179fc4c1ce54f6dd8ff25a415d294b038bbe1fded1d470835', 'preview', '/shows/000 - Syntax Preview.md', '2023-10-16 20:06:52.965', '2023-10-27 15:57:40.759', 'SPECIAL'),
('syntax_podcast_show_00001', 1, 'React Tools', '2017-07-05 12:00:00.000', 'https://traffic.libsyn.com/syntax/syntax001_4.mp3', '\n## Show Notes\n* [Wes Bos\' Site](https://wesbos.com)\n* [Level Up Tutorials site](https://www.leveluptutorials.com/)\n* [Level Up Tutorials YouTube channel](https://www.youtube.com/user/LevelUpTuts)\n* [Scott Tolinski personal site](http://www.scotttolinski.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Next.js](https://learnnextjs.com/)\n* [Hacker News Example in Next.js](https://github.com/now-examples/next-news)\n* [GraphQL](http://graphql.org/learn/)\n* [Graphcool](https://www.graph.cool/)\n* [create-react-app](https://github.com/facebookincubator/create-react-app)\n* [React dev-tools](https://github.com/facebook/react-devtools)\n* [Redux dev-tools](https://github.com/gaearon/redux-devtools)\n* [Preact.js](https://preactjs.com/)\n* [React Storybook](https://github.com/storybooks/storybook)\n* [Meteor](https://www.meteor.com/)\n* [Blaze](http://blazejs.org/)\n\n## Sick Picks\n\n* Wes: [Parcel App](https://parcelapp.net/)\n* Scott: [Fish shell](https://fishshell.com/)\n\n## Shameless Plugs\n\n* [Learn Node](http://wesbos.com/learn-node/)\n* [React Native for everyone](https://www.leveluptutorials.com/store/products/tutorials/lut-dd014)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '47ad8480e9df86f5e89d1969f1ce00bc6d88c4506746dd24aeee12848d3711e3', 'react-tools', '/shows/001 - React Tools.md', '2023-10-16 20:06:53.018', '2023-10-27 15:57:40.833', 'TASTY'),
('syntax_podcast_show_00002', 2, 'Webcam and audio access with WebRTC and getUserMedia()', '2017-07-12 12:00:00.000', 'https://traffic.libsyn.com/syntax/syntax002.mp3', '\n## Show Notes\n* [WebRTC](https://webrtc.org/)\n* [Apple WebRTC Support](https://www.theregister.co.uk/2016/04/13/apple_rolling_webrtc_into_webkit/)\n* [GetUserMedia](https://w3c.github.io/mediacapture-main/getusermedia.html)\n* [Slack](https://slack.com)\n* [WebTorrent](https://webtorrent.io)\n  * https://github.com/webtorrent/webtorrent\n* [Soctt WebRtc Mirror](https://github.com/stolinski/bboy-tools/blob/master/client/tools/Timemachine.js)\n* [MediaRecorder](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder)\n* [Electron](https://electron.atom.io/)\n* [Kap](https://getkap.co/)\n* [Wes Security Cam](https://github.com/wesbos/HTML5-Security-Camera)\n* [Scott Colorbars YouTube](https://www.youtube.com/watch?v=4cuqYDnekpg)\n* [Wes Face Detection](https://github.com/wesbos/HTML5-Face-Detection)\n* [Fluent Conf](https://conferences.oreilly.com/fluent/fl-ca)\n\n## Sick Picks\n* Wes:\n  * [Peak Design Everyday Backpack](https://www.peakdesign.com/everyday-backpack)\n  * [Everyday Backpack Video](https://www.youtube.com/watch?v=Wf8US4LJp1w)\n  * [Splice](https://splice.com/)\n* Scott:\n  * [Quik by GoPro](https://quik.gopro.com)\n\n## Shameless Plugs\n#### [JavaScript30](https://javascript30.com)\nA Free 30 Day Vanilla JS Coding Challenge Course. Build 30 things in 30 days with 30 tutorials.\nNo Frameworks No Compilers No Libraries No Boilerplate. Join 101,746 others.\n\n#### [Level Up Tutorials](https://leveluptutorials.com/)\nOver 860 free video tutorials for beginners, intermediate and expert web professionals. Level Up your skills with clear, high production, free video tutorials.\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a2bc038f22a4a8ce0f633b76721fd9b784b502daaafb5d6c0e07470fc6058f83', 'webcam-and-audio-access-with-webrtc-and-getusermedia', '/shows/002 - Webcam and audio access with WebRTC and getUserMedia().md', '2023-10-16 20:06:53.058', '2023-10-27 15:57:40.876', 'TASTY'),
('syntax_podcast_show_00003', 3, 'CSS Preprocessors and Structuring CSS', '2017-07-19 12:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax003.mp3', '\n## Show Notes\n\n* [WesBos Website](http://wesbos.com)\n* [Level Up Tutorials](https://leveluptutorials.com)\n* [GraphQL](http://graphql.org)\n* [Dinosaur JS Conference](https://dinosaurjs.org)\n* [Angular](https://angular.io)\n* [Pug / Jade](https://pugjs.org/api/getting-started.html)\n* [EJS](http://www.embeddedjs.com)\n* [BEM Methodology](https://en.bem.info/methodology/)\n* [Stylus](http://stylus-lang.com)\n* [Rupture](http://jescalan.github.io/rupture/)\n* [Less](http://lesscss.org)\n* [Sass](http://sass-lang.com)\n* [PostCSS](http://postcss.org)\n* [PostCSS Autoprefixer](https://github.com/postcss/autoprefixer)\n* [RuckSack](https://www.rucksackcss.org/)\n* [cssnext](http://cssnext.io)\n* [LostGrid](http://lostgrid.org)\n* [Bootstrap](http://getbootstrap.com)\n* [Haml](http://haml.info)\n* [Babel](https://babeljs.io)\n* [Flickity Plugin](https://flickity.metafizzy.co)\n* [webpack](https://webpack.js.org)\n* [Compass](http://compass-style.org)\n* [React](https://facebook.github.io/react/)\n\n## Sick Picks\n\n* Wes:\n  * [Bartender 2](https://www.macbartender.com)\n  * [Vanilla](http://matthewpalmer.net/vanilla/)\n* Scott: [Power Blocks](http://www.powerblock.com)\n\n## Shameless Plugs\n\n#### [JavaScript30](https://javascript30.com)\nA Free 30 Day Vanilla JS Coding Challenge Course. Build 30 things in 30 days with 30 tutorials.\nNo Frameworks No Compilers No Libraries No Boilerplate. Join 101,746 others.\n\n#### [The Sketch Course & UX Prototyping with Principle Combo](https://store.leveluptutorials.com/products/tutorials/lut-dd013008)\nLimited Sale Price: $39.99 ~~$49.99~~\n\nLearn the new industry standard for web design. Become an expert in the app that is changing how designers work in the modern web and app design world.\n\n**_Animate Your Ideas, Design Better Apps_**\n\nPrinciple makes it easy to design animated and interactive user interfaces. Whether you\'re designing the flow of a multi-screen app, or new interactions and animations, Principle lets you create designs that look and feel amazing.\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9895c80db6faea45c1828e2154b4e8fc3321905ee66449f5567d460359e24578', 'css-preprocessors-and-structuring-css', '/shows/003 - CSS Preprocessors and Structuring CSS.md', '2023-10-16 20:06:53.107', '2023-10-27 15:57:40.920', 'TASTY'),
('syntax_podcast_show_00004', 4, 'JavaScript Tooling', '2017-07-25 22:14:19.844', 'https://traffic.libsyn.com/syntax/Syntax004.mp3', '\n## Sponsor\n\n* [Deliciousbrains WP Migrate DB Pro](https://deliciousbrains.com/syntax) - Use the code SYNTAX for 20% off\n\n## Show Notes\n\n* [WesBos Website](http://wesbos.com)\n* [Level Up Tutorials](https://leveluptutorials.com)\n* [WHY USE WWW?](http://www.yes-www.org/why-use-www/)\n* [Webpack](https://webpack.github.io/)\n* [Babel](https://babeljs.io/)\n* [ESLint](http://eslint.org/)\n* [Prettier](https://github.com/prettier/prettier)\n* [Babili](https://github.com/babel/babili)\n* [Prepack](https://prepack.io/)\n\n## Sick Picks\n\n* Scott: [Figma](https://www.figma.com)\n* Wes: [CalDigit TS3 Dock](http://www.caldigit.com/thunderbolt-3-dock/#TS3)\n\n## Shameless Plugs\n\n#### [JavaScript30](https://javascript30.com)\nA Free 30 Day Vanilla JS Coding Challenge Course. Build 30 things in 30 days with 30 tutorials.\nNo Frameworks No Compilers No Libraries No Boilerplate. Join 101,746 others.\n\n#### [React Native for everyone](https://www.leveluptutorials.com/store/products/tutorials/lut-dd014)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '378cacdb9efa17529d68c15c81de199529bf2bea161fa09a0feb41449ef14b04', 'javascript-tooling', '/shows/004 - JavaScript Tooling.md', '2023-10-16 20:06:53.155', '2023-10-27 15:57:40.960', 'SPECIAL'),
('syntax_podcast_show_00005', 5, 'How to Slam Dunk Freelancing', '2017-08-02 14:26:58.000', 'https://traffic.libsyn.com/syntax/Syntax005.mp3', '\n## Sponsor\n\n* [Deliciousbrains WP Migrate DB Pro](https://deliciousbrains.com/syntax) - Use the code SYNTAX for 20% off\n\n## Show Notes\n\n* [Stickers](https://bos.af) - SOLD OUT MORE SOON\n* [Scott\'s Personal Website on Gatsby](http://scotttolinski.com/)\n* [Gatsby Codealong](https://www.youtube.com/watch?v=xqaThBnesfY)\n* [Gatsby](https://github.com/gatsbyjs/gatsby)\n* [MJML Email Framework](https://mjml.io/)\n* [The E-Myth Revisited Book](http://amzn.to/2f8y8Li)\n* [Design is a Job](http://amzn.to/2uZ9CQw)\n* [Breaking the Time Barrier](https://www.freshbooks.com/blog/breakingthetimebarrier)\n* [Basecamp](https://basecamp.com/)\n* [Trello](https://trello.com/)\n* [Freshbooks](http://www.shareasale.com/r.cfm?B=963929&U=976068&M=52946&urllink=)\n* [Wave](https://www.waveapps.com/)\n\n## Sick Picks\n* Wes:\n  * [Hyper Key + Karabiner Elements](https://github.com/tekezo/Karabiner-Elements/)\n  * [Better Touch Tool](https://www.boastr.net/)\n* Scott: [King of the Road](https://www.viceland.com/en_us/show/king-of-the-road)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a11d1e72b6b107d3eb96c0a6e4f40e578285e9946e08478790788d9b4d56b83f', 'how-to-slam-dunk-freelancing', '/shows/005 - How to Slam Dunk Freelancing.md', '2023-10-16 20:06:53.196', '2023-10-27 15:57:41.009', 'TASTY'),
('syntax_podcast_show_00006', 6, 'Accepting Money on the Internet 💰💸', '2017-08-09 15:30:00.000', 'https://traffic.libsyn.com/syntax/Syntax006.mp3', '\nIn this episode we talk about how to accept money on the internet including the ups of Stripe, the downs of PayPal.\n\n## Sponsor\n\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n* [Apollo](http://www.apollodata.com/)\n* [React Apollo](http://dev.apollodata.com/react/)\n* [GraphCool](https://graph.cool)\n* [Stripe](http://stripe.com/)\n* [PayPal](http://paypal.com/)\n* [Braintree](https://www.braintreepayments.com/)\n* [Stripe Docs](https://stripe.com/docs)\n* [HTML5 Autocomplete Types](https://wiki.whatwg.org/wiki/Autocomplete_Types)\n* [Stripe Radar](https://stripe.com/docs/radar)\n* [Royal Bank PayPal WorkAround](http://travelblogbreakthrough.com/canadian-paypal-users-transfer-usd-bank/)\n* [Stripe Atlas](https://stripe.com/atlas)\n* [Transferwise](https://transferwise.com/u/wesleyb22)\n* [Stripe Bitcoin](https://stripe.com/bitcoin)\n\n## Sick Picks\n* Wes: [ChefSteps](https://www.youtube.com/user/chefsteps)\n* Scott: [What Cha Tea](http://what-cha.com/)\n\n## Shameless Plugs\n* [Wes\' Courses](https://wesbos.com/courses)\n* [Level UP Tutorials Youtube](https://www.youtube.com/user/LevelUpTuts)\n* [How to GraphQL](https://www.howtographql.com)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '71386ca78cceed17839610ae8754fc99832194e4aa4e8beb253d2c055ab10141', 'accepting-money-on-the-internet', '/shows/006 - Accepting Money on the Internet.md', '2023-10-16 20:06:53.245', '2023-10-27 15:57:41.055', 'TASTY'),
('syntax_podcast_show_00007', 7, 'Scott Tolinski Origin Story 🎧 📹 💻 🕺', '2017-08-09 15:30:00.000', 'https://traffic.libsyn.com/syntax/Syntax007.mp3', '\nIn this episode, Scott talks about his unconventional career path and how to grow your career by working on what you love.\n\n## Sponsor\n\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n* [UofM Performing Arts Technology](https://www.music.umich.edu/departments/pat/index.php)\n* [Devin Kerr](http://www.devinkerr.com/)\n* [Jamie Schefman](http://partybabymusic.com/)\n* [Michelle Chamuel](http://michellechamuel.com/)\n* [Guitar World](http://www.guitarworld.com/)\n* [Ghostly International](http://www.ghostly.com/)\n* [Q LTD](http://qltd.com/)\n* [Michigan Creative](https://creative.umich.edu/)\n* [Ford](http://www.ford.com/)\n* [GTB](https://www.gtb.com/)\n* [Level Up Tutorials](https://www.leveluptutorials.com/)\n* [Scott Concussion](https://www.youtube.com/edit?o=U&video_id=ApwQLpJgmqc)\n* [Atya](https://getatya.com)\n\n## Sick Picks\n* Scott: [Good Hertz](https://goodhertz.co/)\n\n## Shameless Plugs\n* [Wes\' Courses](https://wesbos.com/courses)\n* [Level UP Tutorials Youtube](https://www.youtube.com/user/LevelUpTuts)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b332b5dead329c6a7f4918e3eb01956395e6d17f92df6761213a1d7943c7dadd', 'scott-tolinski-origin-story', '/shows/007 - Scott Tolinski Origin Story.md', '2023-10-16 20:06:53.294', '2023-10-27 15:57:41.104', 'TASTY'),
('syntax_podcast_show_00008', 8, 'Wes Bos Origin Story 🎸💼💻🔥🐷', '2017-08-23 13:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax008.mp3', '\nIn this episode, Wes talks about his career path from a MySpace customizer to where he is now.\n\n## Sponsor\n\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n* [Brootal PS20.itgo.com](http://ps20.itgo.com/)\n* [CDN Money](http://cdn-money.com)\n* [2004 WesBos.com](https://web.archive.org/web/20040715000000*/http://wesbos.com)\n* [The Success of Zara: Technology Makes It Possible](http://soft4inventory.com/blog/the-success-of-zara-technology-makes-it-possible/)\n* [REI](https://www.rei.com/)\n* [BTM at Ryerson University](http://www.ryerson.ca/programs/undergraduate/business-technology-management/)\n* [WordPress Codex](https://codex.wordpress.org/)\n* [Angle Media Group](http://www.anglemediagroup.com/)\n* [Ryerson Co-op](http://www.ryerson.ca/trsm-co-op/)\n* [Jet Cooper](http://www.jetcooper.com/)\n* [Darcy Clarke](http://www.darcyclarke.me/)\n* [DealPage Daily Deal Aggregation](https://web.archive.org/web/*/dealpage.ca)\n* [jQuery IRC](https://irc.jquery.org/)\n* [YayQuery](http://yayquery.com/)\n* [Ladies Learning Code](http://ladieslearningcode.com/)\n* [HackerYou](http://hackeryou.com/)\n* [Wes\' Blog](http://wesbos.com)\n* [Sublime Text Book](https://sublimetextbook.com/)\n* [Command Line Power User](https://commandlinepoweruser.com/)\n* [Flexbox.io](https://flexbox.io)\n* [React For Beginners](https://reactforbeginners.com/)\n* [ES6 for Everyone](https://es6.io/)\n* [JavaScript30](https://javascript30.com/)\n* [This Podcast](https://syntax.fm)\n\n## Sick Picks\n* Wes: [MotoRead](https://motoread.com/)\n\n## Shameless Plugs\n* [Wes\' Courses](https://wesbos.com/courses)\n* [Level UP Tutorials Youtube](https://www.youtube.com/user/LevelUpTuts)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '646b369fbe40e2474649653b567f48534d4b2bad11f75e3349643c62cd145f78', 'wes-bos-origin-story', '/shows/008 - Wes Bos Origin Story.md', '2023-10-16 20:06:53.339', '2023-10-27 15:57:41.188', 'TASTY'),
('syntax_podcast_show_00009', 9, 'Dang, that\'s handy! JavaScript Utility Libraries 🛠️', '2017-08-30 13:12:11.000', 'https://traffic.libsyn.com/syntax/Syntax009.mp3', '\nScott and Wes talk all about different JavaScript utility libraries that make you say \"Dang, that\'s handy!\"\n\n## Sponsor\n\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n* [Lodash](https://lodash.com/docs/4.17.4)\n* [Underscore](http://underscorejs.org/)\n* You should follow [John David Dalton](https://twitter.com/jdalton) on twitter\n* [Moment.js](https://momentjs.com/)\n* [moment().endOf(‘term’)](https://medium.com/@timrwood/moment-endof-term-522d8965689)\n* [date-fns](https://date-fns.org/)\n* [Slugify](https://www.npmjs.com/package/slugify)\n* [speakingurl](https://github.com/pid/speakingurl)\n* [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API)\n* [Axios](https://github.com/mzabriskie/axios)\n* [Cookie Jar](https://www.npmjs.com/package/cookiejar)\n* [store.js](https://github.com/marcuswestin/store.js)\n* [Cross Storage](https://github.com/zendesk/cross-storage)\n* [Faker.js](https://github.com/marak/Faker.js/)\n* [Woah URL.searchParams() is a thing](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams)\n* [Parse URI](https://www.npmjs.com/package/parseuri)\n* [url-search-params-polyfill](https://www.npmjs.com/package/url-search-params-polyfill)\n* [ngrok](https://ngrok.com/)\n* [Browsesync](https://www.browsersync.io/)\n* [Async](https://caolan.github.io/async/)\n* [Bling.js](https://gist.github.com/paulirish/12fb951a8b893a454b32)\n\n\n## Sick Picks\n* Wes: \n  * [Essentialism Book](http://amzn.to/2vqp77J)\n  * [Essentialism Audiobook](http://amzn.to/2xLolPn)\n* Scott:\n  * [Satechi Aluminum Multi-Port Adapter](http://amzn.to/2xwiy0W)\n  * [Satechi all Docks](http://amzn.to/2xwuGPm)\n\n## Shameless Plugs\n* [Dhanish Gajjar\'s Instagram](https://www.instagram.com/dhanishgajjar/)\n* [Paweł Grzybek\'s Snippet Generator](https://pawelgrzybek.com/snippet-generator/)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '099eec57565a8d6d97d74dbade4b630f0358fbc4bc55d9203e7fea08b7134a1e', 'dang-that-s-handy-javascript-utility-libraries', '/shows/009 - JavaScript Utility Libraries.md', '2023-10-16 20:06:53.372', '2023-10-27 15:57:41.232', 'TASTY'),
('syntax_podcast_show_00010', 10, 'CSS in JS 💅👩‍🎤💁🚒 (Drama Free!)', '2017-09-06 13:38:25.555', 'https://traffic.libsyn.com/syntax/Syntax010.mp3', '\nThe most requested syntax episode ever! We break down CSS in JavaScript. Pros/Cons? What is it? What problems does it solve? What libraries should you use? Is it stupid or amazing?\n\n## Sponsor\n\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Follow us on twitter!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* [Syntax](https://twitter.com/SyntaxFM)\n\n## Show Notes\n\n* [BEM](http://getbem.com/)\n* [Styled Components](https://www.styled-components.com/)\n* [Emotion](https://github.com/tkh44/emotion)\n* [Radium](https://github.com/FormidableLabs/radium)\n* [Glamorous](https://github.com/paypal/glamorous)\n* [Styled JSX](https://github.com/zeit/styled-jsx)\n\n## Sick Picks\n* Scott: [Boxyapp Mail Client](http://www.boxyapp.co/)\n* Wes: [Airpods](http://amzn.to/2wFYNpc)\n\n## Shameless Plugs\n* [Grab Level Up Tuts before the price goes up!](https://www.leveluptutorials.com/)\n* [Modern Dev Tools](https://moderndevtools.com/)\n\n#### Twitter\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd15aeaf8b05e69e8041c398a97837fab11ae604381d8a078ab78e6f3a5fb45ae', 'css-in-js-drama-free', '/shows/010 - CSS in JS.md', '2023-10-16 20:06:53.410', '2023-10-27 15:57:41.273', 'TASTY'),
('syntax_podcast_show_00011', 11, 'Our favourite Productivity Hacks 🔥', '2017-09-13 12:51:21.000', 'https://traffic.libsyn.com/syntax/Syntax011.mp3', '\nScott and Wes - Do you sleep? How do you get so much done? You replied to me way too fast! We share our best productivity hot tips and the apps we use the GSD.\n\n## Sponsor\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n* [Alfred](https://www.alfredapp.com/)\n* [Alfred Package Manager -Packal](http://www.packal.org/)\n* [Alfred Units Conversion Workflow](http://www.packal.org/workflow/units)\n* [Cobalt2 Alfred Theme](https://github.com/wesbos/Cobalt2-Alfred-Theme)\n* [Alfred Timezones Workflow](http://www.packal.org/workflow/timezones)\n* [Alfred Process Kill Workflow](https://github.com/ngreenstein/alfred-process-killer)\n* `⌘+L` makes text huge!\n* [Alfred Font Awesome Workflow](https://github.com/ruedap/alfred-font-awesome-workflow)\n* [Alfred Encode / Decode Workflow](https://github.com/willfarrell/alfred-encode-decode-workflow)\n* [Alfred DevDocs Workflow](https://github.com/yannickglt/alfred-devdocs)\n* [Alfred Stack Overflow Workflow](https://github.com/deanishe/alfred-stackoverflow)\n* [Clipy Clipboard Manager App](https://clipy-app.com/)\n* [Todoist](https://en.todoist.com/)\n* [Things App](https://culturedcode.com/things/)\n* [Getting Things Done Book](https://www.amazon.ca/Getting-Things-Done-Stress-Free-Productivity/dp/0143126563/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&psc=1&refRID=MHJARXPDAEP4QJA5R0FP)\n* [Git Alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\n* [Text Expander](https://smilesoftware.com/textexpander)\n* [aText](https://www.trankynam.com/atext/)\n* [Evernote](https://evernote.com/)\n* [Video Speed Controller](https://chrome.google.com/webstore/detail/video-speed-controller/nffaoalbilbmmfgbnbgppjihopabppdk?hl=en)\n* [Karabiner Elements](https://github.com/tekezo/Karabiner-Elements/)\n* [Better Touch Tool](https://www.boastr.net/)\n* [Focus App](https://heyfocus.com/)\n* [Self Control App](https://selfcontrolapp.com/)\n* [Slicy](http://macrabbit.com/slicy/)\n* [Figma Exports](https://www.figma.com)\n* [CloudApp](https://my.cl.ly/r/0O0c442O0w1Z0n3W)\n\n\n## Keyboard Shortcuts You Should Know\nSorry windows users.\n* `⌘ + Tab` switch between apps\n* Press `q` to quit an app from this place\n* `⌘` + Backtick to switch between multiple windows of an app\n* `⌘ + T` for a new tab\n* `⌘ + Shift + T` to reopen a closed tab\n* Crank up **Key Repeat** in your keyboard setting\n* `Option + ←/→` to move word-by-word\n* Add Shift to select those items\n* `⌘+option+Arrow` to switch tabs\n* `⌘ + Number` to go to that tab #\n  * [Scott\'s gist with keybindings for VSCode](https://gist.github.com/stolinski/f49adedf7053b76634f437e824188a70)\n* [Enable tabbing on OSX dialog Boxes](http://wesbos.com/osx-dialog-boxes-keyboard-tab/)\n* Press question mark in any google app to get a list of shortcuts\n\n## Sick Picks\n* Scott: [Rhino Shield Case](http://amzn.to/2iXXxZE)\n* Wes: [Deep Work](https://www.amazon.ca/Deep-Work-Focused-Success-Distracted/dp/1455586692)\n\n## Shameless Plugs\n* [Level Up Tuts](https://www.leveluptutorials.com/)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n#### Tweet us your tips\n * [@wesbos](https://twitter.com/wesbos)\n * [@stolinski](https://twitter.com/stolinski)\n * Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n\n', '700a01526a19c29ce484be494ba7cc2ec454ba4ad87b31aadbc9888593744e24', 'our-favourite-productivity-hacks', '/shows/011 - Productivity Hot Tips.md', '2023-10-16 20:06:53.447', '2023-10-27 15:57:41.314', 'TASTY'),
('syntax_podcast_show_00012', 12, 'Why is everyone switching to VS Code?', '2017-09-20 13:13:36.876', 'https://traffic.libsyn.com/syntax/Syntax012.mp3', '\nScott and Wes talk about switching to VS Code. What is so good about it? Killer features? Must have Plugins!\n\n## Sponsor\nNeed to learn Docker? Check out Nick Janetakis\' [Dive into Docker](https://diveintodocker.com/ref-bwfff) course which is currently on sale!\n\n## Follow us on twitter!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* [Syntax](https://twitter.com/SyntaxFM)\n\n## Show Notes\n* [Cobalt2 for VS Code](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n* [Visual Studio Code](https://code.visualstudio.com/)\n* [@rachsmithtweets 🔥 rename symbol tip](https://twitter.com/rachsmithtweets/status/907350440634748928) - you should follow her too!\n* Use F8 to cycle through inline errors\n* Open the problems tab to see all your applications errors and warnings\n* The built in debugger\n* [ESlint Package](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n* You can use the [Prettier Package](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) on it\'s own, or use via your .eslintrc file and just use the above ESLint plugin.\n* [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)\n* [Git Lens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n* [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome)\n* [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight)\n* Settings: `\"editor.formatOnSave\": true` and `\"eslint.autoFixOnSave\": true`\n* [Wes\' Current ESLint + Prettier Config](http://wes.io/maOn)\n* [Grumpy Developer](https://twitter.com/kurtinatlanta/status/909821362197401601)\n* [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n* [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n* [npm Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense)\n* [CSS Intellisense](https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion)\n* [PHP Intellisense](https://marketplace.visualstudio.com/items?itemName=HvyIndustries.crane)\n* [Another PHP Intellisense](https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense)\n* [Custom CSS and JS Loader](https://marketplace.visualstudio.com/items?itemName=be5invis.vscode-custom-css)\n* [Cobalt2 Theme](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n* [Material Theme](https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme)\n* [Material Pale Night Theme](https://marketplace.visualstudio.com/items?itemName=whizkydee.material-palenight-theme)\n* [Version Lens for npm](https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens)\n* [Project Manager](https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager)\n* [⌘ + # Tabs Key Bindings](https://gist.github.com/stolinski/f49adedf7053b76634f437e824188a70)\n* [Scott\'s VS Code Series on YouTube](https://www.youtube.com/watch?v=4q1tD39Mk_A)\n* [Sublime Keymap for VS Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings)\n* [ES6 Absolute Imports with Webpack](https://moduscreate.com/es6-es2015-import-no-relative-path-webpack/)\n* [Autorename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)\n\n## Sick Picks\n* Scott: \n  * [Moonwalking with Einstein](http://amzn.to/2ycbnul)\n  * Outdoes Wes by 3oz: [Bottl](https://www.amazon.com/BOTTL-Stainless-Bottle-Growler-Bigger/dp/B01ICB6N90)\n* Wes:\n  * [Yeti Rambler](http://yeti.com/rambler)\n  * [Ozark Trail 20oz](https://www.walmart.com/ip/Ozark-Trail-20-Ounce-Double-Wall-Vacuum-Sealed-Tumbler/178742177)\n\n## Shameless Plugs\n* [Level Up Tuts](https://www.leveluptutorials.com/) - check out scott\'s new shopping cart!\n* [Wes\' Courses](https://wesbos.com/courses)\n* [Stickers are coming!](https://bos.af/)\n', 'fef0472e00003044c02ef5c5e4f5058a0fb739213d7d33e68ff2a9881223786d', 'why-is-everyone-switching-to-vs-code', '/shows/012 -Why is Everyone Switching to VS Code.md', '2023-10-16 20:06:53.483', '2023-10-27 15:57:41.366', 'TASTY'),
('syntax_podcast_show_00013', 13, 'The Command Line for Web Developers', '2017-09-27 14:22:32.009', 'https://traffic.libsyn.com/syntax/Syntax013.mp3', '\nThis episode is all about how to become comfortable and proficient with the command line. This one includes windows users too!\n\n## Sponsor\nNeed to learn Docker? Check out Nick Janetakis\' [Dive into Docker](http://wes.io/mkHG) course which is currently on sale!\n\n## Show Notes\n* [React 16](https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html)\n* [Command Line Power User Course](https://commandlinepoweruser.com/)\n* [iTerm2](https://www.iterm2.com/)\n* [Hyper](https://hyper.is/)\n* [Awesome Hyper](https://github.com/bnb/awesome-hyper)\n* [Cmder for Windows](http://cmder.net/)\n* [Windows Subsystem Linux](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide)\n* [Windows 10 Insiders Program](https://insider.windows.com/en-us/)\n* [ZSH](http://www.zsh.org/)\n* [Oh My ZSH](http://ohmyz.sh/) - You\'ll want to start here, not on zsh.org\n* [Fish Shell](https://fishshell.com/)\n* [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish)\n* [Fisherman](https://github.com/fisherman/fisherman)\n* [Bass](https://github.com/edc/bass)\n* [ZSH Autosuggestion](https://github.com/zsh-users/zsh-autosuggestions)\n* [ZSH Syntax Highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\n* [z Frecent](https://github.com/rupa/z) (GET THIS)\n* [Tree](http://brewformulas.org/Tree)\n* [Wes Custom Tree](https://gist.github.com/wesbos/1432b08749e3cd2aea22fcea2628e2ed)\n* [Brew](https://brew.sh/)\n* [Brew Cask](https://caskroom.github.io/)\n* [Trash CLI](https://github.com/sindresorhus/trash-cli)\n* [YouTube-DL](https://rg3.github.io/youtube-dl/)\n* [Wes\' Video on youtube-dl](https://www.youtube.com/watch?v=-eUd2k5M1B0)\n* [pbcopy](http://osxdaily.com/2007/03/05/manipulating-the-clipboard-from-the-command-line/)\n* [ZSH Extract](https://coderwall.com/p/arwifq/extracting-archives-from-the-terminal-easily)\n* `..` or `...` or `....` or `.....` or `......`\n* `!!` re-runs the last command (careful!)\n* `cd -` back to last folder - this works with lots of commands like `git checkout -`\n* `⌘ + K` to clear. `⌘ + R` to clear but maintain scrollback\n* [Cobalt2 for ZSH + iTerm2](https://github.com/wesbos/Cobalt2-iterm)\n* [Cobalt2 for Hyper](https://github.com/wesbos/hyperterm-cobalt2-theme)\n* [Patched Powerline Fonts](https://github.com/powerline/fonts)\n* [Slavic Cat](https://github.com/yangwao/omf-theme-slavic-cat)\n* [Wild Cherry](https://github.com/mashaal/wild-cherry)\n\n## Sick Picks\n* Scott: [Source Making](https://sourcemaking.com/)\n* Wes: [My Fitness Pal](http://www.myfitnesspal.com/)\n\n## Tweet us your tips!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n\n## Shameless Plugs\n* [Level Up Tuts](https://www.leveluptutorials.com/) - check out scott\'s new shopping cart!\n* [Wes just updated his ES6 course!](https://ES6.io)\n* [Stickers are coming!](https://bos.af/)\n', '4f930592dcc35dec8588eb3d20967ab684ae573e3a3197addef2046c5f89ff23', 'the-command-line-for-web-developers', '/shows/013 - The Command Line for Web Developers.md', '2023-10-16 20:06:53.523', '2023-10-27 15:57:41.416', 'TASTY'),
('syntax_podcast_show_00014', 14, 'Our Stacks Explained', '2017-10-04 13:14:34.000', 'https://traffic.libsyn.com/syntax/Syntax014.mp3', '\nScott and Wes detail their current stacks that run their training platforms. From front end code linting to the server side and databases.\n\n## Sponsor\n\n[Intro to The Serverless Framework](http://courses.codemore.io/p/serverless-framework-node/) by Loren Stewart. The first 20 people to use the code SYNTAX_FREE will get the course for free! After that make sure to use the code SYNTAX for an extra $10 off.\n\n## Show Notes\n* [Wes\' Stack Youtube Video](https://www.youtube.com/watch?v=4CS436KZ35A)\n* [Meteor](https://www.meteor.com/)\n* [Node.js](https://nodejs.org/en/)\n* [Level Up Tutorials](https://leveluptutorials.com/) is fast!\n* [Express](https://expressjs.com/)\n* [Learn Node](https://learnnode.com/)\n* [Passport JS](http://passportjs.org/)\n* [MongoDB](https://www.mongodb.com/)\n* [Mongoose](http://mongoosejs.com/)\n* [mLab Hosting](https://mlab.com)\n* [Mongohub](https://github.com/jeromelebel/MongoHub-Mac)\n* [MongoDB Compass](https://www.mongodb.com/products/compass)\n* [Studio 3T](https://studio3t.com/)\n* [MiniMongo](https://github.com/mWater/minimongo)\n* [React](https://reactjs.org/)\n* [Styled Components](https://www.styled-components.com/)\n* [Stylus Lang](http://stylus-lang.com/)\n* [Metor Sessions](https://docs.meteor.com/api/session.html)\n* [Prerender.io](https://prerender.io/)\n* [React Apollo](https://github.com/apollographql/react-apollo)\n* [Cross Storage](https://github.com/zendesk/cross-storage)\n* [Victory Charts](https://github.com/FormidableLabs/victory-chart)\n* [Cloudinary](https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/qceqbjqg3a3fe5gwozcd)\n* [Tim Thumb](https://github.com/GabrielGil/TimThumb)\n* [Amazon S3](https://aws.amazon.com/s3/)\n* [Amazon Cloudfront](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html)\n* [Backblaze](https://secure.backblaze.com/r/008x60)\n* [Vimeo Pro](https://vimeo.com/professionals)\n* [Jest](https://facebook.github.io/jest/)\n* [Mocha](https://mochajs.org/)\n* [Fixer.io Curreny Conversion API](http://fixer.io/)\n* [Brain Tree](https://www.braintreepayments.com/)\n* [Stripe](https://stripe.com/)\n* [Mandrill](https://www.mandrill.com/)\n* [Drip](https://getdrip.com)\n* [Amazon SES](https://aws.amazon.com/ses/)\n* [PostMark App](https://postmarkapp.com) (THE BEST)\n* [Zurb Inky](https://www.npmjs.com/package/inky)\n* [Juice CSS Inliner](https://www.npmjs.com/package/juice)\n* [Meteor Hosting](https://www.meteor.com/hosting)\n* [Meteor Hosting](https://www.meteor.com/hosting)\n* [Digital Ocean](https://m.do.co/c/0c736d39efbc)\n* [Zeit Now](https://zeit.co/now)\n* [Heroku](https://www.heroku.com/)\n* [Bluehost Sucks](https://github.com/bluehost/endurance-page-cache/issues/16)\n* [Let\'s Encrypt](https://letsencrypt.org/)\n* [Cloudflare](https://www.cloudflare.com/) I KNOW I SAID CLOUDFRONT OOPS\n\n## Sick Picks\n* Scott: [Focusrite Scarlett 2i2](http://amzn.to/2xWd2Xv)\n* Wes: [Better Bidding](http://www.betterbidding.com/index.php?app=hotel_lists#ffmenuWB)\n\n## Tweet us your tips!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n\n## Shameless Plugs\n* [Level Up Tuts](https://www.leveluptutorials.com/) - check out scott\'s new shopping cart!\n* [Wes just updated his ES6 course!](https://ES6.io)\n', 'd04187559a9a9841aa9330561078793f70d5126e8bb7be5d557ace36b03c3575', 'our-stacks-explained', '/shows/014 - Our Stacks Explained.md', '2023-10-16 20:06:53.563', '2023-10-27 15:57:41.465', 'TASTY'),
('syntax_podcast_show_00015', 15, 'Advice for New Developers, Imposter Syndrome and Interviewing at Google', '2017-10-11 13:07:11.000', 'https://traffic.libsyn.com/syntax/Syntax015.mp3', '\nScott and Wes dish out some tasty advice to developers who are new to web development. How do you get better? How do you deal with imposter syndrome?\n\n## Sponsor\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Shameless Plugs\n* [Wes just updated his ES6 course!](https://ES6.io)\n* [Mastering Figma is now Launched!](https://www.leveluptutorials.com/store/products/tutorials/lut-dd015)\n\n## Show Notes\nThis show is light on links :)\n\n* [The Gap by Ira Glass](https://vimeo.com/85040589)\n* [Hackathon Starter](https://github.com/sahat/hackathon-starter)\n\n## Sick Picks\n\n* Scott: [Nintendo Switch](https://www.nintendo.com/switch/)\n* Wes: [Creative Market Fonts](https://creativemarket.com/fonts)\n\n## Tweet us your tips!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n\n', 'd9271bbcda5dc8b47d40eb6407ddbf2f2816cf10332fb7cffc12b39d1e0d592b', 'advice-for-new-developers-imposter-syndrome-and-interviewing-at-google', '/shows/015 - Advice for Newbies.md', '2023-10-16 20:06:53.601', '2023-10-27 15:57:41.519', 'TASTY'),
('syntax_podcast_show_00016', 16, 'Tasty Treats — Rems VS Ems, Remote Work, Making Money, Getting good at Design + more! 🍬', '2017-10-18 13:23:26.044', 'https://traffic.libsyn.com/syntax/Syntax016.mp3', '\n## Show Notes\n\n\n* **Q**: Rems vs Ems vs Pixels? What do you use?\n* **Q**: What activity, that isn\'t developer related, benefits you most as a developer?\n* [Becoming a Supple Leopard](https://www.amazon.com/gp/product/1936608588/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1936608588&linkCode=as2&tag=leveluptuts01-20&linkId=b9f598d6432ce7394e5b0510fe0bebba)\n* **Q**: Is a hot dog a sandwich? 🌭\n* **Q** If Google offered you a job today, would you take it?\n* [Mike Rowe: Why Entrepreneurs Crave the \'Reverse Commute\'](https://www.youtube.com/watch?v=3K-b7CZaPpw)\n* **Q**: How did Wes and Scott Meet?\n* **Q**: What are your thoughts on CMSs, like WordPress, adding JavaScript frameworks, like React?\n* **Q**: Where do you find remote work?\n* **Q**: How do you make money?\n* **Q**: Can a back-end dev become a good designer?\n* [Hero Patterns](http://www.heropatterns.com/)\n* [Steve Schoger\'s Twitter](https://twitter.com/steveschoger)\n* **Q**: Do you ever feel tired?\n* **Q**: What do you think about live streaming?\n* Should we do a Syntax live stream?!\n* **Q**: What stack should a new developer use?\n* **Q**: What is your process for deciding on new tools?\n* [React FAQ](https://reactfaq.site/) - sign up for Tim\'s newsletter!\n* **Q**: Where do you see yourself in 5 years?\n\n## Sick Picks\n* Scott: [Fivestar Notebook](http://amzn.to/2xNmnCH)\n* Wes: Read about your credit card benefits + perks!\n\n## Tweet us your tips!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n\n', 'c43cd17947a4917d81f6f91db6c83d705fec985387f358c3f242704792e94d62', 'tasty-treats-rems-vs-ems-remote-work-making-money-getting-good-at-design-more', '/shows/016 - QA.md', '2023-10-16 20:06:53.655', '2023-10-27 15:57:41.560', 'TASTY'),
('syntax_podcast_show_00017', 17, '22 Buzz Words Explained — Mutations, Pure Functions , Serverless, Hoisting, MVC + More', '2017-11-01 12:54:28.534', 'https://traffic.libsyn.com/syntax/Syntax017.mp3', '\nBuzz Words! WTF Do they mean?! Do They Mean Things?? Let\'s Find Out!\n\n## Sponsor\n* [Freshbooks](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## The Buzz Words\n\nThis is the order in which we talk about the different concepts. If you have anything to add to the next buzzwords show, tweet us [@SyntaxFM](https://twitter.com/syntaxfm)\n\n* Serverless / Cloud Functions\n* Composition in functional programming\n* [funfunfunction](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q)\n* Progressive Enhancement\n* Singleton\n* APIs + SDKs\n* Pure Functions + Side Effects\n* [Date-fns](https://date-fns.org/)\n* Immutable / Mutable / Mutations\n* [Immutable.js](https://facebook.github.io/immutable-js/)\n* [JavaScript30 Array Cardio](https://javascript30.com/)\n* Isomorphic / Universal JavaScript\n* Microservices\n* Scoping\n* Closures\n* **M**odel **V**iew **C**ontroller Pattern\n* [Learn Node](https://learnnode.com/) with a stupid explanation of MVC\n* Bike Shedding\n* Tree Shaking\n* Hoisting\n* ES Next\n* Asynchronous / Synchronous\n\n## Sick Picks\n* Scott: [Ghost in the Wires: My Adventures as the World\'s Most Wanted Hacker](http://amzn.to/2gVP4pH)\n* Wes: [Apollo Reddit App for iOS](https://apolloapp.io/)\n\n## Shameless Plugs\n* Scott: [React 16 for Everyone](https://www.leveluptutorials.com/store/products/tutorials/lut-dd016)\n\n## Tweet us your tasty treats!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n\n', 'dcbb6f713601c9e955ecaf9550dc560b19f7feea19b103d792605065aad0d50f', '22-buzz-words-explained-mutations-pure-functions-serverless-hoisting-mvc-more', '/shows/017 - Buzz Words.md', '2023-10-16 20:06:53.694', '2023-10-27 15:57:41.600', 'TASTY'),
('syntax_podcast_show_00018', 18, 'All About CSS Grid', '2017-11-08 14:06:32.171', 'https://traffic.libsyn.com/syntax/Syntax018.mp3', '\nIt\'s a long awaited CSS Grid show! How does it work? When do you use it? What\'s the difference between Grid and Flexbox?\n\n## Sponsor\n* [Save A Bro](https://saveabro.com/) is selling absolutely hilarious mustache t-shirts for $18 - all proceeds go to support the fight against prostate cancer.  Use the coupon code \"syntax\" at checkout to get free shipping in the US.\n\n## The Show Notes\n\n* [Wes Bos AMA](https://dev.to/wesbos/im-wes-bos-ask-me-anything/comments) where he tricked Scott that Bert Bos was his dad\n* [CSS Tricks A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)\n* [Rachel Andrew](https://rachelandrew.co.uk/)\n* [Rachel Andrew Twitter](https://twitter.com/rachelandrew)\n* [Rachel\'s Grid by Example](https://gridbyexample.com/)\n* [Rachel\'s Grid AMA](https://github.com/rachelandrew/cssgrid-ama)\n* [CSS Grid Garden](http://cssgridgarden.com/)\n* [The Story of CSS Grid, from Its Creators](https://alistapart.com/article/the-story-of-css-grid-from-its-creators)\n* [Jen Simmons](http://jensimmons.com/)\n* [Jen Simmons Twitter](https://twitter.com/jensimmons)\n* [Jen Simmons Labs](http://labs.jensimmons.com/)\n* [CSS Grid Pinterest / Masonry Layout Question](https://github.com/rachelandrew/cssgrid-ama/issues/19)\n* [Wes\' grid-auto-flow: dense; Experiment](https://twitter.com/wesbos/status/926119942197522433)\n* [grid-auto-flow: dense; Docs](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow)\n* [caniuse CSS Grid Support](caniuse.com/#search=grid) - make sure to click the \"Show All\" button\n* \"If someone thinks progressive enhancement means providing a crappy experience for older browsers then they’ve got a lot of reading to do.\" — [Sara Soueidan](https://twitter.com/SaraSoueidan/status/927150129257250817)\n* [Benjamin De Cock - @bdc](https://twitter.com/bdc) dropping tasty CSS Grid treats all day long on twitter.\n* [CSS Grid Animation #1](https://twitter.com/wesbos/status/925420897028202498)\n* [CSS Grid Animation #2](https://twitter.com/wesbos/status/925422255601016832)\n* [David K Piano Twitter](https://twitter.com/davidkpiano?lang=en)\n* [Flipping](https://github.com/davidkpiano/flipping)\n* [Slide Deck on FLIP](http://slides.com/davidkhourshid/flipping#/)\n* [CSS Grid Template Area ASCII](https://mozilladevelopers.github.io/playground/css-grid/08-template-areas/)\n* [Grid repeat()](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat)\n* [Grid minmax()](https://developer.mozilla.org/en-US/docs/Web/CSS/minmax)\n* [CSS Grid nth-row()](https://github.com/w3c/csswg-drafts/issues/1943)\n* [CSS Sub-Grid](https://rachelandrew.co.uk/archives/2017/07/20/why-display-contents-is-not-css-grid-layout-subgrid/)\n\n## Sick Picks\n* Scott: [Just My Type](https://www.amazon.com/gp/product/1592407463/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1592407463&linkCode=as2&tag=leveluptuts01-20&linkId=cda796c9ea5df1225e445ff4d0368cb1)\n* Wes: [Sick Update on the Caldigit TS3 Dock](http://www.caldigit.com/)\n\n## Tweet us your tasty treats!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n', '013c37c3aa690e57980936ba6d00797a67051543a1202c1527b6e1acde21cc3f', 'all-about-css-grid', '/shows/018 - CSS Grid.md', '2023-10-16 20:06:53.754', '2023-10-27 15:57:41.656', 'TASTY'),
('syntax_podcast_show_00019', 19, 'How to get into Speaking At Conferences', '2017-11-15 14:28:06.658', 'https://traffic.libsyn.com/syntax/Syntax019.mp3', '\nWes talks to Scott about speaking at conferences. What are the benefits of speaking? How do you apply? What talk should you give? What makes a good conference talk?\n\n## Freshbooks is the best!\n\n[Freshbooks.com/syntax](https://freshbooks.com/syntax) - Get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## The Show Notes\n\n* Snow Tires are supes important\n* Blizzzzaaaaakkksss!!!\n\n### Benefits\n\n* Free travel / accommodations / vacation\n* Fantastic Friendships and Industry Connections\n* Job Opportunities\n* Industry Recognition\n* Renewed Excitement\n  * Wes loved [David K Piano\'s Flip Talk](http://slides.com/davidkhourshid/flipping#/)\n\n### How do you Apply / Where to Find Conferences\n\n* Create a CFP\n* You need to brute force it\n* 🍯 Honey Hole: [Lanyrd Calls](http://lanyrd.com/calls/)\n* 🐝 Honey Hole: [The Weekly CFP](http://theweeklycfp.com/)\n* 🍯 Honey Hole: [Papercall.io](https://www.papercall.io/)\n* [Meetup](http://meetup.com/)\n\n### Types of Talks you could give\n\n1. Lessons Learned Talk\n1. The New Concept Talk (_the tasty treats talk_)\n1. My Approach to XYZ\n1. The Complicated Concepts Explained\n1. The Super Interesting Deep End Talk\n\n### What makes a good talk?\n\n* Skip the history lesson - hook them\n* Keep your personal bio short\n* Start with a banger ‼️\n* Short Code Examples\n* Short Looping video examples\n* [Scott\'s Origin Story Podcast](https://syntax.fm/show/007/scott-tolinski-origin-story)\n* Make sure your talk works offline\n* Prepare for aspect ratios\n* Plug into the projector before your talk\n* Live that dongle life\n* Show people _why_ they need to know something\n\n\n### Slide Deck Software\n* Powerpoint or Keynote\n* [Wes\' HTML5 Slide Deck](https://github.com/wesbos/future-js)\n* [Another one of Wes\' talks](https://github.com/wesbos/ES6-talk)\n* [Reveal JS](http://lab.hakim.se/reveal-js/)\n* [React Spectacle](https://github.com/FormidableLabs/spectacle)\n* [Prezi](https://prezi.com/)\n\n### Conference Training\n* Training pays well\n* More hands on experience for conf attendees\n\n### Getting the Most out of a tech conference\n* [Wes\' Post on Getting the most out of a conference](http://wesbos.com/get-the-most-out-of-conferences/)\n* [Conf Code of Conduct](http://confcodeofconduct.com/)\n* [Logitech Wireless Clicker](http://amzn.to/2hBmLgD)\n* Join Twitter Early\n* Have Lunch with Speakers\n* Stay off your phone\n* Keep your name badge on!\n* Practice your break away\n\n## Sick Picks\n* Scott: [Spectacle Window Manager](https://www.spectacleapp.com/)\n* Wes: [What the heck is the event loop anyway?](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n\n## Tweet us your tasty treats!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n', 'cbcd33087d879a07afe9378929d7243e7afa6875823f4219874b718ffc9bb5ab', 'how-to-get-into-speaking-at-conferences', '/shows/019 - Conferences.md', '2023-10-16 20:06:53.794', '2023-10-27 15:57:41.720', 'TASTY'),
('syntax_podcast_show_00020', 20, 'Fitness, Nutrition, and Losing Weight', '2017-11-22 14:25:54.493', 'https://traffic.libsyn.com/syntax/Syntax020.mp3', '\nWes and Scott talk about their fitness journey and how it relates to being a web developer in terms of energy, focus and mental clarity.\n\n## Get Fit with Dev Lifts — Show Sponsor\n\n[Dev Lifts](https://devlifts.io) - Thad and JC are on a mission to make web developers healthy.\n\nThey are currently offering Personal Training and Nutrition Plans for $149 (Regular $249) and with the code **Syntax** you\'ll get an extra $50 off. That\'s only $99 for the next ~95 people!\n\n## The Show Notes\n\n* 04:20 - Scott\'s Fitness Story\n* 08:00 - Wes\'s Fitness Story\n* 09:50 - The benefits of fitness and being a web developer. Productivity / Focus / Mental Clarity\n* 14:00 - Finding Time to Work Out\n* Tweet your work + workout routine to [@SyntaxFM](https://twitter.com/syntaxfm)\n* 17:40 - How to work out / What to do / Routines?\n* 24:00 - Learning to code && Learning to Workout\n* 25:20 - Significant Other Buy-in\n* [Fitness Blender](https://www.fitnessblender.com/)\n* [Starting Strength](https://startingstrength.com/)\n* 28:00 - All About [Dev Lifts](https://devlifts.io)\n* [Jeff Nippard Youtube](https://www.youtube.com/channel/UC68TLK0mAEzUyHx5x5k-S1Q)\n* 34:00 — Nutrition\n* 36:00 — Wes\' Keto Nutrition Plan\n* [Dom D\'Agostino Keto Interview](https://www.youtube.com/watch?v=keSoSyu9m7c)\n* [MyFitnessPal](https://www.myfitnesspal.com/)\n* [Keto Reddit](https://www.reddit.com/r/keto/)\n* [Keto Gains Reddit](https://www.reddit.com/r/ketogains/)\n* 41:00 - Scott\'s Nutrition\n* 42:00 - Pop or Soda?\n* 45:45 - 16 : 8 Intermittent Fasting\n* [IF Reddit](https://www.reddit.com/r/intermittentfasting/)\n* 48:30 - Dieting is bad\n* Supplements — Don\'t take our Advice here. Talk to your trainer.\n* 50:00 - Wes\' Supplements and how Bags of Milk are the best\n* [BCAA Amino Energy](http://amzn.to/2hKkVqk)\n* [Preworkout Coke\'d Up](http://amzn.to/2hIQ9hd)\n* [Cissus Quadrangularis Extract - Genoflex](http://amzn.to/2hJcUSd)\n* [Fish Oil](http://amzn.to/2iF54tT)\n* [Vita Jym Multivitamin](http://amzn.to/2zXYtnV)\n* 54:00 - Scott\'s Supplements\n* [NOW Adam Superior Men’s Multi](http://amzn.to/2zVtPvj)\n* [Optimum Nutrition Gold Standard 100% Whey Protein](http://amzn.to/2zX0IrM)\n* [NOW Psyllium Husk](http://amzn.to/2ze1xZy)\n* [BulkSupplements Pure L-Citrulline DL-Malate 2:1 Powder](http://amzn.to/2z96vqL)\n* [Bulksupplements Pure Caffeine Capsules. Caffeine can be dangerous warning!](http://amzn.to/2zW4GAJ)\n\n## Sick Picks\n* Scott: [TriggerPoint GRID Foam Roller](http://amzn.to/2zbRAMi)\n* Wes: [Nike Techfleece Joggers](http://amzn.to/2jL2XYY)\n\n## Tweet us your tasty treats!\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM)\n', '4d09814df2c13a239caa29e0d8c40b151c568989c2d8ee5f23e928c94d78aa72', 'fitness-nutrition-and-losing-weight', '/shows/020 - Fitness.md', '2023-10-16 20:06:53.840', '2023-10-27 15:57:41.777', 'TASTY'),
('syntax_podcast_show_00021', 21, 'What\'s New in CSS? Variables, Scoping, New Selectors and Color Functions', '2017-11-29 15:18:55.950', 'https://traffic.libsyn.com/syntax/Syntax021.mp3', '\nWes and Scott talk about the future of CSS - what is new and what should we expect to be coming in the near future?\n\n## Bug Replay — Sponsor\n\nYou need to try out [Bug Replay](https://www.bugreplay.com/) for recording and re-playing browser based bugs. It\'s a  bug reporting tool that can be used at all stages of development and by anyone in your organization. Provide your dev team with detailed reports so they can fix bugs faster.\n\n## Freshbooks — Sponsor\n\nIf you are a small business or freelancer check out[Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## The Show Notes!\n\n03:30\n\n* IT\'S NOT CALLED CSS4\n* You can find the different levels over at [CSS Working Group Drafts](https://drafts.csswg.org/)\n\n06:24\n\n* CSS Custom Properties (CSS Variables)\n* Bite and chew over the syntax - it\'s backwards compatible\n* What\'s the difference between this and Sass/Less/Stylus?\n* [JavaScript30.com](https://JavaScript30.com) Day 3 uses JavaScript + CSS Variables\n* CSS Tricks: [The CSS attr() function got nothin’ on custom properties](https://css-tricks.com/css-attr-function-got-nothin-custom-properties/)\n* Independent Transforms - `transform: rotateX(var(--x)) translateY(var(--y));`\n\n19:20\n\n* [CSS Filters](https://developer.mozilla.org/en-US/docs/Web/CSS/filter)\n* Drop Shadow Filter\n* [SVG Filters](https://developer.mozilla.org/en-US/docs/Web/SVG/Applying_SVG_effects_to_HTML_content)\n\n28:20\n\n* [RRGGBBAA](https://hashnode.com/post/understanding-rrggbbaa-color-notation-cisvdr52x088fwt53h1drf6m2)\n* [Hex transparency in colors](https://stackoverflow.com/questions/15852122/hex-transparency-in-colors)\n\n31:00\n\n* Colour Functions\n* [CSS Next](http://cssnext.io/)\n* [Draft Spec for Color Functions](https://drafts.csswg.org/css-color/#modifying-colors)\n\n36:00\n\n* CSS Level 4 Selectors\n* ITS NOT CSS4!!!!!!\n* [css4.rocks](http://css4.rocks/)\n\n40:00\n\n* nth-of-selectoed\n* `:nth-child(3n of img.dog)`\n* `div:has(img)`\n\n44:00\n\n* Some not-so-new-but-still-cool units\n* [Viewport Units](https://css-tricks.com/fun-viewport-units/)\n* min-height: 100vh\n* ch units\n* ex units\n* [CSS Angles](https://developer.mozilla.org/en-US/docs/Web/CSS/angle) - deg(), grad(), rad(), turn()\n\n## Sick Picks\n* Scott: [Google Pixel 2 XL](https://store.google.com/product/pixel_2)\n* Wes: \n  * [Anker 5 Port 40w USB Charger](http://amzn.to/2ng5LhZ)\n  * [Anker 10 Port 60w USB Charger](http://amzn.to/2AgOYjx)\n  * [Anker 5 Port 60w with a USB-C Port](http://amzn.to/2zOT03R)\n\n## Tweet us your tasty treats!\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '187a1f35c9a5bbd86ade52955babe07e1142c63b0fb1e1491ec316780c76339a', 'what-s-new-in-css-variables-scoping-new-selectors-and-color-functions', '/shows/021 - CSS4.md', '2023-10-16 20:06:53.878', '2023-10-27 15:57:41.823', 'TASTY'),
('syntax_podcast_show_00022', 22, 'Failure', '2017-12-06 15:00:46.998', 'https://traffic.libsyn.com/syntax/Syntax022.mp3', '\nFailure. How do you deal with it? How to learn from it? How do you know when you should give up vs keep pushing?\n\n## Snipcart — Sponsor\n\nSnipcart allows you to create online shopping carts without any backend work. It\'s entirely client-side which means it\'s the perfect fit for anyone building a SPA in React, Angular or any other framework. Check out the full list of features over at [Snipcart.com/syntax](https://snipcart.com/syntax?utm_source=syntax&utm_medium=podcast&utm_campaign=syntax1) and sign up for three months free!\n\n## Get In Shape with DevLifts — Sponsor\n\n[DevLifts](https://devlifts.io/) is how I (Wes) got in shape. After an indepth consultation about your goals, They will create you a personal training and nutrition plan. If you are looking to get in shape in 2018, now is the time to sign up. Use the code SYNTAX for an extra $50 off.\n\n## The Show Notes!\n\n01:34\n\n* Scott and Wes shoot the shit\n* Wes is back from the DotJS conference\n* Wes does a terrible (and hopefully not offensive) French Accent\n\n03:50\n\n* What\'s the deal with the #FailFast culture\n* We talk about Fear of Failure and how it can stop you from starting anything at all\n* High Stakes vs Low Stakes Failure\n\n09:20\n\n* Be aware of how fear of failure manifests itself in your work\n* Just do it, put in the work\n* Pen to Paper\n\n12:20\n\n* How to deal with mid-project failure\n* Getting sick of a project part way through\n* Finishing Things is such an underrated skill\n* Small wins is key for confidence\n* Take the emotion out of the decisions\n\n18:00\n\n* MVP - Minimum Viable Product\n\n19:30\n\n* Do you plan for failure?\n* Wes\' Life is Course Correction\n* Wes is Unapologetically Confident\n* Scott is Ignorantly Confident\n\n\n23:00\n\n* Another one of Scott\'s amazing segueways into our Sponsor\n\n26:20\n* Wes\' Facebook Ads Failures\n* The cost of admission\n* Own your role in something failing\n\n33:33\n* Eating burnt rice is a huge character trait\n* Pivoting\n\n41:20\n\n* Our own personal failures detailed\n* [Scott\'s Soundcloud](https://soundcloud.com/domesticrobot/sets/best-of-domestic-robot)\n* [Scott\'s Bandcamp](https://domesticrobot.bandcamp.com/)\n\n## Sick Picks\n* Scott: [Cypress.io](https://cypress.io)\n* Wes: [Dome D201 Dashcam](http://amzn.to/2jlCAFL)\n\n## Tweet us your tasty treats!\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'acdf9dec6f494e4767600c9279fb1fb79f65a85ed28b860f5babbc2d068cde26', 'failure', '/shows/022 - Failure.md', '2023-10-16 20:06:53.915', '2023-10-27 15:57:41.863', 'TASTY'),
('syntax_podcast_show_00023', 23, 'Web Development in 2017 && a look ahead at 2018 🍾🍷', '2017-12-13 15:18:01.000', 'https://traffic.libsyn.com/syntax/Syntax023.mp3', '\nWhat happened in web development in 2017? What were our personal and professional feats in 2017? What should we look forward to in 2018?\n\n## Snipcart — Sponsor\n\nSnipcart allows you to create online shopping carts without any backend work. It\'s entirely client-side which means it\'s the perfect fit for anyone building a SPA in React, Angular or any other framework. Check out the full list of features over at [Snipcart.com/syntax](https://snipcart.com/syntax?utm_source=syntax&utm_medium=podcast&utm_campaign=syntax1) and sign up for three months free!\n\n## Freshbooks — Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## The Show Notes!\n\n02:00\n\n* Scott\'s 2017 Look Back\n* Scott is a new parent\n* Dealing with kids who don\'t sleep\n* Scott\'s Breakdancing Gains\n\n05:20\n\n* Wes\' Look Back\n* Taking Health Seriously\n* First full year of Wes doing tutorials full time\n* Course Correction VS Goals\n* Course Platform Improvements\n* Lots of Email Marketing\n* Migration to Drip\n\n09:10\n\n* Scott cut ties with startup\n* 100% Invested in Levelup Tutorials\n* Major Platform improvements\n* New Payment Gateways\n* Lots of new Series - 400 videos!\n\n11:25\n\n* We Launched Syntax!\n* Thank you!\n* The show is getting good (we think?)\n\n13:50\n\n* Wes launched his [Learn Node](https://LearnNode.com) Course\n* Wes updated his [ES6 for Everyone](https://ES6.io) Course\n* Lots of feedback on Wes\' [JavaScript30](https://JavaScript30.com) course\n* Stickers!\n\n16:20\n\n* Goals for 2018\n* The Yacht Club\n* S.M.A.R.T. Goals\n\n18:00\n\n* Scott\'s 2018 Goals\n* More videos\n* More Youtube\n* Building a Set\n* Less Overtime\n\n20:35\n\n* Wes\' 2018 Goals\n* Releasing lots and lots of Content\n* CSS Grid\n* VS Code\n* Some ideas around JavaScript and CSS Courses [tweet Wes your feedback](https://twitter.com/wesbos)\n* If it\'s not a Hell Yes, it\'s a no\n* Double down on what works\n* New Checkout Experience\n* Delegate + Automate\n* Get faster at recording\n\n29:40\n\n* JavaScript in 2018\n* SSR Frameworks: Next.js, Gatsby, Nuxt.js\n* [ParcelJS](https://parceljs.org/)\n* Tooling is becoming less of a pain in the ass\n\n33:00\n\n* GraphQL Is Blowin\' Upppppp\n* Typed Languages / Typings\n* Flow / Typescript / ReasonML / GraphQL Typings\n\n38:00\n\n* WordPress\' Gutenberg Editor\n\n41:00\n\n* React Patent\'s Dropped\n* Vue became really popular\n\n45:30\n\n* CSS Changes!\n* CSS Grid\n* Firefox CSS Grid Dev Tools\n\n48:50\n\n* Componentized CSS\n* Design Systems\n* [Figma](https://figma.io)\n* CSS Variables\n\n54:00\n\n* VS Code became very popular\n\n55:00\n\n* The Iron Yard shut down\n\n58:00\n\n* Progressive Web Apps\n\n59:00\n\n* What do we hope for in 2018?\n\n## Sick Picks\n* Scott: [Google Daydream](https://vr.google.com/daydream/)\n* Wes: [Missive](http://missiveapp.com)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '02ca61ccc195f152538499b64158c5fa658f8207be1eb641a10bbd0cb8bf2d35', 'web-development-in-2017-and-and-a-look-ahead-at-2018', '/shows/023 - 2017 In Review.md', '2023-10-16 20:06:53.952', '2023-10-27 15:57:41.902', 'TASTY'),
('syntax_podcast_show_00024', 24, 'All About CSS BEM!', '2017-12-21 00:47:25.817', 'https://traffic.libsyn.com/syntax/Syntax024.mp3', '\nScott and Wes dive into CSS BEM — What is it? Why do you need it? How does it work?\n\n## Sign up for D3 in 5 Days — Sponsor\n\nD3 has a bit of a bad reputation for being hard to learn so Ben Clinkinbeard has put together this awesome 5 day email course that will get you comfortable with the 3 or 4 fundamental concepts that are needed to create amazing data visualizations with D3.js. [Get it now](http://d3in5days.com/syntax/)\n\n## The Show Notes!\n\n01:00\n\n* Minisode! What do you think?\n* Meijer is the best!\n\n05:00\n\n* What is CSS BEM?\n* What problems does CSS BEM solve?\n* Block, Element, Modifier!\n\n8:00\n\n* What about really long class names?\n\n9:00\n\n* Use with Sass/Stylus\n\n12:00\n\n* What about styled components?!\n\n15:00\n\n* Listener Question: Do / should you use Dropbox for a website with Git and node_modules?\n\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8de824afb511b12a6f3f177e1306f3608d568dbc2bdce2da01fd1172ccf68612', 'all-about-css-bem', '/shows/024 - What is CSS BEM.md', '2023-10-16 20:06:53.986', '2023-10-27 15:57:41.940', 'SPECIAL'),
('syntax_podcast_show_00025', 25, 'Dealing With Email Overload && Prettier Setups', '2017-12-27 14:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax025.mp3', '\nWes details \"Breakout\" — his email management strategy for overwhelmed creatives and Scott and Wes chat about how they have their prettier setup.\n\n## Freshbooks — Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n\n## The Show Notes!\n\n01:00\n\n* [Wes\' notes on the Breakout Email Management System](http://wesbos.com/breakout-email/)\n\n02:00\n\n* Do you like minisode or snackisode?\n* Any other ideas for names for these short episodes?\n\n04:00\n\n* Email is often busywork\n\n04:30\n\n* You likely have a decision problem\n\n06:00\n\n* Kill it at the source! How do you stop email from getting to you in the first place?\n\n08:00\n\n* Your inbox is not the world\'s TODO list\n* Process it when you get it\n* Getting Things Done\n\n09:30\n\n* Filter! Filter! Filter!\n\n10:30\n\n* Germans sure do get a lot of vacation time!\n\n13:00\n\n* Expansions\n* Using Robots for empathy\n* [Text Expander](https://smilesoftware.com/textexpander)\n* [aText](https://www.trankynam.com/atext/)\n\n15:30\n\n* Dictation is great!\n\n17:30\n\n* Video responses\n\n18:30\n\n* Defer\n\n19:19\n\n* Batch Processing Email\n* Send + Archive\n\n20:31\n\n* Stop emailing yourself\n\n24:00\n\n* Listener Question: How do you use Prettier?\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5988caa8a582b2cd2577afb64d71a9ee8f89d2e268b005af10a8287bf7517a5c', 'dealing-with-email-overload-and-and-prettier-setups', '/shows/025 - Breakout Email Management.md', '2023-10-16 20:06:54.029', '2023-10-27 15:57:41.982', 'TASTY'),
('syntax_podcast_show_00026', 26, 'All About Redux && Cookies vs JWT', '2018-01-03 14:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax026.mp3', '\n## Dev Lifts — Sponsor\n\n[Dev Lifts](http://devlifts.io) will create a personal training plan tailored to your 2018 health and fitness goals. Use the code **SYNTAX** for $50 off.\n\nJoin with a friend and we\'ll make you a Buddy Plan that you can do together (nutrition will still be tailored on a per-individual basis, but workouts will be something you can both do together)! Plus, use the coupon code below and you\'ll both get $100 off.\n\nEnter each other\'s email address as the coupon code and your discount will be applied to your invoices (invoices are sent manually currently, so I\'ll apply the discount for you both once you\'ve both signed up). Valid thru January 31, 2018.\n\n## The Show Notes!\n\n01:00\n\n* [Scott\'s New Redux Course](https://www.leveluptutorials.com/store/products/tutorials/lut-dd018)\n* [Redux Docs](https://redux.js.org/)\n* What is Redux? Why do we need it?\n\n06:00\n\n* Modifying Your State\n* Immutability\n\n07:15\n\n* Actions + Actions Creators\n* Dispatching\n\n09:00\n\n* Reducers\n\n14:00\n\n* [Wes\' Redux Tutorial](https://LearnRedux.com)\n\n18:30\n\n* What is the difference between Cookies and JWT?\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'df1cc1c94cb44a81944097931cf32c117855768b5fd5a8071297a97bcb62258d', 'all-about-redux-and-and-cookies-vs-jwt', '/shows/026 - Redux.md', '2023-10-16 20:06:54.063', '2023-10-27 15:57:42.024', 'TASTY'),
('syntax_podcast_show_00027', 27, 'GraphQL? Here is what you need to know!', '2018-01-10 14:13:26.009', 'https://traffic.libsyn.com/syntax/Syntax027.mp3', '\n## Snipcart — Sponsor\n\nSnipcart allows you to create online shopping carts without any backend work. It\'s entirely client-side which means it\'s the perfect fit for anyone building a SPA in React, Angular or any other framework. Check out the full list of features over at [Snipcart.com/syntax](https://snipcart.com/syntax?utm_source=syntax&utm_medium=podcast&utm_campaign=syntax3) and sign up for three months free!\n\n## Freshbooks — Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## { show(id: 027) { notes }}\n\n02:40\n\n* What is GraphQL anyways?\n* GraphQL Relational Data\n\n04:45\n\n* How is it different than REST?\n\n08:30\n\n* GraphQL\'s self documenting Nature\n\n09:20\n\n* You don\'t need to replace your existing REST api\n* It can sit infront of multiple APIs\n\n10:00\n\n* GraphQL Resolvers\n* [Apollo Link State](https://github.com/apollographql/apollo-link-state) does local data as well\n\n11:50\n\n* GraphQL on the client side\n* [Relay](https://facebook.github.io/relay/)\n* [Apollo](https://www.apollographql.com/)\n* [GraphQL Request](https://github.com/graphcool/graphql-request)\n* [Lokka](https://github.com/kadirahq/lokka)\n* Nano\n\n13:30\n\n* Why we like Apollo\n* Setup is amazingly fast\n\n15:00\n\n* Pagination\n* Refreshing of data\n\n18:00\n\n* The GraphQL Core Concepts\n* Queries\n* Mutations\n* Filtering and Sorting\n* It\'s not really a query language\n\n21:00\n\n* How do you say Schema?\n\n22:00\n\n* More on Resolvers\n\n22:50\n\n* Mutations\n* Updating the cache\n\n27:00\n\n* Using with existing APIs\n* Do you have two schemas now? One for MongoDB and one for GraphQL?\n\n\n35:00\n\n* CMS and Static Site Generators that run on GraphQL\n* [Gatsby](https://github.com/gatsbyjs/gatsby)\n* [WP-GraphQL](https://github.com/wp-graphql/wp-graphql)\n* [GraphCMS](https://graphcms.com/)\n\n45:00\n\n* [Graph Cool](https://www.graph.cool/)\n\n53:00\n\n* Apollo Link\n* Apollo VS Redux\n\n56:00\n\n* Graphiql\n\n## SIIIIICK PICKS\n\n* Wes: [The Indicator Podcast](https://www.npr.org/sections/money/567724614/the-indicator)\n* Scott: [You Don\'t Know JS](https://github.com/getify/You-Dont-Know-JS)\n\n## Shameless Plugs\n\n* [Free GraphQL Tuts from Scott](https://www.leveluptutorials.com/tutorials)\n* [CSS Grid Course is coming sooooon!](https://CSSGrid.io)\n\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '24db4a0f1e5612a3ac3c6e2dd92f1244beab11687b95f2841cf3c9dafe83772b', 'graphql-here-is-what-you-need-to-know', '/shows/027 - GraphQL.md', '2023-10-16 20:06:54.099', '2023-10-27 15:57:42.068', 'TASTY'),
('syntax_podcast_show_00028', 28, 'Async + Await', '2018-01-17 16:48:28.549', 'https://traffic.libsyn.com/syntax/Syntax028.mp3', '\n## Freshbooks — Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n02:55\n\n* [Wes\' Async + Await talk on YouTube from DotJS](https://www.youtube.com/watch?v=9YkUCxvaLEk)\n* JavaScript is Asynchronous\n* [Ryan Dhal (Creator of Node.js) original Node.js talk](https://www.youtube.com/watch?v=ztspvPYybIY)\n\n06:00\n\n* Callback Hell\n* Q\n* Bluebird\n* What is a promise?\n* Promises are an IOU\n\n8:30\n\n* Async + Await IS promises\n* What is Async + Await?\n* How does the code look?\n* Returning values from an await\n\n15:20\n\n* Performance Considerations\n* MEGA PROMISES\n* `Promise.all()`\n* Here is an example:\n* const [weather, store] = Promise.all(getWeather(), getStores());\n\n19:22\n\n* This stuff is 100% native\n* Most new Browser APIs are build on Promises\n* [Fetch()](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n* Some examples:\n* `await fetch(\'https://api.github.com/users/wesbos\').then(data => data.json())`\n* OR\n* `await (await fetch(\'https://api.github.com/users/wesbos\')).json()`\n* [Axios](https://github.com/axios/axios)\n\n22:48\n\n* [The Payment Request API](https://developers.google.com/web/fundamentals/payments/)\n* You should listen to episode 006 on [accepting money on the internet](https://syntax.fm/show/006/accepting-money-on-the-internet)\n* Web Animation API\n\n27:00\n\n* Snackisodes\n* Snack Packs\n* Hasty Treats?!!!\n\n28:00\n\n* Making callback-based functions promised basked\n* [es6-promisify](https://www.npmjs.com/package/es6-promisify)\n* [util.promisify()](http://2ality.com/2017/05/util-promisify.html)\n\n30:00\n\n* Error Handling Methods\n* View [my slides](https://wesbos.github.io/Async-Await-Talk/) for some code examples.\n* Try/Catch\n* High Order Function\n* Just handle the error when you `callIt().catch(dealWithIt);`\n* Node\'s `process.on(\'unhandledRejection\')` event\n\n36:00\n\n* Browser Support\n* Babel it!\n\n38:00\n\n* [AbortController()](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n* [Abortable Fetch](https://developers.google.com/web/updates/2017/09/abortable-fetch)\n\n## SIIIIICK PICKS\n\n* Scott: [Ring Doorbell](http://amzn.to/2DEUJaL)\n* Wes: [The Indicator Podcast](https://www.npr.org/sections/money/567724614/the-indicator)\n\n## SICK TIP\n\n* Chrome\'s Autoplay is changing\n* [Details on this](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes)\n* Visit chrome://media-engagement to see your scores\n\n## Shameless Plugs\n\n* [Fullstack GraphQL](https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg)\n* [CSS Grid Course is coming sooooon!](https://CSSGrid.io)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'fb81051f020c68ecb365826dbccfb605a284a6c0250742d02433ce48911f8442', 'async-await', '/shows/028 - Async Await.md', '2023-10-16 20:06:54.142', '2023-10-27 15:57:42.118', 'TASTY'),
('syntax_podcast_show_00029', 29, 'Hosting & Servers — Heroku, Now, Galaxy, Digital Ocean, Linode, Docker, Netlify and more!', '2018-01-24 14:13:19.637', 'https://traffic.libsyn.com/syntax/Syntax029.mp3', '\n## Xojo — Sponsor\n\nXojo is a cross-platform development tool for creating native apps for desktop, mobile, web and Raspberry Pi.\n\nWith Xojo you really can write just one version of your app, say, on the Mac, click a button, and have a completely native Windows version too.\n\nXojo lets you abstract yourself from specific platform details, so you can focus on what makes your app unique. All apps have completely native controls, even if they weren’t developed on that platform. Just use drag and drop to create your user interface, and one language to program the functionality.\n\nUsers also include Fortune 500 companies, citizen developers, professional developers, IT, hobbyists and students - anyone who wants to build apps faster.\n\nListeners of this show get 20% off with the coupon code SYNTAX over at [xojo.com/syntax](http://xojo.com/syntax)\n\n## Show Notes\n\n* Take a drink every time Wes says exactly\n\n01:10\n\n* [CSS Grid course is out!](https://CSSGrid.io)\n\n03:50\n\n* The most basic hosting / services\n* WordPress.org, Medium, Wix, Squarespace\n\n05:00\n\n* Your Cheap PHP/Apache Hosts\n* Endurance International Group owns most of the cheap web hosting world\n* cPanel\n* Bluehost doing shady stuff\n* Siteground seems p good\n\n13:20\n\n* Service Based Hosting\n* [Heroku](http://heroku.com/)\n* [Zeit\'s Now](https://zeit.co/now)\n* [Galaxy](https://www.meteor.com/hosting)\n\n15:00\n\n* What does \"spinning down\" mean?\n* Deploying to these services\n\n17:20\n\n* How these services do instant cut-overs to new servers\n* SSL Certificates\n\n20:00\n\n* You should listen to the [Our Stacks Explained](https://syntax.fm/show/014/our-stacks-explained) episode.\n* [Zeit\'s Now Alias](https://zeit.co/blog/now-alias)\n* [mLab MongoDB Hosting](https://mlab.com/)\n* [Compose MongoDB Hosting](https://www.compose.com/)\n\n29:00\n\n* Raw Server Space\n* [Linode](https://www.linode.com/)\n* [Digital Ocean](https://m.do.co/c/0c736d39efbc)\n* [Rackspace](https://www.rackspace.com/)\n* Digital Ocean Droplets\n* Digital Ocean\'s docs are 👌👌👌👌\n\n32:00\n\n* What is Nginx?!\n* [Let\'s Encrypt](https://letsencrypt.org/)\n* [Mozilla\'s SSL config generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/)\n* [Caddy Server](https://caddyserver.com/)\n\n38:20\n\n* [Docker](https://www.docker.com/)\n\n40:00\n\n* SPA Apps - React, Angular, Vue...\n* How to handle Routing\n* [Netlify](https://netlify.com)\n\n## SICK PICKS\n\n* Wes:\n  * [Magnetic Magsafe-life USB cable for micro USB, USB-c and Lightning](http://amzn.to/2Dqe3KY)\n  * [Magsafe-like USB that can handle a 87w Macbook Pro](http://amzn.to/2DwPz3s)\n* Wow: [MONGOOSE VS SNAKE VIDEO](https://www.youtube.com/watch?v=OyuIAUlL5IU)\n* Scott: [Bulk Supplements](http://amzn.to/2DzGGq9)\n\n## Shameless Plugs\n\n* Scott: [Levelup Tutorials Pro](http://leveluptutorials.com/pro)\n* Wes: [CSS Grid Course](https://CSSGrid.io)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c23490a992e944a7a67a50b1a4af592f2a9cada912faae78c377be788e9101f2', 'hosting-and-servers-heroku-now-galaxy-digital-ocean-linode-docker-netlify-and-more', '/shows/029 - Hosting.md', '2023-10-16 20:06:54.182', '2023-10-27 15:57:42.164', 'TASTY'),
('syntax_podcast_show_00030', 30, 'Snack Pack — CSS Frameworks, React HOC, Render Props, Coding Designers, Early Career Advice and a sound board!', '2018-01-31 14:02:55.235', 'https://traffic.libsyn.com/syntax/Syntax030.mp3', '\n## Dev Lifts - Sponsor\n\n[Dev Lifts](https://devlifts.io) - Thad and JC are on a mission to make web developers healthy. Get a Personal Training and Nutrition Plan — use the code SYNTAX for $75 off. They have also just announced their [slack-only memberships](https://devlifts.io/slack.html) for $5/month\n\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n01:10\n\n* you should try out the new [Syntax Soundboard](https://codepen.io/drehimself/full/BYBwBp/) by Andre Madarang\n\n* [Have a Question?! Submit it here!](https://docs.google.com/forms/d/e/1FAIpQLSfQlAo1wXHiJMySdU-h8QMtfoz92aMS9eycEHXB6eRCLh8KHA/viewform)\n\n03:00\n\n* Skateboarding on a TRAMPOLINE?!\n\n04:30\n\n* **Q:** What are your favourite features coming to HTML 5.2\n* [Dialog Box](https://webdesign.tutsplus.com/tutorials/native-popups-and-modals-with-the-html5-dialog-element--cms-23876)\n* Multiple Main Tags\n* Thanks Jordan!\n\n10:00\n\n* **Q:** How do you retain all the info you learn like a sponge?\n* Thanks Ozan\n\n13:30\n\n* What are your favourite CSS Libraries / Frameworks?\n* Thanks Blake!\n\n21:00\n\n* What were some of the struggles you had early on in your career? How did you overcome them?\n* Learning how to read error logs and messages\n* Dealing with Impatience\n* Coding is very frustrating\n\n26:50\n\n* What are High Order Components and Render Props?\n* [High Order Components](https://reactjs.org/docs/higher-order-components.html)\n* [React Render Props](https://reactjs.org/docs/render-props.html)\n* [Video: Michael Jackson - Never Write Another HoC](https://www.youtube.com/watch?v=BcVAq3YFiuc)\n* [React Downshift](https://github.com/paypal/downshift)\n* [React Reconciliation](https://reactjs.org/docs/reconciliation.html)\n\n34:45\n\n* **Q:** When should you just drop the towel on code?\n* When should you throw in the towel on code?\n* Scrapping a codebase and moving from PHP to JS\n* Let\'s talk about if it\'s worth it\n\n41:00\n\n* **Q:** What is the best way for a JS beginner to get their hands dirty?\n* Don\'t work on apps, work on pieces!\n\n47:50\n\n* How do you recommend a designer falling in love with frontend dev sharpen their skills while being (happily) committed to a full time design position?\n* Should designers code?\n\n## SIIIIIIICK PICKS\n\n* Scott:\n  * [It’s Not How Good You Are, It’s How Good You Want to Be](http://amzn.to/2DOE9V9)\n  * [Whatever You Think, Think the Opposite](http://amzn.to/2GybLbh)\n* Wes:\n  * [Tony Robins Podcast](https://www.tonyrobbins.com/podcasts/)\n  * [The Kevin Rose Show](https://www.kevinrose.com/)\n\n## Shameless Plugs\n\n* Scott: [New React Native Course!](https://www.leveluptutorials.com/pro)\n* Wes: [CSS Grid Course](https://CSSGrid.io)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'be6607b5dc066c546f1ca0346612a755686636d3da92b6c6c7a634dccabc90b6', 'snack-pack-css-frameworks-react-hoc-render-props-coding-designers-early-career-advice-and-a-sound-board', '/shows/030 - QA.md', '2023-10-16 20:06:54.219', '2023-10-27 15:57:42.211', 'TASTY'),
('syntax_podcast_show_00031', 31, 'Wes and Scott\'s Lives - Breakdancing, BBQ, Wives, Work/Life Balance, Problem Solving, YouTube Subscriptions', '2018-02-07 13:45:56.482', 'https://traffic.libsyn.com/syntax/Syntax031.mp3', '\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Show Notes\n\n\n0:00\n\n* Goofing Around\n\n1:30\n\n* Real show starts\n\n2:12\n\n* Scott explains his breakdancing hobby\n* \"Breaking\" is breakdancing\n* What is flavour?\n\n10:20\n\n* Wes talks about being into BBQ\n* [World\'s Longest Yard Sale](http://www.127yardsale.com/)\n* Wes has a large Big Green Egg and a MiniMax BGE\n\n19:00\n\n* Scott talks about how he is into making music\n* Domestic Robot\n* Scott is starting up a new project called \"Shift. Super.\"\n\n\n21:30\n\n* How do you find time for these hobbies?\n* Avoiding burnout\n* Work/Life Balance\n* Buy in from significant others\n\n28:00\n\n* Wes talks about working out and going on date nights with his wife\n* Hamilton is cool\n* Home Renos\n\n35:00\n\n* Doing a downtown job\n* Problem Solving\n\n40:00\n\n* Scott talks about his love for KungFu Movies\n* 5 Fingers of death\n* 5 Deadly Venoms\n* secret service of the imperial court\n* Boxer from shantung\n* 36th Chamber of Shaolin\n* Human Lanterns\n\n46:00\n\n* What kind of cars do we drive?\n\n55:00\n\n* What YouTube channels do you watch?\n\n* **Wes:**\n* [Jeannies Garage](https://www.youtube.com/channel/UCWMaOB-Wxb1pbayjkOZn2iA)\n* [It\'s Alive with Brad](https://www.youtube.com/playlist?list=PLKtIunYVkv_S7LqWqRuGw1oz-1zG3dIL4)\n* [Wranglestar](https://www.youtube.com/channel/UCMIjEnXruVHtvgSVf6TgfUg)\n* [Mattias Wandel Main Woodgears](https://www.youtube.com/user/Matthiaswandel)\n* [Mattias Wandel Secondary Channel](https://www.youtube.com/channel/UC3_AWXcf2K3l9ILVuQe-XwQ)\n* [Big Clive](https://www.youtube.com/user/bigclivedotcom)\n* [How it\'s Made](https://www.youtube.com/channel/UCELt4nocnWDEnYJmov4zqyA)\n* [Alex French Guy Cooking](https://www.youtube.com/user/FrenchGuyCooking)\n\n* **Scott:**\n* [RedLetterMedia](https://www.youtube.com/user/RedLetterMedia)\n* [stance](https://www.youtube.com/user/stanceelements)\n* [theneedledrop](https://www.youtube.com/user/theneedledrop)\n* [BroScienceLife](https://www.youtube.com/channel/UCduKuJToxWPizJ7I2E6n1kA)\n\n\n1:05:00\n\n* What are you working on Personally / Mentally?\n* [Habit Tracker](https://play.google.com/store/apps/details?id=org.isoron.uhabits&hl=en)\n* Doing a downtown job\n\n## Quuuuuiiiiiick SIIIIIIICK PICKS\n* Scott:\n  * [Dan Carlin\'s Hardcore History: Addendum](https://dchhaddendum.libsyn.com/)\n  * [Whatever You Think, Think the Opposite](http://amzn.to/2GybLbh)\n* Wes: [Tracy Osbourne\'s Hello Web Design](http://amzn.to/2Er7JDq)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a932afffc40112b6ace71596eb6bff9ea047bb9023efd39b87c5912ce8236ef4', 'wes-and-scott-s-lives-breakdancing-bbq-wives-work-life-balance-problem-solving-youtube-subscriptions', '/shows/031 - Personal.md', '2023-10-16 20:06:54.263', '2023-10-27 15:57:42.257', 'TASTY'),
('syntax_podcast_show_00032', 32, 'Designing, Templating, Inlining and Sending Email.', '2018-02-14 14:02:08.511', 'https://traffic.libsyn.com/syntax/Syntax032.mp3', '\nIn this show, Scott and Wes talk about about sending both transactional and marketing email. Everything from designing to templating to inlining the CSS to getting it sent. Enjoy!\n\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n## Xojo — Sponsor\n\nXojo is a cross-platform development tool for creating native apps for desktop, mobile, web and Raspberry Pi.\n\nWith Xojo you really can write just one version of your app, say, on the Mac, click a button, and have a completely native Windows version too.\n\nXojo lets you abstract yourself from specific platform details, so you can focus on what makes your app unique. All apps have completely native controls, even if they weren’t developed on that platform. Just use drag and drop to create your user interface, and one language to program the functionality.\n\nUsers also include Fortune 500 companies, citizen developers, professional developers, IT, hobbyists and students - anyone who wants to build apps faster.\n\nListeners of this show get 20% off with the coupon code SYNTAX over at [xojo.com/syntax](http://xojo.com/syntax)\n\n## Show Notes\n\n0:00\n\n* WELCOME!\n\n2:00\n\n* An update on GraphCool, Prisma and Yoga\n\n3:45\n\n##  Syntax Contest!\n\n* You can win a free course from either Scott or Wes by screenshotting yourself listening to the podcast and uploading to Twitter or Instagram.\n* We will pick 1 winner from Twitter and 1 winner from Instagram\n* Make sure to tag [@wesbos](https://twitter.com/wesbos) and [@stolinski](https://twitter.com/stolinski) on Twitter and [@wesbos](https://instagram.com/wesbos) and [@stolinski](https://instagram.com/stolinski) on Instagram\n* \\#TastyTreats\n\n5:40\n* Email ain\'t easy!\n\n\n6:20\n\n* How do Scott and Wes use email in their apps and businesses?\n* Transactional vs Marketing Email\n\n9:00\n\n* Dealing with multiple emails and modifier\n* Signing in with Facebook vs Email?!\n\n11:00\n\n* Transactional Email\n* The Process to creating single one-off email\n\n13:00\n\n* **Scott\'s Setup:**\n* [Handlebars](http://handlebarsjs.com/)\n* [Meteor Email Docs](https://docs.meteor.com/api/email.html)\n* [Mandrill](https://www.mandrill.com/)\n\n* **Wes\' Setup**\n* [Pug Templating](https://pugjs.org/api/getting-started.html) - _the artist formerly known as Jade_\n* [Juice CSS Inliner](https://www.npmjs.com/package/juice)\n* [Foundation for Emails](https://foundation.zurb.com/emails/email-templates.html)\n* [Inky](https://github.com/zurb/inky)\n* [NodeMailer](https://nodemailer.com/about/)\n* [Postmark](https://postmarkapp.com)\n\n\n20:00\n\n* Why does email get blocked?\n* [Amazon SES](https://aws.amazon.com/ses/)\n* [SendGrid](https://sendgrid.com/)\n* [MailGun](https://www.mailgun.com/)\n* [MJML](https://mjml.io/)\n* Email Reputation\n* [MailTrap](https://mailtrap.io/)\n* [MailHog](https://github.com/mailhog/MailHog)\n\n30:00\n\n* Designing Emails\n* CSS is very limited\n* [MJML React Email Templating](https://mjml.io/)\n* [Tony](https://twitter.com/TonyRanieri/status/963591591159099393) from Twitter also told me about [HEML](https://heml.io/)\n\n37:22\n\n* Debugging and Testing Emails\n* [Litmus](http://litmus.com/)\n* [Email on Acid](https://www.emailonacid.com/) is way cheaper\n\n\n45:00\n\n* Marketing Emails\n* [MailChimp](http://mailchimp.com/)\n* [Drip](https://getdrip.com)\n\n52:00\n\n* Host your own Platforms\n* [Sendy](https://sendy.co/)\n* [Email Octopus](https://emailoctopus.com/)\n* [Mautic](http://mautic.org/)\n* [MailTrain](https://github.com/Mailtrain-org/mailtrain)\n\n## Siiick Pixxxx\n* Scott: [Personal Capital](https://www.personalcapital.com/)\n* Wes: Nothing is Sick this week\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e8ef3c0121c2aae3bda177e7f5b49c1fc8e1b4bfce6232bf38b3a3a508235735', 'designing-templating-inlining-and-sending-email', '/shows/032 - Sending Email.md', '2023-10-16 20:06:54.305', '2023-10-27 15:57:42.296', 'TASTY'),
('syntax_podcast_show_00033', 33, 'Large Files - CDNs, Image Compression, Video Hosting, and Big Zips', '2018-02-21 14:10:48.753', 'https://traffic.libsyn.com/syntax/Syntax033.mp3', '\nScott and Wes talk about working with images, videos and big zips. How do you host them? Do you need a CDN? What about compression?!\n\n## Cloudinary\n\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to host, compress and transform your images on the web. Sign up for their free tier and get 10GB of bandwidth for free!\n\nAlso check out Cloudinary\'s [ImageCon](http://www.imagecon.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=ImageCon_Syntax_podcast) conference - use the code SYNTAX99 for a discount when checking out.\n\n## Xojo — Sponsor\n\nXojo is a cross-platform development tool for creating native apps for desktop, mobile, web and Raspberry Pi.\n\nWith Xojo you really can write just one version of your app, say, on the Mac, click a button, and have a completely native Windows version too.\n\nXojo lets you abstract yourself from specific platform details, so you can focus on what makes your app unique. All apps have completely native controls, even if they weren’t developed on that platform. Just use drag and drop to create your user interface, and one language to program the functionality.\n\nUsers also include Fortune 500 companies, citizen developers, professional developers, IT, hobbyists and students - anyone who wants to build apps faster.\n\nListeners of this show get 20% off with the coupon code SYNTAX over at [xojo.com/syntax](http://xojo.com/syntax)\n\n## Show Notes\n\n1:30\n\n* Chit-chatting about GraphQL Testing\n\n3:45\n\n* What is a CDN? Why do you need one?\n* How does the internet even work?\n\n7:00\n\n* Amazon S3 + Cloudfront\n* CacheFly\n* MaxCDN\n* Cloudflare\n\n11:30\n\n* Talking about Image Formats\n* [WebP](https://developers.google.com/speed/webp/)\n* [WebP CanIUse](https://caniuse.com/#search=webp)\n\n16:00\n\n* Losslesss VS Lossy\n* Stripping image meta data like EXIF\n* [Image Optim App](https://imageoptim.com/mac)\n* [ImageMin](https://github.com/imagemin/imagemin)\n* [Gulp ImageMin](https://www.npmjs.com/package/gulp-imagemin)\n* [ImageMin Webpack](https://github.com/Klathmon/imagemin-webpack-plugin)\n* [ImageMin Plugins on npm](https://www.npmjs.com/search?q=imagemin)\n\n\n26:00\n\n* How we use Cloudinary\n\n29:00\n\n* Hosting, Encoding and Compressing Videos\n* [Our Stacks Explained Syntax Podcast](https://syntax.fm/show/014/our-stacks-explained)\n* [Vimeo Pro](https://vimeo.com/professionals)\n* [YouTube DL](https://rg3.github.io/youtube-dl/)\n* [BrightCove](https://www.brightcove.com/en/)\n* [Wista](https://wistia.com/)\n* [Sprout Video](https://sproutvideo.com/)\n* [Cloudinary Video](https://cloudinary.com/documentation/video_management)\n\n41:00\n\n* What is Cloudflare?\n* [Cloudflare Video is coming](https://blog.cloudflare.com/introducing-cloudflare-stream/)\n\n46:30\n\n* [Web Torrent](https://webtorrent.io/)\n* [Apparently Spotify doesn\'t use P2P any longer](https://techcrunch.com/2014/04/17/spotify-removes-peer-to-peer-technology-from-its-desktop-client/)\n\n\n50:00\n\n* Big Zips!\n* How do we host large video downloads?\n* Amazon S3 + Cloudfront\n* [Handbrake](https://handbrake.fr/)\n* [Backblaze B2](https://www.backblaze.com/b2/cloud-storage.html)\n\n55:00\n\n* Video Formats\n\n59:00\n\n* [SVGO](https://github.com/svg/svgo)\n* [SVGOMG](https://jakearchibald.github.io/svgomg/)\n\n\n## Siiick Pixxxx\n* Wes: [Node Inspector Manager](https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj?hl=en)\n* Scott: [iShowUInstant](https://shinywhitebox.com/ishowu-instant)\n\n## Shameless Plugz\n* [Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](http://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cdeae85628f6537829c3d337a1cd630f5ac702eceda6bfc57f955b64d7bf456c', 'large-files-cdns-image-compression-video-hosting-and-big-zips', '/shows/033 - Images, Videos and Big Zips.md', '2023-10-16 20:06:54.350', '2023-10-27 15:57:42.339', 'TASTY'),
('syntax_podcast_show_00034', 34, 'Why Static Site Generators are Awesome', '2018-02-28 02:46:38.881', 'https://traffic.libsyn.com/syntax/Syntax034.mp3', '\nWes and Scott talk all about Static Site Generators!\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\nThey are also hiring! [netlify.com/careers](https://netlify.com/careers)\n\n\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n\n## Show Notes\n\n1:00\n\n* Woah Scott\'s Audio!\n\n4:00\n\n* #TastyTreats Winners\n\n8:00\n\n* What are static site generators?\n\n10:00\n\n* Benefits of Static Site Generators\n* [Gatsby](https://www.gatsbyjs.org/)\n* [StaticGen.com](https://www.staticgen.com/)\n* [Jekyll](https://www.staticgen.com/jekyll)\n* [Hugo](https://www.staticgen.com/hugo)\n* [Hexo](https://www.staticgen.com/hexo)\n\n24:00\n\n* More complicated apps as static sites\n* [Next.js Static Export](https://github.com/zeit/next.js#static-html-export)\n* [Nuxt.js](https://nuxtjs.org/)\n\n34:00\n\n* Limitations of a static site\n* What happens when you need something on the server?\n* [Snipcart for Ecommerce](https://snipcart.com/syntax)\n* [Algolia](https://www.algolia.com/)\n* [Awestruct](http://awestruct.org/)\n* Hot Hot Reloading\n\n41:00\n\n* Using with a Headless CMS\n* Reloading The Pages\n\n48:00\n\n* WHAT WHAT Scott is Canadian?!\n\n50:00\n\n* Where can you host a Static Site?\n* Literally Anywhere\n* [Github Pages](https://pages.github.com/)\n* [Netlify](https://netlify.com/syntax)\n* [rsync](https://en.wikipedia.org/wiki/Rsync)\n* [WPGraphQL](https://github.com/wp-graphql/wp-graphql)\n\n\n## Siiiiiiiick Pixxxx\n* Scott: [JSRefactor](https://marketplace.visualstudio.com/items?itemName=cmstead.jsrefactor)\n* Wes: [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)\n\n\n## Shameless Plugz\n* [Level Up Pro](https://LevelUpTutorials.com/pro)\n* [ES6 For Everyone](https://ES6.io)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cd9eee86edbf2f2242e572e044eba315b288ed64f9078f6462827e899a69d6f9', 'why-static-site-generators-are-awesome', '/shows/034 - Static Site Generators.md', '2023-10-16 20:06:54.402', '2023-10-27 15:57:42.382', 'TASTY'),
('syntax_podcast_show_00035', 35, 'Keeping Up with the Codeashians. Dealing with our fast paced industry.', '2018-03-07 14:12:36.331', 'https://traffic.libsyn.com/syntax/Syntax035.mp3', '\nScott and Wes talk about how to deal with being overwhelmed with our fast paced industry. How do you keep you and your team\'s skills up to date?\n\nWes\' Note: Scott came up with the title for this one. I know.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\nThey are also hiring! [netlify.com/careers](https://netlify.com/careers)\n\n\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n\n## Show Notes\n\n1:00\n\n* WELCOME\n* Scott is 32! Happy Birthday\n* Wes Relaunched his [React for Beginners](https://reactforbeginners.com/) course!\n\n\n4:00\n\n* That feeling\n* Being okay with not knowing everything\n\n\n9:00\n\n* How to wait it out\n* When you should jump into a library\n* 1.0 of libraries\n* Dogfooding\n\n13:00\n\n* Just In Time learning\n* Doubling down on the fundamentals\n\n21:00\n\n* What is JAM Stack?\n\n22:00\n\n* Why do you need to stay up to date?\n* Moving or Losing Jobs\n* Comfy Chairs\n\n25:00\n\n* Hipster Web Developers\n\n27:00\n\n* Someone think of the customers!\n* Technical Debt\n* Falling in love with web development again\n* Constantly challenging yourself\n\n\n30:00\n\n* Complacency in Web Devleopment\n* Motivating Comfortable Web Developers\n* You have to stay up to date\n\n32:00\n\n* Working on the weekends\n* Real Talk: part of your job is staying up to date\n* How to find time to learn on the clock\n\n36:00\n\n* Adding new tech to projects as a way to learn\n\n39:00\n\n* What if your senior developer is holding back progress?\n* How to convince your team or boss that you aren\'t just a hipster and this new tech is worth it\n* Show them the why!\n\n47:00\n\n* Okay, I want to stay up to date. How?\n* Strong handle on fundamentals\n* [Twitter](https://twitter.com/wesbos)\n* [Twitter](https://twitter.com/wesbos)\n* [WebDev Reddit](https://www.reddit.com/r/webdev/)\n* [NodeJS is Cancer](https://www.semitwist.com/mirror/node-js-is-cancer.html)\n* [Kitze\'s LOL Tweet](https://twitter.com/thekitze/status/966347713934774272)\n* [JavaScript Weekly](http://javascriptweekly.com/)\n* Lunch and Learns\n* Meetups\n\n\n## Siiiiiiiick Pixxxx\n* Scott: [Never Split The Difference](http://amzn.to/2tku2GC)\n* Wes: [Containers Podcast](https://medium.com/containers)\n\n\n## Shameless Plugz\n* Scott: [Pro Gatsby](https://LevelUpTutorials.com/store)\n* Wes: [React For Beginners](https://reactforbeginners.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '03917d6c69f9d8d53263f621b4dcdcab9784b06d4df724be88bd4ffafffc3401', 'keeping-up-with-the-codeashians-dealing-with-our-fast-paced-industry', '/shows/035 - Keeping Up.md', '2023-10-16 20:06:54.449', '2023-10-27 15:57:42.429', 'TASTY'),
('syntax_podcast_show_00036', 36, 'Hasty Treat — Freelancing Hot Tips 🔥', '2018-03-09 17:09:50.261', 'https://traffic.libsyn.com/syntax/Syntax036.mp3', '\nIn this Hasty Treat (Short episode) we answer your questions about Freelancing - how to charge more, building a portfolio, finding clients and our thoughts on using pre-made WordPress themes.\n\n## Sign up for the Value Pricing Bootcamp - Sponsor\n\nGet Jonathan Stark\'s free 6 day email course on value based pricing for freelancers over at [valuepricingbootcamp.com](http://valuepricingbootcamp.com).\n\nJonathan Stark is the author of [Hourly Billing is Nuts](https://expensiveproblem.com/hbin) and has worked with companies such as Staples, Time and T-Mobile. These days he routinely commands an effective hourly rate of $2000+ per hour, so I\'d say you should check his course out.\n\n## Show Notes\n\n1:00\n\n* [Our first episode on Freelancing - how to slam dunk freelancing](https://syntax.fm/show/005/how-to-slam-dunk-freelancing)\n\n\n4:00\n\n* **Q:** Ideas on building a portfolio and landing those first customers\n* Your portfolio doesn\'t really matter as a web developer\n* Your reputation and referrals is key\n* Reputation in the community is important\n* Put yourself out there!\n* You have to tell people what you do\n* You have to ask people if they need work\n* Good communication is key\n\n8:00\n\n* **Q:** What are some strategies for budging and quoting?\n* Understanding what a website is worth to a client\n* Talking to your client ablut pricing\n* Asking how much they have available to spend\n* Chunking the project into multiple bits so they can build on it\n\n\n14:00\n\n* **Q:** How do you tell your existing clients that you need to charge more?\n* Clean Scope / Scope Creep\n* Quote in Features and pieces, not entire projects\n* Fixed Pricing\n* Becoming a better/faster developer\n* Getting more expensive as you move\n* Don\'t charge hourly\n* Taking big Ls\n\n18:30\n\n* **Q:** What is your opinion on value based pricing?\n* We\'re huge proponents\n* Clients don\'t like hourly billing\n* The client should know what you are paying and what you are getting\n\n22:00\n\n* **Q:** When is it okay to use WordPress and pre-made themes? Is that cheating?\n* The beauty of open source\n* The business Wes answer\n* The developer Wes answer\n* Building your own starter files\n* Undoing other developer\'s work\n\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8959a0d737d97a51f2b71660b78849c9782c6727b283b3268541451a86fd639f', 'hasty-treat-freelancing-hot-tips', '/shows/036 - Freelancing Hot Tips.md', '2023-10-16 20:06:54.490', '2023-10-27 15:57:42.466', 'SUPPER'),
('syntax_podcast_show_00037', 37, 'Recording Screencasts - Hardware, Software, Dos and Don\'ts', '2018-03-14 16:48:00.243', 'https://traffic.libsyn.com/syntax/Syntax037.mp3', '\nIn this episode, Scott and Wes everything about their recording — from gear to software to tips and tricks for creating a good screencast.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\nThey are also hiring! [netlify.com/careers](https://netlify.com/careers)\n\n\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n\n## Show Notes\n\n2:00\n\n* **Scott\'s Hardware:**\n* [EV RE20](http://amzn.to/2FGHSF0)\n* [DBX 286s Preamp](http://amzn.to/2pbz4kh)\n* [K&M 23850 Microphone Desk Arm](http://amzn.to/2GqpykA)\n* [Shure KSM32](http://amzn.to/2Hy0xTY)\n* [Blue Snowball](http://amzn.to/2paEbB5)\n* [Bluebird](http://amzn.to/2pbo9XW)\n* [Scarlet 2i2](http://amzn.to/2pi2o8b)\n\n4:00\n\n* We talk about Different types of microphones\n\n* **Wes\' Hardware:**\n* [Heil PR40](http://www.amazon.com/gp/product/B000SOYOTQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B000SOYOTQ&linkCode=as2&tag=webo080-20&linkId=YH6ZR6GSGBI2JOJF)\n* [Heil PL2T Boom Arm](http://www.amazon.com/gp/product/B000SZVZ74/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B000SZVZ74&linkCode=as2&tag=webo080-20&linkId=HJ6K3KRLOL5XJJSC)\n* [Audio Technica AT2020](http://www.amazon.com/gp/product/B0006H92QK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B0006H92QK&linkCode=as2&tag=webo080-20&linkId=PHY64E6Y43GHI55T)\n* [Heil Flush Desk Mount](http://amzn.to/2pb4xD3)\n* [Scarlet 2i2](http://amzn.to/2pi2o8b)\n* [DBX 286s Preamp](http://amzn.to/2pbz4kh)\n* [EQ351 Equalizer](http://amzn.to/2paGSmb)\n* [BSW Pop filter for Heil PR40](https://www.bswusa.com/Pop-Filters-BSW-RE27POP-P1419.aspx)\n* [Heil Shock Mount](http://amzn.to/2HygCsJ)\n\n\n14:30\n\n* What are the essentials for hardware?\n* Put a t-shirt under your keyboard\n\n16:00\n\n* Once you get to record, what do we use?\n* [Divvy](http://mizage.com/divvy/)\n* [IShowU Instant](https://shinywhitebox.com/ishowu-instant)\n* [Screenflow](https://www.telestream.net/screenflow/overview.htm)\n* [Uberlayer](https://itunes.apple.com/ca/app/uberlayer/id510139938?mt=12)\n* [Loopback](https://rogueamoeba.com/loopback/)\n\n\n32:00\n\n* Making Mistakes\n* Leaving in goof ups and debugging\n\n40:00\n\n* Bad screen recordings\n* What is boring? What is annoying?\n* Recording pet peves\n* Tips for sizing your editor\n* Gross sounds\n* Too many files\n\n50:00\n\n* What makes a good recording?\n* Good contrast on colour scheme\n* Keeping the code open\n* Short recordings\n\n## SIIIIICKkkkkkkkk PIXXXXX\n\n* Wes: [CD Player Magnet Phone Holder](http://amzn.to/2FIRdMs)\n* Scott: [OxyLED Motion Sensor Lights](http://amzn.to/2FTzENi)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '73f66eefdc9e81f8a1ceb1977ff49cb6216f91e67198e5b96cb8e83c2ebd275d', 'recording-screencasts-hardware-software-dos-and-don-ts', '/shows/037 - Recording Setups.md', '2023-10-16 20:06:54.538', '2023-10-27 15:57:42.511', 'TASTY'),
('syntax_podcast_show_00038', 38, '20 Easy Win Performance Tips', '2018-03-21 13:53:36.110', 'https://traffic.libsyn.com/syntax/Syntax038.mp3', '\nIn this episode, Scott and Wes chat about 20 different ways you can improve the perf, speed and overall user experience of your websites.\n\n\n## Cloudinary - Sponsor\n\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to host, compress and transform your images on the web. Sign up for their free tier and get 10GB of bandwidth for free!\n\nAlso check out Cloudinary\'s [ImageCon](http://www.imagecon.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=ImageCon_Syntax_podcast) conference - use the code SYNTAX99 for a discount when checking out.\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n\n## Show Notes\n\nSo many perf tips came in over twitter, so in addition to this podcast I\'d recommend you read all the replies to [this tweet](https://twitter.com/wesbos/status/976082854848450560)\n\n0:00\n\n* We just cracked 1,000,000 downloads! Thank you!\n\n4:00\n\n* Network Tips\n* Reducing the amount of HTTP requests\n* A little bit about HTTP2\n* An interview about [http2](https://www.youtube.com/watch?v=w--PU4HO9SM)\n\n\n8:00\n\n* Use Caching and LocalStorage\n* Turn on aggressive caching on your server - long expire times\n* What is gzip? / Enabling gzip\n\n\n12:00\n\n* Using a CDN\n* Listen to our episode on [CDNs and #BigZips](https://syntax.fm/show/033/large-files-cdns-image-compression-video-hosting-and-big-zips)\n\n\n13:00\n\n* When to load your JS\n* Blocking Requests\n\n15:00\n\n* Use Lazy Loading\n\n17:00\n\n* Preloading content with Link rel=\"preload\"\n* rel=\"prefetch\"\n\n19:00\n\n* Picture, picturefill and srcset=\"\"\n* Article on [srcset and Picture](https://www.smashingmagazine.com/2014/05/responsive-images-done-right-guide-picture-srcset/)\n* srcset vs picture/source elements\n\n25:00\n\n* Image Compression\n* One less jpg\n* Serve less data\n\n26:00\n\n* Inline SVG\n* Talk about Font Awesome\n\n33:00\n\n* CSS and JS Code\n* [Critical CSS](https://github.com/addyosmani/critical)\n\n\n37:00\n\n* Remove unused code\n* [Purify CSS](https://github.com/purifycss/purifycss)\n* no-unused-imports with ESlint\n\n\n38:00\n\n* Code Splitting\n\n40:00\n\n* Transpile less\n* babel-preset-env\n\n\n41:00\n\n* Tree shaking\n* [Hoyyyy its a tree shaker](https://www.youtube.com/watch?v=ajACU-lsnFc)\n\n42:00\n\n* Async and defer attributes on your script tags\n* [Amazing site that visualizes async and defer](http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html)\n\n\n45:00\n* Icon Fonts\n* Web Fonts\n* Native Font Stack:\n* Good: `font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;`\n\n47:00\n\n* [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display)\n\n\n49:00\n\n* Troubleshooting Performance\n* Simulate Slow Network Speed\n* [Google Page Speed](https://developers.google.com/speed/pagespeed/insights/)\n* [Wes\' Page Speed Video](http://wesbos.com/wordpress-page-speed/)\n\n\n## SIIIIICKkkkkkkkk PIXXXXX\n\n* Scott: [WiFi Surge Protector](http://amzn.to/2FVcD9n)\n* Wes: [KitSound Bluetooth Airline Converter](http://amzn.to/2DKvtxV)\n\n## Shameless Plugs\n\n* [Scott is working on a Vue course! ](https://LevelUpTutorials.com/pro)\n* Wes is working on his Advanced React course!\n\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cd811725761abb1d985009eb9878fae68167aac1bf1cc8b39d5a65b2410cc3dd', '20-easy-win-performance-tips', '/shows/038 - 20 Performance Tips.md', '2023-10-16 20:06:54.596', '2023-10-27 15:57:42.556', 'TASTY'),
('syntax_podcast_show_00039', 39, 'Is jQuery Dead?', '2018-03-28 12:23:40.413', 'https://traffic.libsyn.com/syntax/Syntax039.mp3', '\nWes and Scott dive into jQuery. Is it dead? Should you still use it? Why not? What are some alternatives?\n\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax)\n\n\n## Freshbooks - Sponsor\n\nIf you are a small business or freelancer check out [Freshbooks.com Cloud Accounting](https://freshbooks.com/syntax) and get 30 days free. Make sure to enter SYNTAX into the \"How did you hear about us\" section.\n\n\n## Show Notes\n\n03:00\n\n* A stroll down jQuery Memory Lane\n* What was the first jQuery plugin you wrote?\n* jQuery Conference\n* jQuery IRC room\n* [Ben Alman](http://benalman.com/)\n\n9:00\n\n* [jQuery UI](https://jqueryui.com/)\n* [jQuery Mobile](https://jquerymobile.com/)\n* [Sencha Touch](https://www.sencha.com/products/touch/)\n* nvr 4get where u come from\n\n13:00\n\n* So, why is jQuery going away?\n\n16:00\n\n* The Selector API\n* Sizzle\n* [Bling.js](https://github.com/wesbos/Learn-Node/blob/master/starter-files/public/javascripts/modules/bling.js)\n* [querySelectorAll Docs](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll)\n\n21:00\n\n* Working with Ajax\n* [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n* [Axios](https://github.com/axios/axios)\n\n27:00\n\n* Dom Traversal\n* [Element.matches()](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n* [You don\'t need jQuery](https://github.com/nefe/You-Dont-Need-jQuery)\n\n30:00\n* Data / Utility Functions\n* [Lodash](https://lodash.com/)\n* Just use Map/Reduce/Filter\n* Data Massaging 💆🏻‍\n\n\n34:00\n\n* Cross Browser Compatability\n* [Polyfill.io](https://Polyfill.io)\n\n37:00\n\n* Event Listeners\n* Event Delegation\n* Listening for events on multiple elements\n\n\n47:00\n\n* Final Thoughts on jQuery\n* [JavaScript30](https://JavaScript30.com)\n* [The JS Foundation](https://js.foundation/)\n\n\n\n## Seeeaaaaacccckkkk PIX\n\n* Scott: [MJML Desktop App](https://mjmlio.github.io/mjml-app/)\n* Wes: [HyperSelect LED Utility Light](https://amzn.to/2J1tjOy)\n\n## Shameless Plugs\n\n* [Vue.js for Everyone](https://LevelUpTutorials.com/store)\n* [All of Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '1c0d1e0bff47dc250c95182c092efa1146184f030318de98e80e170d8b96887f', 'is-jquery-dead', '/shows/039 - Is jQuery Dead.md', '2023-10-16 20:06:54.642', '2023-10-27 15:57:42.596', 'TASTY'),
('syntax_podcast_show_00040', 40, 'The Testing Show', '2018-04-04 13:10:33.583', 'https://traffic.libsyn.com/syntax/Syntax040.mp3', '\nWes and Scott talk all about testing!\n\n## SnapShooter - Sponsor\n\n[SnapShooter](https://snapshooter.io/) is a Digital Ocean backup service. You get fine grain control over when you backup and how long you backup for. Easily restore from previous snapshots.\n\nUse the code [**SYNTAX**](https://snapshooter.io/) to get 20% off your first 12 months.\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n\n## Show Notes\n\n3:00\n\n* Testing Talk\n* Is testing scary?\n\n\n8:00\n\n* Unit Testing\n* Pure Functions\n* Mutations\n* Pass in dates to functions\n\n11:40\n\n* Integration Testing\n* [Integration Testing Mémé](https://i.imgur.com/gAQVZ65.gif)\n\n14:00\n\n* Visual Regression Testing\n\n17:00\n\n* End to End Testing\n\n21:00\n\n* Why would you want to test?\n* Confidence\n* Easy Refactoring\n* Finding edge cases\n\n33:00\n\n* Test Runners vs Assertion Libraries\n* [Jest](https://facebook.github.io/jest/)\n* [Mocha](https://mochajs.org/)\n* [Cucumber](https://cucumber.io/)\n* BBD (Big Black Dog)\n* BDD (Behaviour Driven Development)\n* [Cypress.io](https://www.cypress.io/)\n* [Enzyme](https://github.com/airbnb/enzyme)\n* [React Testing Library](https://github.com/kentcdodds/react-testing-library)\n\n50:00\n\n* Mocking\n* Spy Functions\n\n54:00\n\n* Snapshot Testing\n* [Jest Snapshot Testing](https://facebook.github.io/jest/docs/en/snapshot-testing.html)\n\n57:00\n\n* TDD (Test Driven Development)\n* BDD (Behaviour Driven Development)\n* Continuous Integration\n* [Travis CI](https://travis-ci.org/)\n\n\n## Shameless Plugs\n\n* [Vue.js for Everyone](https://LevelUpTutorials.com/store)\n* [SMASH that Subscribe Button on Wes\' YouTube](https://www.youtube.com/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e04d76c45b7988bda85f0b8a865431d30bb67d7bbdf7f8e1b6da88a22114a93c', 'the-testing-show', '/shows/040 - Testing.md', '2023-10-16 20:06:54.676', '2023-10-27 15:57:42.639', 'TASTY'),
('syntax_podcast_show_00041', 41, 'Preventing and Dealing with Burnout in Web Development', '2018-04-11 13:19:36.374', 'https://traffic.libsyn.com/syntax/Syntax041.mp3', '\nScott and Wes Chat about burnout!\n\n\n## Freshbooks - Sponsor\n\nThis is episode Wes mentions the free book [Breaking The Time Barrier](https://www.freshbooks.com/ebooks/breaking-the-time-barrier). Get a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax).\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n\n## Show Notes\n\n01:50\n\n* What is burnout?\n* Losing Enthusiasm for web development\n* That Hustle\n\n7:00\n\n* Why is being burnt out bad?\n* Putting off hobbies\n\n12:30\n\n* How do you prevent burnout?\n* Farming out Work\n* Automating content\n* Busy work\n\n18:00\n\n* Aggressively turn down meetings\n* Work to cut out busy work\n* [Locus of Control](https://en.wikipedia.org/wiki/Locus_of_control)\n* Managing Email and Notifications\n* Scrubbing Plates\n\n\n24:00\n\n* Health and Nutrition\n* Sleep\n\n27:00\n\n* Motivation\n* What to do when you just don\'t like the work you are working on\n* Small Wins\n* Learning new Things\n* Getting a new job\n* Taking Courses\n* [Keeping Up With The Codeashians](https://syntax.fm/show/035/keeping-up-with-the-codeashians-dealing-with-our-fast-paced-industry)\n\n37:00\n\n* Being overworked at work\n* Overtime\n\n\n41:00\n\n* So you\'ve burnt out, what do you do?\n* How do you reignite the spark?\n* Taking a day off\n* Delegating GitHub\n* Online chat with other developers\n\n## ×SICK×PICKS×\n\n* Wes: \n  * [Dewalt 20v Drill Set](https://amzn.to/2GPYlLL)\n  * [Dewalt 20v Cordless Wet/Dry Vac](https://amzn.to/2qoZE9f)\n* Scott: [MERU](https://www.imdb.com/title/tt2545428/)\n\n## Shameless Plugs\n\n* [Vue.js for Everyone](https://LevelUpTutorials.com/store)\n* [SMASH that Subscribe Button on Wes\' YouTube](https://www.youtube.com/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '18bdb14275d8b5730549d3f877a74f1ab4259010ff5f296b1562e978f2480b22', 'preventing-and-dealing-with-burnout-in-web-development', '/shows/041 - BURNOUT.md', '2023-10-16 20:06:54.711', '2023-10-27 15:57:42.682', 'TASTY'),
('syntax_podcast_show_00042', 42, 'Potluck EP × Vue.js × Headless WP × Typescript & Flow × Productivity × Server Side Rendering × Yeoman', '2018-04-18 13:26:11.080', 'https://traffic.libsyn.com/syntax/Syntax042.mp3', '\nIt\'s a Potluck episode - you bring the questions and we turn them into tasty treats.\n\n## DeployHQ - Sponsor\n\nDeployHQ is the easiest way to deploy websites to your servers. Invite your team and set up automated deployment processes to:\n\n* Compile a production build of your assets\n* Deploy securely to servers behind VPNs and firewalls\n* Execute SSH commands\n* Manage and upload your config files\n* Preview and schedule deployments\n* Track and monitor your deployments in real-time\n\nDeploy to multiple servers at the same time, whether that be your own server via FTP/SSH, or an Amazon S3 bucket. You can even start deployments automatically whenever you push!\n\nInstant setup for repositories hosted on GitHub, Bitbucket, GitLab and Codebase, plus realtime notifications in your favourite chat services like Slack or HipChat.\n\nTo get 50% off your first 6 months, head on over to [deployhq.com/syntax](https://www.deployhq.com/syntax). The first 25 listeners to deploy successfully will receive a FREE branded mug or t-shirt!\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n\n# [Submit Your Questions Here](https://docs.google.com/forms/d/e/1FAIpQLSfQlAo1wXHiJMySdU-h8QMtfoz92aMS9eycEHXB6eRCLh8KHA/viewform)\n\n## Show Notes\n\n02:44\n\n* What are your thoughts on Vue.js?\n* [VuePress](https://vuepress.vuejs.org/)\n* [Nuxt](https://nuxtjs.org/)\n\n6:20\n\n* What are your thoughts on Typescript and Flow?\n* [Typescript](https://www.typescriptlang.org/)\n* [Flow](https://flow.org/)\n\n10:45\n\n* What was your biggest breakthrough in Programming?\n* [Nude.js](https://github.com/pa7/nude.js/)\n\n\n20:00\n\n* Any tips, tools and tricks to avoid procrastination\n* [The productivity episode](https://syntax.fm/show/011/our-favourite-productivity-hacks)\n* Sort by anxiety\n* [Eat That Frog](https://amzn.to/2HajbS0)\n* [Todoist](https://en.todoist.com/)\n\n25:00\n\n* Thoughts on CMSes? Headless? Database Driven? Static Site Generator?\n* Headless WordPress\n* Gatsby\n\n34:00\n\n* How can I start creating and selling courses?\n\n\n40:00\n\n* How did you two become renown in the developer community?\n* We don\'t think we\'re renown :)\n* YouTube Ad Revenue is poor\n\n46:00\n\n* Server Side Rendering with JavaScript Apps\n\n53:00\n\n* Is Yeoman still a thing?\n\n## ×SICK×PICKS×\n\n* Scott: [Eat That Frog](https://amzn.to/2HajbS0)\n* Wes: [DevDocs.io PWA](https://devdocs.io)\n\n## Shameless Plugs\n\n* [Vue.js for Everyone](https://LevelUpTutorials.com/store)\n* [Wes\' Course](https://wesbos.com/courses)\n* [SMASH that Subscribe Button on Wes\' YouTube](https://www.youtube.com/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5094e24d0a1b144715ff4b7e519a1118ef9b972d46d94c8557bf24f9d87d4168', 'potluck-ep-vue-js-headless-wp-typescript-and-flow-productivity-server-side-rendering-yeoman', '/shows/042 - potluck.md', '2023-10-16 20:06:54.751', '2023-10-27 15:57:42.730', 'TASTY'),
('syntax_podcast_show_00043', 43, '20 JavaScript Array and Object Methods to make you a better developer', '2018-04-25 11:08:31.142', 'https://traffic.libsyn.com/syntax/Syntax043.mp3', '\nWes and Scott rattle through ~20 different Object and Array Methods that will make you a better JavaScript developer.\n\n## Freshbooks - Sponsor\n\nThis is episode Wes mentions the free book [Breaking The Time Barrier](https://www.freshbooks.com/ebooks/breaking-the-time-barrier). Get a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax).\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\nThey are also hiring! [netlify.com/careers](https://netlify.com/careers)\n\n\n## Show Notes\n\nFor the docs for all these, just google `mdn` and the method you are looking for 😃\n\n3:00\n\n* Why are these great?\n* They are chainable\n* Immutable\n\n5:30\n\n* .filter()\n* Truthy or Falsy\n\n8:00\n\n* .map()\n\n10:00\n\n* .reduce() - returns any shape! filter, create a new shape, add up numbers...\n\n14:30\n\n* .forEach()\n* Side effects\n\n16:00\n\n* .some()\n* can be used as a short circuit forEach\n\n25:00\n\n* .every()\n* .includes() (why not contains?)\n\n26:00\n\n* Array.from()\n* Array.from() takes a secondary map arg\n* Array.of()\n\n29:00\n\n* Object.values()\n* Object.keys()\n* Object.entries()\n\n32:00\n\n* Array spread - converts iterable to array\n* Array spread - Concats arrays\n* Array Spread + Slice. Don\'t splice - remove an item from an array.\n\n34:00\n\n* Object Spread\n\n37:00\n\n* Function Rest\n\n39:00\n\n* Object.freeze()\n\n40:00\n\n* Object.seal()\n\n41:00\n\n* Object.assign() - no longer needed because you can object spread\n* [Reference vs Copy in JavaScript](https://www.youtube.com/watch?v=YnfwDQ5XYF4)\n\n## ×SICK×PICKS×\n\n* Scott: [Tea Haus](https://theteahaus.com/)\n* Wes:\n  * [SOG Folding Knife](https://amzn.to/2qZHrzk)\n  * [Sharpening Stone](https://amzn.to/2HGNeob)\n\n## Shameless Plugs\n\n* [Vue.js for Everyone](https://LevelUpTutorials.com/store)\n* [Wes\' Course](https://wesbos.com/courses)\n* [SMASH that Subscribe Button on Wes\' YouTube](https://www.youtube.com/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '46fa4e8a1a328f57e05f3cb4930a7fd3842f4b2e3fe1443f1c00d548fa12e09a', '20-javascript-array-and-object-methods-to-make-you-a-better-developer', '/shows/043 - Method Madness.md', '2023-10-16 20:06:54.789', '2023-10-27 15:57:42.769', 'TASTY'),
('syntax_podcast_show_00044', 44, 'How to Learn New Things Quickly', '2018-05-02 13:06:35.740', 'https://traffic.libsyn.com/syntax/Syntax044.mp3', '\nScott and Wes talk about how they learn new things quickly. Scott also tells a crazy story about his weekend.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\nThey are also hiring! [netlify.com/careers](https://netlify.com/careers)\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n\n## Show Notes\n\n2:00\n\n* Scott recounts his crazy story about getting Lymphangitis\n\n8:30\n\n* Know your learning type\n* videos, blogs, docs, source\n* no right or wrong way\n\n15:00\n\n* Foundational Skills\n\n23:00\n\n* Narrow your focus\n* Should you learn Redux with React?\n* blurring skills hurts future progress\n* don\'t learn too many things at once\n\n26:00\n\n* Get excited\n* try to reclaim your initial excitement\n* flow happens when you are excited\n* pick projects around hobbies\n* Star wars sucks\n\n33:00\n\n* Grind Time\n* write code first ask questions later\n* break shit\n* Submit to yourself that you are going to build this 3-4 times\n* iteration driven development\n* quality from quantity\n* use smarter people\n* snippet libs\n* style guides\n\n40:00\n\n* Immersion\n* follow every kind of media you can\n* put things on in the background\n* permeate into your brain\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Wes:\n  * [Crushing It Book](https://amzn.to/2FC4PIv)\n  * [Crushing It AudioBook](https://amzn.to/2JL8ZQQ)\n* Scott: [Popmotion Pose](https://popmotion.io/pose/)\n\n\n## Shameless Plugs\n\n* [Wes\' JavaScript30 Course](https://javascript30.com/)\n* [Scott\'s Headless WordPress course](https://LevelUpTutorials.com/store)\n\n\n1:00:00\n\n* Scott comes out of nowhere with a story about TEA!\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a462dfb6c8353ffe1f64330fb5f8e99184e2259bc749a3eb05986f90fb20e07f', 'how-to-learn-new-things-quickly', '/shows/044 - Learning.md', '2023-10-16 20:06:54.824', '2023-10-27 15:57:42.820', 'TASTY'),
('syntax_podcast_show_00045', 45, 'Potluck EP × Is Redux Dead × Learning Quickly × Developing Solo × Specialist vs Generalist × Funnest Projects × Wes’ BBQ Course', '2018-05-09 13:00:00.364', 'https://traffic.libsyn.com/syntax/Syntax045.mp3', '\nIt\'s a Potluck episode - you bring the questions and we turn them into tasty treats.\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:42\n\n* What is an efficient way to process huge data, greater than 740 MB when not working in JS?\n\n6:45\n\n* What’s new and shiny thing in web development do you think is going to go the distance?\n* [GraphQL](https://www.apollographql.com)\n* [Prisma](https://www.prisma.io/)\n* [GraphCool](https://www.graph.cool/)\n* [GraphQL Playground](https://github.com/graphcool/graphql-playground)\n\n11:09\n\n* Wes, can you make a course on how to barbecue meat properly?\n\n12:31\n\n* How do you go about learning a new language or framework?\n* [Ep 44 - How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n\n12:54\n\n* What are the best things to keep in mind when you are the only developer on a team?\n\n18:07\n\n* Is Redux for React dead with the new context API?\n* [Redux](https://redux.js.org/)\n\n21:41\n\n* What’s the funnest project you have ever worked on and why?\n* [LevelUpTuts](https://leveluptutorials.com)\n\n27:19\n\n* What’s the best use case for JWT?\n* [JWT](https://jwt.io/)\n\n29:50\n\n* Should I focus on one thing and try to master one technology instead of being a jack of all trades?\n\n35:00\n\n* Why do thousands of entrepreneurs build SaaS products on Ruby on Rails?\n* [Laravel](https://laravel.com/)\n* [Laravel Spark](https://spark.laravel.com/)\n* [CodeIgniter](https://codeigniter.com/)\n* [Meteor](https://www.meteor.com/)\n* [Hackathon Starter](https://hackathon-starter-2018.herokuapp.com/)\n\n39:41\n\n* Would you use single page application vs SSR for large reactor view apps?\n* [SSR](https://www.npmjs.com/package/react-ssr)\n* [Next.js](https://nextjs.org/)\n\n41:06\n\n* What do you use for online learning platforms?\n* [Ep 14 - Our Stacks Explained](https://syntax.fm/show/014/our-stacks-explained)\n* [Teachable](https://teachable.com/)\n* [Moodle](https://moodle.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Wes:[Parcel](https://parcelapp.net/)\n* Scott:[Nebo](https://www.myscript.com/nebo/)\n\n## Shameless Plugs\n\n* [Scott\'s Headless WordPress course](https://LevelUpTutorials.com/store)\n* [Wes\' Instgam](https://instagram.com/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '258599c0a6e93db0cff8e3b33bf78be585a2a7b4a054086f341e0262fa9a9d8a', 'potluck-ep-is-redux-dead-learning-quickly-developing-solo-specialist-vs-generalist-funnest-projects-wes-bbq-course', '/shows/045 - potluck.md', '2023-10-16 20:06:54.858', '2023-10-27 15:57:42.867', 'TASTY'),
('syntax_podcast_show_00046', 46, 'What\'s New in Javascript', '2018-05-16 13:00:00.202', 'https://traffic.libsyn.com/syntax/Syntax046.mp3', '\nScott and West talk about what’s new in JavaScript.\n\n## Fluent Conf - Sponsor\n\nDevelopers, software engineers, designers, and web performance professionals flock to Fluent in pursuit of a common goal: building a better web. That means delivering fast, secure, accessible experiences to users and customers.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) covers a broad range of technologies and topics to provide web programming professionals with the skills, connections, and inspiration needed to build better online and mobile experiences.\n\n[Fluent](https://conferences.oreilly.com/fluent/fl-ca) is this June 11-14 in San Jose, CA. Save 20% today with code: **SYNTAX**\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\nThey are also hiring! [netlify.com/careers](https://netlify.com/careers)\n\n## Show Notes\n\n1:55 - Scott\'s new studio\n\n4:57 - [Pop Motion Pose](https://popmotion.io/pose)\n\n* New library for React or vanilla JavaScript\n* Define locations instead of CSS styles\n* Pass the animation state into a React component as open or closed instead of active or inactive\n* Flip animation techniques\n* [Style Fire](https://popmotion.io/api/stylefire) - Simple HTML & SVG styler optimised for animation\n\n8:44 - [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)\n\n* Browser-based API based on observables\n* Example uses: Tell me when this element is on the page, goes off the page or is halfway down the page\n\n10: 32 - [MDX](https://github.com/mdx-js/mdx)\n\n* Webpack loader for MDX (i.e. JSX-infused Markdown) using mdx-it\n* Turns MarkDown files into components in Webpack\n\n12:56 - [Resize Observer](https://wicg.github.io/ResizeObserver/)\n\n* Watch elements for resize\n\n15:47 [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API)\n\n* Works with animations natively in JavaScript\n* Tell your animations to play, pause, reverse, etc.\n* Instead of changing classes, you have full control over what the animation is doing\n* [Web-Animation-JS Polyfill](https://github.com/web-animations/web-animations-js)\n* [Can I use](https://caniuse.com/)\n\n18:00 - [Window Face Detector API](https://twitter.com/wesbos/status/976097163834019842)\n\n* Create a new window.face detector and pass it an image tag and it returns an array of faces.\n\n22:53 - [Payment Request API](https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API)\n\n* Eliminates check out forms\n* Allows platform to handle payment safely and securely\n\n29:23 - [INTL.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat)\n\n* Format pricing with different currencies\n\n32:59 - [V8 BigInts](https://v8project.blogspot.com/2018/05/bigint.html)\n\n* Makes working with big numbers more viable\n\n34:53 - [Speech Recognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition)\n\n* Converts speech to text\n* Pipe in different accents\n\n36:22 - [Text To Speech](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance)\n\n* Simulates text into spoken words\n\n41:46 - [ES6 Modules In Node](https://nodejs.org/api/esm.html)\n\n* There are no ES6 modules in Node. It\'s still being developed. If you want to build an ES6 module in Node, you have to use the .mjs extension\n\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott:[Dank Mono](https://dank.sh/)\n* Wes:[Video Doorbell Pro from Ring](https://shop.ring.com/products/video-doorbell-pro)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c7ce776a2ef0bea4adbf7da731939c502fce53540f7d84ba6d715e74d88ff532', 'what-s-new-in-javascript', '/shows/046 - What\'s New in Javascript.md', '2023-10-16 20:06:54.894', '2023-10-27 15:57:42.906', 'TASTY'),
('syntax_podcast_show_00047', 47, 'How to Get Better at Debugging', '2018-05-23 13:00:00.561', 'https://traffic.libsyn.com/syntax/Syntax047.mp3', '\nScott and Wes detail the tips and tools you need to get better at debugging.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Coffeecup\'s CSS Grid Builder Tool\n\nCheck out Coffeecup\'s [CSS Grid.cc](https://cssgrid.cc/) builder tool and resources to learn, prototype and build next gen layouts with CSS Grid!\n\n## Show Notes\n\n4:00\n* Read the stack trace\n\n7:35\n\n* Make sure you aren\'t debugging production\n* Make sure you\'re not cached\n\n8:40\n\n* Check the network panel for the whole response\n* CORS (Cross-Origin Resource Sharing)\n\n12:04\n\n* Use debugger commands in the browser\n* Set breakpoints (race conditions)\n\n13:40\n\n* Use Source Maps\n\n15:29\n\n* Make full use of all console methods\n  * console.group/groupEnd/info/\n  * console.log({objNAme})\n\n17:02\n\n* View your code in other browers\n* Make sure your browser is up to date\n\n18:50\n\n* Step into and step over function\n* Useful for especially tricky issues\n\n19:47\n\n* Look into Scope in dev tools panel\n\n20:33\n\n* Recreate it in CodePen or Create React App\n  * Helps to quarantine your code\n  * Verify where the problem actually is\n\n24:12\n\n* Take a break\n  * Helps clear your head and approach your problem from a different angle\n\n25:40\n\n* Rubber Duck Debugging\n  * Forcing yourself to talk it out will often reveal problems/issues\n\n26:40\n\n* Check Github issues / ask in Slack\n  * Leave your solution in the comments for others\n\n28:12\n\n* Use Node --inspect flag\n\n29:57\n\n* Read the code in your libs (if you can)\n\n32:34 - Chrome Dev Tools Tabs Rundown\n\n* 33:10 - Network tab\n* 34:15 - Preformance tab\n* 35:58 - Lesser known tools\n  * 36:15 - Firefox Grid Debug\n  * 36:20 - Firefox Fonts tab\n  * 37:10 - More tools (three dots menu in top right of Chrome Dev Tools window)\n  * 37:39 - Chrome Animations Inspector\n  * 38:34 - [/dev tips](https://umaar.com/dev-tips/) & [Modern DevTools Course](https://moderndevtools.com/)\n  * 39:41 - Chrome & FF Layers for 3d and full view of canvas & window\n  * 40:51 - Sensors for overriding fake devices sensors\n    * Hot tip: Use Instagram on the desktop - Go to [Instagram](https://instagram.com) and set the user agent to iPad and it will work as it does on that actual device\n    * Hot tip: Get free internet on a plane ;) - If the airplane offers free internet for a certain device, change your user agent to that device and then switch back\n  * 43:12 - Favorite DevTools extensions\n    * [Apollo](https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm?hl=en)\n    * [React](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n    * [Redux](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en)\n    * [Vue](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en)\n    * [Lighthouse](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en)\n    * [JSON Formatter](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en)\n* 44:06 - Application/Storage tab\n* 44:41 - FireFox Grid Inspector\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Hotel Tonight App](https://www.hoteltonight.com/)\n* Wes: Coffee table - If you\'re trying to build an outdoor coffee table, use a piece of granite\n\n## Shameless Plugs\n\n* [Scott\'s Level 2 React Course coming out THIS WEEK!](https://LevelUpTutorials.com/store) - subscribe and be notified when it\'s released\n* [Wes\' Courses - Advanced React course coming soon](https://wesbos.com/courses/) - subscribe to be notified when it\'s released\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f8584d201ed06ff389c1ee926614b22c1b700348351e34cd4c6f8ca99fb398d7', 'how-to-get-better-at-debugging', '/shows/047 - How to Get Better at Debugging.md', '2023-10-16 20:06:54.932', '2023-10-27 15:57:42.944', 'TASTY'),
('syntax_podcast_show_00048', 48, 'VS Code Round Two', '2018-05-30 13:00:00.617', 'https://traffic.libsyn.com/syntax/Syntax048.mp3', '\nScott and Wes are back with another round of tips, tricks and tasty treats for their favorite code editor, [VS Code](https://code.visualstudio.com/).\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax)\n\n## Show Notes\n\n01:45\n\n* Why Scott and Wes use VS Code vs all the other options\n* [Stay up to date with all releases](https://code.visualstudio.com/updates/v1_23)\n\n06:05 - Favorite new updates\n\n* Notification API\n* Auto Import\n* Listing errors in the file explorer\n* Column Selection\n* Interface Customization\n* __Hot Tip__: Anytime you find yourself using your mouse, there\'s likely a shortcut key for what you\'re trying to do\n* [React Snippets Library](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)\n* [Wes\' VS Code settings](https://github.com/wesbos/dotfiles)\n* Visual Studio Live Share\n\n27:40 - Favorite/New Extensions\n\n* [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)\n* [Rainbow Brackets](https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets)\n* [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag)\n* [Better Comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n* [Jest](https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest)\n* [Snapshot Tools](https://marketplace.visualstudio.com/items?itemName=asvetliakov.snapshot-tools)\n* [JS Refactor](https://marketplace.visualstudio.com/items?itemName=cmstead.jsrefactor)\n* [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n* [Polacode](https://marketplace.visualstudio.com/items?itemName=pnp.polacode)\n  * [Carbon](https://carbon.now.sh/) - An alternative way to share beautiful images of your source code\n\n38:49 - Themes\n\n* [LevelUp Official](https://marketplace.visualstudio.com/items?itemName=leveluptutorials.theme-levelup)\n* [Night Owl](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl)\n* [Cobalt2](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n\n40:35 - Tips and Tricks\n\n* Learn how to jump and select by letter, word, line, etc.\n* Move a line (or Line Bubbling) - Use this for rearranging and/or moving lines of code quickly.\n* Cycling through multiple windows of the same app - If you have multiple VS Code windows open, \"Cmd + backtick\" will cycle through them, so you don\'t have to drag them in and out of view.\n* Adjust MacOS keyboard settings - change Key Repeat to \"fast\" and Delay Until Repeat to \"short\". This will make your editor super fast when holding down arrow keys.\n* Use Git features\n  * [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)\n* Spell Checker - \"Cmd + .\" will open up code actions and you check for possible misspellings, etc.\n  * [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)\n* Rename Symbol - Much more reliable than find/replace.\n* [Sort Lines](https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines)\n* Select everything between quotes - (Cmd + Shift + Space)\n\n57:25 - Things that could be improved\n\n* Region folding is inconsistent and sometimes doesn\'t work at all.\n* No easy way to tell which extension is causing CPU performance issues.\n* Sidebar indentation isn\'t clear.\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Wes: [Melnor 4-Zone Digital Water Timer](https://www.amazon.com/gp/product/B0094KM4VK/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=webo080-20&creative=9325&linkCode=as2&creativeASIN=B0094KM4VK&linkId=d4f202fb09280739e3ed764255eb1020)\n* Scott: [Tosowoong Enzyme face cleanser](https://amzn.to/2IWrn9j)\n\n## Shameless Plugs\n\n* [Scott\'s Intermediate React Series](https://LevelUpTutorials.com/store)\n* [Wes\' All Course Secret Sale](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7a95792c62be05200e22039d873d41ec013eb22d6044e275fe26df79f81d40b3', 'vs-code-round-two', '/shows/048 - VS Code Round Two.md', '2023-10-16 20:06:54.966', '2023-10-27 15:57:42.988', 'TASTY'),
('syntax_podcast_show_00049', 49, 'Potluck EP × SSR × SEO × Tips for Students × Music × Security × GraphQL', '2018-06-06 13:00:00.736', 'https://traffic.libsyn.com/syntax/Syntax049.mp3', '\nIt\'s a Potluck episode - you bring the questions and we turn them into tasty treats.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## CoffeeCup\'s CSS Grid Builder Tool\n\nCheck out Coffeecup\'s [CSS Grid.cc](https://cssgrid.cc/) builder tool and resources to learn, prototype and build next gen layouts with CSS Grid!\n\n## Show Notes\n\n2:15\n\n* What\'s the best resource for staying up to date with Javascript?\n\n3:48\n\n* How do you stay motivated if you don\'t like your current project?\n\n7:08\n\n* What\'s your favorite music to work to?\n\n11:10\n\n* In what order should developers learn tools related to GraphQL?\n\n13:48\n\n* As a JS developer, is it a good idea to learn other languages like PHP or Python?\n\n19:55\n\n* As a CS undergrad, what can you do in terms of programming that could be a great benefit after graduation?\n\n23:14\n\n* Should you be concerned about SEO when using JS frameworks like React?\n\n28:17\n\n* How can you build your network when you\'re too tired or busy to go to a bunch of meetups?\n\n32:55\n\n* How do you come up with such good designs and UI for your courses?\n\n36:37\n\n* As more websites move to secure connections, where can a noob learn the basics of https, SSL certificates, how to deploy a secure website, etc.?\n\n43:05\n\n* Have you had experience working for large companies and how does it compare to smaller companies and/or freelancing?\n\n47:30\n\n* What are other programming podcasts you listen to?\n\n__Want to submit a question for our next potluck episode?__ [Check out our tasty Listener Questions form](https://docs.google.com/forms/d/e/1FAIpQLSfQlAo1wXHiJMySdU-h8QMtfoz92aMS9eycEHXB6eRCLh8KHA/viewform).\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Wes: \n  * [SpikeBall](https://amzn.to/2kzAjXO)\n  * [Slammo](https://amzn.to/2shGaVM)\n* Scott: [Stance](https://www.youtube.com/user/stanceelements)\n\n## Shameless Plugs\n\n* [Scott\'s Level 2 React Course](https://LevelUpTutorials.com/store)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '03ac6db9da99b82d1cca03ce78ff1da1ebddb8e19b763c95bea988d05dc70d46', 'potluck-ep-ssr-seo-tips-for-students-music-security-graphql', '/shows/049 - potluck.md', '2023-10-16 20:06:55.005', '2023-10-27 15:57:43.028', 'TASTY'),
('syntax_podcast_show_00050', 50, 'Progressive Web Apps', '2018-06-13 13:00:00.021', 'https://traffic.libsyn.com/syntax/Syntax050.mp3', '\nScott and Wes dive into the ins and outs, best practices and tasty tidbits of Progressive Web Apps.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax)\n\n## Show Notes\n\n2:00\n\n* What\'s the deal with the GitHub / Microsoft acquisition?\n\n6:05\n\n* What is a Progressive Web App?\n\n8:55 - [Progressive Web App Checklist](https://developers.google.com/web/progressive-web-apps/checklist)\n\n### What are the baseline features for a Progressive Web App?\n\n09:25\n\n* Site is served over HTTPS\n* [Let\'s Encrypt](https://letsencrypt.org/)\n\n11:05\n\n* Pages are responsive on tablets & mobile devices\n\n11:35\n\n* All app URLs load while offline\n* [Use a Service Worker](https://developers.google.com/web/fundamentals/primers/service-workers/)\n\n16:35\n\n* Metadata provided for Add to Home screen\n\n18:40\n\n* First load fast even on 3G\n\n20:00\n\n* Site works cross-browser\n\n20:15\n\n* Page transitions don\'t feel like they block on the network\n\n22:20\n\n* Each page has a URL\n\n### What makes an exemplary Progressive Web App?\n\n27:42\n\n* All content is indexed by Google\n\n28:38\n\n* Schema.org metadata is provided where appropriate\n* Social metadata is provided where appropriate\n\n29:42\n\n* Canonical URLs are provided when necessary\n\n### User experience\n\n31:43\n\n* Content doesn\'t jump as the page loads\n* [Scott\'s Pro Gatsby Course](https://www.leveluptutorials.com/tutorials/pro-gatsby)\n\n36:52\n\n* Pressing back from a detail page retains scroll position on the previous list page\n\n37:34\n\n* When tapped, inputs aren\'t obscured by the on screen keyboard\n\n### The Best of the rest\n\n38:22\n\n* Content is easily shareable\n* Site is responsive\n* Any app install prompts are not used excessively\n* The Add to Home Screen prompt is intercepted\n\n39:20\n\n* Use cache-first networking\n\n### Device APIs\n\n40:34\n\n* [Web RTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API)\n* [Get User Media](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia%20)\n\n41:50\n\n* [Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n\n45:12\n\n* Accelerometer\n* GPS\n\n45:55\n\n* [Payment Request API](https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API)\n\n47:12\n\n* [Local Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage)\n\n48:03\n\n* [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\n\n48:35\n\n* [StorageManager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager)\n\n51:45\n\n* [Vibration API](https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API)\n\n52:58\n\n* Use [Lighthouse](https://developers.google.com/web/tools/lighthouse/) to improve the quality of your web apps\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [myNoise](https://mynoise.net/)\n* Wes: [Ozark Trail Drinkware](https://www.walmart.com/search/?query=ozark%20trail%20rambler&cat_id=0)\n\n## Shameless Plugs\n\n* [Scott\'s Level 2 React Course](https://LevelUpTutorials.com/store)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '400d5c616e8399a5ade215f93998a806cc39dea85521d595d1741a5e7fb51985', 'progressive-web-apps', '/shows/050 - Progressive Web Apps.md', '2023-10-16 20:06:55.043', '2023-10-27 15:57:43.065', 'TASTY'),
('syntax_podcast_show_00051', 51, 'Our Workflows — Design, Development, Git and Deployment', '2018-06-20 13:00:00.620', 'https://traffic.libsyn.com/syntax/Syntax051.mp3', '\nIt\'s a workflow extravaganza! Scott and Wes talk about their development workflows, covering everything from design to deployment.\n\n## Cofeecup\'s CSS Grid Builder Tool — Sponsor\n\nCheck out Coffeecup\'s [CSS Grid.cc](https://cssgrid.cc/) builder tool and resources to learn, prototype and build next gen layouts with CSS Grid!\n\n## VueSchool.io\'s Vue.js Masterclass — Sponsor\nCheck out [VueSchool.io\'s new Vue.js Masterclass](https://vueschool.io/) taught by Alex Kyriakidis. Learn Vue.js along with best practices, modern Javascript, and other exciting technologies, by building a real-world application - a forum. The first 50 people to visit [VueSchool.io/syntax](https://vueschool.io/syntax) to get 25% off.\n\n## Show Notes\n\n4:00 - Design Workflow\n\n* Wes:\n  * Screenshots of look + feels\n  * Sketch layouts out in pencil\n  * Mock up layout in Sketch\n  * Once rough layout is done, I refine\n  * Once I have: colors, type, patterns, textures and overall layout, I move to code.\n  * A design program is important to vs designing in code\n\n* Scott\n  * Mirrored component structure in Figma\n  * Using Ideas from Atomic design and React components\n  * Goal is for Figma components to be 100% mapped to styled components\n  * Flexible and testable in different layouts\n  * My design philosophy is refinement through iteration\n  * Light theft\n    * Footer from [Pitchfork](https://pitchfork.com/)\n    * New card animation idea from [Patagonia](http://www.patagonia.com/)\n\n15:55 - Design to Dev Workflow\n\n* Wes:\n  * Happy with design so far\n  * Setup tooling - styled components, stylus, sass...\n  * Setup type, variables, partials, resets...\n  * Do as much HTML as possible before styling\n  * CSS it up for layouts, then go section by section\n  * Broad first, then zoom in on finesse\n  * Browsersync / Hot Reload\n  * Test across browsers / Devices\n\n* Scott:\n  * Define parameters in Figma\n  * Styled components in React, hand write that CSS bruh\n  * Move aspects of styled components lib like breakpoints, colors, functions, helpers, base components\n\n32:06 - Git Workflow\n\n* Wes:\n  * Tear off a branch - name after issue - DEV113\n  * Do your work\n  * Rebase\n  * Squash\n  * Pull Request\n  * Rinse + Repeat\n\n* Scott\n  * Master branch is 1-1 with live\n  * Develop is where work is done (but not really because I make a feature branch for each feature and merge in)\n  * Contributors issue pull requests into develop\n\n42:34 - Deployment Workflow\n\n* Scott:\n  * Hosted on Meteor Galaxy, container based hosting\n  * Develop is merged into master, all tests run, if everything passes tests and manual check, I deploy to Galaxy via NPM script.\n  * Soon I\'ll be adding in automated test running & auto deploy to galaxy on push to master.\n  * Secrets are kept in a settings.json file that\'s used during deployment.\n\n* Wes:\n  * Codeship\n  * DeployHQ\n  * Git\n  * Rsync\n  * Dealing with secrets\n\n49:53 - Project Folder Structure\n\n* Wes:\n  * Folder Structure - 0100, 0101…\n\n* Scott:\n  * API\n  * UI\n    * element -> styled components with index\n  * Startup\n  * Utilities\n\n## Links\n\n* [BNO Train Wreck Album](https://upload.wikimedia.org/wikipedia/en/thumb/3/33/BNO-trainwreck_cover.jpg/220px-BNO-trainwreck_cover.jpg)\n* [Atomic Design](http://bradfrost.com/blog/post/atomic-web-design/)\n* [Guide Design Systems](https://www.invisionapp.com/blog/guide-to-design-systems/)\n* [BrowserSync](https://browsersync.io/)\n* [FontSquirrel](https://www.fontsquirrel.com/)\n* [fontplop](https://www.fontplop.com/)\n* [Creative Market](https://creativemarket.com/)\n* [Delicious Brain\'s WP Migrate DB Pro](https://deliciousbrains.com/wp-migrate-db-pro/)\n* [Ryan Dahl - 10 Things I Regret About Node.js](https://www.youtube.com/watch?v=M3BM9TB-8yA)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Overcooked - Nintendo Switch](https://www.nintendo.com/games/detail/overcooked-special-edition-switch)\n* Wes: [SkyRoam Solis](https://www.skyroam.com?rfsn=1346968.ac598)\n\n## Shameless Plugs\n\n* [Scott\'s Level 2 React Course](https://LevelUpTutorials.com/store)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0c966f5bc03022bef2daa7e901beca3250bec408764a847e4a808d2e6dc453c1', 'our-workflows-design-development-git-and-deployment', '/shows/051 - Workflows.md', '2023-10-16 20:06:55.081', '2023-10-27 15:57:43.112', 'TASTY'),
('syntax_podcast_show_00052', 52, 'Marketing for Developers', '2018-06-27 13:00:00.172', 'https://traffic.libsyn.com/syntax/Syntax052.mp3', '\nScott and Wes talk about marketing. Specifically how to do marketing if you\'re a developer wondering where to start.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax)\n\n## Show Notes\n\n7:58 - Personal Branding\n\n* Build trust and reciprocity\n* Be authentic to yourself and let that carry through in your work.\n* Have the guts to put yourself out there and establish yourself as an expert.\n  * Speak at conferences\n  * Write blog posts\n  * Make YouTube videos\n  * Be on podcasts\n  * Start your own podcast\n\n14:50 - Running a Business\n\n* Treat people well.\n* Reward your customers.\n* Don\'t punish your users.\n* Have a refund policy.\n\n19:26 - Social Media\n\n* Don\'t push people off a platform. Bring content to them that is tailored for that platform.\n* Get in early, before the platform becomes super crowded.\n\n* YouTube\n  * Quality content through quantity.\n  * Write good SEO titles.\n  * Tease your paid content or create a free one-off.\n  * Don\'t expect to make a lot of money, but it can be great for growing a brand.\n\n* Twitter\n  * Be helpful - small, digestible tips and tricks and great for growing a Twitter following.\n  * Quality is still the key.\n  * [Steve Schoger](https://twitter.com/steveschoger) is a great example of consistent, high quality content.\n\n* Facebook\n  * People have other interests besides web development. People like to see into your life.\n  * Use Facebook to give people a window into who you are.\n\n* Reddit\n  * Reddit is really difficult. It\'s easy to get banned. The best strategy is to not focus on marketing and just try to be helpful.\n  * It\'s sort of replaced forums and is a great place to build communities around different hobbies.\n\n* Instagram\n  * Recently IG has been blowing up for web developers.\n  * [Dhanish](https://www.instagram.com/dhanishgajjar/) is a perfect example of how to do Instagram well.\n\n49:55 - Paid Advertising\n\n* Don\'t be sleazy.\n* Ads are good for getting likes and driving some traffic to something, but it takes experimentation to get the best bang for you buck.\n\n54:40 - Email marketing\n\n* Wes: Email is probably responsible for most of my sales.\n* Keeps people up to date and helpful for promoting new courses.\n* Helpful for figuring out what people want.\n\n59:17 - Partnerships\n\n* A lot of companies want to partner rather than just sponsor.\n* It can be a great way to fund the creation of products/courses.\n* Affiliate programs are great when they work out.\n\n67:30 - Freebies\n\n* Giving away free content is a surefire way to get people to pay attention.\n* It\'s about giving back to the community as much as marketing your products.\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Cypress: End to end testing](https://www.cypress.io/)\n* Wes: [Audiobook: Own the Day, Own Your Life](https://www.amazon.com/Own-Day-Your-Life-Optimized/dp/B079GC7F8X)\n\n## Shameless Plugs\n\n* [Scott\'s New Electron Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React and GraphQL Course](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4aab076d09857a1162411d5dad08b0c67265aece2f1d3d81a8b1b585cc24a89d', 'marketing-for-developers', '/shows/052 - Marketing.md', '2023-10-16 20:06:55.117', '2023-10-27 15:57:43.160', 'TASTY'),
('syntax_podcast_show_00053', 53, 'Hasty Treat - Domain Management', '2018-07-02 13:00:00.092', 'https://traffic.libsyn.com/syntax/Syntax053.mp3', '\nIn this Hasty Treat (Short episode) Scott and Wes discus all things domains. Where to get them, how to set them up and how to save time managing them all in one place.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:30\n\n* What is a domain?\n\n4:59\n\n* What is DNS?\n\n6:00\n\n* Nameservers\n\n8:30\n\n* What is a DNS provider?\n  * [DNS Simple](https://dnsimple.com/)\n  * [Cloudflare](https://www.cloudflare.com/)\n  * [Hover](https://www.hover.com/)\n  * [Name](https://www.name.com/)\n  * [Domainr](https://domainr.com/)\n  * [iwantmyname](https://iwantmyname.com/)\n\n13:30\n\n* Different types of DNS records\n\n17:00\n\n* Different kinds of domains\n  * .com, .tv, .io, etc.\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd7f485bf43a3769afdd7038712b388a22ff42b80f9cf7bfb42aadf62ec538cbd', 'hasty-treat-domain-management', '/shows/053 - Domain Management.md', '2023-10-16 20:06:55.151', '2023-10-27 15:57:43.198', 'HASTY'),
('syntax_podcast_show_00054', 54, 'Potluck EP × Remote Work × Headless WordPress × Good Client Questions × Alternate Careers × React API Credentials', '2018-07-04 13:00:00.341', 'https://traffic.libsyn.com/syntax/Syntax054.mp3', '\nIt\'s another potluck episode in which Wes and Scott talk about freelancing best practices, tips for working remotely, what they would do if they had to pick a different career, and much more!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Coffeecup\'s CSS Grid Builder Tool — Sponsor\n\nCheck out Coffeecup\'s [CSS Grid.cc](https://cssgrid.cc/) builder tool and resources to learn, prototype and build next gen layouts with CSS Grid!\n\n## Show Notes\n\n4:48\n\n* How long should you stay with each job and/or company?\n\n8:20\n\n* What is the best way to work remotely?\n* Tips for remote working\n  * Have a dedicated space\n  * Clear on and off times\n  * Have a time for winding down\n  * Make specific TODO lists\n  * Use blocking software to help you stay focused\n  * Switch up the scenery / Work in different places\n\n15:26\n\n* What are the trade-offs with using WordPress in a headless setup vs a tradition setup?\n\n21:28\n\n* How do you deal with API credentials in React?\n\n27:15\n\n* How do you keep an eye on performance with an app/site over the long-term?\n  * Check uptime\n  * Check the performance features in browser dev tools\n  * Use error checking software\n  * Host-based performance tools\n  * [Newrelic](https://newrelic.com/)\n  * [pingdom](https://www.pingdom.com/)\n  * [LogRocket](https://logrocket.com/)\n\n34:28\n\n* What happened to Canvas after all the hype around HTML5 a few years ago?\n\n40:15\n\n* How do you deal with analysis paralysis?\n  * Just get to work - you can always change things later\n  * Do research, but don\'t let it get in the way of shipping\n\n44:05\n\n* If you were forced to change your career (and it had to be something you\'ve never done professionally in the past), what would it be?\n  * Wes: Some sort of buying and selling (eBay, Amazon, etc,)\n  * Example: Buying things at wholesale prices and selling them with a markup\n  * Scott: Could go a lot of different directions.\n  * Example: DJ, Snowboarding instructor, develop a video game that is a sequel to [Cruis\'n USA](https://en.wikipedia.org/wiki/Cruis%27n_USA)\n\n50:14\n\n* As a freelance developer, what are some good questions to ask before taking on a client?\n  * Budget\n  * Scope\n  * Preferred communication methods\n  * How do you make money?\n  * What are the ultimate goals?\n  * Basically, ask as many questions as possible\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Goodhertz](https://goodhertz.co/)\n* Wes: [Audiobook: Anything You Want by Derek Sivers](https://www.audible.com/pd/Bios-Memoirs/Anything-You-Want-Audiobook/B00563HS4C)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Electron Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses are all on sale](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4ec33e071a83f0ac11d924afb0f3d16462c970a1bc6492ba3d723a718d29d8f2', 'potluck-ep-remote-work-headless-wordpress-good-client-questions-alternate-careers-react-api-credentials', '/shows/054 - Potluck copy.md', '2023-10-16 20:06:55.187', '2023-10-27 15:57:43.238', 'TASTY'),
('syntax_podcast_show_00055', 55, 'Hasty Treat - User Role Systems', '2018-07-09 13:00:00.658', 'https://traffic.libsyn.com/syntax/Syntax055.mp3', '\nIn this Hasty Treat (Short episode) Scott and Wes discuss user roles, what to think about when creating your own, security implications, etc.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:30\n\n* How to manage user role systems\n\n11:30\n\n* Client side best practices\n* Don\'t rely on front-end role systems as a security measure\n\n14:13\n\n* Where to store your roles\n* Start simple and get more complex as needed\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bf8f61446cbefc92a2a9e7f015124fbe6fe8560614686b72e78f00145a3b9646', 'hasty-treat-user-role-systems', '/shows/055 - Roles.md', '2023-10-16 20:06:55.223', '2023-10-27 15:57:43.278', 'HASTY'),
('syntax_podcast_show_00056', 56, 'Design Systems', '2018-07-11 13:00:00.456', 'https://traffic.libsyn.com/syntax/Syntax056.mp3', '\nIn this highly requested episode, Scott and Wes talk about design systems, what they are, why you may want or need one, how to use them, efficiency, best practices, and much more...\n\n## VueSchool.io\'s Vue.js Masterclass — Sponsor\nCheck out [VueSchool.io\'s new Vue.js Masterclass](https://vueschool.io/) taught by Alex Kyriakidis. Learn Vue.js along with best practices, modern Javascript, and other exciting technologies, by building a real-world application - a forum. The first 50 people to visit [VueSchool.io/syntax](https://vueschool.io/syntax) to get 25% off.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:40\n\n* Design Systems 101\n  * [Wes\' Tweet about Design Systems](https://twitter.com/wesbos/status/1012325994437529600)\n\n9:40\n\n* Organizational elements of design systems\n  * It\'s all about consistency\n\n23:07\n\n* Best tools for building design systems and style guides\n  * [Figma](https://figma.com)\n  * [Relay for Figma](https://relayforfigma.com/)\n  * [InVision Design Systems Manager](https://www.invisionapp.com/design-system-manager/)\n  * [Airbnb Lona](https://github.com/airbnb/lona)\n  * [Brad Frost\'s Pattern Library](http://patternlab.io/)\n  * [uiengine](https://github.com/dennisreimann/uiengine)\n\n41:52\n\n* Where to learn more\n\n## Links\n\n* [Guide to Design Systems by InVision](https://www.invisionapp.com/blog/guide-to-design-systems/)\n* [Shopify\'s Design System](https://polaris.shopify.com/content/product-content)\n* [Mailchimp\'s Voice and Tone](https://styleguide.mailchimp.com/voice-and-tone/)\n* [Zendesk Garden](https://garden.zendesk.com/)\n* [Material Design](https://material.io/design/)\n* [Awesome Design Systems](https://github.com/alexpate/awesome-design-systems)\n* [Design Systems Repo](https://designsystemsrepo.com/)\n* [Design Systems](https://www.designsystems.com/)\n* [Docz](https://www.docz.site/)\n* [Facebook Yoga](https://yogalayout.com/)\n* [StorybookJS](https://storybook.js.org/)\n* [Stuart Clarke-Frisby Tweet](https://twitter.com/stuartfrisby/status/983274546802421760)\n* [Figma\'s Platform](https://blog.figma.com/introducing-figmas-platform-ee681bf861e7)\n* [Figma Styles and Prototyping](https://blog.figma.com/figma-3-0-217d6c248f85)\n* [Design Systems Newsletter](http://news.design.systems/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [CalDigit TS3 Plus](https://amzn.to/2Mxz8nC)\n* Wes: [Picasso Tiles](https://amzn.to/2IDzAOW)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Electron Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course (Coming Soon)](http://advancedreact.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7d5cdc619b6dac870cfc6ea2a54735abb63742ddd1c6df7e828f69c7f1ce79f2', 'design-systems', '/shows/056 - Design Systems.md', '2023-10-16 20:06:55.258', '2023-10-27 15:57:43.318', 'TASTY'),
('syntax_podcast_show_00057', 57, 'Hasty Treat - Dot Files', '2018-07-16 13:00:00.805', 'https://traffic.libsyn.com/syntax/Syntax057.mp3', '\nIn this Hasty Treat (Short episode) Scott and Wes discuss dot files, what they are, how to use and manage them as well as best practices and more.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:15 - What is a dot file?\n\n* Access tokens\n* Settings for editors, etc.\n\n4:40 - Dot file examples\n\n  * .gitignore\n  * .gitkeep\n  * .rc\n    * .babelrc\n    * .bashrc\n    * .eslintrc\n  * .env\n  * .DS_Store\n  * .editorconfig\n  * .meteorignore\n\n23:46 - How to keep your dot files in sync\n\n## Hot Tip\n* In MacOS, toggle dot files with \"Shift + Cmd + .\"\n\n## Links\n[Wes\' dot files repo](https://github.com/wesbos/dotfiles)\n[Prettier](https://prettier.io/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '15d21351a83d87a09d1e7eb389e7bb2f1dd66b72d958e54da426d91cf0f6653c', 'hasty-treat-dot-files', '/shows/057 - Dot Files.md', '2023-10-16 20:06:55.293', '2023-10-27 15:57:43.360', 'HASTY'),
('syntax_podcast_show_00058', 58, 'Advice For Beginners - Tech Skills, Applying for Jobs, Focus, Imposter Syndrome + More', '2018-07-18 13:00:00.645', 'https://traffic.libsyn.com/syntax/Syntax058.mp3', '\nScott and Wes give their best advice for beginners, including tech skills, applying for jobs, focus, imposter syndrome, and more...\n\n## Coffeecup\'s CSS Grid Builder Tool — Sponsor\n\nCheck out Coffeecup\'s [CSS Grid.cc](https://cssgrid.cc/) builder tool and resources to learn, prototype and build next gen layouts with CSS Grid!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n4:46 - Advice for gaining new skills\n\n* Patience and momentum are key\n* You likely won’t get anywhere significant in two months\n* Think about where you want to be in five years\n* Start small\n* Start with was excites you and let that drive your exploration\n* Start writing code ASAP. Don\'t worry about the right way, just get started.\n\n17:15 - Advice for applying to jobs\n\n* Apply for everything. Failing an interview is no big deal.\n* Each interview is an opportunity to gain experience\n* Putting yourself out there is huge - one blog post, YouTube video, or open source project will put you miles ahead\n* Have an entrepreneurial mindset - you can negotiate money, hardware, vacation time, flexible schedule, etc. Don’t just google “average salary”\n* Negotiate salaries and perks.\n\n29:32 - Advice for knowing what to focus on\n\n* What gets you jazzed? Find something cool and figure out how to recreate it.\n* Find a problem and figure out how to solve it - build real things.\n* Don’t focus on tech - tech is just a tool.\n\n38:32 - Advice for impostor syndrome\n\n* Listen to this podcast! ;)\n* Almost everyone has it.\n* Don’t worry about other people’s progress.\n* You don\'t need to know how to do everything, but you should be able to figure out how to learn.\n\n46:45 - Misc advice\n\n* Evaluate things for yourself - don\'t blindly follow the loudest voices on the internet\n* Focus on soft skills as well - time management, communication\n* Get a mentor\n* Health and Hobbies - don\'t let yourself burnout\n\n## Links\n\n* [Ep 044 - How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n* [Javascript30](https://javascript30.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Sony A7iii](https://amzn.to/2NhCls4)\n* Wes: [Zevia](https://www.zevia.com/)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Tuts Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Stickers](https://bos.af/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd9615bac3044b7ef02452010f7bdbcc1b128999cda4a6c630dca1884c2ab0a34', 'advice-for-beginners-tech-skills-applying-for-jobs-focus-imposter-syndrome-more', '/shows/058 - Advice for Beginners.md', '2023-10-16 20:06:55.340', '2023-10-27 15:57:43.403', 'TASTY'),
('syntax_podcast_show_00059', 59, 'Hasty Treat - Refactoring', '2018-07-23 13:00:00.929', 'https://traffic.libsyn.com/syntax/Syntax059.mp3', '\nIn this Hasty Treat, Scott and Wes discuss refactoring, what it is, why you should do it, when to do it, as well as best practices and much more.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n5:00 - What is refactoring and why would you do it?\n\n* Re-writing code while maintaining functionality\n* The first code you write is most likely not your best code\n\n7:32 - Benefits To Refactoring\n\n* Keep part of your codebase in your head\n* Keep codebase timely and up to date (E.g. promises, async, await, etc.)\n* Writing code from the vantage point of having already built your product\n* Performance improvement\n\n12:54 - When to refactor\n\n* When it\'s stopping your from progressing\n* When bringing someone new on to your team\n* When you can see a more elegant solution\n* When you\'re having performance issues\n* When you\'re sharing or presenting code\n* When you have a large codebase that needs to be broken up into smaller components\n\n19:03 - Tips on how to refactor\n\n* Testing will make refactoring easier\n* Identify bad code and problem areas\n* Use git as an escape hatch\n* Break things into smaller chunks\n* Publish often use code to npm as modules\n\n## Links\n* [Facebook\'s Codemod](https://github.com/facebook/codemod)\n* [Syntax043 - 20 JavaScript Array and Object Methods to make you a better developer](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'af1bcc1a4bedc112aaa0a8ab2b7b1f52fe2d3e77874d4f5106d02554eb78f054', 'hasty-treat-refactoring', '/shows/059 - Refactoring.md', '2023-10-16 20:06:55.380', '2023-10-27 15:57:43.445', 'HASTY'),
('syntax_podcast_show_00060', 60, 'The Undocumented Web - scraping, private APIs, proxies and “alternative solutions”', '2018-07-24 13:00:00.084', 'https://traffic.libsyn.com/syntax/Syntax060.mp3', '\nWhat is the undocumented web? Scott and Wes dive into it, discussing APIs, faking, scraping, automation, proxies as well as tips and tricks for best practices.\n\n## Kyle Prinsloo\'s Freelancing & Beyond — Sponsor\n\nKyle Prinsloo teaches you everything you need to know about freelancing, including how to quit your job, earn a side-income and start taking control of your life. Check it out at [https://studywebdevelopment.com/freelancing](https://studywebdevelopment.com/freelancing.html) and use the coupon code \"syntax\" at checkout to get 25% off.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:05 - What Is the undocumented web?\n\n* When traditional methods don’t give you what you want\n* Wild West\n\n6:10 - Undocumented APIS\n\n* Instagram\'s private API\n* Use dev tools\' XHR Request\n* React Dev Tools will also have the data\n* [Ep 008 - Wes Bos Origin Story](https://syntax.fm/show/008/wes-bos-origin-story)\n* [Realtor.ca - MLS Mapping](https://www.realtor.ca/)\n* [Simon Willison’s Zeit Day Talk about XML files](https://github.com/simonw/datasette)\n* [Charles Proxy App](https://www.charlesproxy.com/) - also good for debugging requests\n\n17:34 - Faking\n\n* Faking User Agents\n  * Sending headers from requests\n  * Free Blackberry wifi on plane\n\n23:52 - Scraping\n\n* What is scraping?\n* [Cheerio](https://github.com/cheeriojs/cheerio) - jQuery like node package\n\n27:30 - Automation\n\n* Cron Jobs\n* Filling out forms instantly\n* Headless browsers\n  * [Puppeteer](https://developers.google.com/web/tools/puppeteer/)\n  * [PhantomJS](http://phantomjs.org/)\n\n33:30 - Proxies\n\n* Need a fresh IP address\n* Need a different country\n* Side note: Canadians buying stuff in USA M4S1P1 === 41100\n* API throttling\n\n39:00 - Tips and Tricks\n\n* Multiple API keys\n* [diskDB](https://www.npmjs.com/package/diskdb) - Text files as databases\n* Search Github for API keys\n* Inspect Element and Delete Overlays\n* Delete Cookiesokay\n\n44:45 - Stories\n\n* Photo Voting\n* MLS Listing\n* Top Entrepreneur voting cheating\n* Vanity Plate Checker\n* [My Hockey Team Sucks](https://forwardcourses.com/lectures/346)\n* [Vehicle auction bidding app](https://twitter.com/lawjolla/status/1008739031448875008)\n* [youtube-dl](https://rg3.github.io/youtube-dl/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Octopath Traveler & OST](https://amzn.to/2mvECnS)\n* Wes:\n  * [AvE Youtube Channel](https://www.youtube.com/channel/UChWv6Pn_zP0rI6lgGt3MyfA)\n  * [Mustie1 Youtube Channel](https://www.youtube.com/channel/UCcSeeATlWJJbXpOZRYOfaDg)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Tuts Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '227d91ffd47cd7a7c4a1f4ddd79eb189fee5ee9f0bc06806734017935357f1d2', 'the-undocumented-web-scraping-private-apis-proxies-and-alternative-solutions', '/shows/060 - The Undocumented Web.md', '2023-10-16 20:06:55.421', '2023-10-27 15:57:43.482', 'SPECIAL'),
('syntax_podcast_show_00061', 61, 'Hasty Treat - Whats the deal with npm, yarn and lock files?!', '2018-07-30 13:00:00.332', 'https://traffic.libsyn.com/syntax/Syntax061.mp3', '\nIn this Hasty Treat, Scott and Wes discuss npm, yarn, lock files, why they\'re useful, why you would or wouldn\'t want to track them in Git and much more!\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n4:10\n\n* What is npm and yarn?\n\n8:00\n\n* What\'s the difference between npm and yarn?\n\n12:00\n\n* What is semver?\n\n16:40\n\n* What is the dependency tree?\n* This is the problem that lock files solve\n\n20:32\n\n* Cool new features of npm and yarn\n  * npx\n  * security warnings\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2beb6daae46ade63f4e2ff05cfd8ab766662a9c94e49bbc730e31f7b14329e8c', 'hasty-treat-whats-the-deal-with-npm-yarn-and-lock-files', '/shows/061 - Lock files.md', '2023-10-16 20:06:55.461', '2023-10-27 15:57:43.524', 'HASTY'),
('syntax_podcast_show_00062', 62, 'Potluck - Editor Fonts × Portfolios × Meetup Tips × Switching to Windows × Freelancing Sources', '2018-08-01 13:00:00.841', 'https://traffic.libsyn.com/syntax/Syntax062.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions about freelancing, portfolios, code editors, meetup tips, switching to windows and more!\n\n## VueSchool.io\'s Vue.js Masterclass — Sponsor\n\nCheck out [VueSchool.io\'s new Vue.js Masterclass](https://vueschool.io/) taught by Alex Kyriakidis. Learn Vue.js along with best practices, modern Javascript, and other exciting technologies, by building a real-world application - a forum. The first 50 people to visit [VueSchool.io/syntax](https://vueschool.io/syntax) to get 25% off.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:37\n\n* Question: Maaz Syed Adeeb - Are editor fonts worth the investment (if yes, why)? Why are they such a big deal in the first place?\n* [Operator Mono](https://www.typography.com/fonts/operator/styles/)\n* [Dank Mono](https://dank.sh/)\n* [Fira Code](https://github.com/tonsky/FiraCode)\n\n6:10\n\n* Question: Ste O\'Neill - How can I come up with ideas for projects? What can I put in a portfolio when I work for an agency?\n\n9:10\n\n* Question: JavaScript Joe - If I only have two hours per week to work on coding projects, do I spend it building a side project or do I spend it contributing to open source? What\'s your experience contributing to open source?\n\n10:45\n\n* Question: Diane - Why is Git so hard to grasp in team projects? What are the best resources to master it?\n* [Try Github](https://try.github.io/)\n\n13:35\n\n* Question: Grant Chambers - What are some tips for going to your first meetup?\n* [React Meetups](https://www.meetup.com/topics/reactjs/?_cookie-check=PJfretbVZR3XexRA)\n\n20:23\n\n* Question: Michael Hoffman - Have you ever thought about using Linux or Windows as your main operating system?\n* [Google Pixelbook](https://store.google.com/us/product/google_pixelbook)\n* [Microsoft Surface Pro](https://www.microsoft.com/en-us/p/surface-pro/8nkt9wttrbjk/lhl3?activetab=pivot%3aoverviewtab)\n* [Figma](https://www.figma.com/)\n* [Logic](https://www.apple.com/logic-pro/)\n* [Sketch](https://www.sketchapp.com/)\n* [Mint OS](https://www.linuxmint.com/)\n* [Final Cut Pro](https://www.apple.com/final-cut-pro/)\n\n27:39\n\n* Question: Would you recommend using [Upwork](http://upwork.com) for starting out freelancing or something similar?\n\n31:18\n\n* Question: Mike C. - What do you guys think about sites like [Codewars](https://www.codewars.com/) and [Code Fights](https://codefights.net/#/)? Being new to web development, I find the problems hard to solve. Is it important to know how to solve all these problems? If so, how do I get better at developing the mindset to solve them?\n* [JavaScript 30](https://javascript30.com/)\n* [Level Up Tutorials](https://www.leveluptutorials.com/)\n\n38:47\n\n- Question: When I work on a website, I need to record user names, passwords, URLs, keys, logins, cPanel, WordPress, ftp, MySQL for each and every website, local and remote.\n  Currently, I use a text file to save all that information. How are you storing all this info? How others do it? How the pros are managing this? Pros and cons?\n- [SSH Key](https://wiki.archlinux.org/index.php/SSH_keys)\n- [LastPass](https://www.lastpass.com/)\n- [1Password](https://1password.com/)\n\n42:15\n\n- Question: Chandler Bing - What happened to [Scott\'s YouTube channel](https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg)?\n\n44:57\n\n- Question: Whose idea was it to do a podcast? Who approached whom first?\n- [Josh Owens](http://joshowens.me/)\n- [Egghead.io](https://egghead.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Jarvis Legs](https://amzn.to/2ObNeNm)\n* Wes: [King of the Road](https://www.viceland.com/en_us/show/king-of-the-road)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Apollo Client with React Course](https://www.leveluptutorials.com/tutorials/level-1-apollo-client-with-react)\n* [Wes\' Social Media](https://wesbos.com/courses)\n  * [Twitter](https://twitter.com/wesbos)\n  * [Instagram](https://www.instagram.com/wesbos/)\n  * [Facebook](https://www.facebook.com/wesbos.developer)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7fa0a2200e875ffbe960b2adfe0a59973cd85a4d0355684c05506bbaa385dd42', 'potluck-editor-fonts-portfolios-meetup-tips-switching-to-windows-freelancing-sources', '/shows/062 - Potluck.md', '2023-10-16 20:06:55.497', '2023-10-27 15:57:43.618', 'TASTY'),
('syntax_podcast_show_00063', 63, 'Hasty Treat - JSON, JSONP and CORS', '2018-08-06 13:00:00.265', 'https://traffic.libsyn.com/syntax/Syntax063.mp3', '\nIn this Hasty Treat, Scott and Wes discuss all things cross-origin - APIs, Javascript, JSON, CORS, and more.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:52\n\n* What is JSON?\n\n5:09\n\n* Origin policy in the browser\n\n6:00\n\n* Cookies + how they work\n\n6:38\n\n* How do you get data from one site to another?\n\n7:00\n\n* JSON P (JSON with Padding)\n\n9:00\n\n* CORS (cross-origin resource sharing)\n* CORS errors + learning on the fly\n\n11:31\n\n* Canvas elements\n\n12:24\n\n* Proxies\n* [Crossorigin.me](https://corsproxy.github.io/)\n* [Enable-cors.org](https://enable-cors.org/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0eb6b2a15d1aac0ce3804cef4db7a3b1c00fa113148d296cb0a063c7efcd9d10', 'hasty-treat-json-jsonp-and-cors', '/shows/063 - Cross-Origin.md', '2023-10-16 20:06:55.531', '2023-10-27 15:57:43.666', 'HASTY'),
('syntax_podcast_show_00064', 64, 'Our Office Setups (Gotta Get The Gear)', '2018-08-08 13:00:00.987', 'https://traffic.libsyn.com/syntax/Syntax064.mp3', '\nScott and Wes talk office setups and all things gear. [Gotta get the gear!](https://www.youtube.com/watch?v=R3SFqV0hMyo)\n\n## Mlab - Sponsor\n\nmLab is the leading Database-as-a-Service for MongoDB, powering over half a million deployments worldwide. Wes and Scott use mLab to host their own databases as well as take care of backups, security, scaling and performance. Try out a sandbox database on your next mongoDB project → [https://mlab.com](https://mlab.com/)\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n11:00\n\n* [Wes\' gear](https://wesbos.com/uses)\n* [Scott\' gear](https://www.leveluptutorials.com/my-gear)\n* [Scott\'s podcasting/screencasting gear](https://kit.com/leveluptutorials/podcasting-screencasting-gear)\n\n13:30 - Computer\n\n* Wes: Macbook Pro 15\"\n* Scott: Macbook Pro 15\"\n\n17:39 - Monitors\n\n* Wes:\n  * [22\" vertical Cheap Acer](https://amzn.to/2vkXomG)\n\n  * [27\" Dell 4k](https://amzn.to/2Mo3NnO)\n  * [Ergotron Monitor Arms](https://amzn.to/2voS9CF)\n\n* Scott:\n  * [LG 34UC88-B 34-Inch 21:9 Curved UltraWide](http://amzn.to/2F0sLsU)\n  * [VIVO Dual stand](https://amzn.to/2AREOI2)\n\n28:33 - Keyboards and Mice\n\n* [Twitter Thread about mice](https://twitter.com/wesbos/status/1007671082915192834)\n\n* Wes:\n  * [Apple Magic Keyboard](https://amzn.to/2nhTx5M)\n  * [Magic Mouse](https://amzn.to/2ATwRT4)\n  * [Logitech MX Master 2S](https://amzn.to/2ALF7nR)\n\n* Scott:\n  * [CODE Keyboard](https://blog.codinghorror.com/the-code-keyboard/)\n  * [Apple Magic Trackpad](https://www.amazon.com/Apple-Magic-Trackpad-2-MJ2R2LL/dp/B016QO5YWC/ref=sr_1_3?s=electronics&ie=UTF8&qid=1533676132&sr=1-3&keywords=Apple+Magic+Trackpad)\n\n33:14 - Desks\n\n* Wes:\n  * [Ikea Countertop](https://www.ikea.com/ca/en/catalog/products/20274961/)\n  * [Ikea Alex Drawers](https://www.ikea.com/ca/en/catalog/products/10373037/)\n\n* Scott:\n  * [Ikea Karlby Walnut Countertop](https://www.ikea.com/us/en/catalog/products/70335212/#/70335212) + [Jarvis Legs](https://www.amazon.com/Jarvis-Standing-Desk-Frame-Only/dp/B01N023V8B/ref=sr_1_1?ie=UTF8&qid=1533695529&sr=8-1&keywords=jarvis+legs) === dope desk!\n\n37:53 - Chairs\n\n* Wes:\n  * [Herman Miller Aeron Polished Aluminum](http://www.amazon.com/gp/product/B000LTAO8S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B000LTAO8S&linkCode=as2&tag=webo080-20&linkId=6G4M6ZR4CYKT3TM5)\n\n* Scott:\n  * [Herman Miller Aeron](https://www.amazon.com/Herman-Miller-Chair-Size-Adjustable-Arms-lumbar/dp/B00TXS2FR6/ref=sr_1_1_sspa?ie=UTF8&qid=1533695947&sr=8-1-spons&keywords=Herman+Miller+Aeron&psc=1)\n\n39:24 - Headphones\n\n* Wes:\n  * [Bose QC35s](https://amzn.to/2OOcY2y)\n  * [Apple AirPods](https://www.apple.com/shop/product/MMEF2AM/A/airpods)\n\n* Scott:\n  * [AKG K 553 Pro](https://www.amazon.com/AKG-3280H00100-K-553-Pro/dp/B00X3MT7F6/ref=sr_1_1?ie=UTF8&qid=1533695990&sr=8-1&keywords=AKG+k553+Pro)\n  * [M-Audio Bx8 monitors](https://www.amazon.com/M-Audio-BX8-D3-Powered-Reference/dp/B01J66ZEE0/ref=sr_1_1?ie=UTF8&qid=1533696043&sr=8-1&keywords=M-Audio+Bx8+monitors)\n  * [Polk Audio 12” Subwoofer](https://www.amazon.com/Polk-Audio-12-Inch-Powered-Subwoofer/dp/B000092TT0/ref=sr_1_3?ie=UTF8&qid=1533696133&sr=8-3&keywords=polk+audio+12+subwoofer) for that booom booom!\n\n43:50 - Hard Drives / Backup Systems\n\n* Wes:\n  * [WD My Passport 1TB](https://amzn.to/2AHKsg1)\n  * [Backblaze Backup](https://secure.backblaze.com/r/008x60)\n\n* Scott:\n  * [WDMyCloud EX4100](https://www.amazon.com/EX4100-Diskless-Network-Attached-Storage/dp/B00TB8XMR0/ref=sr_1_1?s=electronics&ie=UTF8&qid=1533696680&sr=1-1&keywords=wd+mycloud+ex4100)\n\n\n47:28 - Charging Stations\n\n* Wes:\n  * [Anker USB Wall Charger](https://amzn.to/2M0da13)\n\n48:52 - USB Splitters\n\n* Wes:\n  * [CalDigit TS3 Plus](https://amzn.to/2voCKSP)\n  * [Amazon Basics USB 3 Hub](https://amzn.to/2AMPHLo)\n\n* Scott:\n  * [CalDigit TS3 Plus](https://amzn.to/2voCKSP)\n\n50:35 - Wifi\n\n* Wes:\n  * [Amplifi HD Mesh](https://amzn.to/2AMQrQG)\n\n* Scott:\n  * [Google Wifi Mesh](https://www.amazon.com/Google-WiFi-system-3-Pack-replacement/dp/B01MAW2294/ref=sr_1_1_sspa?s=electronics&ie=UTF8&qid=1533697191&sr=1-1-spons&keywords=Google+Wifi+Mesh&psc=1)\n\n54:26 - Recording Gear\n\n* Check out [episode 037](https://syntax.fm/show/037/recording-screencasts-hardware-software-dos-and-don-ts) for a full rundown of all of our recording gear\n\n* Wes:\n  * [Heil PR40 Pack](https://amzn.to/2AIur9q)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Preamp-Processor/dp/B004LWH79A/ref=sr_1_2?s=electronics&ie=UTF8&qid=1533697367&sr=1-2&keywords=dbx286s)\n  * [Focusrite Scarlett 2i2](https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B01E6T56EA/ref=sr_1_3?s=electronics&ie=UTF8&qid=1533696603&sr=1-3&keywords=scarlett+2i2)\n\n* Scott:\n  * [Electro Voice RE-20](https://www.amazon.com/Electro-Voice-RE-20-Cardioid-Microphone/dp/B000Z7LLQ0/ref=sr_1_1?s=musical-instruments&ie=UTF8&qid=1533696508&sr=1-1&keywords=re20)\n  * [Sony a7 III](https://www.amazon.com/Sony-Full-Frame-Mirrorless-Interchangeable-Lens-ILCE7M3/dp/B07B43WPVK/ref=sr_1_1?s=photo&ie=UTF8&qid=1533696572&sr=1-1&keywords=Sony+A7iii)\n  * [Focusrite Scarlett 2i2](https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B01E6T56EA/ref=sr_1_3?s=electronics&ie=UTF8&qid=1533696603&sr=1-3&keywords=scarlett+2i2)\n\n58:32 - Misc\n\n* Wes:\n  * [Peak Design Everyday 30L Backpack](https://amzn.to/2Kw8hHk)\n  * [Skyroam Solis Hotspot](https://amzn.to/2nhK4eo)\n\n* Scott:\n  * [Google Home](https://store.google.com/us/product/google_home?hl=en-US)\n  * Smart outlet that shuts off all my stuff\n  * [topodesigns.com](https://topodesigns.com/)\n\n## Links\n* [Laravel Nova](https://nova.laravel.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* All of the above ;)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Apollo Client with React Course](https://www.leveluptutorials.com/tutorials/level-1-apollo-client-with-react)\n* [Wes\' Advanced React Course - Coming Soon](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '59980207c08025576d27cc03e0cc51bd1ed6d6924366137c64352b817941ac3a', 'our-office-setups-gotta-get-the-gear', '/shows/064 - Gear.md', '2023-10-16 20:06:55.572', '2023-10-27 15:57:43.705', 'TASTY'),
('syntax_podcast_show_00065', 65, 'Hasty Treat - Building Curriculum for Courses', '2018-08-13 13:00:00.725', 'https://traffic.libsyn.com/syntax/Syntax065.mp3', '\nIn this Hasty Treat, Scott and Wes discuss how they create courses, design and build curriculum, as well as insights and best practices for content creation.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n 4:32 - Wes\' process\n\n* Figure out what to make\n* Build the thing you\'re teaching in the course\n* Have it reviewed by experts\n* Simplify and create a linear flow for what you\'re teaching\n\n16:25 -  Scott\'s process\n\n* Chose a topic\n* Build the thing\n* Create the outline as you go\n* Have goals in mind, for individual topics\n* Record with final code open\n\n28:25 - How to get started\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '179beee7bbd70f7598ae23c649bee30e553d2cd0a8b7dbfc59a103df71d1f2bb', 'hasty-treat-building-curriculum-for-courses', '/shows/065 - curriculum.md', '2023-10-16 20:06:55.608', '2023-10-27 15:57:43.746', 'HASTY'),
('syntax_podcast_show_00066', 66, 'The React Episode', '2018-08-15 13:00:00.260', 'https://traffic.libsyn.com/syntax/Syntax066.mp3', '\nIn this episode Wes and Scott do a deep dive into React - what it is, best practices and all the ins and outs of how the framework works.\n\n## Dev Lifts — Sponsor\n\n[DevLifts](https://devlifts.io/) - Thad and JC are on a mission to make web developers healthy. They’re currently offering Personal Training and Nutrition Plans as well as a new program called [fit.start()](https://devlifts.io/join/fitStart). Get 50% off fit.start() with the coupon code “SYNTAX”. Additionally, the first 10 people to use the code \"TASTY\" get 50% off your [DevLifts Premium](https://devlifts.io/join/premium) subscription. Check it out today! \n\n## Mlab - Sponsor\n\nmLab is the leading Database-as-a-Service for MongoDB, powering over half a million deployments worldwide. Wes and Scott use mLab to host their own databases as well as take care of backups, security, scaling and performance. Try out a sandbox database on your next mongoDB project → [https://mlab.com](https://mlab.com/)\n\n## Show Notes\n\n5:23\n\n* Components\n\n12:30\n\n* JSX\n\n25:13\n\n* Data and Props\n\n44:48\n\n* Fetching\n\n49:22\n\n* Event Handlers\n\n54:00\n\n- Instance classes + properties\n\n55:02\n\n* Lifecycle Methods\n\n59:55\n\n* Context\n\n1:01:35\n\n* Routing\n\n## Links\n\n* [Preact](https://preactjs.com/)\n* [Inferno](https://infernojs.org/)\n* [How to Comment in JSX (article)](https://wesbos.com/react-jsx-comments/)\n* [Apollo](https://www.apollographql.com/)\n* [Redux](https://redux.js.org/)\n* [LevelUpTutorials.com Level II React Course](https://www.leveluptutorials.com/tutorials/level-2-react)\n* [React Informed (forms)](https://www.npmjs.com/package/informed)\n* [Meteor](https://www.meteor.com/)\n* [Axios](https://www.npmjs.com/package/axios)\n* [Firebase](https://firebase.google.com/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Here\'s how React\'s new Context API works](https://youtu.be/XLJN4JfniH4)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Dark Net Diaries Podcast](https://darknetdiaries.com/)\n* Wes: \n  * Any suggestions for key management products?\n  * [Iliza Shlesigner Stand-Up](https://www.netflix.com/title/80213658)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Tuts Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '76e7ebe2c1ccfe9f84f5076b9f2a72e8c1902bcd93cec31a6420974829e22c2f', 'the-react-episode', '/shows/066 - React.md', '2023-10-16 20:06:55.679', '2023-10-27 15:57:43.796', 'TASTY'),
('syntax_podcast_show_00067', 67, 'Hasty Treat - Goal Setting', '2018-08-20 13:00:00.249', 'https://traffic.libsyn.com/syntax/Syntax067.mp3', '\nIn this Hasty Treat, Scott and Wes talk goal setting - why it\'s important, when to do it, how to stick to them, and more. Tweet us your goals with the hashtag #syntaxgoals.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n 4:14\n\n* Setting SMART goals (Specific, Measurable, Attainable, Relevant, Time)\n\n7:45\n\n* What kinds of thing should you set goals for?\n\n10:49\n\n* Business goals\n\n16:50\n\n* Visualizing Goals\n\n22:58\n\n* When should you set goals?\n\n27:42\n\n* Accountability\n\n## Links\n* [ProfitWell](https://www.profitwell.com/)\n* [Forever Jobless Goals Worksheet](https://foreverjobless.com/fj-goals-worksheet.pdf)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'fe00443aea5c412ac63922970982487638c25e9737b53423eca10d4a194545c3', 'hasty-treat-goal-setting', '/shows/067 - Goals.md', '2023-10-16 20:06:55.716', '2023-10-27 15:57:43.835', 'HASTY'),
('syntax_podcast_show_00068', 68, 'Design Tips for Developers', '2018-08-22 13:00:00.119', 'https://traffic.libsyn.com/syntax/Syntax068.mp3', '\nIn this episode Wes and Scott dive into designing for developers - tips and tricks for improving your designs, and how to up your game in small ways that will have a big impact on your projects.\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1).\n\n## Mlab - Sponsor\n\nmLab is the leading Database-as-a-Service for MongoDB, powering over half a million deployments worldwide. Wes and Scott use mLab to host their own databases as well as take care of backups, security, scaling and performance. Try out a sandbox database on your next mongoDB project → [https://mlab.com](https://mlab.com/).\n\n## Show Notes\n\n6:18 - General Design Tips\n\n* Spacing is important\n* Using patterns and textures\n  * [Subtle Patterns](https://www.toptal.com/designers/subtlepatterns/)\n  * [Hero Patterns](https://www.heropatterns.com/)\n  * [Heroicons](http://www.heroicons.com/)\n  * [FlatIcon](https://pattern.flaticon.com/)\n  * [True Grit Texture Supply](https://www.truegrittexturesupply.com/)\n  * [Steve Schoger](https://twitter.com/steveschoger)\n\n* Use subtle gradients\n  * [ColorSpace](https://mycolor.space/gradient)\n\n* Use subtle drop shadows\n  * Multiple shadows on one element can have a nice effect\n\n* Don\'t use true black and white (e.g. #000 or #fff) - use softer variation of black and white\n  * Use CSS Variables for custom blacks and whites\n  * CSS default colors are almost always too harsh\n\n* Default browser UI is almost never the best UI\n  * Select elements, radio buttons, checkboxes, etc. can all be styled - it\'s no fun, but way better than it’s ever been\n\n40:22 - UX Design & Animation\n\n* Don\'t use animations when not necessary\n* Subtle scale/transitions on hover can be a nice effect\n* [Particles.js](https://vincentgarreau.com/particles.js/)\n* [Patagonia\'s Bears Ears](http://bearsears.patagonia.com/)\n\n* CSS transitions vs Physics based\n\n51:30 - How To Get Better\n\n* Follow UI-themed Instagram accounts\n* [siteInspire](https://www.siteinspire.com/)\n* [Dribbble](https://dribbble.com/)\n* [UISources](https://www.uisources.com/)\n* [Follow Steve Schoger](https://twitter.com/i/moments/994601867987619840)\n\n* Find a free mockup and build it out pixel for pixel\n\n* Take time to challenge what you think is possible or doable technically and creatively\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Louis Cole](https://open.spotify.com/album/0WbNyHNpkxpqscNWiiEhZS?si=j5iT085_Rc-weuwF3OxeGQ)\n* Wes: [r/posthardcore Spotify Playlist](https://open.spotify.com/user/v9iqfai0ejp8rgcb2sx9n6yis/playlist/5JTDyts3BDNzlBzemtw5zc)\n\n## Shameless Plugs\n\n* [Scott\'s React Testing Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4e91d4d6ecdb06a8254a1c34d040c0aad04078c497c39124a2dfe54145b4cc9d', 'design-tips-for-developers', '/shows/068 - Design.md', '2023-10-16 20:06:55.757', '2023-10-27 15:57:43.882', 'TASTY'),
('syntax_podcast_show_00069', 69, 'Hasty Treat - Framer X and Prototyping Tools', '2018-08-27 13:00:00.304', 'https://traffic.libsyn.com/syntax/Syntax069.mp3', '\nIn this Hasty Treat, Scott and Wes talk about prototyping and design tools in the development space, specifically Framer X - what it is, what it isn\'t, and some cool stuff coming down the pipeline.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:35\n\n* Framer X - What it is and what it isn\'t\n\n13:20\n\n* What it means for other prototyping and design tools\n\n17:00\n\n* Future of prototyping and design and development\n\n21:40\n\n* Final thoughts\n\n## Links\n\n* [Scott\'s Framer X First Look Video](https://youtu.be/oUhoBus1nn0)\n* [Sign up for Framer X Beta](https://framer.com/x/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'de29e172f7891b6cb7018b1e7817429f03a8e11826ab32c549582445716646f4', 'hasty-treat-framer-x-and-prototyping-tools', '/shows/069 - Framer.md', '2023-10-16 20:06:55.796', '2023-10-27 15:57:43.919', 'HASTY'),
('syntax_podcast_show_00070', 70, 'Potluck - Programming Languages × Soft Skills × PHP vs JS × Breakdancing x Spice Blends', '2018-08-29 13:00:00.798', 'https://traffic.libsyn.com/syntax/Syntax070.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - programming languages, how to practice soft skills, PHP vs JS, is it every too late to become a developer, and more.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Mlab - Sponsor\n\nmLab is the leading Database-as-a-Service for MongoDB, powering over half a million deployments worldwide. Wes and Scott use mLab to host their own databases as well as take care of backups, security, scaling and performance. Try out a sandbox database on your next mongoDB project → [https://mlab.com](https://mlab.com/).\n\n## Show Notes\n\n5:00\n\n* Why don\'t you work with Typescript?\n\n10:52\n\n* How do you recommend working with APIs/libraries that compete with the DOM (e.g. d3 + react, react + google maps)?\n\n13:40\n\n* What is meant by the word \"state\" when referring to Vue or React?\n\n16:32\n\n* How do you practice and get better at \"soft skills\" (e.g. burnout, freelancing, time management, confrontation)?\n* [Syntax 025 - Dealing with email overload](https://syntax.fm/show/025/dealing-with-email-overload-and-and-prettier-setups)\n* [PaperKarma - The App to Stop Junk Mail](https://www.paperkarma.com/)\n\n28:23\n\n* Do you guys use different environments (e.g. \"QA\" and \"Prod\")? What are some best practices?\n* [Semaphore - Test and deploy your code](https://semaphoreci.com/)\n* [Sentry - Open-source error tracking](https://sentry.io/welcome/)\n\n32:43\n\n* As someone trying to break into the field of programming, should you build everything from scratch, or it ok to use plugins and libraries?\n\n38:52\n\n* What would WordPress be like if it were built on Node and GraphQL?\n* [Ghost](https://ghost.org/)\n\n46:54\n\n* I\'m learning JavaScript at 34... Do you think I can learn to breakdance at 34 too?\n\n51:16\n\n* How do you handle high level page layout when using styled components?\n\n53:13\n\n* As a junior dev, should I switch from PHP and Laravel to full stack JS? I love PHP, but JS is taking over.\n\n## Links\n\n* [react-async-script-loader](https://github.com/leozdgao/react-async-script-loader#readme)\n* [Netflix Explained](https://www.netflix.com/title/80216752)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Alfred Emoj](https://github.com/sindresorhus/alfred-emoj)\n* Wes: [Motherboard YouTube Channel](https://www.youtube.com/user/MotherboardTV)\n\n## Shameless Plugs\n\n* [Scott\'s React Testing Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '1b108777f9eef72e6f3d4e276b60c386018fa2133cf5a1aae855b3cceae8f73f', 'potluck-programming-languages-soft-skills-php-vs-js-breakdancing-x-spice-blends', '/shows/070 - Potluck.md', '2023-10-16 20:06:55.833', '2023-10-27 15:57:43.964', 'TASTY'),
('syntax_podcast_show_00071', 71, 'Hasty Treat - Stumped! Interview Questions', '2018-09-03 13:00:00.141', 'https://traffic.libsyn.com/syntax/Syntax071.mp3', '\nIn this Hasty Treat, Scott and Wes try to stump each other with interview questions from [30 Seconds of Interviews](https://30secondsofinterviews.org/).\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n4:33\n\n* What is the difference between the postfix (i++) and prefix (++i) increment operators?\n\n7:15\n\n* What\'s the difference between a static method and an instance method?\n\n9:25\n\n* What is a focus ring? What is the correct solution to handle them?\n\n11:20\n\n* How does hoisting work in JavaScript?\n* [Syntax 017 - 22 Buzz Words Explained — Mutations, Pure Functions , Serverless, Hoisting, MVC + More](https://syntax.fm/show/017/22-buzz-words-explained-mutations-pure-functions-serverless-hoisting-mvc-more)\n\n12:47\n\n* What are the advantages of using CSS preprocessors?\n\n14:29\n\n* What is memoization?\n\n15:48\n\n* Describe the different ways to create an object. When should certain ways be preferred over others?\n\n19:15\n\n* What is event delegation and why is it useful? Can you show an example of how to use it?\n\n22:06\n\n* How do you compare two objects in JavaScript?\n\n26:00\n\n* Can you describe how CSS specificity works?\n\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '14e8ae8ca9e5214e9c2ef33847fda1596c2d6823352f2c01f63c285e507894be', 'hasty-treat-stumped-interview-questions', '/shows/071 - Stumped.md', '2023-10-16 20:06:55.866', '2023-10-27 15:57:44.007', 'HASTY'),
('syntax_podcast_show_00072', 72, 'Accessibility', '2018-09-05 13:00:00.467', 'https://traffic.libsyn.com/syntax/Syntax072.mp3', '\nIn this episode Wes and Scott dive into the very big topic of accessibility, from the basics and easy wins to best practices, tools, resources and more!\n\n## Cloudinary - Sponsor\n\n[Cloudinary](https://cloudinary.com?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Accessibility_Syntax_podcast) is a heavy duty media hosting stack for your websites and applications.\n\nAlso, check out [Making Media Accessible: How to Automatically Generate alt Text for Images](https://cloudinary.com/blog/making_media_accessible_how_to_automatically_generate_alt_text_for_images?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Accessibility_Syntax_podcast). In the first part of the series, Cloudinary will demonstrate how you can integrate machine learning tools into your image management pipeline to automatically generate alt text for your assets.\n\n## Deque - Sponsor\n\n[Deque](https://www.deque.com/) is the amazing company behind the [aXe](https://www.deque.com/axe/) accessibility testing tool that over 200,000 people use to ensure their websites are accessible.\n\nFor users looking to scale accessibility, export issues and collaborate with colleagues, Deque offers an enterprise toolset called [Attest](https://www.deque.com/tools/worldspace-attest/). Attest also allows you to select accessibility custom rules, offers a more robust API and more integrations AND can test the accessibility of your iOS and Android applications.\n\n## Show Notes\n\n6:00 - Basics\n\n* What is accessibility?\n* [Amy Carney Tweet](https://twitter.com/click2carney/status/1027601637156610048)\n* [Tim Berners Lee Quote](https://www.w3.org/standards/webdesign/accessibility)\n* a11y\n* What types of disabilities are there?\n  * [Temporary, situational, and permanent](https://medium.com/valtech-design/inclusive-design-dd4e03f82094)\n* [Tweet thread with lots of info](https://twitter.com/wesbos/status/1027187967243309057)\n\n15:03 - How do you write accessible code (easy wins)?\n\n* Clean HTML\n* Semantic elements\n* Use the alt attribute on images\n* HTML5 (article, section, header, footer, aside)\n* Proper inputs types - number, text,\n* CSS order property on Flexbox and Grid\n* Colors and proper contrast\n* Use links and buttons properly\n* Use ARIA roles to define elements when semantic HTML falls flat (popups, non-standard controls, etc.)\n  * [Introduction to ARIA](https://developers.google.com/web/fundamentals/accessibility/semantics-aria/)\n  * [Using ARIA: Roles, States, and Properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)\n* Keyboard only navigation\n* [Tabindex](https://webaim.org/techniques/keyboard/tabindex)\n* Skip to content\n* [\"Skip Navigation\" Links](https://webaim.org/techniques/skipnav/)\n* a11y ESLint rules\n* Video captions for ESL\n* Transcripts for Podcasts\n\n44:48 - Tools\n\n* [aXe](https://www.deque.com/axe/)\n* Lighthouse - Audits tab in Chrome dev tools\n* [Inclusive Design Posters](https://github.com/UKHomeOffice/posters/blob/master/accessibility/design-accessible-services/FINAL-Designing-accessible-services-posters-set.pdf)\n* [HTML Code Sniffer](https://squizlabs.github.io/HTML_CodeSniffer/)\n* [Pa11y runs code sniffer from the CLI](https://github.com/pa11y/pa11y)\n* Accessibility features in OS\n* Screen Readers\n  * MacOS VoiceOver\n  * [NVAccess](https://twitter.com/NVAccess)\n  * [Chrome Vox](https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en)\n\n54:35 - Resources\n\n* [The A11Y Project](https://a11yproject.com/)\n* [Bulb Accessibility Audit from Heydon](https://bulbenergy.github.io/bulb-audit/)\n* [Deque Youtube Channel](https://www.youtube.com/channel/UCvNQ5aJllZ5Oi49jtMKeb0Q)\n\n62:22 - Important Ideas\n\n* Use your website with accessibility tools turned on\n* Sit with someone using a screen reader\n* [Amy Carney\'s Tweet](https://twitter.com/click2carney/status/1027604230759051265)\n* [Mike Behnke Tweet](https://twitter.com/localpcguy/status/1027215599817158656)\n* [moose of letters\' Tweet](https://twitter.com/_reverett/status/1027189007799791618)\n\n## Links\n\n* [Syntax033: Large Files - CDNs, Image Compression, Video Hosting, and Big Zips](https://syntax.fm/show/033/large-files-cdns-image-compression-video-hosting-and-big-zips)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [SpeedCurve](https://speedcurve.com/)\n* Wes: [Netflix - Magic for Humans](https://www.netflix.com/title/80190510)\n\n## Shameless Plugs\n\n* [Scott\'s React Testing Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '136b71f426ac8c96e4754cb335a0b79add1bc4df46cd061ee28831d4ba8118b8', 'accessibility', '/shows/072 - Accessibility.md', '2023-10-16 20:06:55.919', '2023-10-27 15:57:44.055', 'TASTY'),
('syntax_podcast_show_00073', 73, 'Hasty Treat - Reading Documentation', '2018-09-10 13:00:00.827', 'https://traffic.libsyn.com/syntax/Syntax073.mp3', '\nIn this Hasty Treat, Scott and Wes dive into documentation - how to avoid common pitfalls and overwhelm, as well as how to read, understand and get the most out of documentation.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n5:10 - What are the different kinds of documentation?\n\n* Tutorials\n* Docs\n* API references\n* Video docs\n\n* Examples of good documentation\n  * [Stripe](https://stripe.com/docs)\n  * [Next.js Examples](https://github.com/zeit/next.js/tree/canary/examples)\n  * [New PayPal Docs](https://developer.paypal.com/docs/)\n  * [Gatsby](https://www.gatsbyjs.org/tutorial/part-two/)\n  * [Jest](https://jestjs.io/docs/en/getting-started)\n  * [Meteor](https://docs.meteor.com/#/basic/)\n\n\n14:34 - How to read documentation\n\n* Understanding how you learn will save you lots of time\n\n16:03 - Understanding Parameters\n\n* Parameter types\n* Required / Optional\n* Parameter order\n\n22:45 - How do you tackle learning something new?\n\n* Look at some examples\n* Scan the entire docs to get an idea of the surface area\n* Have something specific in mind that you want to build\n\n27:34 - What to do when the docs suck?\n\n* Look at other people\'s code\n* Chat rooms\n* Tests for examples\n* Read the source code\n* Github search\n* Contribute\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '6c821949cd49aafd1005b7539ee04f5ffbc18f356b967f1adfaab3d1b40d4b70', 'hasty-treat-reading-documentation', '/shows/073 - Documentation.md', '2023-10-16 20:06:55.957', '2023-10-27 15:57:44.103', 'HASTY'),
('syntax_podcast_show_00074', 74, '11 Habits of Highly Effective Developers', '2018-09-12 13:00:00.069', 'https://traffic.libsyn.com/syntax/Syntax074.mp3', '\nIn this episode Wes and Scott discuss 11 habits that will make you a better developer - everything from understanding the business goals behind your projects to maintaining work-life balance, staying curious, and developing empathy.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1).\n\n## Show Notes\n\n2:55 - You understand stakeholder and business goals\n\n* What is the website (or project) ultimately trying to accomplish?\n* How does the business make money?\n* Don\'t get caught up in your own \"mama drama\" about frameworks, but instead focus on how a particular framework will help achieve the end goal of the business\n\n5:13 - You\'re curious and always learning\n\n* This industry is ever-changing and isn’t slowing down\n\n7:36 - You have an open mind about new technology\n\n* Don’t “poopoo” something because it’s intimidating, new, scary or different\n* Like foods you\'ve never tried, sometimes something unusual turns out to be game changing\n\n9:57 - You ask for help\n\n* #LifeHack - most people know more than you\n* Be comfortable with NOT knowing\n* Be comfortable with failing and with how others might perceive that\n* Check your ego at the door\n\n15:35 - You help others\n\n* Helping others solidifies your own knowledge\n* Answering questions\n  * [Stack Overflow](https://stackoverflow.com/)\n  * [Quora](https://www.quora.com/)\n* Blogging\n* YouTube videos\n* Mentoring co-workers\n* Not offering unwanted advice\n\n19:12 - You have a \"problem solver\" mentality\n\n* General curiosity - figuring out why things aren’t working\n* Break things down into testable components to pinpoint an issue\n* Have a clear head under pressure (e.g. interviews)\n\n24:37 - You have fun with what you do\n\n* Enjoying challenges\n* Even if something isn\'t particularly fun, you find ways to make it fun and interesting\n\n27:54 - You understand work-life balance\n\n* Burnout is huge in our industry\n* It can be difficult when you love what you do, but it\'s so important to maintain balance\n\n34:00 - You are empathetic to your co-workers and users\n\n* Be a team players while getting things done\n* Make everyone around you better at what they do\n* Be someone others want to work with by being inclusive and professional\n  * Don\'t make inappropriate jokes, put co-workers in a tough position, etc.\n\n37:08 - You pay attention to detail\n\n* Think about edge cases\n\n39:03 - You\'re part of the community\n\n* Local meetups / lunch and learn\n* Twitter #100daysofcode\n* Conferences\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Overcooked! 2](http://www.ghosttowngames.com/overcooked-2/)\n* Wes: [Book - Rich Dad Poor Dad](https://www.amazon.com/Rich-Dad-Poor-Teach-Middle/dp/1612680194/ref=sr_1_1?ie=UTF8&qid=1536628473&sr=8-1&keywords=poor+dad+rich+dad+-+robert+kiyosaki)\n\n## Shameless Plugs\n\n* [Scott\'s React Testing for Beginners Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Graph QL Course](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '423408b2806207117d39c7af16f7bda833f669f590242f7a842458b330c6af8b', '11-habits-of-highly-effective-developers', '/shows/074 - habits.md', '2023-10-16 20:06:55.991', '2023-10-27 15:57:44.145', 'TASTY'),
('syntax_podcast_show_00075', 75, 'Hasty Treat - Feedback and Criticism', '2018-09-17 13:00:00.983', 'https://traffic.libsyn.com/syntax/Syntax075.mp3', '\nIn this Hasty Treat, Scott and Wes talk about feedback and criticism in the web industry.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n4:00 - Getting Feedback\n\n* Don\'t assume malice - tone is easily lost in digital communication\n* Don\'t take it personally\n* Evaluate the feedback through the eyes of who it\'s coming from\n* Look for the truth in the feedback\n* Be open to feedback\n\n15:15 - Giving Feedback\n\n* Don\'t be negative - phrase your feedback in positives\n* Don’t give unrequested feedback\n* Explain the why behind your feedback\n* Don’t be rude or an asshole\n* Use Tools and Standards for Code Quality\n* Give an opportunity to improve\n* Explain the \"why\" behind the feedback\n* Sandwich criticism with something positive\n* When things are heated, try to diffuse the situation\n* Give frequent positive feedback\n\n## Links\n\n* [Tweet from Dan Blundell](https://twitter.com/danblundell/status/1039537984394211328)\n* [Tweet from Dan vs Code](https://twitter.com/daveVScode/status/1039525792206741504)\n* [Manager Tools’ Feedback Model](http://www.rightattitudes.com/2008/02/23/manager-tools-feedback-model/)\n* [Elon Musk on The Joe Rogan Experience](https://www.youtube.com/watch?v=ycPr5-27vSI)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '285832c462f9adda5be0bdc3dc6d80c354f004f721feeb644be1dda29d1b05a5', 'hasty-treat-feedback-and-criticism', '/shows/075 - Feedback.md', '2023-10-16 20:06:56.024', '2023-10-27 15:57:44.192', 'HASTY'),
('syntax_podcast_show_00076', 76, 'Specialization vs Generalization', '2018-09-19 13:00:00.095', 'https://traffic.libsyn.com/syntax/Syntax076.mp3', '\nIn this episode Wes and Scott discuss specialization vs generalization - the different ways one can be a generalist or a specialist, advantages and disadvantages to both, and, ultimately, which is the better career path.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Dev Lifts — Sponsor\n\n[Dev Lifts](https://devlifts.io/) - Thad and JC are on a mission to make web developers healthy. They\'re currently offering Personal Training and Nutrition Plans as well as a new program called [Fit.Start](https://devlifts.io/join/fitstart-lean). Get 50% off with the coupon code \"tasty\". Check it out today!\n\n## Show Notes\n\n4:18 - What is a specialist?\n\n* Someone who is very good at one or two things\n* Can be very lucrative if you\'ve taken the time to become well-known in you\'re industry\n\n12:20 - What is a generalist?\n\n* Two ways to look at generalists:\n  * Someone who tries to do a little bit of everything (e.g. a developer who does Wordpress, Drupal, Django, Rails, etc.)\n  * Someone who builds related skills around one area (e.g. a JavaScript developer who can code up a backend and a frontend)\n* There will be more jobs available for the dev with tightly integrated skills in related areas than a true \"jack of all trades\".\n\n22:22 - Frontend vs Backend\n\n* Frontend\n  * Frameworks (React, Vue, etc.)\n  * CSS\n  * Performance\n  * Animations\n\n* Backend\n  * Web servers\n  * Serverless / AWS\n  * Scaling\n  * Frameworks\n  * Performance\n  * Databases\n  * Docker\n  * CI\n\n26:50 - When to widen your focus\n\n* When you are complacent with your mastery\n* You need a skill to get something done.\n* For fun\n* For a specific job\n\n30:42 - When to narrow your focus\n\n* You don’t feel control over your skills\n* You are missing out on employment because a lack of skills in one department\n* You feel overwhelmed by the options available\n* You want to be the \"go to person”\n* For fun\n\n35:48 - How to master and expand\n\n* Focus on one skill at at time. Master it and then expand on your skillset\n* Find satellite skills - things that work in harmony\n\n38:47 - Scott\'s journey\n\n42:31 - Wes\' journey\n\n44:55 - How to know where to focus\n\n* Necessity will dictate a lot - what do you need right now?\n* Job postings - you can stack the deck in your favor by learning React. Once you are in, you\'re can lean anything you want.\n* Follow your heart - but have a plan\n\n51:03 - Should I be a generalist or a specialist?\n\n* Wes: There is nothing wrong with having a large skillset as long as you aren’t mediocre at everything. If you\'re optimizing for hire-ability I think having a defined focus on either front-end or back-end is best, but still an understanding of how the other works. Ideally you have 1) Very good JS skills, 2) an understanding of how things work on both ends.\n\n* Scott: You can do either, but whatever you do, do it well. It’s easier to do a few things well than many things well. That said there are some virtuosic devs out there who can be amazing at many things, however those people are not common. Most people have holes in their armor.\n\n## Links\n\n* [JAMstack_conf](https://jamstackconf.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Great British Baking Show](https://www.pbs.org/show/great-british-baking-show/)\n* Wes:\n  * [Pointless Packaging Instagram](https://instagram.com/pointless_packaging)\n  * [Ozark Season 2](https://www.netflix.com/title/80117552)\n\n## Shameless Plugs\n\n* [Scott\'s React Testing for Beginners Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '969d6de20df41ed84921c41e991eb0e3fff20660a5f3d82a43d84638fba5c9f3', 'specialization-vs-generalization', '/shows/076 - Specialization.md', '2023-10-16 20:06:56.060', '2023-10-27 15:57:44.236', 'TASTY'),
('syntax_podcast_show_00077', 77, 'Hasty Treat - Positivity and Web Development', '2018-09-24 13:00:00.377', 'https://traffic.libsyn.com/syntax/Syntax077.mp3', '\nIn this Hasty Treat, Scott and Wes talk about positivity in the web industry - how it can affect you, your work, and the people around you.\n\n## NativeScript - Sponsor\n\nNativeScript is an open source framework for building truly native mobile apps with Angular, Vue.js, TypeScript, or JavaScript. It\'s is a great way for front-end developers to get started building native mobile apps. Get started today at [nativescript.org/syntax](https://nativescript.org/syntax).\n\n## Show Notes\n\nThe tech industry is always on the cutting edge and we’re starting to see a shift in how we deal with positivity and negativity.\n\n3:18 - The effects of negativity and how the web industry is improving\n\n* Mental health awareness is very real\n* [Stack overflow](https://stackoverflow.com/) sees that it needs to change\n* [Linus Torvalds\' apology](https://arstechnica.com/gadgets/2018/09/linus-torvalds-apologizes-for-years-of-being-a-jerk-takes-time-off-to-learn-empathy/)\n* Negativity is a disease, and it spreads\n* Positivity is a force as well\n* You can be constructive while still being nice\n  * Dan Abramov, Addy Osmani, Sarah Drasner are all amazing examples of people pushing the web forward while having a smile on their face\n\n11:50 - Healthy ways to approach disagreements\n\n* Never assume malice\n* Kill them with kindness\n* Take note of the people you admire and how they deal with aggressiveness\n\n17:08 - The power of positivity\n\n* Inspire the change you want to see\n* It\'s good for your productivity - it makes you feel good\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bcf7aa9506b6752549344e20cfc96506343a39379eac69a44644b647388776d9', 'hasty-treat-positivity-and-web-development', '/shows/077 - Positivity.md', '2023-10-16 20:06:56.095', '2023-10-27 15:57:44.277', 'HASTY'),
('syntax_podcast_show_00078', 78, 'Potluck - JS × Web Components × Security × They took our jobs!', '2018-09-26 13:00:00.879', 'https://traffic.libsyn.com/syntax/Syntax078.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - all things JS, go-to dev stacks, website security and the ever-changing nature of development.\n\n## Mlab - Sponsor\n\nmLab is the leading Database-as-a-Service for MongoDB, powering over half a million deployments worldwide. Wes and Scott use mLab to host their own databases as well as take care of backups, security, scaling and performance. Try out a sandbox database on your next mongoDB project → [https://mlab.com](https://mlab.com/).\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1).\n\n## Show Notes\n\n3:33 - Would you ever consider doing a live Syntax show?\n\n* Yes! Get tickets at [JAMstack_conf](https://jamstackconf.com/)\n\n4:31 - What are your thoughts on Flutter? Does React Native have some solid competition now?\n\n* Google\'s answer to [React Native](https://facebook.github.io/react-native/).\n* [Flutter](https://flutter.io/)\n* [NativeScript](https://www.nativescript.org/)\n\n9:43 - What are your website security essentials for static and dynamic sites? What\'s the deal with forms? Is it bad to put a form on my site with no server-side validation?\n\n* Not cool. Always do server-side validation.\n* [Netlify](https://www.netlify.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n\n14:55 - Do you have a \'go-to\' stack when building new web apps? If so, what is it and how would you go about choosing the right stack for the project?\n\n* Scott - Gatsby for sites / Meteor Apollo, React, MongoDB for db needing accounts sites\n* Wes - Next.js, Express Backend + either MongoDB, DiskDB or Prisma (or hasura)\n\n21:51 - What are your thoughts on 100 Days of Code Challenge?\n\n* Consistency and accountability.\n* The best way to get good.\n* [100 Days of Code](https://www.100daysofcode.com/)\n\n25:05 - I really have been learning a lot of React recently and have been wondering what is the difference between Next.js, Gatsby.js and vanilla React?\n\n* Dynamic vs static. What are your needs, how often does the content change.\n* [Next.js](https://nextjs.org/)\n  * Use for dynamic needs\n  * It can do static exports too\n  * Convert to markdown\n  * Nothing special other than Routing and SSR (Server request getInitialProps)\n\n* [Gatsby.js](https://www.gatsbyjs.org/)\n  * Use for static needs\n  * Gatsby has lots of adapters\n\n30:38 - What are websockets and when should they be used?\n\n* A request that is always open - it responds to events instead of pinging, pushing or pulling data\n\n35:15 - I would love to hear your take on PWAs. Do either of you have any experience with building or using them?\n\n* [Syntax Ep 50 - Progressive Web Apps](https://syntax.fm/show/050/progressive-web-apps)\n\n40:16 - I\'m a nervous newbie who\'s concerned about doing a web app that accepts payments or sensitive information. How can I know I\'ve done everything to create a secure website and also protect myself from being sued by the client if their website gets hacked? I\'m trying to be a jam stack developer so I\'m looking at things like [Snipcart](https://snipcart.com/) and [Stripe](https://stripe.com/)\n\n* Don’t save sensitive info in plain text. Use services that make it tough to do that until you are confident.\n* Look up [PIPEDIA compliance](https://www.google.com/search?q=pipeda+compliance)\n\n43:23 - What is a JavaScript generator? I heard that async/await creates a “generator” under the hood.\n\n* Pausable function that can return multiple values - call .next() on it\n\n46:54 - Are web components worth it in 2018?\n\n* [Web Components](https://www.webcomponents.org/)\n* Polymer\n* Svelte\n\n49:52 - How soon the designers replace React Developers with the invent of tools like Framer X?\n\n* Not soon.\n* Your job is changing and will continually change\n* [SouthPark - They Took Our Jobs!](https://www.youtube.com/watch?v=DEiWU1MbBfk)\n\n56:52 - Have you, or anyone you know ever thought of quitting the industry because of difficulties you have run into?\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [EGO Lawn Tools](https://amzn.to/2MFATPj)\n* Wes: [B is for Build YouTube Channel](https://www.youtube.com/channel/UCl4-WBRqWA2MlxmZorKOV7w)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro Subscription](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '847b4488d57d573c9f6b564eb795850f4fad6b784ada512a82bb65471585c281', 'potluck-js-web-components-security-they-took-our-jobs', '/shows/078 - Potluck.md', '2023-10-16 20:06:56.130', '2023-10-27 15:57:44.316', 'TASTY'),
('syntax_podcast_show_00079', 79, 'Hasty Treat - Stumped! 02', '2018-10-01 13:00:00.682', 'https://traffic.libsyn.com/syntax/Syntax079.mp3', '\nIn this Hasty Treat, Scott and Wes are back for a second edition of Stumped! where they try to stump each other with interview questions from [30 Seconds of Interviews](https://30secondsofinterviews.org/).\n\n## NativeScript - Sponsor\n\nNativeScript is an open source framework for building truly native mobile apps with Angular, Vue.js, TypeScript, or JavaScript. It\'s is a great way for front-end developers to get started building native mobile apps. Get started today at [nativescript.org/syntax](https://nativescript.org/syntax).\n\n## Show Notes\n\n5:05\n\n* What are defer and async attributes on a script tag?\n\n7:15\n\n* What are the differences between var, let, const and no keyword statements?\n\n8:45\n\n* What is a callback? Can you show an example using one?\n\n9:52\n\n* What is recursion and when is it useful?\n\n12:06\n\n* What is the difference between the array methods [map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) and [forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)?\n* [Syntax Ep 043](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n\n14:02\n\n* What is Big O Notation?\n\n15:28\n\n* What does 0.1 + 0.2 === 0.3 evaluate to?\n* [wtfjs](https://wtfjs.com/)\n\n17:44\n\n* What is CSS BEM?\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ecbe89c684f2b0c537143942463226e2932b52dce1aa3b6a67043cc7eed6be44', 'hasty-treat-stumped-02', '/shows/079 - Stumped.md', '2023-10-16 20:06:56.164', '2023-10-27 15:57:44.357', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00080', 80, 'Top 18 New Things in JS - Part 1', '2018-10-03 13:00:00.270', 'https://traffic.libsyn.com/syntax/Syntax080.mp3', '\nIn this episode Wes and Scott discuss their favorite top 18 new things in Javascript.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Mlab - Sponsor\n\nmLab is the leading Database-as-a-Service for MongoDB, powering over half a million deployments worldwide. Wes and Scott use mLab to host their own databases as well as take care of backups, security, scaling and performance. Try out a sandbox database on your next mongoDB project → [https://mlab.com](https://mlab.com/).\n\n## Show Notes\n\n6:02\n\n* Const / Let\n\n10:00\n\n* Template literals / Template strings\n* [Toggle Quotes Extension](https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes)\n* [Prettier](https://prettier.io/)\n\n14:29\n\n* Object destructuring\n\n21:28\n\n* Array destructuring\n\n27:25\n\n* Function Param destructuring\n\n30:14\n\n* Promises\n* [Wes\' Async + Await Talk](https://youtu.be/9YkUCxvaLEk?t=469s)\n\n36:24\n\n* Async + Await\n* [Syntax Ep 028 - Async + Await](https://syntax.fm/show/028/async-await)\n\n40:59\n\n* Object Computed Property Name\n\n43:42\n\n* Object Method Syntax\n\n## Links\n* [Denver Startup Week](https://www.denverstartupweek.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Red Bull BC One World Final 2018](https://www.youtube.com/watch?v=N3jwdh-6Bi0)\n* Wes: [Jura Impressa](https://us.jura.com/en)\n\n## Shameless Plugs\n\n* [Scott\'s Better Javascript Course](https://LevelUpTutorials.com/pro)\n* [Wes 1: CSS Grid in 45 Minutes](https://youtu.be/DCZdCKjnBCs?t=1179s)\n* [Wes 2: Async + Await Talk](https://youtu.be/9YkUCxvaLEk?t=469s)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '18dc976264503a70e35fa6e619767de059257c5d25b0be3abdab0354c22345bc', 'top-18-new-things-in-js-part-1', '/shows/080 - New JS.md', '2023-10-16 20:06:56.199', '2023-10-27 15:57:44.401', 'TASTY'),
('syntax_podcast_show_00081', 81, 'Hasty Treat - Hacktoberfest', '2018-10-08 13:00:00.284', 'https://traffic.libsyn.com/syntax/Syntax081.mp3', '\nIn this Hasty Treat, Scott and Wes talk about this year\'s [Hacktoberfest](https://hacktoberfest.digitalocean.com/) - a great way to support open source.\n\n## NativeScript - Sponsor\n\nNativeScript is an open source framework for building truly native mobile apps with Angular, Vue.js, TypeScript, or JavaScript. It\'s is a great way for front-end developers to get started building native mobile apps. Get started today at [nativescript.org/syntax](https://nativescript.org/syntax).\n\n## Show Notes\n\n2:42\n\n* [Hacktoberfest - The rules](https://hacktoberfest.digitalocean.com/)\n\n7:35\n\n* Things to PR\n\n12:56\n\n* Things *not* to PR\n\n18:05\n\n* How Pull Requests work\n\n21:45\n\n* Some of our repos\n  * [Wes\' ES6 course blog posts](https://github.com/wesbos/es6-articles)\n  * [Syntax Show Notes](https://github.com/wesbos/syntax)\n  * [KeyCode.info](http://keycode.info/)\n  * [CSSCursor.info](http://csscursor.info/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e6fc58ed325ecacef7d9513f0320fc103a338b5df810c10fd7ef50a91aad33c1', 'hasty-treat-hacktoberfest', '/shows/081 - Hacktoberfest.md', '2023-10-16 20:06:56.253', '2023-10-27 15:57:44.443', 'HASTY'),
('syntax_podcast_show_00082', 82, 'Top 18 New Things in JS - Part 2', '2018-10-10 13:00:00.685', 'https://traffic.libsyn.com/syntax/Syntax082.mp3', '\nIn this episode Wes and Scott continue the discussion of their favorite top 18 new things in Javascript.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Graph CMS - Sponsor\n\nGraphCMS is trying to be the world’s most developer friendly CMS. It\'s a great way to build a GraphQL API without having to write a custom GraphQL server. Try out the API-first CMS of the future today at [graphcms.com/syntaxfm](https://graphcms.com/syntaxfm).\n\n## Show Notes\n\n3:30\n\n* Spread\n\n```javascript\nconst array1 = [1, 2, 3]\nconst array2 = [0, ...array1]\n```\n\n8:40\n\n* Rests\n\n```javascript\nconst teams = [player1, player2, player3]\nconst [leader, ...members] = teams\n```\n\n11:54\n\n* Arrow Functions\n\n```javascript\nconst add = (x, y) => {\n  return x + y\n}\n// equal to\nconst add = (x, y) => x + y\n```\n\n15:48\n\n* Default Function Arguments\n\n```javascript\nfunction mul(x, y = 1) {\n  return x * y\n}\nmul(2, 3) // 2 * 3 = 6\nmul(2) // 2 * 1 = 2\n```\n\n19:47\n\n* Named params\n\n```javascript\nfunction ({ array, element }) {\n  return [element, ...array]\n}\n```\n\n21:26\n\n* Modules\n\n```javascript\n// @ a.js\nexport const param = 1\nconst defaultParam = 2\nexport default defaultParam\n\n// @ b.js\nimport defaultParam, { param } from \'./a\'\n\n// rename import module\nimport newDefaultParam from \'./a\' // rename default export directly\nimport { param as newParam} from \'./a\' // use `as` for rename\n```\n\n35:35\n\n* Classes\n\n```javascript\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n\n  get area() {\n    return this.calcArea();\n  }\n  \n  calcArea() {\n    return this.height * this.width;\n  }\n}\n\nclass Square extends Polygon {\n  ...\n}\n```\n\n41:54\n\n* Things we never use\n\n```javascript\nawait const users = fetchUser().catch(e => ...)\n\nfor(let element of array) { ... }\n\nconst set1 = new Set([1, 2, 3, 4, 5]);\n```\n\n## Links\n* [Jake’s Minesweeper](https://twitter.com/jaffathecake/status/1045055482933768194)\n* [parcel](https://parceljs.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Trader Joe\'s Everything by the Bagel Sesame Seasoning Blend](https://www.amazon.com/Trader-Joes-Everything-Sesame-Seasoning/dp/B06W9N8X9H)\n* Wes: [Trader Joe\'s Green Dragon Hot Sauce](https://www.amazon.com/Trader-Joes-Green-Dragon-Sauce/dp/B014E037TM)\n\n## Shameless Plugs\n\n* [Scott\'s Better Javascript Course](https://LevelUpTutorials.com/pro)\n* [Wes\' ES6 For Everyone](https://es6.io/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b3a6f973317d72b1c04416e36870c4cd91fa582854344f9b4029b84fdc57f20d', 'top-18-new-things-in-js-part-2', '/shows/082 - New JS Part 2.md', '2023-10-16 20:06:56.287', '2023-10-27 15:57:44.483', 'TASTY'),
('syntax_podcast_show_00083', 83, 'Hasty Treat - Old Browsers, Fallbacks and Polyfills - Part 1', '2018-10-15 13:00:00.808', 'https://traffic.libsyn.com/syntax/Syntax083.mp3', '\nIn this Hasty Treat, Scott and Wes kickoff a three-part series about old browsers, fallbacks and polyfills. In part one, Scott and Wes talk specifically about old browsers, how best to support them, and whether or not you should support them at all.\n\n## VueSchool.io — Sponsor\n\nCheck out [VueSchool.io\'s](https://vueschool.io/) new subscription plans. Get access to their entire catalog with more than 160 lessons, including The Vue.js Masterclass, for one low monthly fee. New content and courses are added regularly. Visit [VueSchool.io/syntax](https://vueschool.io/syntax) and get your first month for only $5.\n\n## Show Notes\n\n5:10 - How do you decide if you should support an older browser?\n\n* Google Analytics Data\n* User base / Money earned from that audience\n* IS it worth it? Time vs Money?\n\n11:35 - How do you test your websites and app in older browsers?\n\n* Actual hardware - there\'s no substitution for the real thing\n* [Browser Stack](https://www.browserstack.com/)\n* [Virtual Box](https://www.virtualbox.org/)\n* [Modern.ie](http://modern.ie)\n* [Can I Use](https://caniuse.com/)\n\n\n18:24 - Supporting and Testing Mobile Browsers\n\n* Resize your browser\n* Build a device lab\n* Remote Debugging\n* Browser device view\n* Faking Geolocation\n* Emulators in XCode / Android dev tools\n* [Browsersync](https://browsersync.io/)\n* [Ghostlab](https://www.vanamco.com/ghostlab/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '433f889e81991d13b094fe6e294f641bf6288454689078cdfbee76e4c501aa05', 'hasty-treat-old-browsers-fallbacks-and-polyfills-part-1', '/shows/083 - Old Browsers.md', '2023-10-16 20:06:56.333', '2023-10-27 15:57:44.523', 'HASTY'),
('syntax_podcast_show_00084', 84, 'Fitness for Developers', '2018-10-17 13:00:00.331', 'https://traffic.libsyn.com/syntax/Syntax084.mp3', '\nIn this episode Wes and Scott discuss fitness for developers. As a follow-up to [Episode 20](https://syntax.fm/show/020/fitness-nutrition-and-losing-weight), they talk about the status of their fitness goals from that episode, what\'s worked, what hasn\'t, and how you can be more fit yourself in 2018.\n\n## DevLifts — Sponsor\n\n[DevLifts](https://devlifts.io/) - Thad and JC are on a mission to make web developers healthy. They\'re currently offering two options: The first is [Fit.Start](https://devlifts.io/join) - perfect for beginners or those looking to get back at it. Use the coupon code \"syntax\" to get 50% off the fit.start plan. The second is [DevLifts Premium](https://devlifts.io/join) - for those looking for a laser-focused approach and maximum accountability. Use the coupon code \"tasty\" to get 50% off the premium plan. Check it out today!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:30\n\n* Why is fitness important as a developer?\n\n6:08\n\n* Working Out Update: Wes\n\n14:37\n\n* Working Out Update: Scott\n\n25:06\n\n* Nutrition Update: Wes\n\n35:12\n\n* Nutrition Update: Scott\n\n45:40\n\n* Supplement Update: Wes\n\n48:00\n\n* Supplement Update: Scott\n\n52:18\n\n* Plans for the future: Wes\n\n54:53\n\n* Plans for the future: Scott\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Fitness Blender](https://www.fitnessblender.com/)\n* Wes: [Dr. Peter Attia - The Drive Podcast](https://peterattiamd.com/podcast/)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9601619e64065ccf4e2f591dbafdc16eddc6fb2e4e929f283128a5db154164a7', 'fitness-for-developers', '/shows/084 - Fitness.md', '2023-10-16 20:06:56.377', '2023-10-27 15:57:44.564', 'TASTY'),
('syntax_podcast_show_00085', 85, 'Hasty Treat - Old Browsers, Fallbacks and Polyfills - Part 2', '2018-10-22 13:00:00.399', 'https://traffic.libsyn.com/syntax/Syntax085.mp3', '\nIn this Hasty Treat, Scott and Wes continue a three-part series about old browsers, fallbacks and polyfills. In part two, they talk specifically about CSS Grid, Flexbox, new features and fallbacks, and how to use them.\n\n## VueSchool.io — Sponsor\n\nCheck out [VueSchool.io\'s](https://vueschool.io/) new subscription plans. Get access to their entire catalog with more than 160 lessons, including The Vue.js Masterclass, for one low monthly fee. New content and courses are added regularly. Visit [VueSchool.io/syntax](https://vueschool.io/syntax) and get your first month for only $5.\n\n## Show Notes\n\n3:08 - CSS Grid and Flexbox\n\n* Flexbox old spec\n* Flexbox new spec\n* CSS Grid\n* Some popular options for supporting for supporting CSS Grid and/or Flexbox:\n  * Just serve the mobile layout\n  * Display block\n  * Separate layout that you will eventually delete\n* [Can I Use](https://caniuse.com/)\n* [Do websites need to look exactly the same in every browser?](http://dowebsitesneedtolookexactlythesameineverybrowser.com/)\n* [Modernizr](https://modernizr.com/)\n* [CSS3, Please!](http://css3please.com/)\n* [Autoprefixer](https://github.com/postcss/autoprefixer)\n\n12:38 - CSS Variables\n\n* Double define\n* Just like Grid, unknown def will be ignored and fallback to CSS\n* [CSS Houdini](https://css-houdini.org)\n\n17:00 - Fallback Code\n\n* @supports\n* Display block then display grid\n* Feature Testing\n* Detect the browser as a last resort\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '143fc1c80210f343bdf2100c402885aa05fa20e6ab0b4b807037e086d9493221', 'hasty-treat-old-browsers-fallbacks-and-polyfills-part-2', '/shows/085 - CSS Grid and Flexbox.md', '2023-10-16 20:06:56.423', '2023-10-27 15:57:44.603', 'HASTY'),
('syntax_podcast_show_00086', 86, 'Potluck - Working with designers × Is WordPress Crap? × When to stop working × More', '2018-10-26 13:00:00.879', 'https://traffic.libsyn.com/syntax/Syntax086.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - working with designers, criticisms of WordPress, avoiding burnout, time management, and more.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## .tech Domains - Sponsor\n\nFinding a great domain name is tough with so many names already taken. If you\'re looking for a domain name for your startup, side project, or anything at all, check out [.tech Domains](https://get.tech). Syntax listeners can get 90% off both one-year, five-year and ten-year registration by visiting [go.tech/syntax](https://go.tech/syntax) and using the coupon code \"syntax\".\n\n## Show Notes\n\n5:05 - How can you help a designer understand how styling works and how layouts work in the web? In other words: How do I explain my boundaries as a front-end developer to a designer?\n\n* Work closely with the designer\n* Allow the designer to push your limits\n* You can help them understand by:\n  * Showing them poor performing websites\n  * Showing them things that usually are taxing on the GPU to paint - rotations, background images, drop shadows, etc.\n* Don’t be afraid to let a tough design push your boundaries\n\n13:23 - How do you manage your time for learning new things when you have children and a daily full-time job?\n\n* Those who figure out how to make it a priority will win out\n* Family first - talk to your spouse\n* Ask your boss for time to learn and grow\n* Find ways to get paid for learning\n\n19:45 - How do you deal with burnout in this constantly evolving front end tech ecosystem?\n\n* Make time for hobbies away from the computer\n* Do projects just for fun\n* Solve your own problems\n* [Syntax 035: Keeping Up with the Codeashians](https://syntax.fm/show/035/keeping-up-with-the-codeashians-dealing-with-our-fast-paced-industry)\n* [Syntax 041: Preventing and Dealing with Burnout in Web Development](https://syntax.fm/show/041/preventing-and-dealing-with-burnout-in-web-development)\n\n25:00 - Do you code at night (past 9pm)?\n\n* Start your wind-down time earlier\n* Let your brain wok on problems while you sleep\n* Get it out of your head\n* Listen to podcasts, audiobooks, etc.\n\n29:23 - How do you compress your videos/audio for your courses/tutorials?\n\n* Handbrake Fast 1080\n* Use presets\n* Output from video editor, rip from YouTube, or compress directly from video editor\n\n33:10 - It seems like in the web dev community, a lot of people give WordPress crap. Any idea why?\n\n* WordPress is dope - people just like to complain.\n* WordPress is often one of the first things people learn and have bad memories of it\n* It\'s easy to write bad code with WordPress\n* It can be slow\n* It can attract a certain type of developer\n\n33:10 - What are some of the biggest mistakes that people make when they are learning programming and what\'s the best way to overcome them?\n\n* Don\'t focus on too many things\n* Don\'t worry about picking the right technology\n* Focus on the fundamentals\n* Let your curiosity and excitement drive you\n* Celebrate wins\n\n40:29 - What are your best tips for writing documentation?\n\n* Start with basic API documentation, them move to more \"article style\" docs\n* Use tools like [CodeSandbox](https://codesandbox.io/) and [Swagger](https://swagger.io/)\n* [Syntax 073: Reading Documentation](https://syntax.fm/show/073/hasty-treat-reading-documentation)\n\n43:08 - What are some good questions or techniques to better understand a client\'s requirements?\n\n* How does your business work right now?\n* What are people coming to the website for?\n* Questionnaires are good - they get people thinking\n* It’s your job to understand what a client want out of a website - what problems they have and need solved\n\n45:38 - Do you guys have any tips for taking over maintenance and development of existing websites where the previous developer is no longer reachable?\n\n* Take time to asses the codebase before writing anything\n* Learn what’s there any and why\n* Don\'t start ripping out code without understanding what\'s really going on\n* Don\'t leave it worse than you found it\n* It depends on the stack, but it\'s probably worth giving it an honest go before re-writing the whole thing\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott:\n  * [Drillbrush Bathroom Surfaces Tub, Shower, Tile and Grout All Purpose Power Scrubber Cleaning Kit](https://amzn.to/2PASzxK)\n  * [iOttie](https://amzn.to/2yOj2B5)\n* Wes:\n  * [Sabrent Wireless Charger](https://amzn.to/2Eng8ce)\n  * [CD Player Mount](https://amzn.to/2pWCB5P)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro Subscription](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2b47bd7e3be5642a06363999ed6f9b89e085b1737216156aa2174425b97575d3', 'potluck-working-with-designers-is-wordpress-crap-when-to-stop-working-more', '/shows/086 - Potluck.md', '2023-10-16 20:06:56.464', '2023-10-27 15:57:44.644', 'SUPPER'),
('syntax_podcast_show_00087', 87, 'Hasty Treat - Old Browsers, Fallbacks and Polyfills - Part 3', '2018-10-29 13:00:00.720', 'https://traffic.libsyn.com/syntax/Syntax087.mp3', '\nIn this Hasty Treat, Scott and Wes conclude a three-part series about old browsers, fallbacks and polyfills. In part three, they talk specifically about transpiling and polyfilling.\n\n## VueSchool.io — Sponsor\n\nCheck out [VueSchool.io\'s](https://vueschool.io/) new subscription plans. Get access to their entire catalog with more than 160 lessons, including The Vue.js Masterclass, for one low monthly fee. New content and courses are added regularly. Visit [VueSchool.io/syntax](https://vueschool.io/syntax) and get your first month for only $5.\n\n## Show Notes\n\n2:20 - Polyfills and Transpile\n\n5:18 - Back in the day\n\n  * Border-radius htc hack\n  * PNG fix for transparent PNGs\n  * Flash for custom fonts\n  * Cufon and SIFR\n\n10:48 - JavaScript Polyfills\n\n  * Features are polyfilled\n  * [MDN Polyfill](https://developer.mozilla.org)\n  * [Core-js](https://www.npmjs.com/package/core-js)\n  * [Polyfill.io](https://polyfill.io)\n  * [HTML5 Cross Browser Polyfills](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills)\n\n13:47 - JavaScript Transpile\n\n  * Syntax is transpiled\n  * babel-preset-env\n  * Babel has plugins and presets\n  * Meteor bundle to different browsers on demand\n* There are polyfills for most things, but performance can be an issue\n  * Resize observer\n  * Intersection Observer\n* Some things can’t be done with either\n  * New browser APIs\n  * Service workers, device access, inline video on old iOS, etc.\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '92d3c9b6a84a7412a36823f212fbde0f62e870d9296557c6869fcfe323a2590d', 'hasty-treat-old-browsers-fallbacks-and-polyfills-part-3', '/shows/087 - Polyfills.md', '2023-10-16 20:06:56.507', '2023-10-27 15:57:44.684', 'HASTY'),
('syntax_podcast_show_00088', 88, 'Pre-launch Checklist', '2018-10-31 13:00:00.680', 'https://traffic.libsyn.com/syntax/Syntax088.mp3', '\nIn this episode Wes and Scott discuss their pre-launch checklists. They talk about performance, accessibility, compatibility, SEO, analytics, and more - all the things you should check before launching something to the world.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## .tech Domains - Sponsor\n\nFinding a great domain name is tough with so many names already taken. If you\'re looking for a domain name for your startup, side project, or anything at all, check out [.tech Domains](https://get.tech). Syntax listeners can get 90% off both one-year, five-year and ten-year registration by visiting [go.tech/syntax](https://go.tech/syntax) and using the coupon code \"syntax\".\n\n## Show Notes\n\n1:45 - Overall\n\n* Let robots do the work for you - use auditing tools\n  * [Lighthouse](https://github.com/GoogleChrome/lighthouse)\n  * SEO Checkers\n  * Accessibility checkers like [axe](https://www.deque.com/axe/)\n\n2:58 - Performance\n\n* Compress those images\n  * Build process\n  * [Cloudinary](https://cloudinary.com/)\n  * [ImageOptim](https://imageoptim.com)\n  * [imgIX](https://www.imgix.com/)\n* Minify\n* Code Splitting\n  * Smaller bundles where it makes sense\n  * A future where it’s done for us\n* Run page speed tests like [Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)\n* Don’t service worker on launch\n* [Syntax Ep 50 - Progressive Web Apps](https://syntax.fm/show/050/progressive-web-apps)\n\n11:43 - Compatibility\n\n* Test on actual browsers that need to be supported\n* Ask people to check on their devices\n* Use a service like [Browserstack](https://www.browserstack.com/)\n* Browser resolution and ratios\n* Cache busters\n\n16:00 - Sales / Credit Cards\n\n* Use package.lock\n* Have multiple people test your checkout\n* Make sure your company name is listed on customer\'s credit card bills\n* Have a phone number listed for disputes\n\n24:55 - Tips from the Trenches\n\n* Secure API endpoints\n* Scale up server just in case\n* Early access\n* Soft launch\n* Make sure URLs are correct - no \"localhost:3000\", etc.\n\n31:25 - Content\n\n* Check spelling and grammar\n* A working 404 page\n* Check for leftover placeholder text → launching with lorem ipsum is not good\n\n34:39 - Accessibility\n\n* Alt text\n* Run color contrast checker\n* Run Lighthouse\n* Correct tab order\n  * Use the site with keyboard only and make sure it’s a good experience\n\n37:35 - SEO\n\n* Sitemap created and uploaded to Google Webmaster Tools\n* SEO checkers\n* Meta tags\n* Correct heading hierarchy\n\n41:55 - Analytics\n\n* Google analytics\n* Facebook tracking pixel\n* [Drip](https://www.drip.com/)\n\n\n43:23 - Server config & access\n\n* .htaccess\n  * redirects where needed\n* robots.txt\n  * prevent indexing of some pages\n* Enable GZIP\n* Caching\n* [Cloudflare](https://www.cloudflare.com/) or other CDN\n\n46:12 - Company Processes\n\n* Make sure tests are passing\n* Git issues are closed\n* Merge pull requests\n* Write documentation on processes (readme, etc.)\n* Deploy to staging environment and test production build\n* No unwanted logs or errors left in production build\n* DNS Propagation\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Swindled Podcast](http://swindledpodcast.com/)\n* Wes: [FIFO Bottles](https://amzn.to/2R6V2jX)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/) - use the code SYNTAX for $10 off\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '74713e833bb080bcbc945a8b23747814f80df0dcb6b06f4775417b634e0662cc', 'pre-launch-checklist', '/shows/088 - Checklist.md', '2023-10-16 20:06:56.548', '2023-10-27 15:57:44.734', 'TASTY'),
('syntax_podcast_show_00089', 89, 'Hasty Treat - Stumped! 03', '2018-11-05 14:00:00.602', 'https://traffic.libsyn.com/syntax/Syntax089.mp3', '\nIn this Hasty Treat, Scott and Wes are back for another edition of Stumped! where they try to stump each other with interview questions. Today\'s questions are from [Flashcards for Developers](https://www.flashcardsfordevelopers.com/).\n\n## EmailOctopus - Sponsor\n\nEmail marketing for less, via Amazon SES. EmailOctopus sends your emails through Amazon\'s Simple Email Service (SES), saving money without sacrificing deliverability. With simple setup and all the features you would expect, EmailOctopus is as flexible as you need it to be. Get started today at [emailoctopus.com/syntax](https://emailoctopus.com/syntax) and get your first three months free.\n\n## Show Notes\n\n4:03\n\n* What\'s the difference between synchronous and asynchronous code?\n\n5:56\n\n* What\'s the difference between .call and .apply?\n\n7:08\n\n* How do you share code between files?\n\n8:18\n\n* What\'s the difference between double equals and triple equals?\n\n10:40\n\n* What\'s the difference between null, undefined, and undeclared?\n\n14:18\n\n* What is the event loop?\n* [Philip Roberts - What the heck is the event loop anyway?](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n\n16:02\n\n* Why is extending built-ins never a good idea?\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'deb46dc9658d392b3ac2115aac7f02e7a038eb611ab3d2627996aaa720f574e6', 'hasty-treat-stumped-03', '/shows/089 - Stumped.md', '2023-10-16 20:06:56.587', '2023-10-27 15:57:44.779', 'HASTY'),
('syntax_podcast_show_00090', 90, 'Live at JAMstack_conf', '2018-11-07 14:00:00.956', 'https://traffic.libsyn.com/syntax/Syntax090.mp3', '\nThis week Scott and Wes are live at JAMstack_conf with games, Spicy JAM Tips, Q&As and more.\n\n## Netlify — Sponsor\n\n[Netlify](https://netlify.com/syntax) is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n7:14 - Spicy JAM Tips\n\n* Set default headers in your request library - this way it comes along for the ride on every request\n* Don’t get hung up on “static” - static sites can be as dynamic as needed\n* Don’t wait to use new tech - progressively enhance and gracefully degrade where needed\n* There are many JAMStack libraries in the sea - there are many different approaches so don\'t be afraid to experiment\n* Side projects are key to learning - test out new tech on smaller projects first and get comfortable with it\n\n10:10 - This, That or Both?\n\n* Evo RX - High end Carbon Fibre Road Bike or Library for composing asynchronous and event-based operations in JavaScript?\n* Jumpsuit - A rap/rock group from Flint Michigan or a minimal React/Redux Framework?\n* Aphrodite - React Styling Library or Best Selling Erotic novel?\n* Yugo - A minimal static site generator built in O-CAML or a super mini hatchback built in the former Yugoslavia?\n* C-Control - A modern state management library for web components or studio headphone mixer?\n* Yakbak - A recordable HTTP testing interface or a popular 90’s electronic toy?\n* Joose - A hip east coast juice bar or a metaobject system for JavaScript?\n* Easy Rooter - A client side object oriented router written in modern Vanilla JavaScript or a drain cleaning plumbing apparatus popular among local plumbers?\n* Aqueduct - A server-rendered ORM and oAuth 2.0 based framework built in Dart or a early 2000’s pop group hailing from Venice Beach?\n* Gort - A 1980’s animated series cartoon villain or a CLI Toolkit for RobotOps written in Go?\n* Raptorize - A jQuery plugin that plays a Velociraptor screech or A popular DIY spray on truck bed liner?\n\n21:13 - Stumped!\n\n* Question 1: What does \"age\" console.log to and why?\n\n  let age = 26;\n  age /= 2;\n  console.log(age); // ??\n\n* Question 2: What are all seven types in JS?\n* Question 3: How do you pronounce \"specificity\"?\n* Question 4: What is event delegation and when might you want to use it?\n* Question 5: What is CSS @supports for?\n* Question 6: An arrow function takes in an unlimited number of arguments - how would you capture them?\n* Question 7: What is the difference between .slice() and .splice()?\n* Question 8: How would you calculate the number of milliseconds since midnight of January 1, 1970?\n* Question 9: What does \"age\" console.log to and why?\n\n  const age = console.log(100) || 200;\n  console.log(age);\n\n31:26 - Overrated or Underrated?\n\n* Arrow Functions\n* Downtown scooters\n* Using Sass inside Styled Components\n* Website that play sound in the interface\n* The amount of JS frameworks\n* Soft close toilet seats\n* GraphQL\n* ES6 Destructuring\n* Instapots\n* Implicit Return\n* CSS Houdini\n* Service Workers and Offline Applications\n* Modern Design Tools - Figma, FramerX, Moudlez, Sketch, Studio\n* Decorators\n* Optional Chaining Proposal\n\n42:35 - Q+A with Scott and Wes\n\n* Since this is your first time meeting, what was the thing that surprised you the most?\n* If you could create any Tycoon game, what would you create?\n* In 2018, how concerned should we be about no-JS users?\n* How many spaces should a tab be?\n* How important is integration testing and the decentralized ecosystem?\n* What are your thoughts on the new React Hooks API?\n* Are we going to have a serverless function architecture apocalypse?\n* Are you ever going to create an online course together?\n* How will the future look for component-based design?\n* What\'s your least favorite jam?\n* What would be your goto headless CMS?\n* What do you disagree on?\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro Subscription](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd4811b7ad7948dd8c46415a221a19c52c723f9398b106d341b8b03d6c50fb545', 'live-at-jamstack_conf', '/shows/090 - LIVE.md', '2023-10-16 20:06:56.630', '2023-10-27 15:57:44.821', 'TASTY'),
('syntax_podcast_show_00091', 91, 'Hasty Treat - How to become a Sticker Mogul', '2018-11-12 14:00:00.406', 'https://traffic.libsyn.com/syntax/Syntax091.mp3', '\nIn this Hasty Treat, Scott and Wes talk about stickers and break down Wes\' entire process for creating and selling his sticker packs. Check out [Bos.af](https://bos.af/) for more info.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n6:08\n\n* Design\n\n9:23\n\n* Printing\n\n16:08\n\n* Types of Stickers\n\n19:34\n\n* Selling\n\n21:43\n\n* Envelopes, stamps and shipping\n\n30:47\n\n* Returns\n\n32:42\n\n* The future\n\n## Links\n\n* [Bos.af](https://bos.af/)\n* [Patrick DePuydt](https://twitter.com/patrickdepuydt)\n* [Alibaba](https://www.alibaba.com/)\n* [Sticker Mule](https://www.stickermule.com)\n* [Shipstation](https://www.shipstation.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '66e5815bb6463fabae950f4819ffbf25196de6ce13c3f6487dfeb7d8e244ec4b', 'hasty-treat-how-to-become-a-sticker-mogul', '/shows/091 - Stickers.md', '2023-10-16 20:06:56.665', '2023-10-27 15:57:44.863', 'HASTY'),
('syntax_podcast_show_00092', 92, 'React Hooks', '2018-11-14 14:00:00.772', 'https://traffic.libsyn.com/syntax/Syntax092.mp3', '\nIn this episode Wes and Scott discuss React Hooks - what they are, why you might want to use them, their differences with regular classes, and more.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:30\n\n* Function components\n\n4:50\n\n* What are React hooks?\n\n8:12\n\n* What problem does this solve?\n\n12:00\n\n* State hooks\n\n21:50\n\n* Context hooks\n\n26:02\n\n* Effect hooks\n\n36:46\n\n* [Reducer hooks](https://reactjs.org/docs/hooks-reference.html#usereducer)\n\n40:40\n\n* Ref Hooks\n\n48:00\n\n* Libraries already using React hooks\n  * [Rehooks](https://rehooks.com/) → Listing of hook libraries\n  * [React Spring](http://react-spring.surge.sh/)\n  * [React Measure](https://github.com/souporserious/react-measure)\n  * [Formik](https://jaredpalmer.com/formik)\n  * [Immer](https://github.com/mweststrate/immer)\n\n50:30\n\n* Resources\n  * [Dan Abramov’s Talk](https://www.youtube.com/watch?v=dpw9EHDh2bM)\n  * [Harry Wolf](https://www.youtube.com/watch?v=jd8R0a2Ur8Q)\n  * [Use Hooks Newsletter](https://usehooks.com)\n  * [Awesome React Hooks](https://github.com/rehooks/awesome-react-hooks)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Bad Blood](https://amzn.to/2JMfowo)\n* Wes:\n  * [Swindled Podcast](http://swindledpodcast.com/)\n  * [Scrub Brush Drill](https://amzn.to/2JMEpHV)\n\n## Shameless Plugs\n\n* [Scott\'s Pro Gatsby 2 Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/) - use the code SYNTAX for $10 off\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd963effcfc067e172081fd331c21f8014f9b79eed4e9c77d254bb6b3e81d241b', 'react-hooks', '/shows/092 - React Hooks.md', '2023-10-16 20:06:56.699', '2023-10-27 15:57:44.907', 'TASTY'),
('syntax_podcast_show_00093', 93, 'Hasty Treat - How to become well liked at work', '2018-11-19 14:00:00.892', 'https://traffic.libsyn.com/syntax/Syntax093.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to be well liked at work - dealing with difficult co-workers, being a better co-worker yourself, and general tips for improving your people skills.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n5:01 - Foster a culture of asking \"why\" and \"how\"\n\n7:58 - Show your own mistakes\n\n9:26 - Be understanding of people’s life situations and accommodate them accordingly\n\n11:36 - Be okay with people taking your time\n\n13:10 - Don’t take up other people’s time\n\n15:40 - Be nice\n\n15:57 - Share things\n\n16:50 - Respect personal space\n\n18:08 - Respect people\'s time\n\n## Links\n\n* [Adam Grant - Give and Take: Why Helping Others Drives Our Success](https://www.amazon.com/dp/B00AFPTSI0/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '6401d6c5de41b255e1ff56bc9448167e21425a35fc306aea1cb078e8c9f66420', 'hasty-treat-how-to-become-well-liked-at-work', '/shows/093 - Liked.md', '2023-10-16 20:06:56.740', '2023-10-27 15:57:44.949', 'HASTY'),
('syntax_podcast_show_00094', 94, 'Potluck - $100/hr × Redux Replacements × Full Stack Designers × JWT × VS Code Tips × More', '2018-11-21 14:00:00.053', 'https://traffic.libsyn.com/syntax/Syntax094.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - raising your rates, full stack designers, JWT, VS Code tips, and more.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## React in Action - Sponsor\n\n[React in Action by Mark Thomas from Manning Publications](https://www.manning.com/books/react-in-action) is a great way to learn React. It\'s a clearly written, example-rich book, introducing front-end developers to the React framework and related tools. Not everyone likes learning from a video. If that\'s you, [React In Action](https://www.manning.com/books/react-in-action) is a great book that covers everything you need to know. Also be sure to check out this page for [40% off all manning books and videos](http://deals.manning.com/webdev/).\n\n## Show Notes\n\n2:29\n\n* I listened to your episode on Freelancing and I was wondering how to justify an increase in my hourly rate. You mentioned that you just increased it to $100/hr and nobody griped, but I seem to have a steady stream of clients who want things for free or nearly free and I usually have that fear that if I charge them more, then I won\'t get the business. Thoughts?\n\n6:55\n\n* I\'ve started a YouTube web development channel. Recently, I was approached to produce content for money for another website. For some reason, I immediately thought I might be taken advantage of (I\'m pretty new and it\'s odd to be offered something like this so quickly, no?) if accepting. What do you think? Should I create content for a (small) website that I never heard of or continue with YouTube (or both)?\n\n14:00\n\n* I\'ve read on Twitter that React.Context can be a good replacement for Redux. Why?\n\n18:40\n\n* What\'s it like running a podcast?!\n\n24:03\n\n* I\'ve seen a rise in the term \"full-stack designer\". Is this a title you think will become a real thing? Someone capable of overseeing a project from concept to prototype? Thanks!\n\n27:36\n\n* What has been the most awkward situation you’ve been in as a dev?\n\n31:20\n\n* Do you have any good resources on JWT? I’m unclear when my front end needs to send what to my back end, to ensure my sites and only my sites can get the data requested from my server. Thanks for everything you do!\n\n35:34\n\n* How do you move selected text horizontally (or vertically) in VSCode? I\'ve seen it in Wes\' videos and I tried to ask him on Twitter, but I\'m sure that is a chore to keep up with. I\'ve googled a ton, but the only thing I found was an extension that adjusts indentation, which is not really what I\'m after.\n\n38:57\n\n* How do you recommend providing feedback on \"bad\" code to a developer more experienced than you, without coming off as an uppity, know-it-all junior who just read a bunch of textbooks??\n\n42:39\n\n* How do you set up an IP whitelist? I am just getting started managing databases and I am using Mongo Atlas. They require an IP whitelist for all connections. Developing from my computer is fine because I can just add my IP to the whitelist, but what do I do if I actually want to make my API or website public? Just whitelist everything? That sounds like a terrible idea...\n\n## Links\n* [useReducer](https://reactjs.org/docs/hooks-reference.html#usereducer)\n* [Full Stack Radio Ep 98: Ryan Chenkie - Securing Single Page Applications](http://www.fullstackradio.com/98)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Jelle’s Marble Runs](https://www.youtube.com/channel/UCYJdpnjuSWVOLgGT9fIzL0g)\n* Wes:\n  * [Good Quality Baking Sheet Pans](https://amzn.to/2FjrQVW)\n  * [Pre-cut Parchment Paper Sheets](https://amzn.to/2Dzli3F)\n\n## Shameless Plugs\n\n* [Scott\'s Pro Gatsby 2 Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://advancedreact.com/) - use the code SYNTAX for $10 off\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '264270b9ae6b4303fe798d13c7e52e818501992e5415d98c6c3855dafc3515e2', 'potluck-usd100-hr-redux-replacements-full-stack-designers-jwt-vs-code-tips-more', '/shows/094 - Potluck.md', '2023-10-16 20:06:56.778', '2023-10-27 15:57:44.988', 'TASTY'),
('syntax_podcast_show_00095', 95, 'Hasty Treat - Should you install a dependency or roll your own?', '2018-11-26 14:00:00.404', 'https://traffic.libsyn.com/syntax/Syntax095.mp3', '\nIn this Hasty Treat, Scott and Wes talk about installing dependencies vs rolling your own - the advantages and disadvantages, and how to know when to do either.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:15 - Reasons To roll your own\n\n* Learning Experience\n* Fun\n* Features\n* Add your own features\n* Lightweight - only use what you need\n\n8:08 - Reasons not to roll your own\n\n* Battle Tested\n* Actually Tested\n* Time\n* Money\n* Experience\n\n11:27 - Fork\n\n* Something needs extra features\n* Upstream your changes\n\n13:10 - Some Examples\n\n* Fetch + function vs Axios\n* Date functions vs Stack Overflow copy/paste\n* Lodash vs your own - try it with map/reduce/filter first, but lots of cases need Lodash\n\n## Links\n* [React PowerPlug](http://rena.to/react-powerplug/#/)\n* [Lodash](https://lodash.com/)\n* [Axios](https://github.com/axios/axios)\n* [Stack Overflow](https://stackoverflow.com/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b2b61999fed2b198140accc9328696342a2a801de13f25403f36221ca73267ae', 'hasty-treat-should-you-install-a-dependency-or-roll-your-own', '/shows/095 - Dependency.md', '2023-10-16 20:06:56.825', '2023-10-27 15:57:45.034', 'HASTY'),
('syntax_podcast_show_00096', 96, 'Holiday Gift Guide', '2018-11-28 14:00:00.637', 'https://traffic.libsyn.com/syntax/Syntax096.mp3', '\nIn this episode Wes and Scott bring you their holiday gift guide - things, ideas or experiences that would make great gifts for any developer, ranging from a few bucks to a few hundred bucks.\n\n## Contentful - Sponsor\n\nContentful is a great way to manage your data. Update once and publish everywhere. Contentful gives you a ton of flexibility and reliability and everything you need to build excellent front-end content without having to worry about the back-end of your site. Check out [contentful.com/syntaxfm](https://www.contentful.com/syntaxfm) and get a free pair of socks!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:57 - Foodie Gifts\n\n- Hot Sauce\n  - [Merfs](https://amzn.to/2Bm9lMl)\n  - [Every Cholula Hot Sauce](https://amzn.to/2Qdy3H2)\n  - [Jalapeno from Trader Joes](https://amzn.to/2BnC83v)\n  - [Blue Top Creamy Buffalo](https://amzn.to/2S4XzeS)\n- [Everything but the bagel Spice](https://amzn.to/2Ttt7Nc)\n- [Loose leaf Teas from Teahaus.com](https://teahaus.com)\n- [Wes’ Tea Steeper](https://amzn.to/2DPA4DQ)\n- [Scott’s Tea Mug & Steeper](https://amzn.to/2DR51HN)\n- Flavored Salts (No link, just go find them)\n- [Savory Spice Shop](https://www.savoryspiceshop.com)\n- Rainbeers - make it yourself\n- [Beer Making Kit](https://amzn.to/2PK8TAJ)\n- [Umai Dry Steak Aging and Charcuterie Bags](https://amzn.to/2DOQEDA)\n\n11:27 - Experiences\n\n- Knife Skills Class\n- Butchering Class\n- Cooking Class\n- Float tank Subscription\n- Massages\n\n18:15 - Subscriptions\n\n- [Headspace](https://headspace.com)\n- [Spotify](https://spotify.com)\n- [HBO Go](https://HBO.com)\n- [YouTube TV](https://youtube.com/tv)\n- [MeUndies Underwear Subscription](http://getcomfy.in/k4Jlj)\n- [Memrise](https://www.memrise.com/)\n- [LastPass](https://lastpass.com/f?1384956)\n- Magazines\n- [Mantry Crates](https://mantry.com/pages/gift-subscriptions)\n- [Kids Crates](https://www.kiwico.com/)\n\n23:07 - Books / Audible\n\n- [BadBlood](https://amzn.to/2DOHHdu)\n- [Beat the bank - for Canadians Only](https://amzn.to/2S5HpSr)\n- [American Kingpin](https://amzn.to/2qTMTnW)\n- [Rich Dad / Poor Dad](https://amzn.to/2qYUrpw)\n- [Kingpin: How One Hacker Took Over the Billion-Dollar Cybercrime Underground](https://amzn.to/2Q55tYz)\n- [Anything You Want](https://amzn.to/2OSOGDf)\n- [Essentialism](https://amzn.to/2Fy4bRR)\n- [The E-Myth Revisited](https://amzn.to/2DznDe7)\n\n29:47 - Clothes\n\n- Uniqlo Jeans - w/ elastic\n- [Carhart Beanie (TOQUE)](https://amzn.to/2FydiSu)\n- Naked and Famous Raw Selvedge Denim Jeans\n  - [Skinny Guy](https://rstyle.me/n/dbyzzbcdguf)\n  - [Weird Guy](https://rstyle.me/n/dbyzw6cdguf)\n- [Nudie Raw Selvedge Denim “thin Finn”](https://amzn.to/2OTBH4c)\n- [“Unbranded” Raw Denim](https://rstyle.me/n/dby44icdguf)\n- [Custom Leather Belt](http://gavereleather.net)\n- [TNF Fanorak Windbreaker](https://rstyle.me/n/dby65tcdguf)\n- Hoodies\n  - [Adidas Black-on-black NMD crewneck](https://amzn.to/2FvB7dp)\n  - [Champion Hoodie](https://rstyle.me/n/dby76scdguf)\n- Sneakers\n  - [Nike Airmax 270](https://rstyle.me/n/dby8becdguf)\n  - Jordans DonTrip\n- [RayBans with mirrors](https://rstyle.me/n/dby8ircdguf)\n  - [Original Wayfarer Sunglasses](https://rstyle.me/n/dby832cdguf)\n- [Under Armour Boxer Jock Underwear](https://rstyle.me/n/dby98jcdguf)\n- [Reebok Boxer Brief Underwear](https://amzn.to/2DwNGTc)\n- [dvlpr.io Merch](https://dvlpr.io)\n\n39:08 - Gadgets\n\n- Mechanical Keyboards\n  - [CTRL Keyboard](https://www.massdrop.com/buy/massdrop-ctrl-mechanical-keyboard)\n  - [WASD Keyboard](https://amzn.to/2OUPDLn)\n  - [Code Keyboard](https://amzn.to/2DNsPMx)\n  - [Ergodox](https://amzn.to/2DP4BRT)\n- [10W qi Wireless Fast Charger Charging Pad](https://amzn.to/2S5IXMt)\n- USB C Gadgets\n  - [8-in-1 USB Type-C Hub with HDMI](https://amzn.to/2KnpW5w)\n  - [USB C Hub](https://amzn.to/2OWOcMm)\n  - [LaCie Rugged USB-C Hard Drive](https://amzn.to/2FveUwo)\n- [Koomus Car CD Slot Magnet Mount for your phone](https://amzn.to/2Fx1q35)\n- [Anker Portable Battery](https://amzn.to/2DN0Yw3)\n- Extra Long Braided Phone Cables\n  - [Lightning](https://amzn.to/2KnsX5Q)\n  - [Micro USB](https://amzn.to/2S56wVM)\n  - [USB-c](https://amzn.to/2Fyg620)\n- Anker USB Power Block\n  - [4 ports with Fast Charge](https://amzn.to/2DBCAN4)\n  - [6 ports with Fast Charge](https://amzn.to/2PFvIp9)\n- Wifi Hotspot\n  - [SkyRoam Solis](https://www.skyroam.com?rfsn=1346968.ac598)\n- [Magnet Breakway USB-C Cable that handles 87w](https://amzn.to/2DRyukT)\n- [Tello Programable drone](https://amzn.to/2TvaKYc)\n- High end mini screwdrivers\n  - [MaxCraft 7-in-1](https://amzn.to/2Kl5Fxj)\n  - [iFixIt 64 bit set](https://amzn.to/2DQ4LIG)\n\n48:00 - Smart Home\n\n- [Google Home](https://store.google.com/ca/product/google_home)\n- [Ring Doorbel](https://amzn.to/2S5VaRj)\n- [Nest Doorbell](https://amzn.to/2QcwzNl)\n- [Ring Floodlight Security Camera](https://amzn.to/2KlKWJL)\n- [EcoBee](https://amzn.to/2Tt7PPH)\n- [WeMo Plugs](https://www.amazon.com/WeMo-4T-T3X2-Y1HT-Light-appliances-Control/dp/B0776YH29B)\n- [TP Link Smart Plug](https://amzn.to/2OVh1J5)\n- [Leviton Smart Wifi Dimmers](https://amzn.to/2S7uv6L)\n- [LIFX Bulbs](https://amzn.to/2OZl1sk)\n- [Sonoff $5 wifi Switch](https://amzn.to/2Q5QcGX)\n\n54:40 - Grooming and Wellness\n\n- [Seki clippers](https://amzn.to/2PGeKHa)\n- CBD balm\n- A nice comb\n- [Burts Bees Lip Balm in a tin](https://amzn.to/2KpAb9C)\n\n58:57 - High End\n\n- [Apple AirPods](https://amzn.to/2PINBmG)\n- [Bose QC 35 Wireless Headphones](https://amzn.to/2Kkmw3n)\n- [Samsung QLED TV - very high end](https://amzn.to/2Q6SuWg)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Typescript Course](https://LevelUpTutorials.com/pro)\n* [Wes\' updated course platform](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a03b39e2e901a55367e39dbdd8ae65282f418646a76ab35955591f0a9379eb5f', 'holiday-gift-guide', '/shows/096 - Gift Guide.md', '2023-10-16 20:06:56.861', '2023-10-27 15:57:45.070', 'TASTY'),
('syntax_podcast_show_00097', 97, 'Hasty Treat - Uses for CSS Variables', '2018-12-03 14:00:00.958', 'https://traffic.libsyn.com/syntax/Syntax097.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS variables, a.k.a CSS Custom Properties - why you might want to use them, why they\'re better than various preprocessor\'s variables, and pitfalls to watch out for and avoid.\n\n## Kyle Prinsloo\'s Freelancing & Beyond — Sponsor\n\nKyle Prinsloo teaches you everything you need to know about freelancing, including how to quit your job, earn a side-income and start taking control of your life. Check it out at [https://studywebdevelopment.com/freelancing](https://studywebdevelopment.com/freelancing.html) and use the coupon code \"syntax\" at checkout to get 25% off.\n\n## Show Notes\n\n3:25 - What\n\n- `--example-name`, represent custom properties\n- called using `var()`\n- Overwrite with a more specific style\n- Use JavaScript to append .style.setPropert(\n\n- How are they scoped?\n  - Just like normal CSS\n  - Can be set on :root {}\n  - Can be set on any element down\n\n9:10 - Why\n\n- Uses:\n\n  - Can make more sense if used semantically\n  - var(--accent) vs var(--yellow)\n\n- Independent values for things that can’t be broken up:\n\n  - box-shadow: 2px 2px 2px 2px red\n  - transform: rotate(var(--rotate)) scale(2);\n\n- Inline properties can be picked up by regular CSS (color, size, etc.)\n\n  - `<p style=”--fg:red;”>hey</a>`\n\n- Themes that can easily be changed at runtime for entire app\n\n19:15 - Calculations\n\n- You can use them inside of calc()\n- Animations\n\n20:10 - Bummers\n\n- Not super well supported just yet (IE 11)\n- No good fallback other than manual fallback\n- Syntax - Old Browsers, Fallbacks and Polyfills series\n  - [Part 1](https://syntax.fm/show/083/hasty-treat-old-browsers-fallbacks-and-polyfills-part-1)\n  - [Part 2](https://syntax.fm/show/085/hasty-treat-old-browsers-fallbacks-and-polyfills-part-2)\n  - [Part 3](https://syntax.fm/show/087/hasty-treat-old-browsers-fallbacks-and-polyfills-part-3)\n- [PostCSS Custom Properties](https://github.com/postcss/postcss-custom-properties)\n\n## Tweet us your tasty treats!\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f10137aafcb74413f292f0af11bb0b4e8ea1b6dfb92eb798301a324ffef954c3', 'hasty-treat-uses-for-css-variables', '/shows/097 - CSS Variables.md', '2023-10-16 20:06:56.895', '2023-10-27 15:57:45.110', 'HASTY'),
('syntax_podcast_show_00098', 98, 'The State of JavaScript 2018', '2018-12-05 14:00:00.079', 'https://traffic.libsyn.com/syntax/Syntax098.mp3', '\nIn this episode Wes and Scott are joined by their first ever guest on the show: Sacha Greif. Sacha is one of the makers of the [State of Javascript](https://stateofjs.com/) - the topic for today\'s show. Wes, Scott and Sacha discuss the results of 2018\'s survey, what they think, and implications for the industry.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Sacha Greif](https://twitter.com/SachaGreif)\n\n## Show Notes\n\n1:48\n\n* What is the State of JS survey\n\n3:58\n\n* The tech behind State of JS\n\n12:55\n\n* How was the data collected?\n\n16:38\n\n* JavaScript Flavors\n\n23:14\n\n* Frameworks\n\n31:49\n\n* DataLayer\n\n34:53\n\n* Backend\n\n40:09\n\n* Other Tools\n\n44:37\n\n* Opinions\n\n47:48\n\n* Awards\n\n49:58\n\n* Criticism\n\n## Links\n* [Nivo](https://nivo.rocks/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Netlify](https://www.netlify.com/)\n* [Reason](https://reasonml.github.io/)\n* [Parcel](https://en.parceljs.org/)\n* [Relay](https://facebook.github.io/relay/)\n* [Express](https://expressjs.com/)\n* [KeystoneJS](https://keystonejs.com/)\n* [Ghost](https://ghost.org/)\n* [Jest](https://jestjs.io/)\n* [GraphQL](https://graphql.org/)\n* [VueX](https://vuex.vuejs.org/)\n* [Storybook](https://storybook.js.org/)\n* [Real Analysis of Angular, React, and Vue](https://youtu.be/UnEPBQvkNrg)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Sacha: DIY and woodworking\n* Wes: [Alex French Guy Cooking](https://www.youtube.com/user/FrenchGuyCooking)\n* Scott: [Silverback Open 2018](https://www.youtube.com/playlist?list=PLipSUxfAla6D257xn14FgxHaFUyKDMY14)\n\n## Shameless Plugs\n\n* [Sacha -  Vulcan.js](http://vulcanjs.org/)\n* [Scott - Level Up Pro](https://www.leveluptutorials.com/pro)\n* [Wes - All courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '60c338e004ec5046daa21bcb37711cd098087fabf7e01ee623a4b5344164bc0b', 'the-state-of-javascript-2018', '/shows/098 - State of Javascript.md', '2023-10-16 20:06:56.934', '2023-10-27 15:57:45.154', 'TASTY'),
('syntax_podcast_show_00099', 99, 'Hasty Treat - Costs of Running a Business', '2018-12-10 14:00:00.837', 'https://traffic.libsyn.com/syntax/Syntax099.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the costs of running a business when you\'re a solopreneur or solo founder.\n\n## Contentful - Sponsor\n\nContentful is a great way to manage your data. Update once and publish everywhere. Contentful gives you a ton of flexibility and reliability and everything you need to build excellent front-end content without having to worry about the back-end of your site. Check out [contentful.com/syntax](https://www.contentful.com/syntax/) and get a free pair of socks!\n\n## Show Notes\n\n3:48 - Email\n\n* [GSuite](https://gsuite.google.com/)\n* [Missive](https://missiveapp.com/)\n* [Drip](https://www.drip.com/)\n* [Postmark](https://postmarkapp.com/)\n* [Mailchimp](https://mailchimp.com/)\n* [Mandrill](https://mandrill.com/)\n* [SendGrid](https://sendgrid.com/)\n* [Mailgun](https://www.mailgun.com/)\n\n10:44 - Transactional Costs\n\n* [Stripe](https://stripe.com/)\n* [PayPal](https://www.paypal.com)\n* [Braintree](https://www.braintreepayments.com/)\n\n12:31 - Software\n\n* [Sketch](https://www.sketchapp.com/)\n* [Figma](https://www.figma.com/)\n* [Screenflow](https://www.telestream.net/screenflow)\n* [iShowU](https://www.shinywhitebox.com/ishowu-studio-2)\n* [DaVinci](https://www.blackmagicdesign.com/products/davinciresolve/)\n* [Notion](https://www.notion.so/?r=f30ad6f0d28441729bcea76a77549938)\n* [Todoist](https://todoist.com/)\n* [Things](https://culturedcode.com/things/)\n* [Principle For Mac](http://principleformac.com/)\n* [Textexpander](https://textexpander.com/)\n* [Transmit](https://panic.com/transmit/)\n* [Cyberduck](https://cyberduck.io/)\n\n17:03 - Services\n\n* PO Box\n\n17:18 - Domains\n\n* [Hover](https://www.hover.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Name.com](https://www.name.com/)\n* [Gandi](https://www.gandi.net/)\n\n19:30 - Backup\n\n* NAS\n* [Dropbox](https://www.dropbox.com)\n* [Backblaze](https://www.backblaze.com/)\n* [S3](https://aws.amazon.com/s3/)\n\n22:12 - Labor\n\n* Assistant\n* Part-time developer\n* Contractors for projects\n\n24:53 - Insurance\n\n* Prescriptions\n* Dental\n* Optical\n* Critical illness\n* Home insurance is higher because of business\n\n26:51 - Professional\n\n* Accountant\n* Lawyer\n* Bookkeeper\n* [TransferWise](https://transferwise.com/us/)\n\n29:08 - Hosting\n\n* CDNs\n* [Galaxy](https://www.meteor.com/hosting)\n* [Heroku](https://www.heroku.com/)\n* [Dokku](http://dokku.viewdocs.io/dokku/)\n* [Netlify](https://www.netlify.com/)\n* [Compose](https://www.compose.com/)\n* [Vimeo](https://vimeo.com/)\n* [Amazon S3](https://aws.amazon.com/s3/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Now.sh](https://now.sh)\n* [Bluehost](https://www.bluehost.com/)\n* [mlab](https://mlab.com/)\n\n34:16 - Travel\n\n* Taxi / Hotel\n* Dinner\n* Transportation\n* [Uber](https://www.uber.com/)\n\n## Links\n* [Codepen Radio - Software We Pay For](https://blog.codepen.io/2018/11/27/201-software-we-pay-for/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5c2e6457e7f7a6f3922f5519d0e060e9209fcf6aa797825633d223bb50357620', 'hasty-treat-costs-of-running-a-business', '/shows/099 - Running a Business.md', '2023-10-16 20:06:56.979', '2023-10-27 15:57:45.290', 'HASTY'),
('syntax_podcast_show_00100', 100, 'Not a Clip Show - Episode 100!', '2018-12-12 14:00:00.959', 'https://traffic.libsyn.com/syntax/Syntax100.mp3', '\nTo celebrate episode 100, Wes and Scott are talking about Syntax - their most popular episodes, stats, Q&A, and a bunch of cool stuff about what it\'s been like making this show for 100 episodes.  \n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:45 - Celebrating 100 episodes\n\n04:18 - Our first episode \n\n* [Syntax001 - React Tools](https://syntax.fm/show/001/react-tools)\n\n06:23 - Our first sponsor \n\n* [Delicious Brains](https://deliciousbrains.com/)\n\n09:37 - Most popular episodes\n\n* 10 - [Syntax074 - 11 Habits of Highly Effective Developers](https://syntax.fm/show/074/11-habits-of-highly-effective-developers)\n* 09 - [Syntax039 - Is jQuery Dead?](https://syntax.fm/show/039/is-jquery-dead)\n* 08 - [Syntax046 - What\'s New in Javascript](https://syntax.fm/show/046/what-s-new-in-javascript)\n* 07 - [Syntax048 - VS Code Round Two](https://syntax.fm/show/048/vs-code-round-two)\n* 06 - [Syntax050 - Progressive Web Apps](https://syntax.fm/show/050/progressive-web-apps)\n* 05 - [Syntax018 - All About CSS Grid](https://syntax.fm/show/018/all-about-css-grid)\n* 04 - [Syntax051 - Our Workflows: Design, Development, Git, Deployment](https://syntax.fm/show/051/our-workflows-design-development-git-and-deployment)\n* 03 - [Syntax066 - The React Episode](https://syntax.fm/show/066/the-react-episode)\n* 02 - [Syntax043 - 20 JavaScript Array and Object Methods to make you a better developer](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n* 01 - [Syntax044 - How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n\n21:35 - Top countries\n\n* Just passed 3 million downloads\n* 10 - Poland - 38,731 downloads\n* 09 - Brazil - 40,475 downloads\n* 08 - Netherlands - 47,601 downloads\n* 07 - India - 50,724 downloads\n* 06 - Sweden - 55,378 downloads\n* 05 - Australia - 80,654 downloads\n* 04 - Germany - 109,842 downloads\n* 03 - Canada - 138,250 downloads\n* 02 - United Kingdom - 231,835 downloads\n* 01 - United States - 1,220,519 downloads\n\n27:34 - Top players \n\n* AppleCoreMedia\n* Overcast\n* Chrome\n* Pocket Casts\n* iTunes\n\n30:35 - Lessons learned about sponsors\n\n* Pays the bills - editing, hosting, etc…\n  * [Podcast Royale](https://podcastroyale.net) - Podcast production\n  * [Libsyn](https://libsyn.com/) - Podcast hosting\n* They want hard numbers\n* Conversions are hard to track\n* It’s really cool companies and users that enjoy the product hook up\n* How do we get them?\n\n35:10 - Favorite episodes\n\n* Wes - [Syntax043 - 20 JavaScript Array and Object Methods to make you a better developer](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n* Scott - [Syntax044 - How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n\n38:49 - Q&A \n\n* Q: What\'s your favorite soundboard sound?\n* Q: What\'s your recording process like? Do you each record your streams locally then edit them together or are there any \"hax\" you guys have cooked up as developers?\n  * A: Pay someone who is good at editing\n  * We both have good recording gear\n  * We record separate files and send them our production team, [Podcast Royale](https://podcastroyale.net), for editing\n  * We do show notes in [Dropbox Paper](https://paper.dropbox.com), which are also edited by [Podcast Royale](https://podcastroyale.net)\n* Q: Does Scott practice his segues, or do they just come to him on the fly?\n  * A: On the fly 😎\n* Q: Although I am all for peace, why did you choose \"peace\" as your outro statement?\n  * A: It was a random note from Wes in the first episode and we stuck with it\n* Q: how did you meet each other and decided to start the podcast?\n  * A: We both released a course around the same time with the same name - we started talking and the rest is history\n  * [Syntax007 - Scott Tolinski Origin Story](https://syntax.fm/show/007/scott-tolinski-origin-story)\n  * [Syntax008 - Wes Bos Origin Story](https://syntax.fm/show/008/wes-bos-origin-story)\n\n51:20 - Most asked questions\n\n* What episode was it that you  ______ ?\n* Can my boss come on the show and talk about bitcoin?\n* Can you sick pick my thing?\n* Can you do an episode on VueJS?\n* Can you do an episode on Angular?\n* NO EP TODAY?\n\n54:20 - Random thoughts\n\n* Neat to have community - lots of experts \n* Twitter is great\n* Sales of our own products\n  * Transformed Level Up Tuts\n* Doing fitness, hobbies, and life as a developer is fun\n* Learned a lot from researching shows and from community feedback\n* Different voices can give different breakthroughs\n\n57:10 - Future of Syntax\n\n* No. 1 goal is to always be a fun, helpful show\n* Not going to become a promotional tour stop\n* Maybe more interviews\n* Easy to listen to and and understand\n\n## Links\n\n* [Netlify](https://netlify.com/)\n* [Podcast Royale](https://podcastroyale.net)\n* [Adam Clark](https://avclark.com)\n* [Libsyn](https://libsyn.com/)\n* [Dropbox Paper](https://paper.dropbox.com)\n* [Studio 3T](https://studio3t.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Wes: [MongoDB Compass](https://www.mongodb.com/products/compass)\n* Scott: [Notion](https://www.notion.so/?r=f30ad6f0d28441729bcea76a77549938)\n\n## Shameless Plugs\n\n* [Scott - Level Up Pro](https://www.leveluptutorials.com/pro)\n* [Wes - All courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c3e47bec4387d29955f4268b52ae83359edff614e35e82a1d54f66a6bc38a8cb', 'not-a-clip-show-episode-100', '/shows/100 - Episode 100.md', '2023-10-16 20:06:57.014', '2023-10-27 15:57:45.333', 'TASTY'),
('syntax_podcast_show_00101', 101, 'Hasty Treat - Where are they now?! Gulp, Grunt, Bower, Backbone and Compass', '2018-12-17 14:00:00.601', 'https://traffic.libsyn.com/syntax/Syntax101.mp3', '\nIn this Hasty Treat, Scott and Wes talk about libraries that have been super hot in the past, but not so much any more. \n\n## Contentful - Sponsor\n\nContentful is a great way to manage your data. Update once and publish everywhere. Contentful gives you a ton of flexibility and reliability and everything you need to build excellent front-end content without having to worry about the back-end of your site. Check out [contentful.com/syntax](https://www.contentful.com/syntax/) and get a free pair of socks!\n\n## Show Notes\n\n4:14\n\n* Grunt / Gulp\n\n8:56\n\n* Backbone / Marionette\n\n13:00\n\n* Bower / Components\n\n15:46\n\n* Compass\n\n## Links\n* [Grunt](https://gruntjs.com/)\n* [Gulp](https://gulpjs.com/)\n* [Backbone](http://backbonejs.org/)\n* [Marionette](https://marionettejs.com/)\n* [Bower](https://bower.io/)\n* [Components](http://component.github.io/)\n* [Compass](http://compass-style.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '20c7fa1ce5be5d75d084482da6507193d500a6d2bd10a9ab686701323f3b5f88', 'hasty-treat-where-are-they-now-gulp-grunt-bower-backbone-and-compass', '/shows/101 - where are they now.md', '2023-10-16 20:06:57.052', '2023-10-27 15:57:45.371', 'HASTY'),
('syntax_podcast_show_00102', 102, 'Potluck - Typescript × E-commerce platforms × Job-hopping × Working for agencies × more', '2018-12-19 14:00:00.031', 'https://traffic.libsyn.com/syntax/Syntaxt102.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - thoughts on Typescript, e-commerce platforms vs custom, working for agencies, job-hopping and more!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Vue.js In Action - Sponsor\n\n[Vue.js in Action from Manning Publications](https://deals.manning.com/webdev) is a great way to learn Vue.js. If you\'re looking for a book that will teach you Vue.js from start to finish, this is the one. As a Syntax listener, you can get 40% off all their books and courses by visiting [deals.manning.com/webdev](https://deals.manning.com/webdev) and using the coupon code syntax40 at checkout.\n\n## Show Notes\n\n1:20\n\n* How do you distinguish between normal and virtual pixels on high dpi devices. How do you call Pixels? Which tools do you use for optimizing Images?   \n\n5:02\n\n* What are your thoughts on TypeScript (and selfishly, I\'d like to learn about using it with React)? Any temptation to try it out if you\'re not already doing so? Why or why not? Any resources you\'d like to share on TypeScript?\n\n8:35\n\n* I have heard you guys say good things about Digital Ocean before, but am reading a lot of bad reviews about them on various websites. Are these just frustrated developers or is there any merit to these claims?\n\n12:48\n\n* If you were to build an eCommerce store, given that your business requirements specify that custom functionality is needed, would it be smart to roll your own solution or use Magento/Shopify/Woocommerce? If the later, what is the developer experience like? Which has the greater ability to implement custom functionality for server and client side code?\n\n19:50\n\n* I feel like I’m pretty \"bos\" at starting projects but so terrible at finishing them. As people who finish courses and projects all the time, what is your advice for getting to that finish line?\n\n23:32\n\n* Could you please explain how you organize your files? What is the folder structure you use for both your projects and other documents/videos and stuff?\n\n31:38\n\n* You guys mention working for \"agencies\" in the past. As a freelance web developer, what\'s the best way to find these agencies, and to be employed by them? Also, can you explain what \"agencies\" are? \n\n38:14\n\n* I once read an interview Wes gave in which he mentioned that frequently changing jobs is the best way to get salary increases. Do you both believe that to be true? Is job-hopping a bad thing? Is the criticism of it justified? \n\n41:53\n\n* If I choose to use Next.js, does that mean I won’t be able to use new React features like hooks and suspense until/if the Next.js team implements those? \n\n43:12\n\n* When do you use `<React.Fragment>` and when do you use `<div>` to wrap your many returned components from `render()`?\n\n## Links\n* [Devon Govett tweet about Typescript](https://twitter.com/devongovett/status/1069317990435311617)\n* [Digital Ocean](https://digitalocean.com)\n* [Magento](https://magento.com/)\n* [Shopify](https://www.shopify.com/)\n* [WooCommerce](https://woocommerce.com/)\n* [Reaction Commerce](https://www.reactioncommerce.com)\n* [Snipcart](https://snipcart.com/)\n* [Next.js](https://nextjs.org/)\n* [Gatsby.js](https://www.gatsbyjs.org/)\n* [True Grit Texture Supply](https://www.truegrittexturesupply.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Undertale](https://undertale.com/)\n* Wes: [Ghostly Pixels](https://ghostlypixels.com)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' YouTube Channel](https://www.youtube.com/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ad091e64e7476b0cc435d5ac65dc751931799c9e3ce14da555ed3c031919dc69', 'potluck-typescript-e-commerce-platforms-job-hopping-working-for-agencies-more', '/shows/102 - Potluck.md', '2023-10-16 20:06:57.096', '2023-10-27 15:57:45.413', 'TASTY'),
('syntax_podcast_show_00103', 103, 'Hasty Treat - Where are they now? Part 2', '2018-12-24 14:00:00.489', 'https://traffic.libsyn.com/syntax/Syntax103.mp3', '\nIn this Hasty Treat, Scott and Wes continue their discussion of libraries and tech that where super hot in the past, but not so much any more. \n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1). \n\n## Show Notes\n\n3:40 - jQuery UI / jQuery Mobile\n\n* [jQuery UI](https://jqueryui.com/)\n* [jQuery Mobile](https://jquerymobile.com/)\n* [Sencha Touch](https://www.sencha.com/products/touch/)\n\n6:10 - Flash / Silverlight\n\n* [Flash](https://www.adobe.com/products/flashplayer.html)\n* [Cufon](http://cufon.shoqolate.com/generate/)\n* [Silverlight](https://www.microsoft.com/silverlight/)\n* [Netflix](https://netflix.com/)\n* [Happy Gilmore](https://www.imdb.com/title/tt0116483/)\n* [The Wedding Singer](https://www.imdb.com/title/tt0120888/)\n\n10:54 - Grid systems\n\n* [960.gs](https://960.gs/)\n* [Golden](https://jonikorpi.com/golden-grid-system/)\n* [Susy](https://oddbird.net/susy/)\n* [Bootstrap](https://getbootstrap.com/)\n* [Foundation](https://foundation.zurb.com/)\n\n16:02 - CoffeScript\n\n* [CoffeScript](https://coffeescript.org/)\n* [Compass](http://compass-style.org/)\n\n18:18 - Underscore.js\n\n* [Underscore.js](https://underscorejs.org/)\n* [Lodash](https://lodash.com/)\n* [jsPerf](https://jsperf.com/)\n\n20:04 - Less CSS\n\n* [Less CSS](http://lesscss.org/)\n* [Vue.js](https://vuejs.org/)\n* [Drupal](https://www.drupal.org/)\n* [Cappuccino](http://www.cappuccino-project.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd3a4ec5de4553edfe5298324acb18d7abc0ccd680961e26ab2ecf213527b13fb', 'hasty-treat-where-are-they-now-part-2', '/shows/103 - where are they now part 2.md', '2023-10-16 20:06:57.137', '2023-10-27 15:57:45.462', 'HASTY'),
('syntax_podcast_show_00104', 104, 'CSS Layout', '2018-12-26 14:00:00.650', 'https://traffic.libsyn.com/syntax/Syntax104.mp3', '\nIn this episode Wes and Scott are talking all about CSS layout - how it works, things to watch out for and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## CSS In Depth and In Motion - Sponsor\n\n[CSS in Depth in Motion from Manning Publications](https://deals.manning.com/webdev) is a great way to master CSS. Modern CSS can handle a dizzying array of styles and effects without external frameworks, and this liveVideo course from Manning Publications will get you there. As a Syntax listener, you can get 40% off all their books and courses by visiting [deals.manning.com/webdev](https://deals.manning.com/webdev) and using the coupon code syntax40 at checkout.\n\n## Show Notes\n\n4:15\n\n* When to use position fixed/static/absolute/relative/sticky, etc.\n\n15:18\n\n* When to use height, width, max-height, max-width, top, bottom, left, right, etc.\n\n21:28\n\n* What about relationships between containers and their children?\n\n27:37\n\n* What about positioning behaviors of elements like `<img>`, `<iframe>`, `<video>`, etc.?\n\n30:09\n\n* Floating and clearing\n\n35:55\n\n* Flexbox, Grid and responsive design\n\n36:58\n\n* Mobile-first or desktop-first?\n\n41:20\n\n* Viewport units - vw, vh, vmin, vmax, etc\n\n## Links\n\n* [Keycode.info](http://keycode.info/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Last Seen Podcast](https://www.wbur.org/lastseen)\n* Wes: [Flying a DJI Tello Drone with React and Node.js](https://wesbos.com/drone-javascript/)\n\n## Shameless Plugs\n\n* [Scott\'s Design Systems Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '1cccf229a72c51a7cdd7bbaa143bfd5cb1c4d192460b434ee324c2c43239d95b', 'css-layout', '/shows/104 - CSS Layout.md', '2023-10-16 20:06:57.173', '2023-10-27 15:57:45.507', 'TASTY'),
('syntax_podcast_show_00105', 105, 'Hasty Treat - CSS and JS Pointer Events', '2018-12-31 14:00:00.065', 'https://traffic.libsyn.com/syntax/Syntax105.mp3', '\nIn this Hasty Treat, Scott and Wes talk about pointer events in CSS and JS - what they are, their differences, why you may want to use them, potential downfalls and more! \n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1). \n\n## Show Notes\n\n3:24\n\n* CSS pointer events\n\n10:50\n\n* JavaScript pointer events\n\n14:24\n\n* What are pointer events\n\n17:56\n\n* Browser support\n\n## Links\n* [CSS pointer events](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events)\n* [JS pointer events](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events)\n* [Pointer events support in WebKit](https://webkit.org/status/#?search=pointer%20events)\n* [Pointer events Polyfill](https://github.com/jquery/PEP)\n* [Wes\' Javascript 30 Course](https://javascript30.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '82847d1b6466cdd999ccc388f9a69a6aa7c9eec026181323c8fc33cfba7e2afb', 'hasty-treat-css-and-js-pointer-events', '/shows/105 - Pointer Elements.md', '2023-10-16 20:06:57.205', '2023-10-27 15:57:45.549', 'HASTY'),
('syntax_podcast_show_00106', 106, 'A Look Forward to 2019', '2019-01-02 14:00:00.727', 'https://traffic.libsyn.com/syntax/Syntax106.mp3', '\nIn this episode Wes and Scott take a look back at 2018 as well as a look forward to what\'s coming in 2019. \n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## CSS In Depth and In Motion - Sponsor\n\n[Electron in Action from Manning Publications](https://deals.manning.com/webdev) guides you, step-by-step, as you learn to build cross-platform desktop applications that run on Windows, OSX, and Linux. As a Syntax listener, you can get 40% off all their books and courses by visiting [deals.manning.com/webdev](https://deals.manning.com/webdev) and using the coupon code syntax40 at checkout.\n\n## Show Notes\n\n3:00 - What was hot in 2018?\n\n* Tooling got easier\n* GraphQL got easier and more accessible\n* New GraphQL companies left and right\n* CSS has gotten more awesome\n* React\n* Improvement in React Dev Tools\n* JavaScript frameworks overall\n* Edge adopting Chrome engine\n* Microsoft bought Github\n* Vue continues to impress and evolve\n* VS Code continued to get amazing\n\n31:29 - Predictions for 2019\n\n* Headless CMS game is going to get really real\n* We\'re gonna see rails for JavaScript start making some noise\n* React will continue to see growth\n* Design tools will get more code-y (Figma, etc.)\n* VueJS will continue to see growth\n* Developer Experience Tools will continue to get easier\n* Wasm\n* Code splitting easier\n* ES6 Modules in Node\n* Server Side Hot reloading\n\n41:00 - Scott\'s Year in Review\n\n* Released 12 courses\n* Major growth in Level Up as a platform\n* Hired first employees to work and grow site\n* Greatly improved quality and video production\n* Gave first conf talks and spoke internationally\n\n44:03 - Wes\' Year in Review\n\n* Released two courses - CSS Grid and Advanced React\n* Started work on JavaScript course\n* Delegated lots of development to contractor\n* Continued to work well with assistant\n* Spoke at lots of confs\n* Live Syntax!\n* Grew Instagram\n* Continued hot tips on twitter\n\n47:00 - BIG ANNOUNCEMENT\n\n* We\'re both having babies!\n\n48:09 - Wes\' Goals for 2019\n\n* Keep doing what I\'m doing!\n* New Website!\n* JavaScript course\n* Platform upgrades - been in the works for months - working on a faster rollout\n* CSS course? VS Code course? More React?\n* 8 YouTube Videos\n* Instagram to 30k\n* Parental Leave\n\n52:26 - Scott\'s Goals for 2019\n\n* Courses\n* First non-Scott LUT courses (big plans / announcements here )\n* Parental Leave\n* Major platform updates that are stuck in bottleneck\n* More hires, more growth\n* More free content\n* More teaching from real world code\n* Codebase to Hooks & Suspense\n\n## Links\n\n* [Next.js](https://nextjs.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Parcel](https://parceljs.org/)\n* [Hasura](https://hasura.io/)\n* [Prisma](https://www.prisma.io/)\n* [TakeShape](https://www.takeshape.io/)\n* [GraphCMS](https://graphcms.com/)\n* [Contentful](https://www.contentful.com/)\n* [WPGraphQL](https://www.wpgraphql.com/)\n* [Apollo](https://www.apollographql.com/)\n* [Github](https://github.com/)\n* [VS Code](https://code.visualstudio.com/)\n* [Microsoft Edge](https://www.microsoft.com/en-us/windows/microsoft-edge)\n* [WordPress](https://wordpress.org/)\n* [Svelte](https://svelte.technology/)\n* [Vue.js](https://vuejs.org/)\n* [Syntax 067: Goal Setting](https://syntax.fm/show/067/hasty-treat-goal-setting)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Fake or Fortune?](https://en.wikipedia.org/wiki/Fake_or_Fortune%3F)\n* Wes: [Heavyweight](https://www.gimletmedia.com/heavyweight)\n\n## Shameless Plugs\n\n* [Scott\'s new course on design systems](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '060ab1008d9ef17eeec66fd4bba8a140db1a87c760ee8f880c839baa45ea6331', 'a-look-forward-to-2019', '/shows/106 - Year in Review.md', '2023-10-16 20:06:57.249', '2023-10-27 15:57:45.591', 'TASTY'),
('syntax_podcast_show_00107', 107, 'Hasty Treat - CSS Units', '2019-01-07 14:00:00.660', 'https://traffic.libsyn.com/syntax/Syntax107.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS units (e.g. rems vs ems, px, ch, vmax), when and why you want to be using them, tips and tricks, and more! \n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free over at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:32\n\n* Typography with CSS units\n\n12:04\n\n* Pixels\n\n15:17\n\n* Viewport units\n\n15:51\n\n* ch units\n\n16:35\n\n* inch/cm for print\n\n17:19\n\n* Percentages\n\n18:10\n\n* Media queries\n\n19:41\n\n* Flexbox (flex-grow)\n\n20:28\n\n* CSS Grid: flexible units: 1fr 2fr\n\n## Links\n* [Sentry](https://sentry.io)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '15c7a3be729de8bb012ab9e60d565a6b1b57a25a7bcf8043fead99bc353de7d5', 'hasty-treat-css-units', '/shows/107 - CSS Units.md', '2023-10-16 20:06:57.282', '2023-10-27 15:57:45.632', 'HASTY'),
('syntax_podcast_show_00108', 108, 'Potluck - Where to start with JS × Freelancing × Cron jobs × Split testing × Frameworks in 2019 × More', '2019-01-10 14:00:00.920', 'https://traffic.libsyn.com/syntax/Syntax108.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - thoughts on frameworks for 2019, React Native, when should you start freelancing, where to start with JS, cron jobs, split testing and more!\n\n## DevLifts — Sponsor\n\n[DevLifts](https://devlifts.io/) - Thad and JC are on a mission to make web developers healthy. They\'re currently offering two options: The first is [Fit.Start](https://devlifts.io/join) - perfect for beginners or those looking to get back at it. \nUse the coupon code \"syntax\" to get 50% off the fit.start plan. The second is [DevLifts Premium](https://devlifts.io/join) - for those looking for a laser-focused approach and maximum accountability. Use the coupon code \"tasty\" to get 50% off the premium plan. Check it out today! Just for January their eight-week plan is back. Use the coupon code \"newyear19\" to get $50 off. \n\n## Kyle Prinsloo\'s Freelancing & Beyond — Sponsor\n\nKyle Prinsloo teaches you everything you need to know about freelancing, including how to quit your job, earn a side-income and start taking control of your life. Check it out at [https://studywebdevelopment.com/freelancing](https://studywebdevelopment.com/freelancing.html) and use the coupon code \"syntax\" at checkout to get 25% off.\n\n## Show Notes\n\n1:40\n\n* Where is the best place to start with JS coming from WordPress?\n\n5:36\n\n* How do you set up cron jobs? What are the best tools to use, should they run on their own server or on the application server, etc.?\n\n17:13\n\n* What new skills, frameworks, projects are you look forward to learning in 2019?\n\n21:35\n\n* Do you use any software for tracking analytics on your site and do you ever use this data to run split tests? If so, what is your preferred method for running split tests?\n\n28:24\n\n* What\'s your best tip for young coders to stay productive and not lose time?\n\n32:08\n\n* I\'m 17 and learning web dev. I\'m pretty concerned about my skills and feeling some impostor syndrome. Is it ok to start freelancing?\n\n37:26\n\n* What is React Native? How do people tend to use it? If you want a native and web app, do they share code?\n\n## Links\n* [WordPress](https://wordpress.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Javascript30](https://javascript30.com/)\n* [Dead Man\'s Snitch](https://deadmanssnitch.com/)\n* [Corntab](http://corntab.com/)\n* [Syntax106: A Look Forward to 2019](https://syntax.fm/show/106/a-look-forward-to-2019)\n* [Drip](https://www.drip.com/)\n* [Segment.io](https://segment.com/)\n* [Hotjar](https://www.hotjar.com/)\n\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Tidying Up on Netflix](https://www.netflix.com/title/80209379)\n* Wes: [Capital Gaines by Chip Gaines](https://www.amazon.com/Capital-Gaines-Things-Learned-Stupid/dp/0785216308)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Styled Components Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a6a67eb326e36bb2f585180c2f34f1262cd1a48f79247abfe2b7a331f31cebf5', 'potluck-where-to-start-with-js-freelancing-cron-jobs-split-testing-frameworks-in-2019-more', '/shows/108 - Potluck.md', '2023-10-16 20:06:57.321', '2023-10-27 15:57:45.675', 'SPECIAL'),
('syntax_podcast_show_00109', 109, 'Hasty Treat - CSS Grid Level 2 aka Subgrid', '2019-01-14 14:00:00.311', 'https://traffic.libsyn.com/syntax/Syntax109.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS Grid Level 2 - aka subgrid.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:27 - CSS Grid Level 2 and subgrid\n\n* CSS subgrid will allow you to place grid-items\' children along the same lines at the parent grid\n\n5:40 - How it works - Why do we need it? What problem do we have right now?\n\n1. Create your grid as normal - you can create columns, rows, named lines, etc.\n2. Your grid-item will also be display grid - this is nothing new - just regular nesting of grid\n3. The magic comes in when you want to define the rows and or columns of the sub-item. You can inherit the parent item\'s grid-rows / columns by simply saying `display: subgrid`\n\n11:19 - Browser support\n\n* It\'s about a year out\n\n## Links\n* [Sentry is hiring](https://sentry.io/careers)\n* [Grid Level 2 and Subgrid by Rachel Andrew](https://rachelandrew.co.uk/archives/2018/04/27/grid-level-2-and-subgrid/)\n* [Css Grid Level 2 specs](https://drafts.csswg.org/css-grid-2/)\n* [CSS Grid Level 2: Here Comes Subgrid](https://www.smashingmagazine.com/2018/07/css-grid-2/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'dd8fcfd624578550d80fe234a9bfeb7cd9adc3dd7bf6ce6b403a3dac4adc31cd', 'hasty-treat-css-grid-level-2-aka-subgrid', '/shows/109 - CSS Grid 2.md', '2023-10-16 20:06:57.364', '2023-10-27 15:57:45.717', 'HASTY'),
('syntax_podcast_show_00110', 110, 'Tips for Work Life Balance', '2019-01-16 14:00:00.132', 'https://traffic.libsyn.com/syntax/Syntax110.mp3', '\nIn this episode Scott and Wes talk about work life balance. These tips aren\'t hard-and-fast - part of the beauty of being a web developer is that you do get to enjoy some flexibility. Work is a big part of our live and these are tips that will hopefully allow you to get the most enjoyment out of both work and life.\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1). \n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n8:06 - Know when you work best\n\n* The 9-5 isn\'t for everyone - you know when you work best, so use that to your advantage\n\n9:39 - Work when it\'s time to work, life when it\'s time to life\n\n* Don\'t do laundry during work time\n\n11:08 - Make it clear to family members when you are working\n\n* Wishy-washy in-between can cause tension - are you working? Can I interrupt you?\n* Working after hours\n* Text if you need me\n\n14:34 - Have a defined space for work\n\n* If I bring my laptop downstairs, I don\'t bring a charger\n* Clean yo nasty desk space\n* It\'s a mental shift when you sit down - \"okay now I am working\"\n\n21:14 - Know how to \"zone it\"\n\n* Headphones\n    * Music or podcasts\n* Block all distractions\n* Close email\n* Pay attention to what gets you there, when it stops working, change it up\n\n24:46 - Keep hobbies\n\n* Away from screens\n* Physical or relaxing or both\n\n26:37 - Exercise\n\n* Good for mind and body\n* Huge gains long term and short term \n\n27:31 - Prioritize your to-do list\n\n* One reason many people over-work is that they feel they have too much to do\n* Add items to your to-do list when they pop into your head - out of your head, into your system\n\n31:28 - Walk away from difficult problems\n\n* Your brain will chew on problems as time goes on and help you solve them\n* Literally take a walk outside\n\n34:04 - Meetups, conferences or tutorials\n\n* Reinvigorate your hunger for coding and make you happier both at home and work\n* Easy to get burned out from working too much (or not paying enough attention to your work)\n\n## Links\n* [Wes\' Head Bob Spotify playlist](https://open.spotify.com/user/wes.bos/playlist/4sFWRZDOmCiR7abKNRmWjr?si=rxXYtC43Q12xS-SEU8w0Yw)\n* [Portable Text from Sanity](https://www.sanity.io/blog/introducing-the-new-editor-for-portable-text)\n* [Portable Text](https://portabletext.org/)\n* [Forget about Gutenberg, no seriously](https://www.sanity.io/blog/creating-custom-content-blocks-gutenberg-vs-sanity)\n* [What you need to know about block text](https://www.sanity.io/docs/what-you-need-to-know-about-block-text/presenting-block-text#serialization-tooling)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: \n  * [Todoist](https://todoist.com/)\n  * [Notion](https://www.notion.so)\n* Wes: [PassSource](https://www.passsource.com/)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Tutorials Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e4e056b54135fa03907c5b0f2580088442d163b006cbf5b3da792de92861e666', 'tips-for-work-life-balance', '/shows/110 - Balance.md', '2023-10-16 20:06:57.400', '2023-10-27 15:57:45.763', 'TASTY'),
('syntax_podcast_show_00111', 111, 'Hasty Treat - Tidying Up Code', '2019-01-21 14:00:00.149', 'https://traffic.libsyn.com/syntax/Syntax111.mp3', '\nIn this Hasty Treat, Scott and Wes talk about tidying up your code - why it\'s important and how it can make your (dev) life better.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:24 - Removal\n\n* Unneeded comments\n* Unused CSS\n* Unused Functions\n\n8:06 - Organizing\n\n* A system that works for you\n* Know when to break things out into a new file, components, functions otherwise\n* Index file works sometimes - other times it\'s too much work\n\n11:45 - Tiding Up\n\n* Refactoring bad/old code\n* Non-ironically, does this code spark joy?\n* Unused Functions\n* Add in comments\n* Folding - use a code formatter\n* CSS\n\n## Links\n* [Tidying Up with Marie Kondo](https://www.netflix.com/title/80209379)\n* [Better Comments VS Code](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n* [Prettier](https://prettier.io/)\n* [ESLint](https://eslint.org/)\n* [Nicole Sullivan - Object Oriented CSS](https://www.slideshare.net/stubbornella/object-oriented-css)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd8e747968d14c6935e9ac4a0de6fa3c1db2b921a86374973f21da6494bb68c54', 'hasty-treat-tidying-up-code', '/shows/111 - tidying up code.md', '2023-10-16 20:06:57.444', '2023-10-27 15:57:45.806', 'HASTY'),
('syntax_podcast_show_00112', 112, 'The Freelance Client Lifecycle - Part 1', '2019-01-23 14:00:00.058', 'https://traffic.libsyn.com/syntax/Syntax112.mp3', '\nIn this episode Scott and Wes talk about the freelance client lifecycle—from gathering requirements, to project hand-off, and everything in between.\n\n## Techmeme Ride Home Podcast\n\nFrom Techmeme.com, Silicon Valley\'s most-read news source, The Techmeme Ride Home podcast is a short daily podcast about the day\'s tech news. Mark Zuckerberg called Techmeme the one news source he definitely follows. New episodes are published every day at 5p.m. You can [check out the show here](https://itunes.apple.com/us/podcast/techmeme-ride-home/id1355212895), or search for \"Techmeme Ride Home\" in your favorite podcast player.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n03:29 - Gathering Requirements\n\n* Probably the most important part of the process. If you botch this, you\'ll be dealing with change orders and scope-creep throughout the entire project. Poor planning is why agencies have project managers and why many freelancers hate their clients.\n* Ask lots of questions\n* Get lots of examples\n* Break down each page into functionality\n* Ask about budget\n* Clarify who will be updating the site\n* Do this in person if possible\n\n17:00 - Quote\n\n* Figuring out the quote\n* Break it down into major functional areas that don\'t necessarily depend on each other.\n* Multi-staged quotes are great because if it\'s too expensive, the client knows they can add additional features later in the project.\n* Explain the tech you will use in relation to how it will help their business, or how easy it will be for them to manage.\n* Presenting the quote\n    * List what will be included\n    * List what won\'t be included\n    * Make your quote valid for two weeks\n    * Create a template that looks professional\n        * Our agency had a professional template, printed on heavy paper in an embossed folder with our logo on it.\n    * You don\'t have to go this far, but experience matters. Think Apple. You can quote more if you have a higher perception of quality.\n\n30:20 - Timelines\n\n* Timelines should include hard dates. You should have a \"hard on\" and and \"hard off\".\n* Assume 24-hour turnaround on questions\n* Be generous with your estimates. Under promise, over deliver.\n* Quoting time is a huge skill\n\n35:58 - Contract\n\n* You best have one\n* Spell out what the client is getting (from quote)\n* At the very least, have the client sign your quote\n* Clear communication and a good relationship is extremely important\n* Use online templates, or have a lawyer create something specific\n\n41:09 - Setting Expectations\n\n* Don\'t make yourself available 24/7\n* Establish a professional environment by not being too casual\n* Your choices will set the course for your relationship\n* Don\'t be too quick to reply to email\n* Schedule emails for 10a.m.\n\n## Links\n* [Syntax 036: Hasty Treat - Freelancing Hot Tips](https://syntax.fm/show/036/hasty-treat-freelancing-hot-tips)\n* [docracy](https://www.docracy.com/)\n* [Boomerang for Gmail](https://www.boomeranggmail.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Great Suspender](https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg)\n* Wes: [Food Busker YouTube Channel](https://www.youtube.com/foodbusker)\n\n## Shameless Plugs\n\n* [Scott\'s Level 1 Styled Components Course](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b75eb03ff8a5c1b94b6fefbc9c478c4b31fd62692a104e690aa2e4589f90e132', 'the-freelance-client-lifecycle-part-1', '/shows/112 - freelance.md', '2023-10-16 20:06:57.484', '2023-10-27 15:57:45.860', 'TASTY'),
('syntax_podcast_show_00113', 113, 'Hasty Treat - Code Quality Tooling', '2019-01-28 14:00:00.294', 'https://traffic.libsyn.com/syntax/Syntax113.mp3', '\nIn this Hasty Treat, Scott and Wes talk about code quality tooling - how to get your code extra nice and clean, and the tools that will help you along the way.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:11 - ESLint / JSHint / Linters in general\n\n* Eslint took over as a flexible solution for code style and quality\n* Use plugins and presets to set your rules for different types of project\n* Don\'t be afraid to tweak rules, they are not the word of god\n\n10:55 - Prettier\n\n* Strictly formatting\n* Can work with or without ESLint\n* Provides an enforceable standard for teams\n* Configurable\n* Prettier for CSS, PHP, GraphQL, etc. \n\n18:46 - VS Code\n\n* Red underlines like spellcheck for code\n* Tooltip for lint errors\n* Fix on save vs fix on command\n\n## Links\n* [ESLint](https://eslint.org/)\n* [JSHint](https://jshint.com/)\n* [Prettier](https://prettier.io/)\n* [Wes\' dotfiles](https://github.com/wesbos/dotfiles)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3d0e74853d5c3073a9cd7afc401b061a66e2addd707d7b9db53ac518f40f07f8', 'hasty-treat-code-quality-tooling', '/shows/113 - code tidying.md', '2023-10-16 20:06:57.529', '2023-10-27 15:57:45.901', 'HASTY'),
('syntax_podcast_show_00114', 114, 'The Freelance Client Lifecycle - Part 2', '2019-01-30 14:00:00.983', 'https://traffic.libsyn.com/syntax/Syntax114.mp3', '\nIn this episode Scott and Wes continue their discussion about the freelance client lifecycle—from design and development, to project hand-off, and everything in between.\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1). \n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:47 - Design\n\n* Collect all assets from your client\n    * Logo\n    * Brand guidelines\n    * List of likes and dislikes\n* Create initial look and feel\n* Don\'t show client too early—they can be distracted by little unfinished things\n* Back up the \"whys\" of what you did. Otherwise, it\'s just a pretty picture and and the client only thinks about it in terms of taste. Remember, you are the expert they hired, so it\'s not totally subjective—you have the expertise and you need to flex that.\n    * This button is teal because it\'s your call to action—this is the button that makes you money so we want to highlight that\n    * Grey text on white background is hard to read—you\'ll be leaving people out if you do this.\n    * When possible, draw circles or golden ratio lines around everything ;)\n* Be prepared for non-standard feedback\n    * E.g. this feels cloudy, can it look more sunny? Please make it pop, etc.\n* Don\'t get offended by feedback on creative work\n    * Clients didn\'t go to art school and don\'t know about good feedback.\n    * Clients will ignore all finished aspects of a design and only focus on the one minor thing that\'s incorrect.\n* Revisions\n\n17:58 - Development\n\n* Clear requirements make development much easier.\n* Sometimes this starts at the same time or in the process of design.\n* Only show dev progress if client is capable of understanding dev process.\n   * Showing a developed site too early can cause clients to worry about visual aspects that aren\'t yet in line with the design.\n   * Showing to early is also a recipe for a feedback list of things you already know.\n* Give regular progress updates, as previously established. Make it happen on a schedule so expectations are set and so you won\'t forget. Stick to your timeline!\n* Clients don\'t care about technical jargon.\n    * Don\'t tell clients about Gatsby/React as much as telling them about the benefits, how fast the site is, etc.\n\n23:48 - Feedback and revisions\n\n* Feedback is done in revisions or rounds.\n* For smaller projects, have your client email (one email) a list of feedback.\n* For larger projects, and more technical clients, use bug tracking software, such as Github issues, Trello, etc.\n* Write down everything, and then have a follow-up call to discuss the feedback.\n\n30:08 - Deployment\n\n* Get your client to pay for domains and hosting.\n* Make sure their old website has everything off of it, or host the website somewhere else.\n* If you\'re moving servers, best to just point the A records at the new server.\n* If changing nameservers for DNS, make sure the client doesn\'t have email or any other apps on that server that will be nuked or broken when moving.\n* Many clients use their server to uploaded PDFs and other files that may still need to be accessible.\n* If you are changing URL structure, you\'ll need to be aware of any redirects.\n* Backup strategies\n* Restoration strategies\n\n40:05 - Handoff\n\n* Create a video detailing how to do each thing\n* Don\'t give more options than they need in the back end.\n* Do in-person training when possible.\n    * Only teach them the things that are important for their day to day usage.\n\n44:28 - Bug fixes and support\n\n* Very common for clients with wrong idea of project guidelines to want to add on at the end of a project.\n* Not about adding new, non-established features.\n* Emergency bugs require an emergency response if they are your fault\n    * Set expectations and be careful what you promise.\n\n48:03 - What to do when things go to shit\n\n* There should be a trail of communication leading up to things going awry.\n* Project is behind.\n* Product is not met with acceptance.\n* Client isn\'t paying.\n* When to fire your client.\n\n## Links\n* [Syntax 112: The Freelance Client Lifecycle - Part 1](https://syntax.fm/show/112/the-freelance-client-lifecycle-part-1)\n* [Syntax 088: Pre-launch Checklist](https://syntax.fm/show/088/pre-launch-checklist)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Synology 4 bay NAS DiskStation DS918+](https://amzn.to/2M94YIq)\n* Wes: [Backblaze](https://www.backblaze.com/)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Advanced React Course](https://www.advancedreact.com)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c3ce0fe2cb4aac799e54817f4fe24aa86121cf0e47aa69871b5104677d268b8b', 'the-freelance-client-lifecycle-part-2', '/shows/114 - freelance part 2.md', '2023-10-16 20:06:57.571', '2023-10-27 15:57:45.938', 'TASTY'),
('syntax_podcast_show_00115', 115, 'Hasty Treat - Code Quality Tooling Part 2', '2019-02-04 14:00:00.743', 'https://traffic.libsyn.com/syntax/Syntax115.mp3', '\nIn this Hasty Treat, Scott and Wes continue their discussion about code quality tooling - how to get your code extra nice and clean, and the tools that will help you along the way.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:28\n\n* Typescript and Types\n\n5:42\n\n* Jest and Testing\n\n7:48\n\n* Exceptions & Error Tracking\n\n## Links\n* [Sentry](https://sentry.io/)\n* [Log Rocket](https://logrocket.com/)\n* [Rollbar](https://rollbar.com/)\n* [Jest](https://jestjs.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c45226325fbb14a1361412448971a73ea22194376a8afda04cf8fbbcd7e3801b', 'hasty-treat-code-quality-tooling-part-2', '/shows/115 - code quality.md', '2023-10-16 20:06:57.648', '2023-10-27 15:57:45.982', 'HASTY'),
('syntax_podcast_show_00116', 116, 'Potluck - Changing careers × Repo organization × CSS Grid × Certifications × Freelancing × Spammers × More', '2019-02-06 18:10:00.560', 'https://traffic.libsyn.com/syntax/Syntax116.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - organizing your Git repos, the difference between freelancing and contracting, changing careers, how to deal with spammers and more!\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1). \n\n## Techmeme Ride Home Podcast\n\nFrom Techmeme.com, Silicon Valley\'s most-read news source, The Techmeme Ride Home podcast is a short daily podcast about the day\'s tech news. Mark Zuckerberg called Techmeme the one news source he definitely follows. New episodes are published every day at 5p.m. You can [check out the show here](https://itunes.apple.com/us/podcast/techmeme-ride-home/id1355212895), or search for \"Techmeme Ride Home\" in your favorite podcast player.\n\n## Show Notes\n\n1:55\n\n* Q: Do you prefer to have your backend and frontend in separate Git repos or together? What are the trade-offs?\n\n5:12\n\n* Q: In web dev, what\'s the difference between a freelancer and independent contractor?\n\n9:45\n\n* Q: Default export vs named export?\n\n11:35\n\n* Q: I\'m looking to change careers, but I\'m 41 this year. Is it too late?\n\n16:12\n\n* Q: Have you guys made much use of multicolumn layout? If so, only for text, or have you come up with (or seen elsewhere) any interesting out-of-the-box uses?\n\n20:11\n\n* Q: Since you publish your courses\' source code on Github, what do you think about people using that to learn instead of buying your course? Is it an intentional decision, or is it a compromise you\'re willing to make?\n\n23:52\n\n* Q: When is a certification needed for both jobs and side-projects?\n\n29:35\n\n* How do you deal with spammers filling out forms?\n\n34:05\n\n* Q: Could you better explain what a slug is? I\'ve heard the term thrown around on a number of your episodes, but I don\'t really know what it means.\n\n37:44\n\n* Q: I am currently going through some currency conversion stuff for a project, what would you recommend to use for international conversions?\n\n## Links\n* [Sanity](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1)\n* [Techmeme Ride Home Podcast](https://itunes.apple.com/us/podcast/techmeme-ride-home/id1355212895)\n* [Concurrently](https://www.npmjs.com/package/concurrently)\n* [Rachel Andrew](https://rachelandrew.co.uk/)\n* [CSS Grid auto height of elements?](https://github.com/rachelandrew/cssgrid-ama/issues/19)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Voxon Screwdriver Set](https://amzn.to/2RErmzr)\n* Wes: [Technology Connections](https://www.youtube.com/channel/UCy0tKL1T7wFoYcxCe0xjN6Q/videos?flow=grid&view=0&sort=p)\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '73f8a6e72c8b4c0737f2316f84a8d4a4cafb7440c28f9682e8e945682dc8e110', 'potluck-changing-careers-repo-organization-css-grid-certifications-freelancing-spammers-more', '/shows/116 - Potluck.md', '2023-10-16 20:06:57.723', '2023-10-27 15:57:46.025', 'TASTY'),
('syntax_podcast_show_00117', 117, 'Hasty Treat - How To Email Busy People', '2019-02-11 14:00:00.896', 'https://traffic.libsyn.com/syntax/Syntax117.mp3', '\nIn this Hasty Treat, Scott and Wes tackle email, specifically, how to email busy people — how to write emails that actually get read, and don\'t just get tossed in the archive.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n4:05\n\n* Subject lines\n\n11:26\n\n* The body\n\n14:33\n\n* Best practices\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3538a0f8f430413817ca0c608ec4abb54b5c9be9dad6be0812ed7f14d7c3a13b', 'hasty-treat-how-to-email-busy-people', '/shows/117 - email.md', '2023-10-16 20:06:57.768', '2023-10-27 15:57:46.080', 'HASTY'),
('syntax_podcast_show_00118', 118, 'The Smart Home', '2019-02-13 14:00:00.423', 'https://traffic.libsyn.com/syntax/Syntax118.mp3', '\nIn this episode, Wes and Scott talk about the Smart Home — all the different tech available, how it works together, pitfalls to avoid, hardware, software, and more!\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1).\n\n## Stackbit - Sponsor\n\nBuild modern JAMStack websites in minutes. Stackbit lets you combine any theme, site generator and CMS without complicated integrations. Join the beta today by visiting [stackbit.com/syntaxfm](https://www.stackbit.com/syntaxfm/).\n\n## Show Notes\n\n2:25 - The tech\n\n* Wifi devices\n* [Zigbee](https://www.zigbee.org/)\n  * Can operator on low power\n  * Usually Cheaper\n  * Water Sensor, door sensor, temperature\n* iOS\n  * HomeKit sucks\n  * You need an Apple TV or iPad to access outside of your house\n\n9:13 - Controlling your smart home\n\n* Smart Things\n* Home Assistant\n  * Host your own\n  * Lots of add-ons\n  * You need to babysit it\n* Android\n  * Google Assistant\n* Google Pixel squeeze to assistant is way better than saying \"Hey Google\".\n* Google Home\n  * Google Home is awesome\n  * Custom sayings with IFTTT\n  * Custom via Routines\n* Alexa\n\n23:52 - Software\n\n* [Stringify](https://www.stringify.com/)\n* [IFTTT](https://ifttt.com/)\n  * Basic automations\n  * Makers accounts\n  * Web hooks to trigger actions\n* [Homebridge](https://homebridge.io/)\n  * Make non-iOS stuff work with HomeKit\n  * Swipe up control is nice\n\n28:15 - Hardware\n\n* Light Switches\n  * [Leviton](https://www.leviton.com/en)\n  * [Lutron](https://www.casetawireless.com/)\n* Bulbs\n  * [LIFX](https://www.lifx.com/)\n  * [Philips Hue](http://meethue.com)\n    * AMAZING\n    * Much cheaper now than before\n* Blinds\n* [Chromecast](https://store.google.com/product/chromecast) — turn the TV off\n* Plugs\n  * [Wemo](https://www.belkin.com/us/Products/smarthome-iot/c/wemo/)\n  * [Leviton](https://www.leviton.com/en)\n  * [Sonoff](https://sonoff.itead.cc/en/)\n* Power strip\n  * Change each plug or have timers\n* Thermostat\n  * [Ecobee 3 Lite](https://amzn.to/2MBRAwG)\n  * [Ecobee 4 with Alexa](https://amzn.to/2Wylgzw)\n  * [Nest](https://amzn.to/2RY0drh)\n  * [Nest-E](https://amzn.to/2G6yQ7t)\n* Cameras\n  * [Ring Doorbells](https://amzn.to/2MAnYja)\n  * [Ring Flood Light Camera](https://amzn.to/2B841vD)\n    * Super slow to open the app\n  * Wyze cameras\n    * [Small one](https://amzn.to/2WqCoHi)\n    * [Larger Panning Camera](https://amzn.to/2Wl338t)\n* Mesh Wifi\n  * [Google Wifi](https://store.google.com/us/product/google_wifi)\n  * [Amplifi](https://www.amplifi.com/)\n* Fire Alarms / CO2\n  * [Nest Protect](https://nest.com/smoke-co-alarm/overview/)\n  * Dumb\n  * Lithium\n* Garage Door Opener\n* Non-connected \"smart items\"\n  * Solar powered lights on a timer. No app needed, no WiFi connection needed\n  * [Roomba](https://store.irobot.com/default/home) - meh. We play \"find the body\" when it comes home.\n  * Locks - Code based lights\n  * [Motion Sensor LED Lights](https://www.amazon.com/gp/product/B01HO1FLDI/ref=ppx_od_dt_b_asin_title_s00?ie=UTF8&psc=1)\n\n67:32 - What we want in the future\n\n* Scott\n  * Motion sensors\n  * Door sensors\n  * Locks\n  * Blinds\n  * More bulbs\n* Wes\n  * Fireplace\n  * Constantly recording cameras\n  * Sensors galore\n    * Windows open\n    * Doors open\n    * Garage door\n  * Zigbee Hub\n  * Xiaomi Sensors\n    * Gear Best\n\n## Links\n\n* [Sanity](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1)\n* [Stackbit](https://www.stackbit.com/syntaxfm)\n* [Google Home Mini](https://store.google.com/us/product/google_home_mini?hl=en-US)\n* [Amazon Echo](https://www.amazon.com/all-new-amazon-echo-speaker-with-wifi-alexa-dark-charcoal/dp/B06XCM9LJ4)\n* [Google Pixel](https://store.google.com/product/pixel_3)\n* [Apple Homepod](https://www.apple.com/ios/home/)\n* [Raspberry Pi](https://www.raspberrypi.org/)\n* [GearBest](https://us.gearbest.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Philips Hue](http://meethue.com)\n* Wes: All the recommendations from above\n\n## Shameless Plugs\n\n* [Scott\'s Level Up Pro](https://LevelUpTutorials.com/pro)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '75a99d50339c938f20dfc8119c02bd2ab1ecb261b25637771755c108992bfee9', 'the-smart-home', '/shows/118 - smart home.md', '2023-10-16 20:06:57.812', '2023-10-27 15:57:46.123', 'TASTY'),
('syntax_podcast_show_00119', 119, 'Hasty Treat - Better Living Through Side Projects', '2019-02-18 14:00:00.321', 'https://traffic.libsyn.com/syntax/Syntax119.mp3', '\nIn this Hasty Treat, Scott and Wes talk about side projects — what you can learn, why they\'re great, how to come up with ideas, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:17 - Why?\n\n* Keeps you sharp\n* It\'s actually useful\n* Try new technology\n\n5:28 - How to come up with ideas\n\n* What sucks in your life?\n* How do you get a competitive advantage in life?\n\n12:10 - Quick and dirty tech\n\n* [Next.js](https://nextjs.org/)\n* [Express](https://expressjs.com/)\n* [diskDB](https://github.com/arvindr21/diskDB)\n* [Meteor](https://www.meteor.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '80248d4d6a1c975a4818c2278fd5e6e8d7148cf503c32de0b5619907a6a0b8cc', 'hasty-treat-better-living-through-side-projects', '/shows/119 - side projects.md', '2023-10-16 20:06:57.857', '2023-10-27 15:57:46.170', 'HASTY'),
('syntax_podcast_show_00120', 120, 'Gatsby vs Next', '2019-02-20 14:00:00.938', 'https://traffic.libsyn.com/syntax/Syntax120.mp3', '\nIn this episode, Wes and Scott debate Gatsby vs Next — how they compare, the pros and cons of each, why you might chose one over the other for your next project, and more!\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## The Armoury - Sponsor\n\nThe Armoury is a men\'s clothing and accessories retailer that provides some of the highest quality clothing you can buy. Designed for those of you who want the highest quality clothing that feels great and will last forever. Buy less, buy better. Follow them on Instagram [@thearmourynyc](https://www.instagram.com/thearmourynyc/) and check out their website [TheArmoury.com](https://thearmoury.com).\n\n## Show Notes\n\n5:07 - Server Side Rendering\n\n* Next.js will render on demand — this allows you to have server rendered pages on demand.\n  * Think of a blog website — publish a new blog post and it will immediately start working.\n  * Authenticated pages can be server rendered, and thus, pre-loaded for better performance.\n* Gatsby runs at build time only — so you need to have all of your data ready at build time.\n  * Pro: This makes for very fast page load.\n  * Con: Large websites can take a long time to build.\n  * Con: Gatsby can do network fetches from the client, but these lose the benefit of SSR.\n* Ease of SSR:\n  * Next.js requires a complicated document.js file if you are fetching data anywhere other than a page component.\n    * This will probably get easier with Suspense. Demos are simple, but any real application requires harder config.\n  * Gatsby is Easy Peeezy!\n\n11:09 - Data\n\n* Next.js is unopinionated. Like React, it doesn\'t care where your data comes from.\n  * getInitialProps();\n* Gatsby has a number of \"source\" plugins which will pull in data from sources — markdown, WordPress, API, file system. Once you have that data sourced, you can query it with GraphQL.\n\n22:50 - Routing and Creating Pages\n\n* Next.js makes you create a page in a pages directory. You can nest these as deep as you like. If you want to pass query params, you must do so with a `?query=string`. There are several third-party options for getting around this that require a node server.\n* Gatsby allows you to programmatically create pages with their createPage API.\n* For both navigating between pages, they make a Link Component available.\n\n30:49 - Plugins\n\n* In Gatsby, *everything* goes through the Gatsby pipeline. This makes things like image compression, pagination, sass, service workers and many other progressive web app pieces very easy.\n* Gatsby makes building a really good website easy.\n* Gatsby Image is SOOOOO amazing.\n* The scope of Next.js is much smaller. They give you a few things, but you generally bring your own approach for most things\n  * Routing\n  * Linking and prefetching\n  * Dynamic Importing\n\n38:42 - Deploying and Hosting\n\n* Gatsby is just HTML, CSS, and JS at the end of the day, so it can be deployed almost anywhere — Netlify, Github Pages, cheap PHP hosting, etc.\n* Next.js is a Node app. It can be integrated into an existing Express app, or run by itself. Requires a Node server to run it.\n* Next.js has a static generation option, but you\'re better off using Gatsby for that.\n\n44:41 - The verdict?\n\n* Use Next.js for Apps, Gatsby for Websites\n\n## Links\n\n* [LogRocket](https://logrocket.com/syntax)\n* [The Armoury](https://thearmoury.com/)\n* [Next.js](https://nextjs.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Netlify](https://www.netlify.com/)\n* [Node](https://nodejs.org/en/)\n* [Express](https://expressjs.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Motion LED Lights](https://amzn.to/2DtVNhO)\n* Wes: [The Dream Podcast](https://www.thedream.fm/)\n\n## Shameless Plugs\n\n* [Scott\'s Pro Gatsby 2 Course](https://www.leveluptutorials.com/store/products/tutorials/lut-dd028)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b47807b0d76ba008a7c3505e3ac375d910a29f1f18590a926d3c9e351b602bf3', 'gatsby-vs-next', '/shows/120 - gatsby-vs-next.md', '2023-10-16 20:06:57.896', '2023-10-27 15:57:46.213', 'TASTY'),
('syntax_podcast_show_00121', 121, 'Hasty Treat - Tips to Succeed on YouTube', '2019-02-25 14:00:00.787', 'https://traffic.libsyn.com/syntax/Syntax121.mp3', '\nIn this Hasty Treat, Scott and Wes talk tips to succeed on YouTube!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:55\n\n* How YouTube has affected our careers\n\n3:45\n\n* YouTube money is just OK\n\n6:28\n\n* SEO is king\n\n7:15\n\n* The title is most important\n\n8:59\n\n* Description is important\n\n11:00\n\n* Use Tags. All of them.\n\n12:00\n\n* Scheduled content works\n\n13:26\n\n* Keeping Viewers\n\n15:20\n\n* Pinning comments\n\n15:41\n\n* Liking Comments\n\n17:00\n\n* Practice Finishing Sentences\n\n17:34\n\n* Collaborate when you can\n\n19:00\n\n* Use all the features YouTube has to offer\n\n20:44\n\n* Don\'t get sucked into the BS\n\n## Links\n* [TubeBuddy](https://www.tubebuddy.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c9c78d1c18e049888c57b9662279fb355b2c6d76a83318e6a677748480678834', 'hasty-treat-tips-to-succeed-on-youtube', '/shows/121 - youtube.md', '2023-10-16 20:06:57.936', '2023-10-27 15:57:46.256', 'HASTY'),
('syntax_podcast_show_00122', 122, 'How We Manage Our Lives — Notion, Todos, Notes, Focusing, Calendars, Goal tracking, and more!', '2019-02-27 14:00:00.663', 'https://traffic.libsyn.com/syntax/Syntax122.mp3', '\nIn this episode, Wes and Scott talk about life management — the systems and tools for managing all the the busy details of life and work. \n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n5:00 - Todos\n\n* GTD philosophy\n* Todoist\n* Things\n\n12:31 - Focusing\n\n* Focus app\n* Turn off all notifications on iOS and desktop\n* Rename apps\n* Ask yourself why you feel the way you do\n  * Should be doing email? Do I need to eat that frog?\n  * Why do I not enjoy this?\n* Sticky note on screen or desk\n\n21:27 - How we track ideas, thoughts, and notes\n\n* Get everything out of your head\n* Markdown files\n* Evernote\n* Notion\n\n27:23 - Calendar and schedule\n\n* Google calendar\n* [USB light switch](https://amzn.to/2NgeOsz) \n\n33:30 - Goal tracking / Life progression\n\n* Keep concepts and ideas in Notion\n* Milestones (bigger ideas) are separated\n* Use the system that works best for you\n\n36:58 - Fun things with Notion\n\n* What is Notion?\n* Cross-linking/referencing between boards\n* Episode calendar and possible episodes kanban\n\n## Links\n\n* [Freshbooks](https://freshbooks.com/syntax)\n* [Sentry](https://sentry.io/)\n* [Todoist](https://todoist.com/)\n* [Things](https://culturedcode.com/things/)\n* [Getting Things Done: The Art of Stress-Free Productivity](https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280)\n* [Focus](https://heyfocus.com/)\n* [Notion](https://notion.so/)\n* [Evernote](https://evernote.com/)\n* [Bryant Electric USB light switch](https://amzn.to/2NgeOsz)\n* [Bear app](https://bear.app/)\n* [Airtable](https://airtable.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [LG Ultrawide Monitor](https://amzn.to/2EkdguN)\n* Wes: [LG 4k 32\" Monitor](https://amzn.to/2Ipsrqu)\n\n## Shameless Plugs\n\n* [Scott\'s React Hooks For Everyone Course](https://www.leveluptutorials.com/pro)\n* [Wes\' Courses](https://www.wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '17a4378f1f994570b4aeffd8fd68179e07eaf635bc333832914365bb0bac899a', 'how-we-manage-our-lives-notion-todos-notes-focusing-calendars-goal-tracking-and-more', '/shows/122 - life management.md', '2023-10-16 20:06:57.979', '2023-10-27 15:57:46.297', 'TASTY'),
('syntax_podcast_show_00123', 123, 'Hasty Treat - Authentication - LocalStorage vs Cookies vs Sessions vs Tokens', '2019-03-04 14:00:00.946', 'https://traffic.libsyn.com/syntax/Syntax123.mp3', '\nIn this Hasty Treat, Scott and Wes talk about authentication — the difference between localStorage, cookies, session, tokens and more!\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n4:20 - How should we track users?\n\n* Token based - generally stored in the client\n* Session based - stored on the server \n* Token Based (JWT)\n\n6:00 - Token-based auth\n\n* Stateless - the server does not maintain a list of logged in users\n* Scalable - you can use serverless functions easily\n* Cross domain\n* Data can be stored in JWT\n* Easy to use on non-web sites like mobile apps\n* Hard to expire tokens — you must maintain a list of blacklisted tokens\n\n7:48 - Session-based auth \n\n* Stateful - generally you maintain a list of session IDs\n* Passive - once signed in, no need to send token again\n* Easy to destroy sessions\n\n10:48 - How do we identify the user on each request? localStorage or Cookies?\n\n* A common misconception is that localStorage is for tokens while cookies is for sessions\n* With localStorage, we need to grab the token and send them along on each request\n* With cookies, the data is sent along on each request\n\n11:25 - Security Issues\n\n* XSS for Tokens - make sure bad actors can\'t run code on your site\n* Sanitize inputs\n* XSRF - CSRF tokens are needed\n\n## Links\n* [Cookies vs Tokens: The Definitive Guide](https://dzone.com/articles/cookies-vs-tokens-the-definitive-guide)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e599fc89c18d91a87f75827154da1f4544654c107f7fe4bbfd5e9e56c90b3f4c', 'hasty-treat-authentication-localstorage-vs-cookies-vs-sessions-vs-tokens', '/shows/123 - authentication.md', '2023-10-16 20:06:58.026', '2023-10-27 15:57:46.347', 'HASTY'),
('syntax_podcast_show_00124', 124, 'Potluck - Are classes dead? × Tutorials vs Real Life × CRA vs Next × Scraping × More', '2019-03-06 14:00:00.713', 'https://traffic.libsyn.com/syntax/Syntax124.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - are classes dead?, tutorials vs real life, the smart home, developers and mental health, and more!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n1:30\n\n* Q: What advice would you give to someone wanting to get involved with the open source community, coming from closed-source full-time work? How do people make time to code on the side and balance a life/family?\n\n5:38\n\n* Q: In [Syntax 060](https://syntax.fm/show/060/the-undocumented-web-scraping-private-apis-proxies-and-alternative-solutions), you mentioned making your life easier as a motivation. How do you get your data from sites that may not have an API? Web scraping? Any tools you\'d recommend?\n\n11:34\n\n* Q: Do you think React aims toward a world with functional components only or will class based components always play a role?\n\n17:10\n\n* Q: Just feedback on the recent Smart Home podcast...I really enjoyed it! I have about 48 (color) HUE lights throughout my home, and use an IFTTT applet for my Ring PRO doorbell, so when someone rings the doorbell, all the lights in the home blink (e.g. so I can see when an Amazon Prime package arrives, or know someone is at the front door, etc...while I\'m working and wearing my Bose QC35II\'s, and of course listening to your podcast)! I\'m a huge fan of the podcast since early last summer (I rarely comment, but you guys are great)!\n\n21:37\n\n* Q: What would you do in the event your clients sends you a “thank you” card along with cash that is MUCH lower than you are preparing to invoice them? Would you remove it from the invoice, ask them what they would prefer, etc? I’m stuck in an awkward situation and it doesn’t even cover the hosting costs.\n\n24:39\n\n* Q: I\'ve heard a lot of good things about Next.js, but what exactly is it? How does it compare to just using the create-react-app? Is it worth it to migrate a small side project that I have to Next.js?\n\n28:26\n\n* Q: I take tutorials all the time for web dev. I have taken many of both of your courses. Thank you, they are great! I am completely self taught and have zero computer science education whatsoever. As well as your courses and other tutorials have taught me various languages and libraries, they do not prepare me for real work interviews or jobs. No offense. How do I make the jump from tutorials to real life?\n\n34:39\n\n* Q: Do you have exercises to warm up your brain before you start coding? I always find it a bit difficult to jump straight into a project. I would never start working out before warming up and I feel that\'s also true about development!\n\n36:42\n\n* Q: How should developers deal with depression and mental health?\n\n## Links\n\n* [Sentry](https://sentry.io/)\n* [Freshbooks](https://freshbooks.com/syntax)\n* [Syntax 060: The Undocumented Wed](https://syntax.fm/show/060/the-undocumented-web-scraping-private-apis-proxies-and-alternative-solutions)\n* [Syntax 118: The Smart Home](https://syntax.fm/show/118/the-smart-home)\n* [IFTTT Hue/Ring applet](https://ifttt.com/applets/352303p)\n* [Syntax 120: Gatsby vs Next](https://syntax.fm/show/120/gatsby-vs-next)\n* [Next.js](https://nextjs.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Clarity Money](https://claritymoney.com/)\n* Wes: [Wyze Camera](https://amzn.to/2Xl4xQs)\n\n## Shameless Plugs\n\n* [Scott\'s React Hooks For Everyone](https://LevelUpTutorials.com/pro)\n* [Wes\' CSS Grid Course](https://cssgrid.io/)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ad4b20d8a0caf759c5c4004e32008da1b93c342a5739eaa6cca11d3d4ab0f038', 'potluck-are-classes-dead-tutorials-vs-real-life-cra-vs-next-scraping-more', '/shows/124 - potluck.md', '2023-10-16 20:06:58.078', '2023-10-27 15:57:46.394', 'TASTY'),
('syntax_podcast_show_00125', 125, 'Hasty Treat - Communication Skillz', '2019-03-11 13:00:00.131', 'https://traffic.libsyn.com/syntax/Syntax125.mp3', '\nIn this Hasty Treat, Scott and Wes talk about communication — why it\'s important, how to improve, building good habits, tools and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:59 - Why it\'s important\n\n* Projects can live or die by the team\'s communication\n* Project timelines can be disrupted leading to big problems with scheduling\n\n5:53 - How to improve communication skills\n\n* PRACTICE\n* Pay attention to what works\n* Have a system – standups, weekly meetings, etc.\n* Over communicating can be annoying but effective\n* Realize that people can\'t read your mind, so having your intentions and timelines public and known is important\n\n9:12 - Building good habits\n\n* Need to practice\n* Build systems to support new habits\n\n11:04 - Tools we use to communicate\n\n* Email / Standups\n* [Notion](https://www.notion.so/)\n* GitHub Issues\n* [Slack](https://slack.com/)\n* [Missive](https://missiveapp.com/)\n\n## Links\n* [Syntax 075: Hasty Treat - Feedback and Criticism](https://syntax.fm/show/075/hasty-treat-feedback-and-criticism)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '72bc9bdd975f60c4e551019ee832afe95c6d450fd55d28feb7a6ea262dd07c14', 'hasty-treat-communication-skillz', '/shows/125 - communication.md', '2023-10-16 20:06:58.128', '2023-10-27 15:57:46.459', 'HASTY'),
('syntax_podcast_show_00126', 126, 'Bootcamps vs School vs Self-learning', '2019-03-13 13:00:00.426', 'https://traffic.libsyn.com/syntax/Syntax126.mp3', '\nIn this episode Wes and Scott talk about developer education — what to look for, what to avoid, and how to be a life-long learner with good problem solving skills.\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1). \n\n## The Armoury - Sponsor\n\nThe Armoury is a men\'s clothing and accessories retailer that provides some of the highest quality clothing you can buy. Designed for those of you who want the highest quality clothing that feels great and will last forever. Buy less, buy better. Follow them on Instagram [@thearmourynyc](https://www.instagram.com/thearmourynyc/) and check out their website [TheArmoury.com](https://thearmoury.com).\n\n## Show Notes\n\n3:59 - Our experiences\n\n* Scott:\n  * Went to college - Go Blue!\n  * Worked odd jobs while self teaching\n  * Was mentored and taught more while working at my first job\n  * Self directed since then\n  * Started teaching via LUT in 2012\n\n* Wes:\n  * Went to university for Business Tech - entirely self-taught\n  * Led and created part-time HTML + CSS program at HackerYou\n  * Led and created first bootcamp at HackerYou\n  * Led and created first JS part-time at HackerYou\n  * Been offered jobs at colleges + universities\n\n10:02 - School - $$$\n\n* Pros\n  * The best thing about school was unrestricted free time to find out what I enjoyed, which lead me to coding\n  * Co-ops can help you find what you like and what you don\'t like\n  * Life skills that involve you being on your own and figuring things out more\n  * You are exposed to interesting people and ideas\n  * CS Degree work can open more career doors\n  * Professional networking\n  * Many companies wont hire you without some sort of bachelor\'s degree (this might change)\n\n* Cons\n  * Not everyone has the time or money to devote two to five years to school — especially to something they might not end up enjoying\n  * Potentially outdated staff and course material\n    * Wes was often asked to lead a video editing course, print design course and a web development course\n  * Lot\'s of distractions\n\n23:10 - Bootcamp - $$\n\n* Pros\n  * Very fast, lots of info, but can be a bit overwhelming\n  * You can get up-to-speed extremely quickly\n  * Focused on hire-ability and job-ready skills\n  * Focused information\n  * Personality is really the deciding factor here - lots of people do well, and some don\'t\n\n* Cons\n  * Hit or miss — quality of bootcamps aren\'t vetted, so do your research\n  * Talk to someone who took it, find out who the instructors are\n  * You absolutely must continue learning after the bootcamp\n    * The bootcamp is just a push and you are expected to continue learning once you are done\n  * Not great for individuals that can\'t handle the pace\n  * You have to quit your job\n\n37:09 - Self-Taught - $\n\n* Pros\n  * Self-directed people will prevail here\n  * Can be drip-fed while earning money at another job\n  * Can be supplemented by a job (e.g. you are front-end and want to go full stack)\n  * Can get real world experience as a freelancer while you evolve\n\n* Cons\n  * Not for everyone\n  * Can be difficult to self-motivate\n  * Hard to get help - sometimes you can be stuck for hours on a two-second fix\n  * Potentially discouraging\n  * You might go down the wrong path without guidance on what you should learn\n\n47:11 - Part Time Programs - $\n\n* Pros\n  * Fantastic way to get up to speed with a new tech\n  * Goes at a good pace - twice a week usually\n  * Offered on weekends and evenings where you can maintain a regular job\n  * Very low risk - you can try it out\n\n* Cons\n  * Might not be as fast as you like it\n  * Quality is all over the map\n\n49:55 - Mentored Self Learning - $\n\n* Pros\n  * Best to do with a mentor on the job\n  * Mentor can help steer what to learn in your free time\n  * Good feedback and a place to ask lots of questions\n\n* Cons\n  * Can\'t be done without someone willing to mentor you\n  * Only as good as your mentor\n\n52:55 - What approach would we take?\n\n* Bootcamp > then immediately supplement with courses \n\n## Links\n\n* [Notion](https://www.notion.so)\n* [MindNode](https://mindnode.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Digital Minimalism by Cal Newport](https://amzn.to/2EJGRhi)\n* Wes: [American Kingpin](https://amzn.to/2tPFPdp)\n\n## Shameless Plugs\n\n* [Scott\'s React Hooks For Everyone](https://LevelUpTutorials.com/pro)\n* [Wes\' All Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '249131c8cf767b2d01e59ec1d5ae061d7ca1f78123ed572dba0bd2a0c70df9dc', 'bootcamps-vs-school-vs-self-learning', '/shows/126 - bootcamps.md', '2023-10-16 20:06:58.178', '2023-10-27 15:57:46.501', 'TASTY'),
('syntax_podcast_show_00127', 127, 'Hasty Treat - React Suspense', '2019-03-18 13:00:00.479', 'https://traffic.libsyn.com/syntax/Syntax127.mp3', '\nIn this Hasty Treat, Scott and Wes talk about React Suspense — what it is, how it works, support and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\nNot live yet - it may/will change. Be warned! \n\n3:59 - The problem we have with React right now\n\n  * API calls\n  * Image loading\n  * Code splitting\n\n7:16 - What is React Suspense?\n\n1. First we convert our async data fetching functions into **resources**\n2. Resources can then be read inside render - above the return\n3. Resources can be read from cache\n4. Resources can be preloaded into a cache if you anticipate needing them\n5. Resources reads are blocking for that function - you can\'t return JSX until the resource is read\n6. In your component that fetches data, there is no need to maintain a loading state\n7. Then, anywhere higher up in that tree, you can introduce a suspense component\n8. The suspense component can **detect** if any of it\'s children are currently loading data\n9. If they are, we can then choose to show a loader via the **fallback** prop\n10. We can also choose to **show nothing via the maxDelay prop** — this is helpful for fast connections that shouldn\'t see the spinner for a short split-second\n\n15:20 - Support\n\n* React.lazy and suspense for code splitting is already here\n* The React.lazy function lets you render a dynamic import as a regular component\n* Loadable Components is recommended if you need splitting with SSR\n* Data Resources is not here yet\n\n## Links\n* [React 16.x Roadmap](https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-mid-2019-the-one-with-suspense-for-data-fetching)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '63b205383b7514f6dc5918f6264d7f2c2adeb53b631b60240d23b3b322505958', 'hasty-treat-react-suspense', '/shows/127 - react suspense.md', '2023-10-16 20:06:58.225', '2023-10-27 15:57:46.562', 'HASTY'),
('syntax_podcast_show_00128', 128, 'How To Find Freelance Clients', '2019-03-20 13:00:00.865', 'https://traffic.libsyn.com/syntax/Syntax128.mp3', '\nIn this episode Wes and Scott talk about how to find freelance clients — tangible things you can do to position yourself and set yourself up for success.\n\n## Stackbit - Sponsor\n\nBuild modern JAMStack websites in minutes. Stackbit lets you combine any theme, site generator and CMS without complicated integrations. Join the beta today by visiting [stackbit.com/syntaxfm](https://www.stackbit.com/syntaxfm/).\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session replayer and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n1:27 - Question from Andreas Trattner: I am a backend developer with 4+ years experience working on large systems in Europe and am considering moving toward freelancing/contracting. However, I find it difficult to discover quality opportunities. Any tips you can share on how to strategically get projects?\n\n* There isn\'t a secret trove of work, and there\'s no one way to do it.\n\n4:50 - Relationships\n\n* Trust and relationships rule all. The best paying gigs are never advertised. \n* Who should you know?\n  * Other developers\n    * **How?** Meetups, Conferences, Twitter, Slack rooms, Friends\n    * Tip: Volunteering is a great way to get in to conferences, plus you often get to know people\n    * Tip: If you are friends of a friend who gets a lot of work, as for a introduction\n  * Designers and marketers\n    * You usually work together\n    * **How?** Twitter, Email, Dribbble, Instagram\n  * Project managers\n    * **How?** Cold emails, tweets\n  * Office managers\n    * Life blood of the office - they know everyone\n    * Often move into other roles\n    * **How?** Meetups, previous employees\n  * Entrepreneurs\n    * Lots of connections, often switching gears\n    * **How?** Demo camps, Facebook marketing groups\n  * Venture capitalists\n    * Have dozens of companies and tons of connections\n    * **How?** Demo camps, introductions, cold email\n\n19:08 - Display of expertise\n\n* It certainly is an option to just be really freaking good at what you do\n* Speaking at conferences and local meetups\n* Working on open source\n  * Helping in chat rooms\n  * Posting guides\n  * Maintaining docs\n* Offering reviews / Make things public\n  * Performance - [Harry Roberts from CSS Wizardry](https://csswizardry.com/)\n  * Accessibility  - [HeydonWorks](http://www.heydonworks.com/)\n  * WordPress speed\n  * React checking\n* Start a podcast\n* Blogging\n* Volunteering\n\n9:22 - Visibility\n\n* You need to let everyone know what you do. Your mom\'s uncle\'s friend\'s cousin on Facebook might casually ask for recommendations.\n* Instagram / Photos. Showing people what you are doing and what you are working on will make a mental note in their head that you do that type of work.\n* Facebook / Twitter / Instagram\n* Blogging\n  * This makes the \"vetting\" process much easier\n* Tweeting\n* YouTube videos\n* Slack channels you are involved in\n\n38:02 - Other tactics\n\n* SEO - Locality (Toronto designer), specific technologies (Redux contractor)\n* Craigslist\n  * This one sucks, but it can lead to decent work occasionally\n  * You need to be more vigilant in screening, most clients will suck\n* Cold asks - Just ask people what works well\n  * \"Hey, I\'m looking to book a few contracts starting June 2019. I love working with ______ and you can see my work here\"\n* Put a phone number on your website. Seriously.\n* UpWork\n  * Won\'t make as much money here because of competition\n* Local business listings\n  * Find online and offline biz listings\n  * Old fashioned — putting your card on bulletin boards\n\n47:29 - Maintaining Relationships\n\n* Check in every few months with non-biz related contact\n  * But also just straight up ask for work\n* Christmas / Thank-you gifts\n\n## Links\n* [Canadian Couch Potato](https://canadiancouchpotato.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Google Drive Scanner](https://support.google.com/drive/answer/3145835?co=GENIE.Platform%3DAndroid&hl=en)\n* Wes: [Endy Mattress](https://ca.endy.com/)\n\n## Shameless Plugs\n* [Scott\'s React Hooks For Everyone](https://LevelUpTutorials.com/pro)\n* [Wes\' All Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a9c70285f041fcb11fc3b3b8769b6b7e8556ad931a68b7bc434b7eaab9ee3601', 'how-to-find-freelance-clients', '/shows/128 - freelance clients.md', '2023-10-16 20:06:58.265', '2023-10-27 15:57:46.603', 'TASTY'),
('syntax_podcast_show_00129', 129, 'Hasty Treat - Why Use a Frontend Framework at All?', '2019-03-25 13:00:00.643', 'https://traffic.libsyn.com/syntax/Syntax129.mp3', '\nIn this Hasty Treat, Scott and Wes talk about frontend frameworks — what they are, when you need one, how to organize your code for maximum efficiency, and more!\n\n## Stackbit - Sponsor\n\nBuild modern JAMStack websites in minutes. Stackbit lets you combine any theme, site generator and CMS without complicated integrations. Join the beta today by visiting [stackbit.com/syntaxfm](https://www.stackbit.com/syntaxfm/).\n\n## Show Notes\n\n3:08 - What is a frontend framework?\n\n* JavaScript based\n    * Controls applications such as:\n    	* Routing\n    	* Rendering\n    	* Data Fetching\n	* Examples:\n    	* React\n    	* Angular\n    	* VueJS\n    	* Ember\n    	* Backbone\n    	* Svelte\n\n5:54 - When to use a frontend framework\n\n* The Link between your JavaScript data and the DOM (your HTML) isn\'t live\n* The use of frameworks makes re-updating the DOM (after the initial variable update) easy\n* You need an opinionated way to handle complexity\n    * Example:\n    	* You add an item to a shopping cart, send the event to the backend, and update both the number of items in the cart and the \"Add to cart\" button\n    	* Event Handlers - binding and un-binding\n* Your client wants a fast, modern experience\n* Seamless routing and page transitions\n* Fast prototyping\n* Access to battle-tested libraries\n    * Security\n    * Perf\n\n14:24 - When not to use a frontend framework\n\n* When using CMS like WordPress and Drupal\n* A medium amount of JavaScript is needed - Vanilla JS will work fine\n    * Modals\n    * Slideshows\n    * Form submits\n* Static pages, no JS functionality\n* Updating an existing project\n\n17:20 - Why can\'t I just use jQuery?\n\n* Vanilla JS contains all of jQuery\'s available DOM APIs \n* Frameworks provide structure\n* Organizes code for big projects\n\n## Links\n* [Syntax 039: Is jQuery Dead?](https://syntax.fm/show/039/is-jquery-dead)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'babc8ef7753e0f1e96c7a2aace34fde97befb6183c323a22df89f5f839adae8a', 'hasty-treat-why-use-a-frontend-framework-at-all', '/shows/129 - Frontend Frameworks.md', '2023-10-16 20:06:58.314', '2023-10-27 15:57:46.645', 'HASTY'),
('syntax_podcast_show_00130', 130, 'The VueJS Show (Scott teaches Wes)', '2019-03-27 13:00:00.675', 'https://traffic.libsyn.com/syntax/Syntax130.mp3', '\nIn this episode Wes and Scott talk about VueJS - what it is, how it compares to other frontend frameworks, and how to get the most out of it.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Clubhouse - Sponsor\n\nClubhouse is the first project management software that brings everyone together so that teams can focus on what matters: creating products that customers love. Clubhouse provides a perfect balance of simplicity and structure for better cross-functional collaboration. Check out [https://clubhouse.io/syntax](https://clubhouse.io/syntax) and get your first two months free. \n\n## Show Notes\n\n2:22 - What\'s the deal with VueJS?\n\n* Combines ideas from Angular 1, React and Blaze\n* Ease of Angular 1\n* App structure of React\n\n8:02 - Components\n\n* Template syntax is similar to handlebars\n  * aka {{stuff}}\n\n* v-bind:property\n  * v-bind:property or simply :bind allows you to dynamically bind a value to a property\n\n* Props\n  * Props must be declared before they can be used in a template.\n\n* Script tag\n  * Where imports happen\n  * Where props are defined, computed properties, action events and lifecycle\n\n* Actions\n  * `v-on:click=\"doSomething\"`\n  * `@click=\"doSomething\"`\n  * These will run a doSomething event defined in your script export via methods\n\n* Lifecycle\n  * How does data fetching work?\n  \n* CSS\n  * Can be scoped to file by adding `<style scoped>` to your property\n\n* Global Registration\n  * You can register a global component and not have to import it\n\n36:38 - Features\n\n* CLI\n  * Easy to use when creating new projects\n\n* Animations\n  * Baked in to core\n  * A transition component wraps your code and just have a `v-if` on the element you are transitioning\n  * There is also more intense javascript options via `v-on`\n\n* Routing\n  * 1st party router `vue-router` with support for 3rd party routers\n\n* Global State\n  * Vuex\n\n45:57 - Ecosystem\n\n* Nuxt — AKA Next.js for Vue\n* Gridsome — AKA Gatsby for Vue\n* Native?\n\n## Links\n* [Angular](https://angular.io/)\n* [React](https://reactjs.org/)\n* [Blaze](http://blazejs.org/)\n* [What Hooks Mean for Vue](https://css-tricks.com/what-hooks-mean-for-vue/)\n* [Nuxt.js](https://nuxtjs.org/)\n* [Next.js](https://nextjs.org/)\n* [Gridsome](https://gridsome.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [NativeScript](https://www.nativescript.org/)\n* [Vue Native](https://vue-native.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Wes: [Modified Power Wheels](http://www.modifiedpowerwheels.com/)\n* Scott: [Ezy Jeans by Uniqlo](https://www.uniqlo.com/us/en/men/jeans/ezy-jeans)\n\n## Shameless Plugs\n* Wes: [Node.js and React Scraper Tutorial](https://www.youtube.com/watch?v=rWc0xqroY4U&list=PLu8EoSxDXHP4xVFdNGakvzJ1OUQ6S_3l3)\n* Scott: [Static Vue with Gridsome Coming Soon](https://www.leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '65ffc9da4cd65a10013476e91d7d247056e05d231e3c111f508df3a2cfc9c4c1', 'the-vuejs-show-scott-teaches-wes', '/shows/130 - vue.md', '2023-10-16 20:06:58.356', '2023-10-27 15:57:46.694', 'TASTY'),
('syntax_podcast_show_00131', 131, 'Hasty Treat - Bike Shedding', '2019-04-01 13:00:00.740', 'https://traffic.libsyn.com/syntax/Syntax131.mp3', '\nIn this Hasty Treat, Scott and Wes talk about bike shedding - issues that are hotly debated, but may not matter that much in the long run.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n3:03 - What is Bike Shedding? \n\n* Technical disputes over minor, marginal issues conducted while more serious ones are being overlooked. The implied image is of people arguing over what color to paint the bike shed while the house is not finished. \n\n4:39 - Tabs vs spaces\n\n* Two spaces\n\n5:50 - Single vs double quotes\n\n* Single in JS, double in HTML\n\n7:05 - Semicolons or not\n\n* Semicolons\n\n9:01 - Grouping/ordering CSS properties\n\n* Wes: Format\n* Scott: Alphabetical\n\n12:35 - `var` vs `let` vs `const`\n\n* Scott: `const` for life — `let` when needed\n* Wes: `const` by default — change to `let` when needed\n\n14:24 - Default vs named exports\n\n* Use both\n* Mix-n-match\n\n15:58 - Should designers code?\n\n* If interested, sure\n\n17:58 - Which front-end framework\n\n* Whichever one best suits your needs\n\n19:30 - Vim/Emacs vs Atom/VS Code/Sublime\n\n* VS Code\n\n21:53 - Small perf wins\n\n* Micro optimization often aren\'t needed\n\n25:14 - Browser support\n\n* If you\'re required to support it, then support it\n\n25:47 - Block formatting\n\n* Function block\n* Else on a new line vs else after block\n\n29:07 - Trailing comma\n\n## Links\n* [Law of Triviality](https://en.wikipedia.org/wiki/Law_of_triviality)\n* [React](https://reactjs.org/)\n* [Vue.js](https://jp.vuejs.org/index.html)\n* [AngularJS](https://angularjs.org/)\n* [Ember.js](https://emberjs.com/)\n* [Vim](https://www.vim.org/)\n* [Emacs](https://www.gnu.org/software/emacs/)\n* [Atom](https://atom.io/)\n* [Sublime](https://www.sublimetext.com/)\n* [VS Code](https://code.visualstudio.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '4728be48c7c1e88560e1cc5d737e77d00da8bb422caf64536945f08812697bc1', 'hasty-treat-bike-shedding', '/shows/131 - bike shedding.md', '2023-10-16 20:06:58.390', '2023-10-27 15:57:46.737', 'HASTY'),
('syntax_podcast_show_00132', 132, 'Potluck - Interview Qs × Headless CMS × React Hooks × Resume Design × Redux vs Context × More!', '2019-04-03 13:00:00.815', 'https://traffic.libsyn.com/syntax/Syntax132.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - interview questions, headless CMSs, resume design, redux vs context, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:21\n\n* Q: Are there any tutorials you would recommend to learn more computer science related knowledge (algorithms, closures, etc.)?\n\n5:12\n\n* Q: Do you have any suggestions for picking a headless CMS?\n\n8:55\n\n* Q: Do you have any advice for someone in a customer service background seeking a more flexible job with remote work opportunities? Resources? Is this a realistic goal or a good way to approach my job search?\n\n15:13\n\n* Q: How much importance would you place in the design of a resume? Is it worth the cost?\n\n21:09\n\n* Q: With the new React Hooks and Context API, do we still need Redux?\n\n25:37\n\n* Q: If either of you could change anything about your personal tech stack, what would it be and why?\n\n29:07\n\n* Q: Do you prefer to use React\'s *defaultProps* or plain JS *default function parameters* to give your component\'s props some default values?\n\n30:44\n\n* Q: You guys chat CMS sometimes - why no love for Umbraco?\n\n35:53\n\n* Q: I\'m ready for a new challenge, how do I break this to my employer?\n\n38:16\n\n* Q: What\'s the difference between `const add = (a, b) => { return a + b }` and `function add (a, b) { return a + b }`?\n\n## Links\n\n* [Udacity](https://www.udacity.com/)\n* [Coursera](https://www.coursera.org/)\n* [Contentful](https://www.contentful.com/)\n* [Ghost](https://ghost.org/)\n* [Prismic](https://prismic.io/)\n* [Strapi](https://strapi.io/)\n* [HeadlessCMS](https://headlesscms.org/)\n* [Sanity](https://www.sanity.io/)\n* [WordPress](https://wordpress.org/)\n* [Drupal](https://www.drupal.org/)\n* [Umbraco](https://umbraco.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [J.A. Henckels International 10-piece Capri Granitium Nonstick Cookware Set](https://www.costco.com/J.A.-Henckels-International-10-piece-Capri-Granitium-Nonstick-Cookware-Set.product.100397883.html)\n* Wes: [IRWIN VISE-GRIP 2078300 Self-Adjusting Wire Stripper, 8\"](https://amzn.to/2WlXRQQ)\n\n## Shameless Plugs\n\n* [Scott\'s Gridsome Series](https://LevelUpTutorials.com/pro)\n* [Wes\' YouTube](https://www.youtube.com/user/wesbos)\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c985d783f53c5b85411cc76aefd190900db0ebd9eac213ba145ae02a0acd623c', 'potluck-interview-qs-headless-cms-react-hooks-resume-design-redux-vs-context-more', '/shows/132 - potluck.md', '2023-10-16 20:06:58.427', '2023-10-27 15:57:46.787', 'TASTY'),
('syntax_podcast_show_00133', 133, 'Hasty Treat - Tips For A Good Portfolio', '2019-04-08 13:00:00.344', 'https://traffic.libsyn.com/syntax/Syntax133.mp3', '\nIn this Hasty Treat, Scott and Wes talk about portfolios - best practices, organization, and how to use what people are looking for to stand out in the right ways.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:21 - Include screenshots (or don\'t). Often clients can ruin a site after you hand it off.\n\n6:19 - Include list of technologies used\n\n7:25 - Include list of problems solved\n\n7:48 - Use company logos (if allowed)\n\n9:13 - Show mockups on modern laptops/phones\n\n10:04 - Show your work (mockups, sketches, layouts, etc.)\n\n11:39 - Keep it updated\n\n12:10 - You don\'t need a million examples — max out somewhere around five. People just need a few quick examples of the type of stuff you work on.\n\n14:11 - What about using side projects and tutorials?\n\n16:28 - Dribbble, Github and Instagram are all valid portfolio options as well — often that is the first place people look. Don\'t ignore these.\n\n* A hot stuff profile on any of these will make you more hireable. Make sure it\'s creative and looks nice.\n\n## Links\n* [Wordpress](https://wordpress.com/)\n* [Google](https://www.google.com/)\n* [Ford](https://www.ford.com/)\n* [Air Canada](https://www.aircanada.com/ca/en/aco/home.html)\n* [Dribbble](https://dribbble.com/)\n* [Github](https://github.com/)\n* [Instagram](https://www.instagram.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'cea25b2cf0d22e9ed5d04ef38d23ba5579b1480d5b25e961debc7a01714f29d0', 'hasty-treat-tips-for-a-good-portfolio', '/shows/133 - portfolios.md', '2023-10-16 20:06:58.464', '2023-10-27 15:57:46.827', 'HASTY'),
('syntax_podcast_show_00134', 134, 'Syntax Live React Edition', '2019-04-10 13:00:00.966', 'https://traffic.libsyn.com/syntax/Syntax134.mp3', '\nIt\'s another live episode of Syntax in which Wes and Scott do Hook\'d on Hooks, Who\'s Snackin\' on React, Stump\'d, Unpopular Opinions, Q & Eh, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## The Armoury - Sponsor\n\nThe Armoury is a men\'s clothing and accessories retailer that provides some of the highest quality clothing you can buy. Designed for those of you who want the highest quality clothing that feels great and will last forever. Buy less, buy better. Follow them on Instagram [@thearmourynyc](https://www.instagram.com/thearmourynyc/) and check out their website [TheArmoury.com](https://thearmoury.com).\n\n## Show Notes\n\n6:54 - Who\'s Snackin\' On React\n\nGuess which of these websites have their homepage partially or fully built in React?\n\n* [EltonJohn.com](https://www.eltonjohn.com/) or [ArianaGrande.com](https://www.arianagrande.com/)?\n* [Ferrari.com](http://ferrari.com/) or [Lamborghini.com](http://lamborghini.com/)?\n* [Starbucks.com](https://app.starbucks.com/) or  [Dunkindonuts.com](http://dunkindonuts.com/)?\n* [WayFair.com](http://wayfair.com) or [Ikea.com](http://ikea.com)?\n* [Walgreens.com](https://www.walgreens.com/) or [Cvs.com](https://www.cvs.com/)?\n\n10:55 - Hook\'d on Hooks\n\n* Wes:\n  * useSocket\n  * useStaticQuery (gatsby)\n  * useKeyPress\n\n* Scott\n  * useLocalStorage\n  * useClickOutside\n  * useMeasure\n  * useGesture\n\n17:47 - This, That, Both, or Neither?\n\n* **Gutenborg:** A WordPress GUI plugin for creating react-based gutenberg blocks, or a 90\'s budget TV show about Cyborgs who read?\n* **Nashorn:** A Java based JavaScript engine developed by Oracle, or a popular rock climbing spot in Portland?\n* **Easy Peasy:** A React state library, or children\'s spoon set?\n* **Use Boxmen:** A hooks library that gets box model dimension, or a puzzle-based strategy game for children?\n* **Toggs:** A lightweight styleable toggle component, or rain resistant outdoor gear?\n* **Landwind:** A set of React components for using the Tailwinds CSS Library, or a Chinese Knock-off Land Rover SUV?\n* **Freeflow:** A redux-like state management library built on state, context and hooks, or a California-based hot tub company?\n* **Ubergrippen:** A popular rock climbing spot in Denver, or a client-side video stabilization framework built on the filereader API?\n\n26:22 - Tag Team Coding React\n\n* Fetch data from the dad jokes API\n* Show a loading indicator\n* Have a button to fetch a new joke\n\n36:24 - Stump\'d\n\n* What is a react PureComponent for?\n* Why might you use a callback with setState?\n* How would you reverse an array without mutating the original array?\n* Can you explain what a \"downtown job\" is?\n* When would you use useReducer?\n* What makes useLayoutEffect different from useEffect?\n* What propType would you use for an object that contains a number and a string\n\n43:11 - Unpopular Opinions. Overrated, Underrated?\n\n* Our own unpopular opinions\n  * Scott: React devs like to make things harder than they need to be.\n* [Dan Abramov](https://twitter.com/dan_abramov/status/1109461037391187968)\n* [Ryan Florence](https://twitter.com/ryanflorence/status/1109513902721634304)\n* [Sebastian Markbage](https://twitter.com/sebmarkbage/status/1109481482421067776)\n* [Jared Palmer](https://twitter.com/jaredpalmer/status/1109504427562545153)\n* [Sean Thomas Larkin](https://twitter.com/TheLarkInn/status/1109516791565303808)\n* [Sergey Ryzhov](https://twitter.com/latviancoder/status/1109465342215114752)\n* [Sophie Alpert](https://twitter.com/sophiebits/status/1109581621680730113)\n* [Parker McMullin](https://twitter.com/_googlemac/status/1109461529055756288)\n* Vue does it better _____\n\n52:45 - Q + EH with Wes and Scott\n\n* What where the first apps you worked on?\n* What React problem stumped you for the longest time?\n* What\'s your most expensive mistake?\n* Do we need classes in Javascript?\n* How do you explain what you do to your mom?\n* How do you explain React?\n* What made you start wanting to code?\n* What\'s the hackiest thing you\'ve ever done?\n* Where do you see yourselves in 10 years? \n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'fb74a98ef0012f44564b60558a7fe38949c2aadc9afe5867c409465808d3e681', 'syntax-live-react-edition', '/shows/134 - live.md', '2023-10-16 20:06:58.503', '2023-10-27 15:57:46.882', 'TASTY'),
('syntax_podcast_show_00135', 135, 'Hasty Treat - Cranky Developers', '2019-04-15 13:00:00.976', 'https://traffic.libsyn.com/syntax/Syntax135.mp3', '\nIn this Hasty Treat, Scott and Wes talk about cranky developers — those devs who never seem happy about anything, always mad about tech choices, and constantly writing off any new tech as simply a \"fad\" or unnecessary. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:20 - How to deal with cranky devs\n\n* Many experienced developers prefer older, stable technology for a reason. They have been through it before. \n\n7:14 - Questions to ask when considering new tech:\n\n* Is it better for the product?\n* Is it better for the users?\n* Is it better for the business?\n* Is it better for the developer?\n\n16:39 - How to convince them:\n\n* Proof of concept - show them it\'s better.\n\n18:28 - Things to acknowledge:\n\n* There are risks in changing technologies.\n* There are costs - training, tooling, hosting.\n\n21:20 - Some people are not interested in improving themselves\n\n* They got the job they want and are short sighted about the future.\n* You can appeal to management about making progressive choices.\n* If management isn\'t interested, you should look for a new job.\n\n## Links\n* [Sass](https://sass-lang.com/)\n* [Backbone](https://backbonejs.org/)\n* [Babel](https://babeljs.io/)\n* [Gulp Babel](https://github.com/babel/gulp-babel)\n* [ES6](https://es6.io/)\n* [React for Beginners](https://reactforbeginners.com/)\n* [Missive](https://missiveapp.com/)\n* [Swix](https://www.swixsport.com/) --> [Getting Closure on Hooks](https://youtu.be/Wt4kuspJIxY?t=3184)\n* [React](https://reactjs.org/)\n* [Flux](https://justgetflux.com/)\n* [Glamorous](https://glamorous.rocks/)\n* [PayPal](https://www.paypal.com/)\n* [GraphCool](https://www.graph.cool/)\n* [Facebook](https://www.facebook.com/)\n* [Netflix](https://www.netflix.com/)\n* [MJML](https://mjml.io/)\n* [Juice](https://github.com/Automattic/juice)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'dd65464e31d4518c6cebb58b7a72ac942bb685f98fdab14c325b95c14ed3fdaa', 'hasty-treat-cranky-developers', '/shows/135 - cranky devs.md', '2023-10-16 20:06:58.547', '2023-10-27 15:57:46.931', 'HASTY'),
('syntax_podcast_show_00136', 136, '9 Ways to Stay Sane While Working Remotely', '2019-04-17 13:00:00.635', 'https://traffic.libsyn.com/syntax/Syntax136.mp3', '\nIn this episode of Syntax, Scott and Wes talk about working remotely — problems, challenges, and how to keep yourself sane, productive and efficient.\n\n## LogRocket - Sponsor\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n4:34 - Find your spots\n\n* Coffee shops\n* Cafes\n* Library\n\n7:40 - Deal with Distractions\n\n* Log out of Twitter/Facebook/Instagram\n* Delete Apps — only use the browser\n* Put phone and computer on \"do not disturb\"\n* Focus App\n\n11:33 - Prioritize your tasks\n\n* Drifting is possible when it isn\'t clear what you need to do\n* If you don\'t have someone telling you what to do, it can be hard to get started\n* Todo lists\n\n17:15 - Make time to be social\n\n* Go to meet ups\n* Chat in Slack or Discord rooms\n* Talk to people at work spaces\n\n21:48 - Get fresh air\n\n* Go for a walk\n* Open the windows\n\n24:03 - Get moving\n\n* Hit the gym\n* Do push-ups in your office\n\n28:09 - Have a separate work space\n\n* Designated office\n* Don\'t work from the couch with the TV on\n* Clean your damn office 😂\n\n38:16 - Act like you are going to work\n\n* Dress well\n* Fix up, look sharp - get yourself ready to go\n\n40:44 - Take Breaks (not too many, not too long)\n\n* Some people like the Pomodoro Technique\n* Take a lunch break away from your computer\n* Don\'t make a break longer than 15 minutes or so\n\n## Links\n* [Focus](https://heyfocus.com/)\n* [Discord](https://discordapp.com/)\n* [Todoist](https://todoist.com/)\n* [Getting Things Done](https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0143126563/)\n* [Eat That Frog](https://www.amazon.com/Eat-That-Frog-Great-Procrastinating/dp/162656941X/)\n* [The Life-Changing Magic of Tidying Up: The Japanese Art of Decluttering and Organizing](https://www.amazon.com/Life-Changing-Magic-Tidying-Decluttering-Organizing/dp/1607747308)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Doug DeMuro\'s YouTube Channel](https://www.youtube.com/channel/UCsqjHFMB_JYTaEnf_vmTNqg)\n* Wes: [Yeti Rambler 14 oz.](https://www.amazon.com/dp/B07FPWVVTN/)\n\n## Shameless Plugs\n* [Scott\'s Gridsome Course](https://www.leveluptutorials.com/store/lut-dd033)\n* [Wes\' YouTube Channel](https://www.youtube.com/user/wesbos)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '89fd0050f36a213304b63366ca67510990210c75335b8df42ab3cbf100c4d8f1', '9-ways-to-stay-sane-while-working-remotely', '/shows/136 - working remotely.md', '2023-10-16 20:06:58.584', '2023-10-27 15:57:46.974', 'TASTY'),
('syntax_podcast_show_00137', 137, 'Hasty Treat - CSS Frameworks', '2019-04-22 13:00:00.358', 'https://traffic.libsyn.com/syntax/Syntax137.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS frameworks - what they are, why they\'re important, and when (and when not) to use them.\n\n## Stackbit - Sponsor\n\nBuild modern JAMStack websites in minutes. Stackbit lets you combine any theme, site generator and CMS without complicated integrations. Join the beta today by visiting [stackbit.com/syntaxfm](https://www.stackbit.com/syntaxfm/).\n\n## Show Notes\n\n 2:52 - What is a CSS framework?\n\n* Pre-written CSS that takes over the basic styling of your app\n* Can include just utilities or lots of styles (minimal to overboard)\n* Twitter Bootstrap and Zurb Foundation were the pioneers\n* Follow different CSS styles from \"functional CSS\" to utility-first to BEM\n\n7:33 - Functional (aka Utility) based\n\n* Tachyons\n* Tailwind\n\n9:59 - Preprocessor based\n\n* Bootstrap\n\n11:33 - Styled Components based\n\n* Rebass\n* Styled Systems\n* Facepaint\n\n15:50 - Why use one?\n\n* Makes styling FAST\n* Makes hard things easy\n* Some, like Bootstrap, have themes\n* Keeps your own CSS minimal and organized\n* Built on an established system\n* Lots of people use the same CSS\n\n19:22 - Why not use one?\n\n* CSS class hell\n* Stops you from learning how CSS works\n* Size (not all have this problem)\n* Brotli, Purify CSS\n* You will be overriding a ton of it\n* You like exclusively writing the code you need and nothing else\n\n\n## Links\n* [Jamstack](https://jamstack.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Hugo](https://gohugo.io/)\n* [Jekyll](https://jekyllrb.com/)\n* [Bootstrap](https://getbootstrap.com/)\n* [Foundation](https://foundation.zurb.com/)\n* [Tailwind CSS](https://tailwindcss.com)\n* [Tachyons](https://tachyons.io/)\n* [Styled System](https://github.com/styled-system/styled-system)\n* [REBASS](https://rebassjs.org/)\n* [Facepaint](https://github.com/emotion-js/facepaint)\n* [Brotli](https://github.com/google/brotli)\n* [Purify CSS](https://github.com/purifycss/purifycss)\n* [Cloudflare](https://www.cloudflare.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '83796f57a32c4382d33f96e0d7eca94ed040a1a03195f842e3db97c74e44a1d2', 'hasty-treat-css-frameworks', '/shows/137 - css frameworks.md', '2023-10-16 20:06:58.623', '2023-10-27 15:57:47.016', 'HASTY'),
('syntax_podcast_show_00138', 138, 'What\'s New in Web Development', '2019-04-24 13:00:00.230', 'https://traffic.libsyn.com/syntax/Syntax138.mp3', '\nIn this episode of Syntax, Scott and Wes talk about what\'s new in web development: new promise static methods, new CSS functions, PWAs and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Clubhouse - Sponsor\n\nClubhouse is the first project management software that brings everyone together so that teams can focus on what matters: creating products that customers love. Clubhouse provides a perfect balance of simplicity and structure for better cross-functional collaboration. Check out [https://clubhouse.io/syntaxpodcast](https://clubhouse.io/syntaxpodcast) and get your first two months free.\n\n## Show Notes\n\n5:38 - New Promise static methods\n\n* `Promise.all`\n* `Promise.race()`\n* `Promise.allSettled()`\n* `Promise.any()`\n\n10:16 - Lazy loading images\n\n* [Addy Osmani\'s Lazy-Loading blog post](https://addyosmani.com/blog/lazy-loading/)\n\n14:25 CSS Houdini aka JS in CSS\n\n* * [CSS Houdini Experiments](https://css-houdini.rocks/)\n\n20:32 - Subgrid\n\n* [Syntax 109: Hasty Treat - CSS Grid Level 2 aka Subgrid](https://syntax.fm/show/109/hasty-treat-css-grid-level-2-aka-subgrid)\n* Subgrid is coming to Firefox - [Jen Simmons](https://twitter.com/jensimmons/status/1095048538311061504)\n* [Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1240834)\n\n24:31 - Native modules in browser\n\n* `type=\"module\"`\n* dynamic `import()`\n\n27:08 - Node Native Modules update\n\n* package.json will now have a type entry where\n* [NodeJS - Plan For New Modules Implementation](https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md)\n* [New ESM Implementation](https://github.com/nodejs/node/pull/26745/commits/b1094dbe19f31f7a69ad16d193748f610b159073)\n\n29:17 - PWA install app and Google PlayStore\n\n* Already shipped in Chrome\n* Java API that communicates through services with Chrome\n* Trusted Web Activity aka TWA\n* All content in TWAs must comply with Play store policy including policies for payments in-app purchases and other digital goods\n* Already existing TWAs include Twitter Lite, Google Maps Go, Instagram Lite\n* Passing the PWA Criteria\n* Performance Score with a minimum of 80/100, tested with [Lighthouse](https://developers.google.com/web/tools/lighthouse/)\n* All current Google Play Store rules\n\n35:49 - CSS Scroll Snap\n\n* In many browsers already\n* `scroll-padding`\n\n38:17 - Aspect Ratio Unit\n\n* [Designing An Aspect Ratio Unit For CSS](https://www.smashingmagazine.com/2019/03/aspect-ratio-unit-css/)\n\n39:32 - CSS nesting\n\n* Disallows cross-domain cookies unless on the same domain/subdomain\n\n## Links\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Promise.allSettled()](https://github.com/tc39/proposal-promise-allSettled)\n* [Promise.any()](https://addyosmani.com/blog/lazy-loading/)\n* [Apollo](https://www.apollographql.com/)\n* [CodePen](https://codepen.io/)\n* [UC Browser](https://www.ucweb.com/)\n* [Parcel](https://parceljs.org/)\n* [Node.js](https://nodejs.org/ja/)\n* [Myles Borins\' Twitter](https://twitter.com/mylesborins)\n* [Twitter Lite](https://play.google.com/store/apps/details?id=com.twitter.android.lite&hl=en_US)\n* [Google Maps Go](https://play.google.com/store/apps/details?id=com.google.android.apps.mapslite)\n* [Instagram Lite](https://play.google.com/store/apps/details?id=com.instagram.lite&hl=en_US)\n* [Lighthouse](https://developers.google.com/web/tools/lighthouse/)\n* [Opera](https://www.opera.com/)\n* [Can I Use - modules](https://caniuse.com/#search=modules)\n* [Apple’s ITP](https://www.tune.com/blog/what-apples-intelligent-tracking-prevention-2-0-itp-means-for-performance-marketing/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Finding Drago](https://www.abc.net.au/radio/programs/finding-drago/)\n* Wes: [The Punk Rock MBA](https://www.youtube.com/channel/UCjewxGh1Gx5i5Uzxn0v-TPw)\n\n## Shameless Plugs\n* [Scott\'s Gridsome Course](https://www.leveluptutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '88e2ca945b95551f5469ea480dc9230b605d494ceb382028a6d403fabcf7066f', 'what-s-new-in-web-development', '/shows/138 - new in web dev.md', '2023-10-16 20:06:58.673', '2023-10-27 15:57:47.072', 'TASTY'),
('syntax_podcast_show_00139', 139, 'Hasty Treat - AMA - Money x Investments x Online Presence x More!', '2019-04-29 16:00:00.732', 'https://traffic.libsyn.com/syntax/Syntax139.mp3', '\nIn this special Hasty Treat, Scott and Wes answer your questions about money, investments, online presence and more!\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [https://logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:33 - Besides coding/teaching, do you have any another source of income (stocks, bonds, crypto, etc.)?\n\n9:03 - How do I build my online presence?\n\n13:05 - What\'s your favorite tasty treat (as in actual food)?\n\n16:33 - Wes, lets talk about the + symbol that you use to start the prompt for Cobalt2 — whats up with that?\n\n18:41 - How do you get out of a rut?\n\n## Links\n* [Canadian Couch Potato](https://canadiancouchpotato.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c79a1b0c9378eb058a47882fccfe8e351e67748a923a08830dd44f71d54fbb9f', 'hasty-treat-ama-money-x-investments-x-online-presence-x-more', '/shows/139 - ama.md', '2023-10-16 20:06:58.709', '2023-10-27 15:57:47.119', 'HASTY'),
('syntax_podcast_show_00140', 140, 'Potluck - Media Queries × NPM Vulnerabilities × Fullstack JS vs JAMstack × Web VR/AR × Switching Jobs × More!', '2019-05-01 16:00:00.977', 'https://traffic.libsyn.com/syntax/Syntax140.mp3', '\nIt\'s another potluck episode in which Wes and Scott answer your questions! This month - Media Queries, NPM Vulnerabilities, Web VR and AR, Fullstack JS vs JAMstack for freelancers, switching jobs, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:46\n\n* Q: I recently started a static site so I want as much of the site as possible to change layout with just CSS for responsive design. I am comfortable with media queries but find often times the design is very different between sizes. It is easy to tame the complexity of repeated data for the different component views keeping everything in sync but is it good practice to put two completely different component level views in a single HTML file? Does the repeated data in the static HTML have any effect on SEO?\n\n7:08\n\n* Q: How should a mid developer know when its time to leave the current company? Is tech stack (e.g frameworkless) a decent reason even though he/she is happy at the place, but feels like they are not growing enough?\n\n11:19\n\n* Q: Should I worry about the critical vulnerabilities when installing an NPM package?\n\n14:40\n\nI specifically use an external NPM package called [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) and then I just run `ncu`...\n\n15:06\n\n* Q: I\'ve had the idea for styling one site two different ways (professional/artistic) and giving visitors a button to toggle between the two. Too gimmicky? Secondary: how did you pick your brand colors?\n\n20:19\n\n* Q: Any SICK TIPS on career change? I\'m a full-time employee with two kids and a lovely wife, who wants a fulfilling career. I throw as much time in as I can to study, but I feel like it isn\'t enough to apply for jobs.\n\n24:01\n\n* Q: Within the next two years, how well do you think WebVR and WebXR technologies would fit within mainstream web development (think A-Frame, SparkAR, React 360 in normal websites and applications)?\n\n30:39\n\n* Q: Should I learn Fullstack JS or JAMstack for freelancing?\n\n35:34\n\n* Q: Is front-end development dying?\n\n37:30\n\n* Q: How do you deal with CSS-in-JS when you have one-off stuff, or coupled components/selectors like a [CSS] grid container and a grid child (think `grid-area`)? CSS-in-JS feels very verbose for this use case.\n\n42:07\n\n* Q: Scott always talks about Meteor. I thinks its really cool too. What\'s the future of it and why didn\'t it take off? It seems to have slowed down. They seem to have moved on to other projects like GraphQL stuff.\n\n## Links\n* [Influx](https://www.influxtechnology.com/)\n* [WebVR](https://webvr.info/)\n* [WebXR](https://www.w3.org/TR/webxr/)\n* [Google Maps will use a core Waze feature to improve public transit](https://news.yahoo.com/google-maps-core-waze-feature-223508153.html)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Making of a Manager](https://amzn.to/2Dq9WNG)\n* Wes: [DeWalt Oscillating Tool](https://amzn.to/2Iz7jNQ)\n\n## Shameless Plugs\n* Wes: [Wes\' Courses](https://wesbos.com/courses) — use coupon code \"syntax\" at checkout and get and extra $10 off.\n* Scott: [Animating React](https://leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '35e91f806b149bb7417c28968045a3ee0060f40344d42c1e2b4a9348209d0df1', 'potluck-media-queries-npm-vulnerabilities-fullstack-js-vs-jamstack-web-vr-ar-switching-jobs-more', '/shows/140 - potluck.md', '2023-10-16 20:06:58.750', '2023-10-27 15:57:47.164', 'TASTY'),
('syntax_podcast_show_00141', 141, 'Hasty Treat - Async + Await Error Handling Strategies', '2019-05-06 13:00:00.789', 'https://traffic.libsyn.com/syntax/Syntax141.mp3', '\nIn this Hasty Treat, Scott and Wes discuss different error handling strategies.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:07 - Try / Catch\n\n* This can be done at call time or inside the function\n\n4:10 - Higher Order Function\n\n* Makes a function that returns a new function which in turn calls your original function (but with a `.catch` chained on)\n\n7:46 - Handle the error when you call it\n\n* Use async/await but chain a `.catch` onto the end \n\n9:03 - Node.js Unhandled Rejection Event\n\n* `process.on(\'unhandledRejectionEvent\', callback)`\n\n9:40 - What to do with those errors\n\n* Send to error tracking service\n* Possible to give the user a reference number\n* Display good error text to user\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e685f455070ea8ce85429d7c2b026f5874fe3dbf47c0e394558e26082f48eae7', 'hasty-treat-async-await-error-handling-strategies', '/shows/141 - async await.md', '2023-10-16 20:06:58.787', '2023-10-27 15:57:47.204', 'HASTY'),
('syntax_podcast_show_00142', 142, 'Travis Neilson on Skills Gap, Design, Focus and Working at Google', '2019-05-08 13:00:00.042', 'https://traffic.libsyn.com/syntax/Syntax142.mp3', '\nIn this episode of Syntax, Scott and Wes talk to Travis Neilson about his career at Google, the challenges he faced, how to choose projects tips for devs wanting to get better at design, and more.\n\n## Stackbit - Sponsor\n\nBuild modern JAMStack websites in minutes. Stackbit lets you combine any theme, site generator and CMS without complicated integrations. Join the beta today by visiting [stackbit.com/syntaxfm](https://www.stackbit.com/syntaxfm/).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get up and running by typing `npm i -g @sanity/cli && sanity init` in your command line. Get an awesome supercharged free developer plan on [sanity.io/syntax](https://sanity.io/syntax?utm_source=syntax-fm&utm_campaign=syntax1).\n\n## Guests\n\n* [Travis Neilson](https://twitter.com/travisneilson)\n\n## Show Notes\n\n2:43 - Career path\n\n- On ambitions and where it all started\n\n23:15 - Being all in\n\n- On how to choose your next project\n\n33:31 - Working at Google\n\n- On the day-to-day at Google, the challenges of a big team, and constraints\n\n43:23 - Design tips for developers\n\n- Advice for devs who want to get better at design but are struggling\n- Thoughts on CSS frameworks\n- The one thing devs often get wrong about design\n\n## Links\n\n- [Travis Neilson\'s Website](http://travisneilson.com/)\n- [Travis Neilson\'s Podcasts](http://travisneilson.com/podcasts/)\n- [Helvetica — Gary Hustwit](https://www.amazon.com/Helvetica-David-Carson/dp/B079N3Y4C6)\n- [How one typeface took over movie posters](https://www.youtube.com/watch?v=yI4shGV1EsM)\n- [Just My Type: A Book About Fonts](https://www.amazon.com/Just-My-Type-About-Fonts/dp/1592407463)\n- [Work-Life Balance is a Joke](https://us6.campaign-archive.com/?u=2abae111d44df144b3b3986bc&id=43066ab0cb&e=%5BUNIQID%5D)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Travis: \n  * [Cults and Extreme Belief](https://www.hulu.com/series/cults-and-extreme-belief-732b89b1-7af0-4bed-9a28-6ca51d2b1e69)\n  * [Google Method Podcast](https://design.google/library/method-podcast-episode-1/)\n- Scott: [Sony Noise Canceling Headphones WH1000XM3](https://amzn.to/2Gqc7Tt)\n- Wes: [Little People Big Dreams Book Series](https://amzn.to/2DfA0Lk)\n\n## Shameless Plugs\n* [Wes\' Courses](https://wesbos.com/courses) & [Wes\' Youtube](https://www.youtube.com/user/wesbos)\n* [Animating React](https://www.leveluptutorials.com/tutorials/animating-react)\n* [How to Use Adobe XD](https://leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '606ec2987aebcebc187225f93e209f638cfa3fc4f518d403ca3b6682798bf093', 'travis-neilson-on-skills-gap-design-focus-and-working-at-google', '/shows/142 - travis neilson.md', '2023-10-16 20:06:58.829', '2023-10-27 15:57:47.248', 'TASTY'),
('syntax_podcast_show_00143', 143, 'Hasty Treat - The SHADOW DOM', '2019-05-13 13:00:00.187', 'https://traffic.libsyn.com/syntax/Syntax143.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Shadow Doms - what they are, the individual pieces involved with them, why they\'re important, and how to get started using them.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:41\n\n* What is the shadow DOM?\n\n4:25\n\n* What elements are shadow DOM?\n \n5:47\n\n* Styling shadow DOM elements\n\n8:54\n\n* Creating your own\n\n9:22\n\n* Frameworks\n\n## Links\n* [Using shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM)\n* [Shadow DOM v1: Self-Contained Web Components](https://developers.google.com/web/fundamentals/web-components/shadowdom?hl=en)\n* [Polymer](https://www.polymer-project.org/)\n* [Svelte 3](https://github.com/sveltejs/svelte/projects/3)\n* [Wildhoney - ReactShadow](https://github.com/Wildhoney/ReactShadow)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5d778e5a1e72744ec88a48364a162e19ced13cd7cc0b38c23e6374a1bad3753a', 'hasty-treat-the-shadow-dom', '/shows/143 - shadow dom.md', '2023-10-16 20:06:58.862', '2023-10-27 15:57:47.436', 'HASTY'),
('syntax_podcast_show_00144', 144, 'Side Hustles with Courtland Allen from Indie Hackers', '2019-05-15 13:00:00.608', 'https://traffic.libsyn.com/syntax/Syntax144.mp3', '\nIn this episode of Syntax, Scott and Wes talk all about side hustles with special guest Courtland Allen, from Indie Hackers! They talk about the story behind Indie Hackers, how to start your own side hustle, where to find ideas, listener questions, and more.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [LogRocket](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [Freshbooks](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Courtland Allen](https://twitter.com/csallen)\n\n## Show Notes\n\n1:05 - What\'s the back story behind Indie Hackers? \n\n5:30 - What is a side hustle? \n\n11:21 - How do you validate your idea?\n\n13:15 - What are some different types of side hustles?\n\n31:55 - What about people who don\'t like marketing?\n\n33:57 - What are some important pieces of side hustles? \n\n39:04 - How do you sell a business?\n\n42:40 - Listener Questions:\n\n* Q: How do you stop the side hustle from affecting your main job in regards to things like overtime, sleep and commitment?\n* Q: Should you frame yourself as a one-man-band or as a company? \n* Q: Have you heard stories of people living in cheap places, making bank? Are there any white whales you have been chasing to interview?\n\n## Links\n* [Carrd](https://carrd.co/)\n* [Balsamiq Mockups](https://balsamiq.com/)\n* [Flickity](https://flickity.metafizzy.co/)\n* [Nomad List](https://nomadlist.com/)\n* [Evan You](https://evanyou.me/)\n* [Evan You Patreon](https://www.patreon.com/evanyou)\n* [Park.io](https://park.io/)\n* [Making $125,000 a Month as a Solo Founder with Mike Carson of Park.io](https://www.indiehackers.com/podcast/034-mike-carson-of-park-io)\n* [Patreon](https://www.patreon.com/)\n* [Drift](https://www.drift.com/)\n* [Stripe](https://stripe.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Courtland:\n  * [Post-it Notes](https://www.post-it.com/3M/en_US/post-it/)\n  * [Poor Charlie\'s Almanack: The Wit and Wisdom of Charles T. Munger](https://www.amazon.com/Poor-Charlies-Almanack-Charles-Expanded/dp/1578645018)\n* Scott: [Akimbo](https://www.akimbo.me/)\n* Wes: [Elastic Wallet](https://www.amazon.com/s?k=elastic+wallets)\n\n## Courtland\'s Startup Validation Checklist\n* [Validation Checklist](https://docs.google.com/document/d/1e-pmkZCM96V_3FhwYFK5ubY8l52YNk9j4i25HWt6oyY/edit)\n\n## Shameless Plugs\n* Courtland: [IndieHackers Podcast](https://www.indiehackers.com/podcast)\n* Scott: [Animating React](https://www.leveluptutorials.com/tutorials/animating-react)\n* Wes: [CSS Grid Course](https://cssgrid.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bacdbea10c2fc0b60f2951e930d64a277f8cd1767d0c91d05d3f67c74eba8cc0', 'side-hustles-with-courtland-allen-from-indie-hackers', '/shows/144 - side hustles.md', '2023-10-16 20:06:58.896', '2023-10-27 15:57:47.479', 'TASTY'),
('syntax_podcast_show_00145', 145, 'Hasty Treat - AMA - Our Wives, Careers Outside Tech, and Favorites', '2019-05-20 13:00:00.178', 'https://traffic.libsyn.com/syntax/Syntax145.mp3', '\nIn this Hasty Treat, Scott and Wes are back with another AMA. This time they talk about their spouses, careers outside of tech, lots of favorites (movies, colors, clothes), and more!\n\n## Clubhouse - Sponsor\n\nClubhouse is the first project management software that brings everyone together so that teams can focus on what matters: creating products that customers love. Clubhouse provides a perfect balance of simplicity and structure for better cross-functional collaboration. Check out [https://clubhouse.io/syntaxpodcast](https://clubhouse.io/syntaxpodcast) and get your first two months free.\n\n## Show Notes\n\n2:58 - What do your wives do?\n\n6:40 - If you had to choose a different career, what would you do?\n\nIf you started learning another (programming) language today, what would it be?\n\n11:50 - Favorites (e.g. colors, movies, brands, etc.)\n\n18:08 - Who inspires you? \n\n26:19 - What’s your ratio of client work, learning new tech, and teaching via your courses, talks or Syntax.fm? You guys seem awfully busy, and it’s making me feel kinda lazy.\n\n## Links\n* [Pigeonhole Live](https://pigeonhole.at/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '37879bd1b881ee4eeb259c71550857d4ca17b6131a40d2ab67994ef992288a27', 'hasty-treat-ama-our-wives-careers-outside-tech-and-favorites', '/shows/145 - ama.md', '2023-10-16 20:06:58.945', '2023-10-27 15:57:47.597', 'HASTY'),
('syntax_podcast_show_00146', 146, 'CSS the 😎😎😎 Cool Parts', '2019-05-22 13:00:00.178', 'https://traffic.libsyn.com/syntax/Syntax146.mp3', '\nIn this episode Wes and Scott talk about the cool parts of CSS! From filters to variables, here are some cool (and amazing) things you can do with CSS in 2019.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n2:28 - Clip path\n\n6:35 - Filters\n\n16:24 - Background mix blend mode\n\n21:47 - Border images\n\n25:46 - Multiple background images\n\n27:47 - Multiple background gradients\n\n28:25 - Radial gradients\n\n29:06 - Multiple box-shadows\n\n34:30 - HEX + Alpha\n\n40:41 - Viewport units\n\n42:17 - Calc\n\n44:32 - CSS variables\n\n47:44 - Text decoration\n\n## Links\n* [Can I use](https://caniuse.com/)\n* [Clippy - CSS clip generator](https://bennettfeely.com/clippy/)\n* [CSS Filters](https://developer.mozilla.org/en-US/docs/Web/CSS/filter)\n* [Tweet: Using `mix-blend-mode:multiply`](https://twitter.com/wesbos/status/717052613934649344)\n* [CSS blend mode generator](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-blend-mode&preval=multiply)\n* [Lea Verou](http://lea.verou.me/)\n* [Codepen - Scott\'s digital text animations](https://codepen.io/stolinski/pen/myQrEr)\n* [Steve Schoger](https://www.steveschoger.com/)\n* [Mother-effing HSL](https://mothereffinghsl.com/)\n* [Diana Adrianne](http://diana-adrianne.com/purecss-francine/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Solar string lights](https://amzn.to/2LsIntR)\n* Wes: [Digital Calipers](https://amzn.to/2JkucEn)\n\n## Shameless Plugs\n* Wes: [Wes\' Courses](https://wesbos.com/courses) — use coupon code \"syntax\" at checkout and get and extra $10 off.\n* Scott: [Animating React](https://leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '7d2c7a022ae45d9d4f0bbe3d182bd64496859da2d840634e70c0fa5f6c38843a', 'css-the-cool-parts', '/shows/146 - CSS cool parts.md', '2023-10-16 20:06:58.985', '2023-10-27 15:57:47.649', 'TASTY'),
('syntax_podcast_show_00147', 147, 'Hasty Treat - Knowing Your Weaknesses', '2019-05-27 13:00:00.031', 'https://traffic.libsyn.com/syntax/Syntax147.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to identify and work on your weaknesses.\n\n## Logrocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [LogRocket](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:45 - Why care about weaknesses?\n\n* If we avoid the things we\'re afraid of or bad at we\'ll always grow in lopsided ways\n\n7:32 - As a developer\n\n* What skills / languages are you not good at or afraid of?\n\n14:06 - As an employee\n\n* Communication\n* Company and personal goals\n* Efficiency\n* Compatibility\n\n16:54 - As a human\n\n* How you treat people\n* Sharing your time\n* What you\'re neglecting\n* Your living space\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6ab3e3de1d90b8af8bff11f8d320278329be17304aa1becd9941fadbe68bacb6', 'hasty-treat-knowing-your-weaknesses', '/shows/147 - weaknesses.md', '2023-10-16 20:06:59.040', '2023-10-27 15:57:47.692', 'HASTY'),
('syntax_podcast_show_00148', 148, 'Potluck - CSS × Angular × Dev job preparation × Svelte × File organization × Gear × More!', '2019-05-29 13:00:00.777', 'https://traffic.libsyn.com/syntax/Syntax148.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about CSS, Angular, Svelte, dev job preparation and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [Sanity](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [Sanity](https://www.sanity.io/syntax).\n\n## Show Notes\n\n3:23 - Q: How big is too big for state? I have an object of around 1000 items which will be used in a search box on the frontend of my site, but the list of items won\'t be updated very often. What is the most efficient way to store these items and deliver them to the browser? Would you use state, a JSON object, a MongoDB document or some other way I haven\'t thought of? \n\n7:17 - Q: How much do I need to know before I start applying for dev jobs?\n\n9:26 - Q: Do you folks have any opinions on Skeleton loaders, and any thoughts on how best to implement them? At my day job we\'ve recently implemented skeleton loaders in a way that inherits the parent styles. Would love to know if there\'s any best practices for this or ways we can improve our setup.\n\n13:01 - Q: Do you think we still need to use CSS resets like normalize and sanitizer?\n\n14:56 - Q: Scott, can you tell the story of how you landed an interview for a job in Japan? I am moving to Japan next year and wondering how that opportunity arose for you.\n\n20:04 - Q: Do you guys have an opinion on angular good or bad? Or is it that you\'re more comfortable and have used React and Vue more often, so they\'re largely at the center of any framework discussions?\n\n22:54 - Q: Could you talk about naming and structuring files/folders in your applications? How do you name components and folders? Do you follow some sort of path of how to structure files in a web app?\n\n29:01 - Q: Do you think that Node is almost too powerful to handle some of the simpler tasks (a site that just needs a contact form for instance), or am I just missing some very simple configuration? It seems like other languages, such as PHP, might be better suited for some of these simple tasks and Node is really just meant for larger scale application? I guess what my question really boils down to is, for a freelancer, I understand that I need to have my hands in a lot of different tech stacks, but should I really dive in on PHP (or something else) to handle some of these simpler features a client might need?\n\n33:24 - Q: What do you guys think about Svelte? Before everything goes WASM will Svelte be the future of web programming?\n\n37:24 - Q: What smart phones and laptops do you use for work? (specific model and why)\n\n42:38 - Q: Should I apply for other jobs even if my contract might get renewed? Should I feel loyal to a company?\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [DaVinci Resolve 16](https://www.blackmagicdesign.com/products/davinciresolve/)\n* Wes: [Affinity Photo](https://affinity.serif.com/en-us/photo/)\n\n## Shameless Plugs\n* Wes: [Wes\' Courses](https://wesbos.com/courses) — use coupon code \"syntax\" at checkout and get and extra $10 off.\n* Scott: [Scott\'s Crouses](https://leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f77a9775082fb4895480b27f6df75f08beea7995273b710990bedc2e99b62ecf', 'potluck-css-angular-dev-job-preparation-svelte-file-organization-gear-more', '/shows/148 - potluck.md', '2023-10-16 20:06:59.083', '2023-10-27 15:57:47.760', 'TASTY'),
('syntax_podcast_show_00149', 149, 'Hasty Treat - Workshops', '2019-06-03 13:00:00.837', 'https://traffic.libsyn.com/syntax/Syntax149.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to give a killer workshop, as well as benefits and best practices!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:00 - Types of workshops\n\n* Public\n* Private\n\n4:29 - Choosing a topic\n\n* Create original content\n* Create custom content for companies\n\n5:55 - Building content\n\n* Choose seven to eight different little things\n    * ES6\n    * Progressive web apps\n* Build a single application throughout the day, introducing a new feature or two at a time and then implementing it into your own application\n    * Gatsby website\n    * React Beer application\n    * React Notes Application\n* Process:\n    * Build the app\n    * Rewind back to starter files\n    * Build it again while writing notes\n    * Follow your own notes to see if it makes sense\n\n13:25 - General information\n\n* How long should it be?\n* Fixed price vs split cost\n* How many people?\n\n16:46 - Other Tips:\n\n* Break away from your app and show other apps using - gives better context\n* Stop often and ask if anyone needs help\n* Give large breaks\n* Give challenges for those who need more to do\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'cc41dc1b5c6299cdb449ed802cc71adaab72f8f173439ca011a7008912070104', 'hasty-treat-workshops', '/shows/149 - workshops.md', '2023-10-16 20:06:59.125', '2023-10-27 15:57:47.807', 'HASTY'),
('syntax_podcast_show_00150', 150, 'Gatsby Themes', '2019-06-05 13:00:00.837', 'https://traffic.libsyn.com/syntax/Syntax150.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Jason Lengstorf from the Gatsby team about Gatsby themes, and the future of Gatsby in general.\n\n## LogRocket - Sponsor\n\n[LogRocket](https://logrocket.com/syntax) lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [LogRocket](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [Freshbook](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Jason Lengstorf](https://twitter.com/jlengstorf)\n\n## Show Notes\n\n2:18 - Jason Lengstorf - What do you do?\n\n9:37 - Gatsby refresher\n\n* Gatsby is statically generated\n* `gatsby-config.js` file determines which plugins you use\n* `gatsby-node.js` allows us to hook into Gatsby at different points and do things like source content and dynamically create pages\n* `gatsby-browser.js` contains code that should hook into browser events\n\n13:54 - Gatsby themes\n\n* Layouts in Gatsby are done the same way in React - simply create a component with children\n* How is this different than a plugin?\n* Is it a collection of plugins?\n* How do you share themes?\n* Can they include functionality (plugins?) Like Markdown rendering?\n* What about a theme that needs a UI once activated?\n* What about custom fields for Gatsby?\n* Do you foresee a marketplace like WordPress themes?\n* Are there some themes already out there?\n* What will come for themes soon?\n\n34:07 - Questions about Gatsby\n\n* What do you think about WordPress?\n* E-commerce?\n* How do you make money?\n* Suggested way of doing dynamic things\n* What is the future of Gatsby?\n\n## Links\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Jason Lengstorf](https://lengstorf.com/)\n* [Livestream](https://www.twitch.tv/jlengstorf)\n* [Progressive Disclosure of Complexity](https://lengstorf.com/progressive-disclosure-of-complexity/)\n* [Gatsby Themes](https://www.gatsbyjs.org/docs/themes/)\n* [Sanity](http://sanity.io/)\n* [Gatsby + Sanity.io](https://www.sanity.io/blog/live-coding-with-gatsby-js-and-sanity-io-how-to-make-a-portfolio-website)\n* [Snipcart](https://snipcart.com/)\n* [Axios](https://www.axios.com/)\n* [Algolia](https://www.algolia.com/)\n* [Netlify](https://www.netlify.com/)\n* [Airtable](https://airtable.com/)\n* [Hope in Source - Henry Zhiu](https://hopeinsource.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Jason: [Kamado Joe Grill](https://www.kamadojoe.com/)\n* Scott: [Zojirushi Hybrid Water Boiler and Warmer](https://amzn.to/2E5MYf7)\n* Wes: [Waterproof Digital Instant Read Meat Thermometer](https://amzn.to/2Yxy09R)\n\n## Shameless Plugs\n* [Jason\'s Weekly Live stream](https://twitch.tv/jlengstorf)\n* [Scott\'s Courses](https://leveluptutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '267d3895ca1bf51f9f06697175ff3dd56b7ef5b3ccc132d5d302f8f2e65552f2', 'gatsby-themes', '/shows/150 - gatsby themes.md', '2023-10-16 20:06:59.161', '2023-10-27 15:57:47.850', 'TASTY'),
('syntax_podcast_show_00151', 151, 'Hasty Treat - Std Lib in JavaScript', '2019-06-10 13:00:00.514', 'https://traffic.libsyn.com/syntax/Syntax151.mp3', '\nIn this Hasty Treat, Scott and Wes discuss the Javascript standard library proposal — what it is, how it could influence dev, and what they\'d like to see.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n1:38 - What is a Standard Lib? \n\n* Still experimental\n* Built-in modules don\'t have to be downloaded because they ship with the browser\n* Not exposing built-in modules globally has a lot of advantages:\n	* They won\'t add any overhead to starting up a new JavaScript runtime context (e.g. a new tab, worker, or service worker)\n	* They won\'t consume any memory or CPU unless they\'re actually imported\n	* They don\'t run the risk of naming collisions with other variables defined in your code\n\n6:47 - Key Value Storage is the first one: \n\n* [KV Storage: the Web\'s First Built-in Module](https://developers.google.com/web/updates/2019/03/kv-storage)\n\n8:36 - What do we want to see? \n\n* Deep clone\n    * Basically all of Lodash\n* `util.isDeepScrictEqual`\n* `Async json.parse()` / `json.stringify`\n* UUID\n* URL Lib for building and parsing URLs\n* Missing Array Methods\n    * Most of underscore JS\n\n15:53 - International\n\n* Currency Formatting\n* Lists\n* DateTimeFormat\n* RelativeTimeFormat\n\n## Links\n* [JavaScript Standard Library Proposal](https://github.com/tc39/proposal-javascript-standard-library)\n* [Add remaining Underscore / Lodash features](https://github.com/tc39/proposal-javascript-standard-library/issues/38)\n* [JavaScript standard library contents](https://github.com/tc39/proposal-javascript-standard-library/issues/16#issuecomment-449089197)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'eb145a044b84527bb60245d4693903a11af6ac503c574c1826745e628dc20de3', 'hasty-treat-std-lib-in-javascript', '/shows/151 - std lib.md', '2023-10-16 20:06:59.197', '2023-10-27 15:57:48.069', 'HASTY'),
('syntax_podcast_show_00152', 152, 'Debugging Tools + Tips', '2019-06-12 13:00:00.254', 'https://traffic.libsyn.com/syntax/Syntax152.mp3', '\nIn this episode of Syntax, Scott and Wes talk about debugging — tools, techniques, and the mindset needed to debug a problem and get through it as quickly as possible.\n\n## Netlify - Sponsor\n\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [Freshbooks.com](http://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:41 - Tools\n\n* CLDD - console.log driven development\n* [How To Pause Your Code With Breakpoints In Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints)\n* Other types of break points\n  * XHR\n  * DOM break on attribute change\n  * DOM break on children\n  * Conditional break\n  * Break on exception\n  * Break on event listener\n\n21:49 - Network requests\n\n* Doesn\'t take place in your site/dom, so might not always have all info in your console, debugger\n* Network tab in dev tools shows you all requests going in and out of your app\n* Filters by type, sees length in request\n* Sees headers, responses and more\n* Failed requests will be red\n\n26:50 - Debugging mindset\n\n* Check different browsers\n* Check the docs/examples\n* Isolate when possible\n* \"What has changed?\"\n* Get minimal working code\n* Rubber Duck Debug\n* Step back and re-think\n\n## Links\n* [Debugging Visual Studio Code (Node) - James Q Quick](https://www.youtube.com/watch?v=yFtU6_UaOtA)\n* [CodePen](https://codepen.io/)\n* [Spencer Carli\'s Youtube](https://www.youtube.com/channel/UC_uuod9nde9Hoea8xIVBeZQ)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Wes: [DeWALT Lawn Mower](https://amzn.to/2LYJly1)\n* Scott: [Cold Brew Coffee Maker](https://amzn.to/2HuzCv8)\n\n## Shameless Plugs\n* [Wes\' Courses](https://wesbos.com/courses) - Use the coupon code \'Syntax\' for $10 off!\n* [Level 2 React Native with GraphQL](https://www.leveluptutorials.com/tutorials/level-2-react-native-with-graphql/connecting-apollo-to-our-auth-system)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8f5322bf7b2619fb716d7cfd49d5eda2ebcefe7999c0f3d7bbc8cf27637b0460', 'debugging-tools-tips', '/shows/152 - debugging.md', '2023-10-16 20:06:59.231', '2023-10-27 15:57:48.134', 'TASTY'),
('syntax_podcast_show_00153', 153, 'Hasty Treat - New Intl Methods Are Straight Fire', '2019-06-17 13:00:00.687', 'https://traffic.libsyn.com/syntax/Syntax153.mp3', '\nIn this Hasty Treat, Scott and Wes talk about internationalization - how to deal with different languages, different currencies, and more!\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n5:48 - Intl.NumberFormat\n\n9:17 - Intl.ListFormat\n\n12:17 - Intl.DateTimeFormat / Intl.RelativeTimeFormat\n\n14:27 - Intl.PluralRules\n\n## Links\n* [Standard built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#Internationalization)\n* [Language Subtag Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd921bc0042e401164211a237b871b42dbcd21fb9a3a0d54ad7dcd6528ccb2db9', 'hasty-treat-new-intl-methods-are-straight-fire', '/shows/153 - intl methods.md', '2023-10-16 20:06:59.278', '2023-10-27 15:57:48.174', 'HASTY'),
('syntax_podcast_show_00154', 154, 'SVGs with Sara Soueidan', '2019-06-19 13:00:00.687', 'https://traffic.libsyn.com/syntax/Syntax154.mp3', '\nIn this episode of Syntax, Wes is joined by Sara Soueidan, a freelance front-end UI developer and trainer. While Scott is taking a break to spend time with his new baby girl, Wes and Sara dive into all things SVG!  \n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [Sanity](https://www.sanity.io/syntax).\n\n## Guests\n\n* [Sara Soueidan](https://twitter.com/SaraSoueidan)\n\n## Show Notes\n\n6:05 - What are SVGs?\n\n* It\'s an image you can edit\n\n16:17 - Icon fonts\n\n* Better tools\n* Fails in certain areas \n* SVG sprite icons \n* Grunticon\n\n24:24 - SVG files / Build tools\n\n* SVGO / SVGOMG\n\n31:50 - Where to find SVGs\n\n* Noun project\n* Exporting from Sketch/Illustrator/Figma\n* Freepik\n* Iconmoon\n\n33:48 - What is the viewbox? \n\n40:39 - Animating SVG\n\n43:41 - Accessibility & text with SVG\n\n45:44 - Graphing with SVG\n\n* D3.js\n\n47:58 - Filters\n\n## Links\n* [Font Awesome](https://fontawesome.com/)\n* [Grunticon](http://www.grunticon.com/)\n* [Grunt](https://gruntjs.com/)\n* [gulp.js](https://gulpjs.com/)\n* [React](https://reactjs.org/)\n* [Vue.js](https://vuejs.org/index.html)\n* [Sketch](https://www.sketch.com/)\n* [Illustrator](https://www.adobe.com/products/illustrator.html)\n* [Figma](https://www.figma.com/)\n* [imagemin](https://github.com/imagemin/imagemin)\n* [gulp-imagemin](https://www.npmjs.com/package/gulp-imagemin)\n* [Gatsby.js](https://www.gatsbyjs.org/)\n* [gatsby-plugin-sharp](https://www.gatsbyjs.org/packages/gatsby-plugin-sharp/)\n* [jakearchibald/svgomg](https://github.com/jakearchibald/svgomg)\n* [Noun Project](https://thenounproject.com/)\n* [Freepik](https://www.freepik.com/)\n* [Icomoon](https://icomoon.io/)\n* [GreenSock](https://greensock.com/)\n* [Snap.svg](http://snapsvg.io/)\n* [SVG Animations: From Common UX Implementations to Complex Responsive Animation By Sarah Drasner](https://www.amazon.com/SVG-Animations-Implementations-Responsive-Animation-ebook/dp/B06XPVW2PP)\n* [Codrops](https://tympanus.net/codrops/)\n* [D3.js](https://d3js.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Sara: [Netlify](https://www.netlify.com/)\n* Wes: [Wise Contact Sensors](https://wisehomesolutions.com/products/door-window-sensor/)\n\n## Shameless Plugs\n* [Sara\'s Website & Workshop Dates](https://www.sarasoueidan.com/)\n* [Wes\' Courses](https://wesbos.com/courses) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Sara\'s Twitter](https://twitter.com/SaraSoueidan)\n', 'f7f033897e0bb02d37ff0cbc81cd5be0b1167e5f5e69ed5feba3638c637e1b67', 'svgs-with-sara-soueidan', '/shows/154 - SVGs.md', '2023-10-16 20:06:59.322', '2023-10-27 15:57:48.216', 'TASTY'),
('syntax_podcast_show_00155', 155, 'Hasty Treat - Making Yourself Uncomfortable To Grow', '2019-06-24 13:00:00.757', 'https://traffic.libsyn.com/syntax/Syntax155.mp3', '\nIn this Hasty Treat, Scott and Wes talk about pushing yourself in uncomfortable areas to grow as a programmer, be a better developer, and become more efficient in general.\n\n## Netlify - Sponsor\n\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [Netlify](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:50 - CSS Preprocessor parable\n\n6:09 - Efficiency\n\n10:40 - When to learn new systems\n\n13:03 - Common pain points\n\n14:42 - Pushing yourself to foster growth\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd425ba3ebeb0ac19f06296b89094693b302b998407db0e2b034d1f2e3704ced5', 'hasty-treat-making-yourself-uncomfortable-to-grow', '/shows/155 - growth.md', '2023-10-16 20:06:59.365', '2023-10-27 15:57:48.334', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00156', 156, 'Potluck - Career Switch at 33 × Cover Letters × Kids × Learning Quickly × More!', '2019-06-26 13:00:00.423', 'https://traffic.libsyn.com/syntax/Syntax156.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about career changes, preprocessors, moving, \"the gap\", hip hop and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [Sanity](https://www.sanity.io/syntax).\n\n## Show Notes\n\n1:54 - Q: I am 33 with a wife and two young daughters, and am trying to change careers. My job pays $80,000 a year, but I hate it. My wife is ok with me doing university, but she wants me to stay at the job I don\'t like. Should I stand my ground? Any tips on achieving my goals to make me happy, but also keep my family happy?\n\n10:10 - Q: What is your advice to very junior/junior devs in writing cover letters for jobs? I wonder what to say without sounding canned and fake.\n\n14:35 - Q: Scott, what was the stack you were using at Ford?	\n\n17:09 - Q: Other than reading the docs, how do you guys go about learning/trying out new technologies? Do you rebuild similar applications or pick out individual features you think are \"sIcK\"?\n\n22:32 - Q: Is it always necessary to use setState in react when storing data (for example, a form input) even if you don\'t intend on re-rendering the page, or can you get away without using state?	\n\n25:04 - Q: Development has a stereotype for being a young person\'s game. As someone who started their career out of university, I often wonder how long I can sling divs for? Do you think you could make it to retirement age or do you think the game will change out from under you?\n\n30:34 - Q: Scott, you\'ve mentioned you love hip hop. Would you be willing to share any playlists of your all-time favorite hip hop artists?\n\n32:08 - Q: What are your thoughts on HTML pre-processors? If you use one, which one(s) do you prefer and why?\n\n36:04 - Q: What advice would you have for someone considering to \"level up\" their career by moving from a city with few tech jobs to a city with more opportunity for tech jobs? What are some of the biggest things to consider when moving possibly cross-country to further a career?	\n\n42:11 - Q: What are your recommendations in terms of resources for first time dads (and moms) like books, podcasts, etc. and generally good co-parenting advice for working professionals?\n\n46:45 - Q: Loved the show with Travis. Had a question about “the gap”. Similar to design ambitions/taste surpassing current skill, when did you feel like your code had “grown up” and that you could actually DO what you envisioned with Javascript? \n\n## Links\n* [Syntax 044: How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n* [Scott\'s Spotify playlist - \"Rap Music To Code To = Level Up Tutorials\"](https://open.spotify.com/user/torartc/playlist/71NVDjvoMRJ6wfmJuN9iNU?si=7qADFqdxSPGdEq93IY368A)\n* [Scott\'s Spotify playlist - \"Golden Era\"](https://open.spotify.com/user/torartc/playlist/42tTDR1B1NbAWihMnxEQ6n?si=EVuF8_h0QlOyiJ1nHHj1mA)\n* [Scott\'s music picks](https://twitter.com/stolinski/status/1129447040931340288)\n* [Apache - Apache Ain\'t Shit](https://open.spotify.com/album/5XuS5DIjel4dghKgwtYNtt?autoplay=true&v=L)\n* [MF DOOM - MM...Food](https://open.spotify.com/album/7IvmRtuLsTlRZhRS6KUQRn?autoplay=true&v=L)\n* [Kendrick Lamar - To Pimp A Butterfly](https://open.spotify.com/album/7ycBtnsMtyVbbwTfJwRjSP?autoplay=true&v=L)\n* [GZA - Liquid Swords](https://open.spotify.com/album/3k8xoyOXkGgZxUKgpmxz4P?autoplay=true&v=L)\n* [Gang Starr - Daily Operation](https://open.spotify.com/album/74DwNAuirHLDLVLrBQAnVg?autoplay=true&v=L)\n* [Slick Rick - The Ruler\'s Back](https://open.spotify.com/album/5UWKXx7GvU5YhXx0OBNnhD?autoplay=true&v=L)\n* [Redman & Method Man - Blackout](https://open.spotify.com/album/5K9kD50P66neofCR8BoYxg?autoplay=true&v=L)\n* [Q-Tip - The Renaissance](https://open.spotify.com/album/3asZSLOAAtCNJz5W2LGuFJ?autoplay=true&v=L)\n* [Enter The Wu-Tang (36 Chambers)[Expanded Edition] - Wu-Tang Clan](https://open.spotify.com/album/3tQd5mwBtVyxCoEo4htGAV?autoplay=true&v=L)\n* [Pete Rock on Spotify](https://open.spotify.com/artist/3BeQqzKdlARoOd6y30kCO2)\n* [Preemo on Spotify](https://open.spotify.com/artist/0Kr4V7oQfFb1rB2nzXKTTb)\n* [Codeland Conference](https://codelandconf.com/)\n* [Syntax 142: Travis Neilson on Skills Gap, Design, Focus and Working at Google](https://syntax.fm/show/142/travis-neilson-on-skills-gap-design-focus-and-working-at-google)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Oculus Quest All-in-one VR Gaming Headset](https://amzn.to/2EPWTGd)\n* Wes: [Marpac Rhom Portable White Noise Sound Machine](https://amzn.to/2MrmknB)\n\n## Shameless Plugs\n* [Scott\'s new course - \"Dev Tools and Debugging\"](https://www.leveluptutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'beb0a59da6042359d7aed981d996ed5bab2b9e7b71b827a576e58b587602689b', 'potluck-career-switch-at-33-cover-letters-kids-learning-quickly-more', '/shows/156 - potluck.md', '2023-10-16 20:06:59.400', '2023-10-27 15:57:48.386', 'TASTY'),
('syntax_podcast_show_00157', 157, 'Hasty Treat - What is a Headless CMS?', '2019-07-01 13:00:00.933', 'https://traffic.libsyn.com/syntax/Syntax157.mp3', '\nIn this Hasty Treat, Scott and Wes talk about headless CMSs - why to use them, how they work, pros and cons, examples and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:11 - What is a headless CMS?\n\n* It\'s a system or CMS that has no front-end (aka head)\n* Allows you to use front-end specific tech (static generators/front-end frameworks) instead of the back-end to generate pages\n\n4:37 - Some examples\n\n* Can be used with any type of website that can consume an API\n* WordPress API + Gatsby\n* Hosted Service + React App \n\n7:06 - Why?\n\n* Separation of concerns - your data is in a single spot, and can be pulled into any app, website, marketing micro site, etc. \n* Keeps ergonomics of WordPress or $CMSHERE, while developers get to use what they like\n* Optimizes for performance with static builds\n* Hide the implementation details and back-end from view\n\n10:19 - Live vs statically-generated website\n\n* [Syntax 120 - Gatsby vs Next](https://syntax.fm/show/120/gatsby-vs-next)\n\n10:55 - How?\n\n* Connects to API via normal fetch calls/GraphQL/whatever you use\n* Needs to host your back-end either as a service or on a host\n* Needs to host your front-end either on the same server as your back-end or on something specialized like Netlify\n\n## Links\n* [WordPress](https://wordpress.org/)\n* [Sanity.io](https://www.sanity.io/)\n* [React](https://reactjs.org/)\n* [Syntax 120 - Gatsby vs Next](https://syntax.fm/show/120/gatsby-vs-next)\n* [Netlify](https://www.netlify.com/)\n* [GraphQL](https://graphql.org/)\n* [Cobalt](https://www.cobalt.net/)\n* [Gatsby.js](https://www.gatsbyjs.org/)\n* [Drupal](https://www.drupal.org/)\n* [Next.js](https://nextjs.org/)\n* [Nginx](https://www.nginx.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'eb909f922cb280c8828df757f8876e0b9eb9fd31214493fb6d6b4b9f697d22cb', 'hasty-treat-what-is-a-headless-cms', '/shows/157 - headless cms.md', '2023-10-16 20:06:59.437', '2023-10-27 15:57:48.439', 'HASTY'),
('syntax_podcast_show_00158', 158, 'The Fundamentals - HTML + CSS', '2019-07-03 13:00:00.933', 'https://traffic.libsyn.com/syntax/Syntax158.mp3', '\nIn this episode of Syntax, Scott and Wes talk about the \"fundamentals\" of web development and what you need to know - HTML, CSS foundations and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [Freshbooks](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:54 - Learning fundamentals vs framework specialists\n\n* Learning vs getting a job\n* Abstractions work well until they don\'t and you need to debug them\n\n**HTML**\n\n7:58 - Semantic markup\n\n9:15 - Accessibility basics\n\n9:57 - Attributes\n\n**CSS** \n\n16:13 - Specificity\n\n22:42 - Selectors\n\n24:52 - Layouts\n\n27:53 - Box model\n\n32:50 - Positioning\n\n36:42 - Forms and inputs\n\n40:45 - Block vs inline vs inline-block\n\n43:09 - Sizing units\n\n44:40 - Typography\n\n47:53 - Media Queries\n\n## Links\n* [Interviewing candidates with a lack of fundamentals - Tweet](https://twitter.com/wesbos/status/1137058712466722816)\n* [Jean-Philippe Sirois Tweet](https://twitter.com/veksenn/status/1137187264486944770)\n* [Syntax 72: Accessibility](https://syntax.fm/show/072/accessibility)\n* [Syntax 107: Hasty Treat - CSS Units](https://syntax.fm/show/107/hasty-treat-css-units)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [I Think You Should Leave with Tim Robinson](https://www.netflix.com/title/80986854?source=35)\n* Wes: [Forearm Forklift Lifting and Moving Straps](https://amzn.to/2MD6AxU)\n\n## Shameless Plugs\n* [Scott\'s new course - \"Debugging and Dev Tools\"](https://www.leveluptutorials.com/pro)\n* [Wes\' courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b742d55bffbc9174f3b4f42b27baf8234f68a0f7b6fe61740af3e4cef91f5637', 'the-fundamentals-html-css', '/shows/158 - fundamentals.md', '2023-10-16 20:06:59.473', '2023-10-27 15:57:48.482', 'TASTY'),
('syntax_podcast_show_00159', 159, 'Hasty Treat - Front End Security', '2019-07-08 13:00:00.835', 'https://traffic.libsyn.com/syntax/Syntax159.mp3', '\nIn this Hasty Treat, Scott and Wes talk about front end security and what to do in order to avoid hacking.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:53 - SSL\n\n* Encrypted transfer of information\n* Digitally binds a cryptographic key to an organization\'s details\n* Web-cam, geolocation, etc.\n\n6:15 - innerHTML \n\n* React\'s dangerouslySetInnerHTML\n	* Name intentionally chosen to be frightening\n	* Allows you to write HTML to the DOM\n	* Data should be sanitized before used in prop\n        * Removes unexpected data from string\n        * Used to prevent cross site scripting attacks\n\n10:25 - Don\'t trust the client\n\n* The client can be manipulated to send any info to your server\n* E-commerce example — don\'t take the price total from the front end to make the charge, DB call and calculate on the server\n* Validate form inputs via HTML 5 field validation/check data types on the server\n    * Don\'t allow your users to send an object when it should just be a string\n    * Get this for free with GraphQL via types\n\n13:41 - PCI Compliance\n\n* Protect card holder data\n    * SSL or Secure iFrame\n* Encrypt transmission of card data\n* Restrict access to card holder data\n* Restrict physical access\n    * Front of front-end\n\n 16:44 - Tips\n\n* Don\'t put a name on sensitive fields if you are using JS\n* HTTP only cookies\n* Local Storage tokens\n* XSS\n\n## Links\n* [React](https://reactjs.org/)\n* [GraphQL](https://graphql.org/)\n* [Express](https://expressjs.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '921ae5e1a5c7fc57acdabd99428f4680007bfdcaa05c6d7930eddffd21f896e6', 'hasty-treat-front-end-security', '/shows/159 - front end security.md', '2023-10-16 20:06:59.509', '2023-10-27 15:57:48.529', 'HASTY'),
('syntax_podcast_show_00160', 160, 'GraphQL and WordPress', '2019-07-10 13:00:00.835', 'https://traffic.libsyn.com/syntax/Syntax160.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Jason Bahl (author of WPGraphQL) about GraphQL, headless WordPress, frameworks in WordPress, React in WordPress, and more!\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [LogRocket](https://logrocket.com/syntax).\n\n## Guests\n\n* [Jason Bahl](https://twitter.com/jasonbahl)\n\n## Show Notes\n\n4:55 - Data in WordPress\n\n6:26 - WPGraphQL\n\n10:31 - What were your initial thoughts/first experiences with GraphQL?\n\n16:58 - Does it use MySQL queries or wpQuery?\n\n19:36 - How does authentication work?\n\n24:38 - What does the WP local dev experience look like in 2019?\n\n26:49 - What about deployment? How do you handle migrating data?\n\n30:10 - How does WPGraphQL handle mutations?\n\n32:46 - What are the preferred hosting methods for a headless WordPress setup?\n\n36:44 - Do you see any push back about giving up much of what WordPress gives you out of the box?\n\n41:23 - What are techniques for preventing all of WordPress from loading When you\'re using it exclusively for the API?\n\n43:40 - How does WPGraphQL support custom post types, taxonomies and fields, etc?\n\n## Links\n* [WPGraphQL](https://www.wpgraphql.com/)\n* [Kyle Mathews](https://twitter.com/kylemathews)\n* [GraphQL](https://graphql.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [WordPress](https://wordpress.org/)\n* [Meteor](https://www.meteor.com/)\n* [Apollo GraphQL](https://www.apollographql.com/)\n* [GraphiQL](https://github.com/graphql/graphiql)\n* [WPGraphiQL](https://github.com/jasonbahl/wp-graphiql)\n* [WAMP](http://www.wampserver.com/en/)\n* [Flywheel](https://getflywheel.com/)\n* [Local by Flywheel](https://localbyflywheel.com/)\n* [PhpStorm](https://www.jetbrains.com/phpstorm/)\n* [Lando](https://docs.devwithlando.io/)\n* [Laravel](https://laravel.com/)\n* [React](https://reactjs.org/)\n* [Netlify](https://www.netlify.com/)\n* [Jason Schuller](https://jason.sc/)\n* [Leeflets](https://leeflets.com/)\n* [Press75](https://press75.com/)\n* [Advanced Custom Fields](https://www.advancedcustomfields.com/)\n* [WPGraphQL Tax Query](https://github.com/wp-graphql/wp-graphql-tax-query)\n* [WPGraphQL Meta Query](https://github.com/wp-graphql/wp-graphql-meta-query)\n* [WPGraphQL for Advanced Custom Fields](https://www.wpgraphql.com/acf/)\n* [Jason\'s Twitter](https://twitter.com/jasonbahl)\n* [WPGraphQL Twitter](https://twitter.com/wpgraphql)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Figma](https://www.figma.com/)\n* Wes: [CalDigit TS3 Plus Thunderbolt 3 Dock](https://www.amazon.com/CalDigit-TS3-Plus-Thunderbolt-Dock/dp/B07CZPV8DF)\n* Jason: [Local by Flywheel](https://localbyflywheel.com/)\n\n## Shameless Plugs\n* [Scott\'s new course - Dev Tools & Debugging](https://www.leveluptutorials.com/pro)\n* [Wes - All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n* [Jason - WPGraphQL](https://www.wpgraphql.com/)\n* [Jason - Gatsby](https://www.gatsbyjs.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '90812e24370f79e1962263eb0474cbb583abf401de9e73ce5bbf172b3325a716', 'graphql-and-wordpress', '/shows/160 - graphql and wordpress.md', '2023-10-16 20:06:59.550', '2023-10-27 15:57:48.577', 'TASTY'),
('syntax_podcast_show_00161', 161, 'Hasty Treat - VSCode Extensions & Themes', '2019-07-15 13:00:00.334', 'https://traffic.libsyn.com/syntax/Syntax161.mp3', '\nIn this Hasty Treat, Scott and Wes talk about everything they love regarding VSCode: themes, fonts, extensions, techniques and more!\n\n## Netlify - Sponsor\n\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [Netlify](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:18 - Theme\n\n* [Cobalt 2](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n* [SynthWave \'84](https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode)\n\n4:58 - Fonts\n\n* [Dank Mono](https://dank.sh/)\n* [Operator Mono](https://www.typography.com/fonts/operator/styles)\n\n7:12 - Five things we love\n\n* Wes: \n	* [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)\n	* [Permute Lines](https://marketplace.visualstudio.com/items?itemName=earshinov.permute-lines), [Unique Lines](https://marketplace.visualstudio.com/items?itemName=bibhasdn.unique-lines)\n	* [Breadcrumbs](https://vscode.pro/tip/15/)\n	* [Toggle Quotes](https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes)\n	* [Snapshot Tools](https://marketplace.visualstudio.com/items?itemName=asvetliakov.snapshot-tools)\n\n* Scott: \n	* [Better Comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n	* [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n	* [Ctrl+Click Go To Definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n	* [Wrap Console Log Simple](https://marketplace.visualstudio.com/items?itemName=WooodHead.vscode-wrap-console-log-simple)\n	* [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a2a53f3dc20a22de3a18e3787d6520534c365dc8905344d4f9ddb035b5f7004d', 'hasty-treat-vscode-extensions-and-themes', '/shows/161 - vscode.md', '2023-10-16 20:06:59.593', '2023-10-27 15:57:48.679', 'HASTY'),
('syntax_podcast_show_00162', 162, 'The Fundamentals — JS', '2019-07-17 13:00:00.334', 'https://traffic.libsyn.com/syntax/Syntax162.mp3', '\nIn this episode of Syntax, Scott and Wes talk about the fundamentals of JavaScript - the set of core skills you should know before branching off into other frameworks, libraries, etc.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [LogRocket](https://logrocket.com/syntax).\n\n## FreshBooks - Sponsor\n\nGet a 30 day free trial of FreshBooks at [FreshBooks](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:07 - Variables + Scoping\n\n* var/let/const\n* Block scope\n* Function scope\n* Scope lookup\n\n6:06 - Types\n\n* Objects\n    * Reference vs. copy\n\n7:15 - Functions\n\n* Types of functions\n    * Anonymous vs. named\n    * Expressions\n    * Arrow functions\n* Methods\n\n9:33 - DOM\n\n* Selecting\n* Updating\n* Creating\n\n15:07 - Prototypes + this\n\n* `this`\n* Objects\n\n20:16 - Events\n\n* Listening, callbacks\n* dispatchEvent\n* Bubbling\n\n22:05 - Arrays\n\n* Push, pop, manipulate\n* Spread, rest\n* Map, filter, reduce\n* Arrays vs. objects\n* Mutation vs. immutable\n\n26:25 - Flow control\n\n* Looping\n* If\n* Promises + Async + Await\n\n29:47 - Security and accessibility\n\n* XSS and innerHTML\n\n32:04 - Things you should know, but not necessarily master\n\n* Modules\n* Closures\n* Ajax requests\n\n35:26 - Clean code\n\n* [Clean Code Javascript](https://github.com/ryanmcdermott/clean-code-javascript)\n\n## Links\n* [Syntax 043: 20 Javascript Array and Object Methods to make you a better developer](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n* [Syntax 141: Hasty Treat - Async + Await Error Handling Strategies](https://syntax.fm/show/141/hasty-treat-async-await-error-handling-strategies)\n* [Syntax 072: Accessibility](https://syntax.fm/show/072/accessibility)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [BaseCS](https://www.codenewbie.org/basecs)\n* Wes: [Owlet Baby Monitor](https://amzn.to/2Ruf8Ga)\n\n## Shameless Plugs\n* [Scott\'s new E-Commerce and Gatsby Course](https://www.leveluptutorials.com/pro)\n* [Wes\' Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a27665009e6d9c5aac52d2b50c5a090ebfec91d593b03dfa24f36766421382ed', 'the-fundamentals-js', '/shows/162 - js fundamentals.md', '2023-10-16 20:06:59.640', '2023-10-27 15:57:48.747', 'TASTY'),
('syntax_podcast_show_00163', 163, 'Hasty Treat - Web Dev Resource Sick Picks', '2019-07-22 13:00:00.176', 'https://traffic.libsyn.com/syntax/Syntax163.mp3', '\nIn this Hasty Treat, Scott and Wes talk about all of their favorite web dev resources — a full episode of sick picks!\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [LogRocket](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:03 - Twitter Accounts\n\n* Scott: [HeyDesigner](https://twitter.com/heydesigner)\n* Wes: [Mathias Bynens](https://twitter.com/mathias)\n\n5:00 - Web Dev Resources\n\n* Scott: [Scotch.io](https://scotch.io/)\n* Wes: [Webgems.io](https://webgems.io/) \n\n7:37 - Design Resources\n\n* Scott: [UI Movement](https://uimovement.com/)\n* Wes: [Creative Market](https://creativemarket.com/)\n\n11:36 - Desktop Tools\n\n* Scott: [Pock](https://pock.dev/)\n* Wes: [MongoDB Compass](https://www.mongodb.com/products/compass)\n\n14:59 - YouTube\n\n* Scott:\n	* [JSConf](https://www.youtube.com/user/jsconfeu)\n	* [stance](https://www.youtube.com/user/stanceelements)\n\n* Wes: \n	* [Andrew Camarata](https://www.youtube.com/channel/UCUujfNBK9uv3cIW-P5PX7vA) \n	* [dotconferences](https://www.youtube.com/user/dotconferences)\n\n## Links\n* [Studio3t](https://studio3t.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '4421979c09b79b429c3087b6584153ffe2f5710007cf664122a622ceb26635a0', 'hasty-treat-web-dev-resource-sick-picks', '/shows/163 - Web Dev Sick Picks.md', '2023-10-16 20:06:59.681', '2023-10-27 15:57:48.788', 'HASTY'),
('syntax_podcast_show_00164', 164, 'A Story About Kanye West and Learning to Code', '2019-07-24 13:00:00.176', 'https://traffic.libsyn.com/syntax/Syntax164.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Harry Dry about the crazy story behind his Kanye West dating site, how he taught himself to code, and how to come up with cool side projects!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Guests\n\n* [Harry Dry](https://twitter.com/harrydry)\n\n## Show Notes\n\n2:30 - How did you get into web dev and come up with the idea for the Kanye West dating website?\n\n10:29 - Do you have a background in design?\n\n13:05 - What\'s your story?\n\n15:28 - Do you wear yeezys?\n\n36:26 - What made you decide to take this story and make a bit site out of it? What was the plan?\n\n40:45 - How did you learn to code? How did you decide what to learn next?\n\n45:30 - How do you push through hard problems?\n\n48:50 - Any final advice to offer?\n\n## Links\n* [The Kanye Story](https://thekanyestory.com/)\n* [TheNetNinja](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg)\n* [@rogerfederer](https://twitter.com/rogerfederer)\n* [Refactoring UI](https://refactoringui.com/)\n* [@GonzoVice](https://twitter.com/GonzoVice)\n* [Dang That\'s Delicious](https://github.com/spences10/dang-thats-delicious)\n* [Puck](https://www.puck-js.com/)\n* [@joerogan](https://twitter.com/joerogan)\n* [Code Academy](https://www.codecademy.com/)\n* [ChatKit by Pusher](https://pusher.com/chatkit)\n* [@grantimahara](https://twitter.com/grantimahara)\n* [Mythbusters](https://www.sciencechannel.com/tv-shows/mythbusters-on-science/)\n* [@elonmusk](https://twitter.com/elonmusk)\n* [Marketing Examples](https://marketingexamples.com/)\n* [@goodmarketinghq](https://twitter.com/goodmarketinghq)\n* [@harrydry](https://twitter.com/harrydry)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [BattleBots](https://battlebots.com/)\n* Wes: [Logitech MX Master 2S Wireless Mouse](https://amzn.to/2RKtPVU)\n* Harry:\n  * [Twitter Demetricator](https://bengrosser.com/projects/twitter-demetricator/)\n  * [CAMP LIFE: BIG JOHN FURY GIVES TOUR OF VINTAGE CARAVAN](https://www.youtube.com/watch?v=MX58yJt1170)\n\n## Shameless Plugs\n* Wes: [All Courses](https://wesbos.com/courses) - Use the coupon code \'Syntax\' for $10 off!\n* Scott: [Dev Tools and Debugging and Gatsby and E-commerce](https://leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'de276313e452409ac54682795792d5bf5842526e2058890241f538bcdcc19a2f', 'a-story-about-kanye-west-and-learning-to-code', '/shows/164 - Kanye West.md', '2023-10-16 20:06:59.714', '2023-10-27 15:57:48.829', 'TASTY'),
('syntax_podcast_show_00165', 165, 'Hasty Treat - VSCode Treats Part 2', '2019-07-29 16:00:00.607', 'https://traffic.libsyn.com/syntax/Syntax165.mp3', '\nIn this Hasty Treat, Scott and Wes talk about more of their favorite VSCode tasty treats - extensions, features, keyboard shortcuts and more!\n\n## Netlify - Sponsor\n\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [Netlify](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:45 - Extensions\n\n* [Git Blame](https://marketplace.visualstudio.com/items?itemName=waderyan.gitblame)\n* [Apollo GraphQL](https://marketplace.visualstudio.com/items?itemName=apollographql.vscode-apollo)\n* [VS Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)\n\n9:36 - Features\n\n* Indent lines in explorer - Workbench > Tree Indent & Guides\n* Breadcrumbs\n* Commit all & visual git commands\n* Change branch in lower left\n* Rename Symbol\n\n## Links\n* [Syntax 161: Hasty Treat - VSCode Extensions & Themes](https://syntax.fm/show/161/hasty-treat-vscode-extensions-and-themes)\n* [Alfred](https://www.alfredapp.com/)\n* [Playlist.js](https://www.npmjs.com/package/playlist-js)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6a1b40dc4c55bf9a4673c4c4d9cb299498b222372ce31adc50cfe7b47272db39', 'hasty-treat-vscode-treats-part-2', '/shows/165 - VS Code Part 2.md', '2023-10-16 20:06:59.888', '2023-10-27 15:57:48.916', 'HASTY'),
('syntax_podcast_show_00166', 166, 'Potluck - What is \"State\"? × Web Sockets × Remote Working × Firefox × Machines Taking Our Jobs × More!', '2019-07-31 13:00:00.672', 'https://traffic.libsyn.com/syntax/Syntax166.mp3', '\nIt\'s another Syntax potluck! In this episode, Scott and Wes answer your questions about remote work, AI agendas, motivation, fitness, the future of coding, and much more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## FreshBooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:03 - Q: I hear you both talk about \"state\" a lot in your podcasts. And while I understand a little about it, I never understand it in the context you both use it. Can you enlighten us?\n\n6:52 - Q: I have an idea for a project that is suited for web sockets, push text/images/documents to a bunch of users in real time. I just learned about Firebase\'s real-time database, and it looks like it would be pretty easy to implement my idea. What are your thoughts, pros/cons, of these two technologies?\n\n10:42 - Q: How\'s your fitness going?\n\n12:15 - Q: Let\'s say both of you gents were junior developers that had basic knowledge and skills in HTML, CSS and JavaScript but you had all the experience and knowledge of how to best master those skills and where the industry was heading. What would be the outline and focus of your road-map knowing what you do now?\n\n17:22 - Q: Is it worth it to find a remote dev job at an early stage of your career? Considering the stuff I learn from my seniors and other devs on the team, I wonder if I will lose the opportunity to learn stuff from my team members?\n\n19:49 - Q: How do I keep myself motivated in coding?\n\n22:47 - Q: What\'s y\'all\'s opinion on using some obscure (at least in my opinion) features of a language, such as Javascript bitwise operators, in a production app that dozens of other engineers maintain, and will continue to maintain long after you leave the company? It seems hard to read and immediately understand, which possibly makes it harder to debug/refactor in the future. Is it the responsibility of future devs to learn if they don\'t know, or should you find a different way to code the solution in the first place?\n\n26:00 - Q: Wes, I keep hearing you talk about working from your Dropbox. Do you sync up everything? Even things like your node module folders?\n\n29:26 - Q: Have you talked about Firefox Developer Edition? It looks like it should be very useful, but I can\'t quite make the transition.\n\n32:58 - Q: Hey guys, what your opinion of CSS naming convention methodologies such as BEM?\n\n35:04 - Q: I would like to refer to the question from ep 140 about fronted development possibly dying. I don\'t feel satisfied with the answer, so maybe I could state the question differently: With the machine learning being developed rapidly in recent years, will the web change, causing reduction of front-end jobs? Maybe we will just be training smart algorithms and developing them instead? What do you think?\n\n40:32 - Q: How do you deal with anxiety and fear during interviews that might hinder your ability to give the best impression of yourself or solve coding challenges?\n\n## Links\n* [FeathersJS](https://feathersjs.com/)\n* [Syntax 020: Fitness, Nutrition, and Losing Weight](https://syntax.fm/show/020/fitness-nutrition-and-losing-weight)\n* [Syntax 084: Fitness for Developers](https://syntax.fm/show/084/fitness-for-developers)\n* [Syntax 164: A Story About Kanye West and Learning to Code](https://syntax.fm/show/164/a-story-about-kanye-west-and-learning-to-code)\n* [Syntax 140: Potluck - Media Queries × NPM Vulnerabilities × Fullstack JS vs JAMstack × Web VR/AR × Switching Jobs × More!](https://syntax.fm/show/140/potluck-media-queries-npm-vulnerabilities-fullstack-js-vs-jamstack-web-vr-ar-switching-jobs-more)\n* [FireBase](https://firebase.google.com/)\n* [Slack](https://slack.com/)\n* [Dropbox](https://www.dropbox.com/)\n* [Backblaze](https://www.backblaze.com/cloud-backup-b.html)\n* [FireFox developer edition](https://www.mozilla.org/en-US/firefox/developer/)\n* [Brave](https://brave.com/)\n* [Wix](https://www.wix.com/)\n* [Squarespace](https://www.squarespace.com/)\n* [How you can train an AI to convert your design mockups into HTML and CSS](https://www.freecodecamp.org/news/how-you-can-train-an-ai-to-convert-your-design-mockups-into-html-and-css-cc7afd82fed4/)\n* [How AI And Machine Learning Are Transforming Front-End Development?](https://medium.com/@Jessicawlm/how-ai-and-machine-learning-are-transforming-front-end-development-db74523fd46b)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Wyze Sense](https://www.wyze.com/wyze-sense/)\n* Wes: [Arthur on CBC kids](https://www.youtube.com/playlist?list=ELpoA-uHf0-f_86wCagoDcsg)\n\n## Shameless Plugs\n* Wes: [CSS Grid Course](https://cssgrid.io/)\n* Scott: [Gatsby Ecommerce Course, and Dev Tools & Debugging Course](https://www.leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '29f8ac44b4102e611f40b7dd739581a054503176401a044132c086b9e8d16831', 'potluck-what-is-state-web-sockets-remote-working-firefox-machines-taking-our-jobs-more', '/shows/166 - What is State Potluck.md', '2023-10-16 20:06:59.931', '2023-10-27 15:57:48.957', 'TASTY'),
('syntax_podcast_show_00167', 167, 'Hasty Treat - VSCode Love Part 3', '2019-08-05 13:00:00.295', 'https://traffic.libsyn.com/syntax/Syntax167.mp3', '\nIt\'s another VSCode episode! In this Hasty Treat, Scott and Wes talk all the things they love about VSCode — things to learn, how to get around more quickly, using keyboard commands, being more efficient, using snippets and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:14 - Things to learn\n\n* Jump by word, line\n* Select by word\n* Command Palette (cmd + shift + p)\n* Move and copy lines - option up down or with shift\n* Multi cursor\n* Find and replace in files\n* Use the Insiders build if you like updates every day\n\n11:03 - Keyboard commands\n\n* Cmd + b to hide sidebar\n* Cmd + shift + x\n\n13:55 - Snippets\n\n* [Snippet Generator](https://snippet-generator.app/)\n* Get to know defaults as well as tabs\n* [Mongo Snippets for Node-js](https://marketplace.visualstudio.com/items?itemName=roerohan.mongo-snippets-for-node-js)\n\n## Links\n* [VSCode Marketplace](https://marketplace.visualstudio.com/)\n* [VSCode Insiders Build](https://code.visualstudio.com/insiders/)\n* [React Snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets)\n* [JavaScript (ES6) Code Snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets)\n* [HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets)\n* [ES7 React/Redux/GraphQL/React-Native snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)\n* [Vue VSCode Snippets](https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets)\n* [Atom Snippets](https://atom.io/packages/snippets)\n* [Text Expander](https://textexpander.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '0bdb4fea4bbf4549bb78bbe932a6a7c0d5163a280152938f2a895c5bd236079c', 'hasty-treat-vscode-love-part-3', '/shows/167 - VSCode Love Part 3.md', '2023-10-16 20:06:59.984', '2023-10-27 15:57:49.024', 'HASTY'),
('syntax_podcast_show_00168', 168, 'Blogging', '2019-08-07 13:00:00.295', 'https://traffic.libsyn.com/syntax/Syntax168.mp3', '\nIn this episode of Syntax, Scott and Wes talk about blogging — both the specifics of content (how to make great content), as well as the mechanics of where and how to publish blog posts.\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n7:06 - What are some of the different platforms for publishing a blog?\n\n23:41 - How to structure a blog post?\n\n29:10 - How to direct traffic to a blog post?\n\n38:51 - How do you make technical content in-depth and also succinct?\n\n## Links\n* [WordPress](https://wordpress.com/create/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Squarespace](https://www.squarespace.com/)\n* [Netlify](https://www.netlify.com/)\n* [Tumblr](https://www.tumblr.com/)\n* [Medium](https://medium.com/)\n* [Hacker Noon](https://hackernoon.com/)\n* [FreeCodeCamp](https://https://www.freecodecamp.org//)\n* [Dev.to](https://dev.to/)\n* [Smashing Magazine](https://www.smashingmagazine.com/)\n* [Net Magazine](https://www.creativebloq.com/net-magazine)\n* [Gridsome](https://gridsome.org/)\n* [GraphQL](https://graphql.org/)\n* [Vuepoint](https://www.vuepointagency.com/)\n* [Next](https://nextjs.org/)\n* [Nuxt](https://nuxtjs.org/)\n* [Everything I wish I knew running a sole proprietorship business](https://wesbos.com/sole-proprietorship-ontario/)\n* [@peterc](https://twitter.com/peterc)\n* [JavaScript Weekly](https://javascriptweekly.com/)\n* [Cooperpress](https://cooperpress.com/)\n* [Seth Godin](https://www.sethgodin.com/)\n* [Overreacted - Dan Abramov](https://overreacted.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Business Wars](https://wondery.com/shows/business-wars/)\n* Wes: [Spectacular Failures](https://www.spectacularfailures.org/)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) — Subscribe before price goes up!\n* Wes: [All Courses](https://wesbos.com/courses) — Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '6ae1c82f135903d0431962a96a656793fd2e266b2ce9f4242536fa7c5efc436c', 'blogging', '/shows/168 - Blogging.md', '2023-10-16 20:07:00.026', '2023-10-27 15:57:49.074', 'TASTY'),
('syntax_podcast_show_00169', 169, 'Hasty Treat - Remote Internet', '2019-08-12 13:00:00.542', 'https://traffic.libsyn.com/syntax/Syntax169.mp3', '\nIn this Hasty Treat, Scott and Wes talk about remote internet! Remote internet is an important because it opens up living options to developers as the industry moves toward more remote work.\n\n## Netlify Sponsor\n\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [Netlify](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n4:31 - Remote internet options\n\n7:55 - Modems and routers\n\n10:52 - Antennas\n\n13:47 - Boosters\n\n14:54 - Plans, data and speeds\n\n20:11 - Other things to think about\n\n## Links\n* [Deadmau5 house](https://www.youtube.com/watch?v=dBiqFNNfudA)\n* [ZTE MF288](https://www.amazon.com/Hotspot-ZTE-Unlocked-Antennas-Caribbean/dp/B07VWKS38P)\n* [Netgear LB1120](https://www.netgear.com/home/products/mobile-broadband/lte-modems/LB1120.aspx)\n* [Mofi Routers](https://mofinetwork.com/)\n* [ZBT WE826T](https://openwrt.org/toh/zbt/we-826)\n* [Rogers](https://www.rogers.com/consumer/wireless)\n* [Ubiquiti Networks](https://www.ui.com/)\n* [Tomato Firmware](https://www.flashrouters.com/learn/router-basics/what-is-tomato)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '10382a50ae8e6b2a38dbe1998ee82a0880ca23af58b6d8657ac26cc5b89e6df8', 'hasty-treat-remote-internet', '/shows/169 - Remote internet.md', '2023-10-16 20:07:00.062', '2023-10-27 15:57:49.121', 'HASTY'),
('syntax_podcast_show_00170', 170, 'State In React', '2019-08-14 13:00:00.542', 'https://traffic.libsyn.com/syntax/Syntax170.mp3', '\nIn this episode of Syntax, Scott and Wes talk about state in React: local state, global state, UI state, data state, caching, API data and more!\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:38 - What is state?\n\n4:58 - What kind of things are kept in state?\n\n* Data\n    * Temporary client side data\n        * From forms, button clicks, etc.\n    * Cached server data\n    * Data from API\n* UI status\n    * AKA isModalOpen\n    * isToggled\n\n12:48 - Global state vs. Local state\n\n* Ask yourself: does the data need to be accessed outside this component?\n	* If data does need to be accessed a little higher, you can simply move where that state lives. React calls this \"lifting state\".\n* Do you count Apollo API calls as global state?\n\n21:15 - Managing Local state\n\n* useState, setState\n* Passing state & update functions down\n* State machines\n\n31:12 - Approaches to Global state\n\n* Redux\n    * Complicated, hard to learn\n    * Very useful, organized and structured\n    * Actions, reducers and more\n    * Time traveling do to nature of store\n    * Immutability\n    * Tons of Redux based hooks libs\n* Mobx\n    * Based on Observables\n        * An Observable is like a Stream and allows to pass zero or more events where the callback is called for each event. Often Observable is preferred over Promise because it provides the features of Promise and more.\n* Context\n    * Functions just work and update global state.\n    * Downside is there are no fancy tools\n\n* Apollo\n    * Apollo quires for data in global cache\n    * Apollo client for global UI state\n        * Not quite there, isn\'t super elegant\n\n## Links\n* [Thinkso](https://thinkso.com/)\n* [Learn Node!](https://wesbos.com/learn-node/)\n* [Meteor Session](https://docs.meteor.com/api/session.html)\n* [xstate-react](https://github.com/davidkpiano/xstate/tree/master/packages/xstate-react#readme)\n* [React Context](https://reactjs.org/docs/context.html)\n* [Mobx](https://mobx.js.org/)\n* [easy-peasy](https://github.com/ctrlplusb/easy-peasy)\n* [hype.codes](https://hype.codes/)\n* [providerCompose.js](https://gist.github.com/stolinski/2d9545e19dd67bda64143cb1aae04ac0)\n* [Relay](https://relay.dev/)\n* [React Podcast](https://reactpodcast.simplecast.fm/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Command Line Heroes](https://www.redhat.com/en/command-line-heroes)\n* Wes: [Massdrop Ctrl Mechanical Keyboard](https://drop.com/buy/massdrop-ctrl-mechanical-keyboard)\n\n## Shameless Plugs\n* Scott: [LevelUpTutorials - Gatsby Ecommerce](https://www.leveluptutorials.com/pro) — Subscribe before price goes up!\n* Wes: [All Courses](https://wesbos.com/courses/) — Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6740cb3ea41c5c62fff33b89afe7c8d24707755a1cd0fda5a297a49fb6bdc202', 'state-in-react', '/shows/170 - State in React.md', '2023-10-16 20:07:00.100', '2023-10-27 15:57:49.167', 'TASTY'),
('syntax_podcast_show_00171', 171, 'Hasty Treat - How To Publish A React Component To NPM', '2019-08-19 13:00:00.892', 'https://traffic.libsyn.com/syntax/Syntax171.mp3', '\nIn this Hasty Treat, Scott and Wes talk about documentation libraries, starting and maintaining projects, how to publish React components to NPM, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:40 - Create React Library\n\n6:55 - Documentation libraries\n\n10:54 - What I\'m building\n\n13:13 - Linking library to projects\n\n14:52 - Improvements and community thoughts\n\n## Links\n* [Rollup](https://rollupjs.org/guide/en/)\n* [testing-library/react-testing-library](https://github.com/testing-library/react-testing-library)\n* [transitive-bullshit/create-react-library](https://github.com/transitive-bullshit/create-react-library)\n* [leveluptuts/fresh](https://github.com/leveluptuts/fresh)\n* [How To Make a React Component Library - Making A React Library](https://www.youtube.com/watch?v=N8d-CLmg3hw)\n* [React Styleguidist](https://react-styleguidist.js.org/)\n* [Storybook](https://storybook.js.org/)\n* [Docz](https://www.docz.site/)\n* [DocSource](https://docsource.io/)\n* [npm-link](https://docs.npmjs.com/cli/link)\n* [Yarn](https://yarnpkg.com/lang/en/docs/cli/link/)\n* [wesbos/dump](https://github.com/wesbos/dump)\n* [wesbos/Waait](https://www.npmjs.com/package/waait)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '7722cabc7a1fb27b272cd6a641801df251ec202a8cded9d8d3076a4e7298826b', 'hasty-treat-how-to-publish-a-react-component-to-npm', '/shows/171 - How To Publish A React Component To NPM.md', '2023-10-16 20:07:00.142', '2023-10-27 15:57:49.212', 'HASTY'),
('syntax_podcast_show_00172', 172, 'Potluck - Deploying Applications × Typescript × Live Coding with Twitch × Fullstack Architecture × More!', '2019-08-21 13:00:00.892', 'https://traffic.libsyn.com/syntax/Syntax172.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about deploying applications, the value of Typescript, live coding via Twitch and more!\n\n## Sentry - Sponsor\n\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](http://freshbooks.com/syntax) and put **SYNTAX** in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:35 - Q: I prefer using grid-row and grid-column instead of grid-area. But is grid-area more performant? For example, in Flexbox, it\'s a best practice to use the shorthand flex property instead of writing out flex-grow, flex-shrink and flex-basis.\n\n4:04 - Q: Do you have any advice how to deploy an application? What do you think about AWS, Zeit, Heroku, Firebase? Do you use automation tools like Circle CI or Buddy.works? I also wonder if we should keep whole application on one server, or split it up.\n\n9:36 - Q: A career advice question: I\'m best at being a front-end/javascript developer - but in a quest to my make job(s) easier, I\'ve also been getting into fullstack architecture - namely CI/CD (TravisCI, GitlabCI) and Kubernetes. I\'m feeling like I\'m spreading myself a little thin, and I guess I\'m just finding it a bit frustrating (configuring Kubernetes is a lot of bashing your head against the wall). I know that my skills as a front-end developer are already valuable, whereas I can\'t say the same for my Kubernetes/CICD skillset. I\'m wondering whether I should narrow my scope a bit. Maybe this is just the frustrating hump I\'m climbing over, and in six months I\'ll be happy with where I\'m at, but interested to hear your thoughts. One thing I\'ve been thinking about is, maybe I should step back from the network architecture type stuff (ie. Kubernetes) and focus more on DevOps that is closer to the front-end stack (ie. writing tests, VSCode tooling, commit hooks, CI tools, etc.).\n\n13:07 - Q: Do you think Typescript adds value to React, or more complexity than value? When should you choose Typescript for a project?\n\n18:09 - Q: I am in a well known Bootcamp, and as of right now (from what they have taught us) this is what I am working with: HTML/CSS, JavaScript, jQuery, Node, Express, SQL, Auth, MVC, APIs, React, Redux. As we finish off the program, they are going over Java. I do want to learn Java, however I feel like my time would be better spent fine-tuning my knowledge on my stack. And I can learn Java at some other time. Do you recommend that I fully engage with Java and try to absorb some of the basics and fundamentals now, or do you recommend that I take this last month we have here and strengthen my current skills so I do better during my technical interviews? And by the way thanks for everything you do, it helps :)\n\n22:02 - Q: Have you seen the live coding going on at Twitch? Thoughts? Maybe a Syntax stream in the future? There\'s a good list at livecoders.dev. Thanks for all you do. Keep killin\' it!\n\n26:11 - Q: How do you handle people (i.e. C# bastards) who think JavaScript is a joke and is going to be overthrown by Blazor or some other C# library framework? Can\'t we all just get along and live in the same industry? I\'m having a hard time being the adult in these kinds of responses around the web, and in random discussions with people I know very well.\n\n29:55 - Q: There are plenty of places saying that it is important to secure API keys by not embedding them in front-end code. Cool. I\'m on board! But there is not many that tell you specifically how to do this. How do you safely use an API key in a CRUD project?\n\n34:15 - Q: Do you plan to launch a Syntax.fm app?\n\n45:49 - Q: I was hired as a junior developer at a company in the last year. It\'s my first development job and I was so excited. The interview and application were all about React and fullstack development. However now that I\'ve been here a while, I have found out the company does primarily dev ops work. None of this was mentioned in the interview or application, but it looks like soon it will be the majority of my workload. I am feeling very discouraged and was wondering what you guys would do in this situation?\n\n## Links\n* [Develop Denver](https://developdenver.org/)\n* [AWS](https://aws.amazon.com/)\n* [Zeit](https://zeit.co/)\n* [Heroku](https://www.heroku.com/)\n* [CircleCI](https://circleci.com/)\n* [Buddy.works](https://buddy.works/)\n* [Travis CI](https://travis-ci.org/)\n* [Gitlab CI](https://about.gitlab.com/product/continuous-integration/)\n* [Kubernetes](https://kubernetes.io/)\n* [VSCode](https://code.visualstudio.com/)\n* [Typescript](https://www.typescriptlang.org/)\n* [Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor)\n* [Linkedin](https://www.linkedin.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [VIVO Premium Heavy Duty Arm](https://amzn.to/31DHdyJ)\n* Wes: [AmazonBasics Pro-Style Spring Sprayer Kitchen Faucet, Oil-Rubbed Bronze](https://www.amazon.com/AmazonBasics-Pro-Style-Spring-Sprayer-Kitchen/dp/B07F2R728S)\n\n## Shameless Plugs\n* Scott: [LevelUpTutorials Pro - Gatsby Ecommerce](https://www.leveluptutorials.com/pro)\n* Wes: [All Courses - Beginner JS Course](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8d57c45f5c7f1ff99e44d36bb12a949a711af066284998ee730448dd5c654bf7', 'potluck-deploying-applications-typescript-live-coding-with-twitch-fullstack-architecture-more', '/shows/172 - Potluck.md', '2023-10-16 20:07:00.179', '2023-10-27 15:57:49.254', 'TASTY'),
('syntax_podcast_show_00173', 173, 'Hasty Treat - Wes & Scott Look At Svelte 3', '2019-08-26 13:00:00.550', 'https://traffic.libsyn.com/syntax/Syntax173.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Svelte 3 — initial impressions and more!\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n2:16 - What is Svelte?\n\n11:32 - Sapper\n\n13:05 - Svelte Native\n\n14:58 - Questions we have\n\n* What\'s the Typescript story here?\n* How hard would it be to convert a large React app to Svelte?\n* Will Svelte be able to capture the market share it needs to grow and compete?\n* Would you (Wes & Scott) use this?\n\n## Links\n* [https://svelte.dev/examples#hello-world](https://svelte.dev/examples#hello-world)\n* [Mustache](http://mustache.github.io/)\n* [Webpack](https://webpack.js.org)\n* [Rollup.js](https://rollupjs.org/guide/en/)\n* [Next.js](https://nextjs.org)\n* [Sapper](https://sapper.svelte.dev/)\n* [Svelte Native](https://svelte-native.technology/)\n* [React Native](https://reactnative.com/)\n* [Svelte - Typescript support](https://github.com/sveltejs/svelte/issues/1639)\n* [Rethinking Reactivity](https://www.youtube.com/watch?v=AdNJ3fydeao)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f7ad511c7710c26886b8435b202c03e9fc293c81e00f6b202f578788a48ce0a1', 'hasty-treat-wes-and-scott-look-at-svelte-3', '/shows/173 - svelte.md', '2023-10-16 20:07:00.218', '2023-10-27 15:57:49.294', 'HASTY'),
('syntax_podcast_show_00174', 174, 'How to Build an API', '2019-08-28 13:00:00.488', 'https://traffic.libsyn.com/syntax/Syntax174.mp3', '\nIn this episode, Scott and Wes talk about creating APIs — what\'s happening behind the scenes and why it\'s important.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:15 - How do you build an API from scratch?\n\n3:54 - Choose an API type\n\n* [REST](https://restfulapi.net/)\n* [GraphQL](https://graphql.org/)\n\n8:15 - Setup some sort of server that will accept requests and send responses\n\n* [Express](https://expressjs.com)\n* [Koa](https://koajs.com)\n* [Meteor](https://www.meteor.com)\n\n11:11 - Document the endpoints\n\n* What is the end point\n* What parameters are required\n  * Filters\n  * Sorting\n* Headers required\n* What you get back when you hit this endpoint\n* Any request limits\n* Examples in common languages\n  * JS\n  * PHP\n  * Ruby\n\n21:20 - Naming\n\n* Make it obvious\n\n27:39 - Securing\n\n* Only accept requests from logged-in users\n    - oAuth\n    - Cookie/Session\n    - jwt\n* API key\n* CORS\n* Check roles - access level\n* [Syntax 055: Hasty Treat - User Role Systems](https://syntax.fm/show/055/hasty-treat-user-role-systems)\n\n32:42 - Protecting\n\n* Rate limit\n* Whitelist / blacklist\n* [Cloudflare](https://www.cloudflare.com/)\n\n36:00 - Write resolvers \n\n* Modify data if needed\n* Send back the data requested\n* Send back the correct HTTP code\n* Log what happened\n\n37:56 - Tools\n\n* [Postman](https://www.getpostman.com/)\n* [Swagger](https://swagger.io/)\n\n## Links\n* [Stripe](https://stripe.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Hoax Podcast](https://podcasts.apple.com/us/podcast/hoax/id1354226895)\n* Wes: [Solar Lights](https://amzn.to/31NFwyH)\n\n## Shameless Plugs\n* Scott: [LevelUpTutorials Pro - Advanced Gatsby & Shopify](https://www.leveluptutorials.com/pro)\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b21fe57e20ca8e9db2490a2282fd49cb64c715144a7a0eea131e9553528ec3b0', 'how-to-build-an-api', '/shows/174 - APIs.md', '2023-10-16 20:07:00.274', '2023-10-27 15:57:49.331', 'TASTY'),
('syntax_podcast_show_00175', 175, 'Hasty Treat - Stump\'d', '2019-09-02 13:00:00.493', 'https://traffic.libsyn.com/syntax/Syntax175.mp3', '\nIn this Hasty Treat, Scott and Wes are back with another edition of Stump\'d! where they try to stump each other with interview questions. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:54 - What is the difference between NULL and undefined?\n\n5:40 - What is short circuit evaluation in JS?\n\n7:25 - What is `use strict`?\n\n9:07 - What is the only value not equal to itself in JS?\n\n10:36 - When would you create a static class member?\n\n11:54 - What is a pure function?\n\n13:08 - What is JSONP?\n\n14:24 - Describe the layout of the CSS box model?\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e7b0317e0c6ec049ca022da0fd2085d8958c6fd6c4eb444946ead2e81e8e6255', 'hasty-treat-stump-d', '/shows/175 - stumpd.md', '2023-10-16 20:07:00.332', '2023-10-27 15:57:49.372', 'HASTY'),
('syntax_podcast_show_00176', 176, 'Building Steam Games with React', '2019-09-04 13:00:00.219', 'https://traffic.libsyn.com/syntax/Syntax176.mp3', '\nIn this episode, Scott and Wes talk with Drew Conley about building games with Javascript. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Drew Conley](https://twitter.com/drewconley13)\n\n## Show Notes\n\n1:58 - What is Danger Crew?\n\n5:25 - Did you have a background in game dev before this?\n\n8:36 - What were the initial resources you went to to make a game in React?\n\n10:27 - How much of it is Canvas?\n\n13:06 - What other libraries are you using?\n\n14:00 - How did you lay out the environments?\n\n16:35 - How is text rendered?\n\n22:40 - How did you do all of the animation?\n\n26:08 - What performance issues did you run into?\n\n27:31 - How do you handle user states and saves?\n\n29:21 - Is there any server side aspect?\n\n30:42 - What was the process for creating the level editor? \n\n34:38 - How did you publish the game / wrap it as an executable to sell?\n\n38:16 - How do you update it?\n\n39:43 - How difficult was creating the game logic?\n\n41:20 - The dev theme in the game is super prominent, did that make working on it more fun?\n\n## Links\n* [Steam](https://store.steampowered.com/)\n* [Danger Crew](https://thedangercrew.com/)\n* [aseprite](https://www.aseprite.org/)\n* [Buy Danger Crew](https://store.steampowered.com/app/1064690/Danger_Crew/)\n* [Drew Conley](https://drewconley.org)\n* [Pixels to SVG](https://s.codepen.io/shshaw/debug/XbxvNj)\n* [GameMaker](https://www.yoyogames.com/gamemaker)\n* [Making an editor](https://drewconley.org/2019-08-25-dangercrew-editors/)\n* [Electron](https://electronjs.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Drew: [Strange Planet Instagram](https://www.instagram.com/nathanwpylestrangeplanet/)\n* Wes: [MX Master Config Tweet Thread](https://twitter.com/wesbos/status/1166350577519009793)\n* Scott: [Figma](https://www.figma.com/)\n\n## Shameless Plugs\n* Drew: [Danger Crew](https://thedangercrew.com/)\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n* Scott: [LevelUpTutorials Pro - Advanced Gatsby & Shopify](https://www.leveluptutorials.com/pro)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '13dd44c907c65a718b1015568e4f3f129cae48372fb4ce94da97ca05244e2fe0', 'building-steam-games-with-react', '/shows/176 - steam.md', '2023-10-16 20:07:00.372', '2023-10-27 15:57:49.417', 'TASTY'),
('syntax_podcast_show_00177', 177, 'Hasty Treat - Moving from PHP to Node', '2019-09-09 13:00:00.490', 'https://traffic.libsyn.com/syntax/Syntax177.mp3', '\nIn this Hasty Treat, Scott and Wes talk about moving from PHP to Node — pitfalls to avoid, best practices and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:43 - Servers need to be started and baby sat\n\n4:48 - There is no built-in file system based routing\n\n6:34 - Some \"gotchas\"\n\n7:02 - Functional programming\n\n8:17 - Async vs sync\n\n11:11 - Event lifecycles\n\n12:09 - Dependencies\n\n14:17 - Keyed arrays\n\n## Links\n* [Wes\' tweet thread](https://twitter.com/wesbos/status/1166355311126634496)\n* [Forever](https://www.npmjs.com/package/forever)\n* [PM2](http://pm2.keymetrics.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'dc1c3ee705dfea357f1098e6be2bfea76c6984c5281b03dbbed8943cf0b60a7f', 'hasty-treat-moving-from-php-to-node', '/shows/177 - PHP to Node.md', '2023-10-16 20:07:00.417', '2023-10-27 15:57:49.525', 'HASTY'),
('syntax_podcast_show_00178', 178, 'How We Record, Edit, and Host Our Courses', '2019-09-11 13:00:00.490', 'https://traffic.libsyn.com/syntax/Syntax178.mp3', '\nIn this episode, Scott and Wes talk about how they make courses — recording, editing, hosting, best practices, and more!  \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n5:42 - Recording\n\n* Wes:\n  * [Screenflow](https://www.telestream.net/screenflow/)\n  * [Uberlayer](https://apps.apple.com/no/app/uberlayer/id510139938?mt=12)\n  * [Loopback](https://rogueamoeba.com/loopback/)\n  * [Heil PR40](https://www.amazon.com/PR40-Dynamic-Microphone-Carrying-included/dp/B002OSQ9TC)\n  * [Heil PL-2T](https://www.amazon.com/Heil-Sound-PL-2T-Overhead-Broadcast/dp/B000SZVZ74/)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A)\n  * [Focusrite Scarlett 2i2](https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B01E6T56EA)\n\n* Scott: \n  * [Screenflick](https://www.araelium.com/screenflick-mac-screen-recorder)\n  * [iShow HD](https://www.shinywhitebox.com/ishowu-studio-2)\n  * [Divvy](https://mizage.com/divvy/)\n  * [Principal for Mac](https://principleformac.com/)\n  * [EV RE-20](https://www.amazon.com/Electro-Voice-RE-20-Cardioid-Microphone/dp/B000Z7LLQ0)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A)\n  * [Focusrite Scarlett 2i2](https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B01E6T56EA)\n  * [Sony a7 III](https://www.amazon.com/Sony-Full-Frame-Mirrorless-Interchangeable-Lens-ILCE7M3/dp/B07B43WPVK)\n  * [Logic](https://www.apple.com/logic-pro/)\n\n33:04 - Editing\n\n* Wes:\n  * Screenflow\n  * Speed up slow typing\n  * Edit out some goof-ups (but not all)\n  * Edit immediately after recording so I\'m in the same headspace and can easily re-record\n\n* Scott:\n  * Hire a video editor\n  * Cut out all blank spaces in audio, because I know that pauses are typically where I stop to think\n  * Normalize audio\n  * [DaVinci Resolve 16](https://www.blackmagicdesign.com/products/davinciresolve)\n\n42:31 - Hosting\n\n* Wes:\n  * [Wistia](https://wistia.com/)\n  * [Vimeo](https://vimeo.com/)\n  * [Rev](https://www.rev.com/)\n  * [Backblaze](https://www.backblaze.com/)\n  * [Amazon S3](https://aws.amazon.com/s3/)\n  * My own course platform, with additional controls added via React\n\n* Scott:\n  * [YouTube](https://youtube.com)\n  * [Vimeo](https://vimeo.com/)\n  * [Plyr Video Player](https://plyr.io/)\n  * [Backblaze](https://www.backblaze.com/)\n  * [Amazon S3](https://aws.amazon.com/s3/)\n  * Custom course platform\n\n52:46 - Common Questions\n\n## Links\n* [Syntax 014: Our Stacks Explained](https://syntax.fm/show/014/our-stacks-explained)\n* [Adobe Premier Pro](https://www.adobe.com/products/premiere.html)\n* [Figma](https://www.figma.com/)\n* [VS Code](https://code.visualstudio.com/)\n* [Audio-Technica AT2020](https://www.amazon.com/Audio-Technica-AT2020-Cardioid-Condenser-Microphone/dp/B0006H92QK)\n* [Blue Bluebird](https://www.amazon.com/Blue-Microphones-Large-Diaphragm-Condenser-Microphone/dp/B01MZBLKN5)\n* [BSW](https://bswusa.com)\n* [Sweetwater](https://www.sweetwater.com/)\n* [Tim Smith - Video Editing](https://ttimsmith.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Hyperdrive](https://www.netflix.com/title/80189648)\n* Wes: [PicQuic Screwdriver](https://amzn.to/2Lj7HAg)\n\n## Shameless Plugs\n* Scott: [LevelUpTutorials Pro - Advanced Gatsby & Shopify](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3b850b1dcac2530a8f8c8a58cf9aaa6f913883ce95e622b32e4b47d098be9e99', 'how-we-record-edit-and-host-our-courses', '/shows/178 - courses.md', '2023-10-16 20:07:00.459', '2023-10-27 15:57:49.564', 'TASTY'),
('syntax_podcast_show_00179', 179, 'Hasty Treat - The TLD Game', '2019-09-16 13:00:00.822', 'https://traffic.libsyn.com/syntax/Syntax179.mp3', '\nIn this Hasty Treat, Scott and Wes are playing a game! It\'s called the TLD game, where Scott and Wes try to stump each other with questions about top level domains.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n1:55 - The rules of the game\n\nWe pick a TLD from a list, and the other person needs to guess:\n\n1. Is it for a country or business? -5 points\n2. What country, business, or type of business is it for? -5 points\n3. How much per year does it cost to register? You may also say \"unregisterable\" +/- off by $$\n4. is scott.___ and wes.___ available?  -10 for each\n\n5:40 - .BO\n\n7:51 - .BZH\n\n9:50 - .BANANAREPUBLIC\n\n11:15 - .BABY\n\n14:04 - .KR\n\n16:09 - .MOTO\n\n17:25 - .AW\n\n19:16 - .IM\n\n## Links\n* [101Domain](https://www.101domain.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f6d2e5f77d65fe31f416608244e845563bbea3d08b95599d7ff52c5ef6d1fcda', 'hasty-treat-the-tld-game', '/shows/179 - TLD.md', '2023-10-16 20:07:00.499', '2023-10-27 15:57:49.601', 'HASTY'),
('syntax_podcast_show_00180', 180, 'Potluck - Why Webpack? × Serverless × Agencies × Recruiters × CSS Grid × MQ in Styled Components', '2019-09-18 13:00:00.822', 'https://traffic.libsyn.com/syntax/Syntax180.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about webpack, serverless, agencies, recruiters, CSS Grid, media queries and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n5:06 - Q: What do you think about webpack vs parcel vs the old way (gulp, etc.)?\n\n11:30 - Q: What is your opinion on AWS Lambda functions?\n\n15:42 - Q: How do you push new Syntax.fm episodes into production? Each episode is written in markdown. Do you have a different branch for each episode and merge into master? What\'s your strategy to avoid releasing the episode before the intended date?\n\n21:25 - Q: Can Scott share some of his experiences working at an agency? Are there any red flags for when you should jump ship?\n\n30:45 - Q: Whats the deal with recruiters? How do they work, and should you use one to land a new job?\n\n36:46 - Q: What do you think about Upwork? Is it possible to find cool full-time jobs there or is it only \'work for beer\'?\n\n41:27 - Q: If my website is already fast, why should I sacrifice my developer experience and learn a new syntax?\n\n44:18 - Q: Will there be a CSS grid inspector on Chrome? Do you use any 3rd party grid inspectors or stick with Firefox\'s CSS grid inspector?\n\n46:38 - Q: What the best way to handle media queries in Gatsby with styled components?\n\n## Links\n* [Webpack](https://webpack.js.org/)\n* [Parcel](https://parceljs.org/)\n* [Gulp](https://gulpjs.com/)\n* [CodeShip](https://codeship.com/)\n* [Semaphore](https://github.com/marketplace/semaphore)\n* [r/reactjs](https://www.reddit.com/r/reactjs/)\n* [r/webdev](https://www.reddit.com/r/webdev/)\n* [Wordpress](https://wordpress.org/)\n* [Upwork](https://www.upwork.com/)\n* [Fiverr](https://www.fiverr.com/)\n* [Svelte](https://svelte.dev/)\n* [Syntax 173: Hasty Treat - Wes & Scott Look At Svelte 3](https://syntax.fm/show/173/hasty-treat-wes-and-scott-look-at-svelte-3)\n* [Firefox CSS Grid Inspector](https://www.mozilla.org/en-US/developer/css-grid/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: DIY Air Filter\n  * [Box Fan](https://amzn.to/2HX2ITM)\n  * [Air Filter](https://amzn.to/2A5oBfb)\n* Wes: [Ripride with Andy Roy - Episode 6 with Steve-O](https://www.youtube.com/watch?v=4z_1IjBVlSc) \n\n## Shameless Plugs\n* Scott: [LevelUpTutorials Pro - Advanced Gatsby & Shopify](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '2461cf78149ccb960b6e83940919b71aa1e6c4948daf3e63f9864c70c080f432', 'potluck-why-webpack-serverless-agencies-recruiters-css-grid-mq-in-styled-components', '/shows/180 - potluck.md', '2023-10-16 20:07:00.540', '2023-10-27 15:57:49.644', 'TASTY'),
('syntax_podcast_show_00181', 181, 'Hasty Treat - Automating Stuff', '2019-09-23 13:00:00.529', 'https://traffic.libsyn.com/syntax/Syntax181.mp3', '\nIn this Hasty Treat, Scott and Wes are talking about automation — apps, workflows, resources, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:16 - Alfred workflows\n\n9:32 - Smart home routines\n\n13:16 - Bash scripts & aliases\n\n17:06 - Remove node_modules\n\n* `find . -name \"node_modules\" -type d -prune -exec rm -rf \'{}\' +`\n\n18:43 - Other\n\n## Links\n* [Alfred](https://www.alfredapp.com/)\n* [Wyze Cam](https://www.wyze.com/)\n* [Google Home](https://store.google.com/gb/product/google_home)\n* [Drip](https://www.drip.com/)\n* [Divvy](https://mizage.com/divvy/)\n* [Z](https://github.com/rupa/z)\n* [Wes\' Video on Z](https://www.youtube.com/watch?v=qbNn5zJLZU0)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '28e5091a4e30b8ee48ac04554d39b976511c0497d3abb1dcba6653aaf548afc7', 'hasty-treat-automating-stuff', '/shows/181 - automating stuff.md', '2023-10-16 20:07:00.585', '2023-10-27 15:57:49.683', 'HASTY'),
('syntax_podcast_show_00182', 182, 'Practical - How would we build Airbnb, Twitter, or Reddit?', '2019-09-25 13:00:00.529', 'https://traffic.libsyn.com/syntax/Syntax182.mp3', '\nIn this episode, Scott and Wes are trying something new! It\'s called Practical, in which Scott and Wes take a topic and flesh out all the theory into something super practical. Today\'s topic comes from a listener question asking how they would build a simple version of a modern web app like Twitter, Reddit, or Airbnb. \n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n3:03 - Backend\n\n* [Express](https://expressjs.com/)\n* [Node](https://nodejs.org)\n* [GraphQL](https://graphql.org/)\n* [MongoDB](https://www.mongodb.com/)\n\n14:45 - Frontend\n\n* [React](https://reactjs.org/)\n* [Next.js](https://nextjs.org/)\n* Styled components\n* Stay as close to real CSS as possible\n\n22:39 - Deployment process\n\n* Serverless\n* [Now](https://zeit.co/home)\n* Ideally one app that handles everything\n\n28:38 - Email\n\n* [Syntax Ep 32: Designing, Templating, Inlining and Sending Email](https://syntax.fm/show/032/designing-templating-inlining-and-sending-email)\n* [mjml](https://mjml.io/)\n* [Juice](https://github.com/Automattic/juice)\n* [Inky](https://github.com/foundation/inky)\n* [Nodemailer](https://nodemailer.com)\n* [Postmark](https://postmarkapp.com/)\n* [Mailjet](https://www.mailjet.com/)\n* [Mandrill](https://mandrill.com/)\n* Get everyone set up and working in two different systems, so you can switch easily if something goes wrong\n\n33:32 - Users / Auth / Cookies / Permissions \n\n* Use something like a pre-existing package or service rather than roll your own (though it can get expensive quickly)\n* [Passport](http://www.passportjs.org/)\n* [Auth0](https://auth0.com/)\n* [accounts-js](https://accounts-js.netlify.com/)\n\n38:48 - Images\n\n* [Cloudinary](https://cloudinary.com/)\n* [imgIX](https://www.imgix.com/)\n\n41:50 - Other things to be aware of\n\n* Handling cash\n  * [Stripe](https://stripe.com/)\n  * [PayPal](https://www.paypal.com/us/home)\n  * [Braintree](https://www.braintreepayments.com/)\n  * [Recurly](https://recurly.com/)\n* Queueing\n\n## Links\n* [Ruby on Rails](https://rubyonrails.org/)\n* [Django](https://www.djangoproject.com/)\n* [Meteor](https://www.meteor.com/)\n* [MySQL](https://www.mysql.com/)\n* [PHP](https://www.php.net/)\n* [Postgres](https://www.postgresql.org/)\n* [Mongoose](https://mongoosejs.com/)\n* [Drip](https://www.drip.com/)\n* [ConvertKit](https://convertkit.com/)\n* [Feathers](https://feathersjs.com/)\n* [David Luecke](https://twitter.com/daffl)\n* [Tweetdeck](https://tweetdeck.twitter.com/)\n* [Next.js](https://nextjs.org)\n* [react-router](https://www.npmjs.com/package/react-router)\n* [Reach Router](https://reach.tech/router)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Heroku](https://www.heroku.com/)\n* [Redux](https://redux.js.org/)\n* [Svelte](https://svelte.dev/)\n* [Gridsome](https://gridsome.org/)\n* [Mailchimp](https://mailchimp.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [K-Safe](https://amzn.to/300gH6l)\n* Wes: [Bon Appetit YouTube Channel](https://www.youtube.com/channel/UCbpMy0Fg74eXXkvxJrtEn3w) \n\n## Shameless Plugs\n* Scott: [Svelte Course Coming Soon!](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Flexbox.io Course](https://flexbox.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '04deee0c73a1a4d732856e2242107c15d36b19c11c8139366092655933c57435', 'practical-how-would-we-build-airbnb-twitter-or-reddit', '/shows/182 - practical.md', '2023-10-16 20:07:00.637', '2023-10-27 15:57:49.724', 'TASTY'),
('syntax_podcast_show_00183', 183, 'Hasty Treat - Developing Better Habits', '2019-09-30 13:00:00.962', 'https://traffic.libsyn.com/syntax/Syntax183.mp3', '\nIn this Hasty Treat, Scott and Wes are talking about developing better habits — strategies, avoiding distractions, best practices, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:03 - Habits we\'re trying to build\n\n* Scott\n  * Focus on one project at a time\n    * Alfred tasks to quit apps and block sites\n  * Not being efficient with my time\n    * Daily todo lists and utilizing calendar\n  * Too much screen time\n    * Listening to music in the background instead of having the TV on\n* Wes\n  * Flossing\n  * Mindless context switching\n\n13:37 - General strategies for building habits\n\n* Make them trackable\n  * Easy enough to not ignore them\n  * Quantifying them is key\n* Make them small enough\n* Be accountable\n  * Tell other people your habits and have them remind you about them\n* Replace bad habits with good things\n  * Design a sticker\n  * Reply to three emails\n  * Drink some water\n* Celebrate your wins productively\n* Keep the streak alive\n* Can\'t do x until y is done\n\n## Links\n* [uhabits](https://github.com/iSoron/uhabits)\n* [Done](https://apps.apple.com/us/app/done-a-simple-habit-tracker/id1103961876)\n* [Loop](https://play.google.com/store/apps/details?id=org.isoron.uhabits&hl=en_US)\n* [K-Safe](https://amzn.to/300gH6l)\n* [Alfred](https://www.alfredapp.com/)\n* [Codepen](https://codepen.io/)\n* [Atomic Habits](https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/0735211299)\n* [The Power of Habit](https://www.amazon.com/Power-Habit-What-Life-Business/dp/081298160X)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ec071b1baabe1cb5527233d3c4dd2dc1b53208b8f2c23f4df4ffe41660a302fd', 'hasty-treat-developing-better-habits', '/shows/183 - habits.md', '2023-10-16 20:07:00.683', '2023-10-27 15:57:49.768', 'HASTY'),
('syntax_podcast_show_00184', 184, 'Desktop & Mobile Apps With a Single Codebase', '2019-10-02 13:00:00.962', 'https://traffic.libsyn.com/syntax/Syntax184.mp3', '\nIn this episode, Scott and Wes talk with Etienne Lemay, developer of [Missive](https://missiveapp.com/), about his experience building Missive, best practices, and the pros and cons of building desktop and mobile apps with a single codebase.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Etienne Lemay](https://twitter.com/EtienneLem)\n\n## Show Notes\n\n0:57 - What is Missive?\n\n6:10 - What is the desktop app built in?\n\n9:44 - Did you use any particular libraries for the front-end? \n\n11:44 - How are you managing state?\n\n13:37 - Is it challenging to do all of this in JS?\n\n15:07 - What was the catalyst for the \"multi-conversation swipe\"? \n\n21:32 - What is the mobile app built in?\n\n24:00 - What are the advantages of Cordova?\n\n30:30 - How do you manage offline/syncing/etc. so well in a JS app?\n\n34:56 - How do you test it?\n\n36:52 - Have you looked into Cypress?\n\n39:35 - How do you style it?\n\n## Links\n* [@EtienneLem](https://twitter.com/etiennelem)\n* [Missive](https://missiveapp.com/)\n* [Spark](https://sparkmailapp.com/)\n* [CoffeeScript](https://coffeescript.org/)\n* [Backbone](https://backbonejs.org/)\n* [Redux](https://redux.js.org/)\n* [Typescript](https://www.typescriptlang.org/)\n* [Electron](https://electronjs.org/)\n* [Webpack](https://webpack.js.org/)\n* [Javascript30](https://javascript30.com/)\n* [Cordova](https://cordova.apache.org/)\n* [React Native](https://facebook.github.io/react-native/)\n* [Fastlane](https://fastlane.tools/)\n* [Amazon S3](https://aws.amazon.com/s3/)\n* [Cypress](https://www.cypress.io/)\n* [Sass](https://sass-lang.com/)\n* [TailwindCSS](https://tailwindcss.com/)\n* [Svelte](https://svelte.dev/)\n* [Syntax 176: Building Steam Games with React](https://syntax.fm/show/176/building-steam-games-with-react)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Disgraceland Podcast](https://www.disgracelandpod.com/)\n* Wes: [Wagner 590 Spray Gun](https://amzn.to/2l660M9)\n* Etienne: [Prettier](https://prettier.io/) \n\n## Shameless Plugs\n* Scott: [Svelte Course Coming Soon!](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n* Etienne: [Missive](https://missiveapp.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9b0f53d3319923f87563352a3134a25790ef115ad7dc63fec45a1d2855735a0a', 'desktop-and-mobile-apps-with-a-single-codebase', '/shows/184 - single codebase.md', '2023-10-16 20:07:00.732', '2023-10-27 15:57:49.812', 'TASTY'),
('syntax_podcast_show_00185', 185, 'Hasty Treat - Feature + Release Planning', '2019-10-07 13:00:00.237', 'https://traffic.libsyn.com/syntax/SFF185.mp3', '\nIn this Hasty Treat, Scott and Wes talk about feature and release planning — dealing with bugs, task management, best practices, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n4:06 - Wes:\n\n* Features are logged into software (Github, Jira, etc.)\n* I use a Kanban board - I bubble them up and down in the order in which I want to release them\n* I don\'t plan for Q1, Q1, etc.. \n* Tear off an issue, tackle it, test and deploy.\n\n10:39 - Scott: \n\n* All issues/features get a priority tag (e.g. p1 → p4) regardless of the system\n* Bugs go in Github\n* Features and platform improvements go in Notion\n* Table of priorities (with git branch, lead dev, release number, emoji icon, what it contains, etc.)\n\n## Links\n* [Github](https://github.com/)\n* [Trello](https://trello.com/)\n* [Kanban](https://en.wikipedia.org/wiki/Kanban)\n* [Jira](https://www.atlassian.com/software/jira)\n* [Canny](https://canny.io/)\n* [Notion](https://www.notion.so/)\n* [Getting Things Done](https://gettingthingsdone.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7810a7eb23e23c67a24caccd51eba83bff01e663bb3aba03b6a42e1866c85fd5', 'hasty-treat-feature-release-planning', '/shows/185 - feature release planning.md', '2023-10-16 20:07:00.771', '2023-10-27 15:57:50.003', 'HASTY'),
('syntax_podcast_show_00186', 186, 'Potluck - Terminal Configs × CSS Reset × Flexbox × Freelancing × NPM Dependencies × Project Hand-off × More!', '2019-10-09 13:00:00.237', 'https://traffic.libsyn.com/syntax/Syntax186.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about freelancing, handing off projects to other developers, terminal configs, podcast apps, how much flexbox is too much flexbox, npm dependencies, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:49 - Q: I\'m interested in freelancing full-time and have some projects, big and small, lined up over the next few months to work on the side. How much work is a good amount of work to transition into freelancing full-time?\n\n9:52 - Q: How much flexbox is too much flexbox? Is it a bad idea to use a dozen flexboxes for a viewport-filling application?\n\n13:19 - Q: Can you explain the \"potential\" benefit of resetting CSS and whether it\'s necessary? In which circumstances should we use such an approach?\n\n15:26 - Q: I would love to hear an episode, or potluck segment, about your shell/fish/zsh configs. Maybe explain little tweaks you\'ve made and why you\'ve chosen the shell you use.\n\n23:26 - Q: I always get confused on when and how to use .bind() method. Any pointers on when I should use .bind(), like in what situations? I also see it used a lot in React apps, but have no idea why they are using it. Could you explain this in detail?\n\n27:02 - What are your suggestions for handing off client sites for freelance work? I don\'t take many contracts (I have another full time job) but I\'ll take one here or there during summer to supplement a little bit. I\'m finding it difficult to make a clean hand-off when the project is finished. The contractual requirements are met and like anything, there are always tweaks to be made. I\'ll handle some minor deployment issues without billing, but I struggle with where to draw the line. What suggestions do you have? \n\n35:19 - This question is for Wes. I live in Central New York, and every time I go on the highway heading north or south I see several Ontario license plates. Where are ya\'ll going all the time? Is there a secret Canadian spot down here? \n\n38:20 - Each time I re-open an old project I lose so much time with npm dependencies being outdated and it drives me mad! I\'m starting to dislike npm and everything around it, but is it npm only? How does other languages like php, python or GO handle this mess of dependencies? Are we better today than yesterday and I\'m just complaining about nothing?\n\n43:50 - Which podcast player do you use (Android, PC, or other phone/tablet), and why? Where do you listen to them?\n\n## Links\n* [Flexbox](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox)\n* [React Native](https://facebook.github.io/react-native/)\n* [CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)\n* [Normalize](https://necolas.github.io/normalize.css/)\n* [iTerm2](https://www.iterm2.com/)\n* [zsh](https://ohmyz.sh/)\n* [Fish](https://fishshell.com/)\n* [Hyper](https://hyper.is/)\n* [Wes\' Command Line Power User Course](https://commandlinepoweruser.com/)\n* [Overcast](https://overcast.fm/)\n* [Pocket Casts](https://www.pocketcasts.com/)\n* [Planet Money](https://www.npr.org/podcasts/510289/planet-money)\n* [Joe Rogan](http://podcasts.joerogan.net/)\n* [The Indicator](https://www.npr.org/podcasts/510325/the-indicator-from-planet-money)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Untitled Goose Game](https://www.youtube.com/watch?v=9LL2AtHo1gk)\n* Wes: [Garmin vivoactive 3](https://amzn.to/2oyCuA3)\n\n## Shameless Plugs\n* Scott: [Svelte For Beginners](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Wes\' Instagram](https://www.instagram.com/wesbos/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '861064332f26bc7fd87097c89837780fc6d514fcaae2628b92d4cc26257fdee0', 'potluck-terminal-configs-css-reset-flexbox-freelancing-npm-dependencies-project-hand-off-more', '/shows/186 - potluck.md', '2023-10-16 20:07:00.815', '2023-10-27 15:57:50.045', 'TASTY'),
('syntax_podcast_show_00187', 187, 'Hasty Treat - Float Tank Experiences', '2019-10-14 13:00:00.188', 'https://traffic.libsyn.com/syntax/Syntax187.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their experiences with float tanks!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n2:28 - What is a float tank?\n\n6:47 - What are the benefits?\n\n8:50 - How did you feel during the float?\n\n17:28 - Would you do it again?\n\n## Links\n* [The Joe Rogan Experience](http://podcasts.joerogan.net/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5ad361ed0b18c481221e9985097a21ef6c7e68185aa849e368f1f936dbc39fe9', 'hasty-treat-float-tank-experiences', '/shows/187 - float tank.md', '2023-10-16 20:07:00.867', '2023-10-27 15:57:50.088', 'HASTY'),
('syntax_podcast_show_00188', 188, 'The Fundamentals - Server Side', '2019-10-16 13:00:00.982', 'https://traffic.libsyn.com/syntax/Syntax188.mp3', '\nIn this episode of Syntax, Scott and Wes talk about server side fundamentals — the important things you should know if you\'re interested in diving into server side. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:53 - Requests and responses\n\n9:21 - What is a server?\n\n10:33 - Ports\n\n13:50 - Database connection and interaction\n\n15:16 - Cookies and sessions\n\n15:48 - Writing files and directory permissions\n\n19:34 - Headers\n\n22:13 - Error Handling\n\n22:50 - Logs\n\n25:04 - Async data handling\n\n26:33 - Routing\n\n30:44 - Mime types\n\n36:26 - Authentication\n\n37:49 - Environmental variables\n\n40:37 - Deployment\n\n43:24 - Advanced\n\n## Links\n* [GraphQL](https://graphql.org/)\n* [Node](https://nodejs.org/)\n* [React For Beginners](https://reactforbeginners.com/)\n* [Next.js](https://nextjs.org)\n* [Meteor](https://www.meteor.com/)\n* [Papertrail](https://papertrailapp.com/)\n* [pjax](https://pjax.herokuapp.com/)\n* [jQuery](https://jquery.com/)\n* [Github](https://github.com/)\n* [iMazing HEIC Converter](https://imazing.com/heic)\n* [Now.sh](https://zeit.co/home)\n* [Netlify](https://www.netlify.com/)\n* [Twitter streaming API](https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data)\n* [B is for Build](https://www.youtube.com/channel/UCl4-WBRqWA2MlxmZorKOV7w)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Samcrac YouTube Channel](https://www.youtube.com/channel/UCtn2hU9HKYQAgDtwrhux7Sw)\n* Wes: [Wyze Plugs](https://amzn.to/2o2iXZ9)\n\n## Shameless Plugs\n* Scott: [Svelte For Beginners](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b7af8c721b5bc0e1f50883ab8d1b27e1e3fc0f864f5a801ca039437b2af2a4be', 'the-fundamentals-server-side', '/shows/188 - server side.md', '2023-10-16 20:07:00.907', '2023-10-27 15:57:50.131', 'TASTY'),
('syntax_podcast_show_00189', 189, 'Hasty Treat - React Server Side Rendering', '2019-10-21 13:00:00.494', 'https://traffic.libsyn.com/syntax/Syntax189.mp3', '\nIn this Hasty Treat, Scott and Wes talk about server side rendering — what it is, how to use it, best practices, things to avoid, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:20 - What is SSR?\n\n4:16 - Why SSR at all?\n\n8:39 - Platforms that do SSR out of the box\n\n11:18 - Gotchas\n\n* useLayoutEffect\n`import { useEffect, useLayoutEffect } from \'react\'`\n`const useIsoLayoutEffect =`\n  `typeof window !== \'undefined\' ? useLayoutEffect : useEffect`\n`export default useIsoLayoutEffect`\n\n18:20 - Tools\n\n## Links\n* [Next.js](https://nextjs.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Webpack](https://webpack.js.org)\n* [Parcel](https://parceljs.org/)\n* [Meteor](https://www.meteor.com/)\n* [React](https://reactjs.org/)\n* [NoSSR component](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/NoSsr/NoSsr.js)\n* [Syntax 127: Hasty Treat - React Suspense](https://syntax.fm/show/127/hasty-treat-react-suspense)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'bf700f8681b1d05c5ddeb1375b5c1524bf580a0d9eb2a5176d994894a2a80a11', 'hasty-treat-react-server-side-rendering', '/shows/189 - SSR.md', '2023-10-16 20:07:00.945', '2023-10-27 15:57:50.182', 'HASTY'),
('syntax_podcast_show_00190', 190, 'Migrating, Deploying, and Hosting WordPress', '2019-10-23 13:00:00.494', 'https://traffic.libsyn.com/syntax/Syntax190.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Brad Touesnard of [Delicious Brains](https://deliciousbrains.com/) about migrating, deploying, and hosting WordPress.  \n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Hasura - Sponsor\nHasura is an open-source GraphQL engine that helps you instantly setup a scalable and realtime GraphQL backend. Hasura makes your team super productive by dynamically composing a schema backed by databases and services that you can securely query from frontend clients. Get started at [hasura.io](https://hasura.io/) to try it out in 30 seconds!\n\n## Guests\n\n* [Brad Touesnard](https://twitter.com/bradt)\n\n## Show Notes\n\n3:50 - Why did Brad start Delicious Brains?\n\n5:25 - What plugins does Delicious Brains make?\n\n11:40 - Migrating WordPress\n\n16:50 - Migrating databases\n\n24:20 - How do you do version control with WordPress?\n\n37:06 - What\'s the easiest way to deploy and host WordPress?\n\n40:23 - What are some examples of managed WordPress hosts?\n\n46:58 - What does your deployment process look like from beginning to end?\n\n50:22 - Thoughts on headless WordPress\n\n53:12 - Is serverless WordPress a thing? \n\n## Links\n* [Delicious Brains](https://deliciousbrains.com/)\n* [WP Migrate DB Pro](https://deliciousbrains.com/wp-migrate-db-pro/)\n* [WP Offload Media](https://deliciousbrains.com/wp-offload-media/)\n* [WP Offload SES](https://deliciousbrains.com/wp-offload-ses/)\n* [SpinupWP](https://spinupwp.com/)\n* [Heroku](https://www.heroku.com/)\n* [Now.sh](https://zeit.co/home)\n* [WP Engine](https://wpengine.com/)\n* [Flywheel](https://getflywheel.com/)\n* [Advanced Custom Fields](https://www.advancedcustomfields.com/)\n* [Composer](https://getcomposer.org/)\n* [WP Packagist](https://wpackagist.org/)\n* [WordPress.org](https://wordpress.org/)\n* [React](https://reactjs.org)\n* [Laravel](https://laravel.com/)\n* [Pagely](https://pagely.com/)\n* [Kinsta](https://kinsta.com/)\n* [GoDaddy](https://www.godaddy.com/)\n* [WordPress.com](https://wordpress.com/)\n* [SiteFround](https://www.siteground.com/)\n* [Buddy](https://buddy.works/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Laravel Forge](https://forge.laravel.com/)\n* [npm](https://www.npmjs.com)\n* [Codeship](https://codeship.com)\n* [Gatsby](https://www.gatsbyjs.org)\n* [Laravel Vapor](https://vapor.laravel.com/)\n* [Installing via Composer](https://deliciousbrains.com/wp-migrate-db-pro/doc/installing-via-composer/) \n* [WordPress deployment workflow](https://spinupwp.com/wordpress-deployment-workflow-preparing/)\n* [Managing your WordPress site with Git and Composer](https://deliciousbrains.com/storing-wordpress-in-git/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Brad: [Teppanyaki Grill](https://amzn.to/2ATU6sY)\n* Scott:\n  * [Succession](https://www.hbo.com/succession)\n  * [The Righteous Gemstones](https://www.hbo.com/the-righteous-gemstones)\n* Wes: [Magnatiles](https://amzn.to/3336kMa)\n\n## Shameless Plugs\n* Brad: [All Products](https://deliciousbrains.com/)\n* Scott: [Svelte For Beginners](https://www.leveluptutorials.com/tutorials/svelte-for-beginners) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2ea15aaf1a4584487f21df584f2e2ea2845cfc0e6896cdd96b0701888e63ad0c', 'migrating-deploying-and-hosting-wordpress', '/shows/190 - WordPress.md', '2023-10-16 20:07:01.006', '2023-10-27 15:57:50.232', 'TASTY'),
('syntax_podcast_show_00191', 191, 'Hasty Treat - Scott Moves to iPhone', '2019-10-28 13:00:00.974', 'https://traffic.libsyn.com/syntax/Syntax191.mp3', '\nIn this Hasty Treat, Scott talks about moving to iPhone — his experiences with both Android and iOS, the advantages and disadvantages of both, and more! \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n1:59 - My device history\n\n* OG Droid → Nexus → Pixel\n* Misconceptions of android\n  * It\'s Windows for phones\n  * It\'s cheaper or not as nice\n\n5:03 - Why switch?\n\n6:39 - Who wins what?\n\n* Android\n  * Homescreen\n  * Low light photography\n  * Usability\n    * Squeeze assistant\n    * Google search integrated everywhere\n  * Search\n  * Keyboard\n  * Notification\n\n* iOS\n  * Apps\n  * Performance\n  * Camera overall\n  * Device quality\n  * Fun stuff\n  * Haptics\n\n## Links\n* [1Password](https://1password.com/)\n* [LastPass](https://www.lastpass.com/)\n* [Gboard](https://play.google.com/store/apps/details?id=com.google.android.inputmethod.latin&hl=en_US)\n\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e821df7403f9f43c11d6e496c74c305abc18a2a94b074ee3262d2b2e0b436981', 'hasty-treat-scott-moves-to-iphone', '/shows/191 - iphone.md', '2023-10-16 20:07:01.056', '2023-10-27 15:57:50.360', 'HASTY'),
('syntax_podcast_show_00192', 192, 'Spooky Web Dev Horror Stories', '2019-10-30 13:00:00.741', 'https://traffic.libsyn.com/syntax/Syntax192.mp3', '\nIn this episode of Syntax, Scott and Wes talk about web dev horror stories — things you can only hope will never happen to you!   \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n2:09 - Scott\'s Disastrous Git Clean\n\n4:35 - Magic Updates the Gathering\n\n8:52 - YAAAAS\n\n9:37 - Token Trouble\n\n12:16 - jQuery Plugins\n\n15:22 - Success!\n\n18:00 - Parental Advisory\n\n21:47 - Students Changing Grades\n\n22:46 - Lorem Sh!tsum\n\n26:22 - Drowning in a Waterfall\n\n28:53 - Magneto Upgrades\n\n30:00 - JOHN CENA\n\n33:24 - Migration Migraine\n\n35:39 - Primary Key Nightmare\n\n36:26 - The $20,000 YAML formatter\n\n## Links\n* [Adam J. Sontag](https://twitter.com/ajpiano)\n* [jQuery](https://jquery.com/)\n* [GitLab](https://about.gitlab.com/)\n* [Gitlab Database Incident](https://about.gitlab.com/blog/2017/02/01/gitlab-dot-com-database-incident/)\n* [Magento](https://magento.com/)\n* [Meteor](https://www.meteor.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Dyson Hand Vacuum](https://amzn.to/2MrI3K3)\n* Wes: [/r/ AbsoluteUnits](https://www.reddit.com/r/AbsoluteUnits/)\n\n## Shameless Plugs\n* Scott: [Fullstack React with JS9](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '11dbe6838ff78b52676ab5f62cfe2fabc797b170a9d203d643effeb65dc3ab69', 'spooky-web-dev-horror-stories', '/shows/192 - spooky.md', '2023-10-16 20:07:01.098', '2023-10-27 15:57:50.402', 'TASTY'),
('syntax_podcast_show_00193', 193, 'Hasty Treat - Spooky Stories', '2019-11-04 14:00:00.779', 'https://traffic.libsyn.com/syntax/Syntax193.mp3', '\nIn this Hasty Treat, Scott and Wes bring you _more_ web dev horror stories! \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:26 - Perf Woes\n\n3:42 - Always Backup Your Backups\n\n4:54 - Kill Children\n\n6:03 - Robots Don\'t Eat Food\n\n8:32 - Email Goof Up\n\n9:44 - Hundreds of Thousands of Date Issues\n\n10:46 - Spooky August\n\n12:32 - You\'re up to .bat\n\n13:17 - Printed Code\n\n15:12 - ThinkGeek\n\n16:12 - It would take a while to Ketchup on all these orders\n\n17:05 - This story makes me want to stick my head in async\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '7ccc4c5a021dbb6bc50c2c1de9d4a7dc8b7801b1db5c42d6c1036862da94577c', 'hasty-treat-spooky-stories', '/shows/193 - spooky.md', '2023-10-16 20:07:01.138', '2023-10-27 15:57:50.447', 'HASTY'),
('syntax_podcast_show_00194', 194, 'Potluck - Gatsby vs Next × Is Google Home spying on you? × Flat File CMS × CSS Frameworks × Hosting Client Sites × More!', '2019-11-06 14:00:00.779', 'https://traffic.libsyn.com/syntax/Syntax194.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about Gatsby vs Next, Google Home and privacy, flat file CMS, working with designers, CSS frameworks and more!\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n6:15 - Q: Curious if you would ever consider running your course platform on Gatsby instead of NextJs? If not, what dynamic content would prevent you from doing so?\n\n10:48 - Q: What\'s the difference between a software developer and a software engineer, in your opinion?\n\n13:11 - Q: How do you deal with designers who design without any thought about how dev will implement it?\n\n15:46 - Q: I saw that Wes has an example in one of his slides where the Array prototype is written onto the Nodelist prototype. Is this safe enough for production as it overrides all regular NodeList behavior? \n\n19:18 - Q: In a potluck episode you mentioned that you do not host your clients\' website. If you don’t host you clients\' website how do you usually go about handling clients that are less tech savvy? Or do you avoid those types of clients?\n\n21:30 - Q: I know you guys (especially Wes) have been pretty insistent recently on not hosting clients\' sites yourself, but what do you guys think about continuously hosting client sites with a service like Netlify? It\'s highly unlikely to go down and scales all for you, so it might be a bit of reoccurring income if you bill them yearly for the minimal Netlify fees.\n\n24:44 - Q: I was listening to your episode on \"The Smart Home\" and I\'m very interested in buying a Google Home Mini myself. However, I cannot stop thinking about the privacy implications of an always listening device around the house. What are your thoughts on this topic and on privacy related to online services in general?\n\n29:08 - Q: What are your thoughts about using a CMS that uses flat files vs one that uses a traditional MySQL or Postgres database for a company blog that won\'t have insane traffic? We\'re currently evaluating Grav CMS and Craft CMS.\n\n32:17 - Q: Have you used data attributes as custom elements in CSS and JS?\n\n37:32 - Q: Why do so many people jump on styled-components/CSS in JS? Are these all people who have never used Sass/SCSS?! It seems like such a PITA to get Sass working with either of these. It feels like coding tables vs HTML 5. To me it seems like a step backwards.\n\n44:26 - Q: When do you, if ever, reach for a component library, like Material or Bootstrap? Currently working a corporate job where it’s almost expected to use one of these for all internal applications. I usually prefer to make my own, but I’m wondering if I’m just making my life more difficult than it needs to be? Any advice?\n\n48:30 - Q: Could you guys chat about Git clients and which ones you guys use and why? Or are you guys hardcore terminal geeks?\n\n## Links\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Next.js](https://nextjs.org/)\n* [Bling.js](https://gist.github.com/paulirish/12fb951a8b893a454b32)\n* [Syntax 118: The Smart Home](https://syntax.fm/show/118/the-smart-home)\n* [Grav CMS](https://getgrav.org/)\n* [Craft CMS](https://craftcms.com/)\n* [prismic](https://prismic.io/)\n* [Sanity](https://www.sanity.io/)\n* [Contentful](https://www.contentful.com/)\n* [Tina CMS](https://tinacms.org/)\n* [Forestry](https://forestry.io/)\n* [Airdale Chemical](http://www.airedalechemical.com/)\n* [Material](https://material.io/)\n* [Bootstrap](https://getbootstrap.com/)\n* [VS Code](https://code.visualstudio.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [HeavySet - Gym Workout Log](https://www.runloop.com/heavyset-gym-workout-log-for-iphone)\n* Wes: [Baroness Von Sketch](https://www.cbc.ca/baroness/m_site/)\n\n## Shameless Plugs\n* Scott: [FullStack React with NextJS](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript Course](https://www.beginnerjavascript.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a5d55d1bcc609e16e2fefe3bea347b04c67447311fd4fb96669e116cd2e02f15', 'potluck-gatsby-vs-next-is-google-home-spying-on-you-flat-file-cms-css-frameworks-hosting-client-sites-more', '/shows/194 - potluck.md', '2023-10-16 20:07:01.188', '2023-10-27 15:57:50.489', 'TASTY'),
('syntax_podcast_show_00195', 195, 'Hasty Treat - Buying and Selling Domain Names', '2019-11-11 14:00:00.714', 'https://traffic.libsyn.com/syntax/Syntax195.mp3', '\nIn this Hasty Treat, Scott and Wes talk about domain names — buying and selling, best practices and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:50 - Buying a domain\n\n10:47 - Selling a domain\n\n13:50 - Transferring a domain\n\n## Links\n* [who.is](https://who.is/)\n* [GoDaddy](https://www.godaddy.com/)\n* [JavaScript.co](https://javascript.co/)\n* [BeginnerJavaScript.com](https://www.beginnerjavascript.com/)\n* [LearnNode.com](https://learnnode.com/)\n* [BeginnerJS.com](https://beginnerjs.com/)\n* [KitBos.com](https://kitbos.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Learn.li](http://learn.li/)\n* [Learnli.co](http://learnli.co/)\n* [Escrow.com](http://escrow.com/)\n* [Hover](https://hover.com/)\n* [Bob.com](http://bob.com)\n* [Sedo.com](https://sedo.com/)\n* [Park.io](https://park.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '037ad3b5dafc454f3ec03a7b1e6854f9f3caadad57f0dd3a1c5beab3db59c44e', 'hasty-treat-buying-and-selling-domain-names', '/shows/195 - domains.md', '2023-10-16 20:07:01.240', '2023-10-27 15:57:50.534', 'HASTY'),
('syntax_podcast_show_00196', 196, 'Design Foundations For Developers', '2019-11-13 14:00:00.714', 'https://traffic.libsyn.com/syntax/Syntax196.mp3', '\nIn this episode of Syntax, Scott and Wes talk about design foundations for developers — tips to follow that will make your designs better!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n6:35 - Our backgrounds in design\n\n12:41 - Foundations\n\n* Consistency makes a big difference\n* Use \"training wheel\" tools until you are confident\n* Always work within a system\n* Less is more - subtle is better\n\n19:39 - Color\n\n* Color theory\n* Complementary colors and shades\n* Stick to color pallet generators until you are good enough\n\n28:51 - Spacing\n\n* More spacing than you think you need\n* Vertical rhythm\n* Letter spacing: -1px\n* Consistent margin and padding\n\n34:47 - Typography\n\n* Sans vs serifs\n* Finding fonts\n* Use proven combinations until you know your way around\n\n41:49 - Interaction\n\n* Design for all states (e.g. standard, visited, active, hover, etc.)\n* Animations should be quick\n* Interactions should make sense\n\n45:04 - Concerns beyond visuals\n\n* Accessibility via color contrast\n* Thin fonts and light grey are awful\n* Think about the poor Windows users\n\n48:47 - Inspiration + Resources\n\n* Take inspiration from the best — you\'ll find your own voice after enough work\n* Go easy on trends - blobby characters with purple hair\n* Take a trip around the world wide web\n* [Stripe](https://stripe.com/)\n* [Dribbble](https://dribbble.com/)\n* [Site Inspire](https://www.siteinspire.com/)\n* [codrops](https://tympanus.net/codrops/)\n* [Refactoring UI](https://refactoringui.com/)\n\n## Links\n* [Designer Starter Pack - Andrea Crofts](https://twitter.com/andreacrofts/status/1172885155352125441/)\n* [LastPass](https://www.lastpass.com/)\n* [Colour Lovers](https://www.colourlovers.com/) \n* [Syntax 142: Travis Neilson on Skills Gap, Design, Focus and Working at Google](https://syntax.fm/show/142/travis-neilson-on-skills-gap-design-focus-and-working-at-google/)\n* [Bloomberg](https://www.bloomberg.com/)\n* [Dropbox](https://www.dropbox.com/)\n* [FontPair](https://fontpair.co/)\n* [FontJoy](https://fontjoy.com/)\n* [Figma - Google Font Pairings](https://www.figma.com/google-fonts/)\n* [Type Scale](https://type-scale.com/)\n* [Creative Market](https://creativemarket.com/)\n* [Radnika Next](https://hanken.co/products/radnika-next/)\n* [Stripe](https://stripe.com/)\n* [Dribbble](https://dribbble.com/)\n* [Syntax 72: Accessibility](https://syntax.fm/show/072/accessibility/)\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/)\n* [Site Inspire](https://www.siteinspire.com/)\n* [codrops](https://tympanus.net/codrops/)\n* [Refactoring UI](https://refactoringui.com/)\n* [Adam Wathan](https://adamwathan.me/)\n* [Steve Schoger](https://twitter.com/steveschoger)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Reelgood](https://reelgood.com/)\n* Wes: [Magnesium](https://www.amazon.com/Natures-Bounty-Magnesium-Supplement-Vegetarian/dp/B00H5PJ0HW/)\n\n## Shameless Plugs\n* Scott: [FullStack React with NextJS](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '09c35c5806ce390e96834b5a4db1da3a873bd094077f12adfae3e31b0477fd24', 'design-foundations-for-developers', '/shows/196 - design.md', '2023-10-16 20:07:01.307', '2023-10-27 15:57:50.582', 'TASTY'),
('syntax_podcast_show_00197', 197, 'Hasty Treat - Tips For Writing Good CSS', '2019-11-18 14:00:00.266', 'https://traffic.libsyn.com/syntax/Syntax197.mp3', '\nIn this Hasty Treat, Scott and Wes talk about tips for writing good CSS. \n\n## Sizzy - Sponsor\nSizzy is the browser made for developers and designers. Stop manually resizing your browser window and switching between devices so you can test responsive design. Speed up your workflow by developing and previewing your website on multiple devices at once. Sizzy includes powerful features and plugins that will help you take your web development game to the next level. Check it out at [Sizzy.co](https://sizzy.co/).\n\n## Show Notes\n\n4:08 - Use a system\n\n4:50 - Use overrides and cascading \n\n* Embrace the cascade\n* Don\'t rewrite the same CSS over and over again\n* Understand why scoping is good\n\n9:07 - Nail down typography early\n\n* You can always revisit if it isn\'t what you need\n\n10:36 - Pick a pattern and stick to it\n\n* BEM\n* Functional CSS\n* CSS in JS\n\n14:39 - Don\'t style based on element type (kind of) — a class should describe the component \n\n17:09 - Good naming techniques\n\n* Describe what it is, not what it looks like\n* Thing\n  * ThingChild\n    * ThingChild-modifier\n* Scale sizes (e.g. s, m, l, xl)\n\n21:43 - Other tips\n\n* Group like CSS together\n* Chunk into different files\n* Write good comments\n* CSS properties FTW\n\n## Links\n* [Stylus](http://stylus-lang.com/)\n* [Webpack](https://webpack.js.org/)\n* [Parcel](https://parceljs.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'abb9470016cde45e8421d012ee3cdc6d774bda0e209b7c2f2c1eee553e06f941', 'hasty-treat-tips-for-writing-good-css', '/shows/197 - CSS.md', '2023-10-16 20:07:01.374', '2023-10-27 15:57:50.626', 'HASTY'),
('syntax_podcast_show_00198', 198, 'How To Get Better At Problem Solving', '2019-11-20 14:00:00.266', 'https://traffic.libsyn.com/syntax/Syntax198.mp3', '\nIn this episode of Syntax, Scott and Wes talk about how to get better at problem solving — one of the most important skills to build as a developer.\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Prismic - Sponsor\nPrismic is a Headless CMS for your next front end project. Create complex content type, relate data, and have your clients edit it all with the Prismic UI. Then pull the data into your project with their JSON or GraphQL API. Try it out with your next project - Gatsby, React + Apollo, or any other language. Check out their examples to get you started at [prismic.io/syntax](https://prismic.io/syntax). \n\n## Show Notes\n\n2:43 - Gather info\n\n* What is this thing trying to do? \n* Use tools\n* DevTools are your best friend during this phase\n\n8:01 - Know where to look (and use tools)\n\n* Dev tools for client side\n* Error logs\n* [Sentry](https://sentry.io/)\n* [LogRocket](https://logrocket.com/syntax)\n* The most experienced people in any field know how to ask the right questions.\n* Some of this will come with experience and nothing else. If you\'ve seen a problem before, it\'s easier to solve.\n\n10:00 - Look at the end game\n\n* What are you really trying to do here? Don\'t focus so much on the tech that you miss the bigger picture. \n\n13:17 - Read Again\n\n* Error logs provide the best clues. Read them closely.\n* Actually read your code — don\'t skim it.\n* Write comments while reading it, or follow existing comments — good for documenting, but also for structuring your thoughts.\n\n18:08 - Make it simple (break it into smaller parts)\n\n* Limit the number of inputs and outputs\n* Get it working in a limited capacity (e.g. safe mode, Codepen, etc.)\n* Comment out major sections of code until you have a working example\n* Does this problem exist outside of the framework?\n* Does this work in a clean environment?\n\n25:35 - Take yourself out of your environment\n\n* You should be able to take a look at the problem at all zoom levels\n* Does it work locally but not on the server?\n* Does it work in other browsers?\n\n27:32 - Stay calm\n\n* It\'s easy to get nervous or worked up when the stakes are high\n* It won\'t serve you to panic. If you are panicking, take a 10 min walk to deep breath\n* Take a shower, lift weights (seriously)\n\n30:14 - Talk it over\n\n* Getting the perspective of another developer can be invaluable\n\n32:28 - Make things obvious\n\n* Use debugger or label logs — don\'t let it be ambiguous\n* For CSS bugs, use primary colors to make things stand out\n* Use the right tool to make the problem stand out\n  * Layers for CSS issues\n  * Network for network issues\n  * Performance tab (etc.)\n\n35:12 - Use Git correctly to free up your techniques\n\n* If you\'re code commits are up to date, you can heavily modify code without fear of deleting things — just revert to a previous commit once you find the issue and fix.\n\n36:10 - Don\'t jump at solutions\n\n* Take the time to fully dissect the problem\n* Question you assumptions\n* It can\'t possibly be a problem with ____. Well maybe it is.\n  * Wes once spent hours trying to diagnose a check engine light when the gas cap was lose.\n\n43:51 - Get good at pattern matching\n\n* This comes with experience\n* When did this problem start? \n* Did we deploy any code? Did we change any logic? \n\n44:54 - Get good at googling\n\n* Being able to describe your problem is key.\n* Search the error from Firefox\n\n## Links\n* [DevTools](https://developers.google.com/web/tools/chrome-devtools)\n* [Sentry](https://sentry.io/)\n* [LogRocket](https://logrocket.com/syntax)\n* [CodePen](https://codepen.io/)\n* [Syntax 154: SVGs with Sara Soueidan](https://syntax.fm/show/154/svgs-with-sara-soueidan)\n* [@walpolea](https://twitter.com/walpolea)\n* [Syntax 152: Debugging Tools + Tips](https://syntax.fm/show/152/debugging-tools-tips)\n* [@bowlendev](https://twitter.com/bowlendev)\n* [@dan_abramov](https://twitter.com/dan_abramov)\n* [Ryan Dahl on creating Node.js](https://youtu.be/EeYvFl7li9E)\n* [@LaurieonTech](https://twitter.com/LaurieonTech)\n* [Firefox](https://www.mozilla.org/)\n* [DuckDuckGo](https://duckduckgo.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Jeremy Ethier Youtube Channel](https://www.youtube.com/channel/UCERm5yFZ1SptUEU4wZ2vJvw)\n* Wes: [Marpac Rohm Sound Machine](https://amzn.to/2Ncp1rw)\n\n## Shameless Plugs\n* Scott: [Typescript in React Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript Course](https://beginnerjavascript.com)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3d89db88d923fa4b94c4592801834d337ffca0db1efc0e7c9af21256df45b2ff', 'how-to-get-better-at-problem-solving', '/shows/198 - problem solving.md', '2023-10-16 20:07:01.414', '2023-10-27 15:57:50.680', 'TASTY'),
('syntax_podcast_show_00199', 199, 'Hasty Treat - So you want to make a course... Will people buy it?', '2019-11-25 14:00:00.961', 'https://traffic.libsyn.com/syntax/Syntax199.mp3', '\nIn this Hasty Treat, Scott and Wes talk about making courses — techniques, best practices, things to avoid, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:07 - Validating your ideas \n\n4:44 - Generating ideas\n\n6:38 - Figuring out which ideas will stick\n\n10:00 - Show your expertise\n\n14:02 - Pay attention to what\'s popular\n\n15:50 - Collect email addresses\n\n## Links\n* [Microsoft Excel Stream Highlights](https://www.youtube.com/watch?v=xubbVvKbUfY)\n* [Refactoring UI](https://refactoringui.com/)\n* [Adam Wathan](https://twitter.com/adamwathan)\n* [Steve Schoger](https://twitter.com/steveschoger)\n* [Scott\'s Svelte 3 course](https://www.leveluptutorials.com/tutorials/svelte-for-beginners)\n* [Wes\' Sublime Text articles](https://wesbos.com/category/sublime-text/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c24cf56ed427eb1382abb68e9309365805faf28e71e26413ada047996d2f8e12', 'hasty-treat-so-you-want-to-make-a-course-will-people-buy-it', '/shows/199 - courses.md', '2023-10-16 20:07:01.451', '2023-10-27 15:57:50.726', 'HASTY'),
('syntax_podcast_show_00200', 200, 'Show 200!', '2019-11-27 14:00:00.961', 'https://traffic.libsyn.com/syntax/Syntax200.mp3', '\nIn this episode of Syntax, Scott and Wes celebrate 200 episodes of Syntax with a live Q&A!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n2:27 - With 2020 around the corner, what are your wild predictions for the the future of web design and development?\n\n8:44 - Are site builders going to replace us as web developers?\n\n13:30 - What does the future look like for Syntax?\n\n19:01 - What emerging tech advancements most excite you for the next 5-10 years?\n\n23:27 - What is the future of web hosting? What should hosting companies do differently?\n\n27:40 - Why do you set your base font size to 10px?\n\n32:40 - If you could go back in time, what would you say to yourself?\n\n36:29 - How do you make an iFrame go 100% high?\n\n39:10 - What\'s one thing you see developers stress out about for no reason?\n\n44:46 - Do you feel overwhelmed with creating new content when there\'s so much already out there?\n\n48:42 - How do you stay sane with your naming conventions?\n\n51:15 - If Gatsby is best for static websites and Next is best for apps, how does Create React App compare?\n\n54:30 - How much is too much or too little magic in a framework or library?\n\n58:11 - Does Kait ever get tired of you buying a bunch of stuff?\n\n61:45 - What is your office setup?\n\n64:01 - How long until we can use Suspense for data loading with libraries other than Relay?\n\n## Links\n* [Pigeonhole](https://pigeonholelive.com/)\n* [Keystone](https://www.keystonejs.com/)\n* [VulcanJS](http://vulcanjs.org/)\n* [NextJS](https://nextjs.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Meteor](https://www.meteor.com/)\n* [Wix](https://www.wix.com/)\n* [Squarespace](https://www.squarespace.com/)\n* [Modulz](https://www.modulz.app/)\n* [Figma](https://www.figma.com/)\n* [Sketch](https://www.sketch.com/)\n* [Framer](https://www.framer.com/)\n* [Netlify](https://www.netlify.com/)\n* [dnsimple](https://dnsimple.com/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [AWS](https://aws.amazon.com/)\n* [Heroku](https://www.heroku.com/)\n* [Syntax016: Rems vs Ems](https://syntax.fm/show/016/tasty-treats-rems-vs-ems-remote-work-making-money-getting-good-at-design-more)\n* [Seth Godin](https://www.sethgodin.com/)\n* [Notion](https://notion.so)\n* [Laravel](https://laravel.com/)\n* [Blaze](http://blazejs.org/)\n* [Relay](https://relay.dev/)\n* [SWR](https://swr.now.sh/)\n* [Suspense](https://reactjs.org/docs/concurrent-mode-suspense.html)\n* [Project Farm YouTube Channel](https://www.youtube.com/channel/UC2rzsm1Qi6N1X-wuOg_p0Ng)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Missing Crypto Queen](https://www.bbc.co.uk/programmes/p07nkd84/episodes/downloads)\n* Wes: [Bosch Wiper Blades](https://amzn.to/33Fjv6O)\n\n## Shameless Plugs\n* Scott: [React and Typescript](https://www.leveluptutorials.com/pro)\n* Wes: [Beginner Javascript](https://beginnerjavascript.com)\n* Black Friday Sale - Get 50% off!\n  * [Scott\'s Courses](https://www.leveluptutorials.com/pro)\n  * [Wes\' Courses](https://wesbos.com/courses)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6cdf766489896e9e0ea080643093ceebcabf6ab05b05434c0a897b21ed01744c', 'show-200', '/shows/200.md', '2023-10-16 20:07:01.504', '2023-10-27 15:57:50.778', 'TASTY'),
('syntax_podcast_show_00201', 201, 'Hasty Treat - New CSS Logical Properties', '2019-12-02 14:00:00.678', 'https://traffic.libsyn.com/syntax/Syntax201.mp3', '\nIn this Hasty Treat, Scott and Wes talk about new CSS Logical Properties.\n\n## Hasura - Sponsor\nHasura is an open source real-time GraphQL engine. It connects to your databases & microservices and instantly gives you a production-ready GraphQL API. Check it out at [Hasura.io](https://hasura.io/).\n\n## Show Notes\n\n2:27 - The Box Model\n\n5:32 - Grid and Flexbox\n\n10:17 - Widths and Heights\n\n11:20 - Text Align\n\n## Links\n* [New CSS Logical Properties!](https://medium.com/@elad/new-css-logical-properties-bc6945311ce7)\n* [Elad Shechter](https://twitter.com/eladsc)\n* [Adam Argyle](https://twitter.com/argyleink)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'fed37cdabdff772d811338ec96fd30ffe33151299a86a97aed325f58b9270837', 'hasty-treat-new-css-logical-properties', '/shows/201 - CSS.md', '2023-10-16 20:07:01.540', '2023-10-27 15:57:50.817', 'HASTY'),
('syntax_podcast_show_00202', 202, 'Potluck - Tabs are better? × Coding Music × SEO × Is Angular good? × Biggie Smalls × Soy Sauce × More!', '2019-12-04 14:00:00.678', 'https://traffic.libsyn.com/syntax/Syntax202.mp3', '\nIt\'s another potluck! In this episode Scott and Wes talk about tabs vs spaces, coding music, SEO, React vs Angular vs Vue vs Svelte, Rapping, Soy sauce and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:18 - Q: I am potentially starting a job as an Angular developer (modern angular). But I am scared that, even though I will continue to stay on the cutting edge in my personal projects, using Angular in my job will make it harder to get a job after that in more modern tech like React. Do you think there is any truth to this?\n\n5:30 - Q: Yo guys, saw soy sauce stirred up quite the controversy...lol. What are some big developer disagreements you guys have?\n\n11:40 - Q: In JavaScript, ! == is the same as ! =, but I was told there was a slight technical difference. I cannot find what the difference is. Could you elaborate on this?\n\n14:17 - Q: What are the rules on using another dev\'s repos as a boiler plate? Example: Using Wes\'s advanced react starter files to utilize his set up for my own project? \n\n15:35 - Q: What music do you listen to while you code? As an extension, could we crowd source a dev playlist and host it on Spotify?\n\n20:26 - Q: How do you go about working with different technologies and stacks (front-end related) when you have to accommodate for the client or other developers\' biases towards specific things. For example, you have to learn a different set of tools because in a new project someone doesn\'t like what you use and says X is a better tool for the job.\n\n23:11 - Q: I know there is no magic SEO silver bullet, but what are some best practices for implementing SEO into your website or web application?\n\n27:26 - Q: When dealing with responsive sites, how do you go about respecting the request in iOS safari to show desktop sites?\n\n28:45 - Q: I get confused about your usage of the word \'app\'. You don\'t make iPhone or Android apps, but you often through the word around like \"I would create a Node App\", or \"Some of the apps I made\" etc. Is it just website applications, or how exactly should I interpret \"Node App\" or \"Web App\" compared to a mobile app?\n\n31:36 - Q: I wanted to ask your thoughts on transform class properties plugin from Babel? Heard the podcast on react state, I found it mind blowing when setting everything up without constructors.\n\n36:53 - Q: I am a beginner, I have mostly learned front-end so far (HTML/CSS, JavaScript, React). Should I first get pretty good at these before I start learning some back-end? Or, should I actually start learning back-end now and have a basic knowledge of both front-end and back-end?\n\n39:00 - Q: If for some reason React died today and you were no longer able to use it, which framework would you pick up and use full time? Would it be Vue or Angular? Or something new like Svelte?\n\n40:11 - Q: What habits, strategies, or specific tools do you rely on to prevent your hard drives from filling up with useless files?\n\n* `find . -name \"node_modules\" -type d -prune -exec rm -rf \'{}\' +`\n\n47:20 - Q: Which JS library is most like the Tesla Cybertruck?\n\n## Links\n* [Tailwind CSS](https://tailwindcss.com/)\n* [Syntax Spotify Playlist](https://open.spotify.com/playlist/061zvEAIbt6ZxVZxtkk3ot?si=R74zdIRyScGYph5UiCHFcg)\n* [Head Bob Spotify Playlist](https://open.spotify.com/playlist/4sFWRZDOmCiR7abKNRmWjr?si=Kk0vlHtURFuIsPku1pZ-5A)\n* [Retired Scenester Metalcore Spotify Playlist](https://open.spotify.com/playlist/6RnddeJf0fd0kwYrLJbm3U?si=f9SFFYntQJ6buGNH1o0Uxw)\n* [DaisyDisk](https://daisydiskapp.com/)\n* [CleanMyMac](https://macpaw.com/cleanmymac)\n* [Backblaze](https://www.backblaze.com/)\n* [Tesla Cybertruck](https://www.tesla.com/cybertruck)\n* [RxJS](https://rxjs-dev.firebaseapp.com/)\n* [SynthWave \'84 VS Code Theme](https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode)\n* [RoboCopJS](http://www.pseudobry.com/robocop.js/)\n\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Keychron K1 Mechanical Keyboard](https://www.keychron.com/products/keychron-mechanical-keyboard)\n* Wes: [Everlane Uniform Crew Neck](https://www.everlane.com/uniform)\n\n## Shameless Plugs\n* Scott: [Black Friday Sale on All Courses](https://www.leveluptutorials.com/pro)\n* Wes: [Beginner Javascript Course](https://beginnerjavascript.com)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5a9ba9a0437a4cea6f6d28572537cfb7042361c57ca902121e5c5cc6560ed0ec', 'potluck-tabs-are-better-coding-music-seo-is-angular-good-biggie-smalls-soy-sauce-more', '/shows/202 - potluck.md', '2023-10-16 20:07:01.574', '2023-10-27 15:57:50.884', 'TASTY'),
('syntax_podcast_show_00203', 203, 'Hasty Treat - What Are Github Actions?', '2019-12-09 14:00:00.500', 'https://traffic.libsyn.com/syntax/Syntax203.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Gihub Actions — what they do, why you might be interested in them, best practices and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:30 - What are Github Actions?\n\n4:40 - Examples of Github Actions\n\n6:02 - Will Github Actions replace continuous integration services?\n\n9:19 - Libraries\n\n## Links\n* [Codeship](https://codeship.com/)\n* [Github Actions](https://github.com/marketplace?type=actions)\n* [nextdiff](https://github.com/zeit/nextdiff/blob/master/screenshot.js)\n* [Figma Action](https://github.com/marketplace/actions/figma-action)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd098ead3ccaf26fc8afb060253a80cec3e9bc79fe9e32c8ba9e4c2a488897fec', 'hasty-treat-what-are-github-actions', '/shows/203 - github actions.md', '2023-10-16 20:07:01.611', '2023-10-27 15:57:50.921', 'HASTY'),
('syntax_podcast_show_00204', 204, '2019 Gift Guide', '2019-12-11 14:00:00.500', 'https://traffic.libsyn.com/syntax/Syntax204.mp3', '\nIn this episode of Syntax, Scott and Wes bring you an entire episode of sick picks — the 2019 gift guide!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:48 - Gadgets\n\n* [Apple Watch](https://www.apple.com/watch/)\n* [Sabrent Qi Wireless Charger](https://www.amazon.com/Sabrent-Wireless-Universally-Compatible-WL-QIFC/dp/B079HNYKH9)\n* [Sony wh-1000xm3](https://www.amazon.com/Sony-Noise-Cancelling-Headphones-WH1000XM3/dp/B07G4MNFS1/)\n* [Bose QC35 II](https://www.amazon.com/Bose-QuietComfort-Wireless-Headphones-Cancelling/dp/B0756CYWWD/)\n* [Sabrent 8-in-1 hub](https://www.amazon.com/Sabrent-MicroSD-Multi-Card-Delivery-DS-UHCR/dp/B0797QGK2X/)\n* [Satechi Aluminum Multi-Port Adapter](https://www.amazon.com/Satechi-Aluminum-Multi-Port-Adapter-Pass-Through/dp/B075FW7H5J/)\n* [Anker 5-in-1 quick charge hub](https://www.amazon.ca/PowerPort-5-Port-Charger-Charge-Samsung/dp/B01IUTIUEA/)\n* [3 in 1 charge cable](https://www.amazon.com/Multi-Charging-Cellphone-Tablet-Devices/dp/B07QZJ6F9C/)\n* [Elgato Cam Link](https://www.amazon.com/Elgato-Cam-Link-Broadcast-Camcorder/dp/B07K3FN5MR/)\n\n16:59 - Smart Home Automation\n\n* [Google Nest Home Hub](https://store.google.com/product/google_nest_hub)\n* [Wyze cams + plugs + bulbs](https://wyze.com/shop.html)\n* [Ecobee thermostat](https://www.amazon.com/ecobee-SmartThermostat-Voice-Control-Black/dp/B07NQT85FC/)\n* [Google Chromecast](https://store.google.com/us/product/chromecast)\n* [Google Home](https://store.google.com/us/product/google_home)\n* [Smart Powerstrip](https://www.amazon.com/s?k=Smart+Powerstrip&ref=nb_sb_noss)\n\n27:14 - Laptop Stands\n\n* [12 South](https://amzn.to/2LkvCij)\n* [Rain Design mStand](https://www.amazon.com/Rain-Design-mStand-Laptop-Patented/dp/B000OOYECC/)\n* [Roost](https://www.amazon.com/Roost-Laptop-Stand-Adjustable-Portable/dp/B01C9KG8IG/)\n* [Nexstand](https://www.amazon.com/Nexstand-Laptop-Stand-Portable-MacBook/dp/B01HHYQBB8/)\n\n29:59 - Phone Cases\n\n* [RhinoShield](https://www.amazon.com/stores/page/1C730F0F-4800-4E6C-BA46-36B9505A6549?store_ref=SB_A0045711EN285ULC71SQ&pf_rd_p=44fc3e0f-4b9e-4ed8-b33b-363a7257163d&aaxitk=szjcRbRgDXtrmpSZ9NzUag&hsa_cr_id=8836527440601&lp_asins=B07X9TNC3T,B07XDZY4P1,B07XDYS875&lp_mat_key=rhino%20shield&lp_query=Rhino%20shield&lp_slot=auto-sparkle-hsa-tetris)\n\n30:52 - Mechanical Keyboards\n\n* [Ctrl Keyboard](https://drop.com/buy/drop-ctrl-mechanical-keyboard)\n* [Keychron K1](https://www.keychron.com/products/keychron-mechanical-keyboard)\n* [Code Keyboard](https://codekeyboards.com/)\n\n34:34 - Mice\n\n* [Logitech MX Master Mouse](https://www.amazon.com/Logitech-Master-Wireless-Mouse-High-Precision/dp/B07DHDFW5V/)\n\n35:27 - Tripods\n\n* [Lammcou Flexible Tripod](http://www.lammcou.com/)\n* [GorillaPod](https://www.amazon.com/GorillaPod-Compact-Ballhead-Mirrorless-Charcoal/dp/B074WC9YKL/)\n\n37:04 - Cameras\n\n* [Sony a7 III](https://www.amazon.com/Sony-Full-Frame-Mirrorless-Interchangeable-Lens-ILCE7M3/dp/B07B43WPVK/)\n\n38:06 - Experiential\n\n* Massage\n* Float\n* Knife Skills Class\n* Butcher Class\n* Cooking Class\n\n40:08 - Food\n\n* [Cold Brew Coffee Maker](https://amzn.to/383bBqr)\n* [Prep Naturals Glass Meal Prep Containers](https://www.amazon.com/dp/B06Y31WGWR?ref=ppx_pop_mob_ap_share)\n* [Blue Top Creamy Buffalo](https://www.amazon.com/Blue-Creamy-Sauce-Buffalo-Cayenne/dp/B06XR2ZTRS)\n* [Heartbeat Hot Sauce Pineapple Habanero](https://www.heartbeathotsauce.com/)\n* [Maldon Salt](https://www.amazon.com/Maldon-Salt-Flakes-1-5kg-3-3lbs/dp/B004SBQYMU/)\n* [Weck jars](https://www.amazon.com/s?k=weck+jars&ref=nb_sb_noss_1)\n* [Thick sheet pans](https://www.amazon.com/Viking-Culinary-4030-9982C-CCGY-Nonstick-Bakeware/dp/B07KGV2RMR/)\n* [Precut parchment](https://www.amazon.com/s?k=Precut+Parchment&i=grocery&ref=nb_sb_noss_2)\n* [Instant Read Thermometer](http://misterchefer.com/product/meat-termometer/)\n* [Umai Dry Steak Aging](https://www.amazon.com/s?k=Umai+Dry+Steak+Aging&ref=nb_sb_noss)\n* [Charcuterie bags](https://www.amazon.com/s?k=charcuterie+bags&gclid=EAIaIQobChMI_Jm_3Oem5gIVBOiGCh0uGQ4CEAAYASAAEgJJcfD_BwE&hvadid=243364158616&hvdev=c&hvlocphy=9013300&hvnetw=g&hvpos=1t1&hvqmt=e&hvrand=16879664618112738747&hvtargid=kwd-409605718499&hydadcr=4821_9338491&tag=googhydr-20&ref=pd_sl_4uu654v3t0_e)\n* [Mesh produce bags](https://www.amazon.com/s?k=Mesh+produce+bags&ref=nb_sb_noss)\n* [Beeswax wraps](https://www.amazon.com/s?k=Beeswax+wraps&ref=nb_sb_noss)\n* [Yeti drinkware](https://www.amazon.com/s?k=Yeti+drinkware&ref=nb_sb_noss)\n\n49:24 - Grooming & Wellness\n\n* [Theragun](https://www.theragun.com/)\n* [Foam roller](https://www.amazon.com/AmazonBasics-High-Density-Round-Roller-36-inches/dp/B00XM2MRGI/)\n* [Power Blocks](https://www.amazon.com/Power-GF-SPDBLK24-Adjustable-SpeedBlock-Dumbbells/dp/B000A6T9I8/)\n* [Japanese nail clippers](https://www.amazon.com/SS-107-Stainless-Steel-Toenail-Clipper/dp/B000F37UNM/ref=sr_1_4?crid=2KLN6E7QJE1DT&keywords=seiko+nail+clippers&qid=1575393921&sprefix=saiko+nai%2Caps%2C167&sr=8-4)\n\n## Links\n* [Anker](https://www.amazon.com/stores/page/D24FDA17-DECF-46BB-AF47-AF4647D2B1F8)\n* [Deal Extreme](https://www.dx.com/)\n* [Prismic YouTube Channel](https://www.youtube.com/channel/UCJq6AEgtWeZt7ziQ-fLKOeA)\n\n## Shameless Plugs\n* Scott: [Level Up Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript Course](https://beginnerjavascript.com)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5e2ab36acf164a0efa208a647005b282607dc572b227a1491ccca920a39a9d70', '2019-gift-guide', '/shows/204 - gift guide.md', '2023-10-16 20:07:01.655', '2023-10-27 15:57:50.965', 'TASTY'),
('syntax_podcast_show_00205', 205, 'Hasty Treat - The New MacBook Pro for Web Development', '2019-12-16 14:00:00.785', 'https://traffic.libsyn.com/syntax/Syntax205.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the new 16\" MacBook Pro and how it performs as a web development machine.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:24 - Why did the old ones suck?\n\n4:43 - What did we get and why?\n\n* Wes\n  * 32GB RAM\n  * 2.3GHz 8-core i9\n  * \n  * 1TB SSD\n\n* Scott\n  * 64GB RAM\n  * 2.4GHz 8-core i9\n  * 8gb AMD Radeon Pro 5500M\n  * 2TB SSD\n\n9:40 - Is it still the best?\n\n* The MacBook Pro is the workhorse of developers\n* Keyboard is amazing\n* Screen is even bigger\n* Esc key is back\n* Touch ID is very fast\n* Heat is good\n* Speed is very fast. Great for video editing, recording, etc...\n* Trackpad feels great \n\n15:18 - Still not good:\n\n* Webcam sucks\n* Ports\n\n16:09 - Y NAWTS:\n\n* Why not Windows?\n* Why not Hackintosh?\n* Why not iMac?\n\n## Links\n* [16\" MackBook Pro](https://www.apple.com/macbook-pro-16/)\n* [Surface Book](https://www.microsoft.com/en-us/p/surface-book-2/8mcpzjjcc98c?activetab=pivot%3aoverviewtab)\n* [Alfred](https://www.alfredapp.com/)\n* [CalDigit TS3 Plus Thunderbolt 3 Dock](https://www.amazon.com/CalDigit-TS3-Plus-Thunderbolt-Dock/dp/B07CZPV8DF/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f1385f77a982bfb38d8cba440227a559ada282727bb1069babdcf3ac3dc7e7a5', 'hasty-treat-the-new-macbook-pro-for-web-development', '/shows/205 - macbooks.md', '2023-10-16 20:07:01.704', '2023-10-27 15:57:51.008', 'HASTY'),
('syntax_podcast_show_00206', 206, 'State Machines, CSS and Animations with David K Piano', '2019-12-18 14:00:00.785', 'https://traffic.libsyn.com/syntax/Syntax206.mp3', '\nIn this episode of Syntax, Scott and Wes talk with David K Piano about state machines, CSS, animations and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Guests\n\n* [David K Piano](https://twitter.com/davidkpiano)\n\n## Show Notes\n\n2:30 - Who is David K Piano?\n\n4:00 - Did you have a background in animation prior to web development?\n\n5:45 - How did you build the CSS Responsive House on Codepen?\n\n8:36 - What are state machines?\n\n14:47 - How does it relate to programming?\n\n17:20 - How do you go about changing states?\n\n20:20 - Is this similar to how RxJS works?\n\n21:40 - How would state machine work in CSS?\n\n29:07 - Perspective in CSS\n\n34:47 - How do you like Twitch vs YouTube?\n\n35:48 - How do you add XState to a current project?\n\n41:42 - Visualizing sate machines\n\n46:15 - Do you have a day job as well?\n\n## Links\n* [@davidkpiano](https://twitter.com/davidkpiano)\n* [David\'s Codepen](https://codepen.io/davidkpiano)\n* [CSS Responsive House](https://codepen.io/davidkpiano/pen/xLKBpM)\n* [InVision](https://www.invisionapp.com/)\n* [Framer](https://www.framer.com/)\n* [Figma](https://www.figma.com/)\n* [XState](https://xstate.js.org/docs/)\n* [RxJS](https://rxjs-dev.firebaseapp.com/)\n* [React](https://reactjs.org/)\n* [Apollo](https://www.apollographql.com/)\n* [Vue.js](https://vuejs.org/)\n* [Javascript30](https://javascript30.com/)\n* [Tailwind CSS](https://tailwindcss.com/)\n* [GROQ.dev](https://groq.dev/)\n* [Keyframe.rs](https://keyframe.rs/)\n* [Babel](https://babeljs.io/)\n* [Twitch](https://www.twitch.tv/)\n* [Keyframe.rs Patreon](https://www.patreon.com/keyframers)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* David: [Lynn Fisher](https://lynnandtonic.com/)\n* Scott: [The Big One](https://the-big-one.scpr.org/)\n* Wes: [American Factory](https://www.netflix.com/title/81090071)\n\n## Shameless Plugs\n* David: [XState](https://xstate.js.org/docs/) and [Keyframe.rs](https://keyframe.rs/)\n* Scott: [React and Typescript for Everyone](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8e9d1ddd08c82996c67576f6c141a77fa55e27c01bcb69304565193c3ee79399', 'state-machines-css-and-animations-with-david-k-piano', '/shows/206 - state.md', '2023-10-16 20:07:01.747', '2023-10-27 15:57:51.047', 'TASTY'),
('syntax_podcast_show_00207', 207, 'Hasty Treat - How We Launch Courses', '2019-12-23 14:00:00.835', 'https://traffic.libsyn.com/syntax/Syntax207.mp3', '\nIn this Hasty Treat, Scott and Wes talk about launching courses — a behind-the-scenes look at their platforms, processes, best practices, and what it takes to get a course published. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:13 - Scott\'s process\n\n8:48 - Wes\' process\n\n20:57 - Additional tips\n\n## Links\n* [Beginner Javascript](https://beginnerjavascript.com)\n* [Level Up Tutorials](https://www.leveluptutorials.com/)\n* [Figma](https://www.figma.com/)\n* [Tim Smith](https://ttimsmith.com/)\n* [YouTube](https://youtube.com)\n* [Vimeo](https://vimeo.com/)\n* [HandBrake](https://handbrake.fr/)\n* [Screenflow](https://www.telestream.net/screenflow/)\n* [Backblaze B2](https://www.backblaze.com/b2/cloud-storage.html)\n* [VS Code](https://code.visualstudio.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5f902361c1726fba461cb7c212cf3247079f4826eba57d4f3efd86c93ef98f81', 'hasty-treat-how-we-launch-courses', '/shows/207 - courses.md', '2023-10-16 20:07:01.801', '2023-10-27 15:57:51.168', 'HASTY'),
('syntax_podcast_show_00208', 208, '2019 YEAR END Definitely Not a Clip Show', '2019-12-25 14:00:00.835', 'https://traffic.libsyn.com/syntax/Syntax208.mp3', '\nIn this episode of Syntax, Scott and Wes do a 2019 year in review — the most popular Syntax episodes, what they learned, some personal updates, plans for next year, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n1:40 - Plans for 2020\n\n* Syntax Live March 2019\n* Plans for 2020\n* Twitter has done really well for [@syntaxfm](https://twitter.com/syntaxfm)\n* Community feels great\n\n9:20 - Top 10 Syntax episodes of 2019\n\n* [Syntax162: The Fundamentals - JS](https://syntax.fm/show/162/the-fundamentals-js)\n* [Syntax120: Gatsby vs Next](https://syntax.fm/show/120/gatsby-vs-next)\n* [Syntax158: The Fundamentals - HTML + CSS](https://syntax.fm/show/158/the-fundamentals-html-css)\n* [Syntax126: Bootcamps vs School vs Self-Learning](https://syntax.fm/show/126/bootcamps-vs-school-vs-self-learning)\n* [Syntax138: What\'s New in Web Development](https://syntax.fm/show/138/what-s-new-in-web-development)\n* [Syntax130: The VueJS Show (Scott teaches Wes)](https://syntax.fm/show/130/the-vuejs-show-scott-teaches-wes)\n* [Syntax146: CSS the Cool Parts](https://syntax.fm/show/146/css-the-cool-parts)\n* [Syntax174: How to Build an API](https://syntax.fm/show/174/how-to-build-an-api)\n* [Syntax154: SVGs with Sara Soueidan](https://syntax.fm/show/154/svgs-with-sara-soueidan)\n* [Syntax106: A Look Forward to 2019](https://syntax.fm/show/106/a-look-forward-to-2019)\n\n25:17 - Personal Stuff\n\n* Scott\n  * Brooklyn Tolinksi\n  * 2019 was really tough for me\n  * Level Up courses for 12 months\n  * Huge changes to my production values and office\n  * Huge changes to LUT codebase (React hooks, Typescript, Next.js, Mongoose)\n\n* Wes\n  * New Baby in June / 3 months Paternity Leave\n  * Bought a cottage\n  * Hardest course to make was Beginner JS — it was a slog, hard to stay motivated at times, with 80 hours of recording alone\n  * Course Platform re-write (Next.js)\n\n39:17 - Stuff we learned\n\n* Scott\n  * Better speaker\n  * Lots of TypeScript\n  * Better debugging\n  * Hooks\n  * Svelte\n  * General improvement in JS writing and programming skills\n\n* Wes\n  * Really good at Vanilla.js DOM API\n  * React Hooks\n  * Suspense\n  * Audio Visualization\n  * Shape Detection API - Faces, Barcodes, Text\n  * Headless CMS: Prismic, Sanity, WordPress GraphQL, Keystone.js, Hasura\n  * Very good understanding of the nitty gritty of JS (closures, objects, this, new keyword, classes, etc.)\n\n## Links\n* [Reactathon](https://www.reactathon.com/)\n* [freeCodeCamp Podcast](https://podcast.freecodecamp.org/)\n* [CSS Houdini](https://developer.mozilla.org/en-US/docs/Web/Houdini)\n* [Syntax109: Hasty Treat - CSS Grid Level 2 aka Subgrid](https://syntax.fm/show/109/hasty-treat-css-grid-level-2-aka-subgrid)\n* [Syntax092: React Hooks](https://syntax.fm/show/092/react-hooks)\n* [Dev Mugs](https://shop.devmugs.com/)\n* [TypeScript](https://www.typescriptlang.org/)\n* [Svelte](https://svelte.dev/)\n* [Prismic](https://prismic.io/syntax)\n* [Sanity](https://www.sanity.io/syntax)\n* [WPGraphQL](https://www.wpgraphql.com/)\n* [Keystone.js](https://www.keystonejs.com/)\n* [Hasura](https://hasura.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Dream Podcast](https://www.stitcher.com/podcast/stitcher/the-dream)\n* Wes: [Synology DiskStation DS918+](https://www.amazon.com/Synology-bay-DiskStation-DS918-Diskless/dp/B075N1Z9LT)\n\n## Shameless Plugs\n* Scott: [React & TypeScript For Everyone](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '525ba69f9a9ffb2c0ed67e8ebb2bda4e7cc58f1d17b07774bd8dcf77dfece308', '2019-year-end-definitely-not-a-clip-show', '/shows/208 - year end.md', '2023-10-16 20:07:01.877', '2023-10-27 15:57:51.217', 'TASTY'),
('syntax_podcast_show_00209', 209, 'Hasty Treat - Wes Teaches Scott about Keystone.js', '2019-12-30 14:00:00.995', 'https://traffic.libsyn.com/syntax/Syntax209.mp3', '\nIn this Hasty Treat, Wes teaches Scott about Keystone.js — best practices, things to avoid, why you should check it out, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n3:10 - What is Keystone?\n\n7:38 - How do you handle mutations?\n\n14:26 - What\'s the hosting situation like?\n\n19:34 - Shortcomings\n\n21:40 - Plugins\n\n## Links\n* [KeystoneJS](https://www.keystonejs.com/)\n* [Prisma](https://www.prisma.io/)\n* [Hasura](https://hasura.io/)\n* [Next.js](https://nextjs.org/)\n* [GraphQL](https://graphql.org/)\n* [Stripe API](https://stripe.com/docs/api)\n* [WordPress](https://wordpress.org/)\n* [ThinkMail](https://www.thinkmail.com/)\n* [Drupal](https://www.drupal.org/)\n* [Redux](https://redux.js.org/)\n* [Now](https://zeit.co/home)\n* [MongoDB](https://www.mongodb.com/)\n* [MongoDB Compass](https://www.mongodb.com/products/compass)\n* [pm2](https://pm2.keymetrics.io/)\n* [TypeScript](https://www.typescriptlang.org/)\n* [Apollo Helpers](https://www.keystonejs.com/keystonejs/apollo-helpers/)\n* [GraphCool](https://www.graph.cool/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '094619ccd1b5de0badbd2b9d6e4807806dda72ad527eacb1c22c5dea4c9fd7ba', 'hasty-treat-wes-teaches-scott-about-keystone-js', '/shows/209 - Keystone.md', '2023-10-16 20:07:01.924', '2023-10-27 15:57:51.270', 'HASTY'),
('syntax_podcast_show_00210', 210, 'Potluck - Fonts × Frameworks × Teas × Coding Subscriptions × Client Work × More!', '2020-01-01 14:00:00.995', 'https://traffic.libsyn.com/syntax/Syntax210.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about fonts, frameworks vs custom, drinking tea, learning to code, client work, and more!\n\n## Kyle Prinsloo Freelancing - Sponsor\nKyle Prinsloo teaches you everything you need to know about freelancing, including how to quit your job, earn a side-income and start taking control of your life. Check it out at [studywebdevelopment.com/freelancing](https://studywebdevelopment.com/freelancing). Use the coupon \"SYNTAX\" and get 25%.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:01 - Q: When you run audits like lighthouse on a website, do you run the audit on each page? Or have you found an app or hack to run the audit over the entire site / multiple pages?\n\n5:30 - Q: What makes a font \"good\"? I stumbled upon [haleyfiege.fun/fonts](https://www.haleyfiege.fun/fonts), where she says her first font was not \"good,\" but it looks perfectly usable to me. When you are picking fonts for web apps, how do you judge them? Is it entirely subjective?\n\n9:14 - Q: As a solo founder, speed is essential. What\'s faster, building your own components, using a theme, or using a framework?\n\n12:05 - Q: I’ve never been a tea drinker, but lately I’ve been wanting to start drinking a hot tea in the afternoon (instead of coffee). I know Scott is the Tea Guru, so what would your suggestions be for starting out?\n\n15:30 - Q: Is it worth bundling JavaScript for websites that aren\'t using a framework (i.e. WordPress / CMS websites)? The company I work for uses a large enterprise CMS and our JavaScript is just a minified mash of several different JS files, most of which are several hundred lines of spaghetti code. It would be nice to break up all these files in some sort of modular way, plus have the added benefit of using Babel so we can write modern JS. However, the output of the bundled JS file seems massive. Won\'t that hurt performance and page load?\n\n21:17 - Q: I know both of you put out a ton of content, both together and individually. I’m just curious to hear if you listen to any other podcasts out there in the land, or any other types of content that you consume to hone your skillz to pay the billz. Thanks!\n\n25:14 - Q: What are your thoughts on Blazor? Is it a good move to be an early adopter of a framework like this, or should you focus on the ones that are already in a fully released state like React, Vue etc.?\n\n28:51 - Q: I would like to ask Scott how you make subscriptions in a website? Also, how you give users a lifetime locked yearly subscription?\n\n39:53 - Q: I feel like other developers\' code is always shorter, better structured, and easier to read than mine. Any tips (or resources) on writing clean, \'good\' javascript code (or any other functional programming language)?\n\n44:02 - Q: Both of you have CMS backgrounds, Scott with Drupal and Wes with WordPress. When you moved to freelancing, did you build for clients using a CMS? Or did you create custom admin interfaces for clients to manage their own site? You\'ve mentioned some headless WordPress in the past, but was that the norm?\n\n47:02 - Q: Hey Scott + Wes, you\'re obviously very successful with your course creation careers, but do you miss client work? If people for some reason ever stopped buying your courses, would you go back to client work?\n\n## Links\n* [Lighthouse](https://github.com/GoogleChrome/lighthouse)\n* [Syntax203: Hasty Treat - What Are Github Actions?](https://syntax.fm/show/203/hasty-treat-what-are-github-actions)\n* [Lighthouse Batch NPM Package](https://www.npmjs.com/package/lighthouse-batch)\n* [Lighthouse Action GitHub Action](https://github.com/jakejarvis/lighthouse-action)\n* [Next.js](https://nextjs.org/)\n* [haleyfiege.fun/fonts](https://www.haleyfiege.fun/fonts)\n* [Radnika Next](https://hanken.co/products/radnika-next)\n* [Sipsby](https://www.sipsby.com/)\n* [Babel](https://babeljs.io/)\n* [Shop Talk Show](https://shoptalkshow.com/)\n* [CodePen Radio](https://blog.codepen.io/radio/)\n* [Heist Podcast](https://www.heistpodcast.com/)\n* [Mixergy](https://mixergy.com/)\n* [The Dream](https://podcasts.apple.com/us/podcast/the-dream/id1435743296)\n* [React Podcast](https://reactpodcast.simplecast.fm/)\n* [Indie Hackers](https://www.indiehackers.com/podcast)\n* [Akimbo](https://www.akimbo.link/)\n* [Command Line Heroes](https://www.redhat.com/en/command-line-heroes)\n* [Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor)\n* [Braintree](https://www.braintreepayments.com/)\n* [Syntax055: Hasty Treat - User Role Systems](https://syntax.fm/show/055/hasty-treat-user-role-systems)\n* [Clean Code concepts adapted for JavaScript](https://github.com/ryanmcdermott/clean-code-javascript)\n* [codecademy](https://www.codecademy.com/)\n* [Javascript30](https://javascript30.com/)\n* [CakePHP](https://cakephp.org/)\n* [Drupal](https://www.drupal.org/)\n* [WordPress](https://wordpress.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Aerial America](https://www.smithsonianchannel.com/shows/aerial-america/701)\n* Wes: [Streamer for Chromecast](https://apps.apple.com/us/app/streamer-for-chromecast/id1151425002)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ce84a222ee79038d5b8ca5f36f6837262f2a6a596a20cdf00c9855fd5647c710', 'potluck-fonts-frameworks-teas-coding-subscriptions-client-work-more', '/shows/210 - potluck.md', '2023-10-16 20:07:01.976', '2023-10-27 15:57:51.317', 'TASTY'),
('syntax_podcast_show_00211', 211, 'Hasty Treat - Modules in Node', '2020-01-06 14:00:00.102', 'https://traffic.libsyn.com/syntax/Syntax211.mp3', '\nIn this Hasty Treat, Scott and Wes talk about modules in Node — what are they, how they\'re different from browser modules, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:06 - How were they done before?\n\n5:11 - How do they work?\n\n7:07 - How to use Modules in Node\n\n9:57 - Gotchas\n\n13:18 - What should you use? \n\n## Links\n* [Node](https://nodejs.org/)\n* [Node Modules](https://github.com/nodejs/modules)\n* [Babel](https://babeljs.io/)\n* [ESM](https://www.npmjs.com/package/esm)\n* [Meteor](https://www.meteor.com/)\n* [Keystone](https://www.keystonejs.com/)\n* [MJS](http://clive.tries.fed.wiki/view/michael-jackson-script)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '51cae3737ba7b5f63283efef32d2d52c6fd45cbd483db0beb66227c50b634eec', 'hasty-treat-modules-in-node', '/shows/211 - node modules.md', '2023-10-16 20:07:02.023', '2023-10-27 15:57:51.361', 'HASTY'),
('syntax_podcast_show_00212', 212, 'Pika Pkg', '2020-01-08 14:00:00.511', 'https://traffic.libsyn.com/syntax/Syntax212.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Fred Schott about Pika Pkg, a new kind of package registry for the modern web.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Fred Schott](https://twitter.com/FredKSchott)\n\n## Show Notes\n\n3:24 - What is Pika?\n\n9:40 - What about peer dependencies?\n\n12:53 - What does migration look like? \n\n17:30 - Are these tools making things easier?\n\n21:25 - What is the Pika Registry?\n\n34:48 - What is the Pika editor?\n\n41:13 - Is it open source?\n\n47:30 - What about security?\n\n## Links\n* [Fred Schott](http://fredkschott.com/)\n* [@FredKSchott](https://twitter.com/FredKSchott)\n* [Pika](https://www.pika.dev/)\n* [@pikapkg](https://twitter.com/pikapkg)\n* [Snowpack](https://www.snowpack.dev/)\n* [Pika Builders](https://github.com/pikapkg/builders)\n* [Babel](https://babeljs.io/)\n* [Typescript](https://www.typescriptlang.org/)\n* [Webpack](https://webpack.js.org/)\n* [CSZ](https://github.com/lukejacksonn/csz)\n* [Parcel](https://parceljs.org/)\n* [Deno](https://deno.land/)\n* [VSCode](https://code.visualstudio.com/)\n* [Entropic](https://www.entropic.dev/)\n* [Homebrew](https://brew.sh/)\n* [Plex](https://www.plex.tv/)\n* [Synology NAS](https://www.synology.com/)\n* [Luke Jackson](https://github.com/lukejacksonn)\n* [Toolsday Podcast](https://spec.fm/podcasts/toolsday)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Fred: [Idle Supermarket](https://play.google.com/store/apps/details?id=com.codigames.market.idle.tycoon&hl=en_US)\n* Scott: [Theragun](https://www.theragun.com/)\n* Wes: [Emby](https://emby.media/)\n\n## Shameless Plugs\n* Fred: [Pika](https://www.pika.dev/)\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7d9d90b969f4e8db8c1005ad98d1e4c881a4f916f6c18bd9383dbbc54cabd0b6', 'pika-pkg', '/shows/212 - pika.md', '2023-10-16 20:07:02.067', '2023-10-27 15:57:51.402', 'TASTY'),
('syntax_podcast_show_00213', 213, 'Hasty Treat - A Month On Firefox', '2020-01-13 14:00:00.521', 'https://traffic.libsyn.com/syntax/Syntax213.mp3', '\nIn this Hasty Treat, Scott and Wes talk about a month of using Firefox — what they liked, what they didn\'t, and whether or not they\'ll keep using it.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n3:42 - Dev tools are really good\n\n19:16 - Browsing experience\n\n22:40 - Setup and switchover tips\n\n26:45 - What we didn\'t like\n\n29:57 - Will we stay?\n\n## Links\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/)\n* [Errors in Firefox](https://twitter.com/wesbos/status/1202334015841280003)\n* [Debugging messages in Firefox](https://twitter.com/wesbos/status/1202284172351553537/photo/1)\n* [Harald Kirschner](https://twitter.com/digitarald) \n* [GraphQL](https://graphql.org/)\n* [1Password](https://1password.com/)\n* [WhatsApp](https://www.whatsapp.com/)\n* [Videostream for Chromecast](https://chrome.google.com/webstore/detail/videostream-for-google-ch/cnciopoikihiagdjbjpnocolokfelagl?hl=en)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '88f2cd38fb8a538a44265663dd5120b27d71daf9f5e4cd78b42fc505d3678dda', 'hasty-treat-a-month-on-firefox', '/shows/213 - firefox.md', '2023-10-16 20:07:02.102', '2023-10-27 15:57:51.485', 'HASTY'),
('syntax_podcast_show_00214', 214, '2020 Fitness', '2020-01-15 14:00:00.672', 'https://traffic.libsyn.com/syntax/Syntax214.mp3', '\nIn this episode of Syntax, Scott and Wes talk about fitness — how to stay in shape as a developer, nutrition, goals, and more!\n\n## DevLifts - Sponsor\nRefactor your body with DevLifts. They have a few different programs: 1) [fit.Start](https://devlifts.io/join/fitstart) (normally $19/month) has a few options (lean, bodyweight, and strong). Workouts are delivered via email each month, with access to a Slack community for questions and accountability. 2) [Premium](https://devlifts.io/join/premium) (normally $199/month) is a custom-tailored option, where you get your workouts and nutrition advice after answering a questionnaire. They also check in with you each week via Slack to see how it\'s going and make changes if necessary. Get 50% off fit.Start plans with code **SYNTAX** and 50% off Premium with code **TASTY**.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n4:42 - Past year reflections\n\n* Scott\n  * Tried several different lifting\n  * Breaking didn\'t happen as much, so my cardio took a hit\n  * I finally found a full body plan / bro split that has been very effective\n  * Weight belt has really helped my form\n\n* Wes\n  * Overcommitted in 2019\n  * Feeling great - physically\n  * Gained about 12 pounds past where I want to be - rough year!\n  * Noticeable loss in energy when I don\'t hit the gym\n  * DevLifts since November\n  * Cardio / HIIT up\n\n12:15 - What we\'re doing now\n\n* Scott\n  * 4 day split\n  * Chest/Triceps\n  * Back/biceps\n  * Shoulders\n  * Legs\n  * Abs every day\n\n* Wes\n  * 3 days a week\n  * Set A - Chest and back\n  * Set B - Legs and chest\n  * Set C - Legs and back\n\n* Cardio finisher (BLASTERS)\n* At home helpers\n  * Kettle bells\n  * Foam roller\n\n30:32 - Nutrition\n\n* Scott\n  * Nothing too hardcore, salads for lunch - not religiously though\n  * Good dinners\n  * IF occasionally (e.g. not eating before 10 and not eating after dinner snacks)\n  * Desert items allowed\n\n* Wes\n  * Macro Tracking - still want to enjoy things\n  * Low Carb\n  * High on veggies\n    * Brussel sprouts\n    * Green beans\n    * Salads\n    * Chickpeas\n    * Olives\n  * Still super into fermentation, crunchy + sour + fizzy + spicy\n  * No sweets either\n  * Beer is my downfall\n\n41:04 - Supplements\n\n* Scott\n  * Not doing anything right now other than high quality protein\n  * On meds for nerve damage\n  * Probiotic\n  * Fish Oil\n  * Psylluim husk\n\n* Wes\n  * Megafood Men\'s Once Daily Multivitamin - they are natural and organic, empty stomach\n  * Magnesium\n  * Fish Oil\n  * Lions Mane\n  * Ashwagandha\n  * Shilajit\n\n53:49 - Year Looking Forward\n\n* Scott\n  * New gym remodel going to help life\n  * Yoga once twice a week\n  * Breaking once a week\n  * Lifting every day\n  * Stretching every day\n  * VR Gaming (I burned 400 cals last night playing Super Hot)\n  * Goals to dead lift 350, weighted GHR, continue to progress at current rate\n  * Make cardio a thing\n\n* Wes\n  * Lose a Few Pounds + Energy + consistency\n  * Kettle Bells in office\n  * Consistent Gym before life takes a dive\n  * Lock down macros\n  * Stretches\n  * Less beer\n  * HIIT\n\n## Links\n* [HeavySet App](https://apps.apple.com/us/app/heavyset-gym-workout-log/id1171500310)\n* [Syntax 020: Fitness, Nutrition, and Losing Weight](https://syntax.fm/show/020/fitness-nutrition-and-losing-weight)\n* [Syntax 084: Fitness for Developers](https://syntax.fm/show/084/fitness-for-developers)\n* [Skinny Taste Recipes](https://www.skinnytaste.com/)\n* [Daniel Tiger](https://pbskids.org/daniel/)\n* [MegaFood Men\'s One Daily Multivitamin](https://amzn.to/2uoFRN3)\n* [Examine.com](https://examine.com/)\n* [Caffeine App](https://apps.apple.com/us/app/caffeine-app-track-caffeine/id1045959983)\n* [Superhot VR](https://www.playstation.com/en-us/games/superhot-vr-ps4/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott:\n  * [Fitness Blender](https://www.fitnessblender.com/)\n  * [Bob & Brad YouTube Channel](https://www.youtube.com/user/physicaltherapyvideo)\n  * [Jeremy Ethier YouTube Channel](https://www.youtube.com/channel/UCERm5yFZ1SptUEU4wZ2vJvw)\n\n* Wes: [TechBoss Torch Lighter](https://amzn.to/2QQnBnf)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '0b9ec30baf5e00e662eae6ed9f62a34866eeb03ce4cab8faf407571aaa00f54c', '2020-fitness', '/shows/214 - fitness.md', '2023-10-16 20:07:02.142', '2023-10-27 15:57:51.531', 'TASTY'),
('syntax_podcast_show_00215', 215, 'Hasty Treat - Picking the Stack for uses.tech - Gatsby, React, Context, Styled Components', '2020-01-20 14:00:00.890', 'https://traffic.libsyn.com/syntax/Syntax215.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Wes\' new website uses.tech — the stack he chose for building it, as well as what it does and how to use it!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n2:23 - What is uses.tech?\n\n5:33 - The stack\n\n8:13 - Avatars\n\n10:43 - Filtering\n\n15:51 - Github actions\n\n19:25 - Favicon\n\n21:30 - Search\n\n22:03 - Hosting\n\n## Links\n* [uses.tech](https://uses.tech/)\n* [awesome-uses repo](https://github.com/wesbos/awesome-uses)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [React](https://reactjs.org/)\n* [Gatsby Node API](https://www.gatsbyjs.org/docs/node-apis/)\n* [Clearbit API](https://clearbit.com/)\n* [unavatar](https://unavatar.now.sh/)\n* [Now.sh](https://zeit.co/home)\n* [weserv.nl](https://images.weserv.nl/)\n* [country-emoji](https://github.com/meeDamian/country-emoji)\n* [Andrew Luca](https://github.com/iamandrewluca)\n* [joi](https://github.com/hapijs/joi)\n* [Making setInterval Declarative with React Hooks](https://overreacted.io/making-setinterval-declarative-with-react-hooks/)\n* [Netlify](https://netlify.com/syntax)\n* [Algolia](https://www.algolia.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '48b6257a94047347c1f180907b0ea24206653d00d529a1d24ac44e191f5c540a', 'hasty-treat-picking-the-stack-for-uses-tech-gatsby-react-context-styled-components', '/shows/215 - uses.md', '2023-10-16 20:07:02.179', '2023-10-27 15:57:51.594', 'HASTY'),
('syntax_podcast_show_00216', 216, 'Tech To Watch In 2020', '2020-01-22 14:00:00.890', 'https://traffic.libsyn.com/syntax/Syntax216.mp3', '\nIn this episode of Syntax, Scott and Wes talk about tech to watch in 2020 — things you should keep an eye on and learn this year!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n6:39 - CSS Subgrid\n\n8:10 - CSS Houdini\n\n11:20 - CSS features not supported in older browsers yet\n\n* Scrollsnap - IE 11 and up. Lot\'s of mobile issues.\n* position:sticky - no IE at all\n\n14:24 - NPM tink\n\n* installer-less npm\n* Load packages at runtime into a shared cache across all projects\n* Intelligently download the parts you need\n\n17:25 - Yarn PnP\n\n* Hard links to eliminate package duplication\n* Shared cache across all projects\n\n18:31 - Pika & Snowpack\n\n21:10 - Deno\n\n* New Node?\n\n25:39 - React\n\n* Suspense in more libraries\n* Suspense for Server Rendering\n* Meteor\n  * New ownership. v1.9 just dropped with lots of promise for future growth\n* Svelte 3\n* Vue 3\n* Apollo\n* Next.js\n\n36:37 - Serverless\n\n* Going to get easier\n* Begin.com\n* Next.js / Now Functions\n\n38:14 - Gatsby\n\n* A single useQuery (made possible by suspense)\n\n39:36 - Headless CMS Thunderdome\n\n42:20 - Next Gen Frameworks\n\n* Keystone\n* Strapi\n* Meteor\n* Vulcan.js\n\n43:46 - Cypress\n\n* End to end testing\n* Currently no Firefox support, but hopeful for 2020\n\n44:21 - Modulz\n\n* Exports to JS component\n\n45:00 - Figma\n\n* Was already amazing in 2019\n* Constantly improving and adding new features\n* Can import from Sketch\n\n## Links\n* [Syntax 109: CSS Grid Level 2 aka Subgrid](https://syntax.fm/show/109/hasty-treat-css-grid-level-2-aka-subgrid)\n* [CSS Houdini](https://developer.mozilla.org/en-US/docs/Web/Houdini)\n* [Interactive Introduction to CSS Houdini](https://css-tricks.com/interactive-introduction-to-css-houdini/)\n* [Tweetdeck](https://tweetdeck.twitter.com/)\n* [Next Generation Package Management](https://blog.npmjs.org/post/178027064160/next-generation-package-management)\n* [tink](https://www.npmjs.com/package/tink)\n* [Pika](https://www.pika.dev/)\n* [Yarn PnP](https://next.yarnpkg.com/features/pnp)\n* [Syntax 212: Pika Pkg](https://syntax.fm/show/212/pika-pkg)\n* [Snowpack](https://www.snowpack.dev/)\n* [Entropic](https://www.entropic.dev/)\n* [Deno](https://deno.land/)\n* [Ryan Dahl - 10 Things I regret About Node.js](https://www.youtube.com/watch?v=M3BM9TB-8yA)\n* [https://github.com/denoland/deno](https://github.com/denoland/deno)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Hover](https://www.hover.com/)\n* [Meteor](https://www.meteor.com/)\n* [Meteor roadmap](https://github.com/meteor/meteor/blob/devel/Roadmap.md)\n* [tiny](https://www.tinycapital.com/)\n* [Svelte 3](https://svelte.dev/)\n* [Apollo](https://www.apollographql.com/)\n* [Nextjs](https://nextjs.org/)\n* [Vue](https://vuejs.org/)\n* [Begin](https://begin.com/)\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/?redirect_source=firefox-com)\n* [Keystone](https://www.keystonejs.com/)\n* [Strapi](https://strapi.io/)\n* [Vulcan.js](http://vulcanjs.org/)\n* [Prisma](https://www.prisma.io/)\n* [Hasura](https://hasura.io/)\n* [Syntax 209: Hasty Treat - Wes Teaches Scott about Keystone.js](https://syntax.fm/show/209/hasty-treat-wes-teaches-scott-about-keystone-js)\n* [Cypress](https://www.cypress.io/)\n* [Modulz](https://www.modulz.app/)\n* [Framer](https://www.framer.com/)\n* [Figma](https://www.figma.com/)\n* [Sketch](https://www.sketch.com/)\n* [James Quick YouTube Channel](https://www.youtube.com/channel/UC-T8W79DN6PBnzomelvqJYw)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Govee Thermometer](https://amzn.to/2uQYFVz)\n* Wes: [Rack Mount Power Bar](https://amzn.to/2QR3eHK) \n\n## Shameless Plugs\n* Scott: [Fullstack React and Firebase](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e439745d58c10cf297d92354cdaee251848660d15ef67f50690b7d9e48542827', 'tech-to-watch-in-2020', '/shows/216 - tech.md', '2023-10-16 20:07:02.214', '2023-10-27 15:57:51.676', 'TASTY'),
('syntax_podcast_show_00217', 217, 'Hasty Treat - Building A Community Slack, Discord, Spectrum, Discourse, Forums', '2020-01-27 14:00:00.470', 'https://traffic.libsyn.com/syntax/Syntax217.mp3', '\nIn this Hasty Treat, Scott and Wes talk about community building online — some of the different software techniques and things you can do to either get started with a web community or join one.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n7:16 - Chat options\n\n* Slack\n* Discord\n* [Level Up Tutorials Discord](https://discord.gg/ccMC6kB) \n* Faster communication\n\n9:00 - Forum based\n\n* Indexable\n* Searchable\n* Slower communication\n* Discourse\n* Spectrum\n* Facebook groups\n* Reddit\n* [SyntaxFM Reddit](https://www.reddit.com/r/SyntaxFM/)\n\n27:27 - Commenting systems\n\n* YouTube comments\n* Comments systems in general\n\n## Links\n* [Github](https://github.com/)\n* [Slack](https://slack.com/)\n* [Discord](https://discordapp.com/)\n* [Discourse](https://www.discourse.org/)\n* [Spectrum](https://spectrum.chat/)\n* [Reddit](https://www.reddit.com/)\n* [r/reactjs](https://www.reddit.com/r/reactjs/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '48d82e6a595a7b3cbd0c6f3f904c37031ec10d78293b69d42261afdcf41819c8', 'hasty-treat-building-a-community-slack-discord-spectrum-discourse-forums', '/shows/217 - community.md', '2023-10-16 20:07:02.261', '2023-10-27 15:57:51.727', 'HASTY'),
('syntax_podcast_show_00218', 218, 'Potluck - Dev Culture Fit × Slack Communities × Vanilla JS × Backpacks × Raspberry Pi × More!', '2020-01-29 14:00:00.470', 'https://traffic.libsyn.com/syntax/Syntax218.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about dev culture fit, Slack communities, vanilla Javascript, backpacks, Raspberry Pi, beards, and more! \n\n## .TECH Domains - Sponsor\nIf you need eyes on your project, you\'ll need a domain, and .TECH is perfect for representing your brand. Find out if your .TECH domain is available at [go.tech/syntax2020](https://go.tech/syntax2020). Use the coupon code Syntax2020 and get 90% off 1- 5- and 10-year domain names.\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n3:10 - Q: Recently I took a job as a lead dev doing the exact kind of work I\'ve always wanted to do. But after the first week, I really hate it. I feel like I don\'t fit in and I\'m seeing many red flags. There are no processes and there doesn\'t seem to be any real excitement around what we are building. What should I do? Do I suck it up for a while? Or do I start looking for something else, potentially taking a pay cut (and moving back into doing web dev as opposed to building apps) to work at another creative agency with people who are more my jam?\n\n10:32 - Does Syntax have a Discord or Slack community channel to collaborate on topics?\n\n12:00 - What is one thing that *really* annoys you about Javascript? I\'m curious if you could change one thing about the language itself, what would it be?\n\n15:08 - Have you tried Fauna DB?\n\n19:13 - What are your thoughts on including tutorial projects in a portfolio? (For example, putting the Sick Fits site from Wes\' Advanced React course in a portfolio.) I\'m relatively new to React and have a couple of my own projects, but a bunch of projects from following a course.\n\n23:58 - A site you\'re maintaining is hacked, how do you handle fixing it?\n\n30:28 - My bookmarks are overwhelming! I just started learning web dev and even though I sort my bookmarks into folders, I end up with so much that I don’t even know how to use them. What do you guys do for managing bookmarks on browsers?\n\n34:15 - How would you recommend integrating React and other modern JS frameworks into (more or less) \"static\" or \"brochure\" websites? Say for instance I have a banking website that has mostly static content, but also has complicated JS pieces such as calculators, location finders and sign-up forms? I currently reach for jQuery & jQuery plugins for these pieces of functionality, but React and Vue sound like they could also help solve these one-off pieces of functionality. Most tutorials and examples are based on creating apps from the ground up, but what if you only want to sprinkle these frameworks in and only use them where JS is necessary? How might the both of you solve for these scenarios?\n\n38:00 - I was wondering whether you could share which backpack, or bag do you use for carrying your laptops? I\'m looking for something that would be useful for carrying my 16\" Macbook Pro, but also could hold some other stuff like groceries, clothes, or other various things that one may want to put there.\n\n41:50 - Do you write out a vanilla `fetch()` in your components that need it, or do you use a fetch \"wrapper\" written by yourself or someone else? If so, what does it look like?\n\n46:16 - Have you ever done any automation projects using a Raspberry Pi? I am trying my hand at remote access to the solar power setup at our \'bach\' (pronounced \'batch\') here in New Zealand, which is the same thing as a \'cottage\' in Canada. Finding it hard to find good resources for this online as most get really technical really fast. My idea is to take the RS485 modbus data and just send it up to a DB every 5 minutes or so. \n\n51:38 - What do Wes and Scott think about beards and have you ever thought about growing one?\n\n## Links\n* [Syntax 215: Hasty Treat - Picking the Stack for uses.tech - Gatsby, React, Context, Styled Components](https://syntax.fm/show/215/hasty-treat-picking-the-stack-for-uses-tech-gatsby-react-context-styled-components)\n* [r/SyntaxFM/](https://www.reddit.com/r/SyntaxFM/)\n* [Fauna](https://fauna.com/)\n* [Hasura](https://hasura.io/)\n* [neo4j](https://neo4j.com/)\n* [Wes\' Advanced React Course](https://advancedreact.com/)\n* [Pocket](https://getpocket.com/)\n* [Full Stack Radio 132: Caleb Porzio - Just Enough JavaScript with Alpine.js](http://www.fullstackradio.com/132)\n* [Peak Design Everyday Bag](https://amzn.to/2trxQa8)\n* [Raspberry Pi](https://www.raspberrypi.org/)\n* [Extreme ironing](https://en.wikipedia.org/wiki/Extreme_ironing)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Shogun Wheel Yoga Wheel](https://amzn.to/37cWPMT)\n* Wes: [Velcro Cable Ties](https://amzn.to/2REGVEi)\n\n## Shameless Plugs\n* Scott: [How To Make a GraphQL Server](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '588dbd55b22570e4bbfef1f0bd046f8015e81ba60e94a7080b31cffed308c9d5', 'potluck-dev-culture-fit-slack-communities-vanilla-js-backpacks-raspberry-pi-more', '/shows/218 - potluck.md', '2023-10-16 20:07:02.306', '2023-10-27 15:57:51.787', 'TASTY'),
('syntax_podcast_show_00219', 219, 'Hasty Treat - Non-Glamorous Skills You Should Have', '2020-02-03 14:00:00.816', 'https://traffic.libsyn.com/syntax/Syntax219.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the non-glamorous skills that will improve your life as a developer!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n3:13 - Why it\'s needed\n\n* Make you a better dev\n* Make big tasks easier\n\n7:00 - Why we don\'t do it\n\n* Because it\'s hard\n* It\'s boring - sometimes\n* It\'s not our focus\n\n7:24 - Good command line skills\n\n* Get around file system\n* Copy, move, delete things\n\n8:58 - Keyboard skills\n\n* Jump by word/line/BOL/EOL\n* Learn 1 new shortcut per week\n* Custom keybindings for common tasks\n\n14:22 - Communication and interpersonal skills\n\n* Check out [Syntax 125: Hasty Treat - Communication Skillz](https://syntax.fm/show/125/hasty-treat-communication-skillz)\n\n14:41 - Time management\n\n* Focus apps to help\n* How long will something take?\n* Revisit past projects when they are done and see how long it took\n\n16:36 - Good file hygiene \n\n* Good folder structure\n* Delete old cruft\n* Clear your recycle\n* Desktop and downloads are off-limits\n* Create template structures or tools for commonly used structures\n\n## Links\n* [Wes\' Command Line Power User Course](https://commandlinepoweruser.com/)\n* [Synology](https://www.synology.com/)\n* [VSCode](https://marketplace.visualstudio.com/)\n* [React PropTypes Generate](https://marketplace.visualstudio.com/items?itemName=suming.react-proptypes-generate)\n* [Syntax 125: Hasty Treat - Communication Skillz](https://syntax.fm/show/125/hasty-treat-communication-skillz)\n* [CleanMyMac](https://macpaw.com/cleanmymac)\n* [DaisyDisk](https://daisydiskapp.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f1eeaa9607e1ae2b6af7cd149774c5792ae8b6373705c83b1f18df430a46e364', 'hasty-treat-non-glamorous-skills-you-should-have', '/shows/219 - skills.md', '2023-10-16 20:07:02.343', '2023-10-27 15:57:51.834', 'HASTY'),
('syntax_podcast_show_00220', 220, 'The Synology Show - Backups and Home Server', '2020-02-05 14:00:00.816', 'https://traffic.libsyn.com/syntax/Syntax220.mp3', '\nIn this episode of Syntax, Scott and Wes talk about running backups and a home server — Synology setups, apps, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:03 - What is it?\n\n* A little headless computer\n\n5:07 - Drives\n\n* WD Red or Seagate Ironwolf — They are loud, you can put SSDs in them, but it\'s $$\n\n6:25 - RAID\n\n11:17 - Power\n\n* Backup \n* Time Machine over the network\n* You can upgrade the memory\n* SSDs\n\n22:40 - Backing up your Backups\n\n* Mirror folders to Backblaze B2\n* Slow, but worth it\n\n30:53 - Apps\n\n* Plex + Emby\n* Storage Analyzer\n* Docker - anything really\n* Node js ;)\n* Security cameras\n* Pi-hole or custom DNS server\n* Moments\n* Drive\n\n## Links\n* [Screenflow](https://www.telestream.net/screenflow/)\n* [Synology](https://www.synology.com/en-us)\n* [DS918+](https://amzn.to/30WJaag)\n* [DS219+](https://amzn.to/36xMQRc)\n* [WD Red Drives](https://amzn.to/2GtWd9W) \n* [Seagate Iron Wolf](https://amzn.to/36yho56) \n* [Govee Thermometer](https://amzn.to/2uQYFVz)\n* [Now](https://zeit.co/)\n* [Squizzy](https://www.sanity.io/blog/introducing-squizzy-our-totally-serverless-kahoot-clone-powered-by-sanity-io)\n* [Backblaze B2](https://www.backblaze.com/b2/)\n* [Plex](https://www.plex.tv/)\n* [Emby](https://emby.media/)\n* [Storage Analyzer](https://www.synology.com/en-global/knowledgebase/DSM/help/StorageAnalyzer/StorageAnalyzer_desc)\n* [DaisyDisk](https://daisydiskapp.com/)\n* [Docker](https://www.docker.com/)\n* [Node.js](https://nodejs.org/)\n* [Raspberry Pi](https://www.raspberrypi.org/)\n* [Dokku](http://dokku.viewdocs.io/dokku/)\n* [Synology vs Blue Iris](https://www.reddit.com/r/homedefense/comments/9qwkbr/opinion_on_synology_vs_blue_iris/)\n* [Moments app](https://www.synology.com/en-us/dsm/feature/moments)\n* [Pi-hole](https://pi-hole.net/)\n* [Discourse](https://www.discourse.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Lululemon Men\'s Jogger](https://shop.lululemon.com/p/gift-ideas/Abc-Jogger-Skinny/_/prod9640028?color=32476)\n* Wes: [DS918+](https://amzn.to/30WJaag)\n\n## Shameless Plugs\n* Scott: [How to Build a GraphQL API](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'bcee3b96e02bfb57dd5ea28d358503fc467a1932d2f83c1174c1491f23644db5', 'the-synology-show-backups-and-home-server', '/shows/220 - synology.md', '2023-10-16 20:07:02.393', '2023-10-27 15:57:51.881', 'TASTY'),
('syntax_podcast_show_00221', 221, 'Hasty Treat - The Power of Hobbies', '2020-02-10 14:00:00.789', 'https://traffic.libsyn.com/syntax/Syntax221.mp3', '\nIn this Hasty Treat, Scott and Wes talk about hobbies — how they can improve your life and make you a better developer, as well as the hobbies they enjoy.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:19 - What are our hobbies?\n\n* Wes: Focus on one thing, learn it, move along\n  * Kombucha, Fermentation and Curing Projects\n  * Bike flipping\n  * Kids ride on repairs + hacks\n  * ATV fixing\n  * ICE to Battery conversion\n\n* Scott: \n  * Dance - 15+ years\n  * Weightlifting / fitness\n  * Video games\n  * Watching hockey\n  * Design\n  * Computing / coding\n  * Snowboarding\n  * Kung fu movies\n\n9:00 - Why are they good?\n\n  * Fuel your coding project\n  * Maybe could even become your key to a job you love\n  * They keep your mind sharp\n  * Good for downtime\n  * Good for mental health and mood\n    * Can be meditative\n    * Be cognizant of what they do to your mental state\n  * Promotes creativity and critical thinking\n  * Fun man\n\n17:54 - How do you find a hobby?\n\n* Wes\n  * I always need an end game\n  * I want to grow hot peppers\n  * I want a wicked ATV for cheap\n  * I think batteries are fascinating but I need something real to do\n\n* Scott - I start with the fascination\n  * I think dancing is cool, but I could never learn\n  * I think _____ is cool, but I don\'t know where to start\n\n* Deep dark YouTube holes\n  * YouTube has an endless selection of educational content\n* Facebooks groups or forums\n* Meetups / volunteering\n  * Introverts will have a hard time with this, push yourself\n\n22:50 - What is your hobby?\n\n* [Tweet us @syntaxfm](https://twitter.com/SyntaxFM)\n* [SyntaxFM Reddit](https://www.reddit.com/r/SyntaxFM/)\n\n## Links\n* [Oculus Quest](https://www.oculus.com/quest/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a490fb7e13f1fe1b2ced34031047dd97b3eacdcc1a84e0ab4fdab8b4acc5a47c', 'hasty-treat-the-power-of-hobbies', '/shows/221 - hobbies.md', '2023-10-16 20:07:02.435', '2023-10-27 15:57:51.925', 'HASTY'),
('syntax_podcast_show_00222', 222, 'Are Web Dev GUIs Going to Replace Us?', '2020-02-12 14:00:00.789', 'https://traffic.libsyn.com/syntax/Syntax222.mp3', '\nIn this episode of Syntax, Scott and Wes talk about web dev GUIs — what are they, are they going to replace developers, are they good or bad, and more!\n\n## Hasura - Sponsor\nHasura is an open source real-time GraphQL engine. It connects to your databases & microservices and instantly gives you a production-ready GraphQL API. Check it out at [Hasura.io](https://hasura.io/).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n1:30 - What is \"codeless\"?\n\n* The codeless movement is coming in with a force. Are they just selling something? Or is it a real concern? \n* All types of jobs are being replaced by computers\n  * Truckers\n  * Cashiers\n  * Lawn mowers\n  * Doctors\n  * Why not web developers?\n\n7:22 - First experience building sites with a GUI?\n\n* [Dreamweaver](https://www.adobe.com/products/dreamweaver.html)\n\n10:18 - Entire website builders:\n\n* [Wix](https://www.wix.com/)\n* [Squarespace](https://www.squarespace.com/)\n* [Webflow](https://webflow.com/)\n* [Modulz](https://www.modulz.app/)\n* [Grid.io](https://thegrid.io/)\n* Wordpress Builders\n\n13:17 - When are GUIs useful?\n\n* Brochure site\n* Basic e-commerce \n\n20:26 - Is a GUI/Codeless always better?\n\n* It depends what you\'re capable of doing\n\n25:21 - Levels of hell GUI assistance in builders\n\n* CMS - Just modifying content and basic markup\n* Access to code, drag blocks into place\n* No or minimal access to code\n* No modification outside of options\n\n31:36 - Are there GUIs for making applications?\n\n* Native Mobile\n* [Zapier](https://zapier.com/)\n\n36:54 - Are jobs at risk?\n\n* Yes\n  * I think a lot of WordPress tinkering has already been replaced\n  * The guy who knows what buttons to push is at risk?\n  * Webmaster jobs where the roll was just occasionally updating HTML and text\n\n* No\n  * Government\n  * Educational institutions\n  * Major corporations that can\'t have their content stored via a service\n\n39:55 - Our favorite GUIs to help development\n\n* Scott:\n  * [Netlify](https://www.netlify.com/)\n  * [Heroku](https://www.heroku.com/)\n  * [Studio 3T](https://studio3t.com/)\n  * [VS Code](https://code.visualstudio.com/)\n\n* Wes:\n  * Sketch CSS Export\n  * [Digital Ocean](https://www.digitalocean.com/)\n  * [Cyberduck](https://cyberduck.io/)\n  * [Transmit](https://panic.com/transmit/)\n  * [ZSH](https://ohmyz.sh/)\n  * [VS Code](https://code.visualstudio.com/)\n\n## Links\n* [Roomba\'s first autonomous lawnmower](https://www.theverge.com/2019/8/30/20839810/irobot-terra-autonomous-lawnmower-roomba-robot-fcc-beta-release-date-2020)\n* [Notepad++](https://notepad-plus-plus.org/)\n* [Geocities](https://en.wikipedia.org/wiki/Yahoo!_GeoCities)\n* [Angelfire](https://en.wikipedia.org/wiki/Angelfire)\n* [Sketch](https://www.sketch.com/)\n* [Figma](https://www.figma.com/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Excel](https://products.office.com/en-us/excel)\n* [Meteor](https://www.meteor.com/)\n* [Recurly](https://recurly.com/)\n* [Gumroad](https://gumroad.com/)\n* [Begin.com](https://begin.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Baron of Botox](https://podcasts.apple.com/us/podcast/the-baron-of-botox/id1493450409)\n* Wes: [Owlet Smart Sock](https://www.amazon.com/Owlet-Baby-Monitor-Infants-Ultimate/dp/B06ZZXYD6S)\n\n## Shameless Plugs\n* Scott: [How To Build A GraphQL API](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5c49bf4e29aea876d196c8de3c12a8393fdd7dbddc66d18db4f951556c77307c', 'are-web-dev-guis-going-to-replace-us', '/shows/222 - GUIs.md', '2023-10-16 20:07:02.478', '2023-10-27 15:57:51.969', 'TASTY'),
('syntax_podcast_show_00223', 223, 'Hasty Treat - Get Movin\' With Framer Motion', '2020-02-17 14:00:00.347', 'https://traffic.libsyn.com/syntax/Syntax223.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Framer Motion — why it is so cool, and how it can improve animations in your projects.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n4:53 - The 411\n\n* Previous knowns as Pop Motion Pose\n* Animation library with focus on ease of use\n* Utilizes both spring and duration based animations\n\n7:19 - Pose\n\n* Pose was previously more pose based - aka you made scenes and toggled between them\n* This still exists within Motion as variants, but isn\'t the main way\n\n8:06 - The New New\n\n* motion.div\n  * animate prop is basically a live value for the animation\n  * initial for initial state\n  * exit for animating out with use of animatePresence\n* Hard stuff made easy\n  * drag prop\n* Full control over properties like duration and easing\n* Orchestration features, this then that\n* Variants\n  * Multiple scenes allow you to orchestrate many animations with a single state change\n* Handles hover and tap easily\n* Scroll values\n* SVG path animations\n\n19:45 - Final Thoughts\n\n* Framer Motion is easier\n* React Spring is much smaller\n* React Spring makes very complex animation possible\n\n## Links\n* [Framer Motion](https://www.framer.com/motion/)\n* [React Spring](https://www.react-spring.io/)\n* [Framer Motion Examples](https://www.framer.com/api/motion/examples/)\n* [Framer X](https://www.framer.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3cea815b7a4b5da9d5f675c091b8b0e3f36e3bf3a9dc53ad41c5b24cba936117', 'hasty-treat-get-movin-with-framer-motion', '/shows/223 - framer.md', '2023-10-16 20:07:02.523', '2023-10-27 15:57:52.029', 'HASTY'),
('syntax_podcast_show_00224', 224, 'Serverless / Cloud Functions - Part 1', '2020-02-19 14:00:00.347', 'https://traffic.libsyn.com/syntax/Syntax224.mp3', '\nIn this episode of Syntax, Scott and Wes talk about serverless and cloud providers - the benefits, limitations, providers and more!\n\n## .TECH Domains - Sponsor\nIf you need eyes on your project, you\'ll need a domain, and .TECH is perfect for representing your brand. Find out if your .TECH domain is available at [go.tech/syntax2020](https://go.tech/syntax2020). Use the coupon code Syntax2020 and get 90% off 1- 5- and 10-year domain names.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n4:05 - What is Serverless?\n\n* URL driven\n* Startup/shut down (Heroku works this way)\n* Digital Ocean droplet works differently\n\n8:15 - What are the benefits?\n\n* Scale up specific functions rather than everything - aka potentially cheaper\n* Security - your singular server instance being hacked is not a possibility\n* Less knowledge overhead required\n  * You don\'t need to manage your own server\n  * Empowers front-end devs to do more\n* Faster deploys\n  * Only re-deploy the code that changed\n\n17:05 - What can you host on Serverless?\n\n- Static Files - SPA (React)\n- Single functions\n- It can be in JS, Python, GO, PHP\n\n18:07 - What can\'t you host on Serverless?\n\n* Entire applications\n* Large apps have slow coldstarts\n* 500mb limit \n\n23:40 - Raw Providers\n\n* Google Cloud\n* Azure\n* AWS Lambda \n* SAP\n* Red Hat\n* IBM Cloud Functions\n* Cloudflare Workers \n* Kind of cool because they work like service workers where you can intercept any HTTP request\n\n27:33 - Easy Providers + Frameworks\n\n* Begin + Arc.codes\n* Zeit Now + Next.js\n* Anything + Serverless \n* Netlify\n* AWS Amplify\n* Apex Up - TJ Holowaychuk\n* Open Faas + Digital Ocean\n\n## Links\n* [Heroku](https://www.heroku.com/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Meteor Galaxy](https://www.meteor.com/hosting)\n* [Codepen Radio: Preprocessors and Lambda](https://blog.codepen.io/2017/10/03/145-preprocessors-lambda/) \n* [Zeit Now](https://zeit.co/home)\n* [Wes\' tweet about serverless](https://twitter.com/maxsteenbergen/status/1226994154510725120)\n* [@maxsteenbergen](https://twitter.com/maxsteenbergen)\n* [uses.tech](https://uses.tech/)\n* [Google Cloud](https://cloud.google.com/gcp/)\n* [Azure](https://azure.microsoft.com/)\n* [AWS Lambda](https://aws.amazon.com/lambda/)\n* [SAP](https://www.sap.com/index.html)\n* [Red Hat](https://www.redhat.com/)\n* [IBM Cloud Functions](https://cloud.ibm.com/functions/)\n* [Cloudflare Workers](https://workers.cloudflare.com/)\n* [Begin](https://begin.com/)\n* [Arc.codes](https://arc.codes/)\n* [Severless](https://serverless.com/)\n* [Netlify](https://www.netlify.com/)\n* [AWS Amplify](https://aws.amazon.com/amplify/)\n* [Apex Up](https://apex.sh/docs/up/)\n* [Open Faas](https://www.openfaas.com/)\n* [@tjholowaychuk](https://twitter.com/tjholowaychuk)\n* [Scott tries Begin.com](https://www.youtube.com/watch?v=dpHizW9Ojsg)\n* [SyntaxFM Reddit](https://www.reddit.com/r/SyntaxFM/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Matt McMuscles YouTube Channel](https://www.youtube.com/channel/UCiP_FwGyJQ_6P8k5ON5mncQ)\n* Wes: [Modern Vintage Gamer](https://www.youtube.com/channel/UCjFaPUcJU1vwk193mnW_w1w)\n\n## Shameless Plugs\n* Scott: [Scott\'s YouTube Channel](https://www.youtube.com/user/LevelUpTuts/videos)\n* Wes: [Beginner Javascript Course](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '40ab279f936e509c84a4de02f8011b084397976f1045b9bc07fed1033a3079c7', 'serverless-cloud-functions-part-1', '/shows/224 - serverless.md', '2023-10-16 20:07:02.564', '2023-10-27 15:57:52.082', 'TASTY'),
('syntax_podcast_show_00225', 225, 'Hasty Treat - What makes a server fast?', '2020-02-24 14:00:00.129', 'https://traffic.libsyn.com/syntax/Syntax225.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to make servers fast!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n3:58 - Ram / Memory\n\n* Things like variables, functions, callstacks, application cache, sessions are all stored in memory\n* Large processes can eat up lots of memory\n* Reading 1,000,000 lines of a CSV\n* npm installing\n* Swap Memory\n* If your node application is limited by memory, it will crash or wait longer for memory to be freed up (garbage collection)\n* Garbage collection can take up CPU resourced\n* High-performance databases\n\n7:52 - CPU\n\n* The processor on your server - the brains of the computer\n* A task - like 1 + 1, or function handleClick(), takes CPU time - the faster the processor, and the more cores it has, the faster it can think and perform these tasks\n* A faster CPU means your node app will start more quickly\n\n9:26 - GPU\n\n* Most servers don\'t have a GPU\n* GPUs are not only good for graphics, but they are great at solving complex tasks\n* Bitcoin mining is fast on a GPU\n* Machine Learning\n\n11:47 - Disk Space\n\n* SSD vs HDD\n* The files have to be read from the hard drive and served up to the web server - the hard drive speed determines how fast they can be read, and how fast they can be written\n* SSD is more expensive but makes for a much faster application\n* HDD is cheaper and is better for storing larger files that aren\'t as time-sensitive\n* An SSD will mean your node app will start faster and serve up files more quickly\n\n## Links\n* [Atlas](https://www.mongodb.com/cloud/atlas)\n* [Digital Ocean](https://www.digitalocean.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e9d689e5a57bb40dbcc9f914b4b01d43d1eff35f71ffa6c10596429e1f8d4e97', 'hasty-treat-what-makes-a-server-fast', '/shows/225 - servers.md', '2023-10-16 20:07:02.627', '2023-10-27 15:57:52.131', 'HASTY'),
('syntax_podcast_show_00226', 226, 'Potluck - Next vs Gatsby × Headless CMS × Vue.js × Is Ruby on Rails still good? × More!', '2020-02-26 14:00:00.129', 'https://traffic.libsyn.com/syntax/Syntax226.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about Gastby vs everything, Next, Vue, Rails, working with agencies, CSS, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Kyle Prinsloo Freelancing - Sponsor\nKyle Prinsloo teaches you everything you need to know about freelancing, including how to quit your job, earn a side-income and start taking control of your life. Check it out at [studywebdevelopment.com/freelancing](https://studywebdevelopment.com/freelancing). Use the coupon \"SYNTAX\" and get 25%.\n\n## Show Notes\n\n1:39 - This may be a crazy question but I need to build a similar system to Level Up Tutorials where people can access content based on a monthly subscription. Any recommendations where to start with either Next.js or Gastby.js? How do I check to see if a person is up-to-date with payment?\n\n4:14 - What\'s your favorite new tab page?\n\n6:19: CSS vs SCSS vs Styled Components? When you are developing a React or Next.js application which styling method do you guys use and why? Which one is \"best practice\", or a more efficient way of going about it?\n\n11:14 - What do you think of lit-html?\n\n15:25 - I\'m relatively new to React, and primarily learning the create-react-app way. When do you go for the create-react-app approach when building an application, and when do you customize the config? I\'m uncertain when it\'s time to escape the \'create-react-app\' approach. Also, when escaping it, which main configurations are you grabbing?\n\n18:19 - Is there a reason hasty treat intros are 2.5x the length of normal episodes? Now that Overcast has intro skipping it’d be nice if the intros were uniform in length.\n\n21:23 - I see Kyle Matthews coming out with a lot of input on how Gatsby can be used for web applications as well. After listening to several of your podcasts, where you talk about Gatsby, it doesn\'t seem like you agree, and would go for Next.js instead. In your opinion is the development at Gatsby really heading in the direction of SSG and web application?\n\n27:17 - I\'ve hopped on the Vue train from jQuery land, and am loving both Nuxt and Gridsome. However, I keep hearing all these good things about Gatsby. Would you guys say that it is worth it to learn Gatsby (and the whole react ecosystem for that matter) over Gridsome? This is mostly for small-medium-ish side-project web sites that connect to a headless CMS.\n\n30:04 - What are your thoughts on CSS pre-processors nowadays? With all the advance and new features from CSS, do you guys really think that it is still worthy to use it those?\n\n32:11 - Scott, can you talk a bit about why you decided to switch back to Meteor after putting in all the effort to convert LUT to Next.js? I am about to start a new fullstack project and was considering Next until I heard you switched back. Maybe I should consider Meteor instead?\n\n40:21 - I’ve recently started an internship at one of my favorite tech companies where I’m using EmberJS and Ruby on Rails. I love the team I’m on (the people are so nice) but I’m not super passionate about the tech stack. I’d much rather be using something like React and NodeJS/Express in my day-to-day coding. Do you think it’s worth staying in a position (if I were to try and get a full-time gig in this role) if you don’t like the tech stack, but really like the people?\n\n40:51 - I\'m thinking of doing a bootcamp that teaches Ruby on Rails for backend. I hear a lot that Ruby is a dying language, but at the same time, I know it\'s used for a lot of big-timers, such as Airbnb and Shopify. Could you please explain the relevance that Ruby/Ruby on Rails will have in 2020 forward, as well as if it\'s worth learning for newer web developers at this point?\n\n45:15 - What is the deal with CMSs/headless CMSs? I hear you guys talk about them all the time (Sanity, Keystone, Prisma?) but I\'m not sure what they are good for. To me, they just seem like a UI to my database, but isn\'t that what my application is? It just seems like it would be easier to have my frontend talk to my backend talk to my database instead of learning how each CMS wants things to be done and programming for that? Am I missing the point?\n\n48:11 - What does Svelte needs for each of you to use it instead of React in personal and future developments?\n\n50:38 - I freelance on the side as well as have a 9-5. The other dev I work with mentioned he\'d help if I ever needed/wanted help on a client project. What are your thoughts on doing freelance work with someone who you also work with at your job?\n\n52:01 - My team is currently in the design phase for a rewrite of our biggest product. We are switching from perl backend (y i k e s) to node (yay) but for some reason, our tech lead decided on hapi for the node framework. I have spent a little time with hapi and it seems cool but I am not sure about its longevity when compared to more established frameworks like express. How do you feel about hapi and should I push for a different framework?\n\n54:29 - I\'m a lead dev that recently joined an agency for the first time. What 🔥tips do you have for livin\' and devin\' in that agency life? Especially around time management, time estimation and dealing with clients.\n\n## Links\n* [Stripe](https://stripe.com/)\n* [Braintree](https://www.braintreepayments.com/)\n* [Recurly](https://recurly.com/)\n* [Firefox](https://www.mozilla.org/en-US/firefox/)\n* [lit-html](https://lit-html.polymer-project.org/)\n* [Overcast](https://overcast.fm/)\n* [@kylemathews](https://twitter.com/kylemathews)\n* [Gatsby Build](https://www.gatsbyjs.org/docs/overview-of-the-gatsby-build-process/)\n* [Vue.js](https://vuejs.org/)\n* [Nuxt.js](https://nuxtjs.org/)\n* [Gridsome](https://gridsome.org/)\n* [postcss-preset-env](https://preset-env.cssdb.org/)\n* [Meteor](https://www.meteor.com/)\n* [Ember](https://emberjs.com/)\n* [Ruby on Rails](https://rubyonrails.org/)\n* [Personal Capital](https://www.personalcapital.com/)\n* [Airbnb](https://www.airbnb.com/)\n* [Shopify](https://www.shopify.com/)\n* [Missive](https://missiveapp.com/)\n* [Sanity](https://www.sanity.io/syntax)\n* [Keystone](https://www.keystonejs.com/)\n* [Prisma](https://www.prisma.io/)\n* [Svelte](https://svelte.dev/)\n* [hapi](https://hapi.dev/)\n* [koa](https://koajs.com/)\n* [Express](https://expressjs.com/)\n* [Matt Stauffer\'s Blog](https://mattstauffer.com/blog/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Caffeine by Michael Pollan](https://www.audible.com/pd/Caffeine-Audiobook/B083MVZ91Y)\n* Wes: [Matt Stauffer - Setting Up Your Webcam, Lights, and Audio for Remote Work, Podcasting, Videos, and Streaming](https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/) \n\n## Shameless Plugs\n* Scott: [New course on Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'feb69898abed44b08d9119d1e741ab76104417f6342c84d08ade812330286d04', 'potluck-next-vs-gatsby-headless-cms-vue-js-is-ruby-on-rails-still-good-more', '/shows/226 - potluck.md', '2023-10-16 20:07:02.664', '2023-10-27 15:57:52.197', 'TASTY'),
('syntax_podcast_show_00227', 227, 'Hasty Treat - The Status of Element Queries / Container Queries', '2020-03-02 14:00:00.634', 'https://traffic.libsyn.com/syntax/Syntax227.mp3', '\nIn this Hasty Treat, Scott and Wes talk about container queries, what they are and how you can use them.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n4:30 - The General Idea\n\n* [Toward Responsive Elements — Brian Kardell](https://bkardell.com/blog/TowardResponsive.html?1)\n\n6:20 - Problems\n\n* It\'s not as easy as, \"how do we write them\"\n* Some of the requirements may need a fundamental change to browser engines\n  * May be very impractical and take a long time\n\n> \"Did you know, for example, that there are multiple many year long efforts with huge investments underway already aimed at unlocking many new things in CSS? There are - and I don\'t mean Houdini!\" ~ Brian Kardell\n\n8:56 - What\'s been happening?\n\n* Lots of conversations\n* Dead ends\n\n> \"How do we make this into more solvable problems?\" and \"How do we actually make some progress, mitigate risk - take a step, and and actually get something to developers?\" ~ Brian Kardell\n\n* \'containment\' and ResizeObserver,\n  * [Implemented in all browsers in about 2 years](https://webkit.org/blog/9997/resizeobserver-in-webkit/)\n\n12:00 - Progress\n\n* Lot\'s of discussion\n  * Goog, Moz, Apple, smart people\n* Not there yet\n* Big ideas that could go somewhere\n\n`.foo {\n  display: grid;\n  grid-template-columns: switch(\n    (available-inline-size > 1024px) 1fr 4fr 1fr;\n    (available-inline-size > 400px) 2fr 1fr;\n    (available-inline-size > 100px) 1fr;\n    default 1fr;\n    );\n  }`\n\n> \"A whole lot of the problems with existing ideas is that they heave to loop back through (expensive) phases potentially several times and make it (seemingly) impossible to keep CSS rendering in the same frame.\"  ~ Brian Kardell\n\n* Or a system based on resizeObserver\n\n> \"In the coming months I hope to continue to think about, explore this space and continue discussions with others. I would love to publish some research and maybe some new (functional) experiments with JS that aim to be \'closer\' to a path that might be paveable.\" ~ Brian Kardell\n\n* [https://github.com/ZeeCoder/container-query](https://github.com/ZeeCoder/container-query)\n* [https://github.com/FreddyFY/styled-container-query](https://github.com/FreddyFY/styled-container-query)\n\n## Links\n* [uses.tech](https://uses.tech/)\n* [Ian Kilpatrick](https://www.linkedin.com/in/ian-kilpatrick-9b68a373/)\n* [Jared Palmer\'s tsdx](https://github.com/jaredpalmer/tsdx)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '12eb6b8c8289bba2347eca9aacd5ba66983cd962d74629e760d8dc312864ed8a', 'hasty-treat-the-status-of-element-queries-container-queries', '/shows/227 - queries.md', '2023-10-16 20:07:02.709', '2023-10-27 15:57:52.253', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00228', 228, 'More on Severless - Databases × Files × Secrets × Auth × More!', '2020-03-04 14:00:00.634', 'https://traffic.libsyn.com/syntax/Syntax228.mp3', '\nIn this episode of Syntax, Scott and Wes do a part 2 about Serverless — databases, files, secrets, auth, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:47 - Wes tried Cloudflare Workers\n\n* Also this is so cool:\n\n> Hey Wes, just listened to the latest Syntax episode on the serverless setup. Not sure if it\'s an episode idea or not, but if you wanna do a bit of a dive on Cloudflare\'s service workers, I\'m currently leading an \"invisible infrastructure migration\" right now from a legacy WordPress setup to a new Storyblok/Netlify setup. We\'re using Cloudflare\'s service workers to basically \"stitch\" the headers/menus/footers from the old WordPress site into our new Netlify pages, but serving the page back as if it was part of the normal domain. This means we can migrate from the old to the new slowly without massively disrupting SEO, doing a lengthy/costly rebuild, etc.\n\n* A word on Digital Ocean\n* Kubernetes + FAAS allows you to scale up/down\n\n13:54 - Secret management\n\n* Some have a great UI\n* Some have a CLI\n* Some only have production\n* Some have dev/staging/prod\n\n16:24 - Vendor lock-in\n\n* Two kinds of vendor lock-in\n  * Lock into a low-level provider (like AWS, or MongoDB)\n  * Lock into a framework\n* Questions to ask:\n  * Can I go, take my app as-is, and host it on another provider?\n  * Can I refactor the config and run my code as-is?\n  * Do I need to refactor my code for it to run on other platforms?\n* Next.js will only run on Now\n* There is a community package\n* Begin all runs on Arc.codes\n* Firebase is locked in?\n\n25:12 - Sharing dependencies\n\n* Each function will have its own package.json, which can be a pain\n* Publish utils a private module\n* AWS Layers\n* Import/export\n* Bundle and tree shake\n\n30:26 - Local development\n\n* Now dev\n* NPX sandbox\n* Wrangler for Cloudflare workers\n\n36:40 - Existing applications\n\n* Difficult to move with many routes, but easy to move a Graphql API that has one single route\n* Maybe do piece by piece instead of all at once\n* Begin has http express method\n\n45:21 - Data\n\n* Any DB you want\n* Dynamo DB integrated into many\n* Firebase\n* KV Storage for Cloudflare workers\n* [Fauna](https://fauna.com/)\n\n48:14 - File storage\n\n* Generally files go in the associated file place like Amazon S3, Backblaze B2, Cloudinary\n* Many also have this integrated as well\n\n52:18 - Auth\n\n* Serverless is ephemeral and stateless\n* JWT likely as sessions will work, but doesn\'t really make sense\n\n## Links\n* [Cloudflare Workers](https://workers.cloudflare.com/)\n* [Akamai](https://www.akamai.com/)\n* [MongoDB Stitch](https://www.mongodb.com/cloud/stitch)\n* [Hitler uses Kubernetes](http://youtube.com/watch?v=9wvEwPLcLcA)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Kubernetes](https://kubernetes.io/)\n* [Firebase](https://firebase.google.com/)\n* [Google Cloud](https://cloud.google.com/)\n* [Architect](https://arc.codes/)\n* [Next.js](https://nextjs.org/)\n* [Now.sh](https://zeit.co/home)\n* [Begin](https://begin.com/)\n* [Netlify](https://www.netlify.com/)\n* [Now](https://github.com/zeit/now)\n* [Wrangler](https://github.com/cloudflare/wrangler)\n* [Apollo Federation](https://www.apollographql.com/docs/apollo-server/federation/introduction/)\n* [Monaco](https://microsoft.github.io/monaco-editor/)\n* [Postman](https://www.postman.com/)\n* [Codesandbox](https://codesandbox.io/)\n* [DynamoDB](https://aws.amazon.com/dynamodb/)\n* [Amazon S3](https://aws.amazon.com/s3/)\n* [Backblaze B2](https://www.backblaze.com/b2/cloud-storage.html)\n* [Cloudinary](https://cloudinary.com/)\n* [Fauna](https://fauna.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Power of Bad by John Tierney](https://www.amazon.com/Power-Bad-Negativity-Effect-Rules-ebook/dp/B07Q3NHPGZ)\n* Wes: [Socket Organizer](https://amzn.to/2VhBbUt)\n\n## Shameless Plugs\n* Scott: [Animating React with Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4baae8bef40418a9ac3a16b594919dc1a2f20362275092119941c2cd7fab303d', 'more-on-severless-databases-files-secrets-auth-more', '/shows/228 - serverless.md', '2023-10-16 20:07:02.757', '2023-10-27 15:57:52.301', 'TASTY'),
('syntax_podcast_show_00229', 229, 'Hasty Treat - Scott asks Wes about Cloudflare', '2020-03-09 13:00:00.768', 'https://traffic.libsyn.com/syntax/Syntax229.mp3', '\nIn this Hasty Treat, Scott asks Wes about Cloudflare — which services he uses, which ones he doesn\'t, why, and more! \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:45 - What do you personally use Cloudflare for?\n\n* DNS provider\n* Domain registration at cost\n* Caching\n* DDoS protection\n* Hiding server IP address\n* Free HTTPS\n* Firewall rules\n* Scrape shield\n* Lightweight stats\n* Serverless functions\n* DNS\n* Cloudflare Warp\n\n16:40 - What are you not using?\n\n* KV storage\n* Video streaming\n* Deep customization around blocking/errors\n\n19:49 - How do you set it up?\n\n## Links\n* [Cloudflare](https://www.cloudflare.com/)\n* [Beginner Javascript](https://beginnerjavascript.com/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [DNS Simple](https://dnsimple.com/)\n* [Let\'s Encrypt](https://letsencrypt.org/)\n* [Syntax Ep 224: Serverless / Cloud Functions - Part 1](https://syntax.fm/show/224/serverless-cloud-functions-part-1)\n* [Begin](https://begin.com/)\n* [7-Eleven hit \"Dance The Slurp\"](https://www.youtube.com/watch?v=px1Tn0LTqcs)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ad15edc945115ec7455c69c6abb0c4abc5d201ce15e6d8de2ddd8b7bbc672cc0', 'hasty-treat-scott-asks-wes-about-cloudflare', '/shows/229 - cloudflare.md', '2023-10-16 20:07:02.792', '2023-10-27 15:57:52.351', 'HASTY'),
('syntax_podcast_show_00230', 230, 'Soft Skills Tips', '2020-03-11 13:00:00.768', 'https://traffic.libsyn.com/syntax/Syntax230.mp3', '\nIn this episode of Syntax, Scott and Wes talk about soft skills tips — productivity, planning, communication, and more. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n2:20 - Productivity\n\n* Make a todo list and prioritize\n* Get ideas out of your brain\n* Use a tool like Notion as a second brain\n* Batch related things together\n* Recharge when you need it\n* Have a system and stick to it\n\n16:34 - Finishing projects\n\n* Start\n* Do a little every day\n* Go all-in for a few days\n* Clearly identify what needs to be done (Github issues, todo app)\n\n23:30 - Planning tips\n\n* I use Mind Node\n* Whimsical\n* Write it down when you have an idea\n* Put everything in a calendar\n\n30:24 - Communication\n\n* Be honest and upfront with deadlines\n* Give yourself padding — many people are overly optimistic\n* Don\'t let people expect communication from you, at all, or at all times\n* Assume good intentions\n* Don\'t be a jerk to clients or coworkers\n\n40:28 - Skill and career advancement\n\n* FDD — fun driven development\n* Share what you learn\n* Don\'t let other\'s progress get you down — there is always someone smarter doing crazier stuff\n* Solve your own problems\n* Apply and interview for anything that\'s interesting\n* Track your progress\n* I want to ___, I wish I could ____, You are lucky that you get to _____\n* Just start! Seriously. Plan on doing something.\n\n## Links\n* [Todoist](https://todoist.com/)\n* [Things](https://culturedcode.com/things/)\n* [Notion](https://www.notion.so/)\n* [Evernote](https://evernote.com/)\n* [Notable](https://notable.md/)\n* [Beginner Javascript](https://beginnerjavascript.com/)\n* [Level 1 Electron](https://www.leveluptutorials.com/tutorials/level-1-electron)\n* [uses.tech](https://uses.tech/)\n* [Rework](https://basecamp.com/books/rework)\n* [Jason Freid](https://twitter.com/jasonfried)\n* [David Heinemeier Hanson](https://twitter.com/dhh)\n* [It Doesn\'t Have To Be Crazy At Work](https://basecamp.com/books/calm)\n* [Mind Node](https://mindnode.com/)\n* [Whimsical](https://whimsical.com/)\n* [Javascript30](https://javascript30.com/)\n* [CodeSandbox](https://codesandbox.io/)\n* [Streaks](https://streaksapp.com/)\n* [Xerf Xpec YouTube Channel](https://www.youtube.com/channel/UCkfmbKrdAH3_NHkbAZhWqIw/videos)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Katsumi Horii Project - Sky Cruisin\' Album](https://www.youtube.com/watch?v=ypdnSS0La7s)\n* Wes: [AmpliFi ALIEN Router](https://store.amplifi.com/products/amplifi-alien)\n\n## Shameless Plugs\n* Scott: [Animating React with Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '9878be683349e4712acdfeea79321cce9f1efe50be65967976af5a2fe3179c64', 'soft-skills-tips', '/shows/230 - soft skills.md', '2023-10-16 20:07:02.849', '2023-10-27 15:57:52.397', 'TASTY'),
('syntax_podcast_show_00231', 231, 'Hasty Treat - Hiring an Assistant', '2020-03-16 13:00:00.920', 'https://traffic.libsyn.com/syntax/Syntax231.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to hire an assistant — something that can make your life a lot easier as a solo developer.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n2:34 - Finding someone\n\n* Virtual Assistant\n  * Offset timezones can be handy\n  * Flexible is great - two hours here, two hours there\n\n5:55 - Types of tasks to delegate\n\n* Support\n* Email replies\n* Mail and shipping items\n* Invoicing\n* Expenses\n* Research - find emails for X\n* Blog post edits\n* Sponsorships\n\n14:50 - Standard Operating Procedures\n\n* If something happens more than once, make an SOP\n* Common questions that come up\n\n18:07 - Tools\n\n* 1Password\n* Missive\n* Custom backend tools for:\n  * Managing courses\n  * Issuing refunds\n* Chromebook\n* Google Docs\n\n21:52 - Hours\n\n## Links\n* [1Password](https://1password.com/)\n* [Missive](https://missiveapp.com/)\n* [Notion](https://www.notion.so/)\n* [Freshbooks](https://freshbooks.com/syntax)\n* [Syntax Ep 184: Desktop & Mobile Apps With a Single Codebase](https://syntax.fm/show/184/desktop-and-mobile-apps-with-a-single-codebase)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '42acd71cbccb1f6a006514b8e605eedd223d85f60e34a1b8d7b1c2658af32be6', 'hasty-treat-hiring-an-assistant', '/shows/231 - hiring.md', '2023-10-16 20:07:02.895', '2023-10-27 15:57:52.449', 'HASTY'),
('syntax_podcast_show_00232', 232, 'React Hooks - 1 Year Later', '2020-03-18 13:00:00.920', 'https://traffic.libsyn.com/syntax/Syntax232.mp3', '\nIn this episode of Syntax, Scott and Wes talk about React Hooks, one year later — what\'s changed, how to use them, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n1:26 - Hooks vs Render Props\n* Hooks win hands down\n\n3:40 - useState\n\n9:18 - useReducer\n\n12:12 - useRef\n\n15:30 - useContext\n\n21:55 - useEffect\n\n29:35 -  Custom hooks to hide and encapsulate functionality\n\n35:06 - How we use them\n\n* Scott\n  * Index that imports all custom hooks\n  * Babel alias to hooks folder\n  * Import { useHook } from \'hooks\'\n  * useContextState\n\n* Wes\n  * useResizeObserver\n  * useForm\n  * useGridRower\n  * useWickedFavIcon\n\n45:54 - Which built-in hooks do we not use?\n\n* useImperativeHandle\n* useCallback\n* useDebugValue\n\n48:22 - Are hooks harder to learn?\n\n* Wes: Yes — but easier to maintain after the fact\n* Scott: Yes — harder conceptually and initially but easier after concepts are understood\n\n50:29 - Are classes going away?\n\n* Wes: I say yes\n* Scott: Double yes\n\n## Links\n* [Syntax Ep 092: React Hooks](https://syntax.fm/show/092/react-hooks)\n* [Making setInterval Declarative with React Hooks - Dan Abramov](https://overreacted.io/making-setinterval-declarative-with-react-hooks/)\n* [babel-plugin-module-resolver](https://github.com/tleunen/babel-plugin-module-resolver)\n* [awesome-uses](https://github.com/wesbos/awesome-uses/blob/master/src/components/FavIcon.js)\n* [uses.tech](https://uses.tech/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Ars Technica War Stories](https://www.youtube.com/playlist?list=PLKBPwuu3eCYkScmqpD9xE7UZsszweVO0n)\n* Wes: [Mpow CH1 Kids Headphones](https://www.amazon.com/Mpow-Headphones-Protection-Function-Tangle-Free/dp/B078YQW26K/)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '82cf2c4abab913c06e6a4baba002fb09d94f0cc327b989c211da91902e934bff', 'react-hooks-1-year-later', '/shows/232 - react hooks.md', '2023-10-16 20:07:02.944', '2023-10-27 15:57:52.504', 'TASTY'),
('syntax_podcast_show_00233', 233, 'Hasty Treat - Purchasing Power Parity', '2020-03-23 13:00:00.415', 'https://traffic.libsyn.com/syntax/Syntax233.mp3', '\nIn this Hasty Treat, Scott and Wes talk about purchasing power parity — what it is, and how Wes has implemented it on his course website.  \n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n2:36 - What is it?\n\n5:43 - How do you calculate it? \n\n* Big Mac Index\n* [Purchasing Power Parity](https://github.com/rwieruch/purchasing-power-parity)\n* [Spotify Pricing Index](https://mts.io/projects/spotify-pricing/)\n* [Glassdoor](https://www.glassdoor.com/)\n* Just ask developers what they make\n\n8:04 - How do you implement it?\n\n* Cloudflare headers\n* Dealing with VPNs\n* Does it work with sales?\n\n16:09 - Is it client-side only? \n\n## Links\n* [country-emoji npm package](https://www.npmjs.com/package/country-emoji)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '92e90e2a555a7d024af1e19ece3f0482aee78dc29d6f24bf3cd84c209365c5bc', 'hasty-treat-purchasing-power-parity', '/shows/233 - purchasing.md', '2023-10-16 20:07:02.987', '2023-10-27 15:57:52.546', 'HASTY'),
('syntax_podcast_show_00234', 234, 'Potluck - Bootcamps × Career Change × Figma × Gatsby × AMP × Mongoose × More!', '2020-03-25 13:00:00.415', 'https://traffic.libsyn.com/syntax/Syntax234.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about bootcamps, Figma, Gatsby, AMP, Mongoose, imposter syndrome, and more!\n\n## .TECH Domains - Sponsor\nIf you need eyes on your project, you\'ll need a domain, and .TECH is perfect for representing your brand. Find out if your .TECH domain is available at [go.tech/syntax2020](https://go.tech/syntax2020). Use the coupon code Syntax2020 and get 90% off 1- 5- and 10-year domain names.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n3:02 - Q. Scott, you talk a lot about your workflow with Figma. As a designer going to programming it sounds like the workflow was natural to you. As a programmer trying to move into design, I have no idea how to get started. Could you explain your workflow on starting a new project in Figma through starting to implement in VSCode?\n\n5:36 - The dreaded monitor question, flat or curved?\n\n8:34 - I am relatively new to web development and have learned HTML, CSS, Node and Mongo. I planned on taking your GatsbyJS e-commerce course, however, I have no experience in React whatsoever. Should I learn React first?\n\n12:35 - What is AMP and should I be using it?\n\n16:07 - What are the advantages and disadvantages of building a web app using a framework such as Blitz.js?\n\n21:46 - Would you ever consider moving from Mongo / Mongoose?\n\n24:47 - I am very new to the dev world. Went to college 15 years ago for Comp Sci, but dropped out halfway through to become an electrician. (Wasn\'t sure if I could sit in an office all day.) Long story, but I\'m wanting to change my career path and I\'m very interested in software development. I\'ve heard about Modern Labor\'s bootcamp and I\'m intrigued. I\'d like to know what your take is on their program.\n\n33:15 - Loved your recent episode(s) on serverless functions. I\'ve implemented a few myself, but I always come back to the same question: how exactly do I secure these endpoints? Because you are charged for compute time, and those endpoints are publicly available, couldn\'t anyone just send requests to them and run up your bill?\n\n36:53 - I\'ve decided to make a career out of coding and programming and I\'m an absolute beginner starting out in HTML and CSS. It might be a weird question but how many/what percentage elements and declaratives do I need to memorize? It\'s not that the info is necessarily difficult to parse, it\'s the amount of tags that I\'m bombarding my brain with is muddying my progress. I\'m more of a theory-driven learner so it\'s not the biggest obstacle in the world but I\'m starting to see the breadth of this endeavor and I\'m not sure how to focus my mental acuity.\n\n40:39 - Do you have a standard folder structure that you follow for placing \"utility\" function JS files? Is there an \"industry standard\"? I\'ve just been using `utils` or `utilities` inside `src`, but curious if there is a more common way.\n\n44:12 - Is figuring out new techs/modules/plugins/whatever really as easy as reading the docs for most people? A common response to \"what\'s a good way to learn x\" seems to be \"the docs are good\". I then open the docs and am absolutely clueless. Are these people just giving bad advice, or do the docs actually give most people enough to go on? For example, I tried to implement username login with Passport using their docs, and a lot seemed to be left out, implying you\'re supposed to just already know all this other stuff. It\'s a bit demoralizing to feel like I can\'t figure out much of anything on my own, and I\'ve been doing web dev for a few years now, albeit not professionally, but I have done some big projects that are used regularly. So anyway, just wondering what your take on this common advice is, your experience with being able to figure out things on your own without needing an hour-long tutorial, and so on. I know you\'re both tutorial makers, but I don\'t get the impression that you two have to take a course to understand something new.\n\n48:19 - Do you have any tips for getting over \"code shyness\" or \"imposter syndrome\"? I find myself struggling with this issue from time to time and was curious to know your suggestions for dealing with it.\n\n53:36 - If I rename my GitHub repo, will all the links that are in the wild still work. For instance will github.com/webruin map to github.com/newname?	\n\n## Links\n* [Cloudflare](https://www.cloudflare.com/)\n* [AMP](https://amp.dev/)\n* [Blitz.js](https://blitzjs.com/)\n* [Brandon Blitz](https://twitter.com/flybayer)\n* [Meteor](https://www.meteor.com/)\n* [Mongoose](https://mongoosejs.com/)\n* [DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html)\n* [uses.tech](https://uses.tech/)\n* [Course Report - Modern Labor](https://www.coursereport.com/schools/modern-labor)\n* [Passport.js](http://www.passportjs.org/)\n* [Syntax 058: Advice For Beginners - Tech Skills, Applying for Jobs, Focus, Imposter Syndrome + More](https://syntax.fm/show/058/advice-for-beginners-tech-skills-applying-for-jobs-focus-imposter-syndrome-more)\n* [Syntax 015: Advice for New Developers, Imposter Syndrome and Interviewing at Google](https://syntax.fm/show/015/advice-for-new-developers-imposter-syndrome-and-interviewing-at-google)\n* [Syntax 075: Hasty Treat - Feedback and Criticism](https://syntax.fm/show/075/hasty-treat-feedback-and-criticism)\n* [Brendan Eich](https://twitter.com/BrendanEich)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Stronger by Science Podcast](https://www.strongerbyscience.com/podcast/)\n* Wes: [iStat Menus](https://apps.apple.com/us/app/istat-menus/id1319778037)\n\n## Shameless Plugs\n* Scott: [Animating React with Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'fc513c8ba17830e25a5bca7fa36c6368673edd048ac6082016d2668fd870b6b2', 'potluck-bootcamps-career-change-figma-gatsby-amp-mongoose-more', '/shows/234 - potluck.md', '2023-10-16 20:07:03.107', '2023-10-27 15:57:52.594', 'TASTY'),
('syntax_podcast_show_00235', 235, 'Hasty Treat - Get Gud at Passwords & Password Management', '2020-03-30 13:00:00.493', 'https://traffic.libsyn.com/syntax/Syntax235.mp3', '\nIn this Hasty Treat, Scott and Wes talk about security and how to get good at passwords.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n7:35 - Setting passwords\n\n* Absolutely 100% must be unique for EVERY SINGLE WEBSITE\n\n9:38 - Generated passwords\n\n* Make a sentence: lovetoEatPizza\n* Decide on casing\n* Make your own algorithm:\n  * 3rd letter replaced by 4th letter of domain\n  * number on end is double the number of chars in the domain\n\n13:52 - Use a password manager\n\n* Have the password manager generate the password for you\n* Get it on your phone\n* You must go 100% all in\n* [1password](https://1password.com/)\n* [Dashlane](https://www.dashlane.com/)\n* [Bitwarden](https://bitwarden.com/) - open source version of Dashlane\n* [LastPass](https://www.lastpass.com/) - awful \n\n17:45 - Password manager tips\n\n* Turn off your browser password manager - this is a crutch and causes them to become out of sync and this is why I see people annoyed by them\n* For the love of god, make you master password something you can remember\n* You can add family members to your plan that will approve it\n* 1password\'s Watchtower feature\n\n20:50 - Biometrics\n\n* Face ID, Touch ID\n* Blood\n\n21:37 - 2FA codes\n\n* [Authy](https://authy.com/)\n* [Google Authenticator](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en_US)\n* [Authenticator +](https://www.microsoft.com/en-us/p/authenticator/9nblggh08h54)\n* 1Password for 2FA codes\n* Backup codes\n* You can also backup the QR code\n\n29:55 - Text message codes\n\n* Don\'t\n* My sister got sim jacked, PayPal drained, phone number was gone for 7 days\n* Lock transfer - ask your phone provider - mine has voice recognition\n\n## Links\n* [Have I been pwned?](https://haveibeenpwned.com/)\n* [Shop Talk Show: One on One with a Hacker](https://shoptalkshow.com/special-one-one-hacker/)\n* [Mailchimp](https://mailchimp.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6d79ab918a74bb310b3072401883726983f0dd4d56ee1e572491e334337717b3', 'hasty-treat-get-gud-at-passwords-and-password-management', '/shows/235 - passwords.md', '2023-10-16 20:07:03.161', '2023-10-27 15:57:52.638', 'HASTY'),
('syntax_podcast_show_00236', 236, 'Mental Health and Dev ft Dr. Courtney Tolinski - Depression, Anxiety, Imposter Syndrome, Focus, Motivation, Burnout', '2020-04-01 13:00:00.493', 'https://traffic.libsyn.com/syntax/Syntax236.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Dr. Courtney Tolinski PhD about mental health and web development.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n\n* [Courtney Tolinski](https://twitter.com/DrTolinski)\n\n## Show Notes\n\n3:20 - Depression\n\n* Honestly just explaining depression would be great. Too many times I’ve heard “but you don’t look sad”\n* As someone who struggles with depression, what are some things I can do to rekindle and things I enjoy like developing and hobbies? This would greatly benefit me for learning more dev related things outside of doing it for work.\n* My depression is due to some other cause in personal life - two years into it.\n* Coding has bought me little life back as this is only thing I have to do.\n* What can we do from an outsider\'s view to someone who might have depression? \n\n12:23 - Anxiety\n\n* Imposter Syndrome x 1000\n* How to deal with increased anxiety during these times?\n* How to avoid anxiety and feel useless when working products that you don\'t appeal to you?\n* Wanted to ask the Dr about why do I feel that I have to work on 1000 projects that seem to never finish? 😣This is inducing a lot of anxiety sometimes.\n* I am on depression medication. Sometimes, I feel scared that I am so slow and don\'t feel accomplished enough like people working at FANG, etc, being a SE.\n* How to deal with the anxiety caused by today’s events around the world and the need to isolate yourself from society even though we crave human interaction?\n\n29:12 - Focus and job performance\n\n* How to keep motivation and focus? I find myself enjoying work but having a hard time focusing on it. All the \"distraction-free\" apps don\'t work because I can turn them off and I feel they literally have no power over me.\n* Hardcore mode\n* Pomodoro technique\n\n35:10 - Motivation and remote work\n\n* Bore-out\n* Burnout\n* How do you deal with loss of focus and happiness in web development (especially on remote jobs)?\n* Working for yourself at home, you don\'t get a chance to bounce ideas and encouragement from others in an office. What\'re some good ways to compensate for that to ensure you maintain a positive mindset?\n* Work on new things\n* Find ways to try new things\n\n40:38 - Stress\n\n* Correctly identifying source of (negative?) stress. Not lashing out when under stress.\n* How to avoid eating to cope with stress?\n\n## Links\n* [Eat That Frog! - Brian Tracy](https://www.amazon.com/gp/product/162656941X/)\n* [Pomodoro technique](https://en.wikipedia.org/wiki/Pomodoro_Technique)\n* [Healthline](https://www.healthline.com/)\n* [How to Talk so Little Kids Will Listen: A Survival Guide to Life with Children Ages 2-7](https://amzn.to/39gWV6i)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Courtney: \n  * [Animal Crossing: New Horizons](https://www.nintendo.com/games/detail/animal-crossing-new-horizons-switch/)\n  * [How to Talk So Kids Will Listen & Listen So Kids Will Talk](https://amzn.to/39cX1Mb)\n  * [The Whole-Brain Child: 12 Revolutionary Strategies to Nurture Your Child\'s Developing Mind](https://amzn.to/2xheeH6)\n* Scott: [The Engineering Mindset YouTube Channel](https://www.youtube.com/channel/UCk0fGHsCEzGig-rSzkfCjMw)\n* Wes: [Toca Boca](https://tocaboca.com/)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Eveything is 50% off! Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b0ada1223f180b6cdabeedca48ac299729c2683129ec69b285f66e44c964e301', 'mental-health-and-dev-ft-dr-courtney-tolinski-depression-anxiety-imposter-syndrome-focus-motivation-burnout', '/shows/236 - mental.md', '2023-10-16 20:07:03.203', '2023-10-27 15:57:52.688', 'TASTY'),
('syntax_podcast_show_00237', 237, 'Hasty Treat - Abstraction', '2020-04-06 13:00:00.870', 'https://traffic.libsyn.com/syntax/Syntax237.mp3', '\nIn this Hasty Treat, Scott and Wes talk about abstraction in general as well as javascript programming.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n1:48 - What the heck is abstraction?\n\n* I like to think of it as sweeping under the rug\n* Vue and React devs should be very familiar with the concept\n\n4:44 - When to abstract\n\n* When things are getting too heavy\n* Personal preference \n* Some people have an arbitrary line limit\n\n7:25 - When not to abstract\n\n* When savings are minimal \n* When it just adds a pointless layer \n\n9:40 - Personal code abstractions vs public\n\n* My personal focus is on API simplicity and baked-in smart defaults \n* More specific \n* Public APIs need to be more flexible or at least for some components\n\n## Links\n* [React](https://reactjs.org/)\n* [Vue](https://vuejs.org/)\n* [Svelte](https://svelte.dev/)\n* [Max MSP](https://www.instructables.com/id/Intro-to-MaxMSP/)\n* [chakra UI](https://chakra-ui.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a49fc752011e53f1f5688e534eab9de02b30ff490f9d79b50683dff136c42b49', 'hasty-treat-abstraction', '/shows/237 - abstraction.md', '2023-10-16 20:07:03.412', '2023-10-27 15:57:52.848', 'HASTY'),
('syntax_podcast_show_00238', 238, 'Working From Home During the Pandemic (With or Without Kids)', '2020-04-08 13:00:00.065', 'https://traffic.libsyn.com/syntax/Syntax238.mp3', '\nIn this episode of Syntax, Scott and Wes talk about working from home. How do we do our best in these unprecedented times? Here are our tips for working from home and staying productive and sane! \n\n## .TECH Domains - Sponsor\nIf you need eyes on your project, you\'ll need a domain, and .TECH is perfect for representing your brand. Find out if your .TECH domain is available at [go.tech/syntax2020](https://go.tech/syntax2020). Use the coupon code Syntax2020 and get 90% off 1- 5- and 10-year domain names.\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n2:39 - Your space\n\n* You need a table\n  * Card table or dining room table\n* Keyboard + monitor\n* Don\'t work from your bed or couch\n* Headphones can get you in the zone (noise-canceling ftw)\n\n16:36 - Routine\n\n* Shower, shave, makeup\n* Clear start and stop times - even if that means it\'s 5am to 11am because you are splitting\n* Taking breaks is important\n\n25:24 - Focus\n\n* TODO list - write a list of what you hope to do at the start of the day, check things off, feel good about yourself\n* Eat That Frog - for the 100th time\n* Don\'t watch or check the news during work hours\n* Block the terms related to the pandemic or politics on social media - you don\'t need that info there\n  * DOOM Scrolling\n\n30:11 - Self care\n\n* Video games or relaxing things post work\n* Exercise\n  * Kettlebells, spin bike, bodyweight workouts\n    * Stronger by Science has a great episode about this - [https://www.strongerbyscience.com/podcast-episode-38/](https://www.strongerbyscience.com/podcast-episode-38/)\n* Zoom Happy Hours\n* Don\'t overly rely on substances to get you through\n* Get your VD (vitamin D)\n* Don\'t stress out yourself at night - don\'t look up news before bed\n\n43:20 - Managing kids and sharing time with your partner\n\n* First of all, props to you all - this is really hard, mentally and physically\n* This will vary greatly depending on your SO\'s job, number and age of kids\n* Our SOs have work and jobs of their own\n* Watching young kids is hard work\n* Give each other 30 min brakes\n* Kids need routine - put something in place\n* Some times Uncle Mickey needs to take over, and that\'s ok\n* Communication is key\n* Schedule Examples:\n  * 6-12 and 12-6\n  * 4 hours each\n  * 2 hour trade off\n  * Focus time (calls, deep work) and half-focus time (emails, etc.)\n* Have empathy with everyone: co-workers, SO, kids\n* Check in on your peeps\n* Keep an eye on your co-workers, even the extroverted ones\n\n## Links\n* [Super Strong Neodymium Magnets](https://www.amazon.com/Neodymium-Double-sided-Adhesive-Permanent-Scientific/dp/B076Z81891)\n* [Elgato Cam Link 4k](https://www.amazon.com/Elgato-Cam-Link-Broadcast-Camcorder/dp/B07K3FN5MR/)\n* [Keychron K1](https://amzn.to/2UzdvZN)\n* [Eat That Frog!](https://www.amazon.com/gp/product/162656941X)\n* [uses.tech](https://uses.tech/)\n* [Animal Crossing](https://animal-crossing.com/)\n* [Love Is Blind](https://www.netflix.com/title/80996601)\n* [Powerblocks](https://www.amazon.com/POWERBLOCK-50-Set-Pair-10-50/dp/B07BDRZF9D/)\n* [Peloton](https://www.onepeloton.com/)\n* [Strange Brew](https://www.imdb.com/title/tt0086373/?ref_=fn_al_tt_1)\n* [Wes\' Twitter thread - How are you managing child care?](https://twitter.com/wesbos/status/1242065134593474561)\n* [Syntax Twitter thread - Send us your work from home tips!](https://twitter.com/syntaxfm/status/1237863437721452546)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Oculus Quest](https://amzn.to/39mq5RL)\n* Wes: [Slumberpod](https://www.slumberpod.com/) \n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - 50% off!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '021fb4a32eacf26cb966b5fa1c1185a805524feb328dc75bf4837e1b080852b9', 'working-from-home-during-the-pandemic-with-or-without-kids', '/shows/238 - wfh.md', '2023-10-16 20:07:03.493', '2023-10-27 15:57:52.903', 'TASTY'),
('syntax_podcast_show_00239', 239, 'Hasty Treat - 5 Things That Make Your Site Slow', '2020-04-13 13:00:00.171', 'https://traffic.libsyn.com/syntax/Syntax239.mp3', '\nIn this Hasty Treat, Scott and Wes talk about five things that could potentially be making your website slow.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n3:00 - TTFB \n\n* Slow DNS lookup\n* Server on the other side of the world\n* Slow server processing\n* Network speed back to the browser\n\n6:21 - Requests\n\n* Too many requests\n* Too large\n* Waterfalling your requests\n\n9:44 - Assets are too large\n\n* Images are the biggest bloat in a site\n* Compress and optimize via build tool or ImageOptim\n* Make smaller\n* Picture fill for mobile\n\n14:48 - Lazy loading\n\n* lazy=\"true\"\n* Intersection observer\n* Preload slider images two ahead\n\n18:03 - Not using a CDN\n\n* What is a CDN?\n* Cloudflare is free, others are very cheap - we used Cloudfront\n* Netlify is free and comes with a CDN\n\n## Links\n* [WordPress](https://wordpress.org/)\n* [Webpack](https://webpack.js.org/)\n* [Gulp](https://gulpjs.com/)\n* [gatsby-image](https://www.gatsbyjs.org/packages/gatsby-image/)\n* [Cloudinary](https://cloudinary.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Cloudfront](https://aws.amazon.com/cloudfront/)\n* [Netlify](https://www.netlify.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'fce68929f2d69e3b748d83644e35926e787e4d282637f444dd9df7feb7fac11b', 'hasty-treat-5-things-that-make-your-site-slow', '/shows/239 - 5 things.md', '2023-10-16 20:07:03.546', '2023-10-27 15:57:52.973', 'HASTY'),
('syntax_podcast_show_00240', 240, 'Thinking Ahead for Emergency UI When Building a Website', '2020-04-15 13:00:00.171', 'https://traffic.libsyn.com/syntax/Syntax240.mp3', '\nIn this episode of Syntax, Scott and Wes talk about emergency UI when building a website. During an emergency, you need to relay information to your website visitors as quickly and efficiently as possible. How do you do that?  What do you need in place on your website?\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n5:40 - Banners and popups \n\n* Interfere \n* Static\n* Dismissible\n* Cookie/localstorage\n* When that popup is updated, it should show again. Maybe use a hash of the content? Or length? Something that resets itself every time the content is updated.\n* [Private client-side-only PWAs are hard](https://news.ycombinator.com/item?id=22686602)\n\n14:35 - Good styling\n\n* What happens if they add an image?\n* Do they have access to the branded fonts and colors in their WYSIWYG?\n* Can you revoke 100px red Times New Roman?\n\n18:32 - Page alerts\n\n* Yellow, green, red\n* Alerts on existing pages\n\n21:08 - New pages\n\n* Is there a good template for new pages?\n* Can they easily set the slug?\n  * [whatever.com/covid19](http://whatever.com/covid19)\n* Can they add it to the nav?\n\n23:52 - Google\'s \"Hours of Operation\"\n\n* Is that easy to change?\n* Meta tags: [https://schema.org/OpeningHoursSpecification](https://schema.org/OpeningHoursSpecification)\n\n25:43 - Other \n\n* Own your audience!\n* Email newsletter ready to rock\n* Online pickup? Basic scheduling software\n  * [https://www.cityhive.net/](https://www.cityhive.net/)\n  * [https://snipcart.com/](https://snipcart.com/)\n* Live streaming - have a YouTube account ready to go, even if empty\n\n34:38 - Deployment\n\n* Detail how to deploy everything\n* It might have been years and the CSS will only compile on Node 6 and Gulp 3\n* Do any caches need clearing?\n* Does the CSS need to be cache busted?\n\n## Links\n* [1Password](https://1password.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott:\n  * [Mellow Groovy Sounds YouTube Channel](https://www.youtube.com/user/Jeffreyhansful)\n  * [Mellow Grovvy AOR / West Coast Mix #4](https://www.youtube.com/watch?v=wrNIj10un9o)\n* Wes: Used projectors are cheap and can be a great deal\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - 50% everything!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5f16da988ae8d99625811089f1f431cf83a28bede71cdc367ccf15ddeb427e3a', 'thinking-ahead-for-emergency-ui-when-building-a-website', '/shows/240 - emergency ui.md', '2023-10-16 20:07:03.626', '2023-10-27 15:57:53.036', 'TASTY'),
('syntax_podcast_show_00241', 241, 'Hasty Treat - 5 More Things That Make Your Site Slow', '2020-04-20 13:00:00.416', 'https://traffic.libsyn.com/syntax/Syntax241.mp3', '\nIn this Hasty Treat, Scott and Wes continue their discussion of website page speed — five more things that make your site slow!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:01 - Shipping too much JS\n\n* Code splitting\n* [Webpack Bundle Analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer)\n* Look at dependencies of libraries\n* Use fewer libraries\n\n06:38 - Not bundling code\n\n* Build process\n\n08:24 - Not compressing code\n\n* [Google Closure Compiler](https://developers.google.com/closure/compiler)\n* Gzip via your server serving assets\n* Minify CSS + JS\n\n11:45 - Loading JS asynchronously\n\n* [Where should I put script tags in HTML markup?](https://stackoverflow.com/questions/436411/where-should-i-put-script-tags-in-html-markup)\n* Solution: Lazy load JS as needed\n* Solution: Show HTML first, load JS in the footer\n* Solution: Use Async + Defer\n\n16:42 - Missing indexes on DB\n\n* What is a DB index?\n* Where should you add them?\n* [MongoDB Compass](https://www.mongodb.com/products/compass)\n\n## Links\n* [Syntax 239: Hasty Treat - 5 Things That Make Your Site Slow](https://syntax.fm/show/239/hasty-treat-5-things-that-make-your-site-slow)\n* [Google PageSpeed](https://developers.google.com/speed/pagespeed/module)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '545deec00e4aa29918f0456eb0887014964d03328e0bdae65460a17587547eb6', 'hasty-treat-5-more-things-that-make-your-site-slow', '/shows/241 - 5 more things.md', '2023-10-16 20:07:03.696', '2023-10-27 15:57:53.085', 'HASTY'),
('syntax_podcast_show_00242', 242, 'Potluck - Mobile First × Arrow Functions × Deno × JSON APIs × Refactoring Tips × More!', '2020-04-22 13:00:00.416', 'https://traffic.libsyn.com/syntax/Syntax242.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about mobile first development, ES6 arrow functions, Deno.js, tips for refactoring your code, best e-commerce platforms and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n02:50 - Q: Wondering about your take on mobile first design and implementation? Do you throw the desktop styles or the mobile styles in media queries? Any opinions about that? I\'m switching a lot between projects that do it differently, and it really makes my head melt.\n\n08:24 - Q: What is the difference between the ES6 arrow functions and a normal function? When would you use a normal function instead of an arrow function or the other way around?\n\n13:54 - Q: What are your opinions or experiences on developing 360/VR experiences on the web? There are a few frameworks out there for building such experiences, like [A-Frame](https://aframe.io/) and [React 360](https://facebook.github.io/react-360/). I was wondering if you had any experience using such frameworks or building these types of things, and do you think that this could become a big thing for web development in the future?\n\n19:02 - Q: How do you define senior developer? What is the difference between intermediate and senior developers?\n\n21:37 - Q: I was curious knowing your opinions regarding [json:api](https://jsonapi.org/) and its consumption in React. Is it still a good pick compared to [GraphQL](https://graphql.org/) or normal rest/json?\n\n27:30 - Q: What\'s your take on [Blitz.js](https://blitzjs.com/) and [RedwoodJS](https://redwoodjs.com/)? Would you use a framework like this to build a large & scalable web app?\n\n30:54 - Q: What do you think of [Deno.js](https://deno.land/) reaching version 1.0? Is it really going to be a Node successor, or is that just marketing hype?	\n\n34:34 - Q: When you are looking to refactor code, do you have a process you like to follow? \n\n41:35 - Q: Which technology stack would you choose in 2020 for an e-commerce website and why?\n\n46:32 - Q: I\'m confused about developing a website for a client. I feel like most, if not all, clients want to take administrative control at the end of the project to be able to handle things themselves. Does this mean the only option for client projects is WordPress? I got really excited about making a client\'s site in Gatsby, but they would need to be a coder to be able to edit the content of the site or maintain it. Am I missing something here?\n\n49:52 - Q: How do I use prop types to check a component when getting the props from context instead of passing them down?\n\n51:51 - Q: Should I use the [mongoDB](https://www.mongodb.com/) or [mongoose node module](https://www.npmjs.com/package/mongoose) in my project? What are the differences?\n\n55:48 - Q: Is it a bad practice if I mix up [React Bootstrap](https://react-bootstrap.github.io/) and [Material UI](https://material-ui.com/) in one React project?\n\n## Links\n* [gqless](https://gqless.dev/)\n* [Prisma](https://www.prisma.io/)\n* [The Blitz.js Manifesto (A New Fullstack React Framework)](https://dev.to/flybayer/the-blitz-js-manifesto-a-new-react-framework-1gg7)\n* [Begin](https://begin.com/)\n* [Shopify](https://www.shopify.com/)\n* [Snipcart](https://snipcart.com/)\n* [Magento](https://magento.com/)\n* [Sanity](https://www.sanity.io/syntax)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Syntax 157: Hasty Treat - What is a Headless CMS?](https://syntax.fm/show/157/hasty-treat-what-is-a-headless-cms)\n* [@dog_rates](https://twitter.com/dog_rates)\n* [Wondery - Joe Exotic](https://wondery.com/shows/joe-exotic/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Jackbox Games - Murder Party Two](https://www.jackboxgames.com/trivia-murder-party-two/)\n* Wes: [Tiger King](https://www.netflix.com/title/81115994)\n\n## Shameless Plugs\n* Scott: [Custom React Hooks](https://www.leveluptutorials.com/tutorials/custom-react-hooks) - Currently 50% off! - Use the coupon code \'Syntax\' for an additional 10% off!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'bf1cce5ef17f6ac31d6ab5bb9394d10e3b7750d7664140aa2129dd7e5a302f44', 'potluck-mobile-first-arrow-functions-deno-json-apis-refactoring-tips-more', '/shows/242 - potluck.md', '2023-10-16 20:07:03.748', '2023-10-27 15:57:53.137', 'TASTY'),
('syntax_podcast_show_00243', 243, 'Hasty Treat - Getting Buy-in for a Tool Like Prettier From Your Team', '2020-04-27 13:00:00.312', 'https://traffic.libsyn.com/syntax/Syntax243.mp3', '\nIn this Hasty Treat, Scott and Wes talk about getting buy-in from your team when using new tools. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:53 - Q: \"I wrote a long message to our architect asking if I could install prettier into our component generator for new projects moving forward, and the response I got was: \"Don\'t auto-format, not all devs want that and prettier doesn\'t always format the way I like, I don\'t want to enforce that on devs.\"\n\nThis sucks because I know the codebase would benefit so much. Right now every time I visit a project so much of the code is not spaced out that it makes it hard to read quickly for me, lots of the React code is bunched up with no spacing - it\'s a mess to read for me especially because I am very organized. If this was your situation where you know a new tool/standard is something that can help a lot but it\'s shot down, do you just give up? I don\'t know how to respond to this because I am the only dev who has ever proposed this at my company and I just started here.\n\n05:03 - Lots to unpack here\n\n1. Some senior devs don\'t like getting suggestions from other devs. There is a sense that these things change quickly and I bet there is some anxiety over that at play here.\n2. Senior devs know better than to slap new tools into the codebase because they have probably done it and regretted it. What if it broke your code.\n\n08:20 - So what can you do?\n\n1. Ask for their thoughts on a tool instead of suggesting it - it seems you have done this already\n2. Show the dev that even though it looks weird, it\'s better for readability. \n3. Look at existing guidelines and try to match the settings as close as possible (not always an option with prettier).\n4. Put together a solid argument for it, written down.\n5. Use it in a smaller project. Everyone is against prettier at first, but once they use it, they realize how amazing it is.\n6. Can you just Prettier the code yourself and then format it otherwise before you check it in? This depends on if you have existing formats.\n\n## Links\n* [Prettier](https://prettier.io/)\n* [js-beautify](https://github.com/beautify-web/js-beautify)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8cc4be1033e4b7795fce1d7e97b351a5505a4dfd9d2304e0f02fdcc7331eb0cf', 'hasty-treat-getting-buy-in-for-a-tool-like-prettier-from-your-team', '/shows/243 - prettier.md', '2023-10-16 20:07:03.798', '2023-10-27 15:57:53.187', 'HASTY'),
('syntax_podcast_show_00244', 244, 'Potluck Part 2 - Magic GQLess × Are classes dead? × Custom Hooks × Staying Up To Date × CSS × More!', '2020-04-29 13:00:00.312', 'https://traffic.libsyn.com/syntax/Syntax244.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about custom hooks, static site generators, code management, CSS, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n04:02 - Q: Could you do a quick overview of how to effectively use a platform like [Cloudinary](https://cloudinary.com/)? I have a [Gatsby](https://www.gatsbyjs.org/) site with a lot of images and want to use something like Cloudinary to help with optimization, but the docs aren\'t completely clear to me how to get the most out of their service.\n\n10:58 - Q: What kind of CSS pre/post-processor you usually use? What are the pros and cons of pre-processor (SASS, SCSS, LESS) and post-processor (PostCSS)?\n\n16:22 - Q: What is the most effective way to share a project with the internet and get feedback? I\'m in a phase right now where I\'m building loads of new web things with React and JavaScript, but the only place I can think to share them is my Twitter, where only like 3 people will see them.\n\n18:35 - Q: What are your thoughts on classes in JavaScript? Do we still need them in 2020, or has the functional programming paradigm made them largely unnecessary? Does the answer change based on the size of the project and/or team?\n\n23:56 - Q: Does ES2020 have `var`? Also, is ES2020 a real spec or just a term people are using?\n\n27:37 - Q: Have you tried [gqless](https://gqless.dev/), a graphql client alternative to something like Apollo client? Very interesting idea for clean and maintainable code.\n\n29:15 - Q: What are the main differences in working for a software agency and a software product company? Pros and cons of each?\n\n33:53 - Q: Advice for having static blog with minimal moving parts? I used to have a static blog but I eventually got sick of touching it because instead of writing content I often got stuck keeping up with all the dependencies involved.\n\n38:18 - Q: Micro Frontends—is it the solution to rewriting legacy components?\n\n42:16 - Q: I am relatively new to web development and I feel like it is very difficult to \"catch up\" with JavaScript. It seems like whenever I try to contribute an open source, I can\'t figure out the code because they\'re using newer (and presumably better) ways of doing things. How can I get up to date with everything that\'s going on in the JavaScript world? Also, at what point should I start learning a front-end framework?\n\n46:56 - Q: My team and I are starting to write pretty complicated custom hooks gathering data from a number of different endpoints and/or polling certain endpoints on a continuous interval timer before returning it to the component that needs the data. Since this is the case some hooks have gotten fairly large with multiple functions inside of them getting called to get/manipulate all the data, or multiple hooks using those same functions to get slightly different data. Is it a best practice to keep all those hooks together in one file if they support all the hooks? Or should we break the hooks into separate files and move the helper functions into another file and just have one hook per file?\n\n51:10 - Q: Any tips for navigating projects with bad project managers? Working with non-technical agency project managers makes it pretty difficult to effectively plan and allocate time to ensure that all of the projects are done on time, on budget, and done well. It\'s important to me to maintain an optimistic attitude in the organization, but sometimes I\'d love to just hit \'em with the \'ol \"Peace out\" and go smoke some pork butt. Wondering if you guys have any good experience managing these types of projects?\n\n55:45 - Q: I\'m committing often and early, but this means that I end up writing the same vague git commit message over and over again. I know the solution to the problem is to just be more verbose, but it\'s a difficult habit to break. Any advice?\n\n## Links\n* [imgIX](https://www.imgix.com/)\n* [Netlify](https://www.netlify.com/)\n* [Sass](https://sass-lang.com/)\n* [Less](http://lesscss.org/)\n* [Bootstrap](https://getbootstrap.com/)\n* [Stylus](https://stylus-lang.com/)\n* [PostCSS](https://postcss.org/)\n* [WordPress](https://wordpress.org/)\n* [Reddit](https://www.reddit.com/)\n* [StaticGen](https://www.staticgen.com/)\n* [Gridsom](https://gridsome.org/)\n* [Vue](https://vuejs.org/)\n* [Laravel](https://laravel.com/)\n* [Hugo](https://gohugo.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Jelle\'s Marble Runs](https://www.youtube.com/channel/UCYJdpnjuSWVOLgGT9fIzL0g)\n* Wes: [Hyundai HHC2GNK Vertical Style Electric Air Compressor](https://www.amazon.ca/Hyundai-HHC2GNK-Vertical-Electric-Compressor/dp/B00ISLYLKI/ref=sr_1_4?keywords=nail%2Bgun%2Bcompressor&qid=1586882118&sr=8-4&th=1)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3ff58766d2c384d84c7696ebc03b95033a98862921ed8906e32d12e57ffb026d', 'potluck-part-2-magic-gqless-are-classes-dead-custom-hooks-staying-up-to-date-css-more', '/shows/244 - potluck.md', '2023-10-16 20:07:03.835', '2023-10-27 15:57:53.243', 'TASTY'),
('syntax_podcast_show_00245', 245, 'Hasty Treat - Things You Should Know About Javascript Events', '2020-05-04 13:00:00.626', 'https://traffic.libsyn.com/syntax/Syntax245.mp3', '\nIn this Hasty Treat, Scott and Wes talk about javascript events, and how to avoid some common pitfalls!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n02:23 - Event bubbling\n\n* Some events bubble, some don\'t\n* Clicks bubble\n* Mouseevents bubble\n* Focus doesn\'t bubble\n\n04:10 - Event capturing\n\n* Capture: down, bubble up\n* Canceling: prevent default\n* target` vs currentTarget\n* currentTarget is what got clicked\n* target is what you listened for the click on\n* event.isTrusted\n* addEventListener once: true\n\n## Links\n* [Javascript30](https://javascript30.com/)\n* [BeginnerJavascript](https://beginnerjavascript.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '1b18df8027001c29ebac342f40458e4f18fcc54446b7d3cdfb7a33f08ea3ed72', 'hasty-treat-things-you-should-know-about-javascript-events', '/shows/245 - js events.md', '2023-10-16 20:07:03.871', '2023-10-27 15:57:53.291', 'HASTY'),
('syntax_podcast_show_00246', 246, 'Bootcamps, Getting a Job, and Income Share Agreements with Heather Payne', '2020-05-06 13:00:00.626', 'https://traffic.libsyn.com/syntax/Syntax246.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Heather Payne about bootcamps — how to get the most out of them and what to look out for!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Guests\n* [Heather Payne](https://twitter.com/heatherpayne)\n\n## Show Notes\n\n07:52 - Bootcamps\n\n* What do you teach in the bootcamp? \n* How long is it? \n* How do you validate and pick topics?\n* What makes a good bootcamp student?\n* Do bootcamps work?\n* How do you get the most out of a bootcamp?\n\n20:45 - Finding a job\n\n* How do you prepare for an interview?\n* What qualities, outside of technical skill, do you see in developers who get jobs easily out of the bootcamp?\n* Do you see any common traits in the few that don\'t get jobs?\n* What about getting a job in the current climate?\n\n43:30 - Other\n\n* How do income share agreements work?\n* Pay what you can income share agreements\n* How do you tell if a bootcamp is good? \n\n## Links\n* [Heather Payne](https://twitter.com/heatherpayne)\n* [Juno College](https://junocollege.com/)\n* [WordPress](https://wordpress.org/)\n* [React](https://reactjs.org/)\n* [Council on Integrity in Results Reporting](https://cirr.org/)\n* [Zoom](https://zoom.us/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Heather: [Whereby](https://whereby.com/)\n* Scott: [Original Grind Coffee Co. Cold Brew Coffee Maker (1 Gallon)](https://amzn.to/2wWC37c)\n* Wes: [iStat Menus](https://apps.apple.com/us/app/istat-menus/id1319778037?mt=12)\n\n## Shameless Plugs\n* Heather: [Juno\'s Continuing Education Online Courses](https://junocollege.com/)\n* Scott: [Design Systems In Figma](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Wes\' New Website](https://wesbos.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '867971c19d9e8d782e11af9e9b2a7af211a55db878548086add94f0a08f37dac', 'bootcamps-getting-a-job-and-income-share-agreements-with-heather-payne', '/shows/246 - bootcamps.md', '2023-10-16 20:07:03.949', '2023-10-27 15:57:53.344', 'TASTY'),
('syntax_podcast_show_00247', 247, 'Hasty Treat - Wes\' New Personal Website', '2020-05-11 13:00:00.345', 'https://traffic.libsyn.com/syntax/Syntax247.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Wes\' new website - its first update since 2014!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n05:04 - The stack\n\n* Gatsby\n* Styled components\n* React\n* MDX\n\n07:04 - The content\n\n* Blog posts\n* Twitter Hot Tips\n\n09:54 - Styling\n\n* Styled components\n* Less\n\n16:54 - MDX\n\n17:45 - Serverless functions\n\n## Links\n* [wesbos.com](https://wesbos.com/)\n* [bos.af](https://bos.af/)\n* [WordPress](https://wordpress.org/)\n* [ACF](http://advancedcustomfields.com/)\n* [Netlify](https://www.netlify.com/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [React](https://reactjs.org/)\n* [MDX](https://mdxjs.com/)\n* [My New Website! Here are the deets](https://wesbos.com/new-wesbos-website/)\n* [Next](https://nextjs.org/)\n* [Operator Mono](https://www.typography.com/fonts/operator/styles)\n* [Mono Lisa](https://www.monolisa.dev/)\n* [Puppeteer](https://pptr.dev/)\n* [gatsby-image](https://www.gatsbyjs.org/packages/gatsby-image/)\n* [Jason Lengstorf](https://lengstorf.com/)\n* [gatsby-plugin-prettier-build](https://www.gatsbyjs.org/packages/gatsby-plugin-prettier-build/)\n* [Cloudinary](https://cloudinary.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'abe80190ab8510923d5cbc9be4d660db035b907ab2687cf252b56e3b89a51441', 'hasty-treat-wes-new-personal-website', '/shows/247 - new website.md', '2023-10-16 20:07:03.988', '2023-10-27 15:57:53.527', 'HASTY'),
('syntax_podcast_show_00248', 248, 'What\'s New in Javascript', '2020-05-13 13:00:00.345', 'https://traffic.libsyn.com/syntax/Syntax248.mp3', '\nIn this episode of Syntax, Scott and Wes talk about what is new in Javascript — a whole bunch of new stuff that you can use now and in the next sixth months or so.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n### ES2019\n\n04:03 - Array.flatMap()\n05:30 - Array.flat()\n07:37 - Array.fromEntries()\n09:50 - String.trimStart() and String.trimEnd()\n11:23 - Function.toString()\n11:57 - Object Key Order\n\n1. Integer keys in ascending order (and strings like \"1\" that parse as ints)\n2. String keys, in insertion order (ES2015 guarantees this and all browsers comply)\n3. Symbol names, in insertion order (ES2015 guarantees this and all browsers comply)\n\n### ES2020\n\n14:50 - Big int\n18:09 - Nullish coalescing\n20:57 - Optional Chaining\n24:55 - promise.allSettled\n25:33 -  Dynamic import\n27:14 - string.matchAll(regex) and string.replaceAll\n29:30 - globalThis\n30:44 - Module Namespace Exports\n33:11 - Navigator.share() API\n36:34 - Async Hooks\n37:39 - Pipline Operator \n39:59 - Top Level Await \n\n## Links\n* [https://twitter.com/wesbos/status/1181584047144878080](https://twitter.com/wesbos/status/1181584047144878080)\n* [https://twitter.com/wesbos/status/1238472679893671938](https://twitter.com/wesbos/status/1238472679893671938)\n* [https://twitter.com/wesbos/status/1230515254687301635](https://twitter.com/wesbos/status/1230515254687301635)\n* [Regex101](https://regex101.com/)\n* [Regexr](https://regexr.com/)\n* [https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare) \n* [Sketch](https://www.sketch.com/)\n* [CloudApp](https://www.getcloudapp.com/)\n* [Figma](https://www.figma.com/)\n* [https://nodejs.org/api/async_hooks.html](https://nodejs.org/api/async_hooks.html)\n* [Gulp](https://gulpjs.com/)\n* [https://v8.dev/features/top-level-await](https://v8.dev/features/top-level-await)\n* [https://github.com/tc39/proposal-pipeline-operator](https://github.com/tc39/proposal-pipeline-operator)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Sapper](https://sapper.svelte.dev/)\n* Wes: [Dewalt Oscillating Multitool](https://amzn.to/2RR9f7B)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '2ca8260a90431548f3e4627bdb08639960691d7349eb72294cd021b42ab0ab87', 'what-s-new-in-javascript', '/shows/248 - new in JS.md', '2023-10-16 20:07:04.024', '2023-10-27 15:57:53.569', 'TASTY'),
('syntax_podcast_show_00249', 249, 'Hasty Treat - Scott\'s New Personal Website', '2020-05-18 13:00:00.555', 'https://traffic.libsyn.com/syntax/Syntax249.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Scott\'s new website!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n02:25 - Relaxed fit development\n\n* Not concerned with it being perfect\n* Will act as a loose digital garden, so it needs to be flexible\n* Keep my talks and podcast appearances somewhere \n\n04:40 - The stack\n\n* Svelte / Sapper\n* CSS variables \n* Static generation with markdown\n* No API \n* Hosted on Netlify\n\n08:15 - Why?\n\n* I dropped that db life in 2015 and never looked back\n* I\'m a developer - markdown is good for me\n* I like a playground for ideas, so the new site throws out any idea of formality and dives into being a playground for myself.\n* Full page animations. Orchestration. Fully SSG.\n* Code is painless to add to — adding a blog post is as easy as creating a markdown file\n\n## Links\n* [ScottTolinski.com](https://www.scotttolinski.com/)\n* [Svelte](https://svelte.dev/)\n* [Sapper](https://sapper.svelte.dev/)\n* [Maggie Appleton](https://maggieappleton.com/)\n* [Shawn Swyx](https://www.swyx.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6d15a620ae5390568306c226763e056f64bc584bbff4bc827c8584882d73d813', 'hasty-treat-scott-s-new-personal-website', '/shows/249 - new website.md', '2023-10-16 20:07:04.057', '2023-10-27 15:57:53.611', 'HASTY'),
('syntax_podcast_show_00250', 250, 'Scott Teaches Wes Svelte and Sapper', '2020-05-20 13:00:00.555', 'https://traffic.libsyn.com/syntax/Syntax250.mp3', '\nIn this episode of Syntax, Scott teaches Wes about Svelte and Sapper — general premise, best practices, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Stackbit - Sponsor\nStackbit offers developers tools that enable things like inline content editing, live previewing of content changes, and collaboration features on your Jamstack site, without code changes. That\'s why Stackbit is the best way to Jamstack. [stackbit.com](stackbit.com)\n\n## Show Notes\n\n03:14 - General premise\n\n* Sapper compiles away, removing framework code from build\n* Component & Props based\n* Easy reactivity\n* Built-in tools like animation\n* Template-based\n\n07:57 - Svelte 101\n\n* .svelte files\n* Files can include `<script>`, `<style>`, and straight-up CSS\n* Variables are used in templates via {var} - `<img {src} />` even works\n* Import component and use just like React and Vue\n\n10:49 - Stylin\'\n\n* All styles are scoped by default\n* global() to wrap around global declarations\n* Language type sass to use sass\n\n12:22 - Reactivity\n\n* Baked in\n  * let count = 0\n  * count = count + 1 will reactively update in template\n  * variables are essentially state\n  * $:  double = count + 2  - to create a reactive variable that updates when another variable updates\n  * $: console.log(count) = will run whenever count is update a-la useEffect\n  * $: if (count >10) = same... reactive if\n  * `<input bind:value={name} >` updates let name in script\n\n15:55 - Props\n\n* Same was React, but need to be exported before they can be used\n* Seems counterintuitive, but you get over it quickly\n* EZ defaults `export let answer = \'a mystery\';`\n\n```jsx\n<script>\nimport Nested from \'./Nested.svelte\';\n</script>\n\n<Nested answer={42}/>\n```\n\n```jsx\n<script>\n	export let answer = \'a mystery\';\n</script>\n\n<p>The answer is {answer}</p>\n```\n\n20:08 - Template logic\n\n* If statements\n{#if user._id}\n{/if}\n\n* Loops\n{#each cats as kittens}\n\n* Promise tags\n```\n{#await promise}\n	<p>...waiting</p>\n{:then number}\n	<p>The number is {number}</p>\n{:catch error}\n	<p style=\"color: red\">{error.message}</p>\n{/await}\n```\n\n23:12 - Events\n\n* `<button  on:click={func} />`\n* On directive\n* Functions can also be inline\n* Modifiers \n\n```\n<button on:click|preventDefault={handleClick}>\n	Click me\n</button>\n```\n\n26:11 - Baked-in goodies\n\n* Animation\n* Dimensions \n\n```\n<div bind:clientWidth={w} bind:clientHeight={h}><span style=\"font-size: {size}px\">{text}</span></div>\n```\n\n* Lifecycle methods\n* Advanced State Via Stores\n  * A store is simply an object with a subscribe method that allows interested parties to be notified whenever the store value changes.\n* import { writable } from \'svelte/store\';\n* export const count = writable(0);\n* count.update(0)\n* Slots\n* React helmet like stuff, ie <svelte:head>\n\n36:39 - Sapper\n\n* Similar to Next.js\n* Folder routes\n* Static export with all of the good stuff like service workers and preloading\n\n## Links\n* [Svelte](https://svelte.dev/)\n* [Sapper](https://sapper.svelte.dev/)\n* [r/webdev](https://www.reddit.com/r/webdev/)\n* [Vue.js](https://vuejs.org/)\n* [ScottTolinski.com](https://www.scotttolinski.com/)\n* [WesBos.com](https://wesbos.com/)\n* [Next.js](https://nextjs.org/)\n* [ScottTolinski.com Github Repo](https://github.com/stolinski/scott-2020)\n* [Gatsby.js](https://www.gatsbyjs.org/)\n* [Shawn Swyx](https://www.swyx.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Lewisia Battery Backup Solar Fountain Pump](https://amzn.to/35awXAS)\n* Wes: [Firefox Containers](https://support.mozilla.org/en-US/questions/1201060)\n\n## Shameless Plugs\n* Scott: [LevelUpTuts YouTube Channel](https://www.youtube.com/user/LevelUpTuts)\n* Wes: [Wes\' New Website](https://wesbos.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b4553b516f3bee91fea24cad795fb50b50e204444b5378b36deb1bf2b3b9c9c1', 'scott-teaches-wes-svelte-and-sapper', '/shows/250 - scott teaches wes.md', '2023-10-16 20:07:04.093', '2023-10-27 15:57:53.653', 'TASTY'),
('syntax_podcast_show_00251', 251, 'Hasty Treat - Should You Support IE11?', '2020-05-25 13:00:00.446', 'https://traffic.libsyn.com/syntax/Syntax251.mp3', '\nIn this Hasty Treat, Scott and Wes talk about IE11 — should you support it, what to be aware of if you do, and what data is important in making that decision. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:21 - When was IE11 made?\n\n03:48 - When is it deprecated?\n\n04:44 - How to make the decision?\n\n* Look at your analytics\n* Look at your users\n* Is a 2% drop in sales worth it?\n\n09:00 - What doesn\'t IE11 have? What can you start using now that IE11 is gone?\n\n* Modern Flexbox\n* CSS Grid\n* CSS Variables\n\n10:26 - Can you partially support it?\n\n* Major features\n* Progressive enhancement\n* Gracefully degrade\n* Polyfill\n\n11:16 - What about testing?\n\n## Links\n* [wesbos.com](https://wesbos.com/)\n* [VirtualBox](https://www.virtualbox.org/)\n* [modern.ie](http://modern.ie/)\n* [IE11](https://support.microsoft.com/en-us/help/17621/internet-explorer-downloads)\n* [Surface Book](https://www.microsoft.com/en-us/p/surface-book-3/8xbw9g3z71f1)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd98358b2439b2b503bb3cc258b5ca137d3170655cf61957fb581ce51cee6f974', 'hasty-treat-should-you-support-ie11', '/shows/251 - IE11.md', '2023-10-16 20:07:04.131', '2023-10-27 15:57:53.697', 'HASTY'),
('syntax_podcast_show_00252', 252, 'Potluck - Courses for Kids × Sub-Components × Recursion × DB Hosting × Frameworks × Data Structures & Algorithms × More!', '2020-05-27 13:00:00.446', 'https://traffic.libsyn.com/syntax/Syntax252.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about kids learning to code, React sub-components, why it\'s so hard to scale, new frameworks, data structures, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n03:11 - Q: Do you think Selenium could get replaced by Cypress in the future?\n\n16:16 - Q: When blogging about code, you need a good way to display snippets of code in your blog post. What are good ways to do that? Should you embed something like a GitHub Gist, or setup something specific for your blog?\n\n11:13 - Q: Do my students NEED to understand recursion to be effective JS devs?\n\n15:41 - Q: What do you think about developing using just an iPad + keyboard + external monitor? To try this, I just moved all my environment to a VM on the cloud and configured code-server (a VSCode accessed by the web https://github.com/cdr/code-server). Works pretty well! The only problem now is that the iPad has a bad resolution on the external monitor when I\'m using the browser.\n\n22:43 - Q: I often find myself refactoring sub-components out of a component once it gets too big. This however is very tedious, especially if the sub-component is tightly coupled with the component and thus needs to take a lot of props. Do you have any suggestions? Do you just let the component grow bigger in a case like that?\n\n26:15 - Q: [Insert Hoser related greeting here], during quarantine I\'ve tried to come up with an outline for creating a goofy Pokémon app with my boys (age 8 and 5). They\'re obsessed with Pokémon right now and I figure this could be a fun little group activity. I see how much they struggle focusing on some of the online instruction they have through school, and they\'re a bit fatigued with \"learning\" right now. We tried doing a bit of scratch/scratch jr. I figured a fun-themed project could help them stay engaged with learning, but I\'m struggling with where to start. How would you go about creating a course/activities (like Wes\' Javascript 30 course) specifically designed for primary/elementary aged kids?\n\n30:52 - Q: How much should someone who wants to work as a web developer (starting in a junior position) know about data structures and algorithms? Should I practice algorithms and do questions before applying for jobs?\n\n33:53 - Q: I\'m working with a friend to start up a website for our YouTube channel, and we\'re getting into podcasts too (not tech-related so no competition, no worries). I\'m thinking about trying to host my own RSS feed for podcasts to save some bucks. Am I crazy?\n\n36:27 - Q: Do you guys name your colors in terms of the color or the use of the color. For example, say you styled all your links to be purple. Would you name that color \"purple\" or \"link\"?\n\n41:00 - Q: I\'ve been listening to you for about a month and really dig it. I\'m working on an app that will require a couple of different databases. I\'ll need a database for user information, and a larger database for application data. The app does some analytics stuff, so data is critical. I\'m getting lost in the world of hosted database options (mLab, Digital Ocean, etc.) and big cloud providers (AWS, Google, etc.). Could you guys talk a little bit about how you choose database hosting? Bonus question - have you ever used Auth0 or Okta for user authentication?\n\n45:09 - Q: I\'m a bit confused about using GitHub. What happens to the files that are ignored, but required for development? What\'s the best practice for backing up both? I have used .env files, but not too sure how it works if it\'s in the gitignore and the site is deployed via GitHub (like with Netlify). Right now I have a backup folder on my hard drive and I back up both the dev and the live versions with a timestamp, whenever I do a new \'release\'. Also, you spoke about Jetpack, and I\'d be curious what\'s the best way to do this with a cronjob for example.\n\n48:50 - Q: I was laid off in early April because of COVID-19. I\'ve been trying to file unemployment since then. The state unemployment office said they were launching an updated website for filing claims on Friday, April 24th. At 9:00am that day, they ran a banner saying demand has been so high that it\'s affecting the process \'despite rigorous testing.\' Why is this so hard to scale?\n\n55:57 - Q: What is your take on all of these rails-like server side rendered React and GraphQL frameworks? Here is another one built by Michael Jackson, Ryan Florence and some others: https://twitter.com/remix_run. This of course is in addition to Redwood and Blitz.\n\n## Links\n* [Prism](https://prismjs.com/)\n* [VS Code](https://code.visualstudio.com/)\n* [gatsby-remark-vscode](https://www.gatsbyjs.org/packages/gatsby-remark-vscode/)\n* [CodeSandbox](https://codesandbox.io/)\n* [vscode-textmate](https://github.com/microsoft/vscode-textmate)\n* [System76 Linux Laptop](https://system76.com/)\n* [JS Refactor](https://marketplace.visualstudio.com/items?itemName=cmstead.jsrefactor)\n* [ScratchJr](https://www.scratchjr.org/)\n* [Javascript30](https://javascript30.com/)\n* [GraphiQL Pokedex](https://sevinf.github.io/graphql-pokedex/)\n* [AWS](https://aws.amazon.com/products/databases/)\n* [Auth0](https://auth0.com/)\n* [Okta](https://www.okta.com/)\n* [mLab](https://mlab.com/)\n* [Jetpack Backup](https://jetpack.com/support/backup/)\n* [Remix](https://remix.run/)\n* [Redis](https://redis.io/)\n* [Redwood](https://redwoodjs.com/)\n* [Blitz](https://blitzjs.com/)\n* [Next.js](https://nextjs.org/)\n* [Encarta](https://en.wikipedia.org/wiki/Encarta)\n\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [EGO battery-powered lawn gear](https://egopowerplus.com/power-mowers/)\n* Wes: [AmazonBasics Notebook Laptop Stand Arm Mount Tray](https://amzn.to/35tH7Na)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '7bfa927ac476f852083ae0d166ce7f786b63f0869afe32090f5e104b073c0831', 'potluck-courses-for-kids-sub-components-recursion-db-hosting-frameworks-data-structures-and-algorithms-more', '/shows/252 - potluck.md', '2023-10-16 20:07:04.166', '2023-10-27 15:57:53.739', 'TASTY'),
('syntax_podcast_show_00253', 253, 'Hasty Treat - Developing for Slow and Spotty Connections', '2020-06-01 13:00:00.405', 'https://traffic.libsyn.com/syntax/Syntax253.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to develop for slow internet connections. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:26 - Types of Slow connections\n\n* Slow upload\n* Slow download\n  * This could be that your kids are watching a show and your partner is on a zoom call\n* High latency\n* Intermittent\n\n07:47 - Loading UI \n\n* Show loading UI for everything, but after X seconds\n* Page transitions on SPAs\n* Form switches - enter country, get list of provinces/shipping/whatever\n\n11:58 - Account for XHR failures \n\n* Sometimes I\'m in a loading state forever\n* State machines will account for this\n\n13:26 - \"Still working\" timeouts\n\n* Some sort of timeout so the user can get feedback\n\n## Links\n* [Sentry](https://sentry.io)\n* [Sapper](https://sapper.svelte.dev/)\n* [Backblaze](https://www.backblaze.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '39bed9371a491911ed84fec2472b02fb946836d106d687be44b4950451678f7a', 'hasty-treat-developing-for-slow-and-spotty-connections', '/shows/253 - slow connection.md', '2023-10-16 20:07:04.203', '2023-10-27 15:57:53.790', 'HASTY'),
('syntax_podcast_show_00254', 254, 'Headless CMS Break Down & Roundup', '2020-06-03 13:00:00.405', 'https://traffic.libsyn.com/syntax/Syntax254.mp3', '\nIn this episode of Syntax, Scott and Wes talk about headless content management systems — why you might want to use one, things you should take into account, and more! \n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n02:38 - What and why\n\n* A headless CMS doesn\'t mean you have to use a static site generator\n* A headless CMS has an API:\n  * REST\n  * GraphQL\n  * GROQ\n* A headless CMS can pipe its content into:\n  * Static Site on build - like [Gatsby](https://www.gatsbyjs.org/)\n  * An app on run/refresh\n  * An existing website - widget\n* What makes a CMS? Do you need a UI?\n* What is the threshold?\n* Is a hotdog a sandwich?\n* Things to think about when choosing an API\n  * Auth - Rules + roles + levels\n* How easy is it to create new data types?\n  * Is it code or UI?\n  * Can my mom use it?\n* Can you create one-off content types? (e.g. settings pages)\n* Custom workflows\n  * dRafts, revisions, roll backs\n* How are images handled? Do you need another service for that?\n* Pre-determined UI\n  * Is custom UI possible?\n  * Two-way relationships?\n  * Tags?\n* Data validation?\n  * UI + API?\n* Hosting?\n* Pricing?\n* Content movability?\n  * Can you get your data out?\n  * Schemas\n  * Users\n  * Revisions\n* CORS or realtime API?\n* APIs\n  * Can you insert data via the API? (or just pull)\n  * [Node](https://nodejs.org/en/) API\n  * Importing data\n\n24:37 - Hosted\n\n* [Sanity](https://www.sanity.io/)\n* [Prismic](https://prismic.io/)\n* [Contentful](https://www.contentful.com/)\n* [Dato CMS](https://www.datocms.com/)\n* [Storyblok](https://www.storyblok.com/)\n* [8Base](https://www.8base.com/)\n* [Agility CMS](https://agilitycms.com/)\n  * Seems to be making a big corporate play\n\n36:59 - Self-Hosted\n\n* [WordPress](https://wordpress.org/)\n  * WordPress REST API\n  * GraphQL API\n  * [WP GraphQL](https://www.wpgraphql.com/)\n  * [Advanced Custom Fields](https://advancedcustomfields.com/) for custom UI\n  * Most things in WordPress are custom post types and taxonomies, so data from plugins can often be surfaced\n  * The theme UI from plugins is often lost\n* [Drupal](https://www.drupal.org/)\n  * [contentacms.org](http://contentacms.org/)\n* [Craft CMS](https://craftcms.com/)\n* [Ghost](https://ghost.org/)\n* [Strapi](https://strapi.io/)\n* [Keystone](https://www.keystonejs.com/)\n* [Joomla](https://www.joomla.org/) (JK!)\n\n44:33 - API (BYOUI)\n\n* [Hasura](https://hasura.io/)\n* [Prisma](https://www.prisma.io/)\n* [Firebase](https://firebase.google.com/)\n\n47:37 - Git Based\n\n- [Netlify](https://www.netlify.com/)\n- [Forestry](http://forestry.io/)\n\n50:30 - Other\n\n* [Google Sheets](https://www.google.com/sheets)\n  * [Sheety](https://sheety.co/)\n* [Airtable](https://airtable.com/)\n* [Tina CMS](https://tinacms.org/)\n  * Not a CMS\n* Markdown under the hood\n* [Notion](https://www.notion.so/)\n\n## Links\n* [https://twitter.com/wesbos/status/1254772936935739393](https://twitter.com/wesbos/status/1254772936935739393)\n* [Pixel & Tonic](https://pixelandtonic.com/)\n* [GraphCool](https://www.graph.cool/)\n* [GraphCMS](https://graphcms.com/)\n* [Sapper](https://sapper.svelte.dev/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [DEWALT Random Orbit Sander](https://amzn.to/2WnUgo0)\n* Wes: [Shelf Brackets](https://www.amazon.com/s?k=black+shelf+brackets&ref=nb_sb_noss_1)\n\n## Shameless Plugs\n* Scott: [New course on Sapper](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Wes\' YouTube Channel](https://www.youtube.com/wesbos)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b63e177cefae75214b8601f3aae165fca7f6572c007271aaa8844f8194843c8c', 'headless-cms-break-down-and-roundup', '/shows/254 - headless cms breakdown.md', '2023-10-16 20:07:04.240', '2023-10-27 15:57:53.842', 'TASTY'),
('syntax_podcast_show_00255', 255, 'Hasty Treat - Slow Connections Part 2', '2020-06-08 13:00:00.494', 'https://traffic.libsyn.com/syntax/Syntax255.mp3', '\nIn this Hasty Treat, Scott and Wes are back with part 2 on how to develop for slow internet connections. \n\n## Kyle Prinsloo Freelancing - Sponsor\nKyle Prinsloo teaches you everything you need to know about freelancing, including how to quit your job, earn a side-income and start taking control of your life. Check it out at [studywebdevelopment.com/freelancing](https://studywebdevelopment.com/freelancing). Use the coupon \"SYNTAX\" and get 25%.\n\n## Show Notes\n\n03:27 - Images\n\n* Resize client-side when uploading\n* Lazy load or progressive JPG\n* Width + height so the content doesn\'t shift with placeholders\n* Compress your images - lossless and lossy\n* Use SVG where possible\n\n08:33 - Scripts + CSS assets\n\n* [Hasty Treat - 5 Things That Make Your Site Slow](https://syntax.fm/show/239/hasty-treat-5-things-that-make-your-site-slow)\n* [Hasty Treat - 5 More Things That Make Your Site Slow](https://syntax.fm/show/241/hasty-treat-5-more-things-that-make-your-site-slow)\n\n08:51 - Video\n\n* Variable-rate video is key\n\n09:13 - Connections that go in-n-out a lot\n\n* Save form state on page refresh\n* Show UI when user goes offline\n  * `window.addEventListener(\'offline\', updateOnlineStatus);`\n  * `window.addEventListener(\'online\', updateOnlineStatus);`\n* Retrying in _____\n\n10:27 - Service workers! \n\n* Serves up local cache initially\n\n12:05 - Fonts\n\n* Font-display CSS [https://css-tricks.com/font-display-masses/](https://css-tricks.com/font-display-masses/)\n* Sometimes possible: tree shake your fonts - load only the characters you need\n* `font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;`\n\n14:04 - CSS tricks\n\n* Text over background image — make sure you also set a color so the text will show while the image is loading\n\n14:37 - Testing slow connections\n\n* Dev tools\n* Mimic a speed, or 3G\n\n## Links\n* [ImageOptim](https://imageoptim.com/)\n* [Slack](https://slack.com/)\n* [Discord](https://discord.com/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Workbox by Google](https://developers.google.com/web/tools/workbox)\n* [Chrome Dev Tools](https://developers.google.com/web/tools/chrome-devtools)\n* [Firefox Dev Tools](https://developer.mozilla.org/en-US/docs/Tools)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'eb3d55bd195d269f06669c4e5066b89058fd127a1256b89006ee7e02db32cd3f', 'hasty-treat-slow-connections-part-2', '/shows/255 - slow connection 2.md', '2023-10-16 20:07:04.294', '2023-10-27 15:57:53.886', 'HASTY'),
('syntax_podcast_show_00256', 256, 'WebRTC and Peer-to-Peer Video Calling with Ian Ramzy', '2020-06-10 13:00:00.494', 'https://traffic.libsyn.com/syntax/Syntax256.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Ian Ramzy about ZipCall.io — how he built it, why, and some of the surprising choices he made along the way.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Stackbit - Sponsor\nStackbit offers developers tools that enable things like inline content editing, live previewing of content changes, and collaboration features on your Jamstack site, without code changes. That\'s why Stackbit is the best way to Jamstack. [stackbit.com](https://stackbit.com)\n\n## Guests\n* [Ian Ramzy](https://ianramzy.com/)\n\n## Show Notes\n\n02:08 - Who are you and what\'s your background?\n\n05:34 - Why did you build this?\n\n13:55 - What is it built in?\n\n* Express server\n* Web sockets\n\n16:10 - Why is there no tooling?\n\n* GetUserMedia\n* WebRTC\n* Twilio STUN/TURN/ICE infrastructure\n  * [https://www.twilio.com/docs/stun-turn/faq](https://www.twilio.com/docs/stun-turn/faq)\n\n```jsx\nVideoChat.peerConnection = new RTCPeerConnection({\n        iceServers: token.iceServers,\n      });\n```\n\n24:31 - How does your server deal with an influx of users?\n\n27:11 - How do each of these features work?\n\n* Auto-scaling video quality\n* Text chat\n* Screen sharing\n* Picture in picture\n* Live captions\n* Loading animation\n* No download required, entirely browser based\n* Direct peer to peer connection ensures lowest latency\n* Single use disposable chat rooms\n\n41:32 - Have you looked into any of the recording APIs?\n\n## Links\n* [ZipCall](https://github.com/ianramzy/decentralized-video-chat)\n* [Zoom](https://zoom.us/)\n* [jQuery](https://jquery.com/)\n* [WebTorrent](https://webtorrent.io/)\n* [Heroku](https://www.heroku.com/)\n* [Adopter.js](https://github.com/webrtc/adapter)\n* [Figma](https://www.figma.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Ian: [Notion](https://www.notion.so/)\n* Scott: [Summoning Salt](https://www.youtube.com/channel/UCtUbO6rBht0daVIOGML3c8w)\n* Wes: [4 Channel WiFi Momentary Inching Relay Self-Lock Switch Module](https://amzn.to/3e4WfE4)\n\n## Shameless Plugs\n* Ian [ZipCall](https://zipcall.io/)\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b6de4782b983e6fa59bb79ac9e40b3ed5685b7d8093e831d4a5aed303284bf61', 'webrtc-and-peer-to-peer-video-calling-with-ian-ramzy', '/shows/256 - webrtc.md', '2023-10-16 20:07:04.352', '2023-10-27 15:57:53.935', 'TASTY'),
('syntax_podcast_show_00257', 257, 'Hasty Treat - Scott Goes Linux with Pop OS', '2020-06-15 13:00:00.818', 'https://traffic.libsyn.com/syntax/Syntax257.mp3', '\nIn this Hasty Treat, Scott tells Wes about his new Linux laptop — what it is, why he did it, pros and cons, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n01:38 - Why?\n\n04:20 - What is System76?\n\n* [System76 Lemur Pro](https://system76.com/laptops/lemur)\n\n08:53 - What is Pop OS?\n\n* [Pop OS](https://pop.system76.com/)\n\n09:41 - How has Linux compared to Mac?\n\n* Pop OS is a great distro with lots of features, but command line knowledge is still necessary\n\n10:07 - I can still run:\n\n* [Albert (alfred)](https://github.com/albertlauncher/albert)\n* [Figma](https://www.figma.com/)\n* [VSCode](https://code.visualstudio.com/)\n* [DaVinci Resolve](https://www.blackmagicdesign.com/products/davinciresolve/)\n* [Zoom](https://zoom.us/)\n* [Brave](https://brave.com/)\n* [Chrome](https://www.google.com/chrome/)\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/)\n\n10:43 - I can\'t run:\n\n* [ScreenFlow](http://www.telestream.net/screenflow/overview.htm)\n* [Logic](https://www.apple.com/logic-pro/)\n* [Sketch](https://www.sketch.com/)\n\n13:46 - What do I miss?\n\n* Trackpad gestures\n* It\'s not as polished of an experience\n\n## Links\n* [Dell](https://www.dell.com/en-us/shop/dell-laptops/sc/laptops)\n* [Toughbook](https://na.panasonic.com/us/computers-tablets-handhelds/computers/laptops/toughbook-31)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ba906940cad44a8a1a51e896415efedcbebb1afcbdb48c17c97f2d4fa83c8833', 'hasty-treat-scott-goes-linux-with-pop-os', '/shows/257 - scott goes linux.md', '2023-10-16 20:07:04.389', '2023-10-27 15:57:54.066', 'HASTY'),
('syntax_podcast_show_00258', 258, 'The Fundamentals Leftovers - Terminal, Shortcuts, View Source, Github + More!', '2020-06-17 13:00:00.818', 'https://traffic.libsyn.com/syntax/Syntax258.mp3', '\nIn this episode of Syntax, Scott and Wes continue their discussion of fundamentals — Bash, text editors, Regex, Github, Dev tools, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:17 - Typing\n\n* Take an online typing test or skills - [https://www.keybr.com/](https://www.keybr.com/)\n\n07:02 - Bash / Terminal\n\n* [WSL](https://docs.microsoft.com/en-us/windows/wsl/about)\n* What directory am I in?\n* SSH\n* How to copy / paste / remove files and folders\n* z\n* Nice prompt ([ZSH](https://ohmyz.sh/) or [fish](https://fishshell.com/))\n* Know how to get out of VIM/VI and how to use it for fast editing\n* Know how to make an alias\n\n13:19 - Text editors\n\n* Command Palette\n* Keyboard shortcuts (just look them up!)\n* Click through to source\n* Multiple cursors\n* Find/replace master\n* Find and replace across files\n\n18:37 - Regex\n\n* Regex101\n* [https://regexone.com](https://regexone.com/) will teach you just enough\n\n22:03 - OS Basics\n\n* Switching apps\n* Unzipping\n* File organization\n* Searching for/in files\n\n28:50 - Googling\n\n* Learn how to google well\n* What words to use and what not to\n* Basic operators \"-\", \",\n* Use [Reddit](https://www.reddit.com/): for opinions\n* Add dates - example: Library has been out for 6 months, and you can filter out\n\n33:08 - Navigating GitHub\n\n* Explore for finding interesting projects and creators\n* Know how to clone a repo\n* Create repo and push to it\n* [https://octolinker.now.sh/](https://octolinker.now.sh/) to click through to files\n* Use [Octotree](https://www.octotree.io/) to navigate\n\n36:20 - Navigating source\n\n* View source\n* Where to start in a repo (ie the entrance to a project)\n* Most code repos are easier to read and understand than you give yourself credit for - it will improve your code reading and parsing skills\n* Access to the minds of other developers\n\n37:31 - Knowing how to pick the right dev tools pane\n\n* Is it network based?\n* Does it happen once you click something?\n* Toggling CSS on/off\n* When console logging makes sense vs using a better tool\n\n## Links\n* [TypingTest.com](https://www.typingtest.com/)\n* [Wes\' Command Line Power User](https://commandlinepoweruser.com/)\n* [Karabiner](https://karabiner-elements.pqrs.org/)\n* [BetterTouchTool](https://folivora.ai/)\n* [Alfred](https://www.alfredapp.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Fabric of the Cosmos](https://www.pbs.org/wgbh/nova/series/the-fabric-of-the-cosmos/)\n* Wes: [Cosmonaut Stylus](https://www.studioneat.com/products/cosmonaut) \n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '95509fa682d989ab5b72e9631af899a093162e31ff31a40ec085eff0daa68ba2', 'the-fundamentals-leftovers-terminal-shortcuts-view-source-github-more', '/shows/258 - fundamentals leftovers.md', '2023-10-16 20:07:04.429', '2023-10-27 15:57:54.107', 'TASTY'),
('syntax_podcast_show_00259', 259, 'Hasty Treat - Some Neat CSS Functions That You Should Know About', '2020-06-22 13:00:00.219', 'https://traffic.libsyn.com/syntax/Syntax259.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS functions, what they are, how to use them, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:13 - attr()\n\n04:14 - calc()\n\n06:05 - :is()\n\n07:20 - sin, cos, tan, acos, asin, sqrt, pow\n\n08:52 - clamp()\n\n12:13 - minmax()\n\n14:24 - fit-content()\n\n15:35 - filter\n\n* blur()\n* grayscale()\n* sepia()\n* opacity()\n* contrast()\n* url()\n\n## Links\n* [https://twitter.com/wesbos/status/1256229763225657348/photo/1](https://twitter.com/wesbos/status/1256229763225657348/photo/1)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b63f8eab35efad4cde35aab8e52bbd28df301cc7395962e0d360297e8a83f613', 'hasty-treat-some-neat-css-functions-that-you-should-know-about', '/shows/259 - css functions.md', '2023-10-16 20:07:04.469', '2023-10-27 15:57:54.149', 'HASTY'),
('syntax_podcast_show_00260', 260, 'Potluck - Libraries vs Frameworks × Firefox × Career Advice For Teenagers × Who Would Win a Thumb War? × More!', '2020-06-24 13:00:00.219', 'https://traffic.libsyn.com/syntax/Syntax260.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about libraries vs frameworks, Firefox, who would win a thumb war, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n01:37 - Q: Why does React bill itself as a library instead of a framework?\n\n03:14 - Q: Are y\'all still using Firefox now that it has been six months?\n\n06:30 - Q: Is it possible to do a hasty treat regarding the Brave browser? Would love to hear your opinion on the tech, view on the approach and why we could need another browser in 2020. Peace!\n\n09:34 - Q: Who would win in a thumb war, Wes or Scott?\n\n10:56 - Q: What are your thoughts on XState and state machines for managing state in apps? I\'ve been super interested in trying to use it, eager to hear what you both think. Also, wondering if you\'d have any recommendations on how to use it with Apollo, whether to use XState\'s internal context to store app state, or use the Apollo cache.\n\n14:53 - Q: Should I start a new project with jQuery or React?\n\n17:21 - Q: I\'m a young teen (<16) with a passion for all things web dev. However, without being able to legally have a job, I\'m unable to make any money and am therefore running on a $50 Raspberry Pi and a 10+ year old monitor. As much as I love my Pi, just running `npm install` can be agonizing sometimes, not to mention the amount of space node_modules take up on a device with 16GB of storage! So basically, any pointers on getting income (and practice!) in the web development field when your under 16? And just in general, what advice do you have to young teen learning to code? Thanks in advance! P.S. You know you\'ve got something going when a teenaged boy would rather listen to your podcast than watch Star Wars or Marvel with his friends! ;) So keep up the amazing work.\n\n22:12 - Q: Is it worth my time to learn design patterns in JavaScript?\n\n24:28 - Q: I have a question regarding Figma design to HTML/CSS conversion. When translating the design into code, do you keep the font-size, padding, height of images the same as defined in design or do you take something different? Let\'s suppose top nav bar is 115px, then do you make it the same as well, or something else?\n\n29:03 - Q: You both are great at technical communication — how do you get better at technical communication when self-learning?\n\n33:06 - Q: What tools (or other methods) do y\'all use to manage spinning up new projects with all the assorted directory structures, tools, and configs, you prefer? For example, when I start a new project, these days I like TS, Prettier, ESLint, and want those to play nicely together. I find I\'m constantly copying files from one project to the other but haven\'t found a good abstraction that allows me to setup a new project with the assorted files. Bonus points for a solution that can keep shared configs and deps up to date.\n\n36:10 - Q: I am 26 years old and working a full-time job. I am currently looking at the possibility between work and spending time with my partner. I get maybe an hour a week (maybe two) to focus on learning Javascript. I feel like it is taking me literally forever to get anywhere, and when I do learn something, there is always a better way of doing it! And then when I do sit down and get the time I just feel like I have no direction. Your podcast has been giving me small boosts of motivation, so thanks for that. But is 26 too old to make a move into development?\n\n39:39 - Q: How do you step up a web development project to an enterprise-level? There are so many simple tutorials and quick wins all over the internet, but how do you get more knowledge about bigger enterprise-ready technical stuff. E.g. How to organize a Vue app with >60 different pages? How do you organize the REST-ful API? How do you resolve dependencies between API endpoint 1 and API endpoint 2? How do you share information between multiple components in VUE-State-Management?\n\n42:44 - Q: I\'ve done Wes\' NextJS course and he uses Styled Components instead of Next\'s own styled-jsx. What are your opinions on styled-jsx, and why you do (or do not) use it?\n\n## Links\n* [React](https://reactjs.org/)\n* [Firefox](https://www.mozilla.org/en-US/firefox/)\n* [Brave](https://brave.com/)\n* [CodeSandbox](https://codesandbox.io/)\n* [VS Code in the browser](https://github.com/cdr/code-server)\n* [CodePen](https://codepen.io/)\n* [Source Making Design Patterns](https://sourcemaking.com/design_patterns)\n* [Figma Auto Layout](https://www.figma.com/blog/announcing-auto-layout/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott:\n  * 1: [Myths and Legends Podcast](https://www.mythpodcast.com/)\n  * 2: [Fictional Podcast](https://www.fictional.fm/)\n* Wes: [Parchment Paper Baking Sheets](https://amzn.to/2A9c5P0)\n\n## Shameless Plugs\n* Scott: [Sapper For Beginners](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner JavaScript Course](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '28996e5b3e9f3137edf794e4eaf6d2a227505eca3474c95baf9c1a90b8303f85', 'potluck-libraries-vs-frameworks-firefox-career-advice-for-teenagers-who-would-win-a-thumb-war-more', '/shows/260 - potluck.md', '2023-10-16 20:07:04.507', '2023-10-27 15:57:54.187', 'TASTY'),
('syntax_podcast_show_00261', 261, 'Hasty Treat - Rural and Mobile Internet Revisited', '2020-06-29 13:00:00.843', 'https://traffic.libsyn.com/syntax/Syntax261.mp3', '\nIn this Hasty Treat, Scott and Wes talk about rural and mobile internet — options, tools, and things to be aware of.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n05:04 - Satellite\n\n* High latency\n* Satellite congestion\n* [Oneweb](https://www.oneweb.world/)\n* [Starlink](https://www.starlink.com/)\n\n08:43 - WISP\n\n* Can be different techs - LTE, LOS, Long range WiFi\n* Local towers put up in town\n* 900mhz, 5 + 2.5gz\n* Pretty cowboy\n\n12:09 - Cellular LTE\n\n* Goes over the cell signal\n* Can be super fast or slow depending on your reception\n* Cell plans can be rate limited\n\n12:52 - Routers\n\n* [WE826-T2](https://www.amazon.com/WE826-Router-Gigabit-Wireless-Routers/dp/B08BLMD955/)\n  * Rooter /  Golden Orb / Wifix\n  * Based on Open WRT\n  * [https://www.ofmodemsandmen.com/](https://www.ofmodemsandmen.com/)\n* [Nighhawk M1](https://www.amazon.com/Netgear-NIGHTHAWK-Hotspot-External-Periodic/dp/B06XBNVVCN/)\n* [ZTE MF288](https://www.amazon.com/Replacement-Battery-MF288-Li3930T44P4h794659-3000mAh/dp/B083SQSZHR/)\n\n17:03 - Modem\n\n* Two types of modems:\n  * Host modems\n  * PCI-e / M2 Cards\n* [Sierra Wireless](https://www.sierrawireless.com/)\n* AT Commands\n* Band locking\n* Enable carrier aggregation\n* Get detailed values on modem power\n* See cell tower IDs\n\n23:16 - Antennas\n\n* [Omni](https://www.amazon.com/s?k=Omni+Antenna&ref=nb_sb_noss_2)\n* [Yagi](https://www.amazon.com/stores/page/32A4E5CB-E026-40E0-93FE-FEFD26C6374A?store_ref=SB_A07709221LB29FD582NYA&pf_rd_p=0695bfd4-f098-403d-ad0f-7db64c30b506&aaxitk=MczmU8WqAxMV-4qwgw6TSg&hsa_cr_id=3364331140501&lp_asins=B07YGPDPW8,B008Z4I7WQ,B008Z5QB96&lp_mat_key=outdoor%20omni%20antenna%202.4%205ghz&lp_query=Omni%20Antenna&lp_slot=auto-sparkle-hsa-tetris&ref_=sbx_be_s_sparkle_td_brand)\n* Gotta get them high\n* Lots of connectors - Type N, SMA, RP SMA\n\n25:47 - Boosters\n\n* Adds noise\n\n26:04 - Plans\n\n* Some plans are phone only\n* Some plans are tower restricted\n* Most Hot spot plans are a rip off\n* [Calyx Institute](https://calyxinstitute.org/)\n* Canada:\n  * [Bell Internet Five](https://www.bell.ca/Bell_Internet)\n  * [Telus Smart Hub](https://www.telus.com/en/bc/internet/smart-hub)\n\n29:27 - Speeds\n\n* Depends on tower, congestion\n* Depends on pre paid, post paid or first responder\n* Depends on if you hit the cap or not\n\n30:15 - Tools:\n\n* [Cell Mapper](https://www.cellmapper.net/map)\n* [LTE Hacks Facebook group](https://www.facebook.com/groups/LTE.HACKS/)\n* [LTE Fix website](https://ltefix.com/)\n\n## Links\n* [Syntax 169: Hasty Treat - Remote Internet](https://syntax.fm/show/169/hasty-treat-remote-internet)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '98b7bd8d7a18e6144abc368c41ae1ac71697589ff65fa77faaec8fd6a05d13e5', 'hasty-treat-rural-and-mobile-internet-revisited', '/shows/261 - rural internet.md', '2023-10-16 20:07:04.547', '2023-10-27 15:57:54.232', 'HASTY'),
('syntax_podcast_show_00262', 262, 'Our React Wish List', '2020-07-01 13:00:00.843', 'https://traffic.libsyn.com/syntax/Syntax262.mp3', '\nIn this episode of Syntax, Scott and Wes talk about what they wish existed in React!\n\n## DevLifts - Sponsor\nRefactor your body with DevLifts. They have a few different programs: 1) [fit.start](https://devlifts.io/join/fitstart) (normally $19/month) has a few options (lean, bodyweight, and strong). Workouts are delivered via email each month, with access to a Slack community for questions and accountability. 2) Premium (normally $199/month) is a custom-tailored option, where you get your workouts and nutrition advice after answering a questionnaire. They also check in with you each week via Slack to see how it\'s going and make changes if necessary. Get 50% off fit.Start plans with code SYNTAX and 50% off Premium with code TASTY.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n### React\n\n03:53 - Unmount delay for animation\n\n06:20 - Suspense with SSR released (or not because I think they are shelving it)\n\n* Dan\'s tweet: [https://twitter.com/dan_abramov/status/1259614150386425858](https://twitter.com/dan_abramov/status/1259614150386425858)\n\n09:24 - File based components\n\n* Like Svelte and Vue\n* This would look like a file with a special scoped `<style>` tag per page.\n\n11:50 - Prevent Default shortcuts\n\n13:00 - No more useIsoLayoutEffect\n\n* useLayoutEffect on SSR should just work without a custom hook\n* Simple data fetching strategy based on promises\n\n15:52 - Recommended hooks\n\n* E.g. \"here is the best way to do things\"\n* Official list of best practice hooks\n\n18:25 - A good form strategy\n\n* Bind inputs to state directly without any change handlers\n* Inputs and forms all around need more magic - it\'s painful\n\n20:43 - Write once deploy everywhere\n\n* Not likely ever\n* E.g. automatic transformation into react-native (obviously not going to happen)\n\n22:28 - Compile time directives\n\n* [https://github.com/bukharim96/directive-x](https://github.com/bukharim96/directive-x)\n\n25:11 - Slots instead of children\n\n* Allows for things like named slots more explicit than children\n\n### JSX\n\n26:44 - Removal of htmlFor, className and all other abominations of html\n\n29:09 - Import Raact from React for JSX to work\n\n* Soon will be fixed [https://github.com/babel/babel/pull/11154](https://github.com/babel/babel/pull/11154)\n  * [react-require](https://www.npmjs.com/package/babel-plugin-react-require)\n\n32:31 - Better conditional / if statement syntax\n\n33:09 - Fragments by default\n\n* Just do it for us - the error message already knows\n\n33:54 - Automatic key ids\n\n* If mapping an object, check for common `_id` or id\n\n36:36 - Simple scoped CSS built in\n\n37:29 - Short hand for props with same name is prop={prop}\n\n39:00 - Prop interpolation without backticks: name=\"$first $last\"\n\n* Or just backticks without brackets name=`${first} ${last}` instead of name={`${first} ${last}`}\n\n### Tooling\n\n39:43 - Story for typescript/prettier/babel\n\n40:11 - Automatic a href client side routing\n\n41:51 - Scaffolding and component generation\n\n## Links\n* [Svelte](https://svelte.dev/)\n* [Vue](https://vuejs.org/)\n* [React Native](https://reactnative.dev/)\n* [NativeScript](https://nativescript.org/)\n* [react-spring](https://www.react-spring.io/)\n* [Paul Henschel](https://twitter.com/0xca0a)\n* Scream Sneeze: [https://twitter.com/morganc_smith/status/1235332301044801538](https://twitter.com/morganc_smith/status/1235332301044801538)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Software Engineering Daily Podcast](https://softwareengineeringdaily.com/)\n* Wes: [PicQuic Screwdriver](https://amzn.to/2MEQiC7)\n\n## Shameless Plugs\n* Scott: [Sapper For Everyone](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Wes\' New Gatsby Course](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8eee3c1aa8442daa17bd5fd5cb3f5c43cd7b5dedd8c707c81587753184d90ac5', 'our-react-wish-list', '/shows/262 - react wish list.md', '2023-10-16 20:07:04.593', '2023-10-27 15:57:54.274', 'TASTY'),
('syntax_podcast_show_00263', 263, 'Hasty Treat - Forms, Captchas, Honeypots, Dealing With Malicious Users and the Sad State of Contact Forms', '2020-07-06 13:00:00.843', 'https://traffic.libsyn.com/syntax/Syntax263.mp3', '\nIn this Hasty Treat, Scott and Wes talk about forms, captchas, dealing with malicious users, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:00 - So you made a form:\n\n1. Contact form\n2. Sales form\n3. Email signup for newsletter\n4. Bug report\n5. Sign up for an account\n6. Password reset\n\n03:00 - Now someone is going to:\n\n1. Have a bot that submits it\n2. Maliciously write a bot that submits thousands\n\n04:14 - So what can you do?\n\n4:54 - Honey pot\n\n* This is a field that is either hidden or you tell the user not to fill in\n* Can goof up autofill\n* Works in many cases\n\n07:37 -  IP Throttle\n\n* Only allow each IP to do an action a certain number or times inside a window\n* You may only try signing up once per 10 mins\n\n09:48 Block known ASN\n\n12:37 - Captcha\n\n* Soft captcha: \"What is 1 plus 1?\"\n* Annoying captcha: Type these letters\n* Google captcha: Train our self driving cars\n* Hidden captcha\n* Cloudflare hCaptcha\n\n## Links\n* [Cloudflare](https://www.cloudflare.com/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Google reCaptcha](https://www.google.com/recaptcha/intro/v3.html)\n* [Cloudflare hCaptcha](https://blog.cloudflare.com/tag/hcaptcha/)\n* [Cloudinary](https://cloudinary.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a22e1bbff16a961d4cd59fb0b6ed6f2ba768241fb3f632909c3bb7898b30d219', 'hasty-treat-forms-captchas-honeypots-dealing-with-malicious-users-and-the-sad-state-of-contact-forms', '/shows/263 - forms.md', '2023-10-16 20:07:04.642', '2023-10-27 15:57:54.314', 'HASTY'),
('syntax_podcast_show_00264', 264, 'Jerome Hardaway + Vets Who Code', '2020-07-08 13:00:00.843', 'https://traffic.libsyn.com/syntax/Syntax264.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Jerome Hardaway about web dev, vets who code, diversity in tech, and more!\n\n## .TECH Domains - Sponsor\nIf you need eyes on your project, you\'ll need a domain, and .TECH is perfect for representing your brand. Find out if your .TECH domain is available at [go.tech/syntax2020](https://go.tech/syntax2020). Use the coupon code Syntax2020 and get 90% off 1- 5- and 10-year domain names.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Guests\n* [Jerome Hardaway](https://twitter.com/JeromeHardaway)\n\n## Show Notes\n\n01:50 - Captain America of Tech\n\n03:25 - Where do you work and what type of stuff do you work on?\n\n08:03 - What was your introduction to programming?\n\n15:46 - When did you start Vets Who Code?\n\n24:13 - What is the stack behind Vets Who Code?\n\n29:56 - How do you help prep vets to get jobs?\n\n41:32 - How can you be an ally and amplify black voices in tech?\n\n50:05 - Everybody against racism\n\n## Links\n* [Vets Who Code](https://vetswhocode.io/)\n* [Quicken Loans](https://www.quickenloans.com/)\n* [Eventbrite](https://www.eventbrite.com/)\n* [Animate.css](https://animate.style/)\n* [Laws of UX](https://lawsofux.com/)\n* [react-spring](https://www.react-spring.io/)\n* [General Assembly Code Bootcamps](https://generalassemb.ly/)\n* [uses.tech](https://uses.tech/)\n* [keycode.info](http://keycode.info/)\n* [Tech Talent Pipeline](https://www.techtalentpipeline.nyc/)\n* [@vetswhocode](https://twitter.com/vetswhocode)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Jerome:\n  * 1: [HBO\'s Watchmen](https://www.hbo.com/watchmen)\n  * 2: [https://vidr.io/](https://vidr.io/)\n* Scott: [Explained on Netflix](https://www.netflix.com/title/80216752)\n* Wes: [Jeremy Fielding YouTube Channel](https://www.youtube.com/channel/UC_SLthyNX_ivd-dmsFgmJVg)\n\n## Shameless Plugs\n* Jerome: [Vets Who Code](https://vetswhocode.io/)\n* Scott: [Design Systems with CSS Variables](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0dd0ff4d3502b531a36d599016d87816fd5c77429d2fa6d0d67a730758d0f932', 'jerome-hardaway-vets-who-code', '/shows/264 - jerome hardaway.md', '2023-10-16 20:07:04.698', '2023-10-27 15:57:54.352', 'TASTY'),
('syntax_podcast_show_00265', 265, 'Hasty Treat - The Domain Name Game', '2020-07-13 13:00:00.954', 'https://traffic.libsyn.com/syntax/Syntax265.mp3', '\nIn this Hasty Treat it\'s another edition of the Top Level Domain Game! \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:25 - How it works\n\nWe pick a TLD from a list, and the other person needs to guess:\n\n1. Is it for a country or business? +5 points\n2. What country, business, or type of business is it for? +5 points\n3. How much per year does it cost to register? You may also say \"unregisterable\" +/- off by $$ [https://www.101domain.com/](https://www.101domain.com/)\n4. Is scott.**_ and wes._** available? -10 points for each\n\n04:00 - .sd\n\n* Scott: 5 + -5 + -126 + -10 + 10 = -126\n\n05:46 - .ong\n\n* Wes: 5 + -5 + -30 + 20 = -10\n\n07:53 - .koeln\n\n* Scott: 5 + -5 + -20 + 20 = -126\n\n09:23 - .co.ke\n\n* Wes:  10 + -15 + 0 = -15\n\n11:00 - .tr \n\n* Scott: 5 + -5 + 0 + 0 = -126\n\n12:25 - .ist\n\n* Wes: -5 + 5 + -10 + 0 = -25\n\n13:57 - .xn—45q11c\n\n* Scott: 5 + 5 + -295 + 10 =  20 = -401\n\n16:40 - .reit\n\n* Wes: 10 + -1460 + 10 = -1465\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5374e4f724e67f2e0739b1a79733bbce1e6f30770493196149233435f1ec1ab5', 'hasty-treat-the-domain-name-game', '/shows/265 - domains.md', '2023-10-16 20:07:04.822', '2023-10-27 15:57:54.452', 'HASTY'),
('syntax_podcast_show_00266', 266, 'Video for the Web 2020 and Beyond', '2020-07-15 13:00:00.954', 'https://traffic.libsyn.com/syntax/Syntax266.mp3', '\nIn this episode of Syntax, Scott and Wes talk about the future of video for the web!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n08:19 - Scott\'s Background in video\n\n* Started editing in middle school\n* Worked professionally as an editor and production assistant for magazine\n* Created specialty flash video players\n* Have been hosting video content since the start of my web career\n\n09:12 - Terminology\n\n* Transcoding - digital to digital conversion of one format to another\n* Ingest - bringing a video to a new facility (ie uploaded video file or data stream to server)\n\n10:51 - Streaming vs Downloading\n\n* Streaming is basically chunks of content at a time, while download is waiting for the entire file to be downloaded before playing.\n\n11:16 - Formats\n\n* MP4\n* WebM\n* DASH\n* HLS (HTTP Live Streaming)\n* m3u8\n\n21:35 - Players\n\n* shaka-player - [https://github.com/google/shaka-player/](https://github.com/google/shaka-player/)\n* hls.js - [https://hls-js.netlify.app/demo/](https://hls-js.netlify.app/demo/)\n* dash.js - [https://github.com/Dash-Industry-Forum/dash.js](https://github.com/Dash-Industry-Forum/dash.js)\n* video.js - [https://videojs.com/](https://videojs.com/)\n* jw player - [https://www.jwplayer.com/](https://www.jwplayer.com/)\n* Bit Movin player - [https://bitmovin.com/docs/player](https://bitmovin.com/docs/player)\n* Ooyala Brightcove - [https://www.brightcove.com/en/](https://www.brightcove.com/en/)\n\n27:48 - Services Roundup 🐴 \n\n* YouTube - free\n* Vimeo - $\n* MUX - $$\n* Wistia - $$$$\n* Cloudflare - $$\n* JW Player - $\n* Cloudinary - $$$\n* Brightcove - $$$\n* Azure - $$\n* Bit Movin - $$\n* AWS - $$\n\n46:59 - What Scott did and how/why\n\n* upchunk\n* Mux\n* Video.js\n* Custom uploader\n* Using polling\n\n## Links\n* [Basecamp](https://basecamp.com/)\n* [Hey](https://hey.com/)\n* [Inbox](https://arstechnica.com/gadgets/2019/04/here-lies-google-inbox-a-radical-rethink-of-how-email-should-work/)\n* [YouTube](http://youtube.com/)\n* [Wistia](https://wistia.com/)\n* [Drip](https://www.drip.com/)\n* [ConvertKit](https://convertkit.com/)\n* [Vimeo](https://vimeo.com/)\n* [https://fronteers.nl/congres/2015/sessions/jsmpeg-by-dominic-szablewski](https://fronteers.nl/congres/2015/sessions/jsmpeg-by-dominic-szablewski)\n* [https://www.vidbeo.com/blog/hls-vs-dash](https://www.vidbeo.com/blog/hls-vs-dash)\n* [HLS Can I Use](https://caniuse.com/#search=hls)\n* [youtube-dl](https://ytdl-org.github.io/youtube-dl/index.html)\n* [Syntax Ep 254: Headless CMS Break Down & Roundup](https://syntax.fm/show/254/headless-cms-break-down-and-roundup)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Mux](https://mux.com/)\n* [Framer Motion](https://www.framer.com/motion/)\n* [Cloudinary](https://cloudinary.com/)\n* [upchunk](https://github.com/muxinc/upchunk)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Flexibility Focus Podcast](https://anchor.fm/flexibility-focus)\n* Wes: [Mustie1 YouTube Channel](https://www.youtube.com/user/mustie1)\n\n## Shameless Plugs\n* Scott: [CSS Variables Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5a4b8244e9190601dcb1f85dc840922a88fe93564f4e467a683db01f3708846c', 'video-for-the-web-2020-and-beyond', '/shows/266 - video.md', '2023-10-16 20:07:04.861', '2023-10-27 15:57:54.495', 'TASTY'),
('syntax_podcast_show_00267', 267, 'Hasty Treat - Turbolinks + Server Generated HTML + JS Sprinkles', '2020-07-20 13:00:00.426', 'https://traffic.libsyn.com/syntax/Syntax267.mp3', '\nIn this Hasty Treat, Scott and Wes talk about turbolinks — what it is, how to use is, popular apps using is, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n02:50 - What is turbolinks?\n* Generate HTML on the server\n* Send it over the ajax request\n* Load it in the page\n\n03:55 - Who is using Turbolinks?\n* [GitHub](https://github.com/)\n* [Basecamp](https://basecamp.com/)\n* [Hey.com](https://hey.com)\n\n05:24 - Turbo Links javascript browser bundle\n* Intercepts any link click\n* Fetches the page HTML\n\n09:19 - JS Sprinkles\n* Vanilla JS\n* [jQuery](https://jquery.com/)\n* [Stimulus](https://stimulusjs.org/)\n* [Alpine JS](https://github.com/alpinejs/alpine)\n\n## Links\n* [Turbolinks](https://github.com/turbolinks/turbolinks)\n* [Syntax 254: Headless CMS Break Down & Roundup](https://syntax.fm/show/254/headless-cms-break-down-and-roundup)\n* [pjax](https://pjax.herokuapp.com/)\n* [Svelte](https://svelte.dev/)\n* [Next.js](https://nextjs.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ae284640381059f6c6105a952821d6620352b2ebf28eeb4a6687594b9851c6b5', 'hasty-treat-turbolinks-server-generated-html-js-sprinkles', '/shows/267 - turbolinks.md', '2023-10-16 20:07:04.910', '2023-10-27 15:57:54.540', 'HASTY'),
('syntax_podcast_show_00268', 268, 'Potluck - Beating Procrastination × Rollup vs Webpack × Leadership × Code Planning × Styled Components × More!', '2020-07-22 13:00:00.426', 'https://traffic.libsyn.com/syntax/Syntax268.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about transitioning to backend dev, tips for beating procrastination, Rollup vs Webpack, code planning, growing as a leader and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n02:33 - I am a junior dev, coming up on two years at my current agency. I have been primarily on the frontend using Angular and templating with Handlebars and other HTML and CSS. I have been asked if I would be interested in moving more into backend, with a focus on Node.js. Outside of creating APIs, what else should I do to learn \"backend\"?\n\n06:08 - I work as a web master and would like to be a frontend developer someday. Currently I am working on a MERN stack app on my own to enhance my skills, but have problems focusing and tend to procrastinate a lot. How do you tackle distractions and get things done? I would appreciate some tips.	\n\n11:00 - Rollup or Webpack? Webpack 5 still doesn\'t seem to support ES6 module output, [as described by Philip Walton](https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/), so instead of upgrading to Webpack 5, this might be a good time to think about switching to Rollup (or Parcel).\n\n13:46 - I have been learning web development (HTML, CSS and JS) and am at a place where I can build simple websites for small businesses, but I feel like a beginner and am wondering if you have any recommendations on courses to get to a more intermediate/advanced level?\n\n18:01 - Why should you choose Styled Components over other ways of writing CSS?\n\n22:56 - What are your thoughts on companies that make senior developer roles require leadership responsibilities? A great technical person does not always make a great leader or visa versa.\n\n26:36 - I am often not good at planning out code from the start. I find that it\'s easier to start coding, write a few lines, run it to see where I\'m at, and carry on. This technique doesn\'t work when I need to wait for a deploy to finish before I can view the result, as it greatly increases dev time. Do you have any advice for what I can do better?\n\n31:43 - I have a very random question. for context I\'m a Mac and Linux user myself. However, recently while building our company application I\'ve noticed that Windows does extremely weird things with font sizes. Since we have a pretty decent Windows user base, obviously this is something my partner and I want to solve. However I\'m very unsure of the best way to handle it. It seems entirely different from user to user. How in the world do we as developers account for these inconsistencies? We have tried vertical media queries that more or less kick them to tablet mode. Obviously this is less than optimal.\n\n37:50 - Are side projects common among developers? I recently mentioned to my boss that I have a few side projects - nothing serious, just for learning mostly - and he said he would rather I didn\'t, and instead focus on my work. He said he hadn\'t really heard of developers doing side projects, and that if I want to work on things that aren\'t our work he has other things I can do.\n\n## Links\n* [inputmag.com](https://inputmag.com)\n* [Focus app](https://apps.apple.com/us/app/focus-time-management/id777233759?mt=12)\n* [TSdx](https://www.npmjs.com/package/tsdx?activeTab=readme)\n* [Rollup](https://rollupjs.org/)\n* [Webapck](https://webpack.js.org/)\n* [Parcel](https://parceljs.org/)\n* [Beginner Javascript](https://beginnerjavascript.com/)\n* [Typescript](https://www.typescriptlang.org/)\n* [Darknet Diaries](https://darknetdiaries.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Malicious Life Podcast](https://malicious.life/)\n* Wes: [LaCie Rugged USB-C External HDD](https://www.amazon.com/s?k=LaCie+Rugged+USB-C&ref=nb_sb_noss)\n\n## Shameless Plugs\n* Scott: [Modern CSS Design Systems](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'fb40d9169da3b8c8ade733398d0d71ed6e7e5f12e0ce511bdc18ba992fd1e57d', 'potluck-beating-procrastination-rollup-vs-webpack-leadership-code-planning-styled-components-more', '/shows/268 - potluck.md', '2023-10-16 20:07:04.948', '2023-10-27 15:57:54.582', 'TASTY'),
('syntax_podcast_show_00269', 269, 'Hasty Treat - Target=_blank security issue? What\'s the deal with noopener and noreferrer?', '2020-07-27 13:00:00.426', 'https://traffic.libsyn.com/syntax/Syntax269.mp3', '\nIn this Hasty Treat, Scott and Wes talk about noopener and noreferrer and why you should use them with links that have blank targets.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:35 - What\'s the big deal?\n\n* If you have a link that is target=\"_blank\" you should add rel=\"noopener\" and rel=\"noreferrer\"\n* Retail Me Not uses it\n* Valid use cases:\n  * Same domain change the page from a popup\n  * Cross domain changing page data\n* Example: [https://mathiasbynens.github.io/rel-noopener/](https://mathiasbynens.github.io/rel-noopener/)\n\n05:39 - Why doesn\'t the browser just fix it?\n\n* Safari did - You can use rel=\"opener\" to allow it\n* Firefox did\n* Chrome hasn\'t yet\n* [https://twitter.com/KittyGiraudel/status/801475801397030912](https://twitter.com/KittyGiraudel/status/801475801397030912)\n\n10:48 - Does this hurt SEO?\n\n* It breaks analytics of the recipient site, turning a referral visit from your site into direct traffic, unless the link has UTM or similar tracking parameters. If you have a site where passing traffic offsite is part of the business model, links need an affiliate id instead.\n\n## Links\n* [@argyleink](https://twitter.com/argyleink)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f873297f0a67c82dff4d05960bf3b3f855315a7ac20471639ddcc5c2bb384c48', 'hasty-treat-target-_blank-security-issue-what-s-the-deal-with-noopener-and-noreferrer', '/shows/269 - target.md', '2023-10-16 20:07:04.989', '2023-10-27 15:57:54.622', 'HASTY'),
('syntax_podcast_show_00270', 270, 'Meteor\'s 2nd Life', '2020-07-29 13:00:00.426', 'https://traffic.libsyn.com/syntax/Syntax270.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Filipe Névola about Meteor and the exciting things happening in the Meteor world!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Guests\n* [Filipe Névola](https://blog.meteor.com/@filipenevola)\n* [@filipenevola](https://twitter.com/filipenevola)\n\n## Show Notes\n\n01:20 - What is your background?\n\n03:41 - What exactly is Meteor?\n\n12:00 - What are the biggest misconceptions of modern meteor?\n\n18:20 - What do you say to people who think Meteor is dead?\n\n21:33 - How does data get from your Meteor into your React app?\n\n* Example of getting data on client side\n\n```jsx\nimport { useTracker } from \'meteor/react-meteor-data\'\n\n// Hook, basic use, everything in one component\nconst MyProtectedPage = (pageId) => {\n  const { user, isLoggedIn, page } = useTracker(() => {\n    // The publication must also be secure\n    const subscription = Meteor.subscribe(\'page\', pageId)\n    const page = Pages.findOne({ _id: pageId })\n    const user = Meteor.user()\n    const userId = Meteor.userId()\n    const isLoggingIn = Meteor.loggingIn()\n    return {\n      page,\n      isLoading: !subscription.ready(),\n      user,\n      userId,\n      isLoggingIn,\n      isLoggedIn: !!userId\n    }\n  }, [pageId])\n  \n  if (!isLoggedIn) {\n    return <div>\n      <Link to=\"/register\">Create an Account</Link>\n      <Link to=\"/login\">Log in</Link>\n    </div>\n  }\n  \n  return <div>\n    <h1>{page.title}</h1>\n    <p>{page.content}</p>\n    <a href=\"#\" onClick={(e) => { e.preventDefault(); Meteor.logout(); }}>Log out ({user.username})</a>\n  </div>\n}\n```\n\n27:50 - What do you think is the ideal usecase for Meteor?\n\n31:09 - Why did Meteor 1.0 fail to maintain hype?\n\n36:41 - What does Meteor\'s future look like?\n\n45:27 - Are there any plans to integrate serverless into Meteor?\n\n46:55 - Any little known features of Meteor that people might be interested in?\n\n## Links\n* [Meteor](https://www.meteor.com/)\n* [Tiny Capital](https://www.tinycapital.com/)\n* [Deno](https://deno.land/)\n* [Meteor Galaxy](https://www.meteor.com/hosting)\n* [Mongoose](https://mongoosejs.com/)\n* [Parcel](https://parceljs.org/)\n* [Apollo](https://www.apollographql.com/)\n* [MongoDB](https://www.mongodb.com/)\n* [Svelte](https://svelte.dev/)\n* [Meteor repo](https://github.com/meteor/meteor)\n* [Meteor Up](http://meteor-up.com/)\n* [https://howtocreateanapp.dev/](https://howtocreateanapp.dev/)\n* [https://www.youtube.com/channel/UC8A0hHUaCBvuBs0eA5g_q3A](https://www.youtube.com/channel/UC8A0hHUaCBvuBs0eA5g_q3A)\n* [Cordova](https://cordova.apache.org/)\n* [Missive](https://missiveapp.com/)\n* [Meteor Forums](https://forums.meteor.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Filipe:\n  * 1: [Galaxy](https://www.meteor.com/hosting)\n  * 2: [Terere](https://www.196flavors.com/paraguay-terere/)\n* Scott: [Amplifi Alien Router](https://amplifi.com/alien)\n* Wes: [Parcel - Global Package Tracking](https://parcelapp.net/)\n\n## Shameless Plugs\n* Filipe: [@filipenevola](https://twitter.com/filipenevola)\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c662c229fa9575d7e081dadf8ddbfc7f0dbf8a89db8f2356bfb3f25a1363cbaf', 'meteor-s-2nd-life', '/shows/270 - meteor.md', '2023-10-16 20:07:05.032', '2023-10-27 15:57:54.663', 'TASTY'),
('syntax_podcast_show_00271', 271, 'Hasty Treat - Upgrading Next.js Syntax Site', '2020-08-03 13:00:00.595', 'https://traffic.libsyn.com/syntax/Syntax271.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their experience upgrading Syntax.fm and some of the site\'s big changes. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:26 - The old Syntax site\n\n* Next.js\n* Custom server for\n  * API - shows, Latest shows, sick picks\n  * On-demand page builds\n  * Custom routing\n\n06:41 - The new Syntax site\n\n* Next.js has solved those things now, no need for a custom server. \n  * API Routes\n  * On-demand page builds: SSG with Next.js. It\'s a server, but caches the page builds. Releasing the shows happens with revalidation. It\'s statically generated like Gatsby, but you can also choose \n  * Custom routing is now done with [pages]\n* Very fast to load\n* Very fast to build\n* Very fast to deploy\n* It\'s now a \"dynamic static site\"\n* Zeit Now 1 to \"Vercel\"\n* Huge thanks to [Tim Neutkens](https://twitter.com/timneutkens) and [Luis Alvarez](https://twitter.com/luis_fades) from Vercel for making it happen.\n\n13:23 - Why not:\n\n* Gatsby\n  * Entire site would need to be regenerated exactly at 9am eastern\n  * API of the site would need to be done with something else like Netlify Functions - not nearly as nice as Next API routes\n* Sapper\n\n## Links\n* [Next.js](https://nextjs.org/)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Sapper](https://sapper.svelte.dev/)\n* [Vercel](https://vercel.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '9b93725c820fbb8804e7dacf376e6fc5fcfa3d9f6f985453ef5d357da729d346', 'hasty-treat-upgrading-next-js-syntax-site', '/shows/271 - upgrading.md', '2023-10-16 20:07:05.075', '2023-10-27 15:57:54.774', 'HASTY'),
('syntax_podcast_show_00272', 272, 'React State Round Up', '2020-08-05 13:00:00.603', 'https://traffic.libsyn.com/syntax/Syntax272.mp3', '\nIn this episode of Syntax, Scott and Wes talk about React State libraries, should you use them, pros, cons, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n01:24 - [Context](https://reactjs.org/docs/context.html)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: Yes \n* Pros\n  * Built into React\n  * As simple or complex as you want\n* Cons\n  * Takes effort to optimize\n  * Takes effort to plan and organize aka can get out of hand quickly\n\n08:49 - [Redux](https://react-redux.js.org/)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: Yes\n* Pros \n  * Huge user base\n  * Legacy of growth and improvements\n  * Modern API\n  * Even though it\'s hard to learn, it has a clear \"how to build with it\" path\n  * Dev tools\n* Cons\n  * Complex\n  * Thing that calls a thing that calls a thing that calls a thing\n  * Confusion around what additional packages are needed, e.g. ducks, saga, whatever\n\n17:08 - [XState](https://xstate.js.org/)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: No\n* Pros\n  * Enforces solid design patterns\n  * Very safe\n  * Awesome tooling like UI to see state machines\n  * [https://xstate.js.org/viz/](https://xstate.js.org/viz/)\n* Cons\n  * Knowledge overhead - having to understand state machines\n  * Complex syntax\n\n23:26 - [Zustand](https://github.com/react-spring/zustand)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: No\n* Pros\n  * Fast, scalable, easy to use\n  * Simpler\n  * No context providers\n* Cons\n  * Smaller community 2.6k stars on Github\n  * Can inform components transiently (without causing render)\n\n27:04 - [Apollo Client](https://www.apollographql.com/docs/react/)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: Yes\n* Pros \n  * Fits in well with your GraphQL API\n  * Dev tools\n* Cons\n  * Complex, large syntax for simple operations\n  * Dev tools\n  * SSR story is really complex. It\'s hard because they aren\'t also the framework. \n\n31:35 - [RXJS](https://github.com/ReactiveX/rxjs)\n\n* Have we used?\n  * Scott: No\n  * Wes: No\n* Observable based\n\n33:02 - [React Query](https://github.com/tannerlinsley/react-query)\n\n* Have we used?\n  * Scott: No\n  * Wes: \n* Pros\n  * Fast growing community\n  * Awesome dev tools\n* Cons\n  * Not sure if this can be used for application state or just data\n\n35:37 - [Recoil](https://recoiljs.org/)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: No\n* Pros\n  * Very good for complex, splintered state needs\n* Cons\n  * Overly complex for most use cases\n\n38:34 - [MobX](https://mobx.js.org/)\n\n* Have we used?\n  * Scott: No\n  * Wes: No\n* Pros\n  * Big community\n  * Not just React\n  * Powerful\n  * Observable capabilities\n* Cons\n  * Uses decorators, but doesn\'t have to? \n\n43:15 - [Easy Peasy](https://easy-peasy.now.sh/)\n\n* Have we used?\n  * Scott: No\n  * Wes: No\n* Pros\n  * Simple API (easy peasy)\n  * Redux dev tools supported\n\n45:06 - [Meteor ReactiveDict](https://docs.meteor.com/api/reactive-dict.html) / [ReactiveVar](https://docs.meteor.com/api/reactive-var.html)\n\n* Have we used?\n  * Scott: Yes\n  * Wes: No\n* Pros\n  * Very simple\n  * Get, set\n  * Is Reactive\n* Cons\n  * Lock-in to Meteor\n\n46:19 - Final Thoughts On State\n\n* Wes: Go for simpler solutions\n* Scott: I think application state should be separate from application data, but maybe that\'s because there isn\'t a solution that does both how I want\n\n## Links\n* [Svelte](https://svelte.dev/)\n* [Meteor](https://www.meteor.com/)\n* [Syntax 206: State Machines, CSS and Animations with David K Piano](https://syntax.fm/show/206/state-machines-css-and-animations-with-david-k-piano)\n* [Syntax 268: Potluck - Beating Procrastination × Rollup vs Webpack × Leadership × Code Planning × Styled Components × More!](https://syntax.fm/show/268/potluck-beating-procrastination-rollup-vs-webpack-leadership-code-planning-styled-components-more)\n* [Zustand CodeSandbox](https://codesandbox.io/s/v8pjv251w7)\n* [swr](https://github.com/vercel/swr)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Becoming Bond](https://www.imdb.com/title/tt6110504/)\n* Wes: [IRWIN VISE-GRIP GrooveLock Pliers Set](https://amzn.to/2ZjPybo) \n\n## Shameless Plugs\n* Scott: [Modern CSS Design Systems](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '09bc7cade51710ac5a9606ed27620db832f2b3981e5dc28fc76f4fb10239778c', 'react-state-round-up', '/shows/272 - react roundup.md', '2023-10-16 20:07:05.119', '2023-10-27 15:57:54.816', 'TASTY'),
('syntax_podcast_show_00273', 273, 'Hasty Treat - How To Refine Your Process', '2020-08-10 13:00:00.502', 'https://traffic.libsyn.com/syntax/Syntax273.mp3', '\nIn this Hasty Treat, Scott and Wes talk about refining your processes, how to evaluate them, make them better, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n04:18 - Find slow process\n* Getting through email\n* Cleaning my desk\n\n06:29 - Set clear goals (smart goals)\n* Is my inbox less crazy?\n* Don\'t spend too much time\n* Do a 30-day challenge\n\n09:46 - Ask around\n* What are people you know using and why\n* Time-blocking\n* Batching\n* Eat that frog\n\n## Links\n* [Streaks](https://streaksapp.com/)\n* [Matt Cutts — Try something new for 30 days](https://www.ted.com/talks/matt_cutts_try_something_new_for_30_days)\n* [1Writer](https://1writerapp.com/)\n* [Notable](https://notable.app/)\n* [Dropbox](https://www.dropbox.com/)\n* [Notion](https://www.notion.so/)\n* [Obsidian](https://obsidian.md/)\n* [Todoist](https://todoist.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '0df60545f589c661d64d76f8b24db02f08fa58ffb4bae055a94f22e1a05dac96', 'hasty-treat-how-to-refine-your-process', '/shows/273 - process.md', '2023-10-16 20:07:05.164', '2023-10-27 15:57:54.860', 'HASTY'),
('syntax_podcast_show_00274', 274, 'How does stuff get added to CSS? Adam Argyle answers!', '2020-08-12 13:00:00.502', 'https://traffic.libsyn.com/syntax/Syntax274.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Adam Argyle about how stuff gets added to CSS.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n* [Adam Argyle](https://twitter.com/argyleink)\n\n## Show Notes\n\n01:48 - Who are you and what do you do?\n\n04:13 - How does stuff get added to CSS?\n\n06:44 - Github issue proposal or public document\n* Shares use case\n* Problem made succinct\n* StrawMan solution\n* JS demo\n\n10:12 - Time\n* Multiple proposals\n* Comments\n* Back and forth\n* Bikeshedding\n\n20:00 - Editor’s draft spec (Stage 1)\n* CSS typed\n* Examples\n* Provided code logic\n* Implementor interest\n  * Can go stale\n  * Explainer\n* Implementor\n  * Prototype behind flags in browser\n  * Intent to Prototype (I2P)\n\n24:42 - Working Draft (Stage 2)\n* WPTs\n* Prototype behind flags in browser\n* Needs two or more to graduate\n* Intent to Ship (I2S)\n\n24:54 - Conference Calls\n* Around 10 items to discuss\n  * Issues or proposals\n* Flexible list\n  * Things can be injected as emergency\n  * Things can get punted to the next call\n\n25:26 - Face 2 Face (F2F)\n* Four times a year\n* Presentations\n* Breakout sessions\n* Houdini focus groups, etc\n* Try to resolve as many Github issues as possible\n\n27:34 - Candidate Recommendation (Stage 3)\n* Could still be behind a flag\n  * Edge cases are being worked through\n  * WPTs and standards are being nudged into a final state\n\n44:20 - Roles\n* Spec author\n* Community Member\n  * Print\n  * Color\n  * Internationalization\n  * Box Model\n  * AOM\n  * JS APIs\n  * Renderers\n  * etc\n* Implementor\n* It’s like pub/sub, where spec authors pub and implementors sub, and the community tries to help shape the message that’s published while supporting the subscribers who need to implement and make it real\n\n46:32 - Questions\n* What language is CSS written in?\n* What\'s the deal with Houdini?\n\n\n## Links\n* [https://github.com/w3c/csswg-drafts](https://github.com/w3c/csswg-drafts)\n* [@rachelandrew](https://twitter.com/rachelandrew)\n* [@hj_chen](https://twitter.com/hj_chen)\n* [Incomplete List of Mistakes in the Design of CSS](https://wiki.csswg.org/ideas/mistakes)\n* [10 Things I Regret About Node](https://www.youtube.com/watch?v=M3BM9TB-8yA)\n* [https://ishoudinireadyyet.com/](https://ishoudinireadyyet.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Adam [Wok](https://www.amazon.com/s?k=wok)\n* Scott: [Balance Pad](https://amzn.to/2YLNFVN)\n* Wes: [Security Bit Set](https://amzn.to/2VtFaww)\n\n## Shameless Plugs\n* Adam: [The CSS Podcast](https://thecsspodcast.libsyn.com/)\n* Scott: [CSS Design Systems](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e178e4519b4c255b20419b2a53cb59f4041d51212d095598c5d6814d932fabde', 'how-does-stuff-get-added-to-css-adam-argyle-answers', '/shows/274 - css.md', '2023-10-16 20:07:05.211', '2023-10-27 15:57:54.903', 'TASTY'),
('syntax_podcast_show_00275', 275, 'Hasty Treat - Gatsby Tips', '2020-08-17 13:00:00.031', 'https://traffic.libsyn.com/syntax/Syntax275.mp3', '\nIn this Hasty Treat, Scott and Wes talk about tips and tricks for using Gatsby in your projects\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:02 - React Helmet\n* Make a re-usable SEO component that sets defaults. Spread children to override.\n\n04:27 - When in doubt, stop the build and restart\n* Gatsby clean\n* Nuke node_modules + package-lock\n\n05:34 - Use ESM to use ES Modules everywhere - share functions between gatsby-node and gatsby-browser\n\n06:44 - Run the build command locally to troubleshoot prod\n* Dev mode isn\'t SSG\'d - people overlook this\n\n08:06 - Wrap your layout automatically in gatsby-ssr and gatbsy-browser\n* wrapPageElement and wrapRootElement\n\n09:50 - Consider just adding the layout component manually to each page\n* This will allow you to skip the layout if you need to have a page that isn\'t typical \n\n11:21 - Layout is not suitable for unmount animations\n* Orchestrating individual component animations in Gatsby isn\'t easy, use wrapPageElement to write your animations or delays for internally unmounted components.\n\n12:59 - use onCreatePage to pass context to the layout\n\n```jsx\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage } = actions;\n\n  if (page.path.match(/thumbnail/)) {\n    page.context.layout = \'thumbnail\';\n    createPage(page);\n  }\n};\n```\n\n14:03 - You don\'t have to query for everything\n* Hard-coding data in html/jsx is super valid\n\n15:32 - Gatsby Parallel Runner\n* For lots of images\n\n## Links\n* [Gridsom](https://gridsome.org/)\n* [Google Cloud](https://cloud.google.com/)\n* [Cloudinary](https://cloudinary.com/)\n* [Sanity Image](https://www.sanity.io/docs/presenting-images)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c57e7af983fb0ad2e08264f5a39035be33d117b1f6d6ecd3d31bf6dd02958942', 'hasty-treat-gatsby-tips', '/shows/275 - gatsby.md', '2023-10-16 20:07:05.261', '2023-10-27 15:57:55.023', 'HASTY'),
('syntax_podcast_show_00276', 276, 'Potluck - Subscriptions × ES Modules in Node × Chicken Thigh × Being a Good Dad × Refactoring × More!', '2020-08-19 13:00:00.031', 'https://traffic.libsyn.com/syntax/Syntax276.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about React subscriptions, ES Modules in Node, how to cook a chicken thigh, being a good dad and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Stackbit - Sponsor\nStackbit offers developers tools that enable things like inline content editing, live previewing of content changes, and collaboration features on your Jamstack site, without code changes. That\'s why\nStackbit is the best way to Jamstack. [stackbit.com](https://www.stackbit.com/).\n\n## Show Notes\n\n02:11 - What are \"subscriptions\" in React, or in programming in general? The React docs mention that setting up a subscription is an example of a side effect, but what exactly is a subscription, and how do you set one up?	\n\n05:43 - Using the latest node esm imports, is it possible to use aliases? Using the old require() syntax I used the npm package module-alias (https://www.npmjs.com/package/module-alias), but I cannot seem to find a solution for node v14 imports. In a deeply nested file, I find the import \'../../../some/folder\' syntax to be awful compared to require(\'@/some/folder\').\n\n09:20 - I\'ve been a full-time developer for over 10 years and my company has a fairly flat hierarchy. I want to take on more responsibility (and salary) but my company doesn\'t have anything like a \"lead developer\" position. Any ideas for how to move up without switching companies? I know my boss would be receptive if I came to him with a pitch, but we work full stack so it feels like I\'m already doing it all.\n\n12:59 - In Wes’ website episode, he mentioned using Gatsby Parallels for images. Why not git LFS?	\n\n17:25 - For Wes: Any Big Green Egg tips for beginners? I just ordered a kamado style grill and I\'d appreciate any tasty tips you\'ve got.	\n\n22:45 - Inline code is considered harmful because of potential XSS attacks. Lighthouse recommends inlining critical CSS to improve page speed. What do you think about this tradeoff?\n\n26:30 - What advice would both of you have for being a first-time father, and how can I best prepare? My wife is pregnant, and we are both very excited! I want to do the best I can at being a good father. Our baby is due in January. As both of you are fathers (multiple times), I would love to hear your thoughts.\n\n32:58 - Are present web developers merely crud bastards for corporate culture? If not, What entrepreneurial opportunities are open with Javascript and hooking up React with backend Node/Laravel and reading the Google Map docs? Of course the list isn\'t exhaustive but you get my point right? Note: I\'m not interested in selling courses and creating frameworks.\n\n37:08 - Do you have any use for ES6 Generators and `yield`? It seems that they are a mechanism for async-await \"under the hood,\" so using \'async-await\' is probably sufficient.	\n\n39:10 - With a legacy project that has old build dependencies how do you decide when to retool and fix all the npm audit issues?\n\n46:10 - In what instances do you prefer to use rem vs em vs pixels for font size? I usually think about it like so: if I\'m okay with an element\'s font size being sized based on the parent, then I\'ll use em. If not, then I\'ll use rem. I almost never use pixels anymore except sometimes on the html element. But even then, I usually use a percentage. In practice, I\'ve found it a bit hard to gauge what to expect with ems because of nesting issues. So, I\'ve mostly been leaning towards rem. Though I also understand that using rems can be less modular. How do you guys make the decision?\n\n52:49 - Hello chaps. Thank you so much for the show, I\'ve learned an awful lot through listening. I\'ve been dabbling in development for some time now and have taken on a project for an Express site which aside from a few static pages will include a shop with a small number of items (<5), customer dashboard (order tracking and submitting supplementary order info), and an image centric journal/blog section. I\'ve listened and re-listened to your CMS roundup which is great, but having worked through Wes\' Node course I\'m kinda thinking why would I spend the time integrating a CMS when I can just build an \'Add Post\' page for admin users, save the posts in Mongo, upload images to my server, and use Cloudflare\'s free tier CDN. Please explain why this is (or isn\'t🤷‍♂️) a bad idea, and more generally share your wisdom on when a CMS is or isn\'t actually necessary. PEAACE!\n\n## Links\n* [Meteor](https://www.meteor.com/)\n* [Babel](https://babeljs.io/)\n* [https://nodejs.org/api/esm.html#esm_transpiler_loader](https://nodejs.org/api/esm.html#esm_transpiler_loader) \n* [Gatsby Parallel Runner](https://github.com/netlify/gatsby-parallel-runner)\n* [Git LFS](https://git-lfs.github.com/)\n* [Syntax 247: Hasty Treat - Wes\' New Personal Website](https://syntax.fm/show/247/hasty-treat-wes-new-personal-website)\n* [Big Green Egg](https://biggreenegg.com/)\n* [Mongoose](https://mongoosejs.com/)\n* [Obsidian](https://obsidian.md/)\n* [Notion](https://www.notion.so/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Foam](https://foambubble.github.io/foam/)\n* Wes: [How to use a multimeter](https://www.youtube.com/watch?v=TdUK6RPdIrA)\n\n## Shameless Plugs\n* Scott: [Modern Design Systems](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ad36d57ac10acf46483dbce41bcc9f91933dc1f2925f9ef5b0ceccc4ce181698', 'potluck-subscriptions-es-modules-in-node-chicken-thigh-being-a-good-dad-refactoring-more', '/shows/276 - potluck.md', '2023-10-16 20:07:05.314', '2023-10-27 15:57:55.064', 'TASTY'),
('syntax_podcast_show_00277', 277, 'Hasty Treat - Stump\'d', '2020-08-24 13:00:00.463', 'https://traffic.libsyn.com/syntax/Syntax277.mp3', '\nIn this Hasty Treat, Scott and Wes are back with another edition of Stump\'d! where they try to stump each other with interview questions. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n03:28 - What is the difference between HTML and React event handling?\n\n05:55 - What are JavaScript data types?\n\n07:00 - In which states can a Promise be?\n\n07:48 - Discuss the differences between an HTML specification and a browser’s implementation thereof.\n\n09:14 - What is a stateless component?\n\n10:10 - What is a pure function?\n\n10:51 - What is the output of the following code?\n\n```\nconst a = [1, 2, 3]\nconst b = [1, 2, 3]\nconst c = \"1,2,3\"\n\nconsole.log(a == c)\nconsole.log(a == b)\n```\n\n13:35 - What is memoization?\n\n15:15 - How do you pass an argument to an event handler in React?\n\n15:59 - What is HTML5 Web Storage? Explain localStorage and sessionStorage.\n\n## Links\n* [30 Seconds of Interviews](https://30secondsofinterviews.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a27e20d79b1012dcd01fb055c27da217999d9f5447a622f97886bff0f3a75dbb', 'hasty-treat-stump-d', '/shows/277 - stumpd.md', '2023-10-16 20:07:05.373', '2023-10-27 15:57:55.115', 'HASTY'),
('syntax_podcast_show_00278', 278, 'Potluck - MDX × Portfolio Projects × Code Commenting × CSS Properties × Reusable Components × More!', '2020-08-26 13:00:00.463', 'https://traffic.libsyn.com/syntax/Syntax278.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about MDX, portfolio projects for junior devs, code commenting, CSS property order, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n02:18 - I\'m curious to know what you guys think of [MDX](https://mdxjs.com/). I\'d love to learn more about pros and cons, if you guys had a chance to use it.	\n\n08:49 - Where would you put business logic in Vue.js middle- or large-scale applications? I try to put business logic in store but it makes hard to maintain such store, even with splitting to actions/getters/mutations files. I ended up using vanilla JavaScript files, where each file is a class singleton. I was wondering: is it a good solution or do you have better alternatives in mind?\n\n12:07 - I commonly find myself engineering complex programs and left flabbergasted on how to express these ideas to other people when the need arises that I need to explain them and remember why I did them a certain way. How can I get better at conceptualizing intricate design patterns or functions as well as have better memory recall for these abstractions?\n\n18:02 - Can I get recommendations for a junior dev portfolio? What five projects you would recommend to build that will significantly help in getting a job as a front-end web dev and why?\n\n21:13 - I am now working on building a minesweeper game with React. You know how on a computer you right click to flag and disable a cell? I am thinking of doing a press and hold on a mobile device instead. I am not sure how to do either (the right click logic or the press and hold). How can you listen for these events in React? Can you help with some guidance or resources? :)	\n\n30:00 - What are your thoughts on [SailsJS](https://sailsjs.com/) as a Rails-equivalent framework in Javascript? They recently released version 1.0 and I\'m wondering if I should start using it in projects or if I should wait to see if it pans out.\n\n34:35 - How do you go about creating reusable React components (reusable from project to project)? Do you create packages and publish them to NPM? Or do you have another method for storing code for components that you will likely need to use again?	\n\n38:33 - Thoughts on shadow dom / custom elements? Would you use them in your own projects?\n\n40:49 - How do you organize CSS properties within a rule and why? Random, alphabetical, logical groupings, etc.	\n\n46:04 - Have u ever used the 2nd parameter of JSON.stringify for anything useful?	\n\n48:00 - Getting my first dev job at an actual software company a year ago opened my eyes to the vast difference between educational repos and the absolute jungle that can be enterprise code bases. I\'ve also learned the importance of writing code that will be readable later - ensuring any hacky workaround is replaced with a pattern seen elsewhere in the code base, etc. My question is - are there resources on these sorts of topics for folks trying to break into the industry? A lot of tech topics revolve around how to get your code to run, which feels to me like only half the battle. Where can juniors find resources on robustness?\n\n## Links\n* [https://github.com/jxnblk/mdx-deck](https://github.com/jxnblk/mdx-deck)\n* [https://mdsvex.com/](https://mdsvex.com/)\n* [Spectacle](https://formidable.com/open-source/spectacle/)\n* [MDsveX](https://github.com/pngwn/MDsveX)\n* [Vue.js](https://vuejs.org/)\n* [Redux](https://redux.js.org/)\n* [VueX](https://vuex.vuejs.org/)\n* [Better Comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n* [Kap](https://getkap.co/)\n* [Redwood.js](https://redwoodjs.com/)\n* [Blitz.js](https://blitzjs.com/)\n* [GraphQL](https://graphql.org/)\n* [https://github.com/ryanmcdermott/clean-code-javascript](https://github.com/ryanmcdermott/clean-code-javascript)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Easy Snippet](https://marketplace.visualstudio.com/items?itemName=inu1255.easy-snippet)\n* Wes: [WOW Pool Noodles](https://www.amazon.com/17-2062LG-Foam-Pool-Noodle-Green/dp/B01N5USCX3/)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '96d485d093e364970e2c489d787a37786bbe06f2a9ff1c77ff2fef5f1ffc9d4f', 'potluck-mdx-portfolio-projects-code-commenting-css-properties-reusable-components-more', '/shows/278 - potluck.md', '2023-10-16 20:07:05.418', '2023-10-27 15:57:55.152', 'TASTY'),
('syntax_podcast_show_00279', 279, 'Hasty Treat - End of Season Wrap Up', '2020-08-31 13:00:00.529', 'https://traffic.libsyn.com/syntax/Syntax279.mp3', '\nIn this Hasty Treat, Scott and Wes wrap up season one of the podcast and talk about what\'s coming.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n01:32 - Plans for the Fall\n\n06:59 - Fav Hasty\n* Scott\n  * [Ep 161: Hasty Treat - VSCode Extensions & Themes](https://syntax.fm/show/161/hasty-treat-vscode-extensions-and-themes)\n  * [Ep 165: Hasty Treat - VSCode Treats Part 2](https://syntax.fm/show/165/hasty-treat-vscode-treats-part-2)\n  * [Ep 167: Hasty Treat - VSCode Love Part 3](https://syntax.fm/show/167/hasty-treat-vscode-love-part-3)\n  * [Ep 277: Hasty Treat - 5 Things That Make Your Site Slow](https://syntax.fm/show/239/hasty-treat-5-things-that-make-your-site-slow)\n* Wes\n  * [Ep 211: Hasty Treat - Modules in Node](https://syntax.fm/show/211/hasty-treat-modules-in-node)\n\n08:55 - Fav Tasty\n* Scott\n  * [Ep 236: Mental Health and Dev ft Dr. Courtney Tolinski - Depression, Anxiety, Imposter Syndrome, Focus, Motivation, Burnout](https://syntax.fm/show/236/mental-health-and-dev-ft-dr-courtney-tolinski-depression-anxiety-imposter-syndrome-focus-motivation-burnout)\n  * [Ep 250: Scott Teaches Wes Svelte and Sapper](https://syntax.fm/show/250/scott-teaches-wes-svelte-and-sapper)\n* Wes\n  * [Ep 224: Serverless / Cloud Functions - Part 1](https://syntax.fm/show/224/serverless-cloud-functions-part-1)\n  * [Ep 256: WebRTC and Peer-to-Peer Video Calling with Ian Ramzy](https://syntax.fm/show/256/webrtc-and-peer-to-peer-video-calling-with-ian-ramzy)\n\n10:22 - Top Episodes of 2020\n* 10: [Ep 214: 2020 Fitness](https://syntax.fm/show/214/2020-fitness)\n* 09: [Ep 228: More on Severless - Databases × Files × Secrets × Auth × More!](https://syntax.fm/show/228/more-on-severless-databases-files-secrets-auth-more)\n* 08: [Ep 220: The Synology Show - Backups and Home Server](https://syntax.fm/show/220/the-synology-show-backups-and-home-server)\n* 07: [Ep 222: Are Web Dev GUIs Going to Replace Us?](https://syntax.fm/show/222/are-web-dev-guis-going-to-replace-us)\n* 06: [Ep 210: Potluck - Fonts × Frameworks × Teas × Coding Subscriptions × Client Work × More!](https://syntax.fm/show/210/potluck-fonts-frameworks-teas-coding-subscriptions-client-work-more)\n* 05: [Ep 212: Pika Pkg](https://syntax.fm/show/212/pika-pkg)\n* 04: [Ep 224: Serverless / Cloud Functions Part 1](https://syntax.fm/show/224/serverless-cloud-functions-part-1)\n* 03: [Ep 218: Potluck - Dev Culture Fit × Slack Communities × Vanilla JS × Backpacks × Raspberry Pi × More!](https://syntax.fm/show/218/potluck-dev-culture-fit-slack-communities-vanilla-js-backpacks-raspberry-pi-more)\n* 02: [Ep 226: Potluck - Next vs Gatsby × Headless CMS × Vue.js × Is Ruby on Rails still good? × More!](https://syntax.fm/show/226/potluck-next-vs-gatsby-headless-cms-vue-js-is-ruby-on-rails-still-good-more)\n* 01: [Ep 216: Tech to Watch in 2020](https://syntax.fm/show/216/tech-to-watch-in-2020)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '62d5cfe4a061a5a4db739137f1964be6b48b97bbdf92928b6b3b1c96145cfab4', 'hasty-treat-end-of-season-wrap-up', '/shows/279 - season wrap.md', '2023-10-16 20:07:05.464', '2023-10-27 15:57:55.189', 'HASTY'),
('syntax_podcast_show_00280', 280, 'Potluck - RIP Firefox? × Safari × Changing Careers × Regression Testing × Google Analytics Alternatives × Malicious Github Users? × Mac vs Windows × More!', '2020-09-02 13:00:00.439', 'https://traffic.libsyn.com/syntax/Syntax280.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about the recent Mozilla layoffs, Safari, finding time to learn coding, Google Analytics alternatives, malicious Github users, and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n01:15 - What are your guy\'s thoughts on Mozzila\'s layoffs and how it will affect developers?\n\n08:42 - Right now I am a math teacher. I am married with 2 kids (3 and 1) so finding time to code is difficult. My current situation includes waking up at 4:30 am everyday just to get in some time before the kids wake up. Do either of you have any tips about finding a balance between raising kids, getting stuff done around the house, having a full time job and trying to teach yourself web development to transition into a different career?\n\n13:23 - If you had to use a drag-n-drop framework using React, which one would you choose?\n\n15:49 - E2E vs Visual Regression Testing? At which web-app development cycle to implement each? Best tools open source vs purchase?\n\n20:36 - I teach a Highschool course in web development. For a group of students who have a solid knowledge of HTML/CSS and a decent understanding of JavaScript, would Svelte be a good framework for entering into component-based development for the first time?\n\n22:33 - What\'s a good Google Analytics alternative in 2020? I have a site on Netlify that the $9/mo seems a bit steep for, for what the site is, and flipping the domain through Cloudflare just for the analytics seems crazy; but is it worth it? Alternatives would be awesome, as I\'d love to get off the Google overlords.\n\n29:22 - I have noticed about a dozen to 100 unique clones of my git repos after each push. It doesn’t matter if the repo is initialized, picture added or the readme updated. The repos are still cloned. The traffic section shows the views to my repo at 1 sometimes 2. Is this normal? Is this how interested employers keep tabs on you? Are there a lot of malicious git users? What is happening?\n\n32:30 - With Apple switching to their own processors is it silly for anyone to buy a Mac for development before that releases? Do you guys have experience with Windows, and which would you still prefer today if you needed to buy?\n\n40:28 - Have you ever been approached by or heard of GitAds.io? They\'re trying to pay developers to put ads onto popular open source libraries on Github, and they approached me recently, and I wasn\'t sure what to think about them. What do you think?\n\n45:16 - I just listened to your TLD game. It made me wonder your opinions on personal site domain names? Should it always try to be yourname.dev? What about .me or other domains?\n\n47:53 - What\'s the best way to introduce new technology or processes to a team?\n\n## Links\n* [Rust](https://www.rust-lang.org/)\n* [Firefox](https://www.mozilla.org/en-US/firefox/)\n* [MDN](https://developer.mozilla.org/)\n* [Jen Simmons](https://twitter.com/jensimmons)\n* [Safari](https://www.apple.com/safari/)\n* [React DnD](https://react-dnd.github.io/react-dnd/about)\n* [React Beautiful DnD](https://github.com/atlassian/react-beautiful-dnd)\n* [React Spring](https://www.react-spring.io/)\n* [Framer Motion](https://www.framer.com/motion/)\n* [Cypress](https://www.cypress.io/)\n* [Percy.io](https://percy.io/)\n* [Svelte](https://svelte.dev/)\n* [Heap](https://heap.io/)\n* [Fathom](https://usefathom.com/ref/2XTH1G)\n* [GitAds.io](https://www.gitads.io/)\n* [.TECH](https://get.tech/)\n* [Syntax 179: Hasty Treat - The TLD Game](https://syntax.fm/show/179/hasty-treat-the-tld-game)\n* [Javascript30](https://javascript30.com/)\n* [Syntax 206: Hasty Treat - The New MacBook Pro for Web Development](https://syntax.fm/show/205/hasty-treat-the-new-macbook-pro-for-web-development)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Turbo Boost Switcher for Mac OS X](http://tbswitcher.rugarciap.com/)\n* Wes: [Roller Blade Wheels for your chair](https://amzn.to/34sAtIB)\n\n## Shameless Plugs\n* Scott: [React 3D](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://mastergatsby.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '1acbd83fbbfb242c002b5407f24423a62b446342ec75ad3e1900e5e3b0cd514a', 'potluck-rip-firefox-safari-changing-careers-regression-testing-google-analytics-alternatives-malicious-github-users-mac-vs-windows-more', '/shows/280 - potluck.md', '2023-10-16 20:07:05.514', '2023-10-27 15:57:55.229', 'TASTY'),
('syntax_podcast_show_00281', 281, 'Hasty Treat - Backyard Offices', '2020-09-07 13:00:00.709', 'https://traffic.libsyn.com/syntax/Syntax281.mp3', '\nIn this Hasty Treat, Scott and Wes talk about home offices, backyard offices, costs, and pros and cons!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n03:40 - Structure options: \n* Existing sheds\n* Build your own\n  * likely not allowed\n* Drop in offices \n* Rubbermaid shed \n\n07:18 - Electrical\n\n07:58 - Insulation\n\n09:01 - Heating\n\n11:30 - Cooling\n\n16:01 - Interior\n\n16:42 - WiFi\n\n17:12 - Costs ~ $4k\n* Electrical - $2k\n* Flooring - $600\n* Paneling- $900\n* AC - $1000\n* Fan - $100 \n\n## Links\n* [https://twitter.com/bradwestfall/status/1284299864210210817](https://twitter.com/bradwestfall/status/1284299864210210817)\n* [https://bradfrost.com/blog/post/brad-frost-web-headquarters/](https://bradfrost.com/blog/post/brad-frost-web-headquarters/)\n* [Technology Connections - Space Heater Nonsense](https://www.youtube.com/watch?v=V-jmSjy2ArM)\n* [Technology Connections - Personal \"air conditioners\" aren\'t what they seem](https://www.youtube.com/watch?v=2horH-IeurA)\n* [Technology Connections - Cassette adapters are remarkably simple](https://www.youtube.com/watch?v=dH4n8fUjtLQ)\n* [Caldigit](https://www.caldigit.com/)\n* [Ubiquity Outdoor Access Point](https://store.ui.com/collections/unifi-network-access-points/products/unifi-ac-mesh-ap)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '9667adc01f7e8071c006de11a29e74c282525a7a18cb495294c8729902a09360', 'hasty-treat-backyard-offices', '/shows/281 - backyard offices.md', '2023-10-16 20:07:05.563', '2023-10-27 15:57:55.267', 'HASTY'),
('syntax_podcast_show_00282', 282, 'Tales from Webdev Past - Clearfix × Floats × Cufon × Guestbooks × PNG Fix × More!', '2020-09-09 13:00:00.709', 'https://traffic.libsyn.com/syntax/Syntax282.mp3', '\nIn this episode of Syntax, Scott and Wes talk about tales from web dev past — clearfix, floats, flash, cufon, guestbooks, hit counters, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n04:28 - Float-based layouts\n* Clearfix\n* ☠️ Killed by [Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox), and then [Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)\n\n09:29 - Loading Screens:\n* Two websites - one flash and one HTML\n* Splash screen\n\n11:22 - Hit counters\n\n12:28 - Guestbooks\n\n13:28 - Flash\n* 3rd party player\n* Media dragged its feet FOREVER\n* ☠️ Killed by Steve Jobs\n\n18:46 - Fonts\n* The Golden Layout\n* [Cufon](http://cufon.shoqolate.com/generate/) / [sIFR](https://en.wikipedia.org/wiki/Scalable_Inman_Flash_Replacement) / Images of text\n* [Typekit](https://typekit.com/)\n* ☠️ Killed by font-face\n\n24:15 - Folder-based version control\n* ☠️ Killed by Git\n\n26:22 - FTP\n* ☠️ Killed by Git, then many other things\n\n28:40 - CSS Zen Garden\n* [CSS Zen Garden](http://www.csszengarden.com/)\n* ☠️ Killed by CSS being better\n\n32:02 - TextMate\n* [Coda](https://panic.com/coda/)\n* [Notepad++](https://notepad-plus-plus.org/)\n* [Adobe GoLive](https://en.wikipedia.org/wiki/Adobe_GoLive)\n* [FrontPage](https://en.wikipedia.org/wiki/Microsoft_FrontPage)\n* [Macromedia](https://en.wikipedia.org/wiki/Macromedia) / [Dreamweaver](https://www.adobe.com/products/dreamweaver.html)\n* ☠️ Killed by [Sublime Text](https://www.sublimetext.com/), then [VSCode](https://code.visualstudio.com/)\n\n33:58 - Sliding doors\n* A technique for rounded corners on buttons\n☠️ Killed by CSS\n\n35:29 - PNG Fix\n* ☠️ Killed by the death of IE6\n\n37:53 - 9-Panel layouts\n* ☠️ Killed by CSS\n\n39:20 - CSS 3 Please\n* [CSS 3 Please](https://css3please.com/)\n* [Paul Irish](https://www.paulirish.com/)\n* ☠️ Killed by modern CSS\n\n## Links\n* [Silverlight](https://www.microsoft.com/silverlight/)\n* [Chris Coyier](https://chriscoyier.net/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Fancierstudio 600 LED Light Panel Kit](https://amzn.to/3beDZYz)\n* Wes: [Allen Key Drill Bit Set](https://amzn.to/3juGFnJ) \n\n## Shameless Plugs\n* Scott: [React 3D and Advanced Animating React with Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby Course](https://mastergatsby.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '129e05293aa7b3e1423ae4561b15c87777de9c0cc861a85dd4e8e41af59f1319', 'tales-from-webdev-past-clearfix-floats-cufon-guestbooks-png-fix-more', '/shows/282 - webdev past.md', '2023-10-16 20:07:05.624', '2023-10-27 15:57:55.307', 'TASTY'),
('syntax_podcast_show_00283', 283, 'Hasty Treat - Time Block Planning', '2020-09-14 13:00:00.352', 'https://traffic.libsyn.com/syntax/Syntax283.mp3', '\nIn this Hasty Treat, Scott and Wes talk about time block planning — what it is and how it can help you increase your productivity!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n01:50 - What is time block planning\n\n03:12 - How TBP has helped Scott stay focused\n\n04:46 - How it helps family life\n\n05:57 - How to plan your week\n\n11:00 - How to deal with setbacks\n\n## Links\n* [Cal Newport](https://www.calnewport.com/)\n* [Todoist](https://todoist.com/)\n* [Deep Work](https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692)\n* [Deep Questions](https://www.calnewport.com/podcast/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd003ce4169e3a74d17530edf0eee137aed42e40d3316b6d9d8cc208ebd886915', 'hasty-treat-time-block-planning', '/shows/283 - timeblock.md', '2023-10-16 20:07:05.712', '2023-10-27 15:57:55.344', 'HASTY'),
('syntax_podcast_show_00284', 284, 'Writing Good CSS', '2020-09-16 13:00:00.352', 'https://traffic.libsyn.com/syntax/Syntax284.mp3', '\nIn this episode of Syntax, Scott and Wes talk about writing good CSS. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n02:11 - Frameworks\n* Utility: [Tailwind](https://tailwindcss.com/), [Taycons](https://tachyons.io/), [Bulma](https://bulma.io/)\n* Frameworks: [Foundation](https://get.foundation/), [Bootstrap](https://getbootstrap.com/)\n* Classless base starters: [https://github.com/dbohdan/classless-css](https://github.com/dbohdan/classless-css)\n  * [HTML5 UP](https://html5up.net/) / a template\n\n13:37 - Preprocessors\n* [Sass](https://sass-lang.com/)\n* [Stylus](https://stylus-lang.com/)\n* [Less](http://lesscss.org/)\n* Regular CSS\n  * Variables\n  * Color functions - not yet\n\n19:42 - Tools\n* [PostCSS](https://postcss.org/) is like Babel for CSS. Some good plugins:\n  * [https://github.com/postcss/postcss#plugins](https://github.com/postcss/postcss#plugins)\n* CSS min/max for clamp\n* [Autoprefixer](https://github.com/postcss/autoprefixer)\n* [Autoreset](https://github.com/maximkoretskiy/postcss-autoreset) - reset a component\n* Gap instead of grid-gap\n* [Simple-vars](https://github.com/postcss/postcss-simple-vars)\n* [Postcss-modules](https://github.com/outpunk/postcss-modules)\n* [SugarSS](https://github.com/postcss/sugarss)\n* Preset env\n\n34:19 - Stylint\n* [Stylint](https://stylelint.io/) \n* More than just a basic linter\n* Capable of complex rules in your CI process - i.e. if you are using a color, make sure it\'s a CSS variable\n\n36:37 - Removing unwanted CSS\n* [PurgeCSS](https://purgecss.com/) - Tailwind uses this\n* [PurifyCSS](https://purifycss.online/)\n\n41:17 - Writing maintainable CSS / scoping solutions\n* Component-based\n  * CSS Modules\n* Naming Convention Based\n  * [BEM](http://getbem.com/)\n  * [SMACSS](http://smacss.com/)\n* CSS Variables\n  * Powerful when utilized with things like calc() to avoid out of sync values\n* Know which browsers you need to support\n\n## Links\n* [Syntax 197: Hasty Treat - Tips For Writing Good CSS](https://syntax.fm/show/197/hasty-treat-tips-for-writing-good-css)\n* [Compass](http://compass-style.org/)\n* [Susy](https://www.oddbird.net/susy/)\n* [Grunt](https://gruntjs.com/)\n* [Gulp](https://gulpjs.com/)\n* [Linaria](https://github.com/callstack/linaria)\n* [Astroturf](https://github.com/4Catalyzer/astroturf)\n* [Houdini](https://developer.mozilla.org/en-US/docs/Web/Houdini)\n* [Svelte](https://svelte.dev/)\n\n## Syntax Highlight\n* Dhanish Gajjar - [https://www.instagram.com/dhanishgajjar/](https://www.instagram.com/dhanishgajjar/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Rustlings](https://github.com/rust-lang/rustlings)\n* Wes: [Class Action Park Documentary](https://www.hbomax.com/feature/urn:hbo:feature:GX0P9SwLUP4vDIQEAAAAe?utm_id=sa%7c71700000071882016%7c58700006290539048%7cp56854383918&gclid=EAIaIQobChMIvOO7mrvk6wIVA77ACh0AlAJDEAAYASAAEgLZPfD_BwE&gclsrc=aw.ds)\n\n## Shameless Plugs\n* Scott: [Advanced Animating React with Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://mastergatsby.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '776060582c21612dee0771f074209cd336163223317d40e17c537e0dcd524fe8', 'writing-good-css', '/shows/284 - good CSS.md', '2023-10-16 20:07:05.767', '2023-10-27 15:57:55.388', 'TASTY'),
('syntax_podcast_show_00285', 285, 'Hasty Treat - Our First Bucks Made From Web Dev, Teaching, YouTube and Tutorials', '2020-09-21 13:00:00.882', 'https://traffic.libsyn.com/syntax/Syntax285.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their first steps in the word of entrepreneurship and web dev specifically.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\nWes: \n* First money: check for $300\n* First website: Pool company\n* First ad sense income: Craigonomics\n* First YouTube: import large SQL database with bigdump\n* First online Product: Sublime Text - Ryan Christiani\n* First in-person teaching: HackerYou\n* First project at agency: Jet Cooper\n\nScott:\n* First dev gig: parents tea store\n* First design gig: Perpetual\n* First YouTube video: [Adobe Premier 101](https://www.youtube.com/watch?v=oK_kpyj1R-g&feature=youtu.be)\n* First BIG YouTube video: Sass Tutorials\n* First ad sense income: [scotttolinski.com](https://www.scotttolinski.com/) blog post about music promotion sites\n* First online product: Sass Mastery\n* First project at agency: Nu Step\n\n## Links\n* [https://twitter.com/wesbos/status/1276500155789910016](https://twitter.com/wesbos/status/1276500155789910016)\n* [Audiojungle](https://audiojungle.net/)\n* [Themeforest](https://themeforest.net/)\n* [Juno College](https://junocollege.com/company/)\n* [@steveschoger](https://twitter.com/steveschoger)\n* [Smashing Mag](https://www.smashingmagazine.com/)\n* [Css Tricks](https://css-tricks.com/)\n* [Packt Publishing](https://www.packtpub.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f6b17f17ebce7b6cfe75cfdcfebbb694fed435accd7ab5492135fbc8dd6adde9', 'hasty-treat-our-first-bucks-made-from-web-dev-teaching-youtube-and-tutorials', '/shows/285 - first bucks.md', '2023-10-16 20:07:05.814', '2023-10-27 15:57:55.426', 'HASTY'),
('syntax_podcast_show_00286', 286, 'Git Fundamentals', '2020-09-23 13:00:00.882', 'https://traffic.libsyn.com/syntax/Syntax286.mp3', '\nIn this episode of Syntax, Scott and Wes talk about Git fundamentals — what it is, why you need it, best practices and more!\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n03:12 - What is Git?\n\n04:16 - Why do you need it?\n\n06:31 - UI vs command line\n\n09:03 - Commands 101\n* [https://git-scm.com/](https://git-scm.com/)\n* `init`\n  * `.gitignore` file is key right off the bat\n* `add`\n  * `add -p` - quick review of all the changes you\'ve made\n* `commit`\n  * Multiple adds and commits\n  * Commit messages should be descriptive\n* `push`\n  * What are origins?\n* `pull`\n* `clone`\n* `checkout`\n* `merge`\n* `fetch`\n* `stash`\n* `fork`\n* Merge vs pull request\n* Git vs GitHub / Alternatives\n  * Bitbucket\n  * GitLab\n\n44:25 - Common issues\n* Merge conflicts\n* Files being tracked unintentionally\n* \"How do I delete file from Github?\"\n  * `git rm -r`\n  * `alias gri=\"git ls-files --ignored --exclude-standard | xargs -0 git rm -r\"`\n* Databases in Git?\n\n49:10 - Git clients\n* [https://git-scm.com/downloads/guis](https://git-scm.com/downloads/guis)\n* CLI\n* \"Hub\"\n* Github CLI\n* Github desktop app\n* VS Code integration\n* Source tree\n* Kraken\n* Tower\n\n## Links\n* [VS Code](https://code.visualstudio.com/)\n* [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n* [GitHub](https://github.com/)\n* [Bitbucket](https://bitbucket.org/)\n* [GitLab](https://gitlab.com/)\n* [Drupal](https://www.drupal.org/)\n* [GitKraken](https://www.gitkraken.com/)\n* [Tower](https://www.git-tower.com/mac)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [What Had Happened Was Podcast](https://podcasts.apple.com/us/podcast/what-had-happened-was/id1520209791)\n* Wes: [Yeti Products](https://www.yeti.com/)\n\n## Shameless Plugs\n* Scott: [React For Everybody](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://mastergatsby.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a2bb95ff6acb4f3d1b99b30a095cb1dd7a9aec81bb581445e89a832bd6e1b362', 'git-fundamentals', '/shows/286 - git fundamentals.md', '2023-10-16 20:07:05.854', '2023-10-27 15:57:55.471', 'TASTY'),
('syntax_podcast_show_00287', 287, 'Hasty Treat - Records and Tuples in JavaScript', '2020-09-28 13:00:00.368', 'https://traffic.libsyn.com/syntax/Syntax287.mp3', '\nIn this Hasty Treat, Scott and Wes talk about records and tuples in javascript — what they are, why you might want to use them, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:42 - Immutability\n\n05:08 - Records\n* Immutable object\n* Syntax `#{x: 1, y: 2}`\n\n05:56 - Tuples\n* Immutable array\n* Syntax `#[1,2,3,4]`\n\n07:18 - For both\n* Referred to as a compound primitive\n* Can contain only primitives, not objects\n* They are compared deeply by their contents rather than their identity\n\n    ```jsx\n    assert(#{ a: 1 } === #{ a: 1 });\n    assert(#[1, 2] === #[1, 2]);\n    assert(#{ a: 1, b: 2 } === #{ b: 2, a: 1 });\n    ```\n\n* Potential for optimizations\n  * Optimizations for making deep equality checks fast\n  * Optimizations for manipulating data structures\n* Works well with type systems\n* Better integration with the debugger\n* Accessed through normal record.scott object like syntax\n\n13:39 - Stage 2\n\n## Links\n* [https://github.com/tc39/proposal-record-tuple](https://github.com/tc39/proposal-record-tuple)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ff23b50fd7367cdd8af67057bf027f94b1b4c3fab06577b95ce9b2abbb37f39d', 'hasty-treat-records-and-tuples-in-javascript', '/shows/287 - records.md', '2023-10-16 20:07:05.899', '2023-10-27 15:57:55.532', 'HASTY'),
('syntax_podcast_show_00288', 288, 'Tales from Web Dev Past - Part 2', '2020-09-30 13:00:00.368', 'https://traffic.libsyn.com/syntax/Syntax288.mp3', '\nIn this episode of Syntax, Scott and Wes are back with part 2 of Tales from Web Dev Past — this time looking at iFrames, layout trends, icon fonts, web rings, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n03:00 - iFrames\n* Sidebar menu\n* target\n\n05:42 - JavaScript image hovers\n* [Dreamweaver](https://www.adobe.com/products/dreamweaver.html)\n* [Photoshop](https://www.adobe.com/products/photoshop.html) Slice and Select Tool\n\n08:24 - [CSS Pie](http://css3pie.com/)\n\n09:42 - Animated gifs of people and construction\n* [http://textfiles.com/underconstruction/](http://textfiles.com/underconstruction/)\n\n11:20 - CSS Zoom 1 / IE CSS Hacks\n* Forced IE 7 to redraw floats\n\n13:42 - Layout trends\n* 800x600 fixed websites\n* [960gs](https://960.gs/)\n* [Golden Grid](https://goldengridsystem.com/)\n* 12-col grid creators\n\n16:26 - Sprite maps\n* [Spritecow](http://www.spritecow.com/)\n* ☠️ Killed icon fonts\n  * ☠️ Killed by SVG icons\n\n18:40 - [Firebug](https://getfirebug.com/) and Firebug Lite\n* Lite was a bookmarklet\n\n20:14 - Image maps / Background gradients\n* 1px wide and 2000px tall image to make repeating gradients\n* [Squidfingers](http://www.squidfingers.com/patterns/)\n* [Subtle Patterns](https://www.toptal.com/designers/subtlepatterns/)\n* [Hero Patterns](https://www.heropatterns.com/)\n* [CSS3 Patterns](http://projects.verou.me/css3patterns/)\n\n25:53 - Web rings\n\n27:41 - Glossy buttons\n\n28:09 - Flaming text\n* [FlamingText.com](https://flamingtext.com/)\n\n30:01 - Marquee tags\n* Staggered\n* Speed attribute\n\n31:26 - Spacer gifs\n\n34:30 - [AngelFire](https://en.wikipedia.org/wiki/Angelfire) / [GeoCities](https://en.wikipedia.org/wiki/Yahoo!_GeoCities)\n\n36:11 - [Xanga](http://xanga.com/) / [LiveJournal](https://www.livejournal.com/)\n\n37:29 - Above the fold content\n* [Abovethefold.fyi](http://abovethefold.fyi/)\n\n39:36 - [Homestar Runner](https://homestarrunner.com/)\n\n## Links\n* [Drupal Omega theme](https://www.drupal.org/project/omega)\n* [Syntax 032: Designing, Templating, Inlining and Sending Email](https://syntax.fm/show/032/designing-templating-inlining-and-sending-email)\n* [Mailchimp](https://mailchimp.com/)\n* [Litmus](https://www.litmus.com/)\n* [Email on Acid](https://www.emailonacid.com/)\n* [Herman Miller Aeron](https://www.hermanmiller.com/products/seating/office-chairs/aeron-chairs/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [New Rustacean Podcast](https://newrustacean.com/)\n* Wes: [Autonomous Ergo Chair](http://autonomous.ai/) \n\n## Shameless Plugs\n* Scott: [Advanced Animating React with Framer Motion](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://mastergatsby.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c1f7ceeb83fbd3a7f47ac912cce5c0b12f3284d6e1bc376fdbd5e11b1466171d', 'tales-from-web-dev-past-part-2', '/shows/288 - web dev past.md', '2023-10-16 20:07:05.952', '2023-10-27 15:57:55.603', 'TASTY'),
('syntax_podcast_show_00289', 289, 'Hasty Treat - Enums in JS (GraphQL and Typescript)', '2020-10-05 13:00:00.592', 'https://traffic.libsyn.com/syntax/Syntax289.mp3', '\nIn this Hasty Treat, Scott and Wes talk about enums in JS — what they are, what they do, and how they work in JavaScript. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n03:11 - What are enums?\n* A type restricting variables to one value from a predefined set of constants\n* Direction = UP / DOWN / LEFT / RIGHT\n* Role = ADMIN EDITOR AUTHOR VIEWER\n* Day of the Week\n\n05:12 - In GraphQL\n* enum Role { ADMIN EDITOR AUTHOR VIEWER}\n* Then\n\n07:05 - In TypeScript\n* First, declare the type:\n  * enum direction = { UP, DOWN, LEFT, RIGHT }\n* Then when you defined your function, use that type\n  * type User { role: Role } or type User { role: [Role] } \n\n08:49 - In JavaScript\n* Not in JS yet\n* There is a proposal in stage 1\n  * [https://github.com/rbuckton/proposal-enum](https://github.com/rbuckton/proposal-enum)\n* And a babel plugin:\n  * [https://www.npmjs.com/package/babel-plugin-const-enum](https://www.npmjs.com/package/babel-plugin-const-enum)\n* Can use case/switch\n* Can use Object or Map keys\n\n## Links\n* [Syntax 287: Hasty Treat - Records and Tuples in JavaScript](https://syntax.fm/show/287/hasty-treat-records-and-tuples-in-javascript)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b519a8842da868b977212cc2742feea9b54cb41e64bea2d496e15197f1f22486', 'hasty-treat-enums-in-js-graphql-and-typescript', '/shows/289 - enums.md', '2023-10-16 20:07:06.021', '2023-10-27 15:57:55.652', 'HASTY'),
('syntax_podcast_show_00290', 290, 'Potluck - Is Angular good? × Stencil.js × Self XSS × SVGs in React × Social Platforms for Devs × Project Handoff × Cleaning Knives × More!', '2020-10-07 13:00:00.592', 'https://traffic.libsyn.com/syntax/Syntax290.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about getting your first web dev job, what makes a software engineer senior, handing off projects to clients, Angular vs React, the best social platforms for devs, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n01:58 - You\'ve talked a couple times in the past about the security concerns around `target=\"_blank\"`. You mentioned how adding `rel=\"noopener\"` and / or `rel=\"noreferrer\"` can secure this functionality, but what\'s to stop a savvy person from going into the dev tools and deleting these attributes before clicking a link? Does this defeat the entire purpose or what? Surely browsers have thought of this and it\'s not so easy to hack?\n\n03:48 - Why did you not mention [Stencil](https://stenciljs.com/) when talking about web-component in the last Potluck? Can I presume you have not heard of it? It is quite successful and Ionic proves it. We\'ve been using it for two years in production. This is the only library that thought web-components through to the end. If you know it, what do you think about it and would you use it?\n\n* Example of a stencil component:\n\n```jsx\nimport { Component, Prop, h } from \'@stencil/core\';\n\n@Component({\n  tag: \'my-first-component\',\n})\nexport class MyComponent {\n\n  // Indicate that name should be a public property on the component\n  @Prop() name: string;\n\n  render() {\n    return (\n      <p>\n        My name is {this.name}\n      </p>\n    );\n  }\n}\n```\n\n06:12 - Is [https://www.syntax.fm](https://www.syntax.fm/) supposed to not work? I get a 404.\n\n07:34 - I’m wondering what advice you’d have for someone self-taught switching from a totally non-tech industry (non profit arts, in my case) where I work in a tech role. I’ve hustled and built a portfolio of projects and learned a ton from both of your courses, but I feel that my experience is seen as less valuable because I don’t work in a traditional software/web development environment. Any tips for getting over the final hurdle of getting a dev job?\n\n11:11 - What makes a software engineer senior?\n\n13:08 - I have a Gatsby / Netlify client project about to launch. What’s the best approach in handing over to the (non technical) client? Do I keep in my Github account and just give the client the Netlify CMS login, or create the a Github account for the client that I can access for any maintenance? What do other devs do?\n\n17:55 - I recently blocked all cookies on my mobile browser (Google Chrome), and I noticed something weird. A couple of sites that I know for a fact to have been built using NextJS weren\'t working as expected (surprise surprise). They would load as usual, and after a second or so, all the content on the page disappeared, with the error message \"sorry: an unexpected error has occurred\". In some cases, the error was printed in the site\'s font, and with the same background color on the body. Why does blocking cookies do this to NextJS sites?\n\n21:21 - How often do you make commits? I always hear, \"commit often\", but I am hesitant because I feel like I may change my code later on before I make a pull request? I really liked your episode on Git Fundamentals, I would love to see a tutorial/deep dive into Git workflows and practices (when to commit / how often) Should I commit even though I know what I\'m working on isn\'t complete or I need to refactor it?? What is code review etiquette?\n\n26:59 - Wes, how do you handle captioning and transcripts on your courses? Do you use some tool or service for that or do you do it by hand?	\n\n31:11 - I am a recent graduate of a code school that focused on React and Rails. The company that I currently work for uses Angular for part of their stack. I eventually would like to move into a dev spot, but I am finding that Angular feels a bit stuffy and I am not as excited about it as React, Svelte, Vue, etc. I am afraid that if I dive into Angular, I will become less relevant down the road. I want to learn everything, but I only have so much time and don\'t want to stunt my growth as a developer. Any thoughts or advice on this would be sick!\n\n36:38 - How do you handle SVGs in React? I know that SVGR exists, but I\'d like to avoid adding another dependency if it\'s something I can roll on my own. In the past, I\'ve created functions that take parameters like fill or stroke to control color, and return a string of SVG code with the arguments interpolated in. Then I place that string into a component using dangerouslySetInnerHTML. I haven\'t seen this method used anywhere else, and is probably not best practice. But also, it works, so maybe it\'s fine?\n\n39:52 - What social media platforms should you use as a Dev? What is cool to have? What are their benefits?\n\n48:14 - Have you tried an ultrawide monitor for coding, such as 34\" or 38\"? I feel the extra width would be great for a single monitor setup, but haven\'t been able to see one live where I live.\n\n## Links\n* [Syntax 269: Hasty Treat - Target=_blank security issue? What\'s the deal with noopener and noreferrer?](https://syntax.fm/show/269/hasty-treat-target-_blank-security-issue-what-s-the-deal-with-noopener-and-noreferrer)\n* [Syntax 280: Potluck - RIP Firefox? × Safari × Changing Careers × Regression Testing × Google Analytics Alternatives × Malicious Github Users? × Mac vs Windows × More!](https://syntax.fm/show/280/potluck-rip-firefox-safari-changing-careers-regression-testing-google-analytics-alternatives-malicious-github-users-mac-vs-windows-more)\n* [8 Mile](https://www.imdb.com/title/tt0298203/)\n* [Syntax 286: Git Fundamentals](https://syntax.fm/show/286/git-fundamentals)\n* [Rev](https://www.rev.com/)\n* [Angular](https://angular.io/)\n* [React](https://reactjs.org/)\n* [Svelte](https://svelte.dev/)\n* [SVGR](https://react-svgr.com/)\n* [LevelUp Tuts Discord](https://discord.gg/ccMC6kB)\n* [Dev.to](https://dev.to/)\n* [freeCodeCamp](https://www.freecodecamp.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott:\n  * 1: [Knife Cleaner](https://amzn.to/3cFraY8)\n  * 2: [Scraper](https://amzn.to/336AvVA)\n  * 3: [Chainmail Scrubber](https://amzn.to/3mZtfCY)\n* Wes: [Scriptable App](https://scriptable.app/)\n\n## Shameless Plugs\n* Scott: [ReactJS For Everyone](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby Course](https://mastergatsby.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '1b8b0d1a901a45a3f29c487020f7895bf5c74d5bf8b73b0c300469c0bfc5a75d', 'potluck-is-angular-good-stencil-js-self-xss-svgs-in-react-social-platforms-for-devs-project-handoff-cleaning-knives-more', '/shows/290 - potluck.md', '2023-10-16 20:07:06.076', '2023-10-27 15:57:55.699', 'TASTY'),
('syntax_podcast_show_00291', 291, 'Hasty Treat - Updating / Restarting Long-Running Web Apps', '2020-10-14 13:00:00.281', 'https://traffic.libsyn.com/syntax/Syntax291.mp3', '\nIn this Hasty Treat, Scott and Wes talk about updating web apps that have running for a long time — the problems to look out for and how to avoid them.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n01:54 - The problem\n* This only affects the client-side\n\n05:28 - What are some solutions:\n* Do nothing and hope the  user refreshes.\n* Have a list of assets, or commit hashes. Poll the server periodically, and when there is a new version available:\n    * Prompt the user to refresh\n    * Just refresh the user (store current state in localstorage and restore)\n* Do a custom <Link> component, that checks the last time the user has refreshed (or if new version if available). When they click the link, render a regular <a> instead of a pushstate link.\n* Use a service worker. They will emit an event when a new version is available. Use the above methods to refresh the user.\n* Hot code push.\n    * Vuepress has \"hot reloading\" baked in.\n\n## Links\n* [https://twitter.com/wesbos/status/1306969658751361024](https://twitter.com/wesbos/status/1306969658751361024)\n* [Notion](https://notion.so)\n* [Vuepress](https://vuepress.vuejs.org/)\n* [Meteor](https://www.meteor.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f3726a441ccf8c3ac4291c7bc08c3b6c9b3248990e554585640e5a553d4a3d35', 'hasty-treat-updating-restarting-long-running-web-apps', '/shows/291 - restarting.md', '2023-10-16 20:07:06.124', '2023-10-27 15:57:55.778', 'TASTY'),
('syntax_podcast_show_00292', 292, 'How to Make Freelancing Easier', '2020-10-12 13:00:00.281', 'https://traffic.libsyn.com/syntax/Syntax292.mp3', '\nIn this episode of Syntax, Scott and Wes talk about how to make freelancing easier — how to avoid burnout, and tips and tricks to make it successful. \n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n02:15 - Code\n* Use starters and resets and component libraries\n* Don\'t build in something you don\'t know, unless you have time and budget to do so — WP is good enough for most projects\n* Feel free to go over time on projects if you are learning something new\n* Re-use code from project to project\n* Target similar types of clients\n\n13:09 - Communication\n* Often, clear and frequent\n    * People won\'t be mad for being too informed — just know when to leave out the technical jargon\n* Clients typically don\'t care about Git, React, etc. — they care about results\n* Don\'t overwhelm them\n* Train your clients that you aren\'t available 24/7\n\n22:19 - Time management\n* Set calendar alerts early and often to not miss communications\n* Set meetings at 9am, don\'t wait around all day for meetings\n* Block off large amounts of time for dev — you won\'t be able to get meaningful work done in one-hour slots\n\n27:54 - Contracts + quoting\n* Have a boilerplate contract that you can just fill in\n    * Same for a quote\n* Value-based billing\n\n33:47 - Billing + taxes\n* Don\'t be shy when talking about money. Be clear on what you need, when you need it, and on what terms. This is business.\n    * This is your art, but it\'s also your business\n* Pay quarterly taxes - most likely\n    * Or don\'t and take the small hit — then you can pay once a year\n* Put taxes into another account if you aren\'t good with money\n* Get a billing management system or get an accountant — you need to focus on working on code\n    * Wave Apps, Xero, Freshbooks\n\n42:03 - Marketing\n* Be loud — people need to know what you offer\n* The best marketing is a referral from a previous client\n* If you show up, return emails and do a good job, you\'ll kill it\n* Show people what you are excited about: blog posts, videos, tweets, etc.\n* Go where your clients are:\n    * Do you want to be serving small businesses? Family and friends\n    * Do you want to be a hired gun for a technical team? Conferences/Twitter, blog posts\n\n48:25 - Final thoughts\n* Scott — It\'s ok if freelancing isn\'t for you. Not everyone is great at all of these factors, myself included. However, with practice, you can be your own boss, work on your own terms, and make money. Also, don\'t be afraid to take on longer contracts with established teams and companies.\n* Wes — Freelancing can be a great filler between jobs or career transitions.\n\n## Links\n* [Syntax 117: Hasty Treat - How To Email Busy People](https://syntax.fm/show/117/hasty-treat-how-to-email-busy-people)\n* [Freshbooks - Breaking the Time Barrier](https://www.freshbooks.com/fbstaticprod-uploads/public-website-assets/other/Breaking-the-Time-Barrier.pdf)\n* [Design Is a Job - Mike Monteiro](https://abookapart.com/products/design-is-a-job)\n* [Wave](https://www.waveapps.com/)\n* [Xero](https://www.xero.com/)\n* [Freshbooks](https://www.freshbooks.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Displaced Gamers YouTube Channel](https://www.youtube.com/c/DisplacedGamers)\n* Wes: [Battery Adapter for DeWALT 20V Max 18v Dock Power Connector](https://www.amazon.com/battery-adapter-DeWALT-connector-robotics/dp/B07HKGM78H) \n\n## Shameless Plugs\n* Scott: [React For Everyone](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3714955650b0b40d8a069dfd93fa534cb26bdd8d4b080073f7f6fe869d62252a', 'how-to-make-freelancing-easier', '/shows/292 - freelancing.md', '2023-10-16 20:07:06.162', '2023-10-27 15:57:55.824', 'HASTY'),
('syntax_podcast_show_00293', 293, 'Hasty Treat - Stretching For Developers with Scott', '2020-10-19 13:00:00.482', 'https://traffic.libsyn.com/syntax/Syntax293.mp3', '\nIn this Hasty Treat, Scott and Wes talk about stretching for developers — techniques, misconceptions, and how to feel better. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n03:21 - Devs do the following\n* Head forward looking at screen\n* Shoulders forward\n* Sitting a lot\n* Weak core\n* Carpel tunnel from typing\n\n06:02 - Stretching misconceptions\n* Static holds\n* Dynamic controlled movements first and foremost\n\n07:52 - Stretches to help\n* Dynamic twists\n* Cat / Cow\n* Flat down / Curl up spine\n* Arm hang to decompress spine\n* Wrist stretches and strengthening for carpel tunnel\n* Horse stance at standing desk to be office weird person\n* Shoulder circles\n* Doorway stretches\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b2991d1a0f3fb527698154ed91edb19e8c7da177a110565e4e832691ebf20c07', 'hasty-treat-stretching-for-developers-with-scott', '/shows/293 - stretching.md', '2023-10-16 20:07:06.200', '2023-10-27 15:57:55.868', 'HASTY'),
('syntax_podcast_show_00294', 294, 'Spooky Web Dev Stories — Part 1', '2020-10-21 13:00:00.659', 'https://traffic.libsyn.com/syntax/Syntax294.mp3', '\nIn this episode of Syntax, Scott and Wes talk about spooky web dev stories — listener-submitted stories about web dev gone wrong.\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:12 - The Most Expensive Boolean Ever\n\n06:19 - An Actual Logging Issue\n\n09:37 - Snitches Get Stitches\n\n10:41 - The Spooky Office Skeleton\n\n12:04 - Prevent the Default of Making Money\n\n13:52 - Computer Magic Trick\n\n14:42 - Update Score\n\n15:59 - Change Reaction\n\n19:30 - Personal Mongodb\n\n20:26 - Hello Rob!\n\n22:08 - SSN Regex\n\n23:06 - WordPress Plugins\n\n23:52 - Loggin Ya In, Ya F\'in Dummy\n\n24:58 - A Hostel Coding Environment\n\n25:59 - A Graceful Exit\n\n27:27 - Favicon DDOS\n\n28:07 - Common Cents\n\n29:03 - Open Source Vendors\n\n33:04 - Don\'t Leave the Country\n\n35:09 - Apostrophe Catastrophe\n\n35:43 - Env\n\n36:05 - A Christmas Miracle\n\n36:43 - The One Million Dollar Bill\n\n39:00 - The Hacker Who Dropped the DB\n\n40:19 - The Tech Lead Who Uses Alert Statements\n\n46:14 - Lorem Ipsum\n\n46:58 - Malicious Compliance\n\n## Links\n* [Indigo.ca](https://t.co/8oXjfTcJa7)\n* [r/MaliciousCompliance](https://www.reddit.com/r/MaliciousCompliance/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Hades Game](https://www.supergiantgames.com/games/hades/)\n* Wes:\n  * [LED Flame Bulb](https://amzn.to/2IjBVE6)\n  * [Smaller LED Flame Bulbs](https://amzn.to/2STm558) \n\n## Shameless Plugs\n* Scott: [Animating Svelte](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://mastergatsby.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '0144b66926454a652b73343166e33636096ec885df4cc99063b49cb8388b1d3c', 'spooky-web-dev-stories-part-1', '/shows/294 - spooky.md', '2023-10-16 20:07:06.239', '2023-10-27 15:57:55.907', 'TASTY'),
('syntax_podcast_show_00295', 295, 'Hasty Treat - Temporal Date Objects in JavaScript', '2020-10-26 13:00:00.713', 'https://traffic.libsyn.com/syntax/Syntax295.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Temporal Date Objects in JavaScript — a WICKED AWESOME API for working with times and dates.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n05:11 - Temporal Now\n* You can get now\n  * `Temporal.now.___`\n\n07:58 - Temporal Instants\n* A `Temporal.Instant` represents a fixed point in time, without regard to calendar or location.\n  * Most common way to show it is nanoseconds since unix epoch.\n  * Can be formatted a few different ways.\n\n09:59 - Calendar\n* Support for different types of calendars\n\n11:43 - Durations\n* Temporal.Duration\n  * There are .from and .add and subtract() methods\n\n12:47 - Other interesting parts\n* Timezones\n  * Temporal.ZonedDateTime\n* Temporal.YearMonth - represents a ym = new Temporal.YearMonth(2019, 6) // => 2019-06\n\n14:51 - Polyfill (unstable)\n\n## Links\n* [Fixing JavaScrip Date - Maggie Pint](https://maggiepint.com/2017/04/09/fixing-javascript-date-getting-started/)\n* [https://github.com/tc39/proposal-temporal](https://github.com/tc39/proposal-temporal)\n* [https://github.com/tc39/proposal-temporal/blob/main/docs/calendar.md#methods](https://github.com/tc39/proposal-temporal/blob/main/docs/calendar.md#methods)\n* [https://github.com/tc39/proposal-temporal/blob/main/docs/duration.md](https://github.com/tc39/proposal-temporal/blob/main/docs/duration.md)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e96733db1102d485698c71317bf271717a77ccfdd6e370275e8ea9e2791c07b5', 'hasty-treat-temporal-date-objects-in-javascript', '/shows/295 - temporary date.md', '2023-10-16 20:07:06.291', '2023-10-27 15:57:55.951', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00296', 296, 'Spooky Web Dev Stories — Part 2', '2020-10-28 13:00:00.713', 'https://traffic.libsyn.com/syntax/Syntax296.mp3', '\nIn this episode of Syntax, Scott and Wes are back for another episode of spooky web dev stories — listener-submitted stories about web dev gone wrong.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n03:28 - Jack Rhysider Story\n\n06:28 - Dirty Dicks JSON\n\n08:23 - CMS Disaster\n\n10:58 - Oh No Hotel\n\n11:19 - FTP\n\n12:19 - Push Notification Hell\n\n13:16 - DVD Nightmare\n\n15:15 - Bad Words Again\n\n16:23 - Mo Money\n\n17:01 - Bass Ackwards\n\n18:17 - Taxi Coding\n\n19:36 - Bad Env\n\n21:30 - Login As\n\n21:50 - Email Subscribers Plugin\n\n22:33 - 1 in 300 Chance of the C-Word\n\n24:24 - Production Target\n\n26:12 - A Happy SEO Ending\n\n28:26 - Just Oof\n\n29:48 - I\'ve Fallen and I Can\'t Get Up\n\n30:54 - Crypto\n\n32:34 - rm -rf\n\n33:42 - Never Deploy on Fridays\n\n35:31 - Million Dollar Scramble\n\n36:22 - Deleting Production\n\n37:11 - 500,000 Concurrent Problems\n\n39:14 - Deleting a Government Website\n\n40:36 - You Ruined the Surprise!\n\n45:23 - Mr. D Hole\n\n46:48 - One Expensive Race Condition\n\n48:43 - Yikes\n\n51:11 - Always Be Closing\n\n51:44 - Adidas - All Day I Delete A Site\n\n## Links\n* [@JackRhysider](https://twitter.com/JackRhysider)\n* [Darknet Diaries Podcast](https://darknetdiaries.com/)\n* [ExpressionEngine](https://expressionengine.com/)\n* [#ghosts](https://twitter.com/search?q=%23ghosts)\n* [chefkoch.de](http://chefkoch.de/)\n* [Sendgrid](https://sendgrid.com/)\n* [Magento](https://magento.com/)\n* [Evite](https://www.evite.com/)\n\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Fastify](https://www.fastify.io/)\n* Wes:\n  * [🇨🇦 Mr Chefer Meat Thermometer](https://amzn.to/3kgQLt6)\n  * [🇺🇸 Mr Chefer Meat Thermometer](https://amzn.to/3j9NURD)\n\n## Shameless Plugs\n* Scott: [Level Up Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '59ee116800b533461e85eea7e72bbeff5a056f74f2722723c72e3850dcccecb6', 'spooky-web-dev-stories-part-2', '/shows/296 - spooky.md', '2023-10-16 20:07:06.350', '2023-10-27 15:57:55.990', 'TASTY'),
('syntax_podcast_show_00297', 297, 'Hasty Treat - Certifications? Government Specified JavaScript Skills?', '2020-11-02 14:00:00.713', 'https://traffic.libsyn.com/syntax/Syntax297.mp3', '\nIn this Hasty Treat, Scott and Wes talk about web dev certifications — are they worth it, or a waste of time?\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n02:12 - Certifications\n\n05:30 - We have standards, and people move faster than standards.\n* jQuery moved faster than vanilla JS\n* Typescript is sometimes preferred over regular JS\n* We have universities that offer web developer certs and many of them are a joke\n* The point is that programming is the wild west — it\'s far too broad and moves far too fast for us to try and fit it in a box\n\n10:28 - Do certifications mean anything?\n\n14:30 - How do you know if you have enough skills (when you\'re job hunting)?\n\n19:04 - Some jobs do require a certification\n* AWS\n* Google\n\n## Links\n* [https://openjsf.org/certification/](https://openjsf.org/certification/)\n* [https://www.sentiatechblog.com/imposter-syndrome-how-to-display-front-end](https://www.sentiatechblog.com/imposter-syndrome-how-to-display-front-end)\n* [https://twitter.com/wesbos/status/1318192217824124928](https://twitter.com/wesbos/status/1318192217824124928)\n* [https://twitter.com/photonstorm/status/1318193404312944641](https://twitter.com/photonstorm/status/1318193404312944641)\n* [https://twitter.com/Ky1e_S/status/1318193954085634048](https://twitter.com/Ky1e_S/status/1318193954085634048)\n* [https://twitter.com/ArleyM/status/1318194323821912067](https://twitter.com/ArleyM/status/1318194323821912067)\n* [https://twitter.com/ajitbohra/status/1318194600335470592](https://twitter.com/ajitbohra/status/1318194600335470592)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '39c5cf8658a420944fc811382fc027b80caf3cce729a25c5f0e05c4517148411', 'hasty-treat-certifications-government-specified-javascript-skills', '/shows/297 - certifications.md', '2023-10-16 20:07:06.421', '2023-10-27 15:57:56.037', 'HASTY'),
('syntax_podcast_show_00298', 298, 'Voice Coding is Really Good with Josh Comeau', '2020-11-04 14:00:00.713', 'https://traffic.libsyn.com/syntax/Syntax298.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Josh Comeau about coding with your voice, accessibility, bootcamps, animation, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Guests\n* [Josh Comeau](https://twitter.com/joshwcomeau)\n\n## Show Notes\n01:48 - What is your background?\n\n04:33 - Coding with your voice\n\n08:32 - How do you code for a living if you can only do it for a few minutes a day?\n\n21:56 - How has it impacted your productivity?\n\n22:46 - Is it easier with a typed language like Typescript?\n\n26:05 - What about accessibility?\n\n27:14 - How good is the eye tracker?\n\n29:30 - What got you into animation?\n\n35:29 - Favorite app for animations?\n\n40:12 - Being a teacher\n\n41:44 - Is it worth going to a bootcamp?\n\n44:57 - Interactivity in teaching\n\n## Links\n* [joshwcomeau.com](https://joshwcomeau.com/)\n* [@concordia_btcmp](https://twitter.com/concordia_btcmp)\n* [@gatsbyjs](https://twitter.com/gatsbyjs)\n* [@khanacademy](https://twitter.com/khanacademy)\n* [@unsplash](https://twitter.com/unsplash)\n* [Talon](https://talonvoice.com/)\n* [Using Python to Code by Voice](https://www.youtube.com/watch?v=8SkdfdXWYaI)\n* [Neuralink](https://neuralink.com/)\n* [Tobii 5](https://us.tobiidynavox.com/pages/communicator-5-ap)\n* [Moleskine Apps](https://us.moleskine.com/moleskine-/apps/0302-2)\n* [VLC](https://www.videolan.org/index.html)\n* [VSCode](https://code.visualstudio.com/)\n* [freeCodeCamp](https://www.freecodecamp.org/)\n* [Syntax 246: Bootcamps, Getting a Job, and Income Share Agreements with Heather Payne](https://syntax.fm/show/246/bootcamps-getting-a-job-and-income-share-agreements-with-heather-payne)\n* [https://joshwcomeau.com/css/full-bleed/](https://joshwcomeau.com/css/full-bleed/)\n* [Nintendo Switch](https://www.nintendo.com/switch/)\n* [Navigator.vibrate](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate)\n* [Voice Driven Development](https://www.youtube.com/watch?v=YKuRkGkf5HU)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Josh: [The Utterly Uninteresting and Unadventurous Tales of Fred, the Vampire Accountant](https://www.amazon.com/Utterly-Uninteresting-Unadventurous-Vampire-Accountant/dp/B00TIXW5AI/)\n* Scott: [The Neighborhood Listen](https://www.earwolf.com/show/the-neighborhood-listen/)\n* Wes: [Every Tool\'s a Hammer by Adam Savage](https://www.amazon.com/Every-Tools-Hammer-Adam-Savage-audiobook/dp/B07L3BRW4T/)\n\n## Shameless Plugs\n* Josh: [CSS for Javascript Developers | An online course that teaches the fundamentals of CSS for React/Vue devs](https://css-for-js.com/)\n* Scott: [Animating Svelte](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Master Gatsby](https://mastergatsby.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '058cabf6af58d57b435c91f869151cd54f6e8eee60bac74ff4707e81ccb75bf2', 'voice-coding-is-really-good-with-josh-comeau', '/shows/298 - voice coding.md', '2023-10-16 20:07:06.491', '2023-10-27 15:57:56.077', 'TASTY'),
('syntax_podcast_show_00299', 299, 'Hasty Treat - Bundlers in 2020', '2020-11-09 14:00:00.984', 'https://traffic.libsyn.com/syntax/Syntax299.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the state of bundlers in 2020 — Rome, Snowpack, Parcel, Webpack, Rollup, Vite, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n02:39 - What is a bundler?\n* On the one hand, you can write HTML, CSS and JavaScript and open it in the browser\n* On the other hand, your build could be super complex\n\n03:24 - What goes into configuring a bundler?\n* Templating language you use (Jsx, Pug, Vue, etc.)\n* JavaScript you write and compile to:\n    * ES6/7/8/9\n    * Typescript\n    * CoffeeScript\n* Polyfills\n* Environmental variables\n* CSS loading\n* Image compression\n* Asset Chunking\n* Tree shaking\n\n05:12 - [Webpack](https://webpack.js.org/)\n* Hardest to learn, most used currently\n\n07:38 - [Rollup](https://rollupjs.org/guide/en/)\n* Scott\'s pick as best option for most features vs ease of use\n* Very powerful\n* Mmmr, tree shaking, plugins, esm\n\n09:52 - [Parcel](https://parceljs.org/)\n* Scott\'s simplicity winner pick\n* Easiest to get started with\n* It\'s a bundler, but also a dev tool\n    * Hot reload\n    * Local server\n* Config is done via your package.json\n* Lots of plugins available \n\n12:01 - [Npm](https://www.npmjs.com/), [Yarn and Yarn 2](https://yarnpkg.com/)\n* It\'s a dependency installer rather than a bundler\n\n13:27 - [Snowpack](https://www.snowpack.dev/)\n* Scott\'s speed pick of the week\n* Uses ESM by default\n* Like Sonic after a triple shot of espresso\n* HRM\n* Perfect for dev builds, as well as production builds\n\n15:51 - [Isobuild / Meteor](https://www.meteor.com/)\n* Scott\'s underdog pick of the litter\n\n16:48 - [Rome](https://rome.tools/)\n* Scott\'s mystery pick of the week\n* New tool to do it all\n* Bundler, but also a linter\n\n17:54 - [Deno](https://deno.land/)\n* Linter\n* Typescript formatter\n* Bundler (bundle into a single .js file)\n\n20:44 - Let your tool take care of it\n* [Gatsby](https://www.gatsbyjs.com/) (webpack)\n* [Next.js](https://nextjs.org/) (webpack)\n* [Gridsome](https://gridsome.org/)\n* [Create React App](https://reactjs.org/docs/create-a-new-react-app.html)\n* [Vite](https://github.com/vitejs) (Rollup)\n* [Broccoli.js](https://broccoli.build/)\n\n## Links\n* [Babel](https://babeljs.io/)\n* [Gulp](https://gulpjs.com/)\n* [Syntax 212: Pika Pkg](https://syntax.fm/show/212/pika-pkg)\n* [Fred Schott](https://twitter.com/FredKSchott)\n* [Pika](https://www.pika.dev/)\n* [Rust](https://www.rust-lang.org/)\n* [Go](https://golang.org/)\n* [Software Engineering Daily: Deno and TypeScript with Elio Rivero](https://softwareengineeringdaily.com/2020/09/28/deno-and-typescript-with-elio-rivero/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '31ff15180938178f7a0c1266b314b15646deef43b7fb962d86302a7df6e3d00c', 'hasty-treat-bundlers-in-2020', '/shows/299 - bundlers.md', '2023-10-16 20:07:06.626', '2023-10-27 15:57:56.192', 'HASTY'),
('syntax_podcast_show_00300', 300, '300th LIVE SHOW SPECTACULAR!', '2020-11-11 14:00:00.460', 'https://traffic.libsyn.com/syntax/Syntax300.mp3', '\nIt\'s the 300th episode of Syntax! To celebrate, Scott and Wes do a special live call-in episode with Syntax listeners.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n03:30 - How is this going to work?\n* Ask a Potluck Question\n* Do a Sick Pick\n* Take on a Stump\'d Question\n* Do a Shameless Plug\n\n04:45 - [Brad Garropy](https://twitter.com/bradgarropy)\n* [https://bradgarropy.com](https://bradgarropy.com)\n* Potluck Question: Are GraphQL Playgrounds in production considered insecure due to introspection?\n* Sick Pick: [5.11 TacTec Plate Carrier](https://roguefitness.com/5-11-tactical-vests)\n* Shameless Plug: [MURPHY](https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa)\n\n11:54 - Brittney\n* Shameless Plug: [ZTM Academy](https://academy.zerotomastery.io/?affcode=441520_gjue7n-1)\n* [Andrei Neagoie](https://zerotomastery.io/about/instructor/andrei-neagoie/)\n* [@brittneypostma](https://twitter.com/BrittneyPostma)\n\n16:43 - Jesse\n* Stump\'d Question: What are portals in React?\n* Shameless Plug: [codeSTACKr YouTube Channel](https://www.youtube.com/codestackr)\n* Shameless Plug: [VS Code Hero Course](https://vscodehero.com/) - Use coupon code \"Syntax\" for discount\n\n23:44 - Henri\n* Shameless Plug: [https://twitter.com/HenriHelvetica](https://twitter.com/HenriHelvetica)\n* Shameless Plug: [JamstackTORONTO](https://twitter.com/JAMstackTORONTO)\n\n31:27 - Jason\n* Stump\'d Question: What does \"use strict\" do and what are the benefits?\n\n36:48 - Spence\n* [mdx-embed](https://www.mdx-embed.com/)\n* [https://github.com/PaulieScanlon/mdx-embed](https://github.com/PaulieScanlon/mdx-embed)\n\n41:33 - James\n* Potluck Question: How do you keep people engaged in a workshop?\n* Stump\'d Question: What is the difference between the postfix i++ and the prefix ++i increment operators?\n* Shameless Plug: [YouTube for Developers](https://www.youtubefordevelopers.com/)\n* Shameless Plug: [James Q Quick YouTube Channel](https://www.youtube.com/jamesqquick)\n\n54:24 - Austin\n* Potluck Question: Problems with ESLint, Prettier and VS Code playing nicely together\n* Shameless Plug: [https://erickka.art/](https://erickka.art/)\n\n66:21 - Dave\n* Sick Pick: [mmhmm](https://www.mmhmm.app/)\n* Stump\'d Question: What is the difference between the + and ~ sibling selectors in CSS?\n\n78:56 - Gareth\n* Potluck Question: What do you think about the future of mobile development vs traditional mobile app development?\n* Sick Pick: [https://darkreader.org/](https://darkreader.org/)\n* Shameless Plug: [Level Up Tutorials Discord](https://discord.com/invite/ccMC6kB)\n\n89:51 - Ackzell and Lewis\n* Ackzell:\n  * Sick Pick: [JSConf Mexico](https://jsconf.mx/)\n  * Shameless Plug: [Ackzell YouTube Channel](https://www.youtube.com/ackzell)\n* Lewis:\n  * Potluck Question: What is your daily routine like, and you do you decide to prioritize projects?\n\n## Links\n* [What Syntax 300 live on Twitch](https://www.twitch.tv/videos/786606195)\n* [Discord](https://discord.com/)\n* [Mux](https://mux.com/)\n* [React HLS Player](https://www.npmjs.com/package/react-hls-player)\n* [https://30secondsofinterviews.org/](https://30secondsofinterviews.org/)\n* [https://dev.to/bdesigned/vscode-setup-with-eslint-and-prettier-1gek](https://dev.to/bdesigned/vscode-setup-with-eslint-and-prettier-1gek)\n* [https://madewithsvelte.com/mdsvex](https://madewithsvelte.com/mdsvex)\n* [OBS](https://obsproject.com/)\n* [Streamlabs](https://streamlabs.com/)\n* [ESLint](https://eslint.org/)\n* [Prettier](https://prettier.io/)\n* [Missive](https://missiveapp.com/)\n\n## Shameless Plugs\n* Scott: [Level Up Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9833f5c3762cd829f46adb052dfe471dbea18adc3b3cd4e9c48d318d4946febd', '300th-live-show-spectacular', '/shows/300.md', '2023-10-16 20:07:06.669', '2023-10-27 15:57:56.235', 'TASTY'),
('syntax_podcast_show_00301', 301, 'Hasty Treat - CSS Grid Masonry (Grid Level 3)', '2020-11-16 14:00:00.919', 'https://traffic.libsyn.com/syntax/Syntax301.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS Grid Level 3 — why it\'s such a cool thing and why they\'ve been waiting for it for so long.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n04:33 - The spec\n* [https://drafts.csswg.org/css-grid-3/](https://drafts.csswg.org/css-grid-3/)\n* [https://twitter.com/wesbos/status/1320735900343668738](https://twitter.com/wesbos/status/1320735900343668738)\n\n06:10 - How it works\n* `masonry-auto-flow: next;`\n  1. It first puts all the items that are explicitly placed onto the grid. Items that you have a set start/stop value for are first put down.\n  2. Then it takes the next item that it to be placed and finds a spot for it. This is different because with CSS Grid you normally have to place the next item on the next row or column.\n  3. `grid-template-columns` and `grid-template-rows` can now be marked as masonry and this specifies which axis will be masonry.\n\n09:06 - The implicit grid\n* [https://drafts.csswg.org/css-grid-3/#%23implicit-grid](https://drafts.csswg.org/css-grid-3/#%23implicit-grid)\n* The implicit grid is formed in the same way as a regular grid container. However, it’s only used in the grid axis.\n* Interesting in a column situation (see images).\n\n13:25 - Thoughts\n* Power tools for layout in CSS — opens up a ton of possibilities and completes the functionality we use to dream of in CSS.\n\n## Links\n* [David DeSandro](https://desandro.com/)\n* [https://metafizzy.co/](https://metafizzy.co/)\n* [Chris Coyier](https://chriscoyier.net/)\n* [https://caniuse.com/](https://caniuse.com/)\n* [Isotope](https://isotope.metafizzy.co/)\n* [Flickity](https://flickity.metafizzy.co/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6540accaa3808f185e77291532638460856518cf4fbe103070d1252fff0546bc', 'hasty-treat-css-grid-masonry-grid-level-3', '/shows/301 - css grid.md', '2023-10-16 20:07:06.727', '2023-10-27 15:57:56.284', 'HASTY'),
('syntax_podcast_show_00302', 302, 'How to Run a Conference with Benjamin Dunphy', '2020-11-18 14:00:00.919', 'https://traffic.libsyn.com/syntax/Syntax302.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Benjamin Dunphy about running conferences — what to do, what not to do, and what makes a good online conference in a post-Covid world!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Guests\n* [Benjamin Dunphy](https://twitter.com/benghamine)\n\n## Show Notes\n03:48 - How do you get started running a conference?\n\n10:05 - Which conferences have you run?\n\n18:05 - How do you get speakers?\n\n23:21 - What about paying speakers?\n\n28:26 - Speaker goody bags?\n\n32:40 - You started your own catering company?\n\n35:32 - How has Coronavirus affected the conference space?\n\n43:06 - Should online conferences try to replicate live conferences?\n\n## Links\n* [Reactathon](https://twitter.com/reactathon)\n* [Jamstackconf](https://twitter.com/jamstackconf)\n* [Epicodus](https://www.epicodus.com/)\n* [Meetup](https://www.meetup.com/)\n* [Flutter](https://flutter.dev/)\n* [Lifted Plate](https://www.liftedplate.com/)\n* [DevRelCon](https://sf2019.devrel.net/)\n* [EventLoop](https://www.eventloop.app/)\n* [Modern Web Summit](https://modernwebsummit.com/)\n* [@Swizec](https://twitter.com/swizec)\n* [Sanity Review Changes](https://www.sanity.io/blog/review-changes) \n* [@tylermcginnis](https://twitter.com/tylermcginnis)\n* [Syntax 250: Scott Teaches Wes Svelte and Sapper](https://syntax.fm/show/250/scott-teaches-wes-svelte-and-sapper)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Ben: [Serverless Handbook for Frontend Engineers](https://serverlesshandbook.dev/)\n* Scott: [Tineco Pure One S12](https://amzn.to/2IHWydn)\n* Wes: [Chromecast](https://store.google.com/us/product/chromecast)\n\n## Shameless Plugs\n* Ben:\n  * [EventLoop](https://www.eventloop.app/)\n  * [Modern Web Summit](https://modernwebsummit.com/)\n* Scott: [Animating Svelte](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0a5b29c3478c4f24d37bf59698808646dae4ff931b07bb96e97ed7a5c05671d2', 'how-to-run-a-conference-with-benjamin-dunphy', '/shows/302 - conferences.md', '2023-10-16 20:07:06.793', '2023-10-27 15:57:56.343', 'TASTY'),
('syntax_podcast_show_00303', 303, 'Hasty Treat - Client vs Server Data Validation', '2020-11-23 14:00:00.666', 'https://traffic.libsyn.com/syntax/Syntax303.mp3', '\nIn this Hasty Treat, Scott and Wes talk about client- and server-side validation, and what each is used for!\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Show Notes\n\n02:49 - Wes\' story\n\n06:28 - What is the role of client-side validation?\n* Help the user input the correct data as they type it.\n* Show correct data in UI.\n* Show correct UI.\n* Just about all of these things are for the user\'s benefit, and how they feel when using the site.\n\n11:10 - What is the role of server-side validation?\n* Validate that all the data is correct before it\'s saved to the database\n* Security first and foremost\n\n15:03 - What process should a store follow to validate on the server?\n1. Check that correct types are coming in. Very easy with Graphql.\n2. Get current stock and price information from unique ids from the database.\n3. Confirm that this information is what the user is expecting — if the UI said the user will be charged $40, don\'t charge them $50 just because of the updated info. In that case, send back to the user.\n\n17:17 - What do you do if you don\'t want people messing with your React state?\n* `@fvilers/disable-react-devtools`\n* `if (process.env.NODE_ENV === \'production\') disableReactDevTools()`\n* We do this on LUT. Why? Because it\'s a deterrent.\n\n## Links\n* [uses.tech](https://uses.tech/)\n* [Flipp App](https://flipp.com/home)\n* [GraphQL](https://graphql.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ccc372e20a601c60bcee75a0b9e0f8dd7d007cceebcdf5caea9036737166d6a9', 'hasty-treat-client-vs-server-data-validation', '/shows/303 - validation.md', '2023-10-16 20:07:06.916', '2023-10-27 15:57:56.434', 'HASTY'),
('syntax_podcast_show_00304', 304, 'Potluck - Frameworks vs Libraries × Debugging × CSS Modules vs Styled Components × Resumes × Stress Management × More!', '2020-11-25 14:00:00.666', 'https://traffic.libsyn.com/syntax/Syntax304.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about frameworks vs libraries, improving your debugging skills, building a component library, CSS modules vs styled components, writing a good resume, stress management, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n01:27 - How do you implement WebRTC? Please tell us more about online streaming, screen sharing, data flow. \n\n03:20 - Which JS library/framework do you think beginners might find the easiest to understand?\n\n05:06 - How do you deal with different case types between different systems in your project? For example, I store records in a Postgres database which typically uses snake_case and then I render them with React, where props are typically camelCase. Is it better to convert the cases back and forth between frontend and backend or just pick one case and use it everywhere?	\n\n09:23 - My question is about the difference between a framework and a library. Should we have two separate words?\n\n12:39 - How can I work on improving both my generic problem-solving skills and my debugging skills? I feel like there have got to be some more proactive things I can do to improve in these areas.\n\n17:22 - I just listened to your podcast on making freelancing easier and enjoyed it. You talk about making your own component library. Do you have tips on how to store and manage a component library?\n\n21:39 - What projects do you use Rust for, and do you have any ideas where Rust might be the thing to do when talking web projects?\n\n29:10 - I\'ve recently joined a great-paying full-time gig at a big enterprise-level company as a Senior Javascript Engineer (React, Node, etc). I\'m humbled to be here - but at times the pace is slow, tickets are scarce, and I feel like I\'m not able to really utilize or hone my skillset. I\'ve been looking at potentially moving into contracting/agency work - the money seems comparable with the added benefit of new and exciting projects and having more control over them. Do you think contract work would be more fulfilling, or is crazy to leave a cushy job solely because I\'m in a sense, bored?\n\n35:26 - I\'m currently working on a Next.js project and trying to decide which CSS system to use. What is your take on CSS modules? I know you like styled components a lot, but since there is built-in support for CSS modules with scoped CSS, I find it hard to motivate bringing in styled components. Am I missing something?\n\n38:15 - Regarding Episode 290, you fielded a question regarding Angular and I appreciated your balanced response since I\'m primarily an Angular developer at my job. If you could, would you please update the link to the Angular website to point to [Angular.io](http://angular.io/) (v10) instead of the AngularJS (v1) website?\n\n40:43 - I really need advice on how to write a good resume, or any tips you may have for getting noticed in the hiring process with only a couple years of experience. I have been applying to many jobs as a front-end developer but I seem to get no response EVER.\n\n45:17 - How do I dynamically assign subdomain/wildcard/slug dynamically during signup process with React and Node? (Like the way Freshbooks does — i.e tenant1.domain.com, tenant2.domain.com, etc.)\n\n48:44 - Wes, I\'ve been taking your Mastering Gatsby course, and I\'m loving the course so far. My only complaint would be I wish you added a module for CSS. I think it\'s just because I personally struggle with styling websites. Do either of you have any suggestions on how I can improve in that aspect of web dev?\n\n50:35 - For web developers just starting out in freelancing/building e-commerce sites — from a business perspective, do you recommend we first 1) just code and worry about business stuff later? or 2) go through the government paperwork and be a sole proprietorship? or 3) incorporate (though this costs more)?\n\n54:20 - What\'s your approach for handling padding + margin with components?\n\n57:43 - How do you back up sensitive files that do NOT get added to source control (env files, for example)? I have off-site computer backups, and I have .env files on a small thumb drive on my keychain. What do you do?\n\n59:56 - Do you guys have stress management techniques? How do you cope with stressful situations at work, like unexpected tight deadlines?\n\n## Links\n* [Syntax 002: Webcam and audio access with WebRTC and getUserMedia()](https://syntax.fm/show/002/webcam-and-audio-access-with-webrtc-and-getusermedia)\n* [Syntax 256: WebRTC and Peer-to-Peer Video Calling with Ian Ramzy](https://syntax.fm/show/256/webrtc-and-peer-to-peer-video-calling-with-ian-ramzy)\n* [Daily.co](http://daily.co) \n* [Twilio](https://www.twilio.com/)\n* [Svelte](https://svelte.dev/)\n* [https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case](https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case)\n* [Master Gatsby](https://mastergatsby.com/)\n* [Syntax 292: How to Make Freelancing Easier](https://syntax.fm/show/292/how-to-make-freelancing-easier)\n* [https://github.com/formium/tsdx](https://github.com/formium/tsdx)\n* [https://nx.dev/react](https://nx.dev/react)\n* [https://github.com/lerna/lerna](https://github.com/lerna/lerna)\n* [https://www.npmjs.com/package/babel-plugin-module-resolver](https://www.npmjs.com/package/babel-plugin-module-resolver)\n* [https://storybook.js.org/](https://storybook.js.org/)\n* [Deno](https://deno.land/)\n* [Rust](https://www.rust-lang.org/)\n* [wasm-pack](https://rustwasm.github.io/wasm-pack/)\n* [https://rocket.rs/](https://rocket.rs/)\n* [Syntax 290: Potluck - Is Angular good? × Stencil.js × Self XSS × SVGs in React × Social Platforms for Devs × Project Handoff × Cleaning Knives × More!](https://syntax.fm/show/290/potluck-is-angular-good-stencil-js-self-xss-svgs-in-react-social-platforms-for-devs-project-handoff-cleaning-knives-more)\n* [Modern CSS Layouts](https://www.leveluptutorials.com/tutorials/modern-css-layouts)\n* [Modern CSS Design Systems](https://www.leveluptutorials.com/tutorials/modern-css-design-systems)\n* [Digital Ocean App Platform](https://www.digitalocean.com/products/app-platform/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Eating Out Loud: Bold Middle Eastern Flavors for All Day, Every Day: A Cookbook](https://amzn.to/31JTjZQ)\n* Wes: [Levi\'s Barstow Western Shirt](https://rstyle.me/cz-n/enxwrncdguf) \n\n## Shameless Plugs\n* Scott: [Animating Svelte](https://www.leveluptutorials.com/pro) - Black Friday Sale: Sign up for the year and save 50%!\n* Wes: [Master Gatsby](https://mastergatsby.com/) - Black Friday Sale: All courses 50% off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '23342fac07f8dcf1aa974356448c9a7adf233be70182af54640dbf35e9734b42', 'potluck-frameworks-vs-libraries-debugging-css-modules-vs-styled-components-resumes-stress-management-more', '/shows/304 - potluck.md', '2023-10-16 20:07:06.953', '2023-10-27 15:57:56.485', 'TASTY'),
('syntax_podcast_show_00305', 305, 'Hasty Treat - Writing Good Commit Messages', '2020-11-30 14:00:00.101', 'https://traffic.libsyn.com/syntax/Syntax305.mp3', '\nIn this Hasty Treat, Scott and Wes talk about a system for writing good commit messages.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n03:46 - What are conventional commits?\n* [https://www.conventionalcommits.org/en/v1.0.0/](https://www.conventionalcommits.org/en/v1.0.0/)\n\n04:55 - How do you keep track of all the details?\n* [https://commitizen-tools.github.io/commitizen/](https://commitizen-tools.github.io/commitizen/)\n* [https://github.com/commitizen/cz-cli](https://github.com/commitizen/cz-cli)\n* [https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits)\n\n07:42 - How does it relate to SemVer?\n\n## Links\n* [https://github.com/conventional-changelog/conventional-changelog](https://github.com/conventional-changelog/conventional-changelog)\n* [https://github.com/netflix/unleash](https://github.com/netflix/unleash)\n* [Deno](https://deno.land/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ce720dac3ea5d78cb720621e5da035a6c8fff3f2e92be6dfa8fd51ed8be68564', 'hasty-treat-writing-good-commit-messages', '/shows/305 - commits.md', '2023-10-16 20:07:06.995', '2023-10-27 15:57:56.552', 'HASTY'),
('syntax_podcast_show_00306', 306, 'Sickpickisode - 2020 Web Developer Gift Guide', '2020-12-02 14:00:00.101', 'https://traffic.libsyn.com/syntax/Syntax306.mp3', '\nIt\'s an entire episode of Sick Picks! In this episode of Syntax, Scott and Wes talk about their 2020 developer gift guide!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n03:17 - Home + Cooking\n* Cold Brew Maker \n  * 1 Gal - [https://amzn.to/3pcKkKM](https://amzn.to/3pcKkKM)\n  * 2 Quart - [https://amzn.to/3eIV921](https://amzn.to/3eIV921)\n* Nordic Ware Half Sheet / Quarter Sheet Pans - [https://amzn.to/3pbCWit](https://amzn.to/3pbCWit)\n* Precut parchment - [https://amzn.to/35dtWld](https://amzn.to/35dtWld)\n* Gaffers Tape - [https://amzn.to/3lfH7aG](https://amzn.to/3lfH7aG)\n* Tineco Pure S12 - [https://amzn.to/3kelPsX](https://amzn.to/3kelPsX)\n* Instant Read Thermometer - [https://amzn.to/3k9VNHf](https://amzn.to/3k9VNHf)\n* Tea Haus - [https://teahaus.com/](https://teahaus.com/)\n* Whetstone - [https://amzn.to/32nYi2z](https://amzn.to/32nYi2z)\n* Re-usable Silicone Mats - [https://amzn.to/35dtWld](https://amzn.to/35dtWld)\n* Air Fryer - [https://amzn.to/38uX4X1](https://amzn.to/38uX4X1)\n\n13:27 - Games\n* [Baba Is You](https://store.steampowered.com/app/736260/Baba_Is_You/)\n* [Untitled Goose Game](https://goose.game/)\n* [Hades](https://www.supergiantgames.com/games/hades/)\n* [Jackbox Party Pack](https://www.jackboxgames.com/party-pack/) \n\n17:16 - Tech\n* Headphones\n  * Sony WH1000XM4 - [https://amzn.to/37yb1Bm](https://amzn.to/37yb1Bm)\n  * Bose QC35 - [https://amzn.to/3lrKrQp](https://amzn.to/3lrKrQp)\n  * Wyze Noise-Cancelling Headphones - [https://wyze.com/wyze-headphones.html](https://wyze.com/wyze-headphones.html)\n* USB-C Hub - [https://amzn.to/3keljem](https://amzn.to/3keljem)\n* Black Camo Wicked Cushions - [https://amzn.to/3eGQA8q](https://amzn.to/3eGQA8q)\n* Mech Keyboard - [https://www.keychron.com/products/keychron-k3-wireless-mechanical-keyboard?utm_source=navi%20to%20K3&utm_medium=navi%20bar&utm_campaign=navi%20to%20K3](https://www.keychron.com/products/keychron-k3-wireless-mechanical-keyboard?utm_source=navi%20to%20K3&utm_medium=navi%20bar&utm_campaign=navi%20to%20K3)\n* Braided USB Cables\n  * Lightning: [https://amzn.to/2IkqLiT](https://amzn.to/2IkqLiT)\n  * USB-C:  [https://amzn.to/3lfrBeX](https://amzn.to/3lfrBeX)\n\n25:24 - Smart Home\n* Wyze Cams - [https://amzn.to/2UmPINf](https://amzn.to/2UmPINf)\n* Light Switches\n  * Lutron Dimmer - [https://amzn.to/2U7OBk2](https://amzn.to/2U7OBk2)\n  * Leviton Dimmer: [https://amzn.to/3pbzaFZ](https://amzn.to/3pbzaFZ)\n* [Google Nest Hub](https://store.google.com/us/product/google_nest_hub)\n\n33:22 - Desk Stuff\n* Fatigue Mat - [https://amzn.to/3eIXXw5](https://amzn.to/3eIXXw5)\n* Rollerblade Gang Chair wheels - [https://amzn.to/3nbNLPJ](https://amzn.to/3nbNLPJ)\n* MX3 Mouse - [https://amzn.to/3lg8SQn](https://amzn.to/3lg8SQn)\n* Wireless Charger Pad - [https://amzn.to/36gIdNj](https://amzn.to/36gIdNj)\n* Anker USB charging Hub - [https://amzn.to/3n7IGYV](https://amzn.to/3n7IGYV)\n\n36:43 - Live Streaming / Sick WFH Setups\n* Elgato Stream Deck - [https://amzn.to/35ehXnk](https://amzn.to/35ehXnk)\n* Elgato Camlink - [https://amzn.to/3kih6Gl](https://amzn.to/3kih6Gl)\n* Knockoff Camlink - [https://amzn.to/3eIX0Ux](https://amzn.to/3eIX0Ux)\n* Husky Adjustable Desk: [https://www.homedepot.com/p/Husky-62-in-Adjustable-Height-Work-Bench-Table-HOLT62XDB12/301810799](https://www.homedepot.com/p/Husky-62-in-Adjustable-Height-Work-Bench-Table-HOLT62XDB12/301810799) \n* Neewer Dimmable Bi-Color LED Studio Key - [https://amzn.to/32rYAVX](https://amzn.to/32rYAVX)\n* RGB LED - [https://amzn.to/3kg1LWZ](https://amzn.to/3kg1LWZ) \n* Vivo Pneumatic Mic Arm - [https://amzn.to/2Ube8c8](https://amzn.to/2Ube8c8)\n\n49:07 - Fitness\n* [Concept 2 Rower](https://www.roguefitness.com/black-concept-2-model-d-rower-pm5) \n* [Powerblocks](https://powerblock.com/)\n* Cheap bands - [https://amzn.to/35cZ1W4](https://amzn.to/35cZ1W4)\n* Kettle Bells - [https://amzn.to/3eFocnc](https://amzn.to/3eFocnc)\n\n51:44 - Clothes\n* [https://www.dvlpr.io/](https://www.dvlpr.io/)\n* [Naked and Famous Super Guy Jeans](https://www.nakedandfamousdenim.com/)\n* [https://huckberry.com/](https://huckberry.com/)\n* [https://shop.lululemon.com/p/men-joggers/Abc-Jogger/_/prod8530240?color=29283](https://shop.lululemon.com/p/men-joggers/Abc-Jogger/_/prod8530240?color=29283)\n* [Everlane Uniform Crewneck](https://www.everlane.com/)\n* [Levis Denim Shirts: Barstow Western](https://www.levi.com/US/en_US/apparel/clothing/tops/barstow-western-shirt/p/658160116)\n* [Fjallraven Flannels](https://fjallraven.ca/collections/flannel-shirts)\n\n## Links\n* [https://www.eufylife.com/](https://www.eufylife.com/)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bef4e648779ba0c1367e6f88c1295ec3c0367fefc601e1e0d4df2f5844aec2c2', 'sickpickisode-2020-web-developer-gift-guide', '/shows/306 - gift guide.md', '2023-10-16 20:07:07.040', '2023-10-27 15:57:56.611', 'TASTY'),
('syntax_podcast_show_00307', 307, 'Hasty Treat - Why should I use React Hooks?', '2020-12-07 14:00:00.135', 'https://traffic.libsyn.com/syntax/Syntax307.mp3', '\nIn this Hasty Treat, Scott and Wes talk about React Hooks and why you might want to use them instead of class components.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:54 - Decouple the UI from the logic\n* This wasn\'t impossible with class-based components, but we started using HOC to do this.\n* With hooks, it makes you decouple what it does and how it looks. \n* Makes things like GraphQL code gen possible\n* Multiple pieces of state or functionality \n* Share commonly used functionality among projects and components\n\n10:31 - Reduction in code\n* Lifecycle methods were often redundant. useEffect offers a way to prevent the duplication that can happen with component did update and did mount. This gives you a way to say, \"Hey, run this code when these things change.\"\n\n13:30 - useEffect\'s dependencies\n* These give you access to targeted control over side effects rather than just something changed.\n\n14:15 - Easier to grok\n* What happens? When? Where? It\'s mostly in the hook.\n\n16:09 - Simplicity in usage\n* Thing, updateThing is more targeted than set state\n* Ref makes way more sense with useRef\n  * String refs weren\'t great, the function ref thing was obnoxious\n\n21:07 - Gripes about Hooks\n* Naming is kind of odd\n  * Vue did a better job with the names\n\n## Links\n* [https://github.com/pmndrs/jotai](https://github.com/pmndrs/jotai)\n* [https://github.com/rehooks](https://github.com/rehooks)\n* [https://twitter.com/youyuxi/status/1327328144525848577/photo/1](https://twitter.com/youyuxi/status/1327328144525848577/photo/1)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '1ceabcac572632acf3b402a5587f50c690dd490074719bf8928410a3a90bcad8', 'hasty-treat-why-should-i-use-react-hooks', '/shows/307 - react hooks.md', '2023-10-16 20:07:07.085', '2023-10-27 15:57:56.667', 'HASTY'),
('syntax_podcast_show_00308', 308, 'Gatsby vs Next.js in 2021', '2020-12-09 14:00:00.135', 'https://traffic.libsyn.com/syntax/Syntax308.mp3', '\nIn this episode of Syntax, Scott and Wes talk about Gatsby vs Next. A lot has changed in the last year — what are the differences, and do the recommendations from Syntax 120 still hold true?\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n\n03:34 - Server-rendered\n* Both do server rendered\n* Gatsby is done at build time\n* Next is done at build and on deploy\n\n05:26 - Static generation\n* getStaticProps()\n* getServerSideProps()\n\n08:25 - Re-rendering pages\n* Gatsby can be re-rendered and re-deployed - any CMS lets you do this on only the pages that changed.\n* Gatsby-cloud\n* Next.js has the revalidate flag that will re-render when stale\n\n18:54 - Data management\n* Gatsby has a built in GraphQL API feature with\n* Next.js has nothing - it\'s not their problem. Use Apollo, or SWR, React Query, or redux, or whatever you want.\n\n23:16 - Client-side data\n* Neither do anything, next.\n\n26:33 - Dynamic Pages\n* List of 100 shoes, each one gets a page\n* List of four types of shoes: basketball, runners, casual, bowling, etc.\n* List of 10 colors: each color gets its own page.\n* List of 12 sizes, each size gets its own page.\n* Now it gets complicated when you do this:\n    * Show me basketball shoes, in red, in size 5\n    * 600 pages minimum\n    * What about size 6+7?\n    * Then you get into having to fetch data on the client side - but all your data is in GraphQL?!\n    * The queries are different!\n* Gatsby will get \"Hosted GraphQL\": [https://twitter.com/kylemathews/status/1252803849775009794](https://twitter.com/kylemathews/status/1252803849775009794)\n\n30:41 - Routing\n* Neither do nested routing still\n* Both do folder based wrapper\n\n34:50 - Hosting\n* Anywhere\n\n35:54 - Images\n* Compression/resize\n* Lazy loading\n* SVG\n* Blur up\n* Next 10 released first revision of Next.js image\n    * It\'s not as good as Gatbsy-image\n    * Must specify width and height, whereas gatsby has fixed and fluid\n    * Compression\n    * No blur up\n    * Yes lazy loading\n    * both don\'t support gifs\n    * Gatbsy requires annoying GraphQL query OR another plugin like MDX to do it\n        * Not for long! [https://twitter.com/ascorbic/status/1320770231657238529](https://twitter.com/ascorbic/status/1320770231657238529)\n    * Next.js is just `<image src=\"\"`\n    * Next does remote images\n    * Neither have quality or format auto like Cloudinary does\n    * Gatsby images have to be compressed at build time\n    * Next.js can do it on the fly\n        * assuming your server has the right tooling installed\n* The GOLD STANDARD - [https://gridsome.org/docs/images/](https://gridsome.org/docs/images/)\n    * Lib authors need to give this a look\n* [https://twitter.com/mxstbr/status/1323279745275101184](https://twitter.com/mxstbr/status/1323279745275101184)\n* [https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image)\n\n46:20 - Server or Serverless\n* Gatsby - none. You can do it with Netlify, Begin, AWS, Gatsby doesn\'t care.\n* Next.js - can do server with API routes. Can do serverless if you host on Vercel.\n\n49:44 - SEO\n* Tags\n    * Gatsby - Helmet\n    * Next - Head\n* Sitemap\n    * Plugin for both\n\n49:55 - Plugin Ecosystem\n* Gatsby has lots of plugins that you install\n* Next.js has some too. Seems Gatsby is easier in this regard because plugins can manage and normalize data into the GRaphQL Layer.\n\n53:10 - Auth\n* Neither do auth\n* The first to do baked-in auth solution could get big gains.\n* See Scott\'s Svelte Meteor accounts set up. It good. [https://github.com/leveluptuts/svelte-accounts-ui](https://github.com/leveluptuts/svelte-accounts-ui)\n\n55:00 - E-commerce\n* Gatsby - options are mostly limited to Snipcart and Shopify like iframe drop in solutions where the majority of operations take place on another site and service.\n* Next.js - hey released a starter boilerplate that leans on an existing headless cart\n* [https://rainierwatch.com/](https://rainierwatch.com/)\n\n## Links\n* [Syntax 120: Gatsby vs Next](https://syntax.fm/show/120/gatsby-vs-next)\n* [Gatsby](https://www.gatsbyjs.org/)\n* [Next.js](https://nextjs.org/)\n* [Svelte](https://svelte.dev/)\n* [Meteor](https://www.meteor.com/)\n* [Vercel](https://vercel.com/)\n* [GraphQL](https://graphql.org/)\n* [https://www.swyx.io/react-sfcs-here/](https://www.swyx.io/react-sfcs-here/)\n* [React Query](https://react-query.tanstack.com/)\n* [SWR](https://swr.vercel.app/)\n* [React Router](https://reactrouter.com/)\n* [gatsby-image](https://www.gatsbyjs.com/plugins/gatsby-image/)\n* [Cloudinary](https://cloudinary.com/)\n* [imgIX](https://www.imgix.com/)\n* [Begin](https://begin.com/)\n* [Netlify](https://www.netlify.com/)\n* [https://reactioncommerce.com/](https://reactioncommerce.com/)\n* [Shopify](https://www.shopify.com/)\n* [SnipCart](https://snipcart.com/)\n* [WooCommerce](https://woocommerce.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Cobra Drain Zip It](https://amzn.to/2TOqDdw)\n* Wes: Deli Containers:\n    * [Mixed Boys](https://amzn.to/3kSQmxh) \n    * [Small Boys](https://amzn.to/3kUC53h)\n    * [Medium Boys](https://amzn.to/3evBh2F) \n    * [Large Boys](https://amzn.to/2JypwNv)\n\n## Shameless Plugs\n* Scott: [Animating Svelte](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React Course](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7b292eb00bf2ec9692b429430bc57d5ebfcf4d6029d56a6926886ff0f53c4e08', 'gatsby-vs-next-js-in-2021', '/shows/308 - gatsby.md', '2023-10-16 20:07:07.139', '2023-10-27 15:57:56.724', 'TASTY'),
('syntax_podcast_show_00309', 309, 'Hasty Treat - 300th Episode Tech Chat', '2020-12-14 14:00:00.805', 'https://traffic.libsyn.com/syntax/Syntax309.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their 300th episode and the tech behind it.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n02:15 - The things we tried\n* Zoom Breakout rooms\n* Hopin - $$$ \n* Streamyard \n\n04:24 - What we used\n* Discord\n  * Room as a waiting room\n  * Roles to give access\n  * An a/v room where Wes and Scott were hanging\n  * Lots of questions about Slack vs Discord\n* OBS\n  * ObS to stream to three locations\n  * ObS Streamlabs does this easily\n  * Screen capture did a better job than using the video source from Discord\n* Youtube, Youtube, and MUX\n  * Streamlabs can stream to 4 sources at once\n  * MUX\n* How we got [Syntax.fm/live](http://syntax.fm/live) to work\n  * Create a new live stream on Mux via their UI\n  * Get stream address and key\n  * Point Streamlabs to it\n  * HLS m3u8 address from Mux into a HLS react player\n* Looping intro video\n  * Principle for mac\n  * Watch how I did it on youtube - [https://www.youtube.com/watch?v=I6pSlESq_bY](https://www.youtube.com/watch?v=I6pSlESq_bY)\n  * Music\n    * Song Scott wrote\n* Recording Audio\n  * Wes recorded two streams locally\n  * All audio on stream was piped through BlackHole on Scott\'s machine\n  * Used Loopback to pipe Discord audio into an input\n  * Scott + Guest were on the same channel, possibly compressed\n  * Sounded good!\n\n## Links\n* [Zoom](https://zoom.us/)\n* [Hopin](https://hopin.com/)\n* [Streamyard](https://streamyard.com/)\n* [Discord](https://discord.com/)\n* [OBS](https://obsproject.com/)\n* [MUX](https://mux.com/)\n* [Slack](https://slack.com/)\n* [Spectrum](https://spectrum.chat/)\n* [Streamlabs](https://streamlabs.com/)\n* [VLC](https://www.videolan.org/vlc/)\n* [Twitch](https://www.twitch.tv/)\n* [react-hls-player](https://www.npmjs.com/package/react-hls-player)\n* [Principal](https://principleformac.com/)\n* [BlackHole](https://existential.audio/blackhole/)\n* [Loopback](https://rogueamoeba.com/loopback/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'eb0f2b94a6b4a3cbcca8646bbbd8258f5402e3b0d396242d15e729645d37c9a1', 'hasty-treat-300th-episode-tech-chat', '/shows/309 - tech chat.md', '2023-10-16 20:07:07.180', '2023-10-27 15:57:56.786', 'HASTY'),
('syntax_podcast_show_00310', 310, 'Serverless, Deno and TypeScript with Brian Leroux', '2020-12-16 14:00:00.805', 'https://traffic.libsyn.com/syntax/Syntax310.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Brian Leroux about severless, Deno, Typescript, and more!\n\n## Netlify - Sponsor\nNetlify is the best way to deploy and host a front-end website. All the features developers need right out of the box: Global CDN, Continuous Deployment, one click HTTPS and more. Hit up [netlify.com/syntax](https://netlify.com/syntax) for more info.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Guests\n* [Brian Leroux](https://twitter.com/brianleroux)\n\n## Show Notes\n02:17 - What\'s your background?\n\n06:18 - What is serverless? Why is serverless so awesome?\n\n14:07 - What changes from moving from an existing app to a new app?\n\n16:15 - What is a cold start?\n\n17:46 - What languages are suitable for serverless?\n\n19:14 - What do you think about Deno?\n\n24:23 - How does Architect work?\n\n31:14 - What do you think about Typescript?\n\n40:35 - Do you think websites should work without JavaScript?\n\n44:51 - What about sharing code?\n\n## Links\n* [Begin](https://begin.com/)\n* [Architect](https://arc.codes/)\n* [Scott Tries Begin](https://www.youtube.com/watch?v=dpHizW9Ojsg)\n* [Lambda](https://aws.amazon.com/lambda/)\n* [https://alephjs.org/](https://alephjs.org/) \n* [Deno](https://deno.land/)\n* [Typescript](https://www.typescriptlang.org/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Azure](https://azure.microsoft.com/)\n* [Remix](https://remix.run/)\n* [Svelte](https://svelte.dev/)\n* [Puppeteer](https://pptr.dev/)\n* [Yumda](https://github.com/lambci/yumda)\n* [DynamoDB](https://aws.amazon.com/dynamodb/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Brian: [Begin Fingerprinting](https://begin.com/)\n* Scott: [Been Here For Too Long](https://155pod.bandcamp.com/album/been-here-for-too-long)\n* Wes: [Grabber Tool](https://amzn.to/38qrnxU) \n\n## Shameless Plugs\n* Brian: [Begin Proxy](https://docs.begin.com/en/http-functions/proxy)\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4020586d5c7d5b264457705aee4aea9485e0008e42d3c604e21f14d5fbc0a89d', 'serverless-deno-and-typescript-with-brian-leroux', '/shows/310 - severless.md', '2023-10-16 20:07:07.230', '2023-10-27 15:57:56.855', 'TASTY'),
('syntax_podcast_show_00311', 311, 'Hasty Treat - How Would We Script a PS5 Buying Bot?', '2020-12-21 14:00:00.870', 'https://traffic.libsyn.com/syntax/Syntax311.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the PS5 bot debacle, and how they would do it differently!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:12 - Scott\'s strategy\n* Go to Reddit and refresh until someone posts a link and then GO GO GO\n* Don\'t buy on sites that allow simple bots to work\n* TBH I don\'t know how to code this type of bot and would prob end up accidentally buying a ton of stuff\n\n05:06 - Wes\' strategy\n* [https://mcbroken.com/](https://mcbroken.com/)\n\n1. You need a way to find out of there is stock\n    * Find out of there is an API endpoint you can hit (inspect element)\n2. If there is not, you\'ll need to scrape the site.\n3. Fetch(url). text()\n4. Regex \n5. [Cheerio](https://cheerio.js.org/)\n6. [Puppeteer](https://pptr.dev/) (slower, easier to run)\n7. Save any data that you want in a database. Text-based database is great.\n    * [Lowdb](https://www.npmjs.com/package/lowdb)\n    * [SQLite](https://www.sqlite.org/index.html)\n    * [DynamoDB](https://aws.amazon.com/dynamodb/) (if doing serverless)\n8. Re-run the scrape every N mins\n9. When there IS a match you can:\n    * Send a text message - [Twilio](https://www.twilio.com/)\n    * Send an email - [Postmark](https://postmarkapp.com/)\n    * Try to fill out the form and submit it yourself\n        * document.querySelector()\n\n11:35 - Things that get in the way\n* Blocked IP\n  * Use a VPN\n* Captcha or [Cloudflare](https://www.cloudflare.com/)\n* Run it on your local computer\n* Use Puppeteer to get all cookies and headers\n\n## Links\n* [https://twitter.com/bahamagician/status/1329430249151533066](https://twitter.com/bahamagician/status/1329430249151533066)\n* [stocktrack.ca](https://stocktrack.ca/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'bdaf7137a7c3e294f53a284a999d01840a59fb7d564185631e85394fa52e4604', 'hasty-treat-how-would-we-script-a-ps5-buying-bot', '/shows/311 - ps5.md', '2023-10-16 20:07:07.357', '2023-10-27 15:57:56.973', 'HASTY'),
('syntax_podcast_show_00312', 312, 'Potluck — New Macs × Podcast Statistics × E-commerce Testing × WordPress × Charging More × Learning Web Dev × More!', '2020-12-23 14:00:00.434', 'https://traffic.libsyn.com/syntax/Syntax312.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about new Macs and web development, podcast statistics during COVID, is it still worth it to learn WordPress, dealing with imposter syndrome, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what\'s happening with your errors, track them with [Sentry](https://sentry.io/). Sentry is open-source error tracking that helps developers monitor and fix crashes in real time. Cut your time on error resolution from five hours to five minutes. It works with any language and integrates with dozens of other services. Syntax listeners can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code \"tastytreat\".\n\n## Show Notes\n00:47 - Roch Tolinski — You guys are doing a downtown job!!!\n\n02:45 - Yesterday Apple announced their new Macs. They seem pretty sweet, but I was curious, what does this mean for the world of web developers? Will my current apps slowly stop being supported? Will things like brew and node and npm still work on those new machines? Would it be smart to start learning new programs to be prepared for the transition?\n\n10:20 - Hey, great show! No really, great show. What is better for working at home/the office, iMac or MacBook Pro?\n\n13:25 - What are your thoughts on Remix? And has your listenership gone down since COVID-19? I have heard that less people listen to podcasts now because they no longer commute.\n\n19:33 - What is your approach to testing for e-commerce sites? I am about to launch a client\'s online store and I\'m sick with worry that a simple plugin upgrade will impact the store, and that I won\'t know about it till a disgruntled customer complains.\n\n24:57 - I’m getting into web development through college (just trying for an associate\'s to start) and I’m noticing the intro courses are very hard to get into. I’ve been self-teaching so I kind of feel like I’m ahead. The intro to computing logic (basic algorithms) teacher teaches very slowly and forces us to use an awful software called Raptor to create pseudo programs. I’ve been asking to actually use a language rather than the software but the teacher doesn’t have enough programming knowledge to grade the actual language assignments. I feel like this course is a step back from what I already know. I was just wondering if you guys have any tips on getting through the grueling “required” courses?\n\n31:04 - So it\'s been announced now that Sapper will never hit 1.0, and instead Svelte core functionality is being expanded and Sapper is being deprecated. I know you all don\'t have any inside info, but kind of wondering how Scott feels about this and what he\'s doing with his Sapper site in the nebulous time between the big announcement and the release of the next Svelte version?\n\n35:17 - I\'m currently working through a full-stack Udemy course to make the switch away from my day job to try freelance web development. I want to start taking on some easier freelance jobs to help make a little extra money and build my portfolio, and I see WordPress recommended as an easy way to do this. My question is, would it be worth undertaking the learning process to pick up some PHP and learn basic WordPress development so that I can start freelancing now, or would I be better served just focusing on HTML, CSS and JS and waiting until I broaden my understanding of these languages before I start taking on some preliminary clients?\n\n39:22 - If I plan to use WordPress as a headless CMS, how do I make sure the WordPress site itself is not publicly accessible? As far as I know, there\'s no \"API-only\" mode for WordPress (like there is for, say, Rails or Laravel) and if I install a WordPress site on a server, it\'s going to be discoverable online. I\'d hate to have people find the WordPress API site and think it was my website — or for my static site to have to compete with my WordPress API for prominence in search engines. How do people ensure this doesn\'t happen?\n\n42:01 - If I have a Vue.js website running on WordPress, how could I dynamically insert Vue components from the WordPress backend (e.g. have a post that inserts a Vue.js poll component)? I don\'t want to recompile every time.\n\n44:24 - I\'ve heard you mention previously that you have used WordPress to host sites in the past. I\'m keen to learn how you have created your own themes for those sites. Did you write your own PHP, etc, or is there another way? I\'m hoping to learn a bit more about developing for WordPress as it\'s a skill I\'d like to have in my back pocket, and would love to hear about any resources you would recommend for this.\n\n47:51 - I’ve been a web developer for over 15 years. Unfortunately, I had to leave web development for personal reasons. I have a lot of great skills. Unfortunately, because I’ve been out of the game for so long my resume is full of holes. All the current experience I have is project-based or freelance-based. I do not have the ability to show long-term projects or anything stable on my resume. I’m trying to get my first job back in the field after my long absence. It has proven to be nearly impossible. I am listening to your Tasty Treat about certifications and certified education. I agree that certifications do not show actual skill. I also agree that just because I do not have longevity and consistency on my resume that I do not have the skills to pay the bills. How can I get my first job back in the field? I am working on small projects to highlight my skills but no one really seems to care. What would you do?\n\n53:36 - I am currently in a food service job, but would love to move into the dev/design field. I have a year of experience in JavaScript, HTML, and CSS/Sass, as well as React, Gatsby, Next, and Node ( thank you both for helping with those ). I have a small amount of experience with freelance web design and development, but feel I am greatly underselling myself ($150 for a Gatsby site built for a friend and less than $100 for a couple Fiverr gigs). I have seen freelance work out well for my friends and family, but I am terrified of having to find clients. I have a hard time valuing my work and fold when money is brought up. There is always a part of me that says to just shoot high and have them talk the price down, but I hate the confrontation. How should I go about finding my first $1,000 client and how can I show the client that my work is worth more without talking about the tech involved?\n\n## Links\n* [https://isapplesiliconready.com/](https://isapplesiliconready.com/)\n* [https://github.com/ThatGuySam/doesitarm](https://github.com/ThatGuySam/doesitarm)\n* Electron: [https://www.electronjs.org/blog/apple-silicon#how-does-it-work](https://www.electronjs.org/blog/apple-silicon#how-does-it-work)\n* [Missive](https://missiveapp.com/)\n* [VS Code](https://code.visualstudio.com/)\n* [Screenflow](http://www.telestream.net/screenflow/overview.htm)\n* [Figma](https://www.figma.com/)\n* [Sketch](https://www.sketch.com/)\n* [Brew](https://brew.sh/)\n* [MongoDB](https://www.mongodb.com)\n* [iTerm2](https://iterm2.com/)\n* [Hyper](https://hyper.is/)\n* [Davinci Resolve](https://www.blackmagicdesign.com/products/davinciresolve/)\n* [https://remix.run/](https://remix.run/)\n* [React Router](https://reactrouter.com/)\n* [ExpressionEngine](https://expressionengine.com/)\n* [Keystone.js](https://www.keystonejs.com/)\n* [Advanced Custom Fields](https://www.advancedcustomfields.com/)\n* [Dreamweaver](https://www.adobe.com/products/dreamweaver.html)\n* [Sapper](https://sapper.svelte.dev/)\n* [Svelte](https://svelte.dev/)\n* [https://svelte.dev/blog/whats-the-deal-with-sveltekit](https://svelte.dev/blog/whats-the-deal-with-sveltekit)\n* [Rollup](https://rollupjs.org/)\n* [https://www.snowpack.dev/](https://www.snowpack.dev/)\n* [Udemy](https://www.udemy.com/)\n* [Laravel](https://laravel.com/)\n* [https://www.tempertemper.net/blog/stop-search-indexing-for-netlify-deploy-previews-and-branch-deploys](https://www.tempertemper.net/blog/stop-search-indexing-for-netlify-deploy-previews-and-branch-deploys)\n* [Vercel](https://vercel.com/)\n* [Netlify](https://www.netlify.com/)\n* [Syntax 297: Hasty Treat - Certifications? Government Specified JavaScript Skills?](https://syntax.fm/show/297/hasty-treat-certifications-government-specified-javascript-skills)\n* [Design is a Job by Mike Monteiro](https://abookapart.com/products/design-is-a-job)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott:\n  * 1: [Chameleon: Hollywood Con Queen](https://podcasts.apple.com/us/podcast/chameleon-hollywood-con-queen/id1532225667)\n  * 2: [Q Clearance: The Hunt for QAnon](https://podcasts.apple.com/us/podcast/q-clearance-the-hunt-for-qanon/id1534027012)\n* Wes: [truLOCAL](https://trulocalusa.com/)\n\n## Shameless Plugs\n* Scott: [Deno 101 For Web Developers](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd4acd6323ca717218297e38f250c8283db2db37e8eb7bcf451a97786a2164b09', 'potluck-new-macs-podcast-statistics-e-commerce-testing-wordpress-charging-more-learning-web-dev-more', '/shows/312 - potluck.md', '2023-10-16 20:07:07.399', '2023-10-27 15:57:57.059', 'TASTY'),
('syntax_podcast_show_00313', 313, 'Hasty Treat - Hosting + Web Services Pricing Explainer', '2020-12-28 14:00:00.935', 'https://traffic.libsyn.com/syntax/Syntax313.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how hosting and web services pricing works, and how to figure out what you need, and what you don\'t. \n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n\n## Show Notes\n01:55 - Per minute\n* Spin up, do the work, spin down\n* Popular in serverless space\n* Can apply to other types of computing such as graphics, AI, machine learning, etc.\n\n03:49 - By resources\n* Ram\n* CPU\n* Disk space\n\n06:02 - Per \"dyno\"\n* These are Heroku Linux servers\n* You can add more dynos and make your app faster\n* They scale it for you\n\n08:54 - By bandwidth\n* Sitting files\n* Inbound (ingress)\n* Output\n\n12:24 - By DB calls or entries\n* Databases\n\n14:04 - By users\n* This is more of a Sass thing, but can bleed into hosting too\n* Seat-based - Netlify does something like this\n\n17:23 - By apps\n* Digital Ocean app platform\n* Each app is $5\n\n21:22 - By \"work\"\n* Cloudinary does transforms on images\n* Mux\n\n## Links\n* [Heroku](https://www.heroku.com/)\n* [AWS](https://aws.amazon.com/)\n* [Digital Ocean](https://www.digitalocean.com/)\n* [Meteor Galaxy](https://www.meteor.com/hosting)\n* [Linode](https://www.linode.com/)\n* [Rackspace](https://www.rackspace.com/)\n* [MediaTemple](https://mediatemple.net/)\n* [GoDaddy](https://www.godaddy.com/)\n* [Bluehost](https://www.bluehost.com/)\n* [Backblaze B2](https://www.backblaze.com/b2/cloud-storage.html)\n* [Mux](https://mux.com/)\n* [GraphQL](https://graphql.org/)\n* [Github](https://github.com/)\n* [Netlify](https://www.netlify.com/)\n* [1Password](https://1password.com/)\n* [Cloudinary](https://cloudinary.com/)\n* [Firefox Containers](https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/)\n* [Chrome grouped tabs](https://blog.google/products/chrome/manage-tabs-with-google-chrome/)\n* [Brave](https://brave.com/)\n* [Digital Ocean app platform](https://www.digitalocean.com/products/app-platform/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Vercel](https://vercel.com/)\n* [Prisma](https://www.prisma.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '47dad460ca26ad1ee8fe24dd726fc30fe196abd0226955b1d2d662e10c06c026', 'hasty-treat-hosting-web-services-pricing-explainer', '/shows/313 - hosting.md', '2023-10-16 20:07:07.439', '2023-10-27 15:57:57.106', 'HASTY'),
('syntax_podcast_show_00314', 314, '2020 In Review', '2020-12-30 14:00:00.617', 'https://traffic.libsyn.com/syntax/Syntax314.mp3', '\nIn this episode of Syntax, Scott and Wes talk about 2020 in review — predictions, hits and misses, hot tech, what they worked on, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n01:43 - Predictions from 2020\n* [CSS Subgrid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid)\n* [CSS Houdini](https://developer.mozilla.org/en-US/docs/Web/Houdini)\n* CSS features not supported in older browsers yet\n  * Scrollsnap - IE 11 and up. Lot\'s of mobile issues.\n  * `position:sticky` - no IE at all\n* [NPM tink](https://www.npmjs.com/package/tink)\n  * Installer-less npm\n  * Load packages at runtime into a shared cache across all projects\n  * Intelligently download the parts you need\n* [Yarn PnP](https://next.yarnpkg.com/features/pnp) / [Yarn 2](https://yarnpkg.com/)\n  * Hard links to eliminate package duplication\n  * Shared cache across all projects\n* [Pika](https://www.pika.dev/) & [Snowpack](https://www.snowpack.dev/)\n* [Deno](https://deno.land/)\n* [React](https://reactjs.org/)\n  * Suspense in more libraries\n  * Suspense for Server Rendering\n* [Meteor](https://www.meteor.com/)\n  * New ownership. v1.9 just dropped with lots of promise for future growth\n* [Svelte 3](https://svelte.dev/)\n* [Vue 3](https://vuejs.org/)\n* [Apollo](https://www.apollographql.com/)\n  * 3.0 came out\n  * Fine grain cache control\n  * Hooks API\n  * Custom logic over how things are read and merged\n  * New dev tools\n* [Next.js](https://nextjs.org/)\n  * 10.0 came out\n  * Images!\n* [Gatsby](https://www.gatsbyjs.com/)\n  * A single useQuery (made possible by suspense)\n* Serverless\n  * Going to get easier\n  * [Begin](https://begin.com/)\n  * Next.js / Now Functions\n* Headless CMS Thunderdome\n  * [Sanity](https://www.sanity.io/syntax)\n  * [WordPress](https://wordpress.org/)\n  * [WPGraphQL](https://www.wpgraphql.com/)\n  * [Keystone](https://www.keystonejs.com/)\n  * [Strapi](https://strapi.io/)\n  * [RedwoodJS](https://redwoodjs.com/)\n  * [Blitz.js](https://blitzjs.com/)\n* [Cypress](https://www.cypress.io/)\n  * End to end testing\n  * We got Firefox support in 2020\n* [Modulz](https://www.modulz.app/)\n*  Exports to JS component\n* [Figma](https://www.figma.com/)\n  * Was already amazing in 2019\n  * Constantly improving and adding new features\n  * Can import from Sketch\n  * Auto Layout \n* [Spline](https://spline.design/)\n\n42:24 - What other tech was hot in 2020? \n* ES Modules is king\n  * We\'re ready in the browser\n  * Node shipped stable\n  * [Deno](https://deno.land/) has it\n  * [Snowpack](https://www.snowpack.dev/)\n* Bundlers and tools\n  * [Snowpack](https://www.snowpack.dev/)\n  * [Vite](https://github.com/vitejs/vite)\n  * [Rollup](https://rollupjs.org/) made gains\n  * [Rome](https://rome.tools/)\n  * [GraphQL](https://graphql.org/) got way easier\n* Battle of the Types\n  * [Typescript](https://www.typescriptlang.org/)\n  * [Flow](https://flow.org/)\n  * [Reason](https://reasonml.github.io/)\n  * [Rust](https://www.rust-lang.org/)\n* [Wasm](https://webassembly.org/)\n  * Viable to use\n  * Starting to exist in more real ways\n\n52:53 - Working from home\n* Remote work is hotter than ever\n* [Starlink](https://www.starlink.com/) is coming\n* Webcams - [Cam Link](https://www.elgato.com/en/gaming/cam-link-4k)\n* [Discord](https://discord.com/)\n* Remote Pairing\n  * [Live Share](https://visualstudio.microsoft.com/services/live-share/) - I used VS Code with Jed from Keystone\n  * [Tuple](https://tuple.app/)\n\n57:13 - Code libraries\n* [React Query](https://react-query.tanstack.com/)\n* [Alpine.js](https://github.com/alpinejs/alpine)\n* [Stencil](https://stenciljs.com/)\n\n59:25 - Personal / Professional updates\n* Hard year for productivity\n* Published more than 100 episodes of Syntax\n\n## Links\n* [Syntax 216: Tech To Watch In 2020](https://syntax.fm/show/216/tech-to-watch-in-2020)\n* [Adam Argyle](https://twitter.com/argyleink)\n* [https://ishoudinireadyyet.com/](https://ishoudinireadyyet.com/)\n* [Syntax 212: Pika Pkg](https://syntax.fm/show/212/pika-pkg)\n* [Fred Schott](https://twitter.com/FredKSchott)\n* [Level Up Tutorials: Deno 101 For Web Developers](https://www.leveluptutorials.com/tutorials/deno-101-for-web-developers)\n* [React Suspense](https://reactjs.org/docs/concurrent-mode-suspense.html)\n* [Sapper](https://sapper.svelte.dev/)\n* [How to Supercharge Your Productivity with GraphQL Tooling by Scott Tolinski](https://www.youtube.com/watch?v=3FIijq7qetI)\n* [Wes\' Master Gatsby Course](https://mastergatsby.com/)\n* [Syntax 308: Gatsby vs Next.js in 2021](https://syntax.fm/show/308/gatsby-vs-next-js-in-2021)\n* [Syntax 299: Hasty Treat - Bundlers in 2020](https://syntax.fm/show/299/hasty-treat-bundlers-in-2020)\n* [https://github.com/ffmpegwasm/ffmpeg.wasm](https://github.com/ffmpegwasm/ffmpeg.wasm)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Innr Bulbs](https://www.innr.com/en/)\n* Wes: [Pendleton Weighted Blanket](https://www.costco.com/pendleton-weighted-blanket.product.100503818.html)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '355702b66a6a97b71c20fd1e647c2850462caff7c03441f92609b927c892b230', '2020-in-review', '/shows/314 - 2020.md', '2023-10-16 20:07:07.480', '2023-10-27 15:57:57.154', 'TASTY'),
('syntax_podcast_show_00315', 315, 'Hasty Treat - Hyper Productivity with Keyboard Shortcuts + Window Management', '2021-01-04 14:00:00.918', 'https://traffic.libsyn.com/syntax/Syntax315.mp3', '\nIn this Hasty Treat, Scott and Wes talk about keyboard shortcuts, window management, and how to stay productive.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n\n## Show Notes\n\n03:54 - [Karabiner-Elements](https://karabiner-elements.pqrs.org/)\n\n06:11 - [Better Touch Tool](https://folivora.ai/)\n\n13:55 - [ScreenFlow](http://www.telestream.net/screenflow/overview.htm)\n\n17:52 - [VS Code Shortcuts](https://code.visualstudio.com/docs/getstarted/keybindings)\n\n21:20 - [Text Expander](https://textexpander.com/)\n\n23:00 - [Clipy](https://clipy-app.com/)\n\n\n## Links\n* [Davinci Resolve](https://www.blackmagicdesign.com/products/davinciresolve/)\n* [Divvy](https://mizage.com/divvy/)\n* [Uberlayer](https://www.macupdate.com/app/mac/44470/uberlayer)\n* [Elgato Stream Deck](https://www.elgato.com/en/gaming/stream-deck)\n* [iShowU](https://support.shinywhitebox.com/hc/en-us/articles/204161459-Installing-iShowU-Audio-Capture-Mojave-and-earlier-)\n* [Rocket](https://matthewpalmer.net/rocket/)\n* [Clipy source](https://github.com/Clipy/Clipy/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3d49860112e138c2d7b507886a58f153c0ba1681cff0ac9fcc76e4a73f9858b4', 'hasty-treat-hyper-productivity-with-keyboard-shortcuts-window-management', '/shows/315 - productivity.md', '2023-10-16 20:07:07.525', '2023-10-27 15:57:57.210', 'HASTY'),
('syntax_podcast_show_00316', 316, '2021 Predictions', '2021-01-06 14:00:00.918', 'https://traffic.libsyn.com/syntax/Syntax316.mp3', '\nIn this episode of Syntax, Scott and Wes talk about their predictions for 2021!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n02:06 - ESM\n* Scott: It\'s going to be big\n  * [Snowpack](https://www.snowpack.dev/)\n* Wes: Everything going forward should be ESM\n\n05:44 - Wes: Remote work will grow\n* Whole new talent pool opens up\n* Whole new living situations open up\n\n08:23 - Scott: [Deno](https://deno.land/) will grow \n* [Deno 101 for Web Developers](https://www.leveluptutorials.com/tutorials/deno-101-for-web-developers)\n\n11:12 - Wes: Tooling will fade away\n* Less setup, more behind the scenes\n* [Rome](https://rome.tools/)\n* [Deno](https://deno.land/)\n  * Linter\n  * Formatter\n  * Transpiler\n  * Tester\n* [Parcel2](https://v2.parceljs.org/)\n* [Snowpack](https://www.snowpack.dev/)\n* [Nextjs](https://nextjs.org/)\n\n14:14 - Scott: Greater usage of other languages to build Javascript\n* [esbuild](https://esbuild.github.io/) \n* [Rust](https://www.rust-lang.org/)\n* [Go](https://golang.org/)\n\n19:35 - Wes: Programming communities will gain traction\n* [Github Discussions](https://docs.github.com/en/free-pro-team@latest/discussions)\n* [Forem](https://dev.to/t/forem)\n* [Circle](https://circle.so/)\n* [spectrum](https://spectrum.chat/)\n* [Discourse](https://www.discourse.org/)\n\n23:25 - Scott: More WASM\n* [Mongo](https://www.mongodb.com/)\n* [Spline](https://spline.design/)\n\n27:19 - Typescript\n* Wes: Typescript will become more popular\n* Scott: Tooling will get better\n  * [VS Code](https://code.visualstudio.com/)\n\n29:37 - React\n* Scott:\n  * Scoped CSS in React will evolve\n  * SSR and hydration will be better\n* Wes:\n  * People will fall out of love with React\n  * Or more magic will get added to React\n\n32:52 - Scott: More web component frameworks\n* [Stencil](https://stenciljs.com/)\n\n33:17 - Scott: [Markdown](https://en.wikipedia.org/wiki/Markdown) and [mdx](https://mdxjs.com/)-like frameworks will skyrocket in use\n\n33:59 - Wes: [Gatsby](https://www.gatsbyjs.com/)\n* Hosted GraphQL / SSR / Render on demand\n* Solve the pain of long build times\n* [Syntax 308: Gatsby vs Next.js in 2021](https://syntax.fm/show/308/gatsby-vs-next-js-in-2021)\n* [Next.js](https://nextjs.org/) \n\n35:24 - Scott: AR tech will grow\n* [Target AR app](https://www.target.com/c/see-it-in-your-space/-/N-9ciy7)\n\n36:38 - Wes: AI will become accessible\n* Something as easy as a search result\n* [RTX Voice](https://www.nvidia.com/en-us/geforce/forums/broadcasting/18/361740/rtx-voice-beta/)\n\n38:43 - [VS Code](https://code.visualstudio.com/)\n* Scott:\n  * It will continue dominating\n  * Cloud and shared coding env will become better\n  * [Figma](https://www.figma.com/)\n* Wes:\n  * [Github Codespaces](https://github.com/features/codespaces)\n\n40:18 - CSS\n* Wes:\n  * Color functions\n  * More use of built-in features\n  * Scoped CSS\n* Scott:\n  * People are going to love and use CSS variables\n  * [Modern CSS Design Systems Course](https://www.leveluptutorials.com/tutorials/modern-css-design-systems)\n\n42:39 - Serverless\n* Scott:\n  * Ease of use will get better and better\n* Wes:\n  * [Netlify](https://www.netlify.com/)\n  * [Vercel](https://vercel.com/)\n\n45:30 - Wes: Enterprise Jamstack will become a thing\n* [Cloudflare](https://www.cloudflare.com/) hosting\n* [Next.js](https://nextjs.org/)\n* [Gatsby](https://www.gatsbyjs.com/)\n* [Sapper](https://sapper.svelte.dev/)\n* [SvelteKit](https://svelte.dev/blog/whats-the-deal-with-sveltekit)\n\n46:30 - PWAs might become more popular\n* Apple will never want you to go around the app store\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Ted Lasso](https://tv.apple.com/us/show/ted-lasso/umc.cmc.vtoh0mn0xn7t3c643xqonfzy)\n* Wes: [Neewer Dimmable Bi-Color LED](https://www.amazon.com/Neewer-Dimmable-Professional-Photography-3200-5600K/dp/B01934RL0U)\n\n## Shameless Plugs\n* Scott: [Deno 101 for Web Developers](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'f90538e6ff17cff390bf0a9cc34c3707c2962cb0651bfe781075418e0daa5f58', '2021-predictions', '/shows/316 - predictions.md', '2023-10-16 20:07:07.566', '2023-10-27 15:57:57.263', 'TASTY'),
('syntax_podcast_show_00317', 317, 'Hasty Treat - A Podcast About Nothing', '2021-01-11 14:00:00.125', 'https://traffic.libsyn.com/syntax/Syntax317.mp3', '\nIn this Hasty Treat, Scott and Wes talk about nothing — null, undefined, void, false, 0, \'\', NaN, [], {}, never — all sorts of values that could mean the things that do not exist.\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:35 - Undefined \n* Implicitly nothing\n* A variable declared, but not set is undefined\n\n04:25 - Null\n* Explicitly nothing\n\n04:41 - Null vs Undefined\n* Null has a value of nothing\n* Undefined does not have a value\n* You can set variables to either\n  * If you want to set a score variable to nothing, set it to null\n  * If you want to un-set a value, set it to undefined\n  * == will check if a value is either null or undefined \n\n05:35 - Void \n* In Javascript\n  * You can pop void in front of calling a function and it will return undefined (even if that function returns a value)\n  * I\'ve seen it on links that go nowhere (don\'t do this — use a button)\n  * To prevent an arrow function from leaking\n  * `onSubmit=\"javascript:void()\"` is a quick-n-easy prevent default on forms\n* In Typescript\n  * Void is when you don’t care about what is returned from a function, or if nothing is returned\n  * A click handler that goes off and does stuff (side effect) can return void\n\n09:15 - Never (in Typescript)\n* Some functions will never return:\n  * Functions that throw errors\n  * Functions that have infinite loops\n  * Also, unreachable variables have a type of never\n    * `if(true == false) { let var = \'this will never be true\'; }`\n\n11:05 - Falsy values\n* 0, -0, 0n\n* false\n* \'\' (empty string)\n* Empty array\n  * Is a value\n  * Its .length can be falsy\n* Empty object\n  * Is a value\n  * Its object.keys(object) length can be falsy (0)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ec70f5f14b1309373997501e70bc14ef35907af5170da0f2fb88037a91f14879', 'hasty-treat-a-podcast-about-nothing', '/shows/317 - nothing.md', '2023-10-16 20:07:07.607', '2023-10-27 15:57:57.313', 'HASTY'),
('syntax_podcast_show_00318', 318, 'Reactathon LIVE', '2021-01-13 14:00:00.125', 'https://traffic.libsyn.com/syntax/Syntax318.mp3', '\nIn this episode of Syntax, Scott and Wes are coming at you live from Reactathon with audience-favorite segments including All I Want for Christmas *in React*, JS or Nay-s (or Both), Overrated / Underrated, Hot Take Tweets, Listener Questions, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Magic Bell - Sponsor\nMagicBell, the embeddable notification inbox - [magicbell.io](https://magicbell.io). Use the coupon code SYNTAX to get a 20% discount if you sign up in the next two weeks.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n04:17 - All I Want for Christmas *in React* is:\n* Suspense for data fetching\n* On mount animations\n  * Unmount for me\n* Single file components\n* `preventDefault` shortcut\n* Input to state mapping\n\n09:45 - JS or Nay-s (or Both)\n* Shout out to [Pigeonhole](https://pigeonhole.at/)\n* Graphene - 1) Carbon atoms organized in a hexagonal lattice, or 2) An opinionated Python library for building GraphQL Libraries in Python?\n* Floodlight - 1) A super simple syntax highlighter for XHTML documents, or 2) a large light used to illuminate dark outdoor spaces?\n* Toy Machine - 1) An early 2000s skate brand, or 2) A Vue-based GUI for creating state machines?\n* Joplin - 1) A free, open-source note taking and to-do application based on markdown, or 2) A city in the northwestern corner of Missouri?\n* Noco - 1) A JavaScript library that connects to No Code tools including bubble.io, or 2) A smart car battery maintainer & charger?\n* Innr - 1) A smart lightbulb, or 2) A CSS in JS library for selecting parent selectors?\n* Cabkoma Strand - 1) A thermoplastic carbon fiber composite rod used in modern buildings, or 2) A Redux-like state management library for Svelte?\n* Sputnik V - 1) Code name for the upcoming WordPress release with built-in headless CMS mode, or 2) A non-replicating viral vector COVID-19 vaccine?\n\n18:44 - Overrated / Underrated\n* [Deno](https://deno.land/)\n* ESM import from URL (no npm)\n* [Remix.run](https://remix.run/)\n* [Xstate](https://xstate.js.org/)\n\n27:49 - Hot Take Tweets\n* [https://twitter.com/wesbos/status/1336367385683636225](https://twitter.com/wesbos/status/1336367385683636225)\n\n34:34 - Listener Questions\n* Q: If you recently started doing web dev work, which career path would you choose - startup, FANG, or freelance?\n* Q: [TypeScript](https://www.typescriptlang.org/) all the things?\n* Q: What do you do to keep up with the latest and greatest changes in tech - front-end libraries, new languages, etc.?\n* Q: Can you share some exclusive BBQ tips?\n* Q: What do you expect of [Blitz.js](https://blitzjs.com/) in the next few years?\n* Q: What\'s the first node module you install in a brand new React project besides React itself?\n* Q: Thoughts on using languages other than JS and TS with React like [Kotlin](https://kotlinlang.org/)?\n* Q: Do you have an approach for optimizing hi-res images that are stored in your back-end, like S3 for your Gatsby website?\n\n## Links\n* Watch the live recording of this episode: [https://www.youtube.com/watch?v=8xJpxj6T1BQ](https://www.youtube.com/watch?v=8xJpxj6T1BQ)\n* [Formik](https://formik.org/)\n* [Mux](https://mux.com/)\n* [Syntax Ep 206: State Machines, CSS and Animations with David K Piano](https://syntax.fm/show/206/state-machines-css-and-animations-with-david-k-piano)\n* [Check My Hair - Wes Bos](https://github.com/wesbos/check-my-hair)\n* [Houdini.How](https://houdini.how/)\n* [Rust](https://www.rust-lang.org/)\n* [Cloudinary](https://cloudinary.com/)\n* [LockPickingLawyer YouTube Channel](https://www.youtube.com/channel/UCm9K6rby98W8JigLoZOh6FQ)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [VS Code color conversion extensions](https://marketplace.visualstudio.com/search?term=color%20conversion%20hex%20to%20hsla&target=VSCode&category=All%20categories&sortBy=Relevance)\n* Wes: [Acrylic lock picking kit](https://www.amazon.com/s?k=acrylic+lock+picking+kit&crid=379F0ODJMANCH&sprefix=acrylic+lock+pick%2Caps%2C159&ref=nb_sb_ss_ts-a-p_2_17)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '012a14fe7d2f9de62424cbfd5d03e562fc7240a1dffd69d85118aecc8d723b93', 'reactathon-live', '/shows/318 - reactathon.md', '2023-10-16 20:07:07.652', '2023-10-27 15:57:57.371', 'TASTY'),
('syntax_podcast_show_00319', 319, 'Hasty Treat - CSS Typography and Systems', '2021-01-18 14:00:00.813', 'https://traffic.libsyn.com/syntax/Syntax319.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS typography, and how to quickly get up and running with type systems.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n05:00 - How do you define type at the start of a new project?\n\n15:03 - How do media queries and screen sizes affect your system?\n\n16:58 - Why are systems in type important?\n\n20:21 - How do you design a type system?\n* Scott\'s type system:\n```jsx\n/* Font Sizes */\n  --baseFontSize: 1rem;\n  --baseNavSize: 0.64rem;\n  --smallFontSize: 0.8rem;\n  --smallestFontSize: 0.512rem;\n\n  --xtra-big-ass-heading: 3.052rem;\n  --xtra-heading: 2.441rem;\n  --heading-1: 1.953rem;\n  --heading-2: 1.563rem;\n  --heading-3: 1.25rem;\n  --heading-4: var(--baseFontSize);\n  --heading-5: var(--smallFontSize);\n  --heading-6: 0.64rem;\n  --heading-7: var(--smallestFontSize);\n```\n\n## Links\n* [https://type-scale.com/](https://type-scale.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '27138f6bc685c527db1fc3f8fcc9b0a2aca548e3e8a8e8e4eb31c327dd84ea4c', 'hasty-treat-css-typography-and-systems', '/shows/319 - css.md', '2023-10-16 20:07:07.728', '2023-10-27 15:57:57.422', 'HASTY'),
('syntax_podcast_show_00320', 320, 'Potluck — $100k Dev Jobs × Sponsored Blog Posts × How To Keep Your Skills Up To Date × Libraries vs Custom × Dev Tools × More!', '2021-01-20 14:00:00.813', 'https://traffic.libsyn.com/syntax/Syntax320.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about VS Code, JavaScript, $100k-per-year dev jobs, sponsored blog posts, how to use dev tools, how to keep your skills up to date, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n02:01 - Not so much a question as me saying thanks! I started web dev as a bartender/college dropout in 2017 when Syntax was pretty new. I rarely miss an episode, and this year I\'m starting my first >$100k JS job! Your show has always been fun, kept my attention in the realm of web dev, and helped guide my interest — I think it has been extremely valuable to my career so far, and I look forward to more.\n\n04:10 - How do I know when to pull in a package rather than write similar functionality myself? And is there a rule for when enough is enough, in terms of having too many packages? What I\'m most concerned about is bundle size. It doesn\'t seem to take a lot of packages before Webpack notifies you about large bundle sizes, so what would be best practice?\n\n11:27 - What is your opinion of doing a sponsored post or guest post on your own site? And if you\'re in favor, what sorts of terms, payment, etc. would you outline or charge for it? \n\n18:20 - Do you have/know of any resources for those that want to learn more about selling digital products through e-commerce? The sources I\'ve found (Scott\'s e-commerce/Gatsby courses & Next.js commerce demo page) focus more on creating stores that sell physical products. Are there any gotchas when selling digital vs physical?\n\n22:10 - Do you have any tips for keeping your skills up to date while taking a break from work? I’m a frontend dev currently six months into my year-long maternity leave and I feel like my brain has turned to soup. I listen to podcasts and read blog posts but it never feels like enough. Time and energy are very limited for me to work on personal projects!\n\n25:11 - I remember you guys saying something about making your own UI component libraries. Do you use some CSS libraries like [Tailwind](https://tailwindcss.com/) or even [Bootstrap](https://getbootstrap.com/) or others for this, or do you write your Sass/CSS from scratch?\n\n30:52 - Would be interested to hear some of the common ways you use dev tools (chrome dev tools, react dev tools, redux, etc.). I feel like there is a lot of information in there that I am not utilizing properly to help figure out problems during development. Would be cool to hear an overview of how you use the different tabs, some of the most commons things to look for, etc.\n\n35:20 - I am graduating from a bootcamp next month and I feel severe insecurities/imposter. For whatever reason, I freeze up when it comes to coming up with code or writing things myself, mainly in JS. When in class, watching tutorials, following along, or viewing other people\'s code, I can tell you exactly what is going on, why it is being done, and I can change and add things and explain them. But when it comes to starting from a blank slate, I freeze, as if everything I know about programming has gone out the window. Do you have any advice as to how to get past this hurdle? I feel like at this point I shouldn\'t be feeling like this, but maybe this is normal?\n\n40:36 - Do you think developers have a responsibility to help reduce CO2 emissions caused by the web? A [BBC news article](https://www.bbc.co.uk/news/technology-55164410) stated that \"HD video streaming on a phone generates about eight times more in emissions than standard definition (SD)\" and noted that on a small screen, the viewer might not even notice the difference. Should the developer limit the resolution available to mobile devices, or should they let the end user choose?\n\n47:53 - I was hoping that you guys could give me, and other listeners, advice on \"knowing when you\'ve bitten off more than you can chew\"? Often I\'ll be working on a project for fun, or possibly building out my portfolio, and I\'ll continue to get excited about features that I\'d like to add to my current app or what have you. At first glance, the ideas or features seemed reasonable enough to tackle, but hours later, I\'ll find myself stuck, realizing that I\'m in over my head, as I\'ve tried to take on something that I\'m not yet experienced enough to work with, or I\'m lacking the man-power to complete it in a timely manner. At the same time, I want to challenge myself so that I can grow, but sometimes I feel that I\'m not using my time wisely. So my question to you is, where is the line between challenging ourselves to take on new and difficult tasks and scaling back our current work to make it more approachable and less overwhelming?\n\n55:01 - What is the right use-case for a database, and what is the right use-case for a headless CMS? Is a headless CMS just a database + a user-friendly way of entering data into that database? Is there a secure way of querying Sanity directly from the frontend if I have data that I want to be only available to logged-in users?\n\n## Links\n* [Syntax Listener Questions](https://docs.google.com/forms/d/e/1FAIpQLSfQlAo1wXHiJMySdU-h8QMtfoz92aMS9eycEHXB6eRCLh8KHA/viewform)\n* [Bundle Phobia](https://bundlephobia.com/)\n* [Shopify](https://www.shopify.com/)\n* [Snipcart](https://snipcart.com/)\n* [Styled Components](https://styled-components.com/)\n* [BEM](http://getbem.com/)\n* [Mux](https://mux.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Double Sided Mounting Tape](https://amzn.to/3qVAkX3)\n* Wes: [Secret Aardvark Habanero Hot Sauce](https://www.amazon.com/Secret-Aardvark-Habanero-Sauce-Net/dp/B00AIR3Q38)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '79d739cbd6f62cee16c322dfc51363d8265356d5dec69464b8758a2bf43a48a2', 'potluck-usd100k-dev-jobs-sponsored-blog-posts-how-to-keep-your-skills-up-to-date-libraries-vs-custom-dev-tools-more', '/shows/320 - potluck.md', '2023-10-16 20:07:07.819', '2023-10-27 15:57:57.473', 'TASTY'),
('syntax_podcast_show_00321', 321, 'Hasty Treat - The New AVIF Image Format Is Unreal', '2021-01-25 14:00:00.813', 'https://traffic.libsyn.com/syntax/Syntax321.mp3', '\nIn this Hasty Treat, Scott and Wes talk about AVIF — what it is and how you might use it!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:10 - What is AVIF?\n* AVIF is derived from the keyframes of an AV1 video\n* Royalty free (big deal)\n* What about [WebP](https://developers.google.com/speed/webp)?\n* Basically half the file size of a WebP for free, which was already about half the size of a jpeg\n* It\'s a lossy format — ie it inherently will degrade the image\n* [https://jakearchibald.com/2020/avif-has-landed/](https://jakearchibald.com/2020/avif-has-landed/)\n* No animation\n\n10:53 - How to implement\n* [Cloudinary](https://cloudinary.com/) is in beta, but you can try it\n* [Gatsby](https://www.gatsbyjs.com/) supports it\n* [https://squoosh.app/](https://squoosh.app/)\n* [Imagemin](https://github.com/imagemin)\n* [https://github.com/nucliweb/imagemin-avif](https://github.com/nucliweb/imagemin-avif)\n* [https://avif.io/](https://avif.io/)\n* [https://github.com/dreampiggy/AVIFQuickLook](https://github.com/dreampiggy/AVIFQuickLook)\n* [https://github.com/vercel/next.js/pull/20765](https://github.com/vercel/next.js/pull/20765)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a240dd059fdb6d321243d830ff6587d1492d4d5895f92742598bb0773b1e32a7', 'hasty-treat-the-new-avif-image-format-is-unreal', '/shows/321 - avif.md', '2023-10-16 20:07:24.124', '2023-10-27 15:57:57.531', 'HASTY'),
('syntax_podcast_show_00322', 322, 'The Deno Show', '2021-01-27 14:00:00.813', 'https://traffic.libsyn.com/syntax/Syntax322.mp3', '\nIn this episode of Syntax, Scott and Wes bring you the long-awaited Deno show — what it is, what it replaces, how you can use it, and more!\n\n## Deque - Sponsor\nDeque’s free axe browser extension helps developers instantly catch 50% of accessibility bugs while they code. It’s lightweight, easy-to-use, and has zero false positives. Get started for free at [deque.com/axe](https://deque.com/axe/?utm_source=syntax&utm_medium=podcast&utm_campaign=axe_extension).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n02:13 - What is it?\n* A secure runtime for JavaScript and TypeScript\n* Built by [Ryan Dhal](https://tinyclouds.org/) — same guy who initially built Node.js\n* API is JS or TS out of the box\n\n04:55 - Does it replace / what is it in relation to?\n* Node\n    * It\'s a replacement for Node.js\n* Express\n    * Web Server Frameworks like Express will run on Deno, but Express itself won\'t currently run because they are build on Node APIs\n    * [https://github.com/oakserver/oak](https://github.com/oakserver/oak)\n* Serverless\n    * Deno can be used for anything, so it can be used for serverless functions, or a traditional web server\n    * [Serverless, Deno and TypeScript with Brian Leroux](https://syntax.fm/show/310/serverless-deno-and-typescript-with-brian-leroux)\n* React / Vue / Svelte\n    * These things are just JavaScript, so they should/will work in Deno. Deno will replace your tooling. More involved things like Next.js that require Node APIs won\'t work until.\n    * [https://alephjs.org/](https://alephjs.org/)\n* SSR\n    * It comes with all browser APIs out of the box!\n* Fetch\n    * Window + Add Event listener\n* Webpack / Parcel / Snowpack\n    * Deno is a bundler\n* Prettier\n    * Deno is a formatter\n* TSC\n    * Deno is a TypeScript compiler and runtime\n* ESLint\n    * Deno is a linter\n* Jest\n    * Deno is a Test Runner\n* NPM\n    * Deno is a package manager - it pulls in packages from URLs\n\n14:51 - Modules\n* ES modules from the start\n* Modules are loaded from URLs\n* Why? No package registry to worry about\n* This is how the browser works\n* Import from URL\n* You can also specify it in the json file\n* [https://github.com/oakserver/oak/blob/main/deps.ts](https://github.com/oakserver/oak/blob/main/deps.ts)\n* [https://deno.land/](https://deno.land/)\n* Fetch is built in!\n    * It\'s a browser API, but who cares?!\n* Browser APIs\n    * window.add event Listener\n    * Deno is event based, like the browser\n\n20:10 - A nice standard library\n* [https://github.com/denoland/deno_std](https://github.com/denoland/deno_std)\n\n22:14 - WASM\n* Deno can run WASM with the same APIs that the browsers can\n* Node is doing this too (experimental)\n\n25:06 - Multi-threading with Web Workers\n\n26:13 - Speed\n* It\'s fast!\n* They took everything they learned from Node - good and bad\n* Built in Rust\n* From what we understand:\n    * V8 is written in C++\n    * Node is written in C, C++ and JavaScript\n    * How it talks to V8 - Rust sits in-between the JS runtime, and the C++ V8 runtime and communicates between the two.\n    * [https://github.com/denoland/deno/blob/master/core/examples/hello_world.rs](https://github.com/denoland/deno/blob/master/core/examples/hello_world.rs)\n\n29:44 - Security\n* Sandboxed\n* —allow-read\n* —allow-net\n* -allow-write\n* [https://deno.land/manual@v1.6.3/getting_started/permissions#permissions-list](https://deno.land/manual@v1.6.3/getting_started/permissions#permissions-list)\n* You can specify which dirs it can access\n\n33:39 - Run from anywhere\n* [https://www.npmjs.com/package/npx](https://www.npmjs.com/package/npx)\n* Deno run https://cool.com/whatever.ts\n\n37:43 - Async out of the box\n* Everything is based on async + await / promises right away. No callback APIs, no promise wrapping.\n* Top level await\n\n38:53 - Node Compatibility\n* Node APIs are being filled\n* This means if a browser package ships an ES module of a package, we can just import it\n\n42:21 - What we\'ve built\n* A bunch of sample scripts\n* Lots of simple demos\n* Very intuitive\n* Fetched and downloaded every single Syntax mp3\n    * [https://twitter.com/wesbos/status/1326345600141582336](https://twitter.com/wesbos/status/1326345600141582336)\n\n46:54 - Hosting\n* Literally any linux server (Linode, Digital Ocean, etc.)\n* [https://begin.com/](https://begin.com/)\n* [https://fly.io/](https://fly.io/)\n\n48:29 - Final thoughts\n* Scott: Now is a great time to learn, but don\'t put any crucial work into that space unless you are ready to write everything. Libraries are still being written and evolved. Docs are still sparse. Many things didn\'t work on first try. I had to read lots of source.\n* Wes: If You know JS or TS, you are already 90% there.\n    * The package ecosystem isn\'t there yet\n    * Battle-tested\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Boom/Bust: The Rise and Fall of HQ Trivia](https://www.theringer.com/2020/5/14/21258631/introducing-boom-bust-the-rise-and-fall-of-hq-trivia)\n* Wes: [Orthopaedic Pillow](https://amzn.to/2Xc3WBH)\n\n## Shameless Plugs\n* Scott: [Deno 101 For Web Developers](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '817484c100812c884da3816bf998ce2acb6485d74b3a92ff8f9528302fab7ab5', 'the-deno-show', '/shows/322 - deno.md', '2023-10-16 20:07:29.946', '2023-10-27 15:57:57.583', 'TASTY'),
('syntax_podcast_show_00323', 323, 'Hasty Treat - New Level Up Tutorials Site', '2021-02-01 14:00:00.858', 'https://traffic.libsyn.com/syntax/Syntax323.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the new Level Up Tutorials website — some of the new tech powering the site, behind-the-scenes decisions, previous iterations, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n02:55 - Previous iterations\n* Originally on [Drupal 7](https://www.drupal.org/drupal-7.0)\n* Full re-write to [Meteor](https://www.meteor.com/) + [Blaze](http://blazejs.org/)\n  * Two sites — store.leveluptutorials.com and leveluptutorials.com\n* [Meteor](https://www.meteor.com/) + [React](https://reactjs.org/)\n* [Meteor](https://www.meteor.com/) + [Apollo](https://www.apollographql.com/)\n* Combine store and site\n* Move to [TypeScript](https://www.typescriptlang.org/)\n* [NOW](https://vercel.com/)\n\n05:30 - Big choices\n* No [Babel](https://babeljs.io/) up and down the stack\n* UI\n  * Mostly unchanged — [React](https://reactjs.org/) + [Styled Components](https://styled-components.com/) + [SCSS](https://sass-lang.com/)\n    * Moving more to SCSS, CSS vars\n    * Build and dev done via [Snowpack](https://www.snowpack.dev/)\n      * 50ms hot reloadin\'\n      * Mega fast development workflow has been a huge plus\n      * Errors in the UI via [Snowpack](https://www.snowpack.dev/)\n      * Wrote a custom [GraphQL](https://graphql.org/) importer plugin\n* API\n  * [ESBuild](https://esbuild.github.io/)\n    * Insane speeds\n    * Wrote a custom [GraphQL](https://graphql.org/) importer plugin\n  * [Mercurious](https://mercurius.dev/) / [Fastify](https://www.fastify.io/)\n* Codegen\n  * [GraphQL](https://graphql.org/) code gen to create everything we need for a fully typed codebase\n  * Auto-generated [React Hooks](https://reactjs.org/docs/hooks-intro.html)\n* Hosting\n  * [render.com](http://render.com) for both\n* CLI\n  * Custom avalanche CLI that removes the guesswork and makes bulk operations easy\n* [Caddy](https://caddyserver.com/) server for easy `leveluptutorials.dev` in local environments\n* Testing\n  * [Jest](https://jestjs.io/) → API\n  * [Cypress](https://www.cypress.io/) → UI\n\n## Links\n* [Digital Ocean app platform](https://www.digitalocean.com/blog/introducing-digitalocean-app-platform-reimagining-paas-to-make-it-simpler-for-you-to-build-deploy-and-scale-apps/)\n* [https://beta.leveluptutorials.com/](https://beta.leveluptutorials.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5feab52e63bf9c515b9e5db333ee5c5c7a58fa89540992e56f72e879179455ca', 'hasty-treat-new-level-up-tutorials-site', '/shows/323 - levelup.md', '2023-10-16 20:07:29.989', '2023-10-27 15:57:57.636', 'HASTY'),
('syntax_podcast_show_00324', 324, 'TypeScript Fundamentals', '2021-02-03 14:00:00.858', 'https://traffic.libsyn.com/syntax/Syntax324.mp3', '\nIn this episode of Syntax, Scott and Wes talk about TypeScript fundamentals — what it is, how you use it, why people love it so much, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n\n### What is TypeScript?\n03:12 - Types?\n* What are types and why should you care?\n* JS is a typed language, it\'s just not strongly typed\n  * JS does not care about reassignment of a variable to a new type\n  * Does not care about your types, but they do exist\n\n06:34 - The Fundamentals\n* You write your JavaScript code, but each time you create a variable, function, parameter, you \"type it\" — which means you describe what that data will look like.\n  * Create a variable: Will it be a string? A number? A custom type of show?\n  * Create a function: What params does it take? What type are they? What does it return?\n* Types allow your code to know if there are type errors that would present themselves to the user silently. These are small errors that can be compounded and go unnoticed.\n  * This can allow you to prevent shipping code that has these errors by checking your code.\n  * Some of the biggest benefits here come via errors in your text editor\n\n13:30 - Explaining the types\n* You can create your own types\n* Strings\n* Numbers\n  * We only have numbers in TS, no floats/ints\n  * We do have BigInt though, but not something most people will use\n* Arrays\n  * Will be a list of another type\n* Unions\n  * This type will be one of the possible options\n  * String of DRAFT PUBLISHED or ARCHIVED\n* Intersections\n  * An intersection type combines multiple types into one\n* Objects\n  * These are custom types where each property is its own type\n* Any\n  * Explicit any\n  * Implicit any\n* Language types\n  * These things are technically just Objects, but they have their own types\n  * Dates\n  * Timeouts\n  * DOM Elements / Nodes\n* Void\n  * When a function returns nothing — usually used with side effects like click handlers\n* Enum\n  * A set of named constants\n    * Used when you have a select amount of values — I like to think of these as the select lists of TS\n    * String unions are also used for this same thing\n\n30:28 - Inference\n* Automatic detection of types\n* Typescript will try to infer your types based on their definition\n* Not every type can be inferred, leading to implicit anys and the need for explicit types\n\n33:25 - Getting types\n* Most popular packages already have types — you install them like `npm i @types/whatever`\n* If a package doesn\'t have types, you have to create them yourself, which can be annoying\n  * [MakeTypes](https://jvilk.com/MakeTypes/)\n  * Console log a JSON.stringify(obj), and pipe it in\n* Node has types\n* Vanilla JS has types, for the language and all of the DOM - HTMLInputElement\n* React has types\n* Typing Node modules that don\'t have types\n\n### Overall benefits\n40:39 - Type hinting\n* With TS and your editor (VSCode) you\'ll get more information about your code as you type it — allowing you to know exactly what things expect\n  * This seems like a small deal but in practice leads to being much more efficient\n\n42:50 - Refactoring\n* Rename a function, type, or variable and it will be updated everywhere in the project!\n* Moving a function to a new file is actually part of TypeScript\n* Drag + Drop file, update imports\n\n48:10 - Compiling\n* [TSC](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) vs [Babel](https://babeljs.io/) / [Esbuild](https://esbuild.github.io/)\n* Only TSC type checks\n* Compiling TS with babel will not allow you to break the build on type errors, you\'ll need to run TSC in coordination or in the CI/CD\n\n## Links\n* [Snipcart](https://snipcart.com/)\n* [GraphQL](https://graphql.org/)\n* [Snowpack](https://www.snowpack.dev/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott:\n  * 1: [LumiPets](https://amzn.to/3sfw4Cp)\n  * 2: [LumiPets Bear](https://amzn.to/2Lqkofk)\n* Wes: [Phomemo Label Printer](https://amzn.to/2LGXT5T)\n\n## Shameless Plugs\n* Scott: [ESM & Snowpack](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '23ec615401f8ff7fea54bac9e76c5af4cd8a2e4a874fede5e7598f00b5ebaabc', 'typescript-fundamentals', '/shows/324 - typescript.md', '2023-10-16 20:07:30.024', '2023-10-27 15:57:57.693', 'TASTY'),
('syntax_podcast_show_00325', 325, 'Hasty Treat - Keyboard Events Are Surprisingly Interesting', '2021-02-08 14:00:00.788', 'https://traffic.libsyn.com/syntax/Syntax325.mp3', '\nIn this Hasty Treat, Scott and Wes talk about keyboard events and some of the fascinating things you can do with them!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:04 - The Events\n* [http://keycode.info/](http://keycode.info/)\n* keydown\n* beforeInput\n* Keypress - deprecated\n* inputType tells you whether the event is inserting text, replacing text, inserting a line break, etc.\n* keyup\n* change event - only fires when you focus out\n* [https://github.com/w3c/uievents/issues/220](https://github.com/w3c/uievents/issues/220)\n\n08:02 - Event meta data\n```\n \"key\": \"c\",\n \"keyCode\": 67,\n \"which\": 67,\n \"code\": \"KeyC\",\n \"location\": 0,\n \"altKey\": false,\n \"ctrlKey\": false,\n \"metaKey\": true,\n \"shiftKey\": false\n```\n\n* Others: \n  * .locale \n  * .repeat\n\n16:46 - Media keys\n* [https://developers.google.com/web/updates/2019/02/chrome-73-media-updates](https://developers.google.com/web/updates/2019/02/chrome-73-media-updates) \n* play, pause, ect\n* Overkill app: [https://krausefx.com/blog/introducing-overkill-dont-let-itunes-interrupt-your-workflow](https://krausefx.com/blog/introducing-overkill-dont-let-itunes-interrupt-your-workflow) \n\n18:32 - When might you use key codes?\n* Space bar to stop a video on a page\n* Building a game\n* Making a web app feel more like an app\n\n## Links\n* [Better Touch Tool](https://folivora.ai/)\n* [Syntax 315: Hasty Treat - Hyper Productivity with Keyboard Shortcuts + Window Management](https://syntax.fm/show/315/hasty-treat-hyper-productivity-with-keyboard-shortcuts-window-management)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '593b72b8c311b48813e05beb9fa32284fce5576095ca7285de3bfa5901d35460', 'hasty-treat-keyboard-events-are-surprisingly-interesting', '/shows/325 - keyboard.md', '2023-10-16 20:07:30.062', '2023-10-27 15:57:57.753', 'HASTY'),
('syntax_podcast_show_00326', 326, 'We Review Resumes, Websites, and Online Presence', '2021-02-10 14:00:00.788', 'https://traffic.libsyn.com/syntax/Syntax326.mp3', '\nIn this episode of Syntax, Scott and Wes review resumes, websites, and online presences, and discuss pros and cons, what you should focus on, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n04:32 - Why does an impression matter?\n* All of this stuff comes together to work in your favour when you are hunting for a job.\n\n05:14 - What goes into an online presence?\n* Twitter\n  * Share what you know\n* Online website\n  * Design\n  * Messaging\n  * Effort\n  * Personal life\n* Blog\n* Resume\n* It\'s not about being popular, it\'s about relationships and positioning yourself as an expert. People mix up their hatred for \"influencers\" with having a rock solid network of people who they can help and who can help them.\n\n07:25 - A couple stories\n* [@HenriHelvetica](https://twitter.com/HenriHelvetica)\n  * You don\'t know how many times I\'ve tried to convince (esp people of color) to try a lightning talk. This stuff gets you to research, and you might even make discoveries.\n  * I know it\'s a step out of the comfort zone for many, and that\'s cool, but don\'t be upset at those who go for it, and land some work.\n  * I do (did) lunch n learns @ Juno, and I started to end them w/ a post bootcamp life — tell them what it\'s like, and to be active on twitter (share what you read, what you\'re working on, listen to others, follow great devs, etc.). One person DM\'d me to tell me she took that in and decided to try. \"I never forgot that time you gave a talk at HY and one thing that you emphasized was to make your voice known on Twitter. You said that this has opened many opportunities for you and that\'s been happening to me more and more recently. I never set out to build my account but the growth has indeed happened and along with it, opportunities from people I\'ve never expected.\"\n\n09:40 - Ash Connolly\n* [https://ashconnolly.com/](https://ashconnolly.com/)\n[https://www.notion.so/ashconnolly/Ash-Connolly-321c5a65350f477897ed025f4daa1bb0](https://www.notion.so/ashconnolly/Ash-Connolly-321c5a65350f477897ed025f4daa1bb0)\n* Software Engineer\n* Using new tech with high end clients\n* Review\n    * Pros\n      * Clean, simple design, but doesn\'t feel like it\'s missing something\n      * Animations are a nice touch\n      * Easy to see their work (e.g. photo, title, short paragraph, link)\n      * Testimonials is good, I might change the word testimonials, but that\'s small\n    * Cons\n      * Nitpick - footer emphasis color looks like a link\n      * HTML is good, but missing some semantic tags like <main>, <section>, <article>, too reliant on divs\n  * Resume\n    * Pros\n      * Good idea of what Ash has accomplished (e.g. just by reading his summary, I\'m left feeling impressed because of his client base and his extras like writing for FreeCodeCamp and Marvel Blog).\n      * Work history - good way of describing what he did. \"Carried out performance audits and site speed improvements\"\n      * Links to writings and side projects\n    * Cons\n      * Lists Brad Frost as someone who shared his post. This feels a little weird.\n      * Nitpick - CSS & CSS3, HTML & HTML5 on the languages. In 2021, just put HTML & CSS.\n      * Work history - WAY way too much. Keep it to one sentence and three or four bullet points for each job. Ain\'t nobody gonna read all that.\n\n20:48 - Matthew Bidwell\n* [https://matty.dev/](https://matty.dev/)\n* Backend dev\n* Not focused on dev\n* Review:\n  * Banging domain\n  * It\'s clear who he is, what he is about\n  * Links to Twitter, Github and LinkedIn right away\n  * Blog posts showing he knows what he\'s talking about\n\n24:42 - Leah Lundqvist\n* [https://leah.link](https://leah.link/)\n* Review:\n  * Pros\n    * Fantastic aesthetics on site\n    * Good lead paragraph\n  * Cons\n    * I\'m not sure what work she actually does\n    * Github pages are great for digging but not curation or showing off\n      * Same with Twitter\n    * For instance, I saw on Twitter that Leah made [https://app.airport.community/app/rec1CbVg4J5aqScUQ](https://app.airport.community/app/rec1CbVg4J5aqScUQ) but there was no mention of it anywhere else. A page full of the most recent / best projects with quick links is essential for anyone.\n    * Don\'t make them hunt for it\n  * Twitter review:\n    * Unreal\n    * Pinned tweet\n\n31:04 - Ismail Ghallou\n* [https://smakosh.com/](https://smakosh.com/)\n* Best one yet\n* Clear explanation right off the bat\n* Dribbble - shows me he\'s up on the latest\n* Open source\n* Testimonials\n* Talks\n* Blog\n* [https://twitter.com/smakosh](https://twitter.com/smakosh) - Twitter lines up\n* Most recent tweets about tech\n\n40:18 - Jhey Tompkins\n* [https://jhey.dev/](https://jhey.dev/)\n* Whimsey\n* Sound!\n* Good use of CSS and SVG animation\n\n46:28 - Wes\' website\n* [wesbos.com](https://wesbos.com/)\n* Can\'t view source\n* Whimsey\n* The right kind of animation\n* The link to the Syntax podcast has no indication that it\'s going to take you offsite.\n* The background image is good, but not as good with a wide browser.\n* Custom scrollbars are nice\n* Overall the site is a delight\n\n53:25 - Scott\'s website\n* [scotttolinski.com](https://www.scotttolinski.com/)\n* Font\'s a little big\n* Link to documentary is great\n* Bio should include links\n* Page animations are great\n* Showing personal life / interests is good\n* Super fast\n\n## Links\n* [https://twitter.com/wesbos/status/1350961135269400580](https://twitter.com/wesbos/status/1350961135269400580)\n* [Syntax 298: Voice Coding is Really Good with Josh Comeau](https://syntax.fm/show/298/voice-coding-is-really-good-with-josh-comeau)\n* [Josh Comeau](https://www.joshwcomeau.com/)\n* [Doug DeMuro](https://www.youtube.com/channel/UCsqjHFMB_JYTaEnf_vmTNqg)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Swedish Dishcloths](https://amzn.to/2NhnGSU)\n* Wes: [Paper Wheels Knife Sharpening System](https://amzn.to/3sCaDM8)\n\n## Shameless Plugs\n* Scott: [Testing with Cypress](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ae2ce579ec0cb7a399fc5afb628c62615cb138bac68ad0be7a00f2ac3cb5b303', 'we-review-resumes-websites-and-online-presence', '/shows/326 - reviews.md', '2023-10-16 20:07:30.100', '2023-10-27 15:57:57.808', 'TASTY'),
('syntax_podcast_show_00327', 327, 'Hasty Treat - TypeScript Compilers and Build Tools', '2021-02-15 14:00:00.264', 'https://traffic.libsyn.com/syntax/Syntax327.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the differences between compilers and build tools in TypeScript.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:38 - What is a TypeScript compiler?\n* Do we still need [Babel](https://babeljs.io/) / [WebPack](https://webpack.js.org/)?\n\n07:49 - [Babel](https://babeljs.io/)\n* Transpiler\n* It doesn\'t do typechecking\n* New JS features that aren\'t in TypeScript yet\n\n10:22 - [SWC](https://swc.rs/)\n* Rust based compiler\n* Doesn\'t do type checking (yet)\n* [https://github.com/swc-project/swc/issues/571](https://github.com/swc-project/swc/issues/571)\n\n13:03 - [Deno](https://deno.land/)\n* Uses tsc right now\n* Might move to Rust\n* [https://github.com/denoland/deno/issues/5432](https://github.com/denoland/deno/issues/5432)\n\n13:36 - [Surcase](https://github.com/alangpierce/sucrase)\n* [https://github.com/alangpierce/sucrase#transforms](https://github.com/alangpierce/sucrase#transforms)\n\n14:46 - [ESBuild](https://esbuild.github.io/)\n* Compiles, but doesn\'t do any type checking\n* Fastest\n\n17:39 - What about bundlers?\n* [Parcel](https://parceljs.org/)\n* [Snowpack](https://www.snowpack.dev/)\n* [Webpack](https://webpack.js.org/)\n* [ESBuild](https://esbuild.github.io/)\n* When might you still need a bundler?\n  * To handle different types of files that are non-standard\n    * Like importing CSS and images\n* Treeshaking\n* Smaller bundle files\n  * Typescript can concatenate to a single file, or all .js files, but smaller / smarter bundles still need a tool for that\n* Polyfills\n  * Typescript does convert to syntax, but will not polyfill features\n  * Something like Promise\n    * Syntax can be transpiled to old code\n    * Methods like allSettled aren\'t\n\n## Links\n* [Syntax 324: TypeScript Fundamentals](https://syntax.fm/show/324/typescript-fundamentals)\n* [Syntax 322: The Deno Show](https://syntax.fm/show/322/the-deno-show)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2ffb8e15b536d21aa6eaf41d86d750e6eb6096220554f305f943be30a137906d', 'hasty-treat-typescript-compilers-and-build-tools', '/shows/327 - ts compilers.md', '2023-10-16 20:07:30.158', '2023-10-27 15:57:57.859', 'HASTY'),
('syntax_podcast_show_00328', 328, 'Potluck — Do titles matter? × Should clients pay for plugins? × Can I debug my baby? × How we prepare for Syntax × Deno × Learning things quickly × More!', '2021-02-17 14:00:00.264', 'https://traffic.libsyn.com/syntax/Syntax328.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about job titles, clients and freelancing, debugging, the creative process behind the Syntax podcast, Deno, how to learn things quickly, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n01:17 - Do either of you have a pattern that you follow for rolling back Promise.all rejections? I am looking for an elegant way of reversing any promises that may have resolved before one was rejected. For instance, any db writes or 3rd-party webhooks that were created during the sign-up flow, but then need to be removed if one of the promises was rejected.\n\n04:51 - I\'ve been doing a bunch of client projects lately that use Gatsby with the WordPress API. I have the clients set up a hosting service for WordPress and a Netlify account connected to a GitHub repo on my account for Gatsby. What I\'m struggling with is the idea of having to keep these repos on my GitHub account for as long as these sites are live. But it doesn\'t seem all that sensible to have these non-technical clients also set up their own GitHub account that they grant me access to for building these projects. Do you have any suggestions?\n\n08:45 - Hey guys! Been listening to the podcast since I was starting out and it has been super helpful, entertaining, and hilarious. Two-part question. First, when would you consider a dev \"full-stack\"? I work for a small company that does WordPress, GraphQL, Node, React, TypeScript...lots of variety. I was hired as a front-end dev, but have since done work in PHP and Node, and even my boss has assured me I do full-stack work. However, I am not being paid as a full-stack dev. Can\'t figure out if this is because I work part-time (I have a baby) or some other reason. Should I be asking for a raise as a part-time employee?\n\n12:43 - When working freelance for a client, and you need to purchase something, for example the CPT UI plugin or something like WP Migrate DB Pro to help you build the site, do you either pay for it yourself and add it to the clients invoice at the end? Or do you ask them to pay for it when you need it? So many small \"gotchas\" I\'m needing to get over!\n\n18:02 - I just had a baby girl 4 months ago. When she is crying I sometimes catch myself trying to debug her to find out what is wrong. My wife thinks I am weird, but I guess I am just in the habit of trying to fix problems. Have you ever experienced this? \n\n22:17 - How do you prepare for the Monday and Wednesday podcast? What is it like, and what is the creative process behind it?\n\n29:03 - How would one go about using JavaScript to load all images from a folder in order to render them dynamically on a page? I looked around and only see answers using jQuery and PHP. In the end I want my client to be able to drop images into (or remove them from) the images folder and the site would just populate the image slider with all the images. Is this problem solvable with JavaScript, or is it time to learn something new?\n\n35:26 - I have a side project with a Node backend that sends out reminders to signed-up users about various deadlines that they opt-in to. It started out pretty small but as the user base is now in the thousands, I\'m worried that my reminder send functionality won\'t be able to keep up with the increasing volume. It\'s basically just a daily CRON job that loops through users and finds the different notifications to send out - either through Twilio or Postmark. Is there a more efficient way to perform large CRON jobs such as this? Curious how each of you guys would tackle this problem.	\n\n42:29 - Hey guys, great overview episode on Deno (ep 322). This got me thinking, again, of the proliferation of tools and technologies in our industry and ecosystems. Say we\'ve already \"identified\" the technology or tool and now we need to get familiar. As course designers constantly exploring new tools and technologies, what are some ways you can most efficiently and productively grasp actionable understanding (i.e. shortest route to Neo\'s \"I know kung-fu\")? And can you share any \"hacks\" or \"pro-tips\" that can help surmount that initial learning curve and tech-stack fatigue?\n\n## Links\n* [SnipCart](https://snipcart.com/)\n* [Syntax 228: More on Severless - Databases × Files × Secrets × Auth × More!](https://syntax.fm/show/228/more-on-severless-databases-files-secrets-auth-more)\n* [FileReader API](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\n* [Syntax 322: The Deno Show](https://syntax.fm/show/322/the-deno-show)\n* [Syntax 044: How To Learn Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n* [Twilio](https://www.twilio.com/)\n* [Postmark](https://postmarkapp.com/)\n* [Begin.com](https://begin.com/)\n* [RabbitMQ](https://www.rabbitmq.com/)\n* [Syntax 035: Keeping Up with the Codeashians. Dealing with our fast paced industry.](https://syntax.fm/show/035/keeping-up-with-the-codeashians-dealing-with-our-fast-paced-industry)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Hario Filter-In Cold Brew Tea Bottle](https://amzn.to/3oqyvyQ)\n* Wes: [Slonik USB Headlamp](https://www.amazon.com/s?k=slnoik+us+led+headlamp&ref=nb_sb_noss)\n\n## Shameless Plugs\n* Scott: [Testing With Cypress](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c0dc5739cad8723548a3d4d06b80b9505d8e5ae05cf89e0785a3cc63c4d4f589', 'potluck-do-titles-matter-should-clients-pay-for-plugins-can-i-debug-my-baby-how-we-prepare-for-syntax-deno-learning-things-quickly-more', '/shows/328 - potluck.md', '2023-10-16 20:07:30.209', '2023-10-27 15:57:57.910', 'TASTY'),
('syntax_podcast_show_00329', 329, 'Hasty Treat - The Future of Testing with Cypress', '2021-02-22 14:00:00.062', 'https://traffic.libsyn.com/syntax/Syntax329.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the future of testing with Cypress — what it is, how to use it, and more!\n\n## Deque - Sponsor\nDeque’s free axe browser extension helps developers instantly catch 50% of accessibility bugs while they code. It’s lightweight, easy-to-use, and has zero false positives. Get started for free at [deque.com/axe](https://deque.com/axe/?utm_source=syntax&utm_medium=podcast&utm_campaign=axe_extension).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:55 - What Is Cypress?\n* A visual testing studio that uses a jQuery-like syntax to test your application in browser.\n* Very modern testing solution.\n\n07:36 - Used to be only Chrome\n* Now available for Safari, Firefox, Edge, etc.\n\n???? - What frameworks is it for?\n* Literally anything that runs on a URL in the browser. Cypress just looks at a URL, executes the commands and then checks the results.\n* Can also run on ci/cd via a headless mode.\n* React component testing is experimental.\n\n10:58 - Automation\n* Cypress studio new feature that writes tests for you.\n\n12:37 - Data\n* Intercept + Fixtures or through plugins\n\n15:01 - Cost?\n* It\'s free! \n* There is a paid product called Cypress Dashboard that allows you to record tests long-term.\n\n## Links\n* [Cypress](https://www.cypress.io/)\n* [bos.af](https://bos.af/)\n* [Jest](https://jestjs.io/)\n* [Better Touch Tool](https://folivora.ai/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '05bf62913eeb66abe034d6cc4e4afc1fa22959a64c71d80bf8daa9d2d3d2544d', 'hasty-treat-the-future-of-testing-with-cypress', '/shows/329 - cypress.md', '2023-10-16 20:07:30.289', '2023-10-27 15:57:57.956', 'HASTY'),
('syntax_podcast_show_00330', 330, 'React Query + More React with Tanner Linsley', '2021-02-24 14:00:00.905', 'https://traffic.libsyn.com/syntax/Syntax330.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Tanner Linsley about React Query, how it works, why you might want to use it, and more!\n\n## Deque - Sponsor\nDeque’s free axe browser extension helps developers instantly catch 50% of accessibility bugs while they code. It’s lightweight, easy-to-use, and has zero false positives. Get started for free at [deque.com/axe](https://deque.com/axe/?utm_source=syntax&utm_medium=podcast&utm_campaign=axe_extension).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Guests\n* [Tanner Linsley](https://tannerlinsley.com/)\n\n## Show Notes\n01:56 - What do you do?\n* [nozzle.io](https://nozzle.io/)\n* [React Query](https://react-query.tanstack.com/)\n\n06:04 - What is React Query?\n\n24:19 - How does React Query use dev tools?\n\n31:20 - What about React Context?\n\n36:59 - Server-rendered components?\n\n42:40 - Thoughts on static sites?\n\n50:38 - What is the stack?\n\n## Links\n* [Redux](https://react-redux.js.org/)\n* [Axios](https://github.com/axios/axios)\n* [Syntax 206: State Machines, CSS and Animations with David K Piano](https://syntax.fm/show/206/state-machines-css-and-animations-with-david-k-piano)\n* [RTK Query](https://rtk-query-docs.netlify.app/)\n* [Relay](https://relay.dev/)\n* [Remix](https://remix.run/)\n* [Twin.macro](https://github.com/ben-rogerson/twin.macro)\n* [Tailwind CSS](https://tailwindcss.com/)\n* [React Static](https://github.com/react-static/react-static)\n* [Next](https://nextjs.org/)\n* [TanStack](https://tanstack.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Tanner: [React Query - Essentials Course](https://learn.tanstack.com/)\n* Scott: [Govee TV LED Backlights](https://www.amazon.com/Backlights-Govee-Compatible-Lighting-Calibrate/dp/B07JKVKZX8)\n* Wes: [1Password](https://1password.com/)\n\n## Shameless Plugs\n* Tanner: [Nozzle.io](https://nozzle.io/)\n* Scott: [Testing with Cypress](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '42c70bdada3af6ce575e4e3de3153c729b2cc3f45471eb2a8d0e6cd3a54d6241', 'react-query-more-react-with-tanner-linsley', '/shows/330 - react query.md', '2023-10-16 20:07:30.378', '2023-10-27 15:57:58.005', 'TASTY'),
('syntax_podcast_show_00331', 331, 'Hasty Treat - Hireable Skills for 2021', '2021-03-01 14:00:00.422', 'https://traffic.libsyn.com/syntax/Syntax331.mp3', '\nIn this Hasty Treat, Scott and Wes talk about hireable skills or 2021 — what you need to know to get a job and grow in your career this year!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n04:17 -  Code in general\n* Clean, commented, organized\n* Take the extra hour before an application and polish it\n\n06:10 - JS\n* Basics of the language - storing data in Arrays and Objects\n* Looping and flow control\n* Array methods\n* Promises + async await\n* DOM basics - select an element, listen for clicks, update elements\n* Node basics\n  * Most of your JS basics apply here\n  * Read Files, write files\n  * Fetch data and return it\n\n08:38 - CSS\n* Attention to detail - pixel-perfect replication of designs\n* Works well on mobile\n* No reliance on libraries - complete reliance on Bootstrap or Tailwind is a red flag. If you use these things, explain clearly why they are useful to you (e.g. augment your skills, not relied on).\n\n12:54 - Real-world libraries\n* One of the following: React, Vue, Angular\n* Node.js - sending Server data as a response\n  * JSON\n  * Express, Next.js\n* Popular helper libs\n  * Date functions / Moment (Moment is old but its still 2x more popular)\n  * Lodash\n* CSS\n  * Scoped CSS\n  * Pattern libraries\n\n17:15 - What about data structures and algorithms?\n* Yes you obviously need to know about arrays and objects - probably maps and sets too\n* Links lists? Tree structures? Traversal?\n* [https://twitter.com/wesbos/status/1353729683486076930](https://twitter.com/wesbos/status/1353729683486076930)\n\n20:26 - Soft skills\n* Know how to talk to PMs and other devs.\n* Know how to stay on top of timelines and schedules while communicating.\n* You won\'t last long in any work environment where you aren\'t able to fit in.\n* Many devs sometimes get a big head about doing tech - this is not something you want to emulate. Ignore any kind of internal \"us vs them\" attitude. It\'s about the big picture and you\'ll go further.\n* Write good, short, emails that don\'t sound like you are mad.\n\n## Links\n* [LeetCode](https://leetcode.com/)\n* [Syntax 117: Hasty Treat - How To Email Busy People](https://syntax.fm/show/117/hasty-treat-how-to-email-busy-people)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3d1c7e91143960a1ffba86e3bd8452af681b774d95cf5ae7022c642674c1ad69', 'hasty-treat-hireable-skills-for-2021', '/shows/331 - hireable skills.md', '2023-10-16 20:07:30.625', '2023-10-27 15:57:58.107', 'HASTY'),
('syntax_podcast_show_00332', 332, 'Syntax Desk Setups', '2021-03-03 14:00:00.422', 'https://traffic.libsyn.com/syntax/Syntax332.mp3', '\nIn this episode of Syntax, Scott and Wes talk about their desk setups and how they\'ve evolved, both as coders and video and course creators.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Hasura - Sponsor\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Show Notes\n03:36 - Desk\n* Scott\n  * Ikea countertop on [Jarvis Legs](https://www.amazon.com/Jarvis-Standing-Desk-Frame-Only/dp/B01N023V8B).\n    * Four presets - sit, stand, horse stance, lunge\n* Wes\n  * 8\' Ikea Butcher Block countertop on legs\n  * [LackRack](https://wiki.eth0.nl/index.php/LackRack) on wheels underneath\n  * Desk at cottage is Maple Live Edge Slab on Hairpin Legs\n\n09:01 - Chair\n* Scott\n  * [Steelcase Gesture](https://www.steelcase.com/products/office-chairs/gesture/)\n* Wes\n  * [Polished Aluminum Herman Miller Aeron](https://www.amazon.com/gp/product/B000LTAO8S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B000LTAO8S&linkCode=as2&tag=webo080-20&linkId=6G4M6ZR4CYKT3TM5)\n  * [Roller Blade Wheels!](https://amzn.to/35zIwUF)\n\n15:39 - Display\n* Scott\n  * [Vivo Stand](https://amzn.to/3czP2hB)\n  * [38\" LG Curved Ultrawide](https://amzn.to/3am5JKF)\n  * [Vissles-M, Portable Touchscreen Monitor](https://amzn.to/3pDpiop)\n  * [BenQ Monitor Light](https://www.benq.com/en-us/lamps/computer-desklamp.html)\n* Wes\n  * [LG 32\" 4k Ultra HD](https://amzn.to/2SYuX8G)\n  * [Dell Ultra HD 4k Monitor](https://www.amazon.com/gp/product/B00PC9HFO8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00PC9HFO8&linkCode=as2&tag=webo080-20&linkId=5VCVP6ZUPF5GLCUJ)\n  * [Rain Design 10032 mStand Laptop Stand](https://www.amazon.com/gp/product/B000OOYECC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B000OOYECC&linkCode=as2&tag=webo080-20&linkId=XWDACWNC2JWRF3DQ)\n\n22:49 - Headphones\n* Scott\n  * [Ultrasone](https://ultrasone.com/)\n* Wes\n  * [QC35s](https://www.amazon.com/Bose-QuietComfort-Wireless-Headphones-Cancelling/dp/B0756CYWWD) w/ Wicked Cushions - wish they charged over Wireless\n\n24:58 - Mouse + Keyboard\n* Scott\n  * [Keychron K3 with optical](https://www.keychron.com/pages/keychron-k3-wireless-mechanical-keyboard)\n  * [Apple Magic Trackpad](https://www.apple.com/shop/product/MJ2R2LL/A/magic-trackpad-2-silver)\n* Wes\n  * [Apple Magic Keyboard - extended in Space Grey](https://www.apple.com/shop/product/MRMH2LL/A/magic-keyboard-with-numeric-keypad-us-english-space-gray)\n  * [Logitech Mx2](https://www.amazon.com/Logitech-Master-Wireless-Mouse-Rechargeable/dp/B071YZJ1G1)\n\n29:18 - Laptop\n* Both\n  * [MacBook Pro](https://www.apple.com/macbook-pro-16/)\n\n33:43 - Dock + Connecting it all together\n* Scott\n  * [Caldigit TS3+](https://www.amazon.com/dp/B07CZPV8DF/)\n  * [Satechi USB-C Slim Multi-Port with Ethernet Adapter](https://www.amazon.com/Satechi-USB-C-Multi-Port-Ethernet-Adapter/dp/B083XPXN9D)\n  * Under desk rack\n* Wes\n  * Everything is in a [Lackrack](https://wiki.eth0.nl/index.php/LackRack)\n  * [Caldigit TS3+](https://www.amazon.com/dp/B07CZPV8DF/)\n  * Single Cable Hookup\n  * Two monitors\n  * 6+ webcams\n  * [Elgato CamLink](https://www.amazon.com/Elgato-Cam-Link-Broadcast-Camcorder/dp/B07K3FN5MR)\n  * 2 HDDs\n  * Microphone\n  * [Amazon Powered USB Hub](https://www.amazon.com/s?k=amazon+basics+powered+usb+hub)\n  * [Startech Rack Mounted Power Strip](https://www.amazon.com/StarTech-com-Horizontal-Rack-Mount-PDU/dp/B0035PS5AE/)\n\n41:36 - Camera + Capture\n* Scott\n  * [Sony a7 iii](https://www.amazon.com/Sony-Full-Frame-Mirrorless-Interchangeable-Lens-ILCE7M3/dp/B07B43WPVK)\n  * [Elgato CamLink](https://www.amazon.com/Elgato-Cam-Link-Broadcast-Camcorder/dp/B07K3FN5MR)\n* Wes\n  * [Sony RX100 iii](https://www.amazon.com/Sony-Premium-Compact-F1-8-2-8-DSCRX100M3/dp/B00K7O2DJU/ref=sr_1_1?dchild=1&keywords=Sony+RX+iii&qid=1614484946&s=electronics&sr=1-1)\n\n44:11 - Microphone + Capture\n* Scott\n  * [Audient Nero Monitor Controller](https://audient.com/products/monitor-controllers/nero/overview/)\n  * [M-Audio BX8](https://m-audio.com/products/view/bx8-d2)\n  * [EV RE20](https://www.amazon.com/Electro-Voice-RE20-Broadcast-Microphone-Variable-D/dp/B00KCN83V8)\n  * [Focusrite Scarlett 2i2](https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B07QR73T66/)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A/)\n  * [Cloudlifter CL-1](https://www.amazon.com/Cloud-Microphones-CL-1-Cloudlifter-1-channel/dp/B004MQSV04/)\n  * [BSW RE320POP](https://www.bswusa.com/Pop-Filters-BSW-RE320POP-P7872.aspx)\n* Wes\n  * [Heil PR40]() + shock mount, boom arm, pop filter\n  * [Focusrite Scarlett 2i2](https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B07QR73T66/ref=sr_1_2?dchild=1&keywords=Scarlett+Focusrite+2i2&qid=1614485127&s=musical-instruments&sr=1-2)\n  * [ART EQ 351](https://www.amazon.com/ART-351-31-Band-Graphic-Equalizer/dp/B0002E50U4)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A/)\n  * [BSW RE320POP](https://www.bswusa.com/Pop-Filters-BSW-RE320POP-P7872.aspx)\n\n49:06 - Lighting\n* Scott\n  * [Neewer Bi-Color 480 LED](https://www.amazon.com/Neewer-Packs-Dimmable-Bi-Color-Lighting/dp/B072Q3DYXR/)\n  * Traditional three-point lighting (key, fill, backlight)\n  * [Philips Hue](https://www.philips-hue.com/en-us) above for color pop\n\n* Wes\n  * [Neewer Bi-Color 480 LED](https://www.amazon.com/Neewer-Packs-Dimmable-Bi-Color-Lighting/dp/B072Q3DYXR/) on a [Wyze Plug](https://www.amazon.com/Wyze-Labs-WLPP1-Smart-Two-Pack/dp/B07XZT24B8)\n  * Two Backfill LED Color lights\n  * [BenQ Screenbar](https://www.benq.com/en-us/lamps/computer-desklamp.html)\n\n55:22 - Storage / Backup / Home Server\n* [Syntax 220: The Synology Show - Backups and Home Server](https://syntax.fm/show/220/the-synology-show-backups-and-home-server)\n* Scott\n  * [Synology DS918+ 8TB](https://www.amazon.com/Synology-DiskStation-Business-Celeron-Operating/dp/B07ZKZLVWH/)\n* Wes\n  * [Synology DS918+ 16TB](https://www.amazon.com/Synology-DiskStation-DS1819-Storage-Operating/dp/B08512DQ7H/) (DS920+ is the latest)\n  * 16TB of drives - I don\'t use anywhere NEAR that\n  * [LaCiE Rugged](https://www.amazon.com/s?k=LaCiE+Rugged&i=electronics&ref=nb_sb_noss) or [WD Passport](https://www.amazon.com/s?k=wd+passport&i=electronics&ref=nb_sb_noss_2) for Time Machine\n\n57:50 - Other / Wish list\n* Scott\n  * [ReMarkable 2 tablet](https://remarkable.com/store/remarkable-2)\n  * [Apple Pro Display XDR](https://www.apple.com/pro-display-xdr/)\n* Wes\n  * [Mindnode](https://mindnode.com/)\n  * [Elgato Stream Deck](https://www.amazon.com/Elgato-Stream-Deck-Controller-customizable/dp/B06XKNZT1P)\n  * [LG 5K2K Curved Display](https://youtu.be/WKTCH1FIsJM)\n\n## Links\n* [GraphQL Code Generator](https://graphql-code-generator.com/)\n* [KeystoneJS](https://www.keystonejs.com/)\n* [BSW](https://www.bswusa.com/)\n* [Ikea Lack Side Table](https://www.ikea.com/us/en/p/lack-side-table-black-20011408/)\n* [Better Touch Tool](https://folivora.ai/)\n\n## Shameless Plugs\n* Scott: [Testing with Cypress](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React](https://advancedreact.com) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'caf5995d630badff987445ae7a9becf6616d49a65f90469ff4ee668cf902b653', 'syntax-desk-setups', '/shows/332 - desk setups.md', '2023-10-16 20:07:30.664', '2023-10-27 15:57:58.171', 'TASTY'),
('syntax_podcast_show_00333', 333, 'Hasty Treat - Ask Us Anything!', '2021-03-08 14:00:00.016', 'https://traffic.libsyn.com/syntax/Syntax333.mp3', '\nIn this Hasty Treat, Scott and Wes are doing an AMA — answering questions about self-employment, time-management, course creation, Clubhouse, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:41 - What do you miss about NOT being self-employed? What are some UNEXPECTED perks of being self-employed?\n\n05:47 - Hypothetically, what would a LinkedIn recruiter need to say to pull you away from your current development work, and possibly even the podcast?\n\n09:08 - What percentage of your time do you guys spend doing work for clients vs your own courses/projects?\n\n10:04 - Do you still do most of your work yourself, or do you outsource some parts of it? (work can be anything related to your business, not just making the courses)\n\n12:48 - Could you all talk about protected/private routes in [Next.js](https://nextjs.org/)? I’m coming from [create react app](https://reactjs.org/docs/create-a-new-react-app.html) type routing.\n\n16:07 - What would be doing for a living if not a developer?\n\n17:50 - What do you think about [Clubhouse](https://www.joinclubhouse.com/)? Are you guys planning to talk over there some time?\n\n24:18 - [Vue](https://vuejs.org/) or [React](https://reactjs.org/)? Which do you think will be the top? And should developers learn both?\n\n## Links\n* [https://twitter.com/aaronendsley/status/1361375032342110210](https://twitter.com/aaronendsley/status/1361375032342110210)\n* [Svelte](https://svelte.dev/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ae8bd7576cb1c073842465817b5128ee44af2c4dac4832059ab4d13194c71fb2', 'hasty-treat-ask-us-anything', '/shows/333 - ask us anything.md', '2023-10-16 20:07:30.706', '2023-10-27 15:57:58.236', 'HASTY'),
('syntax_podcast_show_00334', 334, 'Potluck — VSCode × Vercel vs Netlify × Models × Mutations × Multi-Vendor Platforms × Websites vs Web Apps × More!', '2021-03-10 14:00:00.016', 'https://traffic.libsyn.com/syntax/Syntax334.mp3', '\nIt\'s another potluck! In this episode, Scott and Wes answer your questions about VSCode, Vercel vs Netlify, staying up to date with dev concepts, models and mutations, websites vs seb apps, adaptive vs responsive design, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Vonage - Sponsor\nVonage is a Cloud Communications platform that allows developers to integrate voice, video and messaging into their applications using their communication APIs. Whether you’re wanting to build video calls into your app, create a Facebook bot, or build applications on top of programmable phone numbers, you’ll have all the tools you need. Use promo code SYNTAX10 for €10 of free credit when signing up at [vonage.dev/syntax](https://vonage.dev/syntax).\n\n## Show Notes\n02:10 - Sometimes in [VSCode](https://code.visualstudio.com/) when intellisense tells us the [TypeScript](https://www.typescriptlang.org/) type of a variable, it just gives the name of the type rather than how the type is defined. This is annoying for objects as I want to know what fields it contains! How do you handle this? Is there some VSCode magic to make it show the full type definition or is there some way to bring up the definition in the .d.ts file?\n\n04:55 - What techniques do you guys use to keep different tech stack requirements fresh between projects?\n\n10:35 - How do you feel about [Vercel](https://vercel.com/) vs. [Netlify](https://www.netlify.com/)? Pros/cons? Thanks!\n\n18:32 - Should a model name be singular or plural?\n\n22:57 - I\'ve just listened to the [CSS Typography and Systems Hasty Treat](https://syntax.fm/show/319/hasty-treat-css-typography-and-systems), and realized that we often try to apply website design to web apps (me at least). Can you elaborate on the differences in designing for a website and for a web app?\n\n25:46 - What\'s the difference between adaptive and responsive design?\n\n32:40 - Multi-vendor platforms? Have you done it before? A partner and I, are planning to build a peer-2-peer platform (similar to Etsy and Amazon, where users can register as a merchant or a buyer). What is the easiest way to make payment transactions (Stripe or PayPal)? Do you know any frameworks that will make my life easier?\n\n36:16 - Is there a golden rule for mutations? I\'ve been using GraphQL for last couple of months, and everything is great as long as I\'m just fetching data. When I need to write mutations, the story gets murky. Looking around internet, there are not too many best practices to be found - most of the articles and blogs focus on data fetching.\n\n42:19 - What do you think about the future of [Svelte](https://svelte.dev/)? I know they are replacing [Sapper](https://sapper.svelte.dev/) with [SvelteKit](https://github.com/sveltekit), which uses [Snowpack](https://www.snowpack.dev/). What direction do you think Svelte will go in?\n\n45:32 - How can I get back into a habit of learning new things and stop heavily relying on video tutorials all the time? I really struggle to sit down and read for long periods of time. Also have you guys came across the Genesis framework, and if so, could you recommend any learning material? Thanks.\n\n48:54 - My team uses [handlebars](https://handlebarsjs.com/) templates for generating newsletters. The content is coming from a CMS for generating final HTML. I\'m fairly new to handlebars and [mustache](https://mustache.github.io/) syntax, so instead of learning handlebars I\'m thinking about using [React](https://reactjs.org/) to generate the html on server side. I see some great potential here as the entire team is well-versed with React. What is your opinion about this?\n\n## Links\n* [VSCode Peek Definition](https://code.visualstudio.com/docs/editor/editingevolved#_peek)\n* [Obsidian](https://obsidian.md/)\n* [Render](https://render.com/)\n* [Adam Wathan](https://adamwathan.me/)\n* [Gumroad](https://gumroad.com/)\n* [Braintree](https://www.braintreepayments.com/)\n* [MJML](https://mjml.io/)\n* [https://github.com/unlayer/react-email-editor](https://github.com/unlayer/react-email-editor)\n* [Redwings shoes](https://www.redwingshoes.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Tosowoong Enyme Powder Wash](https://amzn.to/3tDFcRZ)\n* Wes: [Carhartt Gloves](https://amzn.to/2N5n16T)\n\n## Shameless Plugs\n* Scott: [Testing with Cypress](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React Course](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '185e0da39e7af050d29c18fa15f6ae613fa67fcb62608a5589f94136e63b3b7f', 'potluck-vscode-vercel-vs-netlify-models-mutations-multi-vendor-platforms-websites-vs-web-apps-more', '/shows/334 - potluck.md', '2023-10-16 20:07:30.750', '2023-10-27 15:57:58.293', 'TASTY'),
('syntax_podcast_show_00335', 335, 'Hasty Treat - Environmental Variables', '2021-03-15 13:00:00.954', 'https://traffic.libsyn.com/syntax/Syntax335.mp3', '\nIn this Hasty Treat, Scott and Wes talk about environment variables — what they are, where you should keep them, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:54 - What are they?\n* API Keys\n* Secrets\n* Database URLs\n* NODE_ENV\n\n06:16 - Type of env variables\n* Plain text\n* Encrypted\n* Frontend\n* Backend\n* .env files\n  * `.env` is a good package for all langs\n  * `.env.local`\n* Framework env variables\n* System env variables\n* Host-provided variables\n\n16:20 - Where should you keep them?\n* [1Password](https://1password.com/)\n* [1Password CLI](https://1password.com/downloads/command-line/)\n\n17:34 - Other gotchas\n* Netlify Limit is 4096\n* Netlify needs a clear cache before it works\n* `THING=yo node index.js`\n* [cross-env](https://github.com/kentcdodds/cross-env)\n* NODE_OPTIONS=\"--inspect\"\n* Require before run\n\n## Links\n* [Digital Ocean App Platform](https://www.digitalocean.com/docs/app-platform/)\n* [Render](https://render.com/)\n* [Vercel](https://vercel.com/)\n* [Netlify](https://www.netlify.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '592162a8636b293244e9eb18a534e3243a1eebc0f17720c1d40e1087cab8e8dc', 'hasty-treat-environmental-variables', '/shows/335 - env variables.md', '2023-10-16 20:07:30.792', '2023-10-27 15:57:58.343', 'HASTY'),
('syntax_podcast_show_00336', 336, 'How To Build Your Own Auth', '2021-03-17 13:00:00.954', 'https://traffic.libsyn.com/syntax/Syntax336.mp3', '\nIn this episode of Syntax, Scott and Wes talk about building your own authentication — diving deep into JWT, sessions, tokens, cookies, local storage, CSRF, and how it all works!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Hasura - Sponsor\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Show Notes\n01:51 - Overview\n* [Level Up](https://www.leveluptutorials.com/) uses a [JWT](https://jwt.io/) & secure cookie-based authentication and tracks sessions via a db table.\n* [Accounts.js](https://www.accountsjs.com/)\n\n05:13 - [JWT](https://jwt.io/)\n* Base 64 encoded (not encrypted) token that contains data. We have both `accessToken`s and `refreshToken`s.\n* JWT has three parts:\n  * Header\n    * What kind of algo was used\n  * Payload\n    * Data about the user\n    * Email\n    * Username\n    * UserID\n    * refreshToken, authToken, sessionId\n  * Signature\n    * This ensures that no one monkeyed with the above parts. If you change your email in the payload, the signature is not invalid, because in order to generate the signature, it uses the header and payload as part of it.\n* accessToken\n  * A short lived JWT that containsthe `sessionToken`, `userId` and expires after 90min.\n* refreshToken\n  * A long lived JWT that contains just the `sessionToken` and doesn\'t expire.\n* JWT can be decoded and read, but you have to encode them with your secret. \n* JWT can be stored anywhere, there are two main places:\n\n20:26 - Cookies\n* We use httpOnly, secure cookies to store the accessToken and the refreshToken. The accessToken is a session cookie and is removed whenever the browser is closed. The refreshToken is valid for 100 days but is also re-created and revalidated for 100 more days each time the accessToken is generated.\n* Because these are httpOnly cookies, they cannot be accessed by JavaScript in the client and can only be set and removed on the server.\n* Note: Safari has stricter rules than others for same domain cookies (e.g. `localhost` won\'t work).\n\n34:26 - Sessions\n* Sessions are when a user logs in on a device. If you open a phone and log in and a computer and log in, those will create two different sessions. A session contains information about the user\'s connection (like their IP) but it also contains the userId which allows us to create new accessTokens from a valid session.\n* Sessions can be valid or invalid. This allows us to log anyone out by setting their session to valid: false.\n* Sessions also have `sessionToken` which are generated on authentication or create account.\n\n38:10 - [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n* Cross-origin-resource-sharing\n* Can be super tricky to get working cross-domain\n* You usually have to actually visit the website for the cookie to be set, even with lax cors\n\n46:06 - [CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF)\n\n48:47 - Authentication process\n* [bcrypt.js](https://www.npmjs.com/package/bcryptjs)\n\n52:13 - Helper Packages\n* [NextAuth.js](https://next-auth.js.org/) is super easy\n* [Passport.js](http://www.passportjs.org/)\n* [auth0](https://auth0.com/)\n\n## Links\n* [Caddy](https://caddyserver.com/)\n* [Fastify](https://www.fastify.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [reMarkable 2](https://remarkable.com/store/remarkable-2)\n* Wes: [Opration Odessa](https://www.netflix.com/title/80202236)\n\n## Shameless Plugs\n* Scott: [Node Fundamentals Authentication](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '03f2f99422430c9c248052b309b6fa9a6223b6b577ec04ed90cdaf0ec9b22d89', 'how-to-build-your-own-auth', '/shows/336 - auth.md', '2023-10-16 20:07:30.840', '2023-10-27 15:57:58.408', 'TASTY'),
('syntax_podcast_show_00337', 337, 'Hasty Treat - Effortless Custom GraphQL with GraphQL Codegen', '2021-03-22 13:00:00.377', 'https://traffic.libsyn.com/syntax/Syntax337.mp3', '\nIn this Hasty Treat, Scott and Wes talk about GraphQL tooling, and specifically a couple tools we use that will change your experience with GraphQL.\n\n## .TECH Domains - Sponsor\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:38 - What is it?\n* [https://graphql-code-generator.com/](https://graphql-code-generator.com/)\n* Code generation for GraphQL APIs\n\n04:34 - What can it do?\n* Generate React hooks for any of the major player Apollo client ([urql](https://github.com/FormidableLabs/urql))\n* Types for the full stack — resolvers, mutations\n\n07:49 - How we use it\n* Generate a schema file to keep client and server in sync in mono repo\n* Creates all React Hooks\n* Generates all types for both resolvers, and anything client-side\n\n## Links\n* [React Query](https://react-query.tanstack.com/)\n* [Apollo](https://www.apollographql.com/)\n* [Typescript](https://www.typescriptlang.org/)\n* [Cypress](https://www.cypress.io/)\n* [https://periqles.herokuapp.com/](https://periqles.herokuapp.com/)\n* [https://the-guild.dev/](https://the-guild.dev/)\n* [Swagger](https://swagger.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd9f6bad9cc6a85509705371a29d3e534f7ac9dc7c2c5626dbf41e300dc8f1ab7', 'hasty-treat-effortless-custom-graphql-with-graphql-codegen', '/shows/337 - graphql codegen.md', '2023-10-16 20:07:30.877', '2023-10-27 15:57:58.458', 'HASTY'),
('syntax_podcast_show_00338', 338, 'Syntax Highlight (We Review Your Portfolio)', '2021-03-24 13:00:00.377', 'https://traffic.libsyn.com/syntax/Syntax338.mp3', '\nIt\'s another Syntax Highlight. In this episode, Scott and Wes take a look at portfolios and websites and evaluate them from the perspective of a hiring manager.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n04:50 - [https://shaquilhansford.com/](https://shaquilhansford.com/)\n* Not optimized for desktop\n* Lots of spacing issues overall\n* Too many accordions - could be lists in multiple columns\n* Social links could be in the footer\n* Twitter is on point - [iwantyoutohire.me](http://iwantyoutohire.me)\n* Phone number on website is good\n\n11:31 - [https://www.benlammers.dev/](https://www.benlammers.dev/)\n* Gimmy dat yellow\n* The design and polish is really good\n* Data URI images can overload CPU\n* Semantic headings, but HTML should use some work\n  * Four H1s on the page\n  * 20 H2s\n  * 40 H3s\n  * Main tag\n\n20:28 - [https://www.zubairaziz.com/](https://www.zubairaziz.com/)\n* Lots of empty space\n* Photo is key\n* Not sure what to do when I land on the page\n* Blog is nice, but two posts from May - add more or drop it\n* Portfolio is just enough\n* Nav animation should only happen on initial load\n\n29:39 - [https://codebyfil.dev/](https://codebyfil.dev/)\n* This is a great example of something that is good, but needs a bit of polish\n* Tone down the border radius\n* Tone down the box shadow\n  * Border and drop shadow\n* Images aren\'t links\n* Footer padding or space - contact is ridding the bottom\n* Scott\'s HTML breakdown\n  * Four H1s\n  * Six H2s\n  * Four H3s\n  * 18 H4s\n  * Five H5s\n\n37:39 - [https://www.johngeorgesample.com/](https://www.johngeorgesample.com/)\n* Clean but maybe too clean\n* Nav is too distractingly too big\n* Need active link indicator in main nav\n* div div div div - take a look at those semantic HTML tags\n  * No H1 or H2\n  * HTML needs work brother\n* Use &times; instead of X\n* Asterisk doesn\'t work on mobile\n\n46:52 - [https://stordahl.dev/](https://stordahl.dev/)\n* Great images\n* Nice typography\n* Sign-up for newsletter is great\n* Store = A+\n* Scott\'s HTML breakdown\n  * Two H1s, one of which is just nice to meet you\n  * Zero H2s\n  * Articles should be articles\n  * No section\n* 1px move on hover is nice - could use a transition\n\n## Links\n* [Axe Accessibility Testing](https://www.deque.com/axe/)\n* [Gatsby](https://www.gatsbyjs.com/)\n* [Next.js](https://nextjs.org/)\n* [https://feathericons.com/](https://feathericons.com/)\n* [Snipcart](https://snipcart.com/)\n* [GeoGuessr](https://www.geoguessr.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Walkabout Mini Golf](https://www.mightycoconut.com/minigolf)\n* Wes: [60w Portable Charger](https://amzn.to/2ZHrQGs)\n\n## Shameless Plugs\n* Scott: [Node Fundamentals Authentication](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'be32d524343aa0063134c7808f1b374cc8cf2f92efd13765223a5e38fecf19ff', 'syntax-highlight-we-review-your-portfolio', '/shows/338 - syntax highlight.md', '2023-10-16 20:07:30.924', '2023-10-27 15:57:58.514', 'TASTY'),
('syntax_podcast_show_00339', 339, 'Hasty Treat - What is the n+1 problem?', '2021-03-29 13:00:00.832', 'https://traffic.libsyn.com/syntax/Syntax339.mp3', '\nIn this Hasty Treat, Scott and Wes talk about a common problem you\'ll encounter in your development career — the n+1 problem.\n\n## Hasura - Sponsor\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io/) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n05:00 - What is the n+1 problem?\n* The N+1 problem can happen in any language but is especially prevalent in [GraphQL](https://graphql.org/) because it\'s so easy to query relationships.\n\n09:33 - The solution\n* The solution to the n+1 problem is to batch the queries. As you loop over each podcast, keep an array of host IDs to lookup. Once you have looped over the podcasts, make a single query to the database with your large array of podcast host Ids.\n\n11:11 - Should you care?\n* Sometimes no: its often fine to do multiple DB Calls\n* [Facebook DataLoader](https://github.com/topics/facebook-dataloader)\n* [Mercurious](https://github.com/mercurius-js/mercurius)\n* Many ORMs take care of this for you\n  * These then break it down into my appropriate SQL\n  * [MongoDB](https://www.mongodb.com/) Ruby: eager loading\n  * [Laravel ORM](https://laravel.com/docs/5.0/eloquent) does it\n  * Aggregation pipelines\n* Prisma N+1: [https://www.youtube.com/watch?v=7oMfBGEdwsc&vl=en](https://www.youtube.com/watch?v=7oMfBGEdwsc&vl=en)\n* [Mongoose Populate](https://mongoosejs.com/docs/populate.html)\n* [Apollo Studio](https://studio.apollographql.com/login)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3e2e20f4012e3b0f358d99221d823f428bc6c53ee56979cde5c34d36cbf584bb', 'hasty-treat-what-is-the-n-1-problem', '/shows/339 - n1.md', '2023-10-16 20:07:30.964', '2023-10-27 15:57:58.563', 'HASTY'),
('syntax_podcast_show_00340', 340, 'Servers with Matt from Caddy', '2021-03-31 13:00:00.832', 'https://traffic.libsyn.com/syntax/Syntax340.mp3', '\nIn this episode of Syntax, Scott and Wes talk Matt Holt about Caddy, SSL, web servers, best practices, and more!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Guests\n* [Matt Holt](https://twitter.com/mholt6)\n\n## Show Notes\n02:08 - Who are you and what do you do?\n\n03:22 - Why would you want to build a web server?\n\n08:45 - How do SSL certs work?\n\n14:03 - Why do you even need a web server?\n\n23:03 - Is it better to have a web server serve your images?\n\n20:31 - What is load balancing and why might you need it?\n\n31:35 - Is server administration a lost art?\n\n38:03 - What is a sidecar proxy?\n\n38:50 - How do chron jobs work?\n\n39:50 - Why is GO so fast? Why is it good?\n\n46:32 - Should every website have an SSL certificate?\n\n## Links\n* [Floss Weekly 364](https://twit.tv/shows/floss-weekly/episodes/364)\n* [Caddy](https://caddyserver.com/)\n* [Let\'s Encrypt](https://letsencrypt.org/)\n* [Certbot](https://certbot.eff.org/)\n* [PM2](https://pm2.keymetrics.io/)\n* [https://doesmysiteneedhttps.com](https://doesmysiteneedhttps.com/)\n* [Tello Drone](https://amzn.to/2PeZXUe)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Matt: [LG Stick Vacuum](https://www.amazon.com/s?k=LG+Stick+Vaccum&ref=nb_sb_noss)\n* Scott: [Alen Pure BreatheSmart Air Purifier](https://amzn.to/3uE8nFb)\n* Wes: [Tello EDU](https://www.ryzerobotics.com/tello-edu) \n\n## Shameless Plugs\n* Matt: [Matt Holt Sponsorships](https://github.com/sponsors/mholt)\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cd17b16b9dd5e517d03eaaff9ac3c05c954b855b4e9008bb414e19e29851ba8f', 'servers-with-matt-from-caddy', '/shows/340 - servers.md', '2023-10-16 20:07:31.005', '2023-10-27 15:57:58.622', 'TASTY'),
('syntax_podcast_show_00341', 341, 'Hasty Treat - VSCode Extensions and Tips', '2021-04-05 13:00:00.929', 'https://traffic.libsyn.com/syntax/Syntax341.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their favorite VSCode extensions, tips, and workflows!\n\n## .TECH - Sponsor\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n04:05 - Easy Snippet\n* [https://marketplace.visualstudio.com/items?itemName=inu1255.easy-snippet](https://marketplace.visualstudio.com/items?itemName=inu1255.easy-snippet)\n\n05:33 - Add Missing Function Declaration\n* [https://twitter.com/wesbos/status/1369393437062074377](https://twitter.com/wesbos/status/1369393437062074377)\n\n07:30 - Error Lens\n* [https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens](https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens)\n\n09:08 - Declare Missing Members\n* [https://marketplace.visualstudio.com/items?itemName=tamj0rd2.ts-quickfixes-extension](https://marketplace.visualstudio.com/items?itemName=tamj0rd2.ts-quickfixes-extension)\n\n10:29 - ES7 React/Redux/GraphQL/React-Native Snippets\n* [https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)\n\n11:59 - File Utils:\n* [https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils](https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils)\n\n13:59 - GitLens — Git supercharged\n* [https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n\n15:15 - ES6-String-HTML\n* [https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html](https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html)\n\n16:41 - Wrap Console Log Simple\n* [https://marketplace.visualstudio.com/items?itemName=WooodHead.vscode-wrap-console-log-simple](https://marketplace.visualstudio.com/items?itemName=WooodHead.vscode-wrap-console-log-simple)\n\n17:18 - Text Pastry\n* [https://marketplace.visualstudio.com/items?itemName=jkjustjoshing.vscode-text-pastry](https://marketplace.visualstudio.com/items?itemName=jkjustjoshing.vscode-text-pastry)\n\n19:14 - Better Comments\n* [https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n\n20:14 - Tip: Use Emmet everywhere\n* [https://emmet.io/](https://emmet.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '49f203b8c756a676d2dbf6166838fe93fc16ff24d3bbe0bc66f7ceb116834d13', 'hasty-treat-vscode-extensions-and-tips', '/shows/341 - vscode.md', '2023-10-16 20:07:31.100', '2023-10-27 15:57:58.723', 'HASTY'),
('syntax_podcast_show_00342', 342, 'Potluck — Video Hosting × Fake Names? × Portfolio Projects × Monorepos × APIs × TLDs × Recording Tips × More!', '2021-04-07 13:00:00.929', 'https://traffic.libsyn.com/syntax/Syntax342.mp3', '\nIn this episode of Syntax, Scott and Wes talk about how to keep your skill up to date when you have a job and a family, when you should start looking for your first job, monorepos, video hosting, TLDs, APIs, fake names, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Vonage - Sponsor\nVonage is a Cloud Communications platform that allows developers to integrate voice, video and messaging into their applications using their communication APIs. Whether you’re wanting to build video calls into your app, create a Facebook bot, or build applications on top of programmable phone numbers, you’ll have all the tools you need. Use promo code SYNTAX10 for €10 of free credit when signing up at [vonage.dev/syntax](https://vonage.dev/syntax).\n\n## Show Notes\n02:10 - How do you handle token refresh when multiple API calls are made at the same time? Let\'s says you get a 401 and do acquire a new token, but that will only be used by the first API call, while the other parallel APIs would still use the old one and error out. This has caused me to sort of artificially limit the total requests to be made to 1. How do you deal with it?\n\n06:40 - What service do you guys use for video storage and optimization? I am currently building out a side project that will require some video hosting so I figured I would ask the experts.\n\n15:22 - I’m trying to teach myself web development and I’m having problems making up the logic for my personal projects. I would have to watch YouTube tutorials or look at other people’s code in order to implement simple features to my website and I’ve been feeling pretty stupid for not spending the time to think of it. I feel like I’m missing out on knowing how to problem solve for myself whenever I copy other people’s code and try to understand them afterwards.\n\n19:27 - I just landed my first web development job after following The Odin Project and building personal projects for about a year. It tripled my income so I am incredibly excited! I have been using a PHP framework which was developed by one of my coworkers and has no documentation. In order to understand the code, I either have to read a bunch of source code or ask one of the other developers questions. While I am doing well, I can\'t help but feel as if I am working way too slow and asking way too many questions. I assume this is imposter syndrome and lots of people deal with it, but how would you suggest dealing with this type of anxiety?\n\n25:11 - Monorepos, yes or no?\n\n29:43 - As a brand new self-taught web developer, how would you know if you\'re ready to apply for junior positions?\n\n32:03 - Will there ever be a .eat domain or are the pre-order sites just ripping you off? Would like to know who decides what TLDs are possible or not.\n\n35:26 - I\'m currently employed as a fullstack developer but want to build a portfolio for future job hunting. Would you say it\'s ok to reference a project or two from an employer? My problem is that the only projects I have outside are mostly just smaller tools built for myself for fun.\n\n39:29 - Should developers always use their real first and last name when presenting themselves as a professional online (e.g. Twitter, LinkedIn, Github, personal site). Or is it acceptable to use a fake last name for example? My wife is quite conscious about privacy online, so would prefer I retain some anonymity. But also, my last name is a bit generic, and not very Googleable. I thought having a more snappy and interesting name would help me stand out, and be easier to find with a quick Google. You guys both have awesome names that are very unique and are hard to forget.\n\n43:59 - How do you find time to work and keep up with updates and libraries etc. having a wife & kids?\n\n46:06 - I am a beginner in making course content. I am trying to create a programming tutorial, but every time I try to record some tutorials I have to compromise on audio quality. Lots of background noises get captured on audio. Can you both share some tips to make soundproofing room? What tricks do you both use?\n\n53:33 - As someone who recently learned/is learning how to build websites using express/node/react, with a little know how with Python and Django too, how do you start building a portfolio that isn\'t just a bunch of practice/show-pieces? How do I get a client?\n\n59:53 - Should I be using multiple web apps on a single site or try to make them all one? If I have a site that displays blog posts about parks for example, then a page with all the parks listed out that link to a page about each single park\'s details, should I be making the entire thing in one app? Or make a blog app and publish it, then make a different app for the other content and publish it using a subdomain?\n\n## Links\n* [Syntax 266: Video for the Web 2020 and Beyond](https://syntax.fm/show/266/video-for-the-web-2020-and-beyond)\n* [Cloudinary](https://cloudinary.com/)\n* [Mux](https://mux.com/)\n* [Vimeo](https://vimeo.com/)\n* [LesMills](https://www.lesmills.com/us/)\n* [Bitmovin](https://bitmovin.com/)\n* [Brightcove](https://www.brightcove.com/en/)\n* [Wista](https://wistia.com/) \n* [Cloudflare](https://www.cloudflare.com/)\n* [AWS MediaLive](https://aws.amazon.com/medialive/)\n* [Keystone.js](https://www.keystonejs.com/)\n* [Gatsby](https://www.gatsbyjs.com/)\n* [Syntax 331: Hasty Treat - Hireable Skills for 2021](https://syntax.fm/show/331/hasty-treat-hireable-skills-for-2021)\n* [ICANN](https://www.icann.org/)\n* [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A/)\n* [Electro-Voice RE20](https://www.amazon.com/Electro-Voice-RE20-Broadcast-Microphone-Variable-D/dp/B00KCN83V8/)\n* [reMarkable](https://remarkable.com/store/remarkable-2)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [CamLink 4k](https://amzn.to/3qq5AvF)\n* Wes: [TS80p Mini Soldering Iron](https://amzn.to/38jAGiq)\n\n## Shameless Plugs\n* Scott: [Node Fundamentals Authentication](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Fullstack Advanced React & GraphQL](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5363d0c075c767591d203db324effee7a8a52be58ed1cb2bee116b06005791b2', 'potluck-video-hosting-fake-names-portfolio-projects-monorepos-apis-tlds-recording-tips-more', '/shows/342 - potluck.md', '2023-10-16 20:07:31.133', '2023-10-27 15:57:58.789', 'TASTY'),
('syntax_podcast_show_00343', 343, 'Hasty Treat - CSS Nesting 1', '2021-04-12 13:00:00.771', 'https://traffic.libsyn.com/syntax/Syntax343.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS nesting — what it is, when to use it, and why. \n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n04:22 - What is it?\n* [https://drafts.csswg.org/css-nesting-1/#nest-prefixed](https://drafts.csswg.org/css-nesting-1/#nest-prefixed)\n* [https://twitter.com/argyleink/status/1371874777548267520](https://twitter.com/argyleink/status/1371874777548267520)\n\n06:02 - Why nest?\n* Easier to read\n* Easier to write\n* Prevents refactoring errors, allows for dry-er code. No more typing a parent div 100 times, with a possibility of screwing it up.\n\n08:13 - When to use nesting\n* Nesting is often overused\n* Only nest what you would have written un-nested with a short hand (e.g. don\'t nest just for the sake of it)\n  * .container .item {} .container .item a {}\n* Use it for scoping\n\n10:06 - Nesting prefixes\n* In order to nest CSS, you must first start it with a nesting selector\n\n```css\n.tweet {\n  & > p {   }\n  &.media-included { color: green; }\n  & + .tweet { } // sibling\n  & p { } // descentang\n}\n```\n\n* Component-based — tweet, card, company, Link \n\n```css\narticle{\n	color: blue;\n  & {\n		color: red;\n  }\n}\n```\n\nand must be the first child of a compound selector \n\n12:44 - @nest rule / media queries\n* Mostly just a visual way to show nested\n\n```css\n.foo {\n	display: grid;\n	@media(orientation: landscape) {\n    & {\n			grid-auto-flow: column;\n		}\n	}\n}\n```\n\n```css\n.foo {\n  display: grid;\n\n  @media (orientation: landscape) {\n    & {\n      grid-auto-flow: column;\n    }\n\n    @media (min-inline-size > 1024px) {\n      & {\n        max-inline-size: 1024px;\n      }\n    }\n  }\n}\n/* equivalent to\n   .foo { display: grid; }\n\n   @media (orientation: landscape) {\n     .foo {\n       grid-auto-flow: column;\n     }\n   }\n\n   @media (orientation: landscape) and (min-inline-size > 1024px) {\n     .foo {\n       max-inline-size: 1024px;\n     }\n   }\n */\n```\n\n16:30 - How to use nesting today\n* Literally any CSS preprocessor\n* PostCSS to use spec\n\n## Links\n* [Syntax 274: How does stuff get added to CSS? Adam Argyle answers!](https://syntax.fm/show/274/how-does-stuff-get-added-to-css-adam-argyle-answers)\n* [Sass](https://sass-lang.com/)\n* [PostCSS](https://postcss.org/)\n* [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '5ffa438665d6732bd42f110883d7f5229394147593956556dbaa55b409328941', 'hasty-treat-css-nesting-1', '/shows/343 - css nesting.md', '2023-10-16 20:07:31.174', '2023-10-27 15:57:58.843', 'HASTY'),
('syntax_podcast_show_00344', 344, 'Dev Tools Tabs Explained — Plus Tips & Tricks', '2021-04-14 13:00:00.771', 'https://traffic.libsyn.com/syntax/Syntax344.mp3', '\nIn this episode of Syntax, Scott and Wes talk about dev tools tabs, what each tab does and how you can use them. \n\n## Vonage - Sponsor\nVonage is a Cloud Communications platform that allows developers to integrate voice, video and messaging into their applications using their communication APIs. Whether you’re wanting to build video calls into your app, create a Facebook bot, or build applications on top of programmable phone numbers, you’ll have all the tools you need. Use promo code SYNTAX10 for €10 of free credit when signing up at [vonage.dev/syntax](https://vonage.dev/syntax).\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n3:50 - Network\n* See all requests, filter by type or name\n* Used to understand all requests coming or going\n* Turn off caching\n* View timing\n* See the true GZIP size\n* Slow down network speed\n* See time for page load\n* Copy as fetch or CURL\n* View request, response, and headers\n* See CORS issues\n* See which requests have happened\n* See if an asset is cached (both in dev tools, also Cloudflare)\n* See blocked requests because of extensions\n* Tip: You can see the network info from the console in Firefox\n\n22:03 - Memory\n* See what is taking up memory\n  * Strings\n  * DOM nodes\n  * Objects\n  * Actual .js\n\n26:44 - Performance\n* Click record and use the site\n* Flame chart useful for finding slow functions and debugging janky animations\n* Get FPS in coordination with flame chart\n* Save performance recording data to be able to share for debugging\n* You can also upload saved data to debug without using the site\n\n30:48 - Console\n* Interfaces with the JS runtime\n* Shows errors, warnings, and logs\n* Tip: Negate noisy warnings/errors that clutter your console with `-`\n* Tip: Use $0 to select current element\n  * $1 for second last\n  * $r for current React element\n* Tip: Use $$ to shortcut Query SelectorAll and Array.from\n* Tip: Use $ to shortcut Query Selector\n\n40:28 - Storage / Application\n* Working with LocalStorage, Cookies, Index DB, and Session Storage\n\n44:56 - Audit / Lighthouse (Chrome and Firefox)\n* Run lighthouse to check for performance, accessibility, and UI stuff\n* Not the silver bullet audit that many people think it is\n  * Colors are sometimes like \"Really?!\"\n* Can be helpful regardless\n\n50:28 - DOM Tab\n* Firefox only\n* Shows everything that is in the scope of the browser\n\n## Links\n* [Adam Wathan](https://adamwathan.me/)\n* [Ben Vinegar](https://twitter.com/bentlegen)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [dupeGuru](https://dupeguru.voltaicideas.net/)\n* Wes: [Moccamaster Coffee Maker](https://amzn.to/38IFvlt)\n\n## Shameless Plugs\n* Scott: [Node Fundamentals Authentication](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8f092763ac377774aaaf3452cbf6f57010ad563e6c84a1b1280b2d9fccc2399e', 'dev-tools-tabs-explained-plus-tips-and-tricks', '/shows/344 - dev tools.md', '2023-10-16 20:07:31.277', '2023-10-27 15:57:58.896', 'TASTY'),
('syntax_podcast_show_00345', 345, 'Hasty Treat - Container Queries Are Here', '2021-04-19 13:00:00.543', 'https://traffic.libsyn.com/syntax/Syntax345.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS container queries, what they are and how to use them. \n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n07:22 -  Why?\n* Container queries are media queries for components (e.g. they are based on the element\'s size, not the browser).\n* This is in line with how we write components.\n* It will change the way we write CSS.\n\n08:49 - The Syntax\n* Containers need to be defined as containers via containment context\n\n```css\n.container {\n  contain: size layout;\n}\n```\n\nNew contain value:\n\n```css\n.inline-container {\n  contain: inline-size;\n}\n```\n\nThis is the same as the logical properties. Assuming you read LTR, or RTL:\n* size - width and height\n* inline-size = width\n* block-size = height\n\n```css\n/* @container <container-query-list> { <stylesheet> } */\n@container (inline-size > 45em) {\n  .media-object {\n    grid-template: \"img content\" auto / auto 1fr;\n  }\n}\n```\n\n18:49 - How to try them today\n1. Download and/or update Chrome Canary\n2. Go to chrome://flags\n3. Search and enable \"CSS Container Queries\"\n4. Restart the browser\n\n19:27 - Demos\n* Need Chrome Canary + Flag\n* [https://codepen.io/collection/XQrgJo](https://codepen.io/collection/XQrgJo)\n* [https://codepen.io/una/pen/LYbvKpK?editors=1100](https://codepen.io/una/pen/LYbvKpK?editors=1100)\n\n## Links\n* [Miriam Suzanne](https://www.miriamsuzanne.com/)\n* [Susy](https://susy.oddbird.net/)\n* [Miriam\'s CSS Sandbox](https://css.oddbird.net/)\n* [https://css.oddbird.net/rwd/query/explainer/](https://css.oddbird.net/rwd/query/explainer/)\n* [Canary](https://www.google.com/chrome/canary/)\n* [@addyosmani](https://twitter.com/addyosmani)\n* [The CSS Podcast](https://thecsspodcast.libsyn.com/)\n* [@jon_neal](https://twitter.com/jon_neal)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8c59a0c6dc024f2005f85530c88513f7ab1f5a5ab897f6d025a8556db7697ceb', 'hasty-treat-container-queries-are-here', '/shows/345 - container queries.md', '2023-10-16 20:07:31.349', '2023-10-27 15:57:58.973', 'HASTY'),
('syntax_podcast_show_00346', 346, 'Selling and Shipping T-Shirts with TypeScript', '2021-04-21 13:00:00.543', 'https://traffic.libsyn.com/syntax/Syntax346.mp3', '\nIn this episode of Syntax, Scott and Wes talk about selling and shipping t-shirts, and how to do it all in TypeScript!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Deque - Sponsor\nDeque’s axe DevTools makes accessibility testing easy and doesn’t require special expertise. Find and fix issues while you code. Get started with a free trial of axe DevTools Pro at [deque.com/syntax](https://www.deque.com/syntax). No credit card needed.\n\n## Show Notes\n01:58 - T-Shirts 101\n* T-Shirts are cool\n* I sold 100 right away to get the kinks out\n* Then I did pre-order\n* The stack\n  * [TypeScript](https://www.typescriptlang.org/)\n  * [React](https://reactjs.org/)\n  * [Next.js](https://nextjs.org/)\n\n09:08 - Selling: Front-end\n* [Snipcart](https://snipcart.com/)\n* It\'s a button\n* When Someone buys, they scrape the site for the HTML\n  * If you only have a client-side rendered button, you use the JSON API instead\n* Integrated into [Gatsby](https://www.gatsbyjs.com/) pretty easily\n* Wrote one custom hook to count inventory and disable when sold out\n* I thought Snipcart would be enough, but I soon realized it wasn\'t. I needed something to fulfill the shipment.\n\n10:10 - Selling: Shipping Quotes\n* Snipcart has integration for USPS, etc.\n* You can also do custom shippers\n* It\'s a webhook\n* They also take care of customs declaration\n\n13:30 - Selling: Backend\n* Next.js Dashboard\n  * Integrate with [ChitChats](https://chitchats.com/en), [Stallion Express](https://stallionexpress.ca/), and SnipCart.\n* The tech\n* Shipping Labels\n  * Packing slip\n\n18:05 - Fulfilling\n* Printing labels\n  * Designed with CSS + React\n  * Print CSS is wild\n  * Fan Fold labels were way better\n  * I switched to Stallion Express\n  * Cheaper\n* Printing packing slips\n* Batch scanning\n* Scanning → Mark as shipped\n  * Started with webcam\n  * Bought scanner for cheap\n  * QR code was better because my tokens were long\n  * Data matrix is often better\n* Sending notifications\n  * Hit the endpoint via Snipcart\n\n28:48 - The physical part\n* T-Shirts printed from local supplier\n  * U-Haul to get them here\n* Bags printed in China (about 40 cents each)\n* I wrote a bunch of code to organize by size\n  * This cut down on moving around (14 hours if you save 30 seconds per shirt)\n* Some got stickers\n* Multiples were the hardest\n  * 24 different types of shirts\n    * some wanted 4xl\n    * some wanted tall\n\n36:30 - Common questions\n* Why did you do this yourself?\n  * Fun project\n  * I learned a ton\n  * This is how you don\'t burn out\n* Why not print-on-demand? (DTG)\n  * Tonal\n  * Embroidery\n  * Quality\n  * Money\n    * Pay people in my community\n* Control\n  * Bags, stickers, etc..\n  * [stickermule](https://www.stickermule.com/)\n* Why not $companyThatHandlesIt\n  * I want to do stickers\n  * I want to do decks\n* Why not [Shopify](https://www.shopify.com/)\n  * Large orders still need major fulfillment strategies\n  * Code has to be written or money spent\n\n44:16 - Other lessons learned\n* Queues would be good here\n  * Sometimes you had to wait 3+ seconds for the confirmation of shipping\n* No one reads, it was pre-order\n* Don\'t buy shipping right away — people email about incorrect addresses\n* Over-order by a few each (out of 1550 orders, five got partial refunds and three got full refunds)\n* Pre-order is great because you can offer many sizes\n* Async JS to do things at most 50 at a time\n\n## Links\n* [Wyze Plug](https://wyze.com/wyze-plug.html)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Pixeleyes AutoMounter](https://www.pixeleyes.co.nz/automounter/)\n* Wes: [Baratza Encore Conical Burr Coffee Grinder](https://www.amazon.com/Baratza-Encore-Conical-Coffee-Grinder/dp/B007F183LK/)\n\n## Shameless Plugs\n* Scott: [Level 2 Node Authentication](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ce7c6732bb90fb09aab6fa5870488db4a77e846ea9e272e325d3a6911fc43fb0', 'selling-and-shipping-t-shirts-with-typescript', '/shows/346 - tshirts.md', '2023-10-16 20:07:31.393', '2023-10-27 15:57:59.035', 'TASTY'),
('syntax_podcast_show_00347', 347, 'Hasty Treat - Git Rebase Explained', '2021-04-26 13:00:00.543', 'https://traffic.libsyn.com/syntax/Syntax347.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Git Rebase — what it is and how and when to use it!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n05:12 - Why and when to rebase?\n* `git rebase -i` is interactive\n* Rebase allows you to rewind your current branch, apply the changes of another branch to it, and then on top of that, apply your new commits.\n* Common uses:\n  * Squash all commits into one or multiple commits\n  * Reword commits\n* These lines can be re-ordered — they are executed from top to bottom.\n  * `p`, pick <commit> = use commit\n  * `r`, reword <commit> = use commit, but edit the commit message\n  * `e`, edit <commit> = use commit, but stop for amending\n  * `s`, squash <commit> = use commit, but meld into previous commit\n  * `f`, fixup <commit> = like \"squash\", but discard this commit\'s log message\n  * `x`, exec <command> = run command (the rest of the line) using shell\n  * `b`, break = stop here (continue rebase later with \'git rebase --continue\')\n  * `d`, drop <commit> = remove commit\n  * `l`, label <label> = label current HEAD with a name\n  * `t`, reset <label> = reset HEAD to a label\n  * `m`, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n\n## Links\n* [Git Rebasing](https://git-scm.com/book/en/v2/Git-Branching-Rebasing)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd302becc805e437cfebc956310daa78cd3bf2b9f6160f355eb7917aa2a1aa5f5', 'hasty-treat-git-rebase-explained', '/shows/347 - git rebase.md', '2023-10-16 20:07:31.428', '2023-10-27 15:57:59.087', 'HASTY'),
('syntax_podcast_show_00348', 348, 'TypeScript Fundamentals — Getting a Bit Deeper', '2021-04-28 13:00:00.543', 'https://traffic.libsyn.com/syntax/Syntax348.mp3', '\nIn this episode of Syntax, Scott and Wes continue their discussion of TypeScript Fundamentals with a deeper diver into more advanced use cases. \n\n## Deque - Sponsor\nDeque’s axe DevTools makes accessibility testing easy and doesn’t require special expertise. Find and fix issues while you code. Get started with a free trial of axe DevTools Pro at [deque.com/syntax](https://www.deque.com/syntax). No credit card needed.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n\n### Deep end stuff\n03:30 - `any vs unknown`\n\n06:20 - `never`\n* [https://twitter.com/Igorbdsq/status/1351681019196436482](https://twitter.com/Igorbdsq/status/1351681019196436482)\n09:14 - .d.ts\n* Definition files\n* Usually for existing libraries that don\'t have types\n* Can be generated or hand-written\n* Also really handy for pure JS projects, you still get good autocomplete because of these\n\n13:25 - Type generation\n* Can be generated from GraphQL, or Schemas, or from JSON Output\n\n17:20 - TypeScript generics (variables)\n* Kind of like functions, they return something different based on what you pass it\n* makeFood<Sandwich>\n* makeFood<Pizza>\n* This function makes food and shares lots of the same functionality between making a pizza and sandwich\n  * If the only thing that differs is the type returned, we can use generics\n  * You often see this as a single char T\n  * It can be anything\n  * Promise is a generic\n  * querySelector uses generics\n\n21:48 - Promises / Async + Await\n  * Functions now return a Promise type, but with a generic\n  * Promise<number>\n  * Promise<Course>\n  * Promise<Request<Order>>, Request<Customer>, Request<Product>\n    * stringified\n    * added headers\n\n29:48 - Type assertion (type casting)\n  * Type assertion is when you want to tell TypeScript \"Hey I know better than you\".\n  * Two ways:\n    * as keyword (most popular)\n      * `someValue as HTMLParagraphElement`\n      * Tagged before\n        * <HTMLParagraphElement>someValue\n\n34:14 - TypeScript without TypeScript ([JSDoc](https://jsdoc.app/) / [TSDoc](https://tsdoc.org/))\n* Really nice!\n* You can also add comments / descriptions\n* [https://github.com/developit/redaxios/blob/master/src/index.js](https://github.com/developit/redaxios/blob/master/src/index.js)\n\n40:08 - Interfaces vs Types\n* Interfaces have better perf\n* [https://twitter.com/wesbos/status/1362418379919937545](https://twitter.com/wesbos/status/1362418379919937545)\n* [https://blog.logrocket.com/types-vs-interfaces-in-typescript/](https://blog.logrocket.com/types-vs-interfaces-in-typescript/)\n* What do you default to?\n\n### How we write TypeScript\n44:27 - Interface or Types\n  * Scott - Types\n  * Wes - Interfaces\n\n44:50 - `any vs unknown`\n* Scott - any\n* Wes - unknown / any\n\n46:52 - Any (No Implicit or Implicit Allowed)\n* Scott - No implicit any\n* Wes - No implicit any\n\n48:31 - Return types (Implicit or Explicit)\n* Scott - Explicit always\n* Wes - Not always\n\n50:49 - Compile (TSC, Strip TS)\n* Scott - Strip\n* Wes - Both\n\n52:38 - Type Assertion (as or <tag>)\n* Scott - as\n* Wes - as\n\n53:09 - Arrays (Dog[] or Array<Dog>)\n* Scott - Dog[]\n* Wes - Dog[]\n\n54:02 - Assert or Generic (if both work)\n* querySelector(\'.thing\') as HTMLVideoElement; or querySelector<HTMLVideoElement>(\'.thing\');\n* Scott - querySelector<HTMLVideoElement>(\'.thing\');\n* Wes - querySelector<HTMLVideoElement>(\'.thing\');\n\n## Links\n* [Syntax 324: TypeScript Fundamentals](https://syntax.fm/show/324/typescript-fundamentals)\n* [Syntax 327: Hasty Treat - TypeScript Compilers and Build Tools](https://syntax.fm/show/327/hasty-treat-typescript-compilers-and-build-tools)\n* [Axios](https://www.npmjs.com/package/axios)\n* [VS Code](https://code.visualstudio.com/)\n* [Syntax 310: Serverless, Deno and TypeScript with Brian Leroux](https://syntax.fm/show/310/serverless-deno-and-typescript-with-brian-leroux)\n* [Cloudinary](https://cloudinary.com/)\n* [Notion](https://www.notion.so/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Powerowl 16 Battery Recharger](https://amzn.to/3u9DlUx)\n* Wes: [Fairywill Pro P11](https://amzn.to/3cxKdFf) \n\n## Shameless Plugs\n* Scott: [Level 2 Node Authentication](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner Javascript](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '65a2815439a3ec2301386e46dd4c0abff521fd9c5e664335e05b88753c07c1bd', 'typescript-fundamentals-getting-a-bit-deeper', '/shows/348 - typescript fundamentals.md', '2023-10-16 20:07:31.470', '2023-10-27 15:57:59.136', 'TASTY'),
('syntax_podcast_show_00349', 349, 'Hasty Treat - Future Tech We\'re Excited About', '2021-05-03 13:00:00.877', 'https://traffic.libsyn.com/syntax/Syntax349.mp3', '\nIn this Hasty Treat, Scott and Wes talk about future tech — some things you may not have heard about yet, and why we\'re excited about them!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n05:20 - Astro\n* What it is:\n  * [astro.build](http://astro.build) is a next gen \"meta\" framework that eases some of React\'s pain but also is not just React.\n  * [https://twitter.com/georges_gomes/status/1380801812656226304](https://twitter.com/georges_gomes/status/1380801812656226304)\n* Why we\'re excited about it:\n  * Server Side JS frameworks, combine Svelte, React, Vue as needed in one component that is an SFC using markdown style meta data.\n  * Scoped CSS by default (a la Svelte). Sass out of the box.\n  * Collections import for .md files\n\n```html\n// pages/blog.astro\n---\nimport PostPreview from \'../components/PostPreview.astro\';\n\nconst blogPosts = import.meta.collections(\'./post/*.md\');\n---\n\n<main>\n  <h1>Blog Posts</h1>\n  {blogPosts.map((post) => (\n    <PostPreview post={post} />\n  )}\n</main>\n```\n\n12:06 - ViteKit\n* What it is:\n  * Framework-agnostic\n  * API routes\n  * Pages (frontend, optional hydration)\n  * Adapter for Node, static, Vercel, cf worker, etc. Inspired by SvelteKit.\n\n15:58 - Svelte Kit\n* What it is:\n  * [https://kit.svelte.dev/docs](https://kit.svelte.dev/docs)\n  * [https://svelte.dev/blog/sveltekit-beta](https://svelte.dev/blog/sveltekit-beta)\n  * New framework for building Svelte apps\n\n19:07 - Remix.run\n* What it is:\n  * [Remix.run](https://remix.run/)\n  * Fullstack React framework\n* Why we\'re excited about it:\n  * Made by Michael Jackson, Ryan Florence\n  * License-based\n  * React-based\n  * Caching-focused, uses \"the platform\"\n  * Centralized data loading, works without client JS if needed\n  * Better nested routing\n\n## Links\n* [Sapper](https://sapper.svelte.dev/)\n* [Vite](https://vitejs.dev/)\n* [Snowpack](https://www.snowpack.dev/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b17d5236126c454fffddd4e27c4f9040c30da4401c72b78d11eeb19ddc0b3f2b', 'hasty-treat-future-tech-we-re-excited-about', '/shows/349 - future tech.md', '2023-10-16 20:07:31.507', '2023-10-27 15:57:59.185', 'HASTY'),
('syntax_podcast_show_00350', 350, 'Potluck — Is it worth it to still learn WordPress? × Is Safari the new IE11? × Mobile website testing × Pirated content × Styled components × SSGs × Transitioning to full-time freelance × More!', '2021-05-05 13:00:00.877', 'https://traffic.libsyn.com/syntax/Syntax350.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about blogging best practices, support IE11, Nest.js, mobile website testing, pirated course content, building .edu websites, transitioning to full-time freelance work, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n02:20 - I am adding a blog to my custom written personal website and I wanted to know if there is any best practices for storing blog posts? My hope is to write them in [markdown](https://www.markdownguide.org/), host them somewhere and then automatically feed them into my website so they are all formatted to the style of my website.\n\n05:37 - Do you care if people share cool, unique tips from your courses publicly on social media? For example, I once shared out a trick from one of Wes\' courses for how to set your [VS Code](https://code.visualstudio.com/) windows different colors to distinguish your server and client code windows (giving all credit to Wes\' course for the concept). But it felt a little weird that I was sharing out a portion of his paid content for free. Is that okay? Where\'s the line?\n\n08:18 - With official support of [IE11](https://en.wikipedia.org/wiki/Internet_Explorer_11) coming to an end on August 17, 2021, do you think developers should still try to support ir or focus only on new modern browsers? Also, will there be a new \"lowest common denominator\" that we should be aware of and support?\n\n17:20 - Thanks for an awesome podcast! Have you looked into [Nest.js](https://nestjs.com/) (not to be confused with [Next.js](https://nextjs.org/)) for backend work? It is an open source TypeScript Node framework that is becoming pretty popular\n\n22:48 - Do you think it’s worth learning [WordPress](https://wordpress.org/) for freelancing if you aren’t too confident in your JavaScript front-end design? Also, I don’t want to get stuck in only WordPress land just because of the money.\n\n30:11 - Hi guys, I have been listening to you guys for a while and just recently launched my first website! Your podcast has been a huge help in terms of getting started. For the website I made, I tested the iPhone view on Chrome dev tools and everything looked fine. However, when viewing the website on an actual iPhone, the button is too small and the word \"Menu\" turns into \"Men\". Any advice on how to more accurately test sites on mobile devices without pushing to a production branch?\n\n36:52 - Do you guys ever see your premium courses pirated on sites like [Udemy](https://www.udemy.com/), [Skillshare](https://www.skillshare.com/), any of the other video course platforms? Meaning somebody downloaded your videos and uploaded them as if they were the creator. Any tips to protect against this?\n\n39:53 - Looking at [uses.tech](http://uses.tech/) and thinking, I see a lot of class names with almost the same style, gKxjCc and hSiXhL. I really want to know the science behind generating those. Do you have a shared classes that some magic tool transfers them into ugly names and copies over? What is that tool? And is it worth it?	\n\n42:57 - Have you ever developed a .edu site? If so, what did you use to manage the enormous archives in addition to giving the site a simple page builder for departments to contribute with little or no interaction from the developer? No Joomla or Drupal please - been there. Thanks for the great help guys!\n\n50:35 - Hi Wes & Scott, thank you so much for giving me my weekly motivation boost to try out new stuff. Currently, I am experimenting with Next.js and SSG and I would like to know how I can generate a page at build time but only show it to an authorized user. I know I could use SSR with getServerSideProps to check allowance, however, the page is completely static without any dynamic content and I don’t want to regenerate it with every request. Is there a way to achieve this? Keep up the great work.\n\n54:59 - I love the show guys! I want to make the transition into full-time freelancing and wanted to know what you think about having a talk with my current employer to see if they\'d be willing to take me from full-time to a contract/freelance basis. Bad idea? Thoughts? Advice?\n\n## Links\n* [Fastify](https://www.fastify.io/)\n* [RedwoodJS](https://redwoodjs.com/)\n* [Keystone.js](https://www.keystonejs.com/)\n* [10up](https://10up.com/)\n* [Vite](https://vitejs.dev/)\n* [Safari + Dev tools](https://support.apple.com/guide/safari/use-the-developer-tools-in-the-develop-menu-sfri20948/mac)\n* [Browsersync](https://browsersync.io/)\n* [localtunnel](http://localtunnel.github.io/www/)\n* [ngrok](https://ngrok.com/)\n* [Xcode simulator](https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/iOS_Simulator_Guide/GettingStartedwithiOSSimulator/GettingStartedwithiOSSimulator.html)\n* [Mike Birbiglia](https://www.birbigs.com/)\n* [Brian Douglas YouTube Channel](https://www.youtube.com/channel/UC7iJhl4CsLxzKUWfAw69Qkg)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [3 in 1 Multi USB Charging Cable](https://amzn.to/3moAF2A)\n* Wes: [Milk Frother](https://www.amazon.com/s?k=milk+frother&ref=nb_sb_noss_1)\n\n## Shameless Plugs\n* Scott:\n  1: [Become a Level Up Tutorials Author](https://forms.gle/PDEpDAGZpNHBDVou5)\n  2: [Github Actions with Brian Douglas](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd795382afc79e94787a6d4702301ca06674e1f7e9713f90942405b70fac8e247', 'potluck-is-it-worth-it-to-still-learn-wordpress-is-safari-the-new-ie11-mobile-website-testing-pirated-content-styled-components-ssgs-transitioning-to-full-time-freelance-more', '/shows/350 - potluck.md', '2023-10-16 20:07:31.542', '2023-10-27 15:57:59.232', 'TASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00351', 351, 'Hasty Treat - Technical Debt', '2021-05-10 13:00:00.610', 'https://traffic.libsyn.com/syntax/Syntax351.mp3', '\nIn this Hasty Treat, Scott and Wes talk about technical debt — what it is, why does it occur, and some techniques for reducing and avoiding it. \n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:17 - What is technical debt\n* Outdated or hard to update code\n* If you groan when you have to work on it, it might be a sign of technical debt\n* Brittle code, easily breakable\n* Quirks and features\n\n06:55 - Why does it occur\n* Over time, any garden left un-pruned will become overgrown\n* Many people, many code styles\n* Using hot new frameworks / techniques\n  * This is why seasoned developers don\'t jump on new things\n* You allow users to do literally anything\n\n13:18 - Techniques for avoiding it\n* Deny your FOMO of new things\n* Abstract\n* Write good tests\n* Don\'t put off refactors\n* Update dependencies frequently\n* Good standards\n  * Etsy has thousands of devs\n\n20:08 - Examples in the real world\n* Airline websites open in new windows all the time\n* Cellphone carrier flashes the screen 100x\n\n22:15 - Unfixable technical debt\n* Agency work sometimes\n\n## Links\n* [Next](https://nextjs.org/)\n* [React Router](https://reactrouter.com/)\n* [TailwindCSS](https://tailwindcss.com/)\n* [Redux](https://redux.js.org/)\n* [Etsy](https://www.etsy.com/)\n* [Dave Ramsey](https://www.ramseysolutions.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e3ad31e5258495e4ba92d419cc140a26e7a12dfaac3a0c216b190d319cfc4fd3', 'hasty-treat-technical-debt', '/shows/351 - technical debt.md', '2023-10-16 20:07:31.585', '2023-10-27 15:57:59.284', 'HASTY'),
('syntax_podcast_show_00352', 352, 'Potluck — Freelancing × Leveraging your experience × Component size × Dealing with mediocrity × How to spend \"extra time\" × Rust vs Node × Free hosting? × More!', '2021-05-12 13:00:00.610', 'https://traffic.libsyn.com/syntax/Syntax352.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about freelancing, climbing the corporate ladder, Throttling vs debounce, how to build skills with your free time, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Vonage - Sponsor\nVonage is a Cloud Communications platform that allows developers to integrate voice, video and messaging into their applications using their communication APIs. Whether you’re wanting to build video calls into your app, create a Facebook bot, or build applications on top of programmable phone numbers, you’ll have all the tools you need. Use promo code SYNTAX10 for €10 of free credit when signing up at [vonage.dev/syntax](https://vonage.dev/syntax).\n\n## Show Notes\n02:11 - I\'ve read that when you start out freelancing, you should look to your area first to gauge the market for both rates, and type of work that is in demand. If you wanted to work remotely as a freelancer, however, is that really applicable advice? Is it viable to work 100% remote and not be tied to \"local rates\"? \n\nHow can I leverage my years of professional experience when starting to freelance? A lot of material online speaks to those who are learning web development for the first time. But what does someone do if they\'ve been working at big companies, who can\'t share their work directly? What can I do to help prospective clients appreciate those years of experience?\n\n06:02 - In your opinion, what is the accepted norm for the size of a component? It could be anything from a single element to a full page of content, but what is the norm for component size or content? Love the show, keep up the good work.\n\n09:42 - I\'m a bit confused about throttling and debounce. What is the difference between them? I have been finding different examples which are not at all helpful.\n\n12:58 - My question is about climbing the company hierarchy. I\'ve had a hard time getting my first job after graduation. I have dealt with the unemployment office, useless recruiters, trying to look important for companies, and I wonder if a get a low wage job at a company and then apply for their IT department after some time if there is a open position. Is it bad practice or good strategy taking this shortcut? Would they know what I\'m trying to accomplish?\n\n18:25 - I\'m getting started building websites and find the initial design to be a challenge. I always end up diving into the coding and then spending hours getting lost tweaking CSS. The mediocrity of the final design is a masked technical challenge, and I emerge at the other end of the effort with something I\'m still not happy with. I suspect there is some kind of mock up stage I\'m forgoing, and I bet there are some tools to make it easier. I imagine that some kind of application that really focused me on the design and made it easy to tweak and tinker quickly would be ideal. Thoughts? What do you use?\n\n23:34 - The company I work for works with a SOAP API. Currently I am developing a application in React but I am wondering whether it\'s better to use the SOAP API or let them create a Rest API. Some people on the internet say that JS and SOAP combinations are not done. Is there some advice you can give me about this?\n\n28:28 - Why are radio buttons called radio buttons?\n\n30:49 - I am midway through a post-baccalaureate in computer science. I recently quit my job to focus on my second degree. Now I\'m looking to spend my \"extra time\" on an area of focus that can hit as many of the following criteria as possible:\n* Could make me money now\n* Help me to hit the ground running when I graduate\n* Get me a job easily\n* Make me all kinds of cash \n\nThoughts?\n\n35:56 - What is your opinion on a Rust GraphQL server for web backend? Do you think it is better than Node.js?\n(not part of a question, just a comment: I found you yesterday and dude I have to say, you are legendary... I am 13 right now and also started web development when I was 12. I have been looking for a good web-development related podcast for about four months now. Looks like I found the one I needed ;) )\n\n39:57 - How would you go about introducing React into an existing big website with lots of legacy code and a template-based CMS behind? I can\'t do a full rewrite but I would love to start turning little bits & pieces into a single-page-experience (e.g. checkout) to slowly modernize the site. The frontend is already TypeScript & SCSS but it\'s an old self-made framework and the content coming from the CMS is mostly put into data-attributes or right into the HTML. I don\'t really have an API for most of the content. How would React hook into the existing DOM in different places, loading data from the templates and potentially writing it back into the templates as well?\n\n45:31 - What\'s the best way to be able to host personal projects (frontend + backend) for *free* on the web? I would like something where I can SSH into to install for example Node.js and a database. I already bought a domain, but I don\'t want to pay for some premium plan for now since I\'m short on money and it\'s for personal projects anyway.\n\n## Links\n* [https://type-scale.com](https://type-scale.com/)\n* [https://www.leveluptutorials.com/tutorials/modern-css-design-systems](https://www.leveluptutorials.com/tutorials/modern-css-design-systems)\n* [https://www.npmjs.com/package/soap](https://www.npmjs.com/package/soap)\n* [Vercel](https://vercel.com/)\n* [Glitch](https://glitch.com/)\n* [Codepen](https://codepen.io/)\n* [Code Sandbox](https://codesandbox.io/)\n* [PM2](https://pm2.keymetrics.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Wyze Sprinkler Controller](https://amzn.to/3ghvSiD)\n* Wes: [Retevis](https://amzn.to/3wR4T3a) \n\n## Shameless Plugs\n* Scott:\n  1: [Become a Level Up Tutorials Author](https://forms.gle/PDEpDAGZpNHBDVou5)\n  2: [Github Actions with Brian Douglas](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '57d8cbd205d69a98e011441481ff07a7c85f36c7aeeca88ca4cc7bfb6f60888a', 'potluck-freelancing-leveraging-your-experience-component-size-dealing-with-mediocrity-how-to-spend-extra-time-rust-vs-node-free-hosting-more', '/shows/352 - potluck.md', '2023-10-16 20:07:31.619', '2023-10-27 15:57:59.331', 'TASTY'),
('syntax_podcast_show_00353', 353, 'Hasty Treat - Stylin the Unstylables', '2021-05-17 13:00:00.177', 'https://traffic.libsyn.com/syntax/Syntax353.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the different kinds of things that are difficult to style, how you can style them, and some future tech to look out for!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n### Can it be styled? Solutions\n04:28 - Just style the defaults\n* Most elements can be styled, though some elements are really just multiple elements grouped together into the shadow dom and are hard to style.\n* This leads to us having to re-create the visual UI, and often is a point of making inaccessible UIs.\n* Select\n* Input - number, date, etc.\n  * Very hard to style\n  * Often need `appearance: none;` for mobile\n* Checkbox / Radio\n* Generally speaking, these CSS Properties can be applied to all inputs:\n  * font-size\n  * color\n  * padding\n  * margin\n  * background / images\n  * outline (remember focus)\n  * border\n\n08:20 - Overlap with more dom elements, set background images\n* Checkbox / Radio / Toggle buttons\n  * Often used `:before` and `:after` along with labels — e.g. label + input:checked\n* Select can have element overlap\n\n14:13 - Re-implement the UI with JavaScript\n* Video / Audio\n  * HUGE rabbit hole of things to code\n* Very important to maintain accessibility\n\n15:46 - Use a UI Library\n* [Bootstrap](https://getbootstrap.com/)\n* [Foundation](https://get.foundation/)\n* [Ant Design](https://ant.design/)\n* [Carbon Design](https://www.carbondesignsystem.com/)\n* [Fast](https://www.fast.design/)\n* [Lightning Design System](https://www.lightningdesignsystem.com/)\n* [Material Design](https://material.io/design)\n* [Chakra](https://chakra-ui.com/)\n\n17:20 - Open UI\n* Documenting all the different types of web UI controls\n* [https://open-ui.org/](https://open-ui.org/)\n* [https://twitter.com/stubbornella/status/1384889551924121605](https://twitter.com/stubbornella/status/1384889551924121605)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd046ed399bf4a288ee390c2a165d226bfdbb0617bc4ce918654952c8257a668d', 'hasty-treat-stylin-the-unstylables', '/shows/353 - stylin.md', '2023-10-16 20:07:31.656', '2023-10-27 15:57:59.392', 'HASTY'),
('syntax_podcast_show_00354', 354, 'The Surprisingly Exciting World of HTML Elements', '2021-05-19 13:00:00.177', 'https://traffic.libsyn.com/syntax/Syntax354.mp3', '\nIn this episode of Syntax, Scott and Wes talk about HTML — interesting HTML elements, things you might not know, wish lists for the future, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n02:34 - What is semantic HTML?\n* What is the content? HTML should describe the content first and foremost.\n\n04:04 - Why semantic HTML?\n* Accessibility\n* SEO\n* Styling is easier\n* HTML tags that have meaning:\n  * Almost all of them\n  * Common ones:\n    * `<p>`\n    * `<ul>/<ol>` and `<li>`\n    * `<a>`\n    * `<h1>` to `<h6>`\n\n20:04 - Structural / Layout tags\n* `<nav>`\n* `<header>`\n  * You can have more than one header\n  * Header cannot be in a footer / address / header\n* `<section>`\n* `<footer>`\n* `<aside>`\n* `<main>`\n* `<article>`\n\n26:18 - Some fun ones you might not know\n* `<address>`\n* `<kbd>`\n* `<sup>` / <sub>\n* `<datalist>`\n* `<time>` and strike?\n* `<track>`\n* `<wbr>`\n* `<cite>`\n* `<dfn>`\n* `<mark>`\n* `<ruby>` / `<rt>` / `<rb>`\n  * A ruby annotation is a small extra text, attached to the main text to indicate the pronunciation or meaning of the corresponding characters.\n* `<meter>` and `<progress>`\n  * While `<progress>` is used to convey how much work in a task has been completed, the <meter> element is used to display a measurement on a known scale. This could be something like the current disk usage on your computer, or a temperature measurement (within a defined range).\n* `<marquee>`\n\n32:12 - Visual vs Semantic tags\n* Almost all tags in HTML are semantic\n* `<i>` vs `<em>` and `<bold>` vs `<strong>`\n  * `<i>` and `<bold>` are NOT deprecated like many have said\n  * The `<strong>` element is for content that is of greater importance, while the <b> element is used to draw attention to text without indicating that it\'s more important.\n\n35:40 - HTML tags with no meaning:\n* `<div>`\n* `<span>`\n\n37:51 - Some elements have special functionality or styling\n* `<details>` and `<summary>` tag\n* `<fieldset>` + `<legend>`\n\n40:59 - What elements would we like to see?\n* Modal element\n  * [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)\n* Textarea that grows with content\n* Animated accordion\n* A better table\n  * One that works with grid/flex/modern CSS, auto-sizing, max/min widths\n* From Twitter:\n  * VirtualList\n  * Carousel - HOT DRAMA\n  * Date range\n  * Hero\n  * <H> tag that figured its level out by itself. Useful for components that can go anywhere\n  * Icon tag\n  * Cookie banner\n  * <pre> tag that shows HTML elements without encoding\n    * You can kinda do this with display block on script and style tags\n\n## Links\n* [Sara Soueidan](https://www.sarasoueidan.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Hat Washer](https://amzn.to/3efHQXj)\n* Wes: [Netflix\'s This is a Robbery](https://www.netflix.com/title/81032570)\n\n## Shameless Plugs\n* Scott:\n  1: [Become a Level Up Tutorials Author](https://forms.gle/PDEpDAGZpNHBDVou5)\n  2: [Github Actions with Brian Douglas](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7d4bca9a751ae5f4e89d3da8ae80b2d62c50cc567c15d9547939c57b6614188d', 'the-surprisingly-exciting-world-of-html-elements', '/shows/354 - HTML elements.md', '2023-10-16 20:07:31.692', '2023-10-27 15:57:59.440', 'TASTY'),
('syntax_podcast_show_00355', 355, 'Hasty Treat - JavaScript\'s Drag and Drop API', '2021-05-24 13:00:00.010', 'https://traffic.libsyn.com/syntax/Syntax355.mp3', '\nIn this Hasty Treat, Scott and Wes talk about JavaScript\'s drag and drop API — how it works, concerns, best practices, and more!\n\n## .TECH Domains - Sponsor\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n04:45 - What is it?\n* Drag and drop is really for desktop apps\n* You can drag and drop anything from any browser to any browser\n* The important thing here is that this is a set of browser standards that allow different apps to communicate\n\n07:50 - How to implement\n1. Make an element draggable\n2. Listen on elements for drag events\n    * The events bubble up, so you can listen on the parent element as items are added/removed\n\n09:06 - DataTransfer API\n* You can store anything you want in it\n* getData / setData API \n* Reference strings\n\n11:35 - Accepting drops\n* When you dragOver, you need to preventDefault()\n* Calling the preventDefault() method during both a dragEnter and dragOver event will indicate that a drop is allowed at that location\n\n13:01 - Drop Image\n* Set whatever you want\n\n16:00 - Drop Effect\n* What does it look like when you drop it? Does it go back?\n* dataTransfer.effectAllowed\n* e.dataTransfer.setDragImage(nothing, 0, 0);\n\n18:02 - Security concerns\n\n20:34 - Shortcomings:\n* Edge cases out the WAZOO\n  * Margin caused dragout events\n  * Lots of if statements\n* It\'s up to you to do EVERYTHING\n  * CSS, classes, hover styles, etc.\n* Accessibility\n  * Inaccessible by default, unless using mouse keys\n  * Have to announce everything\n* Mobile\n\n26:14 - Lbs \n* [Transmat API](https://google.github.io/transmat/)\n\n## Links\n* [Figma](https://www.figma.com/)\n* [Notion](https://www.notion.so/)\n* [Missive](https://missiveapp.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'fd9b29fc4fff7ad7ae39af624f07f9525dae0e49315ec63e40a62781f291d5bf', 'hasty-treat-javascript-s-drag-and-drop-api', '/shows/355 - drag and drop.md', '2023-10-16 20:07:31.734', '2023-10-27 15:57:59.496', 'HASTY'),
('syntax_podcast_show_00356', 356, 'Bike Shedding — Developer Opinions Explained', '2021-05-26 13:00:00.010', 'https://traffic.libsyn.com/syntax/Syntax356.mp3', '\nIn this episode of Syntax, Scott and Wes bike shed some common developer opinions.\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n04:27 - Event params\n* e, evt, ev, or event?\n\n06:36 - CSS variables\n* —red or —primary?\n\n09:31 - CSS colors\n* [https://twitter.com/rem/status/1386694431710007298](https://twitter.com/rem/status/1386694431710007298)\n* RGB, HSL, HEX?\n\n11:52 - Default exports vs named exports\n\n14:45 - JavaScript import ordering\n\n17:09 - Foo / Bar / Baz in examples\n\n21:18 - Light vs dark themes\n\n24:00 - longVerboseNamesDescribingWhatItIsOrDoes vs x\n\n26:54 - VScode vs WebStorm (IDE) vs Vim\n\n31:12 - TypeScript Generics: <T> vs <ThingName>\n\n34:39 - Indentation-base syntax\n* [https://twitter.com/LeahLundqvist/status/1386693374305095680](https://twitter.com/LeahLundqvist/status/1386693374305095680)\n\n37:37 - Max line length\n\n40:21 - One reduce, vs multiple .map()/flat(),filter()\n\n```jsx\nasync function getStatus() {\n\n  const res = await sendCommand(\'AT!GSTATUS\');\n\n  const result = res.result\n    .split(\'\\n\')\n    .map((x: string) => x.split(`\\t\\t`))\n    .flat()\n    .filter(Boolean)\n    .map((x: string) => x.trim())\n    .map((x: string) => x.split(`    \\t`))\n    .flat()\n    .filter((x: string) => x.includes(\':\'))\n    .map((x: string) => x.split(`:`))\n    .map(([prop, val]: [string, string]) => [prop, val.trim()])\n\n  return Object.fromEntries(result);\n}\n```\n\n42:50 - index.js files\n* [https://twitter.com/sevilhelm/status/1386693971112562694](https://twitter.com/sevilhelm/status/1386693971112562694) \n* ComponentName.js vs ComponentName/index.js\n* [https://twitter.com/rleggos/status/1386694773021552641](https://twitter.com/rleggos/status/1386694773021552641)\n\n48:20 - Ligatures and fancy fonts\n* [https://twitter.com/badsyntax/status/1386695010859507713](https://twitter.com/badsyntax/status/1386695010859507713)\n\n50:30 - Regular functions vs anon functions in a variable vs arrow functions\n* function hey() {}\n* const hey = function() {}\n* const hey =  () ⇒ {}\n\n52:44 - Explicit return vs implicit return\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Ego Mower](https://amzn.to/3dUU6xv)\n* Wes: [Pass-Through Socket Set](https://www.google.com/search?q=pass-through+socket+set&rlz=1C5CHFA_enUS886US886&ei=RNKpYN2MBaixggfS14voBg&oq=pass-through+socket+set&gs_lcp=Cgdnd3Mtd2l6EAMyAggAMgIIADICCAAyAggAMgQIABAeMgQIABAeMgQIABAeMgQIABAeMgQIABAeMgQIABAeOgcIABBHELADUO4bWO4bYJcgaAFwAngAgAF5iAHJAZIBAzEuMZgBAKABAaoBB2d3cy13aXrIAQjAAQE&sclient=gws-wiz&ved=0ahUKEwjdvp2l9N7wAhWomOAKHdLrAm0Q4dUDCA4&uact=5)\n\n## Shameless Plugs\n* * Scott:\n  1: [Level Up Tutorials Pro Spring Sale](https://www.leveluptutorials.com/pro) - 50% off annual subscriptions!\n  2: [Github Actions with Brian Douglas](https://www.leveluptutorials.com/pro)\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '3b6fe10a518990453a973bca231d1fd5fe485cd40918a75a90057c7274c5c2f5', 'bike-shedding-developer-opinions-explained', '/shows/356 - bike shedding.md', '2023-10-16 20:07:31.771', '2023-10-27 15:57:59.546', 'TASTY'),
('syntax_podcast_show_00357', 357, 'Hasty Treat - How to Make Money as a Creator', '2021-05-31 13:00:00.141', 'https://traffic.libsyn.com/syntax/Syntax357.mp3', '\nIn this Hasty Treat, Scott and Wes talk about making money as a creator — how to do what you love, make money doing it, and not feel yucky about it!\n\n## Deque - Sponsor\nDeque’s axe DevTools makes accessibility testing easy and doesn’t require special expertise. Find and fix issues while you code. Get started with a free trial of axe DevTools Pro at [deque.com/syntax](https://www.deque.com/syntax). No credit card needed.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n06:37 - Community supported\n* Sell licenses\n  * Premium plugin\n  * Single payment\n  * $x per year\n* Sell training\n  * Online\n  * In-person\n* Sell support\n* Donation-supported\n  * [Patreon](https://www.patreon.com/) (usually has bonus content)\n  * Tips\n  * [Open Collective](https://opencollective.com/)\n* Sell merch\n  * [Teespring](https://teespring.com/)\n\n16:00 - Corporation supported\n* Display ads\n* Sponsored segments\n* Corporate sponsors\n* Sponsored content\n* Interesting collabs\n  * Stickers\n\n## Links\n* [Syntax 330: React Query + More React with Tanner Linsley](https://syntax.fm/show/330/react-query-more-react-with-tanner-linsley)\n* [Syntax 340: Servers with Matt from Caddy](https://syntax.fm/show/340/servers-with-matt-from-caddy)\n* [Wes\' CSS Grid Course](https://cssgrid.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'a0506446541e077f87f119712d0aeab75d2ff8f6fe974577b46a6b3f58c7695f', 'hasty-treat-how-to-make-money-as-a-creator', '/shows/357 - money.md', '2023-10-16 20:07:31.808', '2023-10-27 15:57:59.590', 'HASTY'),
('syntax_podcast_show_00358', 358, 'React + TypeScript', '2021-06-02 13:00:00.141', 'https://traffic.libsyn.com/syntax/Syntax358.mp3', '\nIn this episode of Syntax, Scott and Wes talk about using React with Typescript — how to set it up, components, state, props, passing data, custom hooks, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n04:55 - Components\n* Strategies\n* Example:\n\n  ```tsx\n  type Props = {\n      value: string;\n  }\n\n  const App = (props: Props) => <div />\n  ```\n   \n* Return type? JSX.Element\n* FC or FunctionComponent\n* It\'s discouraged for this reason: `It means that all components accept children, even if they\'re not supposed to`\n* It could be useful for a return type\n\n12:13 - Props\n* Default props:\n  ```jsx\n  const defaultJoke: JokeProps = {\n      joke: \'LOL JOE\',\n      id: \'YEAH\',\n      status: 200,\n  };\n  \n  function JokeItem({ joke = defaultJoke }: JokeProps): JSX.Element {\n      return (\n      <li>\n          {joke.joke} = {joke.id}\n      </li>\n      );\n  }\n  ```\n* Because props are always destructured, you often have to make a new type for your props. You can\'t just type each argument by itself.\n\n18:38 - State\n* Just like Generics, State can be inferred\n* If your type is simple and you\'re using useState, it just works:\n`const [user, setUser] = useState<User | null>(null);`\n\n22:27 - useEffect\n* Nothing special required\n* Good use of void: If you want to use a Promise function but not worry about await or .then(), you can pop a void in front of it:\n```jsx\nuseEffect(() => {\nconsole.log(\'Mounted\');\n// getJoke().then(console.log).catch(console.error);\nvoid getJoke();\n}, [getJoke]);\n```\n\n26:09 - Refs\n* Very similar to state however some interesting things with null:\n`const ref1 = useRef<HTMLElement>(null!);`\n* \"Instantiating the ref with a current value of null but lying to TypeScript that it\'s not null.\"\n\n29:33 - Custom Hooks\n* This is a great use case for Tuples\n\n31:00 - Context\n* This is probably the most complex thing in this list\n* First define the types\n* Use generic to pass in types OR null\n* This can also be non-null if you have default values in createContext:\n`const AppCtx = React.createContext<AppContextInterface | null>(null);`\n\n35:21 - Events\n* The React events system is better than Vanilla JS\n* Can handle them inline and have it inferred: `onClick={e ⇒ yeah(e.target)}`\n```jsx\nconst onSetType = (e: React.ChangeEvent<HTMLSelectElement>) =>\n    setType(e.target.value)\n```\n* React has a bunch of events built in — many of them take a Generic argument so you can specify the type of element that triggered it. Handy for native API methods like play and pause.\n\n39:27 - ForwardRef\n* Again use of <> to pass in forwarded ref type as param 1, Props types as param 2:\n```jsx\ntype Props = { children: React.ReactNode; type: \"submit\" | \"button\" };\nexport type Ref = HTMLButtonElement;\nexport const FancyButton = React.forwardRef<Ref, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n```\n\n41:30 - ESLint\n* Typescript-react is good\n* Extend your own\n* Most JS rules apply to TS\n\n46:20 - React as Global React 17\n\n- Also add JSX: True to eslint globals for typing things like JSX.Element\n- global.d.ts\n\n```jsx\nimport * as react from \"react\"\nimport * as react_dom from \"react-dom\"\n\ndeclare global {\n    type React = typeof react\n    type ReactDOM = typeof react_dom\n}\n```\n\n48:08 - TSConfig\n* `jsx: \"react\"`\n* React emit .js files with JSX changed\n* Preserve .jsx file output\n* React-native → .js files with jsx not changed\n\n53:05 - Frameworks?\n* [Next.js](https://nextjs.org/) makes this a TREAT\n* [Gatsby](https://www.gatsbyjs.com/) just use .tsx extensions\n  * [https://www.gatsbyjs.com/plugins/gatsby-plugin-ts-config/](https://www.gatsbyjs.com/plugins/gatsby-plugin-ts-config/)\n\n## Links\n* [https://github.com/typescript-cheatsheets/react](https://github.com/typescript-cheatsheets/react)\n* [Tanner Linsley](https://tannerlinsley.com/)\n* [https://github.com/wesbos/eslint-config-wesbos](https://github.com/wesbos/eslint-config-wesbos)\n* [Deno](https://deno.land/)\n* [Architect](https://arc.codes/)\n* [https://fav.farm/](https://fav.farm/)\n* [Snowpack](https://www.snowpack.dev/)\n* [Vite](https://vitejs.dev/)\n* [Parcel 2](https://v2.parceljs.org/)\n* [Foam](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Obsidian](https://obsidian.md/)\n* Wes: [Folding Allen Keys](https://amzn.to/3nHjqKu) \n\n## Shameless Plugs\n* Scott:\n  * 1: [Level Up Tutorials Pro Spring Sale](https://www.leveluptutorials.com/pro) - 50% off annual subscriptions!\n  * 2: [SvelteKit Course](https://www.leveluptutorials.com/pro)\n* Wes: [Beginner Javascript Course](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f4d5d7891435610583133069a246a71ab98357f60773fefc537033e3f7f26533', 'react-typescript', '/shows/358 - react-typescript.md', '2023-10-16 20:07:31.847', '2023-10-27 15:57:59.651', 'TASTY'),
('syntax_podcast_show_00359', 359, 'Hasty Treat - Making a Vaccine Bot with JavaScript', '2021-06-07 13:00:00.700', 'https://traffic.libsyn.com/syntax/Syntax359.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Wes\' experiment building a vaccine bot!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n07:32 - First step\n* Finding the data. Open up dev tools.\n* Copy as Node.js Fetch in Chrome\n* Two ways to do this - Puppeteer, or raw requests, or a mix.\n\n11:03 - Variablizing it \n* Store IDs\n* Booking form IDs\n* Vaccine IDs\n\n12:56 - Finding out any restrictions\n* Is there a cookie?\n* Is there an XSRF?\n* Do these things change?\n* How often can you hit it?\n\n15:20 - Caching\n* Array variable\n\n16:59 - Delivering the notifications\n* Telegram\n\n## Links\n* [https://github.com/wesbos/vaxbot](https://github.com/wesbos/vaxbot)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '720403278593afd0112e9a1f21bb83f7cd880538ba2eb6081071cc1e5e8622c2', 'hasty-treat-making-a-vaccine-bot-with-javascript', '/shows/359 - vaccine bot.md', '2023-10-16 20:07:31.879', '2023-10-27 15:57:59.708', 'HASTY'),
('syntax_podcast_show_00360', 360, 'Potluck - Immutability × Turning Off Your Brain × Types vs Interfaces × Hooks vs Components × Making the Most of Your First Job × Confidence in Svelte × More!', '2021-06-09 13:00:00.700', 'https://traffic.libsyn.com/syntax/Syntax360.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about immutability, turning off your brain, managing copy on a website, problem-solving, types vs interfaces, hooks vs components, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n01:24 - I\'m finally getting onboard with the GraphQL train and have a specific question about nomenclature. Having worked with redux in the past, IMMUTABILITY was a concept ingrained in my head. I continue to see benefits of immutable updates across all sorts of libraries, frameworks, vanilla js, etc. Learning about GraphQL now, I\'m taken aback by the fact that CUD (create, update, delete) operations are called MUTATIONS. Is there a reason that we use the \"mutation\" terminology, despite the fact that best practices dictate that we should implement immutable updates to objects? Does GraphQL actually mutate objects behind the scenes?\n\n06:38 - How do you sleep at night?!? I mean, how do you switch off your brain when you\'re trying to go to sleep and your brain just wants to keep on coding?\n\n12:15 - How do you manage copy and microcopy on a site? Should you put every piece of text across the entire site into a CMS so the client can change it? Or just the parts you think may be updated in the future? Or do you just hard-code everything directly into the markup? Or collect it all into an importable JSON file?\n\n21:41 - I am new to using CMSs and I was wondering for applications that require a lot of content management where a CMS or headless CMS such as Contentful is ideal but also requires dynamic queries such as recommended content to the end-user based on browsing history. How do you approach integrating the user data in combination with the data being received and handled from the CMS? A separate API and database? Or is this a scenario that a CMS doesn\'t fit? \n\n25:56 - When solving a problem, do you do it through trial and error? Or do you carefully think through every solution and choose the best one before actually implementing it into code?	\n\n28:14 - How can we take advantage of this new partnership between 1Password + SecretHub! I feel like this is getting into DotEnv but sounds so much more interesting.\n\n32:34 - When creating types in TypeScript, when should someone use a type over an interface? While I generally understand the differences, it seems like interfaces offer more flexibility. I am struggling to understand why I would ever use a type.\n\n36:34 - I\'ve recently started using TypeScript in React, and typically I\'m just using function components. I\'ve seen some people saying that classes are really great with TypeScript in React but I haven\'t found any real use case/benefits myself yet. How about you guys, do you use classes in React/TypeScript?\n\n38:17 - What are your opinions on generators like Yeoman?\n\n44:26 - I\'ve been looking for a career in web for a couple of years now and I\'ve recently landed a job with a small agency getting paid hourly making WordPress websites, that I\'ll be starting in two weeks. I\'m worried that I\'m going to get stuck pushing Divi sites all the time. I know this is a good opportunity for me but I was hoping you guys can shed some light and give me some tips on how I can put my skills to good use.\n\n48:35 - What are your approaches for caching a GraphQl API?\n\n52:30 - You mentioned in an earlier Potluck that Svelte is probably the easiest framework to learn. How confident can one be to start a new project with Svelte? Being a technical lead, can I propose our team to work with Svelte? Are there enough material/solution on the web and is the community established?\n\n## Links\n* [ZMA Supplement](https://www.webmd.com/vitamins-and-supplements/zma-supplements)\n* [Tina](https://tina.io/)\n* [https://twitter.com/gusfune/status/1372243283758419977](https://twitter.com/gusfune/status/1372243283758419977)\n* [1Password](https://1password.com/)\n* [SecretHub](https://secrethub.io/)\n* [TypeScript](https://www.typescriptlang.org/)\n* [Syntax 348: TypeScript Fundamentals — Getting a Bit Deeper](https://syntax.fm/show/348/typescript-fundamentals-getting-a-bit-deeper)\n* [Syntax 042: Potluck EP × Vue.js × Headless WP × Typescript & Flow × Productivity × Server Side Rendering × Yeoman](https://syntax.fm/show/042/potluck-ep-vue-js-headless-wp-typescript-and-flow-productivity-server-side-rendering-yeoman)\n* [https://www.npmjs.com/package/zx](https://www.npmjs.com/package/zx)\n* [Yeoman](https://yeoman.io/)\n* [Mercurius](https://mercurius.dev)\n* [Apollo](https://www.apollographql.com/)\n* [Svelte](https://svelte.dev/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Contigo Shake & Go](https://amzn.to/33sKd42)\n* Wes: [Deli Containers](https://amzn.to/3kSQmxh)\n\n## Shameless Plugs\n* Scott:\n  * 1: [Become a Level Up Tutorials Author](https://forms.gle/PDEpDAGZpNHBDVou5)\n  * 2: [Level Up Tutorials Pro Spring Sale](https://www.leveluptutorials.com/pro) - 50% off annual subscriptions!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '1dfec93de7c907367c2873558fb5c3fb365077143a13b8276095b2eeb8d70acc', 'potluck-immutability-turning-off-your-brain-types-vs-interfaces-hooks-vs-components-making-the-most-of-your-first-job-confidence-in-svelte-more', '/shows/360 - potluck.md', '2023-10-16 20:07:31.909', '2023-10-27 15:57:59.765', 'TASTY'),
('syntax_podcast_show_00361', 361, 'Hasty Treat - What is SvelteKit?', '2021-06-14 13:00:00.113', 'https://traffic.libsyn.com/syntax/Syntax361.mp3', '\nIn this Hasty Treat, Scott and Wes talk about SvelteKit — what it is and why you might want to use it.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:28 - What is it?\n* Total platform for building [Svelte](https://svelte.dev/) apps\n* Built in [Vite.js](https://vitejs.dev/)\n	* Includes all of the Vite goodness but it hides behind the scenes for the most part\n* Host anywhere\n\n05:16 - Is it CSR, SSR, SSG, WTF?!\n* All of the above. Uses adapters to control the output:\n```jsx\nkit: {\n		// hydrate the <div id=\"svelte\"> element in src/app.html\n		target: \'#svelte\',\n		adapter: adapter()\n}\n```\n\n09:45 - What you get out of the box\n* File-based routing\n* API routes\n* Layouts and layout resets\n* Fancy file titles [slug] __layout\n* Code splitting & preloading\n* [PostCSS](https://postcss.org/)\n* [TypeScript](https://www.typescriptlang.org/) support\n\n17:03 - Neat small things\n* Glob import\n* [https://github.com/svelte-add/svelte-add](https://github.com/svelte-add/svelte-add)\n\n## Links\n* [SvelteKit](https://kit.svelte.dev/)\n* [Next.js](https://nextjs.org/)\n* [Gatsby.js](https://www.gatsbyjs.com/)\n* [Sapper](https://sapper.svelte.dev/)\n* [tailwindcss](https://tailwindcss.com/)\n* [@chriscoyier](https://twitter.com/chriscoyier)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8b17ece799245c1f763e62a2f0664f9c15fd7e2acf1315632662cf241d043cef', 'hasty-treat-what-is-sveltekit', '/shows/361 - sveltekit.md', '2023-10-16 20:07:31.942', '2023-10-27 15:57:59.812', 'HASTY'),
('syntax_podcast_show_00362', 362, 'CSS Container Queries, Layers, Scoping and More with Miriam Suzanne', '2021-06-16 13:00:00.113', 'https://traffic.libsyn.com/syntax/Syntax362.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Miriam Suzanne about all things CSS — container queries, layers, scoping, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## RevenueCat - Sponsor\nRevenueCat makes it easy to build and manage iOS and Android in-app purchases. With a few lines of code, RevenueCat provides IAP infrastructure, customer analytics, data integrations, and gives you time back from dealing with edge cases and updates across the platforms. Created by developers, for developers, thousands of the world’s best apps use RevenueCat to power their in-app purchases and subscriptions. Get started for free at [revenuecat.com](https://www.revenuecat.com).\n\n## Guests\n* [Miriam Suzanne](https://www.miriamsuzanne.com/)\n\n## Show Notes\n02:21 - When did you come on board with container queries?\n\n10:27 - How would you declare specificity?\n* Layer example:\n```jsx\n@layer default;\n@layer theme;\n@layer components;\n\n@import url(theme.css) layer(theme);\n\n@layer default {\n  audio[controls] {\n    display: block;\n  }\n}\n```\n\n13:08 - What is your background?\n\n18:20 - What are container queries?\n\n22:06 - What is the background on contain? How does it work?\n* [https://developer.mozilla.org/en-US/docs/Web/CSS/contain](https://developer.mozilla.org/en-US/docs/Web/CSS/contain)\n\n29:25 - Is it still under development?\n* [https://www.igalia.com/open-prioritization/index](https://www.igalia.com/open-prioritization/index)\n\n33:51 - Have you tried the EQ polyfill from Johnathan Neal yet? \n\n35:21 - How far out are we? \n\n38:10 - What is Scope?\n\n44:00 - How will MQ and CQ work together?\n\n45:49 - Do you use inline and block?\n\n48:44 - What browser do you use?\n\n## Links\n* [OddBird](https://www.oddbird.net/)\n* [Susy](https://www.miriamsuzanne.com/projects/susy/)\n* [Jonathan Neal](https://jonneal.dev/)\n* [FireFox](https://www.mozilla.org/en-US/firefox/new/)\n* [Codepen](https://codepen.io/)\n* [https://github.com/w3c/csswg-drafts](https://github.com/w3c/csswg-drafts) \n* [https://twitter.com/TerribleMia](https://twitter.com/TerribleMia)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Reelgood](https://reelgood.com/)\n* Wes: [Embroidery machine](https://www.brother-usa.com/products/se600)\n\n## Shameless Plugs\n* Miriam: [OddBird](https://www.oddbird.net/)\n* Scott:\n  * 1: [SvelteKit](https://www.leveluptutorials.com/pro)\n  * 2: [Level Up Tutorials Pro Spring Sale](https://www.leveluptutorials.com/pro) - 50% off annual subscriptions!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c064da0c93a88fa477fe30da847b89e2d71ae56f5e293c806bd5073b94a3807d', 'css-container-queries-layers-scoping-and-more-with-miriam-suzanne', '/shows/362 - miriam suzanne.md', '2023-10-16 20:07:31.984', '2023-10-27 15:57:59.875', 'TASTY'),
('syntax_podcast_show_00363', 363, 'Hasty Treat - CSRF Explained', '2021-06-21 13:00:00.183', 'https://traffic.libsyn.com/syntax/Syntax363.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSRF (Cross Site Request Forgery)!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n05:40 - What is it?\n* [https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute)\n* Someone can submit a form FROM or TO your domain, automatically. \n\n07:50 - Solutions\n* SameSite Cookie\n* [https://medium.com/swlh/secure-httponly-samesite-http-cookies-attributes-and-set-cookie-explained-fc3c753dfeb6](https://medium.com/swlh/secure-httponly-samesite-http-cookies-attributes-and-set-cookie-explained-fc3c753dfeb6)\n  * Lax — Default value in modern browsers. Cookies are allowed to be sent with top-level navigations and will be sent along with GET requests initiated by a third party website. The cookie is withheld on cross-site subrequests, such as calls to load images or frames, but is sent when a user navigates to the URL from an external site, such as by following a link.\n  * Strict — As the name suggests, this is the option in which the Same-Site rule is applied strictly. Cookies will only be sent in a first-party context and not be sent along with requests initiated by third party websites. The browser sends the cookie only for same-site requests (that is, requests originating from the same site that set the cookie). If the request originated from a different URL than the current one, no cookies with the SameSite=Strict attribute are sent.\n  * None — Cookies will be sent in all contexts, i.e sending cross-origin is allowed. The browser sends the cookie with both cross-site and same-site requests.\n* CSRF Token\n* Check Origin / Referrer Headers\n* Captcha\n* Ask for Password\n* Token\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'bf1fc014448d12e923f10ffd22a484139fa9346ccaa7e249d2b0798fd2eb8254', 'hasty-treat-csrf-explained', '/shows/363 - CSRF.md', '2023-10-16 20:07:32.171', '2023-10-27 15:58:00.006', 'HASTY'),
('syntax_podcast_show_00364', 364, 'Potluck - Web components × Gear × Docker × Web Dev Frameworks × Golden Handcuffs × Browser Testing × SSR React × Code Prediction × More!', '2021-06-23 13:00:00.183', 'https://traffic.libsyn.com/syntax/Syntax364.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about web components, gear, Docker, web dev frameworks, golden handcuffs, browser testing, SSR React, code prediction, and more!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n04:08 - Is there a mechanism for exporting a React/Vue/Svelte component as a web component?\n\n11:42 - You guys chat a lot about your sweet gear and desk setups. As a newcomer to web development it\'s all a little expensive for me to mimic what you have; at least before I\'ve learned enough to justify investing in better equipment. My question is: what are the minimum specs (laptop/monitor/etc) you would recommend a beginner just starting out in webdev?\n\n22:35 - I rarely, if ever, hear you guys or any other web dev related podcast mentioned Python, Flask, Django etc. Do you have any experience with those frameworks and can you give any thoughts you may have on Python as a language for back end development.\n\n26:47 - What do you think of using Docker containers to do development work? I have seen a couple articles talking about it, but it doesn\'t seem super common to use since few GitHub projects have Dockerfiles in their repos. \n\n32:19 - I\'ve often heard you two talk about the idea of the \"golden handcuffs\", where a job pays well, but the employees are miserable. I think I might be in that situation right now. I\'ve tried organizing my day so my time is better segmented. I can\'t tell if this is the natural progression of a developer advancing in their career and I just need to adjust better, or if I need to make a change. Any advice or tips you have to better manage time or decide what\'s next would be much appreciated.\n\n37:28 - When it comes to desktop browser testing, is there a difference anymore is browser rendering engines? Do most (if not all) browsers use Google\'s rendering engine?\n\n39:20 - As someone who got into the industry relatively recently (around 2019), component frameworks and single-page applications were my introduction to web development. I am now really interested in learning more about the \"traditional\" way of doing things, 100% server-rendered. What\'s my recourse here? Ruby on Rails, Laravel, something else? Is there an agreed upon \"modern\" way to do a server-rendered monolithic app?\n\n43:43 - I wish to ask the kind of plug-in, extensions or stand-alone software you use for code prediction and to help you code faster. I personally use Kite and VS Code\'s intellisense, it seems to get it wrong more times than right. Do both of you have any recommendation?\n\n47:18 - Is there any benefit to using prop types in TypeScript for React projects?\n\n48:14 - I\'m currently planning to build an audio-focused app (maybe even more than one actually), and I\'ve been wondering how you would solve the problem of storing and fetching (on-demand) hundreds, perhaps thousands, of little audio-files. I\'ve got some deep reservations against AWS, although I\'m somewhat familiar with it - the complexity, hidden (and hard to estimate) costs etc. I\'m thinking about Digital Ocean or something like that. Would it be too hard to implement things like caching and such yourself. Any thoughts?\n\n## Links\n* [https://www.npmjs.com/package/react-to-webcomponent](https://www.npmjs.com/package/react-to-webcomponent)\n* [https://medium.com/dev-channel/a-netflix-web-performance-case-study-c0bcde26a9d9](https://medium.com/dev-channel/a-netflix-web-performance-case-study-c0bcde26a9d9)\n* [LearnNode.com](https://learnnode.com/)\n* [Transistor.fm](https://transistor.fm/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [A Death In Cryptoland Podcast](https://www.cbc.ca/listen/cbc-podcasts/904-a-death-in-cryptoland)\n* Wes: [Affinity Designer](https://affinity.serif.com/en-us/designer/)\n\n## Shameless Plugs\n* Scott: [Svelte Kit](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner JavaScript Notes](https://wesbos.com/javascript)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '99dcc27622243f335f756ae62ecc84aa44fd3bfd079053dbac32d6c4fe9704b2', 'potluck-web-components-gear-docker-web-dev-frameworks-golden-handcuffs-browser-testing-ssr-react-code-prediction-more', '/shows/364 - potluck.md', '2023-10-16 20:07:32.238', '2023-10-27 15:58:00.057', 'TASTY'),
('syntax_podcast_show_00365', 365, 'Hasty Treat - Seven Interesting JavaScript Proposals - Async Do, JSON Modules, Immutable Array Methods, and More!', '2021-06-28 13:00:00.043', 'https://traffic.libsyn.com/syntax/Syntax365.mp3', '\nIn this Hasty Treat, Scott and Wes talk about seven new JavaScript proposals — what they do, where they\'re at, and how you might use them.\n\n## Deque - Sponsor\nDeque’s axe DevTools makes accessibility testing easy and doesn’t require special expertise. Find and fix issues while you code. Get started with a free trial of axe DevTools Pro at [deque.com/syntax](https://www.deque.com/syntax). No credit card needed.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:32 - Seven new JavaScript proposals\n* [https://github.com/tc39/proposals](https://github.com/tc39/proposals)\n\n06:25 - JSON Modules \n* [https://github.com/tc39/proposal-json-modules](https://github.com/tc39/proposal-json-modules)\n* Builds on the import assertions\n* No named exports\n* Not executed, to avoid security issues\n* Not in Node yet\n\n09:55 - Array Find From Last\n* [https://github.com/tc39/proposal-array-find-from-last](https://github.com/tc39/proposal-array-find-from-last)\n* The problem: you need to group together async code.The only way to do that right now is to wrap it in a function.\n\n11:40 - Async Do\n* [https://github.com/tc39/proposal-async-do-expressions](https://github.com/tc39/proposal-async-do-expressions) \n* Async do will allow you to group together a block of code and mark it as async.\n* No need for an iife\n* Downside to this is that it\'s a code block, so if you need to return any values, you\'ll need to jump that up a scope level.\n\n```jsx\nPromise.all([\n  async do {\n    let result = await fetch(\'thing A\');\n    await result.json();\n  },\n  async do {\n    let result = await fetch(\'thing B\');\n    await result.json();\n  },\n]).then(([a, b]) => console.log([a, b]));\n```\n\n14:33 - Change Array By Copy\n* [https://github.com/tc39/proposal-change-array-by-copy](https://github.com/tc39/proposal-change-array-by-copy)\n* Like old array methods, but returns a new array rather than mutating\n\n17:48 - Temporal\n* [https://github.com/tc39/proposal-temporal](https://github.com/tc39/proposal-temporal) \n* Stage 3, looking good!\n* Amazing, large, very good Date API\n* [Syntax 295: Hasty Treat — Temporal Date Objects in JavaScript](https://syntax.fm/show/295/hasty-treat-temporal-date-objects-in-javascript)\n\n18:35 - As Patterns\n* [https://github.com/zkat/proposal-as-patterns](https://github.com/zkat/proposal-as-patterns) \n* Scott don\'t get it\n* Stage 0\n* when ([ \'go\', (\'north\' | \'east\' | \'south\' | \'west\') as dir ]) { … }\n\n20:47 - Pattern Matching\n* [https://github.com/tc39/proposal-pattern-matching](https://github.com/tc39/proposal-pattern-matching)\n* VERY Rust-like\n  * [https://doc.rust-lang.org/1.6.0/book/patterns.html](https://doc.rust-lang.org/1.6.0/book/patterns.html)\n* Stage 1\n\n```jsx\n<Fetch url={API_URL}>\n  {props => match (props) {\n    when ({ loading }) { <Loading />; }\n    when ({ error }) { <Error error={error} />; }\n    when ({ data }) { <Page data={data} />; }\n  }}\n</Fetch>\n```\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '70a9cc4975ec05a154108f66ab9d49a333f23e678666795a365d8847ae8c7109', 'hasty-treat-seven-interesting-javascript-proposals-async-do-json-modules-immutable-array-methods-and-more', '/shows/365 - js proposals.md', '2023-10-16 20:07:32.299', '2023-10-27 15:58:00.110', 'HASTY'),
('syntax_podcast_show_00366', 366, 'Dev Tools Power — Elements Tab', '2021-06-30 13:00:00.043', 'https://traffic.libsyn.com/syntax/Syntax366.mp3', '\nIn this episode of Syntax, Scott and Wes talk about the Dev Tools Elements Tab — all the features, and when you would use them!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n03:13 - Elements\n* Learn to open the Elements panel and the console right away — right-click inspect element is weak!\n* Drag-and-drop elements\n* Edit as HTML\n* Click to select use in JS console\n  * $0 →\n* Add Attribute\n* Breadcrumbs\n* Flex (Chrome now!)\n* Break on → Node removal\n* Scroll into view\n* Expand / Collapse\n\n16:59 - Styles\n* :hov\n* .cls\n* Element style\n* Layout - Box Model\n* Layout - Grid\n* Layout - Flexbox\n* Toggle Print/Light/Dark\n\n25:03 - Panel\n* Escape to open close\n* No longer has to be JUST Console\n* Computed Styles\n  * Great to find out what value it\'s actually using without scrolling through the cascade\n  * Toggle browser styles on and off\n* Fonts Tab\n  * Super handy to find the used font, spacing, size, weight, etc.\n  * You can also see all fonts used on a page\n* Animations Tab\n* Changes\n  * Shows the CSS that has changed since you have been goofing around.\n\n38:18 - Settings\n* Show what\'s new\n* [https://chrome.google.com/webstore/detail/material-devtools-theme-c/jmefikbdhgocdjeejjnnepgnfkkbpgjo](https://chrome.google.com/webstore/detail/material-devtools-theme-c/jmefikbdhgocdjeejjnnepgnfkkbpgjo)\n* Experiments\n\n43:39 - Compatibility\n\n## Links\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/)\n* [Chrome Canary](https://www.google.com/chrome/canary/)\n* [Brave](https://brave.com/)\n* [Can I Use](https://caniuse.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Problematic Roller Coasters](https://www.youtube.com/watch?v=x_j0p_0Lvao&list=PL-gC-PDnDt6SAt8sPgFjghDkRt4yWQ_Qt)\n* Wes: [Scrapyard Finds! Repair-A-Thon! Cordless Tools Galore!](https://www.youtube.com/watch?v=bHeii834ujs)\n\n## Shameless Plugs\n* Scott: [Svelte Kit](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '62a5a7b8c34e03cab4c25afb9aacdda0a5c4f22f2fae96770a1605440696f93c', 'dev-tools-power-elements-tab', '/shows/366 - dev tools.md', '2023-10-16 20:07:32.360', '2023-10-27 15:58:00.159', 'TASTY'),
('syntax_podcast_show_00367', 367, 'Hasty Treat - JavaScript Event Buzzwords — Sync, Concurrent, Defer, Blocking, Workers', '2021-07-05 13:00:00.210', 'https://traffic.libsyn.com/syntax/Syntax367.mp3', '\nIn this Hasty Treat, Scott and Wes define some JavaScript Buzzwords and talk about what they mean!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:24 - Synchronous / Async\n\n05:23 - Multi-threaded\n* JavaScript has a single \"main thread\"\n* But you can have more threads with web workers\n\n08:12 - Blocking\n* JavaScript can stop other things on the page from running\n* A script tag can block HTML from being parsed\n* Most stuff in JavaScript is non-blocking\n* Node.js write to filesystem can be blocking\n\n10:27 - Concurrent + Parallel\n* JavaScript start/stop are concurrent\n* The API runs on a different thread\n* Doesn\'t REALLY matter\n* [https://joearms.github.io/published/2013-04-05-concurrent-and-parallel-programming.html](https://joearms.github.io/published/2013-04-05-concurrent-and-parallel-programming.html)\n\n13:22 - Consecutive / Waterfall\n* One after another\n\n13:48 - Callback\n* A function to run when this thing *happens* or *is done*\n* Click event callback\n* Websocket on data callback\n  * Like a tweet stream\n* Data fetch callback\n  * Almost entirely replaced with  async + await\n* [http://callbackhell.com/](http://callbackhell.com/)\n* [https://caolan.github.io/async/v3/](https://caolan.github.io/async/v3/)\n\n17:56 - Script Tag Async + Defer\n* Doesn\'t block other content\n* Runs when ready - doesn\'t care about DOMcontentLoaded\n* Wait until the page is loaded before running\n* If the script tag is above content, don\'t wait for it\n* Good for things that aren\'t called on page load\n\n21:54 - Lazy\n* Load it in later - maybe when it\'s scrolled into view, or as needed\n* Not mission-critical\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c2fcb335d1284db4f61834057452f8ac31e1e73aa5495e15cddf8cd033784674', 'hasty-treat-javascript-event-buzzwords-sync-concurrent-defer-blocking-workers', '/shows/367 - js buzz words.md', '2023-10-16 20:07:32.425', '2023-10-27 15:58:00.210', 'HASTY'),
('syntax_podcast_show_00368', 368, 'Syntax Highlight — We Review Your Portfolios', '2021-07-07 13:00:00.210', 'https://traffic.libsyn.com/syntax/Syntax368.mp3', '\nIn this episode of Syntax, Scott and Wes review your portfolios!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n03:59 - [cudd.io](https://cudd.io/)\n* Shared component animation between home / about really nice\n* Readable, clear\n* Simple\n* Check the contrast ratio on the white text on light blue: [https://coolors.co/contrast-checker/ffffff-56ccf2](https://coolors.co/contrast-checker/ffffff-56ccf2)\n* Nice SSR from [Next.js](https://nextjs.org/)\n* CSS vars\n* Very tall cards without much text, looks like a mistake\n* Better on a short browser window - peep the tall and skinny\n* Card heading should be h3 or h4\n\n10:35 - [damonbolesta.com](https://damonbolesta.com/)\n* Nice design = super fun!\n* Good color palette\n* Shows your skills straight up\n* Animation\n* Not accessible - EASY fixes with [Axe Dev Tools](https://www.deque.com/axe/devtools/)\n* Text on background images hard to read\n* White text on buttons\n* Bold some words in your bio\n* Border radius\n\n21:52 - [walterkjenkins.com](https://www.walterkjenkins.com/)\n* Map is fun\n* Contrast issues with the color choices\n* Transparency not needed on body content\n* Cursive font for links / buttons is a no for me dog\n* Labels on social media icons\n* Hero overlaps section below it\n* Maps data processing should be h4\n\n29:40 - [suhit.me](https://suhit.me/)\n* This is an example of a really good one\n* Wicked domain name\n* Design is ON POINT, like this is the type of polish I like to see - I\'d hire on this\n* Can\'t get enough [Inter font](https://fonts.google.com/specimen/Inter)\n* Fun little animation\n* I\'d go a little easier on the box-shadow\n* Github even has a custom readme\n* Resume\n  * Very modern - JS, TS, Bootstrap\n  * TypeScript A+\n  * Drop the \"5\" and \"3\" from \"HTML\" and \"CSS\"\n  * I\'d add color to the resume, its likely not printed\n  * Don\'t need to say Github and LinkedIn in front of the URLs\n\n37:20 - [jacobpawlak.com](https://jacobpawlak.com/)\n* Initial loading is great - transitions are hot\n* Typography looks nice - not sure about those serif all-cap nav items\n* Slider not very usable\n* View circle on hover is cool, but I\'m not sure about following your mouse, covers text\n* T-shirt portfolio is awesome\n* Fun little bits in the footer\n* SSL is broken - fix that sh!t\n* Links don\'t show over background images - common issue today\n* External links should probably be indicated as such\n* HTML, paragraphs as h3 & h4, h5, should be <p> - (i.e. \"here are a few of my recently completed...\" should be a <p>)\n* Design of resume is KEY - different colors, eh?\n\n47:04 - [mrtnvh.com](https://mrtnvh.com/)\n* This is a good example of subtle flex of skills\n* FAST AF\n* Makes you say \"Ohhhh\" when you click a link (something that\'s missing from a lot of these single page sites)\n* Personal Photo A+\n* Position sticky\n* Love the skills layout on the about page\n* Email is a button\n  * I can\'t copy your email\n  * We have mailto links - don\'t reinvent\n* A+\n\n## Links\n* [Top Chef](https://www.bravotv.com/top-chef)\n* [Syntax 354: The Surprisingly Exciting World of HTML Elements](https://syntax.fm/show/354/the-surprisingly-exciting-world-of-html-elements)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [What Had Happened Was Podcast](https://starburns.audio/podcasts/what-had-happened-was/)\n* Wes: [WAGO Lever-Nuts](https://www.amazon.com/s?k=wago+lever+connectors)\n\n## Shameless Plugs\n* Scott: [Building Svelte Components](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '222f07332ac4a8c34ccc2f87f0c6914ff3cb76d2674477b46a6323733d833986', 'syntax-highlight-we-review-your-portfolios', '/shows/368 - syntax highlight.md', '2023-10-16 20:07:32.462', '2023-10-27 15:58:00.258', 'TASTY'),
('syntax_podcast_show_00369', 369, 'Hasty Treat - Vite + Parcel 2', '2021-07-12 13:00:00.216', 'https://traffic.libsyn.com/syntax/Syntax369.mp3', '\nIn this Hasty Treat, Scott and Wes talk about modern build tools, comparisons between them, and makes them modern and next-level.\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:08 - Next Gen Bundlers are here!\n* They are easy\n* They are fast\n* They are bundlers\n* They are code splitters\n* They are dev environments\n* HMR / Fast Refresh\n\n07:13 - What do they use under the hood?\n  * Parcel uses SWC (Rust)\n  * Vite uses esbuild (Go)\n\n10:29 - How do you use them?\n1. Usually point your app at an HTML file\n2. Your HTML file has an ES module\n3. It then goes and loads everything from there\n4. They have adaptors for different types of files\n    * CSS\n    * Images\n    * Etc.\n* You can also point it directly at files\n\n14:59 - Common use-cases\n* React / JSX\n  * OOTB\n* Vue\n* Svelte\n* TypeScript\n  * Both just work\n* Custom Babel config\n  * Plugins for both\n* Sass\n  * Vite: Detects it, asks to install it\n  * Parcel: Detects it, installs it for you\n* PostCSS Processors\n\n20:29 - Custom API\n* Both have a custom API or \"plugins\", which you can integrate into your app or tooling if needed.\n* Example use-case: a really nice WordPress dev package.\n\n20:57 - Which one?\n* Both are really good!\n* Parcel 2 has been in dev for 2+ years - unsure when it will launch.\n* Wes: In my experience Vite \"just works\" a bit better. Might be a side effect of Parcel being in dev. \n* Both are wicked fast. (Wes: I literally screen recorded JS and CSS updates ~ 10 ms difference either way.)\n* Life is good!\n\n## Links\n* [Top Chef](https://www.bravotv.com/top-chef)\n* [Master Chef](https://www.fox.com/masterchef/)\n* [Snowpack](https://www.snowpack.dev/)\n* [Webpack](https://webpack.js.org/)\n* [Parcel](https://v2.parceljs.org/)\n* [SWC](https://swc.rs/)\n* [Vite](https://vitejs.dev/)\n* [esbuild](https://esbuild.github.io/)\n* [Rollup](https://rollupjs.org/guide/en/)\n* [SvelteKit](https://kit.svelte.dev/)\n* [Strapi](https://strapi.io/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '62df75187ac7bd770df4c5aefb7255a6cfefdde561c6ffe54441238de2746492', 'hasty-treat-vite-parcel-2', '/shows/369 - vite.md', '2023-10-16 20:07:32.532', '2023-10-27 15:58:00.308', 'HASTY'),
('syntax_podcast_show_00370', 370, 'React 18 - A Look Ahead', '2021-07-14 13:00:00.216', 'https://traffic.libsyn.com/syntax/Syntax370.mp3', '\nIn this episode of Syntax, Scott and Wes talk about everything coming in React 18!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## RevenueCat - Sponsor\nRevenueCat makes it easy to build and manage iOS and Android in-app purchases. With a few lines of code, RevenueCat provides IAP infrastructure, customer analytics, data integrations, and gives you time back from dealing with edge cases and updates across the platforms. Created by developers, for developers, thousands of the world’s best apps use RevenueCat to power their in-app purchases and subscriptions. Get started for free at [revenuecat.com](https://www.revenuecat.com).\n\n## Show Notes\n04:32 - Automatic Batching\n* Don\'t worry about re-renders \n\n08:32 - New Render API\n```jsx\nconst root = ReactDOM.createRoot(document.getElementById(\'root\'));\nroot.render(<App />);\n```\n* No more hydrate method (yay!)\n\n10:44 - Suspense\n```jsx\n<Suspense fallback={<Spinner />}>\n        <ProfilePage resource={resource} />\n      </Suspense>\n```\n* Suspense is basically a promise resolver component - nothing inside will render until promise is resolved.\n* SuspenseList lets you coordinate the order in which loading indicators show up.\n\n16:43 - StrictEffects Mode\n* [https://github.com/reactwg/react-18/discussions/19](https://github.com/reactwg/react-18/discussions/19)\n* Will allow components to mount, unmount, and mount again\n* Will help with fastrefresh and really good dev experience\n\n18:43 - useTransition() Hook\n* Not an animation hook. They named it this because of the future ability to add animations to React core. \n* Wrap the state update in a \"transition\" to prevent the ProfilePage from being unmounted while suspending. This lets React know that it should wait for the update to complete.\n* We classify state updates in two categories:\n  * Urgent updates reflect direct interaction, like typing, hover, dragging, etc.\n  * Transition updates transition the UI from one view to another.\n\n23:11 - SSR Improvements\n* React.Lazy will work on the Server\n* Finally!\n* [https://github.com/reactwg/react-18/discussions/37](https://github.com/reactwg/react-18/discussions/37) \n* Server-side rendering (abbreviated to “SSR” in this post) lets you generate HTML from React components on the server, and send that HTML to your users. **SSR lets your users see the page’s content before your JavaScript bundle loads and runs.**\n* React Server Components\n\n34:45 - ELI5\n* [https://github.com/reactwg/react-18/discussions/46](https://github.com/reactwg/react-18/discussions/46)\n\n36:37 - Next.js\n* Next.js will probably have support for a lot of these features soon.\n\n## Links\n* [https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)\n* [https://dev.to/cassidoo/react-18-alpha-is-out-now-what-2apj](https://dev.to/cassidoo/react-18-alpha-is-out-now-what-2apj)\n* [https://github.com/reactwg/react-18](https://github.com/reactwg/react-18) \n* [https://github.com/reactwg/react-18/discussions](https://github.com/reactwg/react-18/discussions)\n* [Svelte](https://svelte.dev/)\n* [Syntax 127: Hasty Treat - React Suspense](https://syntax.fm/show/127/hasty-treat-react-suspense)\n* [Deno](https://deno.land/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [SoundSource App](https://rogueamoeba.com/soundsource/)\n* Wes: [The Changelog 443: Exploring Deno Land](https://changelog.com/podcast/443)\n\n## Shameless Plugs\n* Scott: [Building Svelte Components](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner JavaScript](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b0e03bce8857d61e6500148e6f414e1c22da08660b599f67eae92828d69f80a6', 'react-18-a-look-ahead', '/shows/370 - react 18.md', '2023-10-16 20:07:32.588', '2023-10-27 15:58:00.357', 'TASTY'),
('syntax_podcast_show_00371', 371, 'Hasty Treat - Stylelint for Linting CSS', '2021-07-19 13:00:00.669', 'https://traffic.libsyn.com/syntax/Syntax371.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Stylelint, what it is and why you should use it!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:15 - What is a linter anyway? Why do you want to lint your CSS?\n* Does stylelint fix errors or just tell you errors?\n\n04:42 - Getting setup \n* .stylelintrc\n* stylelint extension\n* Sass \n* High perf animations\n* stylelint order\n* Max nesting depth\n* Declaration strict value\n\n```jsx\n{\n	\"extends\": [\n		\"stylelint-config-standard\",\n		\"stylelint-config-sass-guidelines\"\n	],\n	\"plugins\": [\n		\"stylelint-high-performance-animation\",\n		\"stylelint-declaration-strict-value\",\n		\"stylelint-order\"\n	],\n	\"rules\": {\n		\"selector-no-qualifying-type\": [\n			true,\n			{\n				\"ignore\": [\n					\"attribute\"\n				]\n			}\n		],\n		\"plugin/no-low-performance-animation-properties\": [\n			true,\n			{\n				\"ignoreProperties\": [\n					\"color\",\n					\"background-color\",\n					\"box-shadow\"\n				]\n			}\n		],\n		\"indentation\": \"tab\",\n		\"order/order\": [\n			\"custom-properties\",\n			\"declarations\"\n		],\n		\"order/properties-alphabetical-order\": null,\n		\"declaration-block-no-duplicate-custom-properties\": true,\n		\"declaration-empty-line-before\": null,\n		\"scale-unlimited/declaration-strict-value\": [\n			[\n				\"/color$/\",\n				\"z-index\",\n				\"font-size\"\n			]\n		],\n		\"scss/dollar-variable-pattern\": \"^[a-z][a-zA-Z0-9]+$\",\n		\"max-nesting-depth\": 3,\n		\"selector-pseudo-class-no-unknown\": null\n	}\n}\n```\n\n## Links\n* [https://github.com/stylelint/awesome-stylelint](https://github.com/stylelint/awesome-stylelint)\n* [JSLint](https://www.jslint.com/)\n* [JSHint](https://jshint.com/)\n* [ESLint](https://eslint.org/)\n* [VS Code](https://code.visualstudio.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '52d03bf478e6d845eedb2ff2f1645aede11bb9e78ad47ae303bbad793c42c6ed', 'hasty-treat-stylelint-for-linting-css', '/shows/371 - CSS linting.md', '2023-10-16 20:07:32.629', '2023-10-27 15:58:00.406', 'HASTY'),
('syntax_podcast_show_00372', 372, 'Potluck - Svelte × Bleeding-Edge Tech × Git Process × Screencasts × Government Jobs × Permissions-Based APIs × Rescript × More!', '2021-07-21 13:00:00.669', 'https://traffic.libsyn.com/syntax/Syntax372.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about Svelte, bleeding-edge tech, best Git processes, Create React App, screencast software, FitBit API, government jobs, Syntax sponsors, and more!\n\n## .TECH Domains - Sponsor\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n03:15 - I was wondering what you guys think about using the latest of Svelte (svelte-next) in serious projects? Does the improved devEx makes up for the small (but growing) community and lack of libraries? Do you think svelte-next is here to stay or maybe we will get a revamp that breaks backward compatibility in a couple of years, like svelte 2 -> svelte 3?\n\n8:48 - Git question: My process is often that I want to be able to use my last project as a starting point for my next project, with the new project having absolutely no connection or relationship to the old project. What steps can I take to completely sever any ties to the old project? Bonus question: In the new project I would love to eliminate all commits from the old project and start the new project having just one commit, the initial commit with all the code from the old project.	\n\n11:05 - Is CRA still useful for building actual production-level web apps these days? People seem to be reaching for Next or Gatsby most of the time, and I feel CRA is mainly used for actually learning React/building personal small websites. Your thoughts? Also, for normal CSR, I feel it is better to use something like Next, and fetch data inside your component (eg: for a dashboard) rather than building one with CRA. Am I wrong?\n\n19:40 - What are your favorite screencast tools? (Linux? Mac? Windows?)\n\n25:53 - Is it a bad trait for beginners to “give up” easily? By that, I mean instead of taking the time to think of the answer to a problem, they would instead rely on googling the solution and try to understand how it worked afterward.\n\n27:55 - In pursuit of better health I want to track my weight daily using a smart digital scale. The idea is to automate the process of logging my own weight (e.g. stepping on the scale will update my Apple Health and any other integrations I have). After some searching around I landed on the Aria Air (mostly because I like the design and it has the coolest name). One small problem - it does not sync with Apple Health as it is a product from FitBit. They have an API so I\'m thinking about running a serverless function daily, around 8 a.m. after I weigh in, to hit the FitBit API, get the data and push it to Apple Health. This way I can stay in the Apple eco-system whilst happily getting this nice, aesthetic digital scale. Any thoughts on how you would personally implement something like this? P.S. My girlfriend thinks I\'m crazy, but I know the tinkerer inside Wes will love this.\n\n30:26 - I work for the government with good pay and benefits and love where I work, but I feel like I’m missing out. Working in government we are not always working on the bleeding edge of technology. I do try and learn on my own, but it’s hard sometimes if I don’t put it into practice. I do peek at other job openings and get excited about the tech stack and the things they\'re doing. I\'m just afraid if I leave I won’t have the stability and benefits I would get from working in government. Any tips or thoughts would be appreciated.\n\n34:24 - Unpopular opinion: Authentication isn\'t that hard, but authorization is! What systems have you built to handle when users with specific permissions are allowed (or disallowed) to take actions within your system? What advice would you give to other developers developing permissions-based APIs, assuming their users can have 5-10 different levels of permissions?	\n\n40:21 - What are your thoughts on ReScript as an alternative to TypeScript?	\n\n44:43 - How come you guys moved to two sponsors on a Hasty and three on a Tasty? Not that it\'s a big deal - was just curious of it was to keep up with costs or just because you could and then you’d make more? Either way, the show is awesome and really appreciate your opinions on everything!\n\n48:01 - Have you tried Angular 12? I’d think you’d be pleasantly surprised if you gave it a chance!\n\n52:20 - I have to copy and paste hundreds of products with six rows of details from a spreadsheet into a web interface because there is no API or CSV upload function for this program. Any recommendation on how to automate data entry into web inputs, navigate pages / click buttons, and toggle between applications? BTW, I scored my first web developer job and have to give you guys credit for steering me in the right direction.\n\n## Links\n* [Svelte](https://svelte.dev/)\n* [Create React App](https://reactjs.org/docs/create-a-new-react-app.html)\n* [Next.js](https://nextjs.org/)\n* [Vercel](https://vercel.com/)\n* [iShowU](https://shinywhitebox.com/)\n* [Descript](https://www.descript.com/)\n* [Screenflow](https://www.telestream.net/screenflow/)\n* [Aria Air](https://www.fitbit.com/global/us/products/scales/aria-air)\n* [FitBit](https://www.fitbit.com/global/us/home)\n* [Apple Health](https://www.apple.com/ios/health/)\n* [https://www.gov.uk/](https://www.gov.uk/)\n* [Keystone](https://keystonejs.com/)\n* [rescript](https://rescript-lang.org/)\n* [TypeScript](https://www.typescriptlang.org/)\n* [Angular](https://angular.io/)\n* [Syntax 359: Hasty Treat - Making a Vaccine Bot with JavaScript](https://syntax.fm/show/359/hasty-treat-making-a-vaccine-bot-with-javascript)\n* [Puppeteer](https://pptr.dev/)\n* [uses.tech](https://uses.tech)\n* [wes.tech](https://wes.tech)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [SvelteKit](https://kit.svelte.dev/)\n* Wes: [Wyze Sprinkler Controller](https://wyze.com/wyze-sprinkler.html)\n\n## Shameless Plugs\n* Scott: [Svelte Components Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '826995b60fbd6a76441c13b022f4794c68ae953dff286a89bfe777259c4e102c', 'potluck-svelte-bleeding-edge-tech-git-process-screencasts-government-jobs-permissions-based-apis-rescript-more', '/shows/372 - potluck.md', '2023-10-16 20:07:32.670', '2023-10-27 15:58:00.453', 'TASTY'),
('syntax_podcast_show_00373', 373, 'Hasty Treat - The Surprisingly Exciting World of Favicons', '2021-07-26 13:00:00.833', 'https://traffic.libsyn.com/syntax/Syntax373.mp3', '\nIn this Hasty Treat, Scott and Wes talk about favicons. Favicons are a bit of mystery and something people don\'t talk about that often. \n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:48 - What are favicons?\n* Requesting favicons by default /favicon.ico\n```\n<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/apple-icon-57x57.png\">\n<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/apple-icon-60x60.png\">\n<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/apple-icon-72x72.png\">\n<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/apple-icon-76x76.png\">\n<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/apple-icon-114x114.png\">\n<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/apple-icon-120x120.png\">\n<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/apple-icon-144x144.png\">\n<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/apple-icon-152x152.png\">\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-icon-180x180.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\"  href=\"/android-icon-192x192.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/manifest.json\">\n<meta name=\"msapplication-TileColor\" content=\"#ffffff\">\n<meta name=\"msapplication-TileImage\" content=\"/ms-icon-144x144.png\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n```\n\n07:38 - Sizing favicons\n* 16x16 is OG - don\'t do that now\n* You can specify multiple sizes\n\n09:41 - File formats\n* .ico files\n* .png favicons\n\n13:40 - Animated favicons\n* Canvas Base64\n\n11:36 - SVG favicons\n\n17:19 - Dark mode favicons\n\n18:55 - App Coloring\n* `<meta name=\"theme-color\" content=\"#ffffff\">`\n* Isn\'t there a new Safari version?\n\n## Links\n* [https://en.wikipedia.org/wiki/Favicon](https://en.wikipedia.org/wiki/Favicon)\n* [https://caniuse.com/](https://caniuse.com/)\n* [https://keycode.info/](https://keycode.info/)\n* [https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/icons](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/icons) \n* [https://fav.farm/](https://fav.farm/)\n* [https://deno.land/](https://deno.land/)\n* [https://uses.tech/](https://uses.tech/)\n* [Missive](https://missiveapp.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'ee06af2b0a11bb92f3bb906ebce58ba0ec9bb4096df8138a3f8dfdc9bc2786c0', 'hasty-treat-the-surprisingly-exciting-world-of-favicons', '/shows/373 - favicons.md', '2023-10-16 20:07:32.713', '2023-10-27 15:58:00.502', 'HASTY'),
('syntax_podcast_show_00374', 374, 'ShopTalk x Syntax', '2021-07-28 13:00:00.833', 'https://traffic.libsyn.com/syntax/Syntax374.mp3', '\nIn this episode of Syntax, Scott and Wes do a collaboration with Chis Coyier and Dave Rupert from ShopTalk Show! They talk about favorite tech stacks, podcasting, learning new tech, dealing with FOMO, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n07:23 - What\'s your favorite stack right now?\n\n28:52 - What are your thoughts on WordPress? Do you still use it?\n\n33:59 - What do you want for listeners of Syntax?\n\n38:21 - How do you deal with FOMO / the pressure to learn new tech?\n\n## Links\n* [https://shoptalkshow.com/469/](https://shoptalkshow.com/469/)\n* [Chris Coyier](https://chriscoyier.net/)\n* [Dave Rupert](https://daverupert.com/)\n* [Syntax 372: CSS Container Queries, Layers, Scoping and More with Miriam Suzanne](https://syntax.fm/show/362/css-container-queries-layers-scoping-and-more-with-miriam-suzanne)\n* [https://svelte.dev/](https://svelte.dev/)\n* [https://kit.svelte.dev/](https://kit.svelte.dev/)\n* [https://mercurius.dev/](https://mercurius.dev/)\n* [https://www.prisma.io/](https://www.prisma.io/)\n* [https://keystonejs.com/](https://keystonejs.com/)\n* [https://graphql.org/](https://graphql.org/)\n* [https://redwoodjs.com/](https://redwoodjs.com/)\n* [https://nuxtjs.org/](https://nuxtjs.org/)\n* [https://astro.build/](https://astro.build/)\n* [https://vercel.com/](https://vercel.com/)\n* [https://wordpress.org/](https://wordpress.org/)\n* [https://dayoneapp.com/](https://dayoneapp.com/)\n* [https://automattic.com/](https://automattic.com/)\n* [https://mongoosejs.com/](https://mongoosejs.com/)\n* [https://www.blink182.com/](https://www.blink182.com/)\n* [https://newsroom.spotify.com/2021-02-22/a-new-era-for-podcast-advertising/](https://newsroom.spotify.com/2021-02-22/a-new-era-for-podcast-advertising/)\n* [Chase Reeves YouTube Channel](https://www.youtube.com/user/chasereeves)\n* [https://xdebug.org/](https://xdebug.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Dave:\n  * 1: [Haikyu!!](https://www.netflix.com/title/80090673)\n  * 2: [Nintendo Garage](https://www.nintendo.com/games/detail/game-builder-garage-switch/)\n* Chris: [Ray App](https://myray.app/)\n* Wes:\n  * 1: [Connor Ward YouTube Channel](https://www.youtube.com/channel/UCTx85W5xtrr0gu4hmqw7VbQ)\n  * 2: [Ryan Knorr YouTube Channel](https://www.youtube.com/channel/UCGmz1qSJjvBPluouoOj1Qkg)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '85ca0e46d822915ddde05bfbc4907e2a4a9f3139a3aad152d1cf40406a1dc9e0', 'shoptalk-x-syntax', '/shows/374 - shoptalk.md', '2023-10-16 20:07:32.748', '2023-10-27 15:58:00.568', 'TASTY'),
('syntax_podcast_show_00375', 375, 'Hasty Treat - Git the Latest - New Things In Tech - CoPilot, Petite Vue, Stackblitz, Web3 + More!', '2021-08-02 13:00:00.699', 'https://traffic.libsyn.com/syntax/Syntax375.mp3', '\nIn this Hasty Treat, Scott and Wes launch a new series called Git the Latest — New Things In Tech.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:47 - [GitHub CoPilot](https://copilot.github.com/)\n* AI-powered autocompletion\n* Not going to take your job\n\n07:18 - [Next.js 11](https://nextjs.org/blog/next-11)\n* Image updates\n* Multiplayer\n\n08:20 - [Astro](https://astro.build/)\n* Build faster websites with less client-side JavaScript\n\n09:50 - [Notion API](https://developers.notion.com/)\n* Get database\n* Query database\n* Pages\n* Block children\n\n11:27 - [Petite Vue](https://github.com/vuejs/petite-vue)\n* Petite Vue is an alternative distribution of Vue optimized for progressive enhancement\n* Similar to Alpine.js\n* Without a build step\n\n13:58 - [Stackblitz](https://stackblitz.com/)\n* Node in the browser\n* Not in the cloud\n* Rolled\n\n15:22 - [Solid.js](https://github.com/solidjs/solid)\n* Solid is a declarative JavaScript library for creating user interfaces. It does not use a Virtual DOM. Instead, it opts to compile its templates down to real DOM nodes and wrap updates in fine-grained reactions. This way when your state updates only the code that depends on it runs.\n\n16:37 - [Stately](https://stately.ai/)\n* From the company that made xState\n\n18:05 - [Web3](https://web3js.readthedocs.io/en/v1.4.0/)\n* Let us know if you want a show about it\n* Ethereum JavaScript API\n* Apps that run on the Blockchain\n\n## Links\n* [https://alpinejs.dev/](https://alpinejs.dev/)\n* [https://svelte.dev/](https://svelte.dev/)\n* [https://xstate.js.org/](https://xstate.js.org/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '87def725f8d6be2889f67b39533897a146bcb0434060d0c0d81845b1e9968ced', 'hasty-treat-git-the-latest-new-things-in-tech-copilot-petite-vue-stackblitz-web3-more', '/shows/375 - git the latest.md', '2023-10-16 20:07:32.965', '2023-10-27 15:58:00.699', 'HASTY'),
('syntax_podcast_show_00376', 376, 'Potluck - WordPress × 3rd-Party Cloud Services × Backend Hosting × Drupal × Getting Clients × GPS vs BEM × More!', '2021-08-04 13:00:00.699', 'https://traffic.libsyn.com/syntax/Syntax376.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about WordPress, Drupal, using SSGs, finding clients when you\'re just starting out, scoped CSS, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## RevenueCat - Sponsor\nRevenueCat makes it easy to build and manage iOS and Android in-app purchases. With a few lines of code, RevenueCat provides IAP infrastructure, customer analytics, data integrations, and gives you time back from dealing with edge cases and updates across the platforms. Created by developers, for developers, thousands of the world’s best apps use RevenueCat to power their in-app purchases and subscriptions. Get started for free at [revenuecat.com](https://www.revenuecat.com).\n\n## Show Notes\n\n01:48 - Most small businesses I know have heard of WordPress and it seems like it’s the industry standard for brochure sites. I’m tired of 1-5 page freelance WordPress sites. I love front-end coding and design. Do I need to “sell” people on static sites or are there freelance jobs out there for Vue/React/whatever static sites for developers? I want to stick with small businesses and a few other niches, but I’m tired of drag-and-drop builders in WordPress. Plus, I feel WordPress is overkill for a majority of sites. I just want to code sites and freelance.\n\n08:53 - I wanted to get your opinion on 3rd-party cloud services that provide some application functionality. Things like auth0, Algolia, open cart etc. I work for a large enterprise where there is a real fear of trusting these companies with our data and so everything is built from the ground up, with less time, and we miss out on some of the sweet features these services provide. Do you use many services like this in your production apps and how would you decide which to use?\n\n16:03 - I recently took Wes’ Advanced React course and went on to build my first custom React app! Thanks Wes! When the time came to deploy the app, I was surprised by the asymmetry in hosting options for the front vs. backend. It seems that there are 1000 slick, free-teir options for hosting my front-end. But finding a host for my Keystone backend: barf. I messed around with Heroku but troubleshooting was a nightmare, and I eventually settled on a Digital Ocean droplet. My inner system admin is secretly happy to have another OS instance to manage, but I hate paying 5 dollars a month to host a silly project that will probably never be seen by anyone, and I’m already irritated with the amount of care and feeding the backend needs. What gives? Why are there so many choices for frontend hosts and so few for the backend? Are there hosted backends that have auth, database, image hosting, etc and take care of the nitty-gritty with a newbie-friendly free-tier? Maybe I should I be looking into serverless?\n\n23:21 - Since Drupal has evolved beyond awkward kloog of v7 entity/ctools/json-services/phptemplate erc into v9 with excellent graphql/json/rest support and tomb(?) for non drupal web would you recommend Drupal as for a blogger/businesses\' internal network doc/publishing/communications system (ie Drupal not as website itself)?	\n\n29:43 - I have just started my web development freelancing business and I feel like I am having a hard time getting a lot of response from small business who currently don\'t even have a website (or have a terrible one). Is there any advice you can give about talking people into hiring a web developer when they CLEARLY need help? I plan to use NextJS and Sanity for all of my sites. My first client project is already built using it and it was a great developer experience!\n\n34:30 - What would you guys consider the best alternative to the BEM naming convention? I personally follow a method with very few classes (I\'ve seen this called GPS) which takes advantage of the CSS cascade, but I do think it may suffer from readability problems if I handed my stuff to another developer to work on. Interested to hear your thoughts.\n\n39:16 - I have been self teaching myself web development for a little over a year now and your show has been a big help! I am getting to the point now where I feel I am nearly qualified for jobs and will be starting the application journey soon. I currently work in supply chain management at a big corporation with a background in industrial engineering (of which I hold a Bachelors degree). My question for you is - seeing that I have work experience at a big company and a STEM background, do you think this holds any weight in terms of being qualified for a dev job? What I am mainly wondering is how much I should leverage this during interviews and on my resume.\n\n## Links\n* [https://www.gatsbyjs.com/](https://www.gatsbyjs.com/)\n* [https://tina.io/](https://tina.io/)\n* [https://vercel.com/](https://vercel.com/)\n* [https://www.netlify.com/](https://www.netlify.com/)\n* [https://circleci.com/](https://circleci.com/)\n* [https://github.com/Nexedi/renderjs](https://github.com/Nexedi/renderjs)\n* [https://keystonejs.com/](https://keystonejs.com/)\n* [https://www.drupal.org/](https://www.drupal.org/)\n* [https://medium.com/@jescalan/bem-is-terrible-f421495d093a](https://medium.com/@jescalan/bem-is-terrible-f421495d093a)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [I Was There Too Podcast](https://www.earwolf.com/show/i-was-there-too/)\n* Wes: [Mattias Random Stuff YouTube Channel](https://www.youtube.com/watch?v=1L2ef1CP-yw)\n\n## Shameless Plugs\n* Scott: [Advanced Svelte Techniques](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '8c4d9aa01ddc905cead00731ff18a608276630372ece1c97aadd85bf1e21d54e', 'potluck-wordpress-3rd-party-cloud-services-backend-hosting-drupal-getting-clients-gps-vs-bem-more', '/shows/376 - potluck.md', '2023-10-16 20:07:33.008', '2023-10-27 15:58:00.774', 'TASTY'),
('syntax_podcast_show_00377', 377, 'Hasty Treat - TypeScript Utility Types', '2021-08-09 13:00:00.325', 'https://traffic.libsyn.com/syntax/Syntax377.mp3', '\nIn this Hasty Treat, Scott and Wes talk about TypeScript utility types — what they are, why you might use them, why they exist, and more!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:35 - Levels of using TypeScript\n1. Typing your code\n2. Typing your code, but getting a little bit more dynamic using utility types\n3. Creating your own utility types!\n* TypeScript is a language in itself\n* Check out type challenges if you want your mind blown: [https://github.com/type-challenges/type-challenges/](https://github.com/type-challenges/type-challenges/)\n* [https://www.typescriptlang.org/docs/handbook/utility-types.html](https://www.typescriptlang.org/docs/handbook/utility-types.html)\n\n07:29 - Partial\n\n08:23 - ReadOnly\n\n09:00 - Required\n\n09:33 - Record\n* A record is an object type that is a bit more restrictive\n* Say you want to store podcast details - name, URL, showCount, etc., but only for Syntax and Shoptalk.\n\n10:47 - Omit\n* I find this one handy when I want to create a \"Create Item\" type, where it has all the item fields except the ID field\n\n11:34 - Pick\n* Given a type, pick these properties \n\n12:39 - Return Types\n* Gives you the type that is returned from a function. Handy if you need to dynamically generate the type based on a passed function.\n\n13:30 - Case\n* These case types are useful for when you are doing template literal types\n* `Uppercase<StringType>`\n* `Lowercase<StringType>`\n* `Capitalize<StringType>`\n* `Uncapitalize<StringType>`\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '121387141b8009a7a80d651c1ccf56ae7ad94e972bdaf3822e7bf660d3ea408f', 'hasty-treat-typescript-utility-types', '/shows/377 - utility types.md', '2023-10-16 20:07:33.040', '2023-10-27 15:58:00.832', 'HASTY'),
('syntax_podcast_show_00378', 378, 'How to Build a Website — The Show For Beginners', '2021-08-11 13:00:00.325', 'https://traffic.libsyn.com/syntax/Syntax378.mp3', '\nIn this episode of Syntax, Scott and Wes talk about the basics of building a website — how to get started for beginners!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n04:20 - HTML\n* HTML is the language you write to get text and elements to show up on the screen\n* Elements can describe the content they contain\n  * p\n  * img\n* Or be structural and describe the areas of the website\n  * div\n  * h\n  * header, footer\n* Listen to our ep on HTML elements to learn more about them: [Syntax 354: The Surprisingly Exciting World of HTML Elements](https://syntax.fm/show/354/the-surprisingly-exciting-world-of-html-elements)\n* HTML elements have default styling applied to them before you write any CSS\n  * This comes from the browser and can be manipulated\n  * However, by default all elements are either block or inline-display\n\n08:11 - CSS\n* If HTML is the bones, CSS is the clothes and skin\n* CSS dictates how a website looks\n  * Without CSS, you have text on a blank page and images\n* CSS stands for Cascading Style Sheets (\"cascading\" being the key word)\n* Adding CSS to a page\n  * Link tag\n  * Style tag\n  * Inline styles\n* Selectors\n  * You can select an element on the page via element, class, id, attribute\n  * Syntax is selector, brackets, property, value\n* Property\n  * A property is what you are changing (e.g. background-color)\n* Value determines how the thing looks\n  * `background: red;`\n* Specificity\n  * Specificity is a big part of the cascade. When you apply one style to something, you need to learn how to target things appropriately. This is a huge part of being good at CSS.\n  * People develop systems like BEM to organize this\n  * General rules - Use elements for base styling and classes for specific styling. Don\'t use IDs for styling.\n  * `!important` exists to override everything, but as a general rule, NEVER use it. Seriously.\n* Some interaction\n  * Most interaction is done in JavaScript, but CSS has some basics\n    * hover, active, focus\n* Pseudo selectors\n* You\'ll often see people reaching for libraries to make CSS easier and more consistent\n  * Common examples are Bootstrap, Foundation, and TailwindCSS\n  * For the most part you\'ll want to avoid these until you have a good understanding of the cascade, how CSS works, and how to write good CSS.\n* In addition to properties, you can now write your own custom properties for CSS.\n  * While this could be seen as an advanced technique, I believe the new normal is CSS variables first.\n  * CSS variables are indicated by `—variableName: value;` where variable name takes the place of a property.\n  * You can then use the variable via var(—variableName) in place of a property. This allows for easy duplication of same values across your style sheet.\n\n37:08 - JavaScript\n* JavaScript is used to add *interaction* to a website\n* It makes your website dynamic\n\n**JavaScript the Language**\n* We have a base programming language that has nothing to do with HTML\n* It has things like:\n  * Variables - ways to store things\n  * Numbers + Math\n  * Data Containers - Objects and Arrays\n  * Functions - Code grouped together to achieve a certain purpose\n* It also has a \"Standard Lib\" which means JavaScript comes with built-in support for doing common things:\n  * Formatting time + money\n  * Alerting the user\n  * Logging a value to developer tools\n  * Capitalizing things\n  * Sorting lists of things\n  * Round or randomize numbers\n  * Fetch data\n  * Talk to a sever\n* Promises\n  * Logic and flow control\n\n**JavaScript the DOM**\n* When the HTML is loaded, it\'s parsed into something called the DOM (Document Object Model)\n* Events\n  * JavaScript is mostly event-driven - when something happens, do something else\n  * When you click something and want something else to happen\n  * There are lots of events\n    * mouse, touch, pointer\n    * Ready\n    * Forms\n      * Submit, change, keyboard, etc.\n* Can be used to fetch data\n  * `fetch()` - you\'ll often hear it called Ajax, or XMLHttpRequest\n* Can be used to make more HTML\n  * Whole set of APIs for creating elements\n* The DOM can be traversed\n\n## Links\n* [https://css-tricks.com/](https://css-tricks.com/)\n* [https://getbootstrap.com/](https://getbootstrap.com/)\n* [https://get.foundation/](https://get.foundation/)\n* [https://tailwindcss.com/](https://tailwindcss.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Tony Hawk\'s Pro Skater 1 + 2](https://www.nintendo.com/games/detail/tony-hawks-pro-skater-1-and-2-switch/)\n* Wes: [Mini Split Air Conditioner](https://www.amazon.com/s?k=Mini+Split+AC)\n\n## Shameless Plugs\n* Scott:\n  1: [Level Up Tuts Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n  2: [Become a Level Up Tutorials Author](https://forms.gle/PDEpDAGZpNHBDVou5)\n* Wes:\n  1: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n  2: [Javascript Notes & Reference](https://wesbos.com/javascript)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '80cbd24943bd537744af13a13fd8f42d2424f7645124264f35ce78d4224e2b6b', 'how-to-build-a-website-the-show-for-beginners', '/shows/378 - beginners.md', '2023-10-16 20:07:33.075', '2023-10-27 15:58:00.895', 'TASTY'),
('syntax_podcast_show_00379', 379, 'Hasty Treat - The Weird and Wonderful <link> Tag', '2021-08-16 13:00:00.910', 'https://traffic.libsyn.com/syntax/Syntax379.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the `<link>` tag — why it\'s weird and wonderful, and what you can do with it!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n04:16 - What is it?\n* [https://ryanflorence.dev/p/ship-weird](https://ryanflorence.dev/p/ship-weird) \n* The link tag is weird.\n* First, it\'s not for links! It\'s for establishing a relationship between the current HTML document and a resource. \n\n05:11 - CSS / Media attr\n\n07:13 - Web fonts\n\n08:09 - Favicons\n* [Syntax 373: Hasty Treat - The Surprisingly Exciting World of Favicons](https://syntax.fm/show/373/hasty-treat-the-surprisingly-exciting-world-of-favicons)\n\n08:36 - Preload + Prefetch Resource\n* Audio, document, fetch, font, image, script, style, track, video, worker + more\n\n10:15 - Fetch request (shoutout Ryan)\n\n11:27 - Preconnect\n* Consider adding preconnect or dns-prefetch resource hints to establish early connections to important third-party origins.\n* `<link rel=\"preconnect\" href=\"[https://fonts.googleapis.com](https://fonts.googleapis.com/)\">`\n* `<link rel=\"preconnect\" href=\"[https://fonts.gstatic.com](https://fonts.gstatic.com/)\" crossorigin>`\n\n13:01 - Module\n* `<link rel=\"modulepreload\" href=\"/chunk-12131.js\">`\n\n13:30 - Integrity\n* SHA\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '74d4fc0220558d3ccfc827c34590608bb93f1bb81cbc6f6e4255ab9a064383b7', 'hasty-treat-the-weird-and-wonderful-less-than-link-greater-than-tag', '/shows/379 - link tag.md', '2023-10-16 20:07:33.110', '2023-10-27 15:58:00.948', 'HASTY'),
('syntax_podcast_show_00380', 380, 'Potluck - Moist code × Memoization × Ready for full-time? × Deadlines × Design ethics × React components × Video hosting × Local fonts × More!', '2021-08-18 13:00:00.910', 'https://traffic.libsyn.com/syntax/Syntax380.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about memoization, how to know when you\'re ready for a full-time dev job, what to do when you underestimate projects, design ethics, local fonts, and more!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n04:07 - Can you explain the concept of memoization in JS?	\n\n07:27 - I’ve been developing for a while now and I was wanting to know if there is some sort of catalyst that I should be aware of that screams “you’re ready for a full-time job”?\n\n09:26 - I have an ethics question for you. I recently took on a freelance gig that requires a custom admin dashboard, and I wasn\'t really sure how to design one of those. My solution was to look up a pre-made Bootstrap dashboard template that can be purchased for $50-$500, and just re-create it myself. I looked at their live demo and reconstructed a very similar dashboard myself, using the same UI library. The outcome is not a perfect copy, although it\'s very close, and I never looked at their code base, so there\'s probably many differences there. But still, I can understand why some people might be upset by my attempt to copy someone else\'s design. I\'m not reselling it as a theme, just using it my freelance project with one client. What are your thoughts on this?\n\n16:36 - How do you decide how specific a (React) component should be?\n\n22:03 - My question is about the `npm run eject` feature of React. Is there a place where I should be using this feature or can I keep on ignoring that it exists?	\n\n24:04 - My question is for Scott. In one of the episodes in the past, you mentioned that you use YouTube private videos on [leveluptutorials.com](http://leveluptutorials.com/) using some kind of authentication. If I am not mistaken, you use a different platform to host videos now. Was there any reason to stop using that technique?	\n\n31:13 - I\'m setting up a webinar. I\'m going to require an iLok drive to access the FTP site, so I head over to Ali Baba, and I\'m on Ali Baba to buy the things, and I should mention my main concern would be data miners. I mean they\'re just like cyber-crackheads, really. So, I would imagine that any latency issues could be compensated through a registrar handshake with the firmware, and I\'d love to see a combination of both flash and HTML5, so my question is, would the eCommerce piece embed on the host platform, as well as the dialogue field for user names? Or, would the gateway socket extension be full duplex, as well as the packet switchover?	\n\n33:33 - How do you allow users to edit text to their profile or to messages they send to other users, without sacrificing the safety and security of your site?\n\n38:07 - Any tips on how should I use npm packages in Netlify functions? I read that I could commit node_modules (which for me sounds absolutely barbaric) and I also read that I could install netlify-lambda package with an additional postinstall script in the package.json. What\'s your approach?\n\n41:07 - Can you disable local fonts from the OS and check if the site actually loads them? \n\n46:02 - I have a question related to freelancing. Yesterday I took on a new client project. Price is locked in and contract is signed. Thing is, I am new to web dev freelancing and I now realise I have totally miscalculated the complexity and size of this project. What I initially estimated I could do in 3-4 weeks suddenly looks more like 6-8 weeks of work for me. Do I break the bad news for the client and ask to extend the deadline, outsource part of the work (which might lead to more hassle), or just buckle up and prepare to pull several all nighters to get on top of it? What would you do?\n\n49:09 - Question to Scott: Have you ever thought of calling your students Scott\'s Tots?	\n\n## Links\n* [https://mux.com/](https://mux.com/)\n* [https://vimeo.com/](https://vimeo.com/)\n* [https://github.com/cure53/DOMPurify](https://github.com/cure53/DOMPurify)\n* [https://wesbos.com/sanitize-html-es6-template-strings](https://wesbos.com/sanitize-html-es6-template-strings)\n* [https://svelte.dev/](https://svelte.dev/)\n* [https://vercel.com/](https://vercel.com/)\n* [https://begin.com/](https://begin.com/)\n* [https://en.wikipedia.org/wiki/Scott%27s_Tots](https://en.wikipedia.org/wiki/Scott%27s_Tots)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [I Think You Should Leave Season 2](https://www.netflix.com/title/80986854)\n* Wes: [Underground Wire Locator](https://amzn.to/2Vutc8J) \n\n## Shameless Plugs\n* Scott:\n  1: [Level Up Tuts Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n  2: [Become a Level Up Tutorials Author](https://forms.gle/47fnupLTnpatKXiH6)\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '51896f6c3961e329628ade64f7d0db23aa95715517f5718cf7875452d0538bcb', 'potluck-moist-code-memoization-ready-for-full-time-deadlines-design-ethics-react-components-video-hosting-local-fonts-more', '/shows/380 - potluck.md', '2023-10-16 20:07:33.154', '2023-10-27 15:58:01.034', 'TASTY'),
('syntax_podcast_show_00381', 381, 'Hasty Treat - Why Do People Hate CSS?', '2021-08-23 13:00:00.488', 'https://traffic.libsyn.com/syntax/Syntax381.mp3', '\nIn this Hasty Treat, Scott and Wes talk about why people hate CSS, some common issues, and how you can level up.  \n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:20 - Layout is hard\n* `block` vs `inline` vs `inline-block`\n  * Learn what this means!\n* Flexbox\n  * [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n* Grid\n* Avoid floats\n* [Wes\' Flexbox Course](https://flexbox.io/)\n* [Wes\' CSS Grid Course](https://cssgrid.io/)\n* [Scott\'s Modern CSS Layouts Course](https://www.leveluptutorials.com/tutorials/modern-css-layouts)\n\n07:43 - I can\'t get my thing to get the right style\n* Use a scoping system like BEM, CSS in JS, CSS Modules\n* Don\'t style via IDs\n* Avoid `!important`\n\n11:00 - My thing isn\'t looking the way it\'s coded\n* Dev tools\n* Write CSS in the browser\n* Check class names\n\n12:11 - I don\'t know if I can delete this CSS\n* Use tools like [https://purgecss.com/](https://purgecss.com/)\n* [http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/](http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/)\n\n15:51 - Look at things holistically\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6874680cea5a7a853915117b358434f5963966880dae759cedf5a2da1e0ba75b', 'hasty-treat-why-do-people-hate-css', '/shows/381 - css.md', '2023-10-16 20:07:33.191', '2023-10-27 15:58:01.097', 'HASTY'),
('syntax_podcast_show_00382', 382, 'Advice for New Devs', '2021-08-25 13:00:00.488', 'https://traffic.libsyn.com/syntax/Syntax382.mp3', '\nIn this episode of Syntax, Scott and Wes talk about advice for new devs, our advice and opinions for how new devs can level up.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n01:59 - Get comfortable with your code not working\n* All of our code is broken much of the time.\n\n02:40 - Compound learning and momentum is your biggest tool\n* There is no formation without repetition. \n* It sucks to hear, but honestly, if you get a little bit better every single day, you will be WAY ahead in years to come. Keep at it, keep chipping away, take the lows and the highs. \n\n04:05 - Learn to read error messages\n* Is this error coming from my code?\n* Is this coming from the library? If so, maybe the library wasn\'t expecting that.\n* Is this coming from the browser? An extension? Is it even related?\n* Stack trace is a treasure map\n\n09:42 - Take the time to learn the concepts that scare you\n* They are often easier than they seem (though not every time).\n\n10:40 - We all struggle\n* This stuff is hard — give yourself a break.\n\n12:56 - Taking a walk is good for solving bugs\n* It\'s hard to walk away from broken code, but it really helps.\n\n14:33 - Get comfortable with the command line\n* You\'ll need it\n\n18:09 - The ability to replicate a design pixel perfect is a valuable skill\n* You will be shocked at how many devs can\'t or don\'t do this. If you want to avoid spending extra time on something, don\'t make the designers tell you to go back and fix simple spacing, color, and detail things.\n\n21:26 - You are on a team\n* Don\'t get stuck in the \"us vs them\" mentality of internal company teams (e.g. devs vs designers). You are all working together to make something.\n\n24:10 - You are not an expert\n* Even if you think you are an expert, you should always be seeking out alternate viewpoints and ideas. You are a student forever in this game.\n\n26:14 - Scaffold with comments\n* It helps keep you organized once you get into the mess\n\n28:30 - From Twitter\n* Tweet thread - [https://twitter.com/wesbos/status/1417139639861735424](https://twitter.com/wesbos/status/1417139639861735424)\n\n29:30 - Ben Newton\n* Soft skills are about as important as coding skills if you want to go far.\n* [https://twitter.com/BenENewton/status/1417140062211526658](https://twitter.com/BenENewton/status/1417140062211526658)\n\n32:46 - Eric McCormick\n* Don\'t be afraid to push yourself beyond your comfort zone.\n* [https://twitter.com/edm00se/status/1417140503527792640](https://twitter.com/edm00se/status/1417140503527792640)\n\n33:31 - Jason Liggi\n* You don\'t have to code for fun.\n* [https://twitter.com/Liggi/status/1417141600124346371](https://twitter.com/Liggi/status/1417141600124346371)\n\n35:34 - Andrew Nickerson\n* Start by building a project that\'s interesting to you.\n[https://twitter.com/Nickvisual/status/1417140742531674118](https://twitter.com/Nickvisual/status/1417140742531674118)\n\n37:15 - Michael Powers\n* Ask questions, break things once in a while, learn vanilla everything even if it feels like a waste of time.\n* [https://twitter.com/mgrpowers/status/1417141364525912064](https://twitter.com/mgrpowers/status/1417141364525912064)\n\n39:33 - Jason Liggi\n* Doesn\'t matter how long you do this job, MOST stuff out there will probably be unknown and confusing. \n* [https://twitter.com/Liggi/status/1417141322478235653](https://twitter.com/Liggi/status/1417141322478235653)\n\n40:14 - Swashata\n* Learn to read documentation\n* [https://twitter.com/swashata/status/1417142055436910598](https://twitter.com/swashata/status/1417142055436910598)\n\n49:59 - Max Stoiber\n* Know your tradeoffs.\n* [https://twitter.com/mxstbr/status/1417142461709828101](https://twitter.com/mxstbr/status/1417142461709828101)\n\n43:34 - Pat Clarke\n* Build a rapport with PMs/clients beyond the technical.\n[https://twitter.com/LeftShotDev/status/1417142505494269954](https://twitter.com/LeftShotDev/status/1417142505494269954)\n\n44:21 - Musa Barighzaai\n* Leave things better than you found them.\n[https://twitter.com/mbarighzaai/status/1417142734993907715](https://twitter.com/mbarighzaai/status/1417142734993907715)\n\n45:20 - David Moore\n* Build things that excite you.\n* [https://twitter.com/DavidIMoore/status/1417145783581741067](https://twitter.com/DavidIMoore/status/1417145783581741067)\n\n## Links\n* [https://johnlindquist.com/](https://johnlindquist.com/)\n* [https://github.com/albertlauncher/albert](https://github.com/albertlauncher/albert)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Raycast](https://raycast.com/)\n* Wes: [Amazon iPhone Repair Kits](https://www.amazon.com/b?ie=UTF8&node=21209121011)\n\n## Shameless Plugs\n* Scott: [Web Components 101](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '4e71052f09cc2266b596744b67dd5a849aa6b7823e7c2f485612050a58b4020f', 'advice-for-new-devs', '/shows/382 - new devs.md', '2023-10-16 20:07:33.280', '2023-10-27 15:58:01.150', 'TASTY'),
('syntax_podcast_show_00383', 383, 'Hasty Treat - Freelance Tips - Toxic Clients', '2021-08-30 13:00:00.382', 'https://traffic.libsyn.com/syntax/Syntax383.mp3', '\nIn this Hasty Treat, Scott and Wes talk about toxic clients — how to identify them, and what to do about them.\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n05:33 - Warning Signs of a potential toxic client\n* Doesn\'t have project well thought out.\n* Scope creep - Adds on new features while not considering the amount of work required to make them happen. Can be mad when you run out of time or budget.\n* Ill Communicator\n  * Contacts you at odd times.\n  * Thinks that you should answer every email in an hour.\n  * Contacts you in inappropriate ways, via text message, social media. OR doesn\'t respond to emails in a timely manner giving you blockers.\n* Jerk\n  * The rude client\n  * Thinks they can be rude because they are giving you money\n  * Hundreds of emails\n* Tries to be flashy upfront (dinners, etc.)\n  * Scatterbrain or way too big.\n  * Facebook for nurses\n\n18:06 - What to do about toxic clients\n* Communicate your needs clearly. Set expectations.\n  * \"I work best when...\"\n  * \"I answer emails once every two days\"\n  * Set clear deadlines for deliverables, feedback and revisions (one revision backed in, more at x hourly rate, etc.).\n  * Just be VERY clear. If something doesn\'t work for them, they will hopefully tell you.\n* Get things in writing.\n  * Put things clearly in a working agreement for your client to approve. That way you have something to show in case things go south and you can say, \"You agreed to the following things\".\n* Fire them\n  * You can fire clients. Honestly, some of them just aren\'t worth the time and effort. It\'s usually the cheapest clients who demand the most from you. Don\'t let them take more of your time and energy than they are paying for.\n  * Firing clients is very simple.\n    * Hi so and so, I don\'t feel like we\'re a good match for this project, so I\'ll be canceling our work agreement. Good luck on your project.\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '4d28a4c52f1966e5f49e008ceb4d0656424f11ade337bcc01ece7b5aa1bdb221', 'hasty-treat-freelance-tips-toxic-clients', '/shows/383 - toxic clients.md', '2023-10-16 20:07:33.367', '2023-10-27 15:58:01.212', 'HASTY'),
('syntax_podcast_show_00384', 384, 'STUMP\'D - Coding Interview Questions', '2021-09-01 13:00:00.382', 'https://traffic.libsyn.com/syntax/Syntax384.mp3', '\nIn this episode of Syntax, Scott and Wes are back with another edition of Stump\'d! where they try to stump each other with interview questions.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Auth0 - Sponsor\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provide features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n03:10 - What is STUMP\'D?\n\n04:27 - What is a first class function?\n\n06:27 - What is the purpose of using object is method?\n\n09:31 - What is the purpose of Error object?\n\n11:00 - What are the advantages of minification?\n\n12:37 - How do you declare namespace?\n\n15:38 - What are JS labels?\n\n19:20 - List the methods that are available on a WeakSet?\n  * What is the difference between a set and a WeakSet?\n\n23:33 - What is the use of preventDefault method?\n\n26:15 - What is a spread opperator?\n\n27:35 - What is the output of below spread operator array?\n* `[...\'John Resig\']`\n\n30:19 - How do you load CSS and JS files dynamically?\n\n32:00 - What are tasks in event loop?\n\n34:15 - What is a WeakMap?\n\n37:35 - How do get query string values in JavaScript?\n\n40:50 - What is the purpose of some method in arrays?\n\n42:15 - How do you delete a cookie?\n\n## Links\n* [https://30secondsofinterviews.org/](https://30secondsofinterviews.org/)\n* [https://www.interviewbit.com/javascript-interview-questions/](https://www.interviewbit.com/javascript-interview-questions/)\n* [https://github.com/sudheerj/javascript-interview-questions](https://github.com/sudheerj/javascript-interview-questions)\n* [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label)\n* [https://es6.io/](https://es6.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Builderment](https://builderment.com/)\n* Wes: [Lawn Mower Blade Balancer](https://www.amazon.com/s?k=blade+balancer)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd1422777ad23657ddbd2df9518af69e6453e98f85d604535f7f13c15ca57ce0d', 'stump-d-coding-interview-questions', '/shows/384 - stumped.md', '2023-10-16 20:07:33.422', '2023-10-27 15:58:01.268', 'TASTY'),
('syntax_podcast_show_00385', 385, 'Hasty Treat - TypeScripts Strict Explained', '2021-09-06 13:00:00.824', 'https://traffic.libsyn.com/syntax/Syntax385.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the Typescript `strict` flag — what it does and why you might use it.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n02:50 - What is it?\n* Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program. When appropriate and possible, a corresponding flag will be added to disable that behavior.\n\n03:26 - `noImplicitAny`\n* The `any` type in TypeScript is exactly that - it can be anything.\n* TypeScript will try to `infer` the type. When it can\'t it will be `any`.\n* Sometimes you need `any`, but if that is the case, you must explicitly type it as `any`.\n* If something is implicitly `any` - it might be a mistake, or you forgot to type it. Risky!\n\n06:01 - `noImplicitThis`\n* You must type `this` - it can\'t be implicitly inferred.\n\n06:47 - `strictFunctionTypes`\n* If you have a type that is a function and it doesn\'t 100%.\n\n07:44 - `alwaysStrict`\n* Always turns on strict mode. You can\'t do things like redeclare `var` variables.\n\n09:25 - `strictNullChecks`\n* Makes you check that the item is actually there before accessing a value or method from it.\n* Imagine you filter or find on an array, or query selector a DOM element. There is a possibility that nothing is there. `strictNullChecks` makes you check that it\'s there - like an if statement.\n* Optional chaining is super handy here.\n\n11:18 - `strictBindCallApply`\n\n12:38 - `strictPropertyInitialization`\n\n13:37 - `useUnknownInCatchVariables`\n\n## Links\n* [https://www.typescriptlang.org/tsconfig#strict](https://www.typescriptlang.org/tsconfig#strict) \n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e86b2bc7a6b3ca21782ad8bfb0e0dbc11155d6ea4b7e8b9b402d23ba508eb3e4', 'hasty-treat-typescripts-strict-explained', '/shows/385 - typescript.md', '2023-10-16 20:07:33.458', '2023-10-27 15:58:01.319', 'HASTY'),
('syntax_podcast_show_00386', 386, 'Potluck - Sass × Houdini × No JS? × Solid Project × First Dev Job Tips × Bartering × DRM × Dev Laptops × Databases × Frontity × More!', '2021-09-08 13:00:00.824', 'https://traffic.libsyn.com/syntax/Syntax386.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about Sass, Houdini, JS requirements, tips for your first dev job, dev laptops, databases, Frontity, and more!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Auth0 - Sponsor\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provide features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n02:35 - What are the use cases of SASS/SCSS in 2021? Would you still choose it over CSS (or something else?) in a new project?\n\n05:26 - What ever happened to CSS Houdini?\n\n08:49 - With all these JS being transferred, have you ever tried to challenge yourself to build a project that doesn\'t involve any JS (in the front end alone); (e.g. just HTML+CSS)? I find it funny how I can pretty much use amazon.com with JS disabled, but I literally cannot view the angular docs if I disable it.\n\n11:40 - As we all know, Tim Berners-Lee made the web. Apparently, after seeing everyone’s data getting harvested by tech companies, he decided to make a project called Solid ([https://solidproject.org/](https://solidproject.org/)) that allows people to own their data and control all permissions to it. So if a user logs into your app with Solid, rather than storing their info on your server, you’d store it in *their* Solid Pod. Do you think this could save both Web developers’ conscience and disk space in the cloud?	\n\n15:47 - I am about to start my first developer job. What practices can I start to really get off on the right foot and lay down a foundation for a successful career?\n\n18:57 - Have you guys ever used your dev skills to trade for other goods or services? For instance, helping out an auto mechanic with their website in exchange for brake service on your car or creating a site for a barbershop traded for free haircuts for a year. If so, how do you go about starting that conversation?\n\n22:14 - What\'s your take on DRM? Have you implemented/integrated something like Widevine in any of your platforms/projects? How does one go about doing such a thing? I can\'t seem to find any good docs on that. I personally can relate as to why it\'s there, but end up hating it anyways. I recently found out that Prime Video only allows SD(sub HD) content on Linux and it had something to do with the Widevine DRM they employ. I got outraged and eventually canceled my subscription!\n\n29:35 - Have you seen the Framework laptop and, if so, what are your thoughts for web development? I’m a lifelong Mac user but the idea of a higher repairable laptop running Linux (I personally can’t do Windows) sounds like an amazing step forward for consumers.\n\n32:53 - I know that you both like MongoDB and so do I. But sometimes all these queries to database, especially aggregations gets messy, aren\'t they? Prisma has now support for MongoDB. What do you think? Is it a tool that will make requesting MongoDB much easier?\n\n37:02 - Hey guys, been diving into Svelte a bit recently and had a question about using it with GraphQL. As I recall Scott once deemed React Typescript GraphQL CodeGen \"the promised land\" and since then I tried it out and have found it awesome. However, I\'ve been debating moving a larger personal project from React to Svelte. I see that there is plugin for graphql-codegen-svelte-apollo but with my limited knowledge of Svelte find it hard to decipher if the development experience would be as streamlined. I am wondering if you could shed some light on the developer experience of working with GraphQL in Svelte in Typescript.\n\n40:58 - Do y’all have any thoughts about Frontity for WordPress? I swear I’m not a plant for Frontity, but I stumbled upon it today and I’m trying to evaluate it vs. other solutions like Next.js for use in a headless WordPress setup. Would love your thoughts if you have any!	\n\n43:40 - Call me weird, but I kind of like fiddling around with webpack configs. I just like the level of control I have here. That being said, is webpack going to die now that the \"better\" tools out there mature? Or do you think we might see a webpack v6 with esbuild under the hood that makes it compete with Parcel, Vite, Snowpack in terms of speed?\n\n## Links\n* [https://sass-lang.com/](https://sass-lang.com/)\n* [https://postcss.org/](https://postcss.org/)\n* [https://ishoudinireadyyet.com/](https://ishoudinireadyyet.com/)\n* [https://astro.build/](https://astro.build/)\n* [https://kit.svelte.dev/](https://kit.svelte.dev/)\n* [https://www.widevine.com/](https://www.widevine.com/)\n* [https://frame.work/](https://frame.work/)\n* [https://www.prisma.io/](https://www.prisma.io/)\n* [https://www.mongodb.com/](https://www.mongodb.com/)\n* [https://www.postgresql.org/](https://www.postgresql.org/)\n* [https://mongoosejs.com/](https://mongoosejs.com/)\n* [https://keystonejs.com/](https://keystonejs.com/)\n* [https://frontity.org/](https://frontity.org/)\n* [https://webpack.js.org/](https://webpack.js.org/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Hot App](https://github.com/macmade/Hot)\n* Wes: [Pet Food Mat](https://amzn.to/3ljDQdr)\n\n## Shameless Plugs\n* Scott: [Web Components Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'd744424106abe82ffcac1d6b8c219df715d78c0fd73531e2921ca509fa84017e', 'potluck-sass-houdini-no-js-solid-project-first-dev-job-tips-bartering-drm-dev-laptops-databases-frontity-more', '/shows/386 - potluck.md', '2023-10-16 20:07:33.493', '2023-10-27 15:58:01.368', 'TASTY'),
('syntax_podcast_show_00387', 387, 'Hasty Treat - Starlink Rural Internet', '2021-09-13 13:00:00.481', 'https://traffic.libsyn.com/syntax/Syntax387.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Wes\' new satellite internet setup — best use-cases and how to set it up.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n04:06 - Rural internet is huge for:\n* Access to information\n* Remote work\n  * Opens up job opportunities for many residents who can\'t relocate due to family\n* Home values\n  * Big city folk moving into rural areas and driving prices up is another issue alltogether\n* Smart rural home\n\n05:46 - Previous setup\n* We have a cottage\n* LTE Routers\n* Yagi Antennas\n* Worked well, but slow\n* $4/gig over 100gb\n* Grey market - one went up/down\n* Alternatives\n  * WISP - no access\n  * XPLORNET @ (hughesnet) - BRUTAL\n  * Bell LTE - $$$ - slow\n\n08:35 - The signup, install, price\n* $129 CAD Deposit ($100 USD)\n* $650 for the dish\n* $120/month\n* Unlimited bandwidth\n* Needs a clear view of the northern sky\n* Clear from obstructions is key\n* Every 1 foot up is 2 foot of obstructions cleared\n* I put it on a 25ft piece of wood\n* Bought a pipe adaptor from Starlink\n\n09:59 - The performance\n* These numbers are not impressive to anyone with fiber, but are LIFE CHANGING to rural folks\n* From 30mbps - 200mbps down - some users posted ~350 down\n* Upload from 25mpbs - 80mbps (better than you can pay for where I live in the city)\n* Ping is around 40ms\n* Downtime is measured in seconds\n* Youtube streams super smoothly\n* Zoom works great\n* Facebook + Instagram issues\n  * Many reported changing DNS fixed it\n\n14:21 - The equipment\n* Starlink comes with a router\n  * Does not support bridge mode\n  * Doesn\'t have WPS\n  * Only one hard-wired port\n  * POE-only\n* UniFi Dream Machine\n* Three access points\n* POE switch for Starlink Router\n  * Gives you stats\n* The ethernet is hard-wired into the dish, so you have to drill a huge hole in the house\n\n## Links\n* [Starlink](https://www.starlink.com/)\n* [Wyze](https://wyze.com/)\n* [UniFi Dream Machine](https://store.ui.com/collections/unifi-network-unifi-os-consoles/products/unifi-dream-machine)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'eb882a7b215fc727070a1cf627a1034a3437b6e576c15a388df31b663be6b983', 'hasty-treat-starlink-rural-internet', '/shows/387 - starlink.md', '2023-10-16 20:07:33.541', '2023-10-27 15:58:01.439', 'HASTY'),
('syntax_podcast_show_00388', 388, 'New to JavaScript — ES2022', '2021-09-15 13:00:00.481', 'https://traffic.libsyn.com/syntax/Syntax388.mp3', '\nIn this episode of Syntax, Scott and Wes talk about all the new stuff in ES2022 — what it is, why you might need it, and how to use it.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Auth0 - Sponsor\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below: [https://a0.to/syntax](https://a0.to/syntax).\n\n## Show Notes\n04:50 - Regex indicies\n* New `d` flag in a regex\n* [https://regex101.com/](https://regex101.com/)\n* This will tell you the indexes (indicies) of the regex matches\n* Handy if you need to highlight or replaces matches in a string\n* We can ask for the start and end positions of each matched capture group\n\n07:16 - Class updates\n* Private fields\n* Properties and Methods to be kept private \n* Prefix them with a `#` \n* =Helpful for internal state and methods which should not be accessed directly or at all by external \n* In React how we have ___INTERNTAL_NEVER USE THIS_\n\n```jsx\n\nclass ColorButton extends HTMLElement {\n  // All fields are public by default\n  color = \"red\"\n\n  // Private fields start with a #, can only be changed from inside the class\n  #clicked = false\n}\n\nconst button = new ColorButton()\n// Public fields can be accessed and changed by anyone\nbutton.color = \"blue\"\n\n// SyntaxError here \nconsole.log(button.#clicked) // Cannot be read from outside\nbutton.#clicked = true // Cannot be assigned a value from outside\n```\n\n* Getters and setters introduced in es5\n* [https://www.w3schools.com/js/js_object_accessors.asp](https://www.w3schools.com/js/js_object_accessors.asp)\n\n```jsx\nclass Person {\n  #hobbies = [\'computers\']\n  get #hobbiesGetter() { return this.#hobbies }\n	#getHobbies() { return this.#hobbies }\n	getHobbiesPublic() { return this.#hobbies }\n}\n\nconst scott = new Person();\n\nscott.#getHobbies(); // doesn\'t work\nscott.getHobbiesPublic(); // works\n```\n\n09:07 - Class fields\n* This may seem super old because we have been polyfilling it forever\n* Right now if you want an instance field on a class, you need to declare it in the constructor\n* Now we can just declare them inside the class\n\n10:36 - Static fields and methods\n* As above can also be **static with the static keyboard**\n* Works for methods too\n  * Explain what a static method is\n\n13:17 - Top level await\n* So handy in modules. Need to pull in some data? Simple. \n\n15:19 - Ergonomic brand checks for private fields\n* Used for checking if a private field on a class exists using the `in` keyword\n\n16:00 - `.at()` method\n* Strings and arrays - we can use square brackets to reference items of the array\n* Super handy for grabbing the last item of an array\n\n```jsx\n// 🔥 New .at() method on arrays and strings\n\nconst toppings = [\'pepperoni\', \'cheese\', \'mushrooms\'];\n\n// The old way to grab the last item\ntoppings[toppings.length - 1]; // mushrooms\n\n// using .at() method with a negative index\ntoppings.at(-1); // mushrooms \n// works with any index\ntoppings.at(0); // pepperoni\ntoppings.at(-2); // cheese\n\n// and with strings!\n\'Meeting Room: B\'.at(-1) // B\n```\n\n* Why not use array[-1]? \n* We used to use slice(-1)\n* What about indexOf?\n\n21:34 - Handy `hasOwn` method\n* [https://github.com/tc39/proposal-accessible-object-hasownproperty](https://github.com/tc39/proposal-accessible-object-hasownproperty)\n\n24:51 - Class static block\n* A static block allows you to run code before creating an optional static property during initialization\n* [https://github.com/tc39/proposal-class-static-block](https://github.com/tc39/proposal-class-static-block)\n\n## Links\n* [https://github.com/tc39/proposals/blob/master/finished-proposals.md](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Ultraloq Smart Lock](https://amzn.to/3DVhzJC)\n* Wes: [Magnatiles](https://amzn.to/3DU1lR2)\n\n## Shameless Plugs\n* Scott: [Web Components Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'e7d493304a88f6a114d510e9d71dafecb50be03af0bdb24303ae623965f44d49', 'new-to-javascript-es2022', '/shows/388 - ES2022.md', '2023-10-16 20:07:33.579', '2023-10-27 15:58:01.491', 'TASTY'),
('syntax_podcast_show_00389', 389, 'Hasty Treat - Webhooks', '2021-09-20 13:00:00.657', 'https://traffic.libsyn.com/syntax/Syntax389.mp3', '\nIn this Hasty Treat, Scott and Wes talk about webhooks — one of those concepts that seems a lot scarier than it actually is. \n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:42 - What are webhooks?\n* User-defined HTTP callbacks\n* When something happens, ping this URL with this data\n* Examples:\n  * When something sells, ping this URL\n  * When someone reverses a charge, lock their account\n  * Trigger a build of the website when the content changes\n  * Then someone buys a shirt, generate a shipping label and save it to the DB\n\n07:57 - Sending End\n* Can be a great way to hook two services together\n\n09:13 - Receiving End\n* Often you will be the one that accepts the webhook ping\n* In this case, you set up an endpoint\n\n11:00 - Payloads\n* Almost all will send a JSON body that you parse out\n* The method send is variable\n\n11:51 - Auth\n* On the receiving end of a webhook, you often get a token which you can then ping the service with. It will tell you if that request was legit or not. \n* On the sending end, you can often set up headers with auth - same with the method\n* Can be a replacement for a serverless function\n\n13:18 - Testing webhooks\n* Can be a pain in the ass\n* [ngrok](https://ngrok.com/) - expose locally\n* [localtunnel](https://theboroer.github.io/localtunnel-www/)\n* [Insomnia](https://insomnia.rest/)\n* [Postman](https://www.postman.com/)\n* [Stripe](https://stripe.com/) has a great VS code extension\n* [Snipcart](https://snipcart.com/) has an awesome dashboard\n  * Will also tell you when one failed\n* [webhook.site](http://webhook.site) \n* [https://expose.dev/](https://expose.dev/)\n* [IFTTT](https://ifttt.com/)\n* [Zapier](https://zapier.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '6c1c0a3a0f99c6dc4493ac2261530b23d4ffbd6aadffd855d4daae0f986325d1', 'hasty-treat-webhooks', '/shows/389 - webhooks.md', '2023-10-16 20:07:33.619', '2023-10-27 15:58:01.542', 'HASTY'),
('syntax_podcast_show_00390', 390, 'From React To SvelteKit', '2021-09-22 13:00:00.657', 'https://traffic.libsyn.com/syntax/Syntax390.mp3', '\nIn this episode of Syntax, Scott talks with Wes about moving Level Up Tutorials from React to SvelteKit — why he did it, how, benefits, things to watch out for, and more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n07:28 - Thoughts\n* Apples to oranges, so unfortunately, no super legit ability to compare.\n  * SvelteKit isn\'t analogous with a custom React setup that uses CSR\n    * SSR is usually going to be faster - we can ship less JS\n    * Some big things changed beyond React → SvelteKit\n      * [Apollo](https://www.apollographql.com/) → [GFetch](https://github.com/kiedtl/gfetch)\n      * [Plyr](https://plyr.io/) → [Vime](https://vimejs.com/)\n    * HLS starts grabbing chunks immediately, so it\'s hard to get accurate load time and transfer.\n* Whole conversion took a couple of months.\n* Hardest part was making UI choices and changes, straight-up converting components one by one wasn\'t actually that tough\n\n16:14 - Converting React components to Svelte\n* useState becomes just a straight-up variable\n* Graphql calls were hooks now just imported generated functions\n* Remove extranous fragments\n* Convert {things && } to {#if thing}{/if}\n* `<component hello={hello} />` becomes `<component {hello} />`\n\n24:06 - Spark joys\n* State\n  * Our checkout flow became way more transparent, way easier with Svelte stores\n* Render flow\n  * Was never something we needed to really think about. Didn\'t think about memoizing, or worrying about too many renders down the line, just never needed to\n* Overall developer experience\n  * It\'s honestly a joy to work in and I don\'t want to go back\n* Making a library\n  * Package dir, new SvelteKit project, `svelte-kit package`\n  * I made svelte-toy - [https://github.com/leveluptuts/svelte-toy](https://github.com/leveluptuts/svelte-toy)\n  * svelte-element-query - [https://github.com/leveluptuts/Svelte-Element-Query](https://github.com/leveluptuts/Svelte-Element-Query)\n  * svelte-simple-datatable fork\n* Creating a sitemap was extremely easy, because of server-side routes. file.returnformat.ts ie `sitemap.xml.ts`\n* CSS without a css-in-js library for scoping is a dream. CSS props are now 100% via CSS variables using the [https://svelte.dev/docs#style_props](https://svelte.dev/docs#style_props)\n* Animations are all done with Svelte\'s internal animations lib\n\n32:45 - Hosting\n* adapter-node\n* Hosted on [Render](https://render-web.onrender.com/) as a straight-up node process $7/m for more than enough RAM and CPU,\n* Lots of other options for static, Vercel, workers whatever, I like having just a straight-up node app you can host anywhere\n\n35:50 - Things to do\n* Admin tools\n  * [Pancake](https://pancake-charts.surge.sh/) lib for charts\n\n37:00 - Challenges\n* ESM is not always smooth sailin\n  * Import has from \'lodash/has\' didn\'t working in dev, but import has from \'lodash/has.js\' didn\'t work in prod.\n    * Solution was to use lodash.has as the dependency\n    * Apollo included all React as a dep unless you import from @core\n* TS is great, but there was once where I wanted to define the entire props ts object for a spread prop, but was not possible\n* Drag animations\n\nCloudinary\n\n42:46 - Wes\' questions\n* What about the ecosystem?\n* What about forms + DOM data? \n* Serverless functions?\n* Do you always bind to state? Or just access directly?\n \n```jsx\nformData = writable({\n  title: \"yo\"\n})\n\n{$formData.title}\n\n<input bind:value={formData.title} />\n```\n\n* Is it stable? \n* [Deno](https://deno.land/) - [Snel](https://crewdevio.mod.land/projects/Snel?ref=madewithsvelte.com) \n\n## Links\n* [https://leveluptutorials.com/](https://leveluptutorials.com/)\n* [https://vitejs.dev/](https://vitejs.dev/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Skeptics Guide To The Universe Podcast](https://www.theskepticsguide.org/podcasts/episode-844)\n* Wes: [Pressure Washer Nozzle](https://amzn.to/39iGlWl)\n\n## Shameless Plugs\n* Scott: [Web Components 101](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a75940396a427c5d51d42ecc23b9b59cec94ad714ed4815774a2c84464c1cac5', 'from-react-to-sveltekit', '/shows/390 - sveltekit.md', '2023-10-16 20:07:33.671', '2023-10-27 15:58:01.598', 'TASTY'),
('syntax_podcast_show_00391', 391, 'Hasty Treat - Desktop Apps + New Tech We Love', '2021-09-27 13:00:00.655', 'https://traffic.libsyn.com/syntax/Syntax391.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the hottest new tech they love! \n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:30 - Lucy Language\n* [https://lucylang.org/](https://lucylang.org/)\n* A concise language for describing Finite State Machines\n\n06:10 - MDSvex\n* [https://github.com/pngwn/MDsveX](https://github.com/pngwn/MDsveX)\n* Mdx for Svelte\n* Smartypants options transforms ASCII punctuation into fancy typographic punctuation HTML entities\n* [https://github.com/rehypejs/awesome-rehype](https://github.com/rehypejs/awesome-rehype)\n\n09:56 - RECut\n* [https://getrecut.com/](https://getrecut.com/)\n\n12:26 - Fig\n* [https://fig.io/](https://fig.io/)\n* It\'s an app you install on your computer, it adds autocomplete to your terminal\n* Works with most popular terminals\n* Autocompletes git commands\n* NPM commands + tons more - npm install ___ works\n* Adds descriptions of what each command does\n* Mac only - again another reason why Mac is best!\n* Themeable\n* Why not use Fish/ZSH?\n  * This isn\'t a replacement for anything, it\'s just autocomplete on top\n  * These fish plugins are to vim, as Fig is to VS Code\n  * Better UI is KEY\n\n15:56 - Warp\n* [https://www.warp.dev/](https://www.warp.dev/)\n* Rust-based termnial\n* Very fast\n* Extensions and themes\n* Share commands and sessions\n* Great for remote server dev\n* Share terminal state - with share links\n\n19:33 - Raycast\n* [https://www.raycast.com/](https://www.raycast.com/)\n* App launcher\n* File Finder\n* Workflow runner\n* Everyone is asking why is it better than Alfred\n* better UI\n* Better outputs math\n* Better defaults - currency conversion\n* Fast as hell\n* Better integrations\n* More Flexible\n\n21:26 - Table Plus\n* [https://tableplus.com/](https://tableplus.com/)\n* Fantastic little DB tool\n\n23:59 - Obsidian Update\n* [https://obsidian.md/](https://obsidian.md/)\n* Wes: I haven\'t got into it - find myself still going back to VS Code\n\n26:50 - Descript Update\n* [https://www.descript.com/](https://www.descript.com/)\n* All-in-one audio and video editing, like a doc\n\n## Links\n* [https://chriscoyier.net/](https://chriscoyier.net/)\n* [https://hyper.is/](https://hyper.is/)\n* [https://www.alfredapp.com/](https://www.alfredapp.com/)\n* [https://strapi.io/](https://strapi.io/)\n* [https://studio3t.com/](https://studio3t.com/)\n* [https://www.mindnode.com/](https://www.mindnode.com/)\n* [https://remarkable.com/](https://remarkable.com/)\n* [https://www.notion.so/](https://www.notion.so/)\n* [https://joplinapp.org/](https://joplinapp.org/)\n* [http://www.telestream.net/screenflow/overview.htm](http://www.telestream.net/screenflow/overview.htm)\n* [https://shinywhitebox.com/](https://shinywhitebox.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '42811cd45df123ebaab65fa98a7fe2ff7a74b12ef9f3c84a5588c80f53674328', 'hasty-treat-desktop-apps-new-tech-we-love', '/shows/391 - new tech.md', '2023-10-16 20:07:33.730', '2023-10-27 15:58:01.651', 'HASTY'),
('syntax_podcast_show_00392', 392, 'Changelog Frontend Feud', '2021-09-29 13:00:00.655', 'https://traffic.libsyn.com/syntax/Syntax392.mp3', '\nIn this episode of Syntax, Scott and Wes do a crossover episode with Changelog\'s JS Party! Your favorite web dev podcasts join forces for a super collab that’ll knock you frontend off! Amelia joins Chris Coyier and Dave Rupert from ShopTalk Show, while Divya teams up with Wes Bos and Scott Tolinski from Syntax. Let the FEUDing begin!\n\n## .TECH Domains - Sponsor\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n\n02:49 - Frontend Feud Rules\n\n04:06 - Round 1\n\n10:28 - Round 2\n\n17:26 - Round 3\n\n25:37 - Round 4\n\n35:15 - Round 5\n\n42:03 - Round 6\n\n## Links\n* [Changelog](https://changelog.com/)\n* [JS Party](https://changelog.com/jsparty)\n* [Chris Coyier](https://twitter.com/chriscoyier)\n* [Dave Rupert](https://twitter.com/davatron5000)\n* [Wes Bos](https://twitter.com/wesbos)\n* [Scott Tolinski](https://twitter.com/stolinski)\n* [Jerod Santo](https://twitter.com/jerodsanto)\n* [Amelia Wattenberger](https://twitter.com/wattenberger)\n* [Divya](https://twitter.com/shortdiv)\n* [The Feud At The Seventh Mountain](https://www.bendsource.com/bend/the-feud-at-the-seventh-mountain-condo-owners-prominent-oregon-family-fight-over-repairs-to-inn/Content?oid=2130385)\n* [Amelia’s repo visualizer](https://github.com/githubocto/repo-visualizer)\n* [CSS-Tricks](https://css-tricks.com/)\n* [freeCodeCamp](https://www.freecodecamp.org/)\n* [Wes Bos’ courses](https://wesbos.com/courses)\n* [Changelog Merch](https://merch.changelog.com/)\n* [Level Up Tutorials](https://leveluptutorials.com/)\n\n## Shameless Plugs\n* Scott: [All courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'b8b2fe5d505bc21b131f312a17c25edbaa3e31c4e917305b898a31aeff8aa070', 'changelog-frontend-feud', '/shows/392 - frontend feud.md', '2023-10-16 20:07:33.768', '2023-10-27 15:58:01.710', 'TASTY'),
('syntax_podcast_show_00393', 393, 'Hasty Treat - Spicy Takeout - PHP Is Good and We’re Just Re-Creating It', '2021-10-04 13:00:00.877', 'https://traffic.libsyn.com/syntax/Syntax393.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how much modern web development has taken from PHP!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:56 - Why much of modern web development is just recreating PHP\n* Everyone loves to hate on PHP, but modern Web dev takes a lot from PHP\n\n05:44 - Mixing templating and logic\n  * We do this with JSX\n\n07:39 - Each request has its own scope\n\n08:57 - Massive standard lib\n  * Format a date? No sweat!\n  * Image resizing? Sure!\n  * Audio bindings? Sure!\n\n10:16 - URL-based routing\n  * [Next.js](https://nextjs.org/) pages\n  * Serverless functions\n\n11:13 - Server-rendered\n  * [Hotwire](https://hotwired.dev/)\n\n11:38 - $_GET, $_POST, are just available\n  * [Next.js](https://nextjs.org/) hooks\n\n12:29 - Variable interpolation\n\n12:59 - All-in-one frameworks\n  * [Laravel](https://laravel.com/) did it\n  * [CakePHP](https://cakephp.org/)\n  * [CodeIgnighter](https://codeigniter.com/)\n\n13:32 - Direct DB access\n  * SQL statements\n\n14:37 - Why do people hate PHP? \n* [WordPress](https://wordpress.org/)\n* Inconsistent API\n* Their first code was PHP and they sucked\n* PHP has come a long way\n* It used to not be safe\n* Blocking by default - no async/await\n\n17:48 - Why is JS still better?\n* Shared code between frontend and backend\n* Single language\n* Huge ecosystem (could be a con)\n\n## Links\n* [Syntax 267: Hasty Treat - Turbolinks + Server Generated HTML + JS Sprinkles](https://syntax.fm/show/267/hasty-treat-turbolinks-server-generated-html-js-sprinkles)\n* [https://vuejs.org/](https://vuejs.org/)\n* [https://www.hey.com/](https://www.hey.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'cd78777e9e407b47021558330f8cc41b9c1c9415d9cc6e37e10949c7649e0ac3', 'hasty-treat-spicy-takeout-php-is-good-and-we-re-just-re-creating-it', '/shows/393 - php.md', '2023-10-16 20:07:33.802', '2023-10-27 15:58:01.763', 'HASTY'),
('syntax_podcast_show_00394', 394, 'Potluck — Corn Shucking × Self-Hosting Images × WordPress × Getting Scammed × Portfolios', '2021-10-06 13:00:00.877', 'https://traffic.libsyn.com/syntax/Syntax394.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about corn shucking, self-hosting images, WordPress, getting scammed, portfolios, more!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Auth0 - Sponsor\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n02:55 - Hey guys, I love the podcast! This is a silly question and possibly the least important potluck question you\'ll ever get. When you get a new Apple device like an iPhone, Apple Watch, or Macbook Pro... do you keep the box? Why or why not?\n\n06:56 - Hey guys! Awesome podcast! Could you go over the advantages and disadvantages of using local images vs external images service (e.g. Cloudinary) for displaying images on a web app?\n\n11:26 - Heyyyy Scott and Wes! 40-year-old lady here looking to make a career change. It\'s taken me a year plus, but after building several tutorial React apps, I finally built a fullstack JavaScript app of my own, with lots of rad Postgres database stuff, a bunch of secure Node/Express API endpoints, role-based access control, fancy Oauth, and of course the latest React tech (context, hooks, etc). I\'m pretty proud of it. I even managed to configure Nginx and deploy it to AWS. The only problem is...it looks like crap. My portfolio site itself is pretty darn slick, since I used a gorgeous Gatsby template that required only a bit of tweaking. But the site I architected and worked so hard to bring to life? It looks like an 8-bit game for toddlers, a responsive yet Bootstrapy game. My question: does this matter? I would hope that this project shows off my backend skills, but I\'m afraid they\'ll judge a book by its cover. (I guess a second question would be: how *do* you show off your backend skills? I have a README in my repo, but will they actually read it? Or, can you be a fullstack React developer with no design skills?) I am very, VERY ready to apply to jobs (emotionally and financially), but I am terrified of making a fool of myself and worried I\'ll never get hired. I am completely self-taught and have just been plugging away at this on my own for the duration of the pandemic, so I send a massive thank you to you guys for the sense of community that your show provides! Props to Wyze sprinkler controllers!\n\n16:14 - Scott, I just finished your \"SvelteKit\" course and now I\'m working on \"Building Svelte Components\". I have some questions regarding testing. I was listening to an interview with Rich Harris on Svelte Radio and it\'s my understanding that the framework is trying not to be opinionated as far as testing. What are you doing as far as testing with SvelteKit? Do you have any recommended packages/plugins/libraries? I\'ve only ever written unit tests with Jest in Vue. I\'m loving Svelte, but I really want to work on writing tests as well. Basically, everything/anything you\'ve got on testing with SvelteKit would be much appreciated. I\'ve been listening to the show since forever, you guys are both awesome, shout out to Wes too, you\'ve both taught me so much! Thank you, peace, love, and happiness <3\n\n20:25 - Hi Wes and Scott, I am weak when it comes to dev ops. I would like to confidently set up and deploy my applications on AWS and manage dev/prod environments. Any course recommendations to learn how to do this and how it all works so I really understand? If you don\'t personally, can you tweet this out so other developers can share their thoughts?\n\n22:30 - You both have praised MDX in the past but why would you use it? I understand that it lets you put JSX in your Markdown, but that seems counter to the purpose of using Markdown files for content. Markdown is a portable format for static content and independent of any front-end framework. That makes it a good choice for writing posts and rendering them in any site. Once you inject a React component into it, doesn\'t that eliminate the portability and the static nature of Markdown? At that point, why not just have a dynamic website where you have complete control of how content is rendered? What are your thoughts?\n\n27:14 - Hey Scott and Wes! I, like you both, am a developer with young kids (I have 3 boys age 6 and under). Needless to say, my house has a lot of energy in it. My job is quite flexible, which I appreciate, because it gives me some freedom to structure my day in a way that helps out my family. My question for you both is this: as a web developer with a spouse and young kids working from home, how do you both maintain a healthy work-life balance (avoid working too much, find time for yourselves, family time, etc.) Thanks so much!\n\n33:46 - Should I write a portfolio site using just the three fundamentals (HTML, CSS, JS) or should I write them in something I am comfortable with such as Angular/React? Unsure if using a framework for a portfolio site is a good idea.	\n\n36:38 - How do you handle hosting when using WordPress as a headless CMS with something like Gatsby? WordPress needs good PHP hosting, while Gatsby needs good CI integration.\n\n38:52 - How frequently do you use `div` tags, versus trying to find a ‘better’ tag? Love the pod btw.\n\n40:48 - This is less of a question and more of a heads up for other listeners. Beware of scam job opportunities. I recently encountered a scam where they used a website that seemed like a very normal and reasonable job board for a major company. I went through the whole process until they asked for personal info, and I asked for verification of their person. They couldn\'t provide it so I left. But they had profiles matching the actual employees at the company. They had emails. They had an HR department and employees. They had a very legitimate operation going on. Make sure to take a second and verify with the company before giving away personal information or depositing any of their money into your account.\n\n47:38 - What percentage of North Americans keep their mobile device longer than three years? Five years? Eight years? I am a freelancer and I want to put a clause in my contract of what age of device my app will support, but I can\'t seem to find this information. Just more general answers like \"most people expect a phone to last two-three years.\"	\n\n## Links\n* [https://kit.svelte.dev/](https://kit.svelte.dev/)\n* [https://www.cypress.io/](https://www.cypress.io/)\n* [https://www.svelteradio.com/](https://www.svelteradio.com/)\n* [https://www.digitalocean.com/blog/](https://www.digitalocean.com/blog/)\n* [https://caddyserver.com/](https://caddyserver.com/)\n* [https://daringfireball.net/](https://daringfireball.net/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [LuLaRich](https://www.amazon.com/LuLaRich-Season-1/dp/B09CFXPNSX)\n* Wes: [Flame Bulb](https://amzn.to/3zq74e2)\n\n## Shameless Plugs\n* Scott: [Web Components For Beginners](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Beginner JavaScript Course](https://beginnerjavascript.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '52f7bfc6877fa3cd8f09c9f4277cc1b5c02e86ce19700ddf9422b78020f70169', 'potluck-corn-shucking-self-hosting-images-wordpress-getting-scammed-portfolios', '/shows/394 - potluck.md', '2023-10-16 20:07:33.848', '2023-10-27 15:58:01.814', 'TASTY'),
('syntax_podcast_show_00395', 395, 'Hasty Treat - Neat Things in CSS Color - Current and Coming!', '2021-10-11 13:00:00.825', 'https://traffic.libsyn.com/syntax/Syntax395.mp3', '\nIn this Hasty Treat, Scott and Wes talk about all things color in CSS, both current and coming soon!\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n04:39 - color-contrast()\n* Part of CSS5! Maybe.\n* The color-contrast() functional notation takes a color value and compares it to a list of other color values, selecting the one with the highest contrast from the list.\n\n06:01 - Accent color\n* [https://davidwalsh.name/css-accent-color](https://davidwalsh.name/css-accent-color)\n\n07:34 - currentcolor\n* [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentcolor_keyword](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentcolor_keyword)\n\n08:54 - Profiled color values - color()\n* [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color())\n\n11:00 - color-mix()\n* [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix()](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix())\n* The color-mix() functional notation takes two color values and returns the result of mixing them in a given colorspace by a given amount. \n* Would be handy for programmatically generating colors - 10% more blue for a border? Sure!\n\n14:18 - Space-separated functional color notations\n* `rgba(255 255 255 0)` instead of `rgba(255,255,255,0.5)`\n\n15:28 - RGB and HSL with Alpha\n* rgb() and hsl() can take alpha and percent values - `rgb(0 0 0 / 50%)` or `rgb(0 0 0 / 0.5)`\n\n18:22 - Hex + Alpha values\n* RRGGBBAA\n* How do you remember?!?!\n* Transparent\n\n21:49 - lch(), lab(), hwb() notation\n* CIELAB color space aka Lab is a color space.\n* A color space is an organization of colors in coordination color profiling supported by various physical devices, it supports reproducible representations of color\n* Lab is intended as perceptually uniform\n* Perceptually uniform - a perceptual uniform color space ensures that the difference between two colors (as perceived by the human eye) is proportional to the Euclidian distance within the given color space.\n* [https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/](https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/)\n\n## Links\n* [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) \n* [https://twitter.com/argyleink](https://twitter.com/argyleink)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '7dd8e8ad1e9a86fbd61e73c236db7ee0ea6499082e2ccf6ed69ed23089507087', 'hasty-treat-neat-things-in-css-color-current-and-coming', '/shows/395 - CSS Color.md', '2023-10-16 20:07:33.886', '2023-10-27 15:58:01.867', 'HASTY'),
('syntax_podcast_show_00396', 396, 'A Podcast on Running a Podcast', '2021-10-13 13:00:00.825', 'https://traffic.libsyn.com/syntax/Syntax396.mp3', '\nIn this episode of Syntax, Scott and Wes talk about running a podcast — recording, sponsoring, where to start, and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n01:45 - Recording Setup\n* Zoom to chat\n* Record on Zoom\n* Quicktime\n* Logic\n* [Riverside](https://riverside.fm/)\n* Wes:\n  * [Heil PR-40](https://www.amazon.com/PR-40-Dynamic-Studio-Recording-Microphone/dp/B000SOYOTQ)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A/r)\n* Scott:\n  * [Electro-Voice RE20](https://www.amazon.com/Electro-Voice-RE20-Broadcast-Microphone-Variable-D/dp/B00KCN83V8)\n  * [Cloudlifter](https://www.amazon.com/Cloud-Microphones-CL-1-Cloudlifter-1-channel/dp/B004MQSV04/)\n  * [dbx 286s](https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A/r)\n\n09:13 - Notes\n* Shows begin as a Notion doc\n* Big outlines with a point-based outline to where to go\n* Sometimes points are detailed, other times are just one-word reminders as to what to hit\n* Sponsors pulled from a Notion relational table\n* Shows are created in a kanban board but moved to a calendar view\n\n12:37 - How do you find stuff to talk about?!\n* Technical skills\n* Hasty\n* Tasty\n* Potluck\n* Game shows\n* Collabs\n  * [ShopTalk Collab](https://syntax.fm/show/374/shoptalk-x-syntax)\n  * [Changelog Collab](https://syntax.fm/show/392/changelog-frontend-feud)\n* Soft skills\n  * Productivity\n  * Apps\n* We Cooked It: Explainer Episode\n* Add ideas to the list anytime it pops into your head\n\n21:02 - Editing\n* [Podcast Royale](https://podcastroyale.net/)\n* We record a clap for syncing\n* Upload to Dropbox for our editors\n\n22:07 - Hosting \n* Libsyn\n  * Archaic feeling, but covers everything\n\n22:36 - The website\n* [Next.js](https://nextjs.org/)\n* Open source\n* PRs are submitted adding the latest episodes\n\n24:10 - Transcripts\n* Generated\n\n24:40 - Would you still start one?\n* Podcast vs YouTube vs Twitch\n\n29:20 - Getting popular / Marketing\n* How do you do it?\n* Consistency is key\n* Need external audience\n\n35:34 - Sponsors\n* Five to six hours per week in prep\n* Most of our sponsors are products we already used\n* We sell and manage all our sponsors ourselves\n\n42:17 - What about [Patreon](https://www.patreon.com/)?\n* Ad-free version?\n\n46:04 - Live shows\n* Confs\n* Livestream\n\n## Links\n* [Delicious Brains](https://deliciousbrains.com/)\n* [Syntax Ep 004: JavaScript Tooling](https://syntax.fm/show/004/javascript-tooling)\n* [LulaRich](https://www.amazon.com/LuLaRich-Season-1/dp/B09CFXPNSX)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Untold: Crime & Penalties](https://www.netflix.com/title/81026438)\n* Wes: [Roadrunner: A Film About Anthony Bourdain](https://www.amazon.com/Roadrunner-Film-About-Anthony-Bourdain/dp/B09BB55XXX)\n\n## Shameless Plugs\n* Scott: [All Courses](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c5e2b60d4ffcf0f25012253359bd10dbea6b2a106ef07702e831b15af2840251', 'a-podcast-on-running-a-podcast', '/shows/396 - podcasting.md', '2023-10-16 20:07:33.925', '2023-10-27 15:58:01.932', 'TASTY'),
('syntax_podcast_show_00397', 397, 'Hasty Treat - Handy Utility Functions with Just', '2021-10-18 13:00:00.303', 'https://traffic.libsyn.com/syntax/Syntax397.mp3', '\nIn this Hasty Treat, Scott and Wes talk about handy utility functions with Just!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n03:44 - What is Just?\n* [https://github.com/angus-c/just](https://github.com/angus-c/just)\n* No dependencies\n* It\'s written in JS, so you can copy+paste them if you really need it\n* Types available\n* [https://medium.com/@angustweets/just-a12d54221f65#.ljib0mfr5](https://medium.com/@angustweets/just-a12d54221f65#.ljib0mfr5)\n\n06:46 - Some nice ones\n* just-safe-set → deeply setting dynamic object properties\n  * `set(data, \'a.long[0].path\', value)`\n* object-typeof\n  * Why not use `typeof`?\n    * Everything is an object\n  * Why not use `array.isArray`?\n    * Handy to have a switch statement\n* just-*-case\n  * Camel, kebab, snake\n* just-compare\n\n10:54 - Why?\n* This is the NPM install of Stack Overflow copy+paste\n* Handy as hell\n* Battle-tested\n  * Lots of ways to do simple stuff\n  * Sometimes the simple stuff has weird edge cases - these are caught\n* Sometimes your checks can be messy\n  * Check if an object is empty\n  * 25 lines\n  * Just install it\n\n12:05 - Other\n* Great to learn and test yourself\n* There are tests for each function\n  * Run them\n  * See them fail\n  * Try and make it so all the tests pass without looking at the source\n\n## Links\n* [https://github.com/angus-c/just](https://github.com/angus-c/just)\n* [https://github.com/antony](https://github.com/antony)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '0e971f42125c0243413cea5da5ed666d851dff83b6b248d40294f71073fad981', 'hasty-treat-handy-utility-functions-with-just', '/shows/397 - utility functions.md', '2023-10-16 20:07:33.972', '2023-10-27 15:58:01.981', 'HASTY'),
('syntax_podcast_show_00398', 398, 'Potluck — Coding for Kids × MongoDB Hosting × NoMoreFoo × Best Cities for Dev Jobs × GraphQL Resolvers × Package Security × Prototypes and Portfolios × More!', '2021-10-20 13:00:00.303', 'https://traffic.libsyn.com/syntax/Syntax398.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about privacy policies, coding for kids, MongaDB hosting, cloud backups, system design, #NoMoreFoo, and much more!\n\n## Prismic - Sponsor\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n04:49 - Ben Lamers: Heyo Scott and Wes! I am building a web app currently with my brother, and I was wondering when we get to launch it how do you go about correctly writing/adding Terms of Use and Privacy Policy. I\'m assuming this may be quite different depending on the platform so maybe general resources or tips for this. Thanks!\n\n06:45 - Fumbles O\'Brian: Do you have any recommendations for teaching young children how to code? I have a 5-year-old niece in kindergarten who is absolutely fascinated watching me work, and I\'d like to start teaching her basic concepts when she\'s able to read/write better. For example, she loves watching me make UI changes in React, it blows her mind that changing letters on one screen changes what a website looks like.\n\n11:01 - Kenny: Gentlemen! Love this show and the content you put out. It keeps me occupied during my 5 and 6 mile runs.  Thank you both for working so hard to keep it active, I know it takes a lot of work. I\'m curious what you think about hosting your own MongoDB server? I\'m relatively new to Mongo but want to start working with it for smaller projects. I\'ve used MySQL for a decade, hosted online with shared hosting. Worked well for my relational db needs. Should I host my own Mongo when I\'m ready for production, or pay the reasonable costs for something like Linode or maybe even Atlas? I have experience in Linux (enough to get by) and have my own virtualization cluster that I can spin up a server in seconds, along with an enterprise level firewall for managing traffic to and from. I actually just spun up a docker server this week and have a Mongo container running on it, though it\'s not accessible outside my network. This is purely for my development environments. Despite the firewall, my concern is security. Is it worth paying for a trusted solution like Linode, or should I put a little time in locking down my own Mongo container for my own use? Thank you both! Keep up the great work.\n\n14:42 - Mike: Not a question but more of a rant... It\'s 2021, almost 2022, can we all stop using \'foo\' and \'bar\' and \'baz\' when teaching a programming concept? I applaud both of you because I don\'t recall seeing any of your content ever using such atrocious terms, however, I\'m sad to see other prominent educators in the web development community use these terms from time to time. I feel like there are so many better examples that we could use to explain a concept and the use of \'foo\' is just confusing to beginners. That\'s all, just wanted to get that off my chest. Thanks for a wonderful podcast! #nomorefoo\n\n18:53 - Amir: Hey Wes and Scott, thank you for your awesome podcast. What are the best cities in Canada and USA to get (more quantity, highest-paying) developer jobs?	\n\n23:44 - LW: Hi guys, I am finally starting to get into GraphQL and I don\'t get it. Specifically I am working to convert an existing REST API to GraphQL. This seems really tough and there is not much guidance out there on how to do it. The main part I am unsure of is how to write resolvers. If I use the existing query then GraphQL just seems like an over-engineered filter method. If I write an individual resolver for each column in the table - that\'s gonna be 100s of resolvers and super annoying to write. Have either of you ever moved something from REST to GraphQL? And, if so, how did you handle this?\n\n27:57 - Dan: How does someone learn and actually practice using these system design topics like load balancing, caching, and database sharding. I have never had the need to use some of these things in my day-to-day work, but recently been interviewing and in the system design portion of the interview I feel a little lost. I\'ve read about these topics and watched videos but haven\'t really seen how to implement these things. Any good resource recommendations?\n\n31:57 - Matt: How do you know if you can trust an NPM package, from an unknown developer, that does not have many GitHub stars and has relatively few downloads? (The repo that made me ask this question is [https://github.com/Wondermarin/react-color-palette](https://github.com/Wondermarin/react-color-palette)). NPM audit automatically runs when you install a package, do any of you ever use additional security checks?\n\n38:32 - Yosef: Hi I\'m a beginner front-end developer and I heard you saying that being able to copy prototypes is a valuable skill, so I found some Figma free template and I copied them, the question is can I put them in my portfolio or deploy them?\n\n40:00 - Nick: Hey dudes! I picked up a freelance project to make a brochure-style website and found myself having trouble to decide on what tools to pick for this site. I wanted to ask you and get your take, what tools/tech would you use to build a brochure site? By this, I mean the site should have mainly company information that is ideally editable by the stakeholders and has a contact form. Thanks!\n\n44:22 - Casey: Hi Scooter and Wild Wes! Why do I feel so dirty when I\'m forced to use negative values in CSS?\n\n45:45 - Gnommer: Do you use some cloud sync service to backup your directory with projects? I mean OneDrive, Dropbox etc. \nI tried to use it alongside with Git, and it just messed my files so badly. On the other side I feel very uncomfortable without any backup apart from Github. BTW, according to last Potluck: polish \'ł/Ł\' is pronounced like \'w\' in \'what a sick podcast you have\'. Best from Poland ;)\n\n## Links\n* [https://www.ryzerobotics.com/tello](https://www.ryzerobotics.com/tello)\n* [https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)\n* [https://snyk.io/](https://snyk.io/)\n* [https://deno.land/](https://deno.land/)\n* [https://kit.svelte.dev/](https://kit.svelte.dev/)\n* [https://astro.build/](https://astro.build/)\n* [https://www.gatsbyjs.com/](https://www.gatsbyjs.com/)\n* [https://www.dropbox.com/](https://www.dropbox.com/)\n* [https://www.backblaze.com/](https://www.backblaze.com/)\n* [https://www.synology.com/](https://www.synology.com/)\n* [https://support.apple.com/en-us/HT201250](https://support.apple.com/en-us/HT201250)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [The Way Down](https://play.hbomax.com/page/urn:hbo:page:GYS_1DQ3ANK29TgEAAAAg:type:series)\n* Wes: [Wooster Shortcut](https://amzn.to/300tlTT)\n\n## Shameless Plugs\n* Scott: [Modern GraphQL with Prisma](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '2b882566b2eeef07e40cbd431a958d9bb1e47a0deafb54f63dae09fd5b6d365a', 'potluck-coding-for-kids-mongodb-hosting-nomorefoo-best-cities-for-dev-jobs-graphql-resolvers-package-security-prototypes-and-portfolios-more', '/shows/398 - potluck.md', '2023-10-16 20:07:34.018', '2023-10-27 15:58:02.037', 'TASTY'),
('syntax_podcast_show_00399', 399, 'Hasty Treat - Hasty Horror Stories', '2021-10-25 13:00:00.889', 'https://traffic.libsyn.com/syntax/Syntax399.mp3', '\nIn this Hasty Treat, Scott and Wes talk about web dev horror stories — real things that have happened to real developers\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:36 - [https://twitter.com/CameronPak/status/1445051951843061767](https://twitter.com/CameronPak/status/1445051951843061767)\n\n04:48 - [https://twitter.com/susanlangenes/status/1445049321871712257](https://twitter.com/susanlangenes/status/1445049321871712257)\n\n05:29 - [https://twitter.com/DevJordanW/status/1445052979644706823](https://twitter.com/DevJordanW/status/1445052979644706823)\n\n06:12 - [https://twitter.com/HerbieDuah/status/1445088892177108994](https://twitter.com/HerbieDuah/status/1445088892177108994)\n\n07:04 - [https://twitter.com/bbbryan14/status/1445400072921956357](https://twitter.com/bbbryan14/status/1445400072921956357)\n\n07:43 - [https://twitter.com/stephendennis30/status/1445074683062362114](https://twitter.com/stephendennis30/status/1445074683062362114)\n\n07:59 - [https://twitter.com/Tim__Moran/status/1445102727701221377?s=20](https://twitter.com/Tim__Moran/status/1445102727701221377?s=20)\n\n08:37 - [https://twitter.com/SoyAlejandroAl/status/1445063677896450048](https://twitter.com/SoyAlejandroAl/status/1445063677896450048)\n\n09:34 - [https://twitter.com/sudonetizen/status/1445132694531231760](https://twitter.com/sudonetizen/status/1445132694531231760)\n\n11:09 - [https://twitter.com/chrislaughlin/status/1445049210840178690?s=20](https://twitter.com/chrislaughlin/status/1445049210840178690?s=20)\n\n11:58 - [https://twitter.com/sbitaxi/status/1445208793072156675](https://twitter.com/sbitaxi/status/1445208793072156675)\n\n12:44 - [https://twitter.com/AlexHBruns/status/1445067663919755269](https://twitter.com/AlexHBruns/status/1445067663919755269)\n\n13:05 - [https://twitter.com/costerad/status/1445069263568580616](https://twitter.com/costerad/status/1445069263568580616)\n\n14:02 - [https://twitter.com/gcnx86/status/1445045635250638853](https://twitter.com/gcnx86/status/1445045635250638853)\n\n14:25 - [https://twitter.com/JustMetMe_app/status/1445041678167920640](https://twitter.com/JustMetMe_app/status/1445041678167920640)\n\n14:47 - [https://twitter.com/alanshortis/status/1445048899899645959](https://twitter.com/alanshortis/status/1445048899899645959)\n\n15:50 - [https://twitter.com/Swizec/status/1445191324215353347](https://twitter.com/Swizec/status/1445191324215353347)\n\n16:17 - [https://twitter.com/_RobJohansen/status/1445137057236467722](https://twitter.com/_RobJohansen/status/1445137057236467722)\n\n17:14 - [https://twitter.com/fienen/status/1445040513678196743](https://twitter.com/fienen/status/1445040513678196743)\n\n17:57 - [https://twitter.com/TechBill777/status/1445172824822452226](https://twitter.com/TechBill777/status/1445172824822452226)\n\n18:54 - [https://twitter.com/Zircoz/status/1445041440770252806](https://twitter.com/Zircoz/status/1445041440770252806)\n\n## Links\n* [https://twitter.com/wesbos/status/1445039778035032068](https://twitter.com/wesbos/status/1445039778035032068) \n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'cb02201982d9f290ae0a6ad957bf6f995e07f09547dd18345c3ca8401ac57635', 'hasty-treat-hasty-horror-stories', '/shows/399 - horror stories.md', '2023-10-16 20:07:34.060', '2023-10-27 15:58:02.090', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00400', 400, 'Horror Web Dev Stories - 2021', '2021-10-27 13:00:00.889', 'https://traffic.libsyn.com/syntax/Syntax400.mp3', '\nFor episode 400, Scott and Wes talk about web dev horror stories - 2021 edition!\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Mux - Sponsor\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n02:54 - Hi guys, love the show. I wanted to share with you something that happened just the other day (Oct 4th), I was starting my new job today at a large tech company. They use React for everything (even DNS!, don\'t ask me how, it\'s complicated). I figured I\'d celebrate my first day and push some code to prod, (how hard could useEffect be right?) Next thing you know, they ended up bringing in a guy with an angle grinder to get access to the server cage.\n\n04:15 - No one from Denver can buy\n\n06:38 - Bug accidentally gives $90 million to users\n* https://www.cnbc.com/2021/10/01/defi-protocol-compound-mistakenly-gives-away-millions-to-users.html\n\n08:34 - Share Pointy Knives\n* Hi! I\'m a developer at a consulting firm in Sweden, writing C# on the backend and using React with either JavaScript or TypeScript and hosting things in Azure 99% of the time (and 1% in SharePoint). I was in my last week at my last job before I was due to start my new job. Worked 12 h/day to keep up with all the handovers etc. to colleagues so they would have a chance to continue working on the solutions I have taken care of. One project was a process tool hosted in SharePoint Online. The guy who would oversee it had -1% experience with SharePoint (which I pointed out to my bosses). But to make things a bit easier, I wrote a deploy script to ease things a bit. Starts the terminal and runs the script towards the acceptance environment. Umpteen million errors appear... Which is strange, because there would only be about 20 commands (which can cause errors like these). I log into the environment to double check if I now accidentally entered the wrong values in the script (which looked okay according to me). But I get a 404 error when I try to reach the environment... I log into the admin interface; I discover that the site is gone... Also checking the trash can, there are no things there. Very strange. I find that I\'m in a different folder than the one where I saved my script... In that folder there is an old deploy script that was used when the project was started a thousand years ago (which was not used after the project was \"finished\"). The first thing the script does is force delete the site and then try to create a new empty site... The site is gone with lists and everything (lists are a SharePoint thing, think of it as sql-lite), there are no backups of the acceptance environment (although it is very important). I just feel a little panicked about how I\'m going to solve this. However, I remember testing a tool six months ago to copy entire environments. Where the first attempt was made on the acceptance environment. Finds the cloned environment and can use the same tool to clone it back. It took only 8-12 hours of work to create all the new things done in the environment in the last 6 months instead of X number of hours to build everything from scratch.\n* Once I updated a feature that saves accessories on orders (same solution). However, I failed to add all the new fields to the production environment. Which meant that accessories were not saved at all... Which was discovered after a week... I fixed the error in 5 minutes and the sellers had to contact x number of customers to double check what kind of accessories they would have for their orders...\n\n11:22 - External HD\n* One time I needed to format a server. It was an outdated Windows server. I selected all the files and copied and pasted to an external hard drive. My drive was pretty fast and it took like a minute. I was like: “Wow! That’s a great external hd”. Formatted the server and, as soon as I realized it didn’t copy 10% of the files, I had that face. We all know that face. Anyways. Tried to restore the files using some HD recovery tools but they were all corrupted, not by the formatting itself but for the installation of the new OS. My boss was pissed! I was very young so I blame it on the server. I’m not proud of it. But why the heck they would ask a developer to format a server in the first place? By the way, my birthday is on Halloween. Spoooky.\n\n13:07 - Hey Loser\n* I was testing new code to automate mass-mailings to our customers. Who knows what demon drove me but I wrote the “test” mailings like ransom notes: “Dear loser! Fork over all your $$$ or else!” Well, all was looking great and I wa s feeling pretty pleased with myself. Progress bars were sliding and counters were spinning. But I could hear a rising commotion from the marketing guys behind me. Phones ringing, voices raised. Turns out I had moronically wired myself to the production database! Even worse for me, I’d only been at the company a month or two. I thought my goose was cooked and the Big Boss was plenty mad, but I owned up right away and apologized. We put out a cover story that we’d been hacked and all was forgiven.\n\n15:01 - HE HATE ME\n* I was part of the developer team that accidentally leaked the 8 cities the XFL, an alternate football league, a week before their press conference. [ewrestling.com/article/wwe-ac…](http://ewrestling.com/article/wwe-ac%E2%80%A6) We were using Contentful and Gatsby. A junior dev entered the information into the prod space instead of the UAT space and when we released some bug fixes, it picked up the contact us content update. I found out after seeing stories pop up in Google News when I was about to go to sleep. Was taking the content down when we started getting calls from the CIO of the WWE. The league went bust because of COVID.\n\n19:23 - I Don\'t Have Memory of This\n* I had two pretty bad code changes that only showed their problems when they went live in production. Around 6 years ago, I was running into a large performance issue with some of our queries running slowly against this giant DB. We were using JPA/Hibernate and we had a bunch of joins that were done lazily. I switched a few of them to eager so that they would create a single SQL statement instead of a bunch (or thousands). The change worked fine on my dev environment, QA, and staging. Staging was supposed to be representative of production. So we went live and within minutes the entire system went down because of out of memory errors. We quickly switched back to the lazy joins. We found out that staging had more memory and fewer DB records than production though they were supposed to be exactly the same.\n\n21:05 - Your Performance is Slowing us down\n* Back when VMWare was becoming a thing, like 2010 or so. I was working at an ecomm site and we were seeing slow performance between the app server and some data services. I decided to build a little multithreaded logger that could track when a query to Oracle Financials was running too slow and generate a warning. Oracle Financials was doing the credit card transactions, orders, and all the rest of the sites DB work. The code had no impact on my dev, QA, and staging environments. We were hitting well over our minimum number of concurrent users. We deployed it to production and then the system got slower and slower, but never crashed. Again, production and staging were set up differently. Staging was a bare-metal server. Production was running on an ESXi server on a host that was split 4 ways. The multi-threaded code meant to detect performance degradations was slowing the whole system down when it tried to synchronize data across threads. I was pretty embarrassed by both these two issues. It went to show that production is its own special thing and that you really don\'t know if your server-side code is really going to work until it starts running there.\n\n23:15 - Dead Button\n* Way back when mainframes were king, a guy I worked with pushed a button in, that if released, would immediately take down the entire company. He stood there for 4 hours, holding the button in, until we could let it crash after business hours. We gave him a chair after 2 hours.\n\n25:12 - No Deploys on Fridays\n* I was a junior dev working on our company\'s website. They were HTML + nunjucks templates that were later being integrated with the backend using some Python witchcraft. There was also a metric ton of JS libraries added (like Babra for page transitions, threejs for a cool interactive animation on the landing page etc.). Didn\'t really get much of all this package.json stuff at that seniority level. So after running yarn or npm or whatever, and seeing some warnings about a couple packages being outdated, I decided to update some of them. It ran great locally, but I didn\'t build the prod version, as I didn\'t know there could be any differences. I was working on some minor feature (or maybe even some minor bug) and the PM decided there\'s no time for code review. So I pushed it to the repo, the backend guy did his integration, and launched it on prod. As it turned out, there were some breaking changes in one of the libraries I decided to update. It crashed the entire site. On Friday. At 4:30PM. And that, kids, is why you don\'t deploy on Fridays.\n\n27:33 - Stupid Selfie\n* Horror story for you Wes. I work for one of the biggest retailers in the UK and we were working on an app that would go on a \'media wall\' in their flagship store in London. Basically a giant 200-inch screen in the middle of the store that social content can go on. Turns out that I left my local Dev version connected to the production API when I uploaded a couple of stupid selfies of my big head in the office. Get a call the next day to ask why my face is on the medial wall.\n\n28:37 - Soda\n* I was a computer operator back in the late 1960’s, operating a Honeywell mainframe. The consoles were huge, about the size of a dishwashing machine, with the console typewriter and printer inset in the middle, on top. I had a soft drink on the console, next to the typewriter mechanism. We were told never to bring a drink into the room but we all did it, especially on third shift. Long story short, someone called my name, I turned around and knocked the glass of soda into the console. Had to be completely replaced – machine was down for two days. My boss was not happy.\n\n31:22 - Oof\n* A bigger horror story. I had my own software company in the 90’s and was in Singapore, customizing my software package for Johnson & Higgins Insurance Brokers – I had their Asian contract for my Insurance Broker/Accounting package. I spent a good 40 hours on Saturday and Sunday, making all the changes they asked for, getting ready for a demo on Monday morning. I finished up about 4am on Monday morning and was cleaning up my files. All this work was done on a Novell server. Print files had an extension of .prt and I had a ton of them in the main directory from all of the testing I had done. I was cleaning out old files, getting ready to back everything up and I thought I would delete all of the print files. I mistakenly keyed in erase *.prg, instead of erase *.prt (or whatever the delete command was – can’t remember it now). Programming files have a .prg extension – I had deleted all of my updated files from the weekend. In desperation I called Novell in Utah, hoping they could help me recover the files, but no-go. The demo Monday morning was not fun.\n\n33:24 - Young Dev\n* I was a young dev right out of college. My first job was at a child support company where we had desktop apps that would handle case information more efficiently than using Excel. My first project was to write a POC that would later be implemented into a new, bigger app that consolidated all the “POCs” for various parts of the child support process. For some odd reason, I still don’t know why to this day, my boss wanted me to write this “new” app on top of an old app with a bunch of legacy code. I never understood why but as a young dev fresh out of school, you tend to just do what you’re told. In school, I mainly used PHP/HTML/CSS for learning how to work with a database; this job however used C#/.NET for their desktop apps so I was doing a lot of learning as I went. I remember finally learning how to connect to the database and run some SQL after fighting with this old pile of legacy code. In early versions, I chose to handle creates/updates for these records in the same function. My young, dumb self wrote a try catch statement that would attempt to create the record and if it failed, it would try to update the record. Before the first production release, I updated the flow to handle creates/updates in separate functions - but never removed the update in the catch block of the original function now used for creates only. Somehow I, or any PM/QA, never failed on a create and hit this catch block while testing. Fast-forward probably 9-12 months later, I got a ticket to investigate why every case’s data looked the same in Production. I login to the app, search a few case numbers and sure enough, every case’s data is the same. I began freaking out as I had no clue how this could’ve happened. I mean it had never happened in all the dev work, testing, and months of live Production use. After I investigated with a senior dev, we realized the try block had failed and the update query in the catch block ran for that record - we also realized that I left off the where clause in the related SQL query to specify which record needs updating - so ALL records got updated with this data. Thankfully, we kept regular back-ups and were able to restore the data to a recent timeframe without users losing a ton of work. We commented out that database update call and redeployed the code ASAP. Also the senior dev was cool about it and was like “hey, it happens to all of us at some point”. Let’s just say I’ve learned a ton since then and definitely steer clear from writing code like that. You live and you learn I suppose.\n\n38:40 - Where Wolf\n* Here’s my development tale of terror: One night I was burning the midnight oil trying to get caught up on a never-ending workload. At the time I was working for an online travel booking site. It was after 11, and the last thing I had to do for the night was to rename one of the hotels in our production database. So I wrote my query: `UPDATE hotels SET name=‘Some Hotel Chain’;` One problem, I FORGOT THE WHERE CLAUSE. Suddenly, over 5,000 hotels in our production database all had the same name. This was around 2003, so well before the time of point-in-time restores, and we were only backing up the database every week at that point. I was panicking. Fortunately, I had a dump of the production database that I had created only a couple of hours earlier sitting on my local hard drive. So thankfully, I was able to restore almost all of the hotel names, save for a couple that signed up after that data dump, and my boss was none the wiser. That’s when I learned that working late hours is not worth it, because at some point you are so tired that you can no longer make good decisions.\n\n41:19 - I Want Your Job\n* When I first started out I worked for a consultancy and they trained us in sales meetings to help managers get promoted because we were coming in to make them \"look good\". This was okay b/c obviously, we were coming in as a contractor; however, after being laid off due to 9/11 (yes, this was about 20 years ago), I was looking for a new job and during an interview when asked where I\'d like to be in X years, I mentioned to the hiring manager that I wanted to eventually do what he was doing. Well, I guess he didn\'t take it that I wanted to make him get promoted to then take his spot. Safe to say I didn\'t get hired. 🤦‍♂️😜\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [Portable Air Compressor](https://amzn.to/3atw3mP)\n* Wes: [ESR Magnet Phone Mount](https://amzn.to/3mJyLKB)\n\n## Shameless Plugs\n* Scott: [Latest courses on Prisma and Astro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '59fb8fbf54b3d03e22b990d5d9558a0f87622142a84a9f312af28cc270778791', 'horror-web-dev-stories-2021', '/shows/400 - horror stories.md', '2023-10-16 20:07:34.104', '2023-10-27 15:58:02.144', 'TASTY'),
('syntax_podcast_show_00401', 401, 'Hasty Treat - How to Setup a PNPM Monorepo', '2021-11-01 13:00:00.142', 'https://traffic.libsyn.com/syntax/Syntax401.mp3', '\nIn this Hasty Treat, Scott and Wes talk about PNPM and monorepos!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n4:40 - What is pnpm?\n* [https://pnpm.io/](https://pnpm.io/)\n* Performant npm\n* [https://www.youtube.com/watch?v=hiTmX2dW84E](https://www.youtube.com/watch?v=hiTmX2dW84E)\n* Find and remove node modules\n  *  [npkill](https://www.npmjs.com/package/npkill)\n  * `find . -name \"node_modules\" -type d -prune -exec rm -rf \'{}\' +`\n\n08:30 - Why monorepo?\n* Internal packages all in one place\n* Forks and custom packages easier\n* Commands that control everything at once\n\n10:33 - Workspaces\n* Not exclusive to pnpm\n* Yarn, npm, pnpm all have them now\n  * Different syntax\n```jsx\npackages:\n  - \"packages/**\"\n```\n\n12:48 - How it works in practice\n* All commands run through root\n* Use in host, hook up my monorepo to render run commands\n* Filter and recursive\n* `\"install:all\": \"pnpm recursive install\",`\n* `\"clean\": \"pnpm recursive exec -- rm -rf node_modules; rm shrinkwrap.yaml; rm -rf node_modules\",`\n* `\"ui:dev\": \"pnpm recursive run dev --filter @leveluptuts/ui\",`\n\n16:35 - Using submodules\n* [https://paigeniedringhaus.substack.com/p/march-2021-git-submodules](https://paigeniedringhaus.substack.com/p/march-2021-git-submodules)\n* Why submodules?\n* Public and private\n\n## Links\n* [https://www.npmjs.com/package/npx](https://www.npmjs.com/package/npx)\n* [https://yarnpkg.com/](https://yarnpkg.com/)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9eaca9867588496dc02762390fc893f3a282c3f298c69cc0ec23d021385095bd', 'hasty-treat-how-to-setup-a-pnpm-monorepo', '/shows/401 - pnpm.md', '2023-10-16 20:07:34.147', '2023-10-27 15:58:02.215', 'HASTY'),
('syntax_podcast_show_00402', 402, 'STUMP\'D Interview Questions - CSS Edition', '2021-11-03 13:00:00.142', 'https://traffic.libsyn.com/syntax/Syntax402.mp3', '\nIn this episode of Syntax, Scott and Wes are back with another edition of \"Stump\'d!\" where they try to stump each other with interview questions.\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Cloudinary - Sponsor\n[Cloudinary](https://cloudinary.com/?utm_source=Syntax.fm&utm_medium=Podcast&utm_content=Cloudinary_Syntax_podcast) is the best way to manage images and videos in the cloud. Edit and transform for any use case, from performance to personalization, using Cloudinary’s APIs, SDKs, widgets, and integrations.\n\n## Show Notes\n\n06:05 - Which property allows you to control the shape or appearance of the marker of a list?\n\n06:33 - What is a pseudo element? What is a pseudo class?\n\n09:15 - What is the difference between block, inline and inline-block elements?\n\n10:15 - What is a combinator selector?\n\n11:12 - What is specificity? How do you calculate specificity?\n\n14:37 - True or False — The translate() function can move the position of an element on the z-axis?\n\n16:44 - What is the difference between \"resetting\" and \"normalizing\" CSS?\n\n17:51 - How can you load CSS resources conditionally?\n\n19:45 - Is there any reason you\'d want to use translate() instead of absolute positioning, or vice-versa?\n\n22:30 - When to use CSS grid vs flexbox?\n\n25:12 - What are all eight @-rules in CSS?\n\n28:01 - Which property is used to underline, overline, and strikethrough text?\n\n29:52 - What is DOM reflow?\n\n32:14 - How do you serve your pages for feature-constrained browsers? What techniques do you use?\n\n34:00 - What is the property for controlling image-scroll?\n\n36:23 - What are the three different types of CSS gradients?\n\n## Links\n* [https://github.com/sudheerj/javascript-interview-questions](https://github.com/sudheerj/javascript-interview-questions)\n* [https://github.com/learning-zone/css-interview-questions](https://github.com/learning-zone/css-interview-questions)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [https://height.app/](https://height.app/)\n* Wes: [Anker Mini Car Charger](https://www.amazon.com/Anker-Charger-PowerDrive-Adapter-iPhone/dp/B07PGT7LSR/)\n\n## Shameless Plugs\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [Advanced React Course](https://advancedreact.com/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '0772f3cba5431f4c458d8a181587ceca98108b3dec675324cb5b5ebd1473650b', 'stump-d-interview-questions-css-edition', '/shows/402 - stumpd.md', '2023-10-16 20:07:34.181', '2023-10-27 15:58:02.265', 'TASTY'),
('syntax_podcast_show_00403', 403, 'Hasty Treat - What\'s the deal with Astro?', '2021-11-08 14:00:00.049', 'https://traffic.libsyn.com/syntax/Syntax403.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Astro — what it is and why you should check it out!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n03:08 - What is it, what does it do?\n* Framework for server-first static apps\n* Use any front-end framework\n* Does not ship JS unless you explicitly define a component to ship JS\n\n05:20 - The syntax\n* .astro files is a mash-up of Svelte and React\n* Frontmatter for server-side JS\n* Template syntax is basically JSX\n* TS baked in\n\n```html\n<!-- Hydrates on load -->\n<!-- <Test client:load  /> -->\n\n<!-- Hydrates after main thread is free -->\n<!-- <Test client:idle  /> -->\n\n<!-- Hydrates as it\'s in viewport aka LazyLoading-->\n<!-- <Test client:visible  /> -->\n\n<!-- Hydrate when matching media query -->\n<!-- <Test client:media={\'(max-width: 600px)\'}  /> -->\n\n<!-- Only renders on the client -->\n<!-- <Test client:only  /> -->\n```\n\n07:48 - State management\n* In client-side JS only, no state in .astro files\n\n10:50 - CSS \n* Svelte style\n* Local, scoped <style> tags\n* SCSS baked in\n\n11:16 - Data fetching\n* Fetch in frontmatter via fetch()\n\n12:06 - Vs React? Vs Next? Vs Gatsby? Vs Svelte?\n\n15:24 - Tooling\n* There is a Syntax highlighter\n* Uses Snowpack under the hood\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '883185e1f70fd5f196acab9724410849ca089ee0f17222c896cc847de67f9442', 'hasty-treat-what-s-the-deal-with-astro', '/shows/403 - astro.md', '2023-10-16 20:07:34.219', '2023-10-27 15:58:02.314', 'HASTY'),
('syntax_podcast_show_00404', 404, 'Web Containers, StackBlitz, and Node.js in the Browser with Tomek Sulkowski', '2021-11-10 14:00:00.049', 'https://traffic.libsyn.com/syntax/Syntax404.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Tomek Sulkowski about web containers, StackBlitz and more!\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Guests\n* [Tomek Sulkowski](https://twitter.com/sulco)\n\n## Show Notes\n02:45 - What is StackBlitz?\n\n05:28 - What makes it different?\n\n08:20 - How does offline work?\n\n12:18 - What are web containers? How does this fit in? \n\n17:45 - How does this all work (WASM, Node.js in the browser, etc.)?\n\n21:00 - What does performance look like?\n\n31:06 - What about VS Code extensions? \n\n32:48 - Monorepos?\n\n35:12 - Databases? Sqlite? \n\n35:36 - Are there any limitations? \n\n37:02 - What is Turbo?\n  \n40:58 - How is this different from similar apps?\n\n## Links\n* [https://stackblitz.com/](https://stackblitz.com/)\n* [https://jsbin.com/?html,output](https://jsbin.com/?html,output)\n* [https://jsfiddle.net/](https://jsfiddle.net/)\n* [https://codepen.io/](https://codepen.io/)\n* [https://code.visualstudio.com/](https://code.visualstudio.com/)\n* [Fugu API Tracker (fugu-tracker.web.app)](https://fugu-tracker.web.app/)\n* [https://www.docker.com/](https://www.docker.com/)\n* [https://spidermonkey.dev/](https://spidermonkey.dev/)\n* [https://github.com/chakra-core/ChakraCore](https://github.com/chakra-core/ChakraCore)\n* [https://sli.dev/](https://sli.dev/)\n* [https://vscode.dev/](https://vscode.dev/)\n* [https://codesandbox.io/](https://codesandbox.io/)\n* [https://www.gitpod.io/](https://www.gitpod.io/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [HaloLock Universal Ring](https://amzn.to/3BfTuuF)\n* Wes: [Car LED Light Upgrade](https://amzn.to/3GjtUZq) \n* Tomek: [The Dresden Files](https://amzn.to/3jCAL6F)\n\n## Shameless Plugs\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n* Tomek [StackBlitz](https://twitter.com/stackblitz)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bdfe716a27cace872a62db1072404aed2fdb0836653963944bef3bbebbb9d8fd', 'web-containers-stackblitz-and-node-js-in-the-browser-with-tomek-sulkowski', '/shows/404 - tomek.md', '2023-10-16 20:07:34.260', '2023-10-27 15:58:02.364', 'TASTY'),
('syntax_podcast_show_00405', 405, 'Hasty Treat - Next.js 12', '2021-11-15 14:00:00.119', 'https://traffic.libsyn.com/syntax/Syntax405.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Next.js 12 and all of its hot new goodness and updates!\n\n## Sanity - Sponsor\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n04:00 - **[Rust Compiler](https://nextjs.org/blog/next-12#faster-builds-and-fast-refresh-with-rust-compiler)**: ~3x faster Fast Refresh and ~5x faster builds\n\n06:25 - **[Middleware (beta)](https://nextjs.org/blog/next-12#introducing-middleware)**: Enabling full flexibility in Next.js with code over configuration\n\n08:16 - **[React 18 Support](https://nextjs.org/blog/next-12#preparing-for-react-18)**: Native Next.js APIs are now supported, as well as suspense\n\n09:56 - **[`<Image />` AVIF Support](https://nextjs.org/blog/next-12#smaller-images-using-avif)**: Opt-in for 20% smaller images\n\n11:58 - **[Bot-aware ISR Fallback](https://nextjs.org/blog/next-12#bot-aware-isr-fallback)**: Optimized SEO for web crawlers\n\n13:10 - **[Native ES Modules Support](https://nextjs.org/blog/next-12#es-modules-support-and-url-imports)**: Aligning with the standardized module system\n\n14:39 - **[URL Imports (alpha)](https://nextjs.org/blog/next-12#url-imports)**: Import packages from any URL, no installs required\n\n## Links\n* [https://twitter.com/mattgperry](https://twitter.com/mattgperry)\n* [Introducing Middleware](https://nextjs.org/blog/next-12#introducing-middleware)\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '23ef16f15cd49ff8ba9b5b319a09d5a33988550fe490d6d67c492ad7d889ae64', 'hasty-treat-next-js-12', '/shows/405 - nextjs.md', '2023-10-16 20:07:34.300', '2023-10-27 15:58:02.498', 'HASTY'),
('syntax_podcast_show_00406', 406, 'Potluck — Copilot × Glasses × Databases × Dealing with Stress × Employment vs Self-Employment × Auth in GraphQL × Headless CMS × More!', '2021-11-17 14:00:00.119', 'https://traffic.libsyn.com/syntax/Syntax406.mp3', '\nIt\'s another Potluck! In this episode, Scott and Wes answer your questions about GitHub Copilot, glasses, databases, dealing with stress, self-employment vs employment, design, CORS, and much more!\n\n## Linode - Sponsor\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n03:12 - Ders: Has GitHub Copilot become part of your daily workflow, or have you turned it off?\n\n05:50 - Gaston Gmzi: Hey guys you rock!!! I’d like to know if you use eyeglasses and if you have any preference regarding models, design and features like blue-light blocking and anti-reflection. Also, where do you buy them? Do you go to a store to try them out, or do you buy them online? And if ordering online, which specifications do you use besides the doctor’s prescription? If you guys have any sick picks about eyeglasses it would be great to hear it too. Thanks for the show and have a great week!!!\n\n11:04 - Hi, I would like to know how the two of you deal with stress? I am a freelancer and sometimes clients can get the worst in me. When they do, I usually take a long walk and listen to a podcast, but I don\'t always have the time for that. I can actually go into my commit history and show which one was under stress. I think a lot of developers especially freelancers could benefit from that. Thanks.\n\n16:47 - Mike Varela: Question for you guys about dynamic database fields and API requests. How do you let the user store dynamic metadata? Thanks. Love the show, avid listener.\n\n21:04 - Valentine Michael Smith: Can you touch on the use of the word “grok” in the dev world? I know a lot of people who have no idea what this word means. I just happened to have tried to read Stranger in a Strange Land, the novel the word originated from, a few years ago or else I wouldn’t have ever heard it before starting dev work. Have either of you read the book? Anyways, why do devs say this?\n\n24:50 - Steve Lewis: If you guys were not self-employed, would you prefer to work for a big company (like FAANG) or go to a smaller agency or startup, etc.?\n\n27:08 - So Many Localhost Errors: This may be a softball, but how do you set up your logging (Sentry and/or LogRocket) so your dev environment isn\'t firing all the time? I can\'t seem to find a way to do this well (and it\'s probably because I\'m trying to learn as I go). \n\n31:03 - Josh J from Jersey: Hey guys, loving the podcast, I\'ve been listening for about a month but bingeing through your episodes during my mind-numbing warehouse job, helps me keep my mind on JavaScript and what I have managed to learn in my spare time. I was wondering, when you\'re sitting down to a new project, how do you design the website? Does it just slowly develop as you code or have you sat down and drawn out what you want it to look like ahead of time? I have heard talk of a remarkable pad. I\'ve seen ads for this on Instagram and YouTube but always assumed it was a very gimmicky thing. Is this a good investment? Also wondering how you both met? Have you worked on any projects together outside of courses and Syntax? Keep the content coming!\n\n38:14 - Andras: Hi Wes and Scott. You have talked a lot on the show about headless CMS\'s like Sanity, Prismic or even WordPress being used as a headless CMS. I am curious what the setup in a real world project is like. How would you host the CMS? And what will the admin surface look like? Will the button styles, background color etc. be different than the actual website that the end user sees? Is that a problem for the admin users? Does the admin user see all the menu for creating new content types or adding new features? Or do they only see the input fields of all the contents that can be added to a specific page? Thank you!\n\n42:14 - Dave: Hey guys, love the podcast! I understand that CORS prevention is in place in the browser to help improve security/prevent malicious requests across domains, but I don\'t understand why you can get around this by performing the request server side, for example via cURL? If I were a malicious actor, surely I could just send my cross domain request through a proxy to avoid the CORS issue? I\'m sure I\'m missing something obvious here, can I please get your thoughts on this?\n\n44:48 - Lemon: How do you implement authentication with GraphQL? Especially in Fastify, I know Scott recently moved over from Meteor to Fastify, so I too was checking Fastify but couldn\'t find a satisfying auth solution that fits well with GraphQL.\n\n48:08 - Zack Vogel: I love when you play games on the podcast. I\'m a high school technology teacher and I play a game with my students called the 5 Second Rule. It\'s based on a board game, but I have changed the topics to technology-themed questions. The game works like this. One person reads a topic \"Name Three VS Code Extensions\" and the other person has five seconds to respond with three correct answers.\nI think this could be a fun game to play on the podcast. \n\n## Links\n* [http://www.seeeyewear.com/](http://www.seeeyewear.com/)\n* [https://www.warbyparker.com/](https://www.warbyparker.com/)\n* [https://www.costco.com/](https://www.costco.com/)\n* [MariaDB dynamic columns](https://mariadb.com/kb/en/library/dynamic-columns/)\n* [https://en.wikipedia.org/wiki/Grok](https://en.wikipedia.org/wiki/Grok)\n* [https://twitter.com/argyleink](https://twitter.com/argyleink)\n* [https://remarkable.com/](https://remarkable.com/)\n* [https://figma.com/](https://figma.com/)\n* [https://graphql.org/](https://graphql.org/)\n* [https://www.meteor.com/](https://www.meteor.com/)\n* [https://www.fastify.io/](https://www.fastify.io/)\n* [https://docs.google.com/presentation/d/1oRqz1rSUXiLc5pJF2cMygNrodcRrRU77x0KdWGV67Iw/edit?usp=sharing](https://docs.google.com/presentation/d/1oRqz1rSUXiLc5pJF2cMygNrodcRrRU77x0KdWGV67Iw/edit?usp=sharing)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n* Scott: [myQ Chamberlain Smart Garage Control](https://amzn.to/3mxqIl2) \n* Wes: [ATOTO Head Unit](https://amzn.to/31bh9zY)\n\n## Shameless Plugs\n* Scott: [Level Up Tutorials Pro](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats!\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'fa812ee2ae7229a61cc60b45dac73718fcc699a789846904264ee4088a1c4064', 'potluck-copilot-glasses-databases-dealing-with-stress-employment-vs-self-employment-auth-in-graphql-headless-cms-more', '/shows/406 - potluck.md', '2023-10-16 20:07:34.347', '2023-10-27 15:58:02.549', 'TASTY'),
('syntax_podcast_show_00407', 407, 'The Macbook Pro Show - Wes and Scott Get New Laptops', '2021-11-22 12:00:00.146', 'https://traffic.libsyn.com/syntax/Syntax_-_407.mp3', '\nIn this Hasty Treat, Wes and Scott talk about their new Apple MacBook Pro\'s with the M1 Max CPU.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[04:30](#t=04:30)** The last time we upgraded\n* **[07:05](#t=07:05)** Initial thoughts on new MacBook Pro\n* [Apple MacBook Pro](https://www.apple.com/macbook-pro/)\n* **[09:23](#t=09:23)** How much RAM you might need\n* **[11:33](#t=11:33)** M1 Pro or M1 Max?\n* **[12:37](#t=12:37)** Justification as a business expense\n* [Figma](https://www.figma.com)\n* [Sketch](https://www.sketch.com)\n* [We recently found that the new 2021 M1 MacBooks cut our Android build times in half.](https://twitter.com/softwarejameson/status/1455971162060697613)\n* [VS Code](https://code.visualstudio.com)\n* [Microsoft releases M1-native Visual Studio Code for developing apps](https://appleinsider.com/articles/21/03/05/microsoft-releases-m1-native-visual-studio-code-for-developing-apps)\n* [Notion](https://notion.so)\n* [Height](https://height.app)\n* [Sublime Text](https://www.sublimetext.com)\n* **[14:52](#t=14:52)** Shortening the feedback cycle\n* **[15:57](#t=15:57)** Using VS Code\n* **[21:20](#t=21:20)** Video editing on M1 MacBook Pro\n* [Mkbhd - M1 Macbook Pro review](https://www.youtube.com/watch?v=rr2XfL_df3o&t=1s)\n* [Synology](https://www.synology.com)\n* [Syntax.fm Ep220 The Synology Show](https://syntax.fm/show/220/the-synology-show-backups-and-home-server)\n* [Recut](https://getrecut.com)\n* [Davinci Resolve](https://www.blackmagicdesign.com/products/davinciresolve/)\n* **[24:27](#t=24:27)** Screenflow export comparison\n* [Screenflow](https://www.telestream.net/screenflow/)\n* **[29:32](#t=29:32)** VS Code improvements\n* [SWC](https://github.com/swc-project/)\n* [pnpm](https://pnpm.io)\n* **[32:57](#t=32:57)** The tools are no longer the bottleneck\n* **[33:37](#t=33:37)** Hardware upgrades\n* **[34:10](#t=34:10)** The notch\n* [Bartender](https://www.macbartender.com)\n* **[36:11](#t=36:11)** macOS icons have more padding\n* **[37:03](#t=37:03)** Charging and battery\n* [TS3 Plus](https://www.caldigit.com/ts3-plus/)\n* **[38:32](#t=38:32)** Fans and heat\n* **[39:18](#t=39:18)** Touch bar is gone\n* **[39:36](#t=39:36)** External displays\n* **[41:03](#t=41:03)** Battery\n* **[41:54](#t=41:54)** LG Display issue\n* **[42:51](#t=42:51)** Touch ID reader in a better spot\n* **[43:25](#t=43:25)** What\'s happening to your old MacBook Pro?\n* **[45:21](#t=45:21)** Ports and keyboards\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd0ee12a17f4bc752f2b6f2fc115c5c6335a822e546f6b01b10b6970dc6bcb4d4', 'the-macbook-pro-show-wes-and-scott-get-new-laptops', '/shows/407 - new laptops.md', '2023-10-16 20:07:34.393', '2023-10-27 15:58:02.597', 'HASTY'),
('syntax_podcast_show_00408', 408, 'Troubleshooting', '2021-11-24 12:00:00.318', 'https://traffic.libsyn.com/syntax/Syntax_-_408.mp3', '\nIn this episode of Syntax, Scott and Wes talk about ways they troubleshoot issues with their code.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Mux - Sponsor\n\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n\n* [@jimbomoso - Do you know of any resources for developing/improving code trouble shooting?](https://twitter.com/jimbomoso/status/1450473674709127174)\n* **[01:13](#t=01:13)** Furniture shortages\n* **[02:29](#t=02:29)** Managing stuff\n* **[03:05](#t=03:05)** Basic troubleshooting skills are missing\n* **[06:09](#t=06:09)** Sanity check\n* [CodePen](https://codepen.io/)\n* [Codesandbox](https://codesandbox.io)\n* **[08:05](#t=08:05)** Isolate the issue\n* **[08:57](#t=08:57)** Commenting out code is free\n* **[12:17](#t=12:17)** Replicate the issue\n* **[15:07](#t=15:07)** Svelte and VS Code error\n* [Svelte](https://svelte.dev)\n* [VS Code](https://code.visualstudio.com)\n* **[17:02](#t=17:02)** Wes\' course upgrades\n* [Parcel 2](https://parceljs.org/blog/v2/)\n* [Patch package](https://www.npmjs.com/package/patch-package)\n* **[18:07](#t=18:07)** Sponsor: Logrocket\n* **[19:15](#t=19:15)** Rollback\n* **[20:30](#t=20:30)** Reading the error message\n* [Syntax 47 - How to Get Better at Debugging](https://syntax.fm/show/047/how-to-get-better-at-debugging)\n* [Syntax 152 - Debugging Tools](https://syntax.fm/show/152/debugging-tools-tips)\n* **[23:59](#t=23:59)** Crack open the node modules directory\n* **[26:06](#t=26:06)** Sponsor: Freshbooks\n* **[27:29](#t=27:29)** Write step by step comments to the code\n* **[29:01](#t=29:01)** Consider outside sources\n* **[30:56](#t=30:56)** Using the right tools for the job\n* **[33:19](#t=33:19)** Rubber ducking it\n* **[34:16](#t=34:16)** Wes\' Big Mouth Bass story\n* **[37:20](#t=37:20)** Scott\'s blown away by his leaf blower\n* **[39:56](#t=39:56)** Copy paste a message into Google\n* [Twitter - What are your tips for troubleshooting code or a system that doesn\'t work?](https://twitter.com/syntaxfm/status/1457736861976252416)\n* **[41:33](#t=41:33)** Logs and metrics\n* **[42:36](#t=42:36)** CI CD issues and Error Handler\n* **[43:41](#t=43:41)** Using a step debugger\n* **[44:24](#t=44:24)** Explain what\'s happening to someone else\n* **[45:31](#t=45:31)** Read the documentation\n* **[47:05](#t=47:05)** Take a break, have a cuppa\n* **[48:42](#t=48:42)** Sponsor: Mux\n* **[50:57](#t=50:57)** SIIIIICK PIIICKS\n* **[57:05](#t=57:05)** Shamless plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Forehead](https://goodsnooze.gumroad.com/l/nASbe)\n* Wes: [EGO EXINNO 240W/120W Chargers](https://www.kickstarter.com/projects/e-fusion/ego-exinno-240w-120w-the-king-of-charger?ref=9geph8)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 25%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Use the coupon code \'Syntax\' for $10 off!\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e89e646c40f3956f3f646a1cb5bbd3bf3ef0dbea469f8e2f4b65a39f324a3464', 'troubleshooting', '/shows/408 - troubleshooting.md', '2023-10-16 20:07:34.438', '2023-10-27 15:58:02.649', 'TASTY'),
('syntax_podcast_show_00409', 409, 'Github Co-pilot is Gonna Take ur Job', '2021-11-29 14:00:00.902', 'https://traffic.libsyn.com/syntax/Syntax_-_409.mp3', '\nIn this Hasty Treat, Wes and Scott talk about their experiences using Github Co-pilot.\n\n## Sponsor - LogRocket\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sponsor - Freshbooks\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n* **[00:58](#t=00:58)** Wake up early and let\'s go\n* **[02:19](#t=02:19)** Sponsor: LogRocket\n* **[03:21](#t=03:21)** Sponsor: Freshbooks\n* **[03:56](#t=03:56)** What is Github Co-Pilot?\n* [GitHub Co-Pilot](https://copilot.github.com)\n* **[06:01](#t=06:01)** Scott is a GitHub Star\n* **[07:03](#t=07:03)** Examples of GitHub Co-Pilot usage\n* **[09:43](#t=09:43)** Writing pseudo code\n* [Emmet](https://www.emmet.io)\n* **[12:51](#t=12:51)** Using it for loop callbacks\n* **[13:52](#t=13:52)** What langauges does GitHub Co-Pilot work with?\n* **[14:54](#t=14:54)** It plays nice with HTML files\n* **[15:48](#t=15:48)** Svelte component example\n* **[16:31](#t=16:31)** Benefits for course creators\n* **[17:35](#t=17:35)** Some scary things\n* **[21:04](#t=21:04)** Could GitHub start charging for this?\n* **[22:30](#t=22:30)** Good at writing types\n* **[23:59](#t=23:59)** Gripes\n* **[24:54](#t=24:54)** Converting code to Parcel 2\n* [Parcel](https://parceljs.org)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '78cc2170adc37846450616dafc0afb7b97caba8c39876ec211757257cf337a30', 'github-co-pilot-is-gonna-take-ur-job', '/shows/409 - Github Co-pilot is Gonna Take ur Job.md', '2023-10-16 20:07:34.485', '2023-10-27 15:58:02.703', 'HASTY'),
('syntax_podcast_show_00410', 410, 'Everything in web dev is Amazing!', '2021-12-01 06:08:00.801', 'https://traffic.libsyn.com/syntax/Syntax_-_410.mp3', '\nIn this episode of Syntax, Scott and Wes talk about all the things that have improved the lives of web developers over the years.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[00:16:18](#t=00:16:18)** Topic introduction\n* **[01:03:00](#t=01:03:00)** Leaf blowing and house updates\n* **[02:57:01](#t=02:57:01)** We complain a lot\n* **[04:13:22](#t=04:13:22)** Typescript improvements\n* **[06:20:00](#t=06:20:00)** Optional chaining\n* **[07:01:06](#t=07:01:06)** Async, Await and Promises\n* **[07:57:05](#t=07:57:05)** Array methods and tools for immutability\n* **[09:13:16](#t=09:13:16)** DOM interactions with getElementBy\n* **[10:34:10](#t=10:34:10)** Arrow functions\n* **[11:13:06](#t=11:13:06)** Classes! + All of ES6 was a huge breath of fresh air\n* **[12:18:07](#t=12:18:07)** Looping\n* **[13:22:00](#t=13:22:00)** Prettier Code is a huge game changer\n* [Prettier](https://prettier.io)\n* [ESLint](https://eslint.org)\n* **[15:51:00](#t=15:51:00)** Sponsor: Freshbooks\n* **[17:04:15](#t=17:04:15)** CSS updates\n* **[17:41:11](#t=17:41:11)** CSS Variables\n* **[18:41:15](#t=18:41:15)** Flexbox and Grid\n* **[20:16:10](#t=20:16:10)** VH, VW units\n* **[20:47:24](#t=20:47:24)** Overflow scroll on mobile\n* **[21:54:10](#t=21:54:10)** Color formats\n* **[23:08:06](#t=23:08:06)** Sticky headers\n* **[23:45:06](#t=23:45:06)** HTML 5\n* [Introducing HTML5 By Bruce Lawson and Remy Sharp](https://introducinghtml5.com)\n* [A Book Apart](http://abookapart.com)\n* **[27:54:00](#t=27:54:00)** Web components\n* **[28:29:09](#t=28:29:09)** Sponsor: Sentry\n* **[30:01:17](#t=30:01:17)** Tooling\n* [Syntax 12 Why Is Everyone Switching to VS Code?](https://syntax.fm/show/012/why-is-everyone-switching-to-vs-code)\n* **[31:28:13](#t=31:28:13)** Speed of latest crop → ESBuild, Vite, Snowpack, parcel\n* [Vite](https://vitejs.dev)\n* [Snowpack](https://www.snowpack.dev)\n* **[33:33:03](#t=33:33:03)** Image compression\n* **[37:08:21](#t=37:08:21)** Hot module reloading\n* **[39:11:09](#t=39:11:09)** Image resizing, video hosting, accepting credit cards\n* [Gatsby](https://www.gatsbyjs.com)\n* [Cloudinary](https://cloudinary.com)\n* [Spritecow](http://www.spritecow.com)\n* [SmushIt](https://imgopt.com)\n* [Stripe](https://stripe.com/en-ca)\n* [Braintree](https://www.braintreepayments.com)\n* [Entrepreneur friendly licensing](https://twitter.com/BradLedford/status/1460273531111886848)\n* **[39:48:18](#t=39:48:18)** Entrepreneur friendly licensing\n* **[40:43:18](#t=40:43:18)** Sponsor: Linode\n* **[42:11:10](#t=42:11:10)** Developer Tools in the browser\n* [Tweet from @Bentlegen](https://twitter.com/bentlegen/status/1390376979678076930)\n* [Chris Coyier - Let’s Suck at Github Together](https://css-tricks.com/video-screencasts/101-lets-suck-at-github-together/)\n* [Chrome.io](https://chrome.io)\n* **[43:52:17](#t=43:52:17)** Insights into errors and troubleshooting\n* **[44:49:13](#t=44:49:13)** Cross browser and cross device testing\n* **[47:12:19](#t=47:12:19)** Hosting and SSL Certificates\n* **[48:14:08](#t=48:14:08)** Scaling up\n* **[49:53:13](#t=49:53:13)** Scaling with containers\n* **[50:14:09](#t=50:14:09)** When did we start using Github?\n* **[53:52:12](#t=53:52:12)** ××× SIIIIICK ××× PIIIICKS ××× Scott\n* **[59:42:22](#t=59:42:22)** ××× SIIIIICK ××× PIIIICKS ××× Wes\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Tonal](https://www.tonal.com)\n* Wes: [Reboot your Portfolio](https://amzn.to/30uILQJ) / [Canadian Couch Potato](https://canadiancouchpotato.com)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '235bbad805cc1879c3e778c79c8f76c86e4ca2e1ee289c7db490ee36b06f78f8', 'everything-in-web-dev-is-amazing', '/shows/410 - title.md', '2023-10-16 20:07:34.517', '2023-10-27 15:58:02.779', 'TASTY'),
('syntax_podcast_show_00411', 411, 'Meta Tags', '2021-12-06 14:00:00.774', 'https://traffic.libsyn.com/syntax/Syntax_-_411.mp3', '\nIn this Hasty Treat, Wes and Scott talk about Meta Tags.\n\n## Sponsor - Sanity\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sponsor - Sentry\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* [Syntax 379 - The Link Tag](https://syntax.fm/show/379/hasty-treat-the-weird-and-wonderful-less-than-link-greater-than-tag)\n* **[01:24](#t=01:24)** Sponsor: Sanity\n* **[02:50](#t=02:50)** Sponsor: Sentry\n* **[04:28](#t=04:28)** What are Meta Tags?\n* **[05:01](#t=05:01)** What is charset?\n* **[07:41](#t=07:41)** The viewport tag\n* [That’s a Nice Touch on TikTok](https://www.tiktok.com/@thatsanicetouch)\n* **[10:25](#t=10:25)** SEO and page data\n* **[12:03](#t=12:03)** Browser display tags\n* **[14:20](#t=14:20)** Dead tags\n* **[16:24](#t=16:24)** Robot tags\n* **[17:53](#t=17:53)** Adult ratings tag\n* **[18:18](#t=18:18)** Google site verification tags\n* [Google Verification tags](https://developers.google.com/search/docs/advanced/crawling/special-tags)\n* **[19:35](#t=19:35)** Open Graph social tags\n* [Facebook Meta tags](https://developers.facebook.com/tools/debug/)\n* [Open Graph](https://ogp.me)\n* **[22:54](#t=22:54)** Generator tag\n* **[25:54](#t=25:54)** http-equiv tag\n* [http equiv](https://www.w3schools.com/tags/att_meta_http_equiv.asp)\n* **[27:20](#t=27:20)** Apple specific tags\n* [Apple specific tags](https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '97ad8289b60d7f8526b20280081f21fbc4e07073237d0809cff93326a75f95b3', 'meta-tags', '/shows/411 - Meta tags.md', '2023-10-16 20:07:34.557', '2023-10-27 15:58:02.832', 'HASTY'),
('syntax_podcast_show_00412', 412, 'JavaScript and Hardware × Cars, Factories, Heavy Industry, Robots, and the Internet of Things', '2021-12-08 12:00:15.142', 'https://traffic.libsyn.com/syntax/Syntax_-_412.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Anth Rogan about JavaScript and hardware - from cars, to factories, and the internet.\n\n## Bryntum - Sponsor\n\nBryntum’s suite of web components help developers quickly add powerful project and resource scheduling capabilities to their React, Angular, Vue or vanilla JS apps. The SDKs include extensive API docs and plenty of examples. Try them online at [bryntum.com/examples/gantt](https://bryntum.com/examples/gantt) or [bryntum.com/examples/scheduler-pro](https://bryntum.com/examples/scheduler-pro). Visit [Bryntum.com/syntax](https://Bryntum.com/syntax) for a 45-day free trial.\n\n## Logrocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[01:02](#t=01:02)** Guest introductions\n* [Anth Rogan on LinkedIn](https://www.linkedin.com/in/anth-rogan-59955429/)\n* **[05:44](#t=05:44)** What kinds of things did you work on at Nissan?\n* **[09:02](#t=09:02)** Why are car head units based in the past?\n* **[11:35](#t=11:35)** What are cars running for UI?\n* **[14:04](#t=14:04)** What are PLC\'s?\n* **[17:02](#t=17:02)** What kinds of regulations exist for automotive software?\n* **[22:28](#t=22:28)** Sponsor: LogRocket\n* **[23:03](#t=23:03)** Deeper look at PLC\'s\n* **[26:56](#t=26:56)** What\'s Node-RED?\n* [Node-RED](https://nodered.org)\n* **[29:37](#t=29:37)** JavaScript is popular in industry? What else is used?\n* **[31:06](#t=31:06)** Sponsor: Brymtum Products\n* **[32:57](#t=32:57)** How do you learn about this tech?\n* [PLC Subreddit](https://www.reddit.com/r/PLC/)\n* **[35:24](#t=35:24)** What were you doing with Nissan head units?\n* [OBD2 Scanner](https://obd2scanner.net)\n* **[37:15](#t=37:15)** Web bluetooth API research\n* **[39:13](#t=39:13)** What\'s MQTT?\n* [MQTT](https://mqtt.org)\n* **[41:29](#t=41:29)** Sponsor: Linode\n* **[42:14](#t=42:14)** Using IoT and machine learning to find issues\n* **[46:53](#t=46:53)** New opportunities in industry tech coming\n* **[52:40](#t=52:40)** Cottage IoT dreams\n* **[56:27](#t=56:27)** Relaxing in Minecraft\n* **[57:42](#t=57:42)** Sick Picks - Anth\n* **[58:38](#t=58:38)** Sick Pick - Scott\n* **[59:49](#t=59:49)** Sick Pick - Wes\n* **[02:12](#t=02:12)** Shameless plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Spotless for macOS](https://lightpillar.com/spotless.html)\n* Wes: [Wago Lever Nuts](https://www.wago.com/ca-en/lp-221)\n* Anth: [Daily.dev](https://daily.dev)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '26175668d7c06f89672ba94b99d6f99e826b319c04e499f8a9e636365c37bb17', 'javascript-and-hardware-cars-factories-heavy-industry-robots-and-the-internet-of-things', '/shows/412 - JavaScript and Hardware.md', '2023-10-16 20:07:34.594', '2023-10-27 15:58:02.891', 'TASTY'),
('syntax_podcast_show_00413', 413, 'How To Do Things In Svelte', '2021-12-13 12:00:00.259', 'https://traffic.libsyn.com/syntax/Syntax_-_413.mp3', '\nIn this Hasty Treat, Wes and Scott talk about how to do things in Svelte.\n\n## Sponsor - Freshbooks\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sponsor - LogRocket\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:28](#t=00:28)** Welcome\n* **[02:18](#t=02:18)** Lead pipe talk\n* **[04:33](#t=04:33)** Sponsor: Freshbooks\n* **[05:05](#t=05:05)** Sponsor: Logrocket\n* **[06:34](#t=06:34)** Intro to Svelte\n* **[07:44](#t=07:44)** Get Local State running\n* [Writable-stores](https://svelte.dev/tutorial/writable-stores)\n* **[10:47](#t=10:47)** Arrow functions\n* **[11:53](#t=11:53)** Functions that update state\n* [React Hooks in Svelte](https://github.com/joshnuss/react-hooks-in-svelte)\n* [React Use Svelte Store](https://github.com/Crisfole/react-use-svelte-store)\n* **[14:36](#t=14:36)** Live / Reactive Variables\n* **[17:03](#t=17:03)** Context\n* **[20:45](#t=20:45)** Conditional rendering\n* **[24:57](#t=24:57)** Input binding\n* **[28:02](#t=28:02)** Should Wes rewrite his video player in Svelte?\n* **[30:07](#t=30:07)** Child elements\n* **[32:10](#t=32:10)** Vercel hires Rich Harris\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4262076600d7db5fbe05f9b31b2f81de63a847e5af8f88326947e4567d27775d', 'how-to-do-things-in-svelte', '/shows/413 - How To Do Things In Svelte.md', '2023-10-16 20:07:34.636', '2023-10-27 15:58:03.010', 'HASTY'),
('syntax_podcast_show_00414', 414, 'Potluck - enums, WASM, Lighthouse, Redirects', '2021-12-15 14:00:00.886', 'https://traffic.libsyn.com/syntax/Syntax_-_414.mp3', '\nIn this episode of Syntax, Scott and Wes answer your questions on a Potluck episode of Syntax.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[02:07](#t=02:07)** Google Chrome to start measuring user experience beyond the completion of page load\n* **[05:47](#t=05:47)** How can I ensure that I am executing npm commands safely?\n* **[07:58](#t=07:58)** How should I prefix booleans?\n* **[09:46](#t=09:46)** How do I decide between using an enum vs a union type in Typescript\n* **[13:40](#t=13:40)** What is Web Assembly?\n* **[18:34](#t=18:34)** Sponsor: Sanity\n* **[19:45](#t=19:45)** what happened to Scott using Linux?\n* [PopOS](https://pop.system76.com)\n* **[22:44](#t=22:44)** Sponsor: Linode\n* **[23:57](#t=23:57)** How do you batch requests in nodejs to an api?\n* **[26:15](#t=26:15)** What are micro-frontends?\n* **[29:55](#t=29:55)** Sponsor: Sentry\n* **[31:16](#t=31:16)** Since Astro seems so amazing, aren’t you tempted to rebuild your site now in Astro instead of Sveltekit?\n* [Astro](https://astro.build)\n* **[33:04](#t=33:04)** Can you please shed some light on redirects in express/ koa?\n* **[36:41](#t=36:41)** How do deal with ADHD?\n* **[41:52](#t=41:52)** Should I repeat the name of the issue in the commit message or just \"Resolves #$issue-number\"?\n* **[44:21](#t=44:21)** Do browsers update automatically?\n* **[47:52](#t=47:52)** What do you do when working on a big project?\n* **[49:55](#t=49:55)** Can you guys help to breakdown and explain jargons and differences of RPC, REST, gRPC, GraphQL?\n* **[53:25](#t=53:25)** How to ask a question\n* **[53:42](#t=53:42)** Sick Picks\n* **[56:17](#t=56:17)** Shamless plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Satechi 3-in-1 Magnetic Wireless Charging Stand](https://www.amazon.com/gp/product/B09LRKZ4BN?ie=UTF8&psc=1&linkCode=sl1&tag=leveluptuts01-20&linkId=2bc4587e9699c9e45cc2431f557c8ce2&language=en_US&ref_=as_li_ss_tl)\n* Wes: [The Always Sunny podcast](https://the-always-sunny-podcast.simplecast.com)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro)\n* Wes: [All Courses](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2f55586a6bdcb242edbab73c43783c1804f329e3ba2f0c3f6827f4c86a298328', 'potluck-enums-wasm-lighthouse-redirects', '/shows/414 - Potluck - enums, WASM, Lighthouse, Redirects .md', '2023-10-16 20:07:34.673', '2023-10-27 15:58:03.063', 'TASTY'),
('syntax_podcast_show_00415', 415, 'Gatsby v4', '2021-12-20 12:00:00.925', 'https://traffic.libsyn.com/syntax/Syntax_-_415.mp3', '\nIn this Hasty Treat, Wes and Scott talk about what\'s new in Gatsby v4.\n\n## Sponsor - Prismic\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sponsor - Sentry\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:41](#t=01:41)** Sponsor: Prismic\n* **[02:35](#t=02:35)** Sponsor: Sentry\n* **[03:26](#t=03:26)** Gatsby v4!\n* [Gatsby](https://www.gatsbyjs.com)\n* [What’s new in Gatsby 4](https://www.gatsbyjs.com/blog/whats-new-in-gatsby-4)\n* **[04:26](#t=04:26)** Any node version requirements?\n* **[05:22](#t=05:22)** Three rendering options\n* **[15:47](#t=15:47)** Parallel Queries\n* **[16:28](#t=16:28)** Data sync\n* **[16:57](#t=16:57)** Gatsby admin deprecated\n* [Nextjs](https://nextjs.org)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'da079cee4b2a7fe6861dfdb4226dcb56ef196f1819f0de114226c9061f68c886', 'gatsby-v4', '/shows/415 - Gatsby v4.md', '2023-10-16 20:07:34.710', '2023-10-27 15:58:03.121', 'HASTY'),
('syntax_podcast_show_00416', 416, 'Gitpod, iPad Coding, Web3, WTF NFT', '2021-12-22 12:00:00.735', 'https://traffic.libsyn.com/syntax/Syntax_-_416.mp3', '\nIn this episode of Syntax, Scott and Wes talk with Geoff and Pauline from Gitpod about developing on Gitpod, Web3, and The NFT Bay.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Logrocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[01:20](#t=01:20)** Guest introduction\n* **[02:46](#t=02:46)** Coding in the browser anywhere\n* [Gitpod](https://www.gitpod.io)\n* [JetBrain](https://www.jetbrains.com)\n* **[04:58](#t=04:58)** How does GitPod work in the browser?\n* [NoYaml](https://noyaml.com)\n* [Cobalt2](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n* [Finding VS Code Extensions for Gitpod](https://www.gitpod.io/docs/vscode-extensions)\n* **[09:27](#t=09:27)** How does GitPod actually work?\n* **[10:57](#t=10:57)** What is Kubernetees?\n* **[13:11](#t=13:11)** Is there a full VS Code environment?\n* **[18:21](#t=18:21)** Sponsor: Linode\n* **[19:01](#t=19:01)** Who are the heavy users of Gitpod?\n* **[24:32](#t=24:32)** Teams on Gitpod\n* [Gitpod Roadmap](https://github.com/gitpod-io/roadmap#:~:text=The%20roadmap%20serves%20as%20a%20broad%20overview%20of,make%20software%20engineering%20more%20collaborative%2C%20joyful%2C%20and%20secure.)\n* [Centered.app](https://www.centered.app)\n* **[30:11](#t=30:11)** Do the developers of Gitpod use Gitpod to build Gitpod?\n* [Gitpod Careers](https://gitpod.crew.work/jobs)\n* **[32:51](#t=32:51)** What language is Gitpod written in?\n* **[33:15](#t=33:15)** Sponsor: Logrocket\n* **[34:10](#t=34:10)** Living in a van coding\n* **[38:16](#t=38:16)** How do you stay productive on the go?\n* **[40:18](#t=40:18)** What was The NFT Bay?\n* [The NFT Bay](https://thenftbay.org)\n* **[44:54](#t=44:54)** Is there any good in Web3 ideas?\n* [Lularoe Documentary](https://www.vanityfair.com/hollywood/2021/09/amazon-lularoe-documentary-lularich)\n* **[49:42](#t=49:42)** Sponsor: Freshbooks\n* **[50:13](#t=50:13)** Selling NFTs is difficult\n* **[51:34](#t=51:34)** Sick Picks!\n* **[58:40](#t=58:40)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Sweet Bobby Podcast](https://www.tortoisemedia.com/listen/sweet-bobby/)\n* Wes: [Woosh Cloths](https://amzn.to/31blFhY)\n* Pauline [Uniqlo](https://www.uniqlo.com/)\n* Geoff [Helinox Chair](https://helinox.com/collections/hiking-chairs)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n* [Psychology of Devx](https://www.gitpod.io/blog/psychology-of-devx)\n* [Gitpod Community](https://www.gitpod.io/community)\n* [Workshops as Code](https://www.gitpod.io/blog/workshops-as-code)\n* [Ghuntley.com](https://ghuntley.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cc0e75d6d650c4160a3ebc44c03af4eae53871e3bfccde8c125489b9e5c249a3', 'gitpod-ipad-coding-web3-wtf-nft', '/shows/416 - GitPod, iPad Coding Web3 WTF NFT.md', '2023-10-16 20:07:34.759', '2023-10-27 15:58:03.178', 'TASTY'),
('syntax_podcast_show_00417', 417, 'Holiday Snackluk', '2021-12-27 14:00:00.125', 'https://traffic.libsyn.com/syntax/Syntax_-_417.mp3', '\nIn this Hasty Treat, Wes and Scott talk about Package-lock, Angular, package updates, how to learn, and media servers on planes.\n\n## Sponsor - Sanity\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sponsor - LogRocket\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:54](#t=00:54)** Luks of the past\n* **[03:19](#t=03:19)** Sponsor: Sanity\n* **[04:26](#t=04:26)** Sponsor: LogRocket\n* **[05:04](#t=05:04)** Has package-lock.json ever saved your bacon?\n* **[08:27](#t=08:27)** Why do you not talk about Angular?\n* **[11:28](#t=11:28)** How do you handle package updates?\n* [Wes Bos tweet on npm-update](https://twitter.com/wesbos/status/1396842158452248581)\n* **[17:43](#t=17:43)** How do you keep learning in your career?\n* **[21:02](#t=21:02)** How does the movie selection work on planes?\n* [Emby](https://emby.media)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e7af9dca019809c76f73b3eb915c48846c7a8a2604cf40866a7b03235d16d08c', 'holiday-snackluk', '/shows/417 - Holiday Snackluk.md', '2023-10-16 20:07:34.798', '2023-10-27 15:58:03.377', 'HASTY'),
('syntax_podcast_show_00418', 418, '2021 In Review', '2021-12-29 14:00:00.759', 'https://traffic.libsyn.com/syntax/Syntax_-_418.mp3', '\nIn this episode of Syntax, Scott and Wes review their predictions and highlights for 2021.\n\n## .TECH Domains - Sponsor\n\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Mux - Sponsor\n\nMux Video is an API-first platform that makes it easy for any developer to build beautiful video. Powered by data and designed by video experts, your video will work perfectly on every device, every time. Mux Video handles storage, encoding, and delivery so you can focus on building your product. Live streaming is just as easy and Mux will scale with you as you grow, whether you\'re serving a few dozen streams or a few million. Visit [mux.com/syntax](https://mux.com/syntax).\n\n## Show Notes\n\n* **[02:21](#t=02:21)** Wes highlights\n* **[05:33](#t=05:33)** Scott\'s highlights\n* **[07:42](#t=07:42)** Writing admin tools for fun\n* **[13:33](#t=13:33)** Sponsor: .TECH Domain Name\n* **[14:30](#t=14:30)** Tech that was hot in 2021\n* **[17:18](#t=17:18)** Sveltekit\n* [Pancake by Rich Harris](https://github.com/Rich-Harris/pancake)\n* [Svelte](https://svelte.dev)\n* [Svelte Kit](https://kit.svelte.dev)\n* **[19:54](#t=19:54)** Remix\n* [Remix](https://remix.run)\n* **[20:36](#t=20:36)** Astro\n* [Astro](https://astro.build)\n* **[22:51](#t=22:51)** NextJS 11 and 12\n* [NextJS](https://nextjs.org)\n* **[25:14](#t=25:14)** Vite and Parcel 2\n* [Vite](https://vitejs.dev)\n* [Parcel](https://parceljs.org)\n* **[26:52](#t=26:52)** Web3\n* **[28:00](#t=28:00)** Prisma\n* [Prisma](https://www.prisma.io)\n* **[30:35](#t=30:35)** Typescript\n* [Typescript](https://www.typescriptlang.org)\n* **[33:08](#t=33:08)** Sponsor: Sentry\n* **[35:25](#t=35:25)** Reviewing past predictions\n* **[36:54](#t=36:54)** ESM\n* **[39:47](#t=39:47)** Remote work will grow up\n* [Discord](https://discord.com)\n* [Notion](https://notion.so)\n* [Height](https://height.app)\n* **[40:38](#t=40:38)** Deno\n* **[45:11](#t=45:11)** React\n* **[46:02](#t=46:02)** Tooling fade away\n* **[47:29](#t=47:29)** Rome\n* [Rome](https://rome.tools)\n* **[48:47](#t=48:47)** Rust\n* **[49:36](#t=49:36)** Programming communities\n* [Twitter Spaces](https://media.twitter.com/en/articles/products/2021/twitter-spaces)\n* [Clubhouse](https://www.clubhouse.com)\n* [Circle](https://circle.so)\n* [Github Discussions](https://docs.github.com/en/discussions)\n* [Tiktok](https://www.tiktok.com)\n* [Benawad on TikTok](https://www.tiktok.com/@benawad)\n* [Wes Bos on TikTok](https://www.tiktok.com/@wesbos?)\n* **[51:08](#t=51:08)** Wasm\n* **[51:26](#t=51:26)** Typescript\n* **[52:35](#t=52:35)** React\n* **[53:40](#t=53:40)** More web component frameworks\n* **[56:43](#t=56:43)** Gatsby\n* **[57:26](#t=57:26)** CSS updates\n* [Syntax 354 with Miriam Suzanne](https://syntax.fm/show/354/the-surprisingly-exciting-world-of-html-elements)\n* **[01:00:06](#t=00:06)** Serverless\n* **[01:01:13](#t=01:13)** Enterprise jamstack\n* **[01:02:01](#t=02:01)** Sponsor: Mux\n* **[01:03:05](#t=03:05)** Sick Picks\n* **[01:08:03](#t=08:03)** Shameless Plug\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Rocket League Sideswipe](https://apps.apple.com/au/app/rocket-league-sideswipe/id1549027048)\n* Wes: [Home Work on Discovery+](https://decider.com/2021/03/30/home-work-magnolia-network-discovery-plus-new-fixer-upper/)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n* [Psychology of Devx](https://www.gitpod.io/blog/psychology-of-devx)\n* [Gitpod Community](https://www.gitpod.io/community)\n* [Workshops as Code](https://www.gitpod.io/blog/workshops-as-code)\n* [Ghuntley.com](https://ghuntley.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '95f4e4f848dc4cc474920f25e26cf7f4be59541977a8a86eb293f06490c19780', '2021-in-review', '/shows/418 - 2021 In Review.md', '2023-10-16 20:07:34.834', '2023-10-27 15:58:03.429', 'TASTY'),
('syntax_podcast_show_00419', 419, 'JS One Liners', '2022-01-03 12:00:00.925', 'https://traffic.libsyn.com/syntax/Syntax_-_419.mp3', '\nIn this Hasty Treat, Scott and Wes talk about some Javascript one liners that speed up your coding experience in one line.\n\n## Sponsor - Linode\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sponsor - Sentry\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:24:12](#t=00:24:12)** Welcome\n* **[01:24:11](#t=01:24:11)** Sponsor: Linode\n* **[02:11:02](#t=02:11:02)** Sponsor: Sentry\n* **[03:54:18](#t=03:54:18)** Twitter ask for One Liners\n* **[04:24:05](#t=04:24:05)** Math random\n`const getPsuedoID =() => Math.floor(Math.random() * 1e15);`\n* **[05:43:09](#t=05:43:09)** Random color\n* [Paul Irish random color](https://www.paulirish.com/2009/random-hex-color-code-snippets/)\n`\'#\'+Math.floor(Math.random()*16777215).toString(16);`\n* **[06:41:06](#t=06:41:06)** Console.log as an object.\n`console.log({ dog, person });`\n[VS Marketplace Link](https://marketplace.visualstudio.com/items?itemName=WooodHead.vscode-wrap-console-log-simple)\n* **[08:29:17](#t=08:29:17)** Edit anything\n`document.designMode = \"on\"`\n* **[10:15:15](#t=10:15:15)** Temporal date\n`export const today = Temporal.Now.plainDateISO();`\n* **[11:44:05](#t=11:44:05)** Console(log)\n`const myFunc = (age) ⇒ console.log(age) || updateAge()`\n* **[13:26:13](#t=13:26:13)** Remove a prop\n`const { propToRemove, ...rest } = obj;`\n* **[15:29:01](#t=15:29:01)** PHP style debugging\n`preElement.innerText = {JSON.stringify(val, \'\', \' \')}`\n* **[16:31:00](#t=16:31:00)** First and Last Destructure\n`var {0: first, length, [length - 1]: last} = [1,2,3];`\n* **[17:34:17](#t=17:34:17)** Speed up audio video\n`document.querySelector(\'audio, video’).playbackRate = 2`\n* [Overcast](https://overcast.fm)\n* **[19:44:15](#t=19:44:15)** Sleep function\n`let sleep = (time = 0) => new Promise(r => setTimeout(r, time))`\n* **[20:26:00](#t=20:26:00)** If statements on one line\n`If (!thing) return \'something\'`\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'be7f54a4166d1350b0cd08409008167907feb11a5027116fc14f00ac358da439', 'js-one-liners', '/shows/419 - JS One Liners.md', '2023-10-16 20:07:34.868', '2023-10-27 15:58:03.485', 'HASTY'),
('syntax_podcast_show_00420', 420, '2022 Predictions', '2022-01-05 12:00:00.143', 'https://traffic.libsyn.com/syntax/Syntax_-_420.mp3', '\nIn this episode of Syntax, Wes and Scott talk through their predictions for 2022.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Hashnode - Sponsor\n\nEverything you need to start blogging as a developer. Own your content, share ideas, and connect with the global dev community! Hashnode is a free developer blogging platform that allows you to publish articles on your own domain and helps you stay connected with a global developer community.\n\n[Hashnode: Everything you need to start blogging as a developer!](https://hashnode.com/)\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome...\n* **[01:31](#t=01:31)** Svelte is king\n* [Svelte](https://svelte.dev)\n* [Svelte Kit](https://kit.svelte.dev)\n* **[03:57](#t=03:57)** Next.js\n* [Next.js](https://nextjs.org)\n* [Next.js Live](https://vercel.com/live)\n* **[06:40](#t=06:40)** Web components\n* [Open UI](https://open-ui.org)\n* [Syntax 353 Stylin the Unstylables](https://syntax.fm/show/353/hasty-treat-stylin-the-unstylables)\n* **[11:42](#t=11:42)** Rust popularity\n* [Rust](https://www.rust-lang.org)\n* [Rome](https://rome.tools)\n* **[15:58](#t=15:58)** Sponsor: LogRocket\n* **[17:12](#t=17:12)** Serverless and Cloud Functions\n* **[18:19](#t=18:19)** Cloudflare becoming a major player\n* [Cloudflare Pages](https://pages.cloudflare.com)\n* **[20:05](#t=20:05)** Tailwind\n* [Tailwind](https://tailwindcss.com)\n* [Open Props](https://open-props.style)\n* **[24:10](#t=24:10)** Glow Up\n* **[24:35](#t=24:35)** Next gen dev tools\n* [OhMyZsh](https://ohmyz.sh)\n* [Warp](https://www.warp.dev)\n* [Fig](https://fig.io)\n* [iTerm](https://iterm2.com)\n* [Starship](https://starship.rs)\n* **[27:32](#t=27:32)** Sponsor: Hashnode\n* **[29:48](#t=29:48)** CSS Container queries, Layers, and More!\n* **[31:45](#t=31:45)** GraphQL\n* **[34:13](#t=34:13)** Deno\n* [Deno](https://deno.land)\n* **[37:41](#t=37:41)** Typescript\n* **[43:36](#t=43:36)** Server come back\n* **[45:13](#t=45:13)** Sponsor: Freshbooks\n* **[46:02](#t=46:02)** Checkouts and payment processors\n* [Wise](https://wise.prf.hn/click/camref:1100lfN5E)\n* **[51:30](#t=51:30)** Temporal API\n* **[53:20](#t=53:20)** Remote Dev / Thin Client\n* **[55:16](#t=55:16)** Sick Picks\n* **[00:16](#t=00:16)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [A Show About Animals](https://play.acast.com/s/vice-news-reports/introducing-ashowaboutanimals-acast140a1b7c)\n* Wes: [Wise](https://wise.prf.hn/click/camref:1100lfN5E)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n* [Psychology of Devx](https://www.gitpod.io/blog/psychology-of-devx)\n* [Gitpod Community](https://www.gitpod.io/community)\n* [Workshops as Code](https://www.gitpod.io/blog/workshops-as-code)\n* [Ghuntley.com](https://ghuntley.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bab9298e0c8339868fa2f0f4233b37bb11dc9bee0e3610d9d1a068b1a9d725f8', '2022-predictions', '/shows/420 - 2022 predictions.md', '2023-10-16 20:07:34.906', '2023-10-27 15:58:03.530', 'TASTY'),
('syntax_podcast_show_00421', 421, 'Remix!', '2022-01-10 12:00:00.117', 'https://traffic.libsyn.com/syntax/Syntax_-_421_v2.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Remix!\n\n## Sponsor - Sanity\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Sponsor - Sentry\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[01:10](#t=01:10)** Rrrremix\n[Remix](https://remix.run)\n* **[02:41](#t=02:41)** Sponsor: Sentry\n* **[04:27](#t=04:27)** Sponsor: Sentry\n* **[06:30](#t=06:30)** What is Remix?\n* **[08:29](#t=08:29)** Built on Fetch\n* **[13:07](#t=13:07)** Frameworks are getting so good\n* **[14:08](#t=14:08)** Data loading\n* **[15:15](#t=15:15)** Actions\n* **[19:47](#t=19:47)** Error boundary and catch boundary differences\n* **[20:54](#t=20:54)** Differences between Remix and Gatsby, and other SSG\n* **[22:11](#t=22:11)** What about hot reloading?\n* **[23:25](#t=23:25)** Nested layouts and nested routes\n* **[25:03](#t=25:03)** Typescript support\n* **[27:11](#t=27:11)** Hosting anywhere\n* [Remix Docs](https://remix.run/docs/en/v1)\n* [Remix on GitHub](https://github.com/remix-run)\n* [Remix on Twitter](https://twitter.com/remix_run)\n* [Remix on YouTube](https://www.youtube.com/remix_run)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9196f096f1252b89b97401099c6b573549b48daf7ddaccd11f267346a391e467', 'remix', '/shows/421 - Remix.md', '2023-10-16 20:07:34.941', '2023-10-27 15:58:03.582', 'HASTY'),
('syntax_podcast_show_00422', 422, 'Potluck', '2022-01-12 12:00:00.286', 'https://traffic.libsyn.com/syntax/Syntax_-_422.mp3', '\nIn this episode of Syntax, Scott and Wes answer your questions on a Potluck episode of Syntax.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Retool - Sponsor\n\nRetool is the fast way to build internal tools. Visually design apps that interface with any database or API. Switch to code nearly anywhere to customize how your apps look and work. With Retool, you ship more apps and move your business forward—all in less time.\n\n[retool.com/syntax](https://retool.com/syntax)\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Intro\n* **[01:10](#t=01:10)** Watching movies with kids\n* [Paw Patrol Movie](https://www.rottentomatoes.com/m/paw_patrol_the_movie)\n* [Encanto](https://movies.disney.com/encanto)\n* [Luca](https://movies.disney.com/luca)\n* **[02:49](#t=02:49)** How do you protect images on your website?\n* **[07:21](#t=07:21)** How did you guys learn Typescript?\n* [Tweet: When should a JR dev learn typescript?](https://twitter.com/wesbos/status/1478054387406802953)\n* [Typescript Handbook](https://www.typescriptlang.org/docs/handbook/)\n* [Selling and Shipping T-Shirts with Typescript](https://syntax.fm/show/346/selling-and-shipping-t-shirts-with-typescript)\n* **[13:26](#t=13:26)** Should I worry about learning Typescript now or stay focused on mastering JS first?\n* **[18:16](#t=18:16)** Sponsor: Prismic\n* **[20:03](#t=20:03)** How do you decide what to learn?\n* [Svelte Kit](https://kit.svelte.dev)\n* [Remix](https://remix.run)\n* **[26:26](#t=26:26)** I want to become full stack and learn a backend language, which one should I choose?\n* **[28:07](#t=28:07)** Do Svelte components not support media queries?\n* **[29:30](#t=29:30)** Any advice or suggestions on how to approach Auth or Payment?\n* **[32:53](#t=32:53)** Sponsor: LogRocket\n* **[33:59](#t=33:59)** Any experience working with a team on a different time zone?\n* [Height](https://height.app)\n* [Clocker](https://apps.apple.com/us/app/clocker/id1056643111?mt=12)\n* [iState Menus](https://bjango.com/mac/istatmenus/)\n* **[42:49](#t=42:49)** Do you have any experience or recommendations for introducing prettier late in a project?\n* **[48:57](#t=48:57)** What are your thoughts on monorepos?\n* [Turborepo](https://turborepo.org)\n* [Nx](https://nx.dev)\n* **[52:57](#t=52:57)** Sponsor: Retool\n* **[55:14](#t=55:14)** What does it mean to know JS?\n* **[59:39](#t=59:39)** What would you do if you had to start over?\n* **[03:49](#t=03:49)** Sick Picks\n* **[07:09](#t=07:09)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Learning Differently](https://www.instagram.com/learning.differently/)\n* Wes: [Truff Hot Sauce](https://amzn.to/3qHzbmx)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n* [Psychology of Devx](https://www.gitpod.io/blog/psychology-of-devx)\n* [Gitpod Community](https://www.gitpod.io/community)\n* [Workshops as Code](https://www.gitpod.io/blog/workshops-as-code)\n* [Ghuntley.com](https://ghuntley.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0721a86e93c941c4d09e1be35c0dcdab59576aa070160637139638980a73bd54', 'potluck', '/shows/422 - Potluck.md', '2023-10-16 20:07:34.976', '2023-10-27 15:58:03.639', 'TASTY'),
('syntax_podcast_show_00423', 423, 'CSS + JS Hacks We’re Fine With', '2022-01-17 12:00:00.996', 'https://traffic.libsyn.com/syntax/Syntax_-_423.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS + JS Hacks that they\'re ok with using.\n\n## Sponsor - Freshbooks\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Sponsor - Sentry\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:53](#t=00:53)** What are the things in web dev, that feel wrong or hacky when starting out, but are actually totally accepted to do?\n* **[02:09](#t=02:09)** Sponsor: Sentry\n* **[03:12](#t=03:12)** Sponsor: Freshbooks\n* **[05:32](#t=05:32)** Negative margins in CSS\n* **[07:53](#t=07:53)** Not Passing a radix to parseInt()\n* **[10:17](#t=10:17)** -50% translation 50% direction\n* **[11:27](#t=11:27)** Overwriting Arguments in a function\n* **[13:20](#t=13:20)** non-standard-element\n* **[17:26](#t=17:26)** Button must have a type\n* **[18:56](#t=18:56)** Triangles out of borders\n* **[20:40](#t=20:40)** Overflow:hidden to clear a float\n* **[20:55](#t=20:55)** Always pass noopener to links!\n* **[22:16](#t=22:16)** Inline styles\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '038a259eb5c1ca10cb8bc12dd50075eefeab0e930ed7ee3d66fadef54d784c58', 'css-js-hacks-we-re-fine-with', '/shows/423 - CSS JS Hacks We’re Fine With.md', '2023-10-16 20:07:35.012', '2023-10-27 15:58:03.694', 'HASTY'),
('syntax_podcast_show_00424', 424, 'New Year, New You.  What to Focus on in 2022.', '2022-01-19 12:00:00.657', 'https://traffic.libsyn.com/syntax/Syntax_-_424_v2.mp3', '\nIn this episode of Syntax, Scott and Wes talk through what to focus on at a beginner, intermediate, and advanced levels of coding skills.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n* **[02:30](#t=02:30)** Semantic HTML\n* **[07:36](#t=07:36)** JavaScript Data\n* **[08:54](#t=08:54)** Issues & technical workflow\n* **[11:40](#t=11:40)** Emailing People\n* [Syntax 117: How to Email Busy People](https://syntax.fm/show/117/hasty-treat-how-to-email-busy-people)\n* **[13:49](#t=13:49)** Make something animated with CSS\n* [Open Props Style](https://open-props.style)\n* **[16:04](#t=16:04)** Make a full stack contact form in a framework\n* **[16:52](#t=16:52)** Sponsor: Sentry\n* **[18:59](#t=18:59)** CSS Variables\n* **[22:36](#t=22:36)** Server Side fundamentals\n* **[24:28](#t=24:28)** Meeting Skills\n* **[28:36](#t=28:36)** Help organize a codebase or repo.\n* **[30:26](#t=30:26)** Make something animated with JS\n* **[31:40](#t=31:40)** Write a bot\n* **[33:35](#t=33:35)** Sponsor: Linode\n* **[34:51](#t=34:51)** Write CI / CD actions / tools\n* **[37:55](#t=37:55)** Advanced Typescript\n* **[38:32](#t=38:32)** Teach at your company\n* **[39:35](#t=39:35)** Speak at a conference\n* **[40:45](#t=40:45)** Make something 3D\n* [Frame 3D](https://www.framer.com/docs/three-introduction/#:~:text=%203D%3A%20Introduction%20%201%20%0AOverview.%20Framer%20Motion,animation%20options%20as...%204%20%0AExamples.%20%20More%20)\n* [React 3 Fiber](https://docs.pmnd.rs/react-three-fiber/getting-started/introduction)\n* [Svelte Cubed](https://madewithsvelte.com/svelte-cubed)\n* **[42:01](#t=42:01)** Sponsor: Freshbooks\n* **[42:42](#t=42:42)** Scrape and write something to collect data\n* **[44:57](#t=44:57)** Sick Picks!\n* **[49:25](#t=49:25)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [14 Peaks: Nothing Is Impossible - Netflix](https://www.netflix.com/browse/genre/840232?jbv=81464765)\n* Wes: [Booty Slippers](https://amzn.to/3teDSYa)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/) - Black Friday sale!\n* [Psychology of Devx](https://www.gitpod.io/blog/psychology-of-devx)\n* [Gitpod Community](https://www.gitpod.io/community)\n* [Workshops as Code](https://www.gitpod.io/blog/workshops-as-code)\n* [Ghuntley.com](https://ghuntley.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '677cfb212a2b7d5986416c1c335b9f27992b7e745ae145e3fca5a9466852b2f4', 'new-year-new-you-what-to-focus-on-in-2022', '/shows/424 - What to Focus on in 2022.md', '2023-10-16 20:07:35.055', '2023-10-27 15:58:03.753', 'TASTY'),
('syntax_podcast_show_00425', 425, 'Updating Project Dependencies', '2022-01-24 12:00:00.796', 'https://traffic.libsyn.com/syntax/Syntax_-_425.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their process for updating project dependencies.\n\n## Sponsor - LogRocket\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sponsor - MagicBell\n\n[MagicBell](https://www.magicbell.com) is the the notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Weeeeelcome\n* **[00:52](#t=00:52)** Sponsor: LogRocket\n* **[01:29](#t=01:29)** Sponsor: Magic Bell\n* **[03:32](#t=03:32)** What are dependencies?\n* **[04:04](#t=04:04)** Wes updates all the things\n* **[05:30](#t=05:30)** How to check if there are any updates\n* **[07:05](#t=07:05)** Upgrade isolated, Minor deps first.\n* **[09:16](#t=09:16)** Upgrade Minor groups after that\n* **[09:56](#t=09:56)** Then upgrade Major dependencies\n* **[14:47](#t=14:47)** Finally upgrade any stand along dependencies\n* **[15:44](#t=15:44)** Test test test\n* **[16:19](#t=16:19)** Watch error logging\n* **[17:05](#t=17:05)** Pray\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '06d53d1e5c26276bacdccd147ca7a743eec5864bd63e715dc5b533c9703ae019', 'updating-project-dependencies', '/shows/425 - Updating Project Dependencies.md', '2023-10-16 20:07:35.091', '2023-10-27 15:58:03.811', 'HASTY'),
('syntax_podcast_show_00426', 426, 'Monorepos! Workspaces, pnpm, turborepo + more!', '2022-01-26 12:00:00.399', 'https://traffic.libsyn.com/syntax/Syntax_-_426.mp3', '\nIn this episode of Syntax, Scott and Wes talk all about monorepos - the why\'s and the how\'s of using them on your projects.\n\n## Kontent by Kentico - Sponsor\n\nKontent by Kentico is a headless CMS that provides live editing experience to non-technical users and hands you the technical tools to build websites, mobile apps, voice assistants, or anything else where you need content. Use REST API or GraphQL and get your content via the global Fastly CDN. Designed to unify all your content and operations, in compliance with ISO27001 and SOC2Type2 certifications.[Spin up a new project today](kontent.ai/syntax) and discover Kontent.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) and put SYNTAX in the \"How did you hear about us?\" section.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:46](#t=01:46)** Our experiences with monorepos\n* **[05:04](#t=05:04)** Why use monorepos?\n* **[09:37](#t=09:37)** How long have we been using monorepos?\n* **[10:16](#t=10:16)** Tools for starting a monorepo\n* [pnpm](https://pnpm.io)\n* [Npm link](https://docs.npmjs.com/cli/v6/commands/npm-link)\n* **[16:22](#t=16:22)** Sponsor: Kontent by Kentico\n* **[17:33](#t=17:33)** What\'s the process for managing libraries?\n* **[20:10](#t=20:10)** Installing / uninstalling things\n* **[21:07](#t=21:07)** Shared dependencies\n* **[27:45](#t=27:45)** Sponsor: LogRocket\n`\"ui:dev\": \"pnpm recursive run dev --filter @leveluptuts/ui\",`\n`\"update\": \"pnpm recursive up -L -i\"`\n* **[29:23](#t=29:23)** Turborepo\n* [Turborepo](https://turborepo.org)\n* **[39:32](#t=39:32)** nX\n* [nx](https://nx.dev)\n* **[45:38](#t=45:38)** Sponsor: Freshbooks\n* **[46:32](#t=46:32)** Lerna\n* [Lerna](https://lerna.js.org)\n* **[48:09](#t=48:09)** Rushjs\n* [Rushjs](https://rushjs.io)\n* **[52:35](#t=52:35)** Sick Picks\n* **[59:17](#t=59:17)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Wyze v3](https://amzn.to/3A75kZ2), [10 micro sd](https://amzn.to/3fObhRz)\n* Wes: [Tineco A11 Vaccum](https://amzn.to/3nysfr6)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '04d601e7fb4bd58d2135cf29072beb1ac85f1a4580f434c0f3aefbb0b17dc68c', 'monorepos-workspaces-pnpm-turborepo-more', '/shows/426 - Monorepos.md', '2023-10-16 20:07:35.135', '2023-10-27 15:58:03.870', 'TASTY'),
('syntax_podcast_show_00427', 427, 'Teamwork Makes The Dream Work', '2022-01-31 12:00:00.940', 'https://traffic.libsyn.com/syntax/Syntax_-_427.mp3', '\n\n\nIn this Hasty Treat, Scott and Wes are inspired by a Reddit post to talk about how to work better with your team.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:57](#t=01:57)** Sponsor: Sentry\n* **[03:26](#t=03:26)** Sponsor: Sanity\n* **[04:48](#t=04:48)** Summary of the Reddit post\n* **[06:46](#t=06:46)** We are a team\n* **[09:05](#t=09:05)** Coding with ego\n* **[12:32](#t=12:32)** Follow the leader\n* **[13:59](#t=13:59)** Getting better at asking questions\n* **[15:01](#t=15:01)** Ask for clarity\n* **[15:43](#t=15:43)** Understanding the guidelines\n* **[18:12](#t=18:12)** Interpersonal tips\n* **[19:49](#t=19:49)** Celebrating wins\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f280f3ea2c92312ee8458afef8a3318f0d62e7c3a037d8c848ed7b55b5e48a52', 'teamwork-makes-the-dream-work', '/shows/427 - Teamwork Makes The Dream Work.md', '2023-10-16 20:07:35.179', '2023-10-27 15:58:03.919', 'HASTY'),
('syntax_podcast_show_00428', 428, 'Syntax Highlight', '2022-02-02 12:00:00.940', 'https://traffic.libsyn.com/syntax/Syntax_-_428.mp3', '\nIn this episode of Syntax, Scott and Wes review your portfolios and websites including some from Harryxli, Austin Baird, Jacks Portfolio, and more!\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Tabnine - Sponsor\n\nTabnine is your teams\' go to AI assistant. Using a variety of machine learning models, Tabnine learns from your team\'s best practices, and suggests code completions based on your code.\n\nIt supports over 30 languages and is available in most IDEs. Tabnine\'s universal models are trained **strictly on fully permissive open source code,** and can run locally, meaning that your code stays yours.\n\nGet the free version at [tabnine.com/now](http://tabnine.com/now) or go to [tabnine.com/promo/syntax](http://tabnine.com/promo/syntax) to get 50% off your first 3 months of Tabnine Teams.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:05](#t=01:05)** This chapter is mid\n* [Wes does TikTok](https://www.tiktok.com/@wesbos)\n* **[04:28](#t=04:28)** Harry xli\n* [Harryxli](https://harryxli.com)\n* **[15:00](#t=15:00)** AustinBaird.software\n* [AustinBaird.software](https://austinbaird.software)\n* **[19:45](#t=19:45)** Sponsor: Linode\n* **[21:10](#t=21:10)** ognjenbostjancic.com\n* [ognjenbostjancic.com](https://www.ognjenbostjancic.com)\n* **[28:19](#t=28:19)** ndo.dev\n* [ndo.dev](https://ndo.dev)\n* **[35:37](#t=35:37)** Sponsor: LogRocket\n* **[37:02](#t=37:02)** jacksportfolio.com\n* [JacksPortfolio.com](https://www.jacksportfolio.com)\n* **[41:51](#t=41:51)** einargudni.com\n* [einargudni.com](https://www.einargudni.com)\n* **[43:22](#t=43:22)** Kids advert break\n* **[46:05](#t=46:05)** Back to einargudni.com\n* **[48:24](#t=48:24)** Sponsor: Tabnine\n* **[50:41](#t=50:41)** cyrillappert.ch\n* [hslu.cyrillappert.ch](https://hslu.cyrillappert.ch)\n* **[54:30](#t=54:30)** Sick Picks\n* **[59:02](#t=59:02)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Alpinist (2021) - IMDb](https://www.imdb.com/title/tt11790780/)\n* Wes: [Instant Pot Air Fryer Lid](https://amzn.to/3nQpb9R)\n\n## Shameless Plugs\n\n* Scott: [Astro Course](https://www.leveluptutorials.com/pro) - Sign up for the year and save 50%!\n* Wes: [All Courses](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '41a1861e45e2a0299d1c97dd08651018257a148ba5ad6d8d1ca0e6290ed4ae09', 'syntax-highlight', '/shows/428 - Syntax Highlight.md', '2023-10-16 20:07:35.225', '2023-10-27 15:58:03.969', 'TASTY'),
('syntax_podcast_show_00429', 429, 'Pros + Cons of JavaScript Servers, Serverless, and Cloudflare Workers', '2022-02-07 12:00:00.333', 'https://traffic.libsyn.com/syntax/Syntax_-_429.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the pros and cons of JavaScript servers, Serverless, and Cloudflare Workers.\n\n## Hashnode - Sponsor\n\nEverything you need to start blogging as a developer. Own your content, share ideas, and connect with the global dev community! Hashnode is a free developer blogging platform that allows you to publish articles on your own domain and helps you stay connected with a global developer community.\n\n[Hashnode: Everything you need to start blogging as a developer!](https://hashnode.com/)\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[00:26:13](#t=00:26:13)** Welcome\n* **[01:12:15](#t=01:12:15)** Sponsor: Hashnode\n* **[02:27:10](#t=02:27:10)** Sponsor: Linode\n* **[03:30:09](#t=03:30:09)** Topic introduction\n* [Netlify Functions](https://functions.netlify.com)\n* [Fastify](https://www.fastify.io)\n* [AWS Lambda](https://aws.amazon.com/lambda/)\n* **[09:46:02](#t=09:46:02)** Hosted Linux servers\n* **[13:41:11](#t=13:41:11)** Serverless functions\n* [MongoDB](https://www.mongodb.com)\n* [SvelteKit](https://kit.svelte.dev)\n* **[16:34:02](#t=16:34:02)** Connecting to a database in serverless\n* **[20:14:14](#t=20:14:14)** Cloudflare Workers\n* [Cloudflare Workers](https://workers.cloudflare.com)\n* [Works with Workers](https://workers.cloudflare.com/works)\n* **[25:39:09](#t=25:39:09)** What do we recommend?\n* [Render.com](https://render.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7264d08b0dcc45fd1f4e0ab7d96f8bced0c3dbd7b536b629506155fcba7df9dc', 'pros-cons-of-javascript-servers-serverless-and-cloudflare-workers', '/shows/429 - Pros and Cons of JavaScript Servers.md', '2023-10-16 20:07:35.272', '2023-10-27 15:58:04.030', 'HASTY'),
('syntax_podcast_show_00430', 430, 'Creator of Wordle - Josh Wardle', '2022-02-09 12:00:00.914', 'https://traffic.libsyn.com/syntax/Syntax_-_430.mp3', '\nIn this episode of Syntax, Wes and Scott talk with the creator of Wordle, Josh Wardle. What\'s the tech stack for Wordle? Does he care about the clones of Wordle? And how did selling Wordle work?\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/get-started](https://www.sanity.io/get-started). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax).\n\n## Show Notes\n\n* **[00:27:02](#t=00:27:02)** Guest introduction\n* [Wordle](https://www.powerlanguage.co.uk/wordle/)\n* **[02:45:13](#t=02:45:13)** How did Wordle go viral initially?\n* **[05:27:14](#t=05:27:14)** Where did the idea for Wordle come from?\n* **[07:07:06](#t=07:07:06)** What\'s your background?\n* [Reddit.com](https://www.reddit.com)\n* **[12:52:23](#t=12:52:23)** Writing just HTML CSS and JavaScript\n* **[15:58:24](#t=15:58:24)** Wordle has 2 external dependancies\n* **[16:41:06](#t=16:41:06)** Sponsor: Sentry\n* **[17:40:23](#t=17:40:23)** The tech stack of Wordle\n* [Lit Elements](https://lit.dev)\n* [just-merge](https://www.npmjs.com/package/just-merge)\n* [gzip](https://www.gnu.org/software/gzip/)\n* [Cloudflare](https://www.cloudflare.com/)\n* [AWS S3](https://aws.amazon.com/s3/)\n* **[22:21:04](#t=22:21:04)** Would you use web components again?\n* **[29:36:08](#t=29:36:08)** How much did hosting cost?\n* **[29:55:01](#t=29:55:01)** How does Wordle remember my streak?\n* **[33:56:07](#t=33:56:07)** Do you play Wordle everyday?\n* **[36:28:11](#t=36:28:11)** Sponsor: Sanity\n* **[37:16:07](#t=37:16:07)** How do you land on internet hits so often?\n* **[40:33:15](#t=40:33:15)** Are you aware of the clones?\n* [Gordle](https://gordle.herokuapp.com)\n* **[44:33:15](#t=44:33:15)** Sponsor: Freshbooks\n* **[45:17:10](#t=45:17:10)** Selling Wordle to the New York Times\n* **[49:05:20](#t=49:05:20)** Dealing with the domain name\n* **[54:15:09](#t=54:15:09)** What\'s his opener word?\n* **[56:03:03](#t=56:03:03)** Juice\n* [Juice it or Lose it talk](https://www.youtube.com/watch?v=Fy0aCDmgnxg)\n* **[59:10:06](#t=59:10:06)** Sick Picks!\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Josh: Tupperware\n* Scott: [Giant tub of Epsom Salt](https://amzn.to/3GmkAmt)\n* Wes: [Air Fryer](https://amzn.to/3J1eUQv)\n\n## Shameless Plugs\n\n* Josh: [Wordle](https://www.powerlanguage.co.uk/wordle/)\n* Scott: [KeystoneJS Course](https://leveluptutorials.com/tutorials/keystone-js)\n* Wes: [All Courses](https://wesbos.com/courses/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '35f29fe26c0e4ea9d1962b161c4bca0523df1661b91e7d6ffb05363b7c2fca30', 'creator-of-wordle-josh-wardle', '/shows/430 - Creator of Wordle.md', '2023-10-16 20:07:35.326', '2023-10-27 15:58:04.092', 'TASTY'),
('syntax_podcast_show_00431', 431, 'Code Explorers', '2022-02-14 12:00:00.749', 'https://traffic.libsyn.com/syntax/Syntax_-_431.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how best to explore and contribute to code on GitHub repos.\n\n## Retool - Sponsor\n\nRetool is the fast way to build internal tools. Visually design apps that interface with any database or API. Switch to code nearly anywhere to customize how your apps look and work. With Retool, you ship more apps and move your business forward—all in less time.\n\nVisit [retool.com/syntax](https://retool.com/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:42](#t=01:42)** Sponsor: LogRocket\n* **[02:54](#t=02:54)** Sponsor: Retool\n* **[04:33](#t=04:33)** Topic introduction\n* **[06:44](#t=06:44)** How to get a handle on something new in a library?\n* **[10:27](#t=10:27)** How to contribute to comments\n* **[12:55](#t=12:55)** Looking through Issues\n* **[15:01](#t=15:01)** Looking at Pull Requests\n* **[15:43](#t=15:43)** Check Milestones\n* **[17:58](#t=17:58)** Look at Files Changed tab\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'fec77e707c00e8cebb7e3402230f6e0add5ec761debfe5ed7494784095dd2f58', 'code-explorers', '/shows/431 - Code Explorers.md', '2023-10-16 20:07:35.366', '2023-10-27 15:58:04.209', 'HASTY'),
('syntax_podcast_show_00432', 432, 'Potluck - Selling Themes × Which Browser Should Devs Use? × Where Do You Keep 2FA Codes? × Remix vs Svelte Kit × Getting Unstuck from Tutorial Hell', '2022-02-16 12:00:00.535', 'https://traffic.libsyn.com/syntax/Syntax_-_432.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about selling themes, which browser to use, where to keep your 2FA codes, Remix vs Svelte Kit, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax).\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[02:10](#t=02:10)** Can you explain import.meta?\n* **[07:20](#t=07:20)** What are your thoughts on publishing and selling HTML & CSS/SASS templates/themes?\n* **[12:00](#t=12:00)** When is it best to use a semantic menu vs a nav?\n* **[16:14](#t=16:14)** Sponsor: Sentry.io\n* **[17:36](#t=17:36)** As a newbie in web dev., which browser do you recommend, Chrome or Firefox Dev. Edition?\n* **[20:25](#t=20:25)** Are TypeScript types are like creating models in Mongoose?\n* **[26:16](#t=26:16)** If you use 2FA, where do you store your recovery codes?\n* [1Password](https://1password.com)\n* **[29:32](#t=29:32)** Do you know a programming language which similar syntax to js and without the need of a runtime-framework?\n* [Syntax 429 - Cloudflare Workers](https://syntax.fm/show/429/pros-cons-of-javascript-servers-serverless-and-cloudflare-workers)\n* **[32:54](#t=32:54)** I am not feeling the hype for Remix. I would rather put my energy into SvelteKit.\n* [Remix](https://remix.run)\n* [Svelte Kit](https://kit.svelte.dev)\n* **[36:41](#t=36:41)** Sponsor: Sanity\n* **[38:09](#t=38:09)** Do you guys have any advice on getting unstuck from tutorial hell and at what point do you think someone is ready to apply for junior web dev jobs?\n* **[41:36](#t=41:36)** Do you feel frameworks like Next.js, Remix, etc. abstract too much the complexity that it takes to build full-stack web apps?\n* **[44:19](#t=44:19)** How do you keep up on new technologies?\n* [Swyx](https://twitter.com/swyx)\n* [Scott’s Newsletter](https://leveluptutorials.com/newsletter)\n* [Intent to Ship](https://twitter.com/intenttoship)\n* **[54:04](#t=54:04)** Sponsor: Freshbooks\n* **[55:06](#t=55:06)** Sick Picks!\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The River Runner (2021) - IMDb](https://www.imdb.com/title/tt15293256/)\n* Wes: [Mike’s Hot Honey](https://amzn.to/3KUeuNL)\n\n## Shameless Plugs\n\n* Scott: [LevelUp YouTube channel](https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg)\n* Wes: [Wes Bos on TikTok](https://www.tiktok.com/@wesbos)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'db0e0b2d3b5d0423416f9214d5f1df340ae1b3b41bee9da767689928dffba219', 'potluck-selling-themes-which-browser-should-devs-use-where-do-you-keep-2fa-codes-remix-vs-svelte-kit-getting-unstuck-from-tutorial-hell', '/shows/432 - Potluck.md', '2023-10-16 20:07:35.406', '2023-10-27 15:58:04.271', 'TASTY'),
('syntax_podcast_show_00433', 433, 'JavaScript in 2022 - New, Coming and Proposed Features', '2022-02-21 12:00:00.470', 'https://traffic.libsyn.com/syntax/Syntax_-_433.mp3', '\nIn this Hasty Treat, Scott and Wes talk about new proposed features coming to JavaScript in 2022.\n\n## MagicBell - Sponsor\n\nMagic Bell is the The notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - [use the coupon code SYNTAXFM for 10% off the first 12 months](https://magicbell.com).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:25](#t=01:25)** Sponsor: MagicBell\n* **[02:50](#t=02:50)** Sponsor: Sentry\n* **[04:20](#t=04:20)** Weird audio tics\n* **[05:19](#t=05:19)** Fetch in Node.js\n* **[09:54](#t=09:54)** URL imports in Node.js\n* **[11:41](#t=11:41)** JSON Modules\n* **[15:01](#t=15:01)** Node in import url scheme\n* **[17:30](#t=17:30)** Pipeline Operator\n* **[21:21](#t=21:21)** Reversible String Split\n* **[23:56](#t=23:56)** JavaScript Module Blocks\n* **[25:22](#t=25:22)** String.cooked\n* **[26:34](#t=26:34)** BigInts Math\n\nURL imports in Node.js\n\n* [@MylesBorins](https://twitter.com/MylesBorins/status/1489024782205173760?s=20&t=nJISn-KBCaGFTWk0QkjB_w)\n\n* [Pipeline Operator](https://github.com/tc39/proposal-pipeline-operator)\n\n* [String.cooked](https://github.com/tc39/proposal-string-cooked)\n\n* [BigInts Math](https://github.com/tc39/proposal-bigint-math)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f026b424b8f072f6e8fae052598106f52bdb01dada959e19470aea0e71657feb', 'javascript-in-2022-new-coming-and-proposed-features', '/shows/433 - JavaScript in 2022.md', '2023-10-16 20:07:35.452', '2023-10-27 15:58:04.338', 'HASTY'),
('syntax_podcast_show_00434', 434, 'Ben Vinegar × Distributed Tracing and TypeScript Migrations', '2022-02-23 12:00:00.667', 'https://traffic.libsyn.com/syntax/Syntax_-_434.mp3', '\nIn this episode of Syntax, Wes and Scott talk with Ben Vinegar about his work with Sentry, their migration to TypeScript, and advice for running JavaScript on other websites.\n\n## Kontent by Kentico - Sponsor\n\nKontent by Kentico is a headless CMS that provides live editing experience to non-technical users and hands you the technical tools to build websites, mobile apps, voice assistants, or anything else where you need content. Use REST API or GraphQL and get your content via the global Fastly CDN. Designed to unify all your content and operations, in compliance with ISO27001 and SOC2Type2 certifications.[Spin up a new project today](https://kontent.ai/syntax) and discover Kontent.\n\n## Hashnode - Sponsor\n\nEverything you need to start blogging as a developer. Own your content, share ideas, and connect with the global dev community! Hashnode is a free developer blogging platform that allows you to publish articles on your own domain and helps you stay connected with a global developer community.\n\n[Hashnode: Everything you need to start blogging as a developer!](https://hashnode.com/)\n\n## Show Notes\n\n* [Ben Vinegar](https://github.com/benvinegar)\n* **[00:20](#t=00:20)** Guest introduction\n* **[05:58](#t=05:58)** Seeing bug reports from Sentry\n* **[07:38](#t=07:38)** Distributed tracing for full stack developers\n* **[12:16](#t=12:16)** Amazon X Ray\n* [AWS Xray](https://aws.amazon.com/xray/)\n* **[15:32](#t=15:32)** Using Tracing\n* **[19:40](#t=19:40)** Sponsor: Kontent by Kentico\n* **[20:58](#t=20:58)** Cloudflare Worker Integration\n* **[22:30](#t=22:30)** How does Sentry have open source and a business?\n* [Heroku](https://heroku.com)\n* [App Platform](https://www.digitalocean.com/products/app-platform)\n* [Media Temple](https://mediatemple.net)\n* [Dreamhost](https://www.dreamhost.com)\n* [WordPress Calypso](https://github.com/Automattic/wp-calypso)\n* **[32:30](#t=32:30)** Sponsor: Hashnode\n* **[34:07](#t=34:07)** What is the tech stack of Sentry?\n* **[38:20](#t=38:20)** Sentry switching to TypeScript\n* [Sentry switching to TypeScript](https://blog.sentry.io/2021/04/12/slow-and-steady-converting-sentrys-entire-frontend-to-typescript)\n* **[44:36](#t=44:36)** Running JavaScript on other websites\n* **[51:24](#t=51:24)** Sponsor: Sentry\n* **[53:08](#t=53:08)** Sick Picks\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Last Seen](https://www.wbur.org/podcasts/lastseen)\n* Wes: [SEOUL Sisters Korean Kimchi Seasoning](https://amzn.to/3HP29IL)\n* Ben: [Worst Scene / Best Scene](https://podcasts.apple.com/us/podcast/worst-scene-best-scene/id1290069572)\n\n* [I Was There Too](https://www.earwolf.com/show/i-was-there-too/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '94427d9d6feb9d006a4f1cfff6dcb0510109520e9d4ade0955c6b77a7ba4d7b8', 'ben-vinegar-distributed-tracing-and-typescript-migrations', '/shows/434 - Ben Vinegar.md', '2023-10-16 20:07:35.505', '2023-10-27 15:58:04.393', 'TASTY'),
('syntax_podcast_show_00435', 435, 'This vs That × map vs reduce, forEach vs for in, and more!', '2022-02-28 12:00:00.690', 'https://traffic.libsyn.com/syntax/Syntax_-_435.mp3', '\nIn this Hasty Treat, Scott and Wes do a little this vs that with map vs reduce, forEach vs for in, .hasOwnProperty() vs in vs .hasOwn(), CSS absolute + left/right/top/bottom vs transform, and more.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[01:30](#t=01:30)** Sponsor: Prismic\n* **[02:58](#t=02:58)** Sponsor: Sentry\n* **[04:21](#t=04:21)** .filter() and .map() (every, one, etc..) VS Reduce\n* **[09:17](#t=09:17)** .forEach() vs for in / for of\n* **[15:52](#t=15:52)** .hasOwnProperty() vs in vs .hasOwn()\n* **[19:37](#t=19:37)** CSS absolute + left/right/top/bottom vs transform\n* **[22:54](#t=22:54)** Object.assign({}, obj) vs {...spread}\n* [Animal Friendly idioms](https://www.peta.org/features/animal-friendly-idioms/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '153fb3e7e5d0fb3a5454ed54cf44d795e5f04e7b16ea40b50f66ccb5a0b49489', 'this-vs-that-map-vs-reduce-foreach-vs-for-in-and-more', '/shows/435 - This vs That.md', '2023-10-16 20:07:35.551', '2023-10-27 15:58:04.535', 'HASTY'),
('syntax_podcast_show_00436', 436, 'Wes and Scott React to the State of JS', '2022-03-02 14:15:51.824', 'https://traffic.libsyn.com/syntax/Syntax_-_436.mp3', '\nIn this episode of Syntax, Wes and Scott take a look at the 2021 State of JS survey that was recently published, including demographics, salary, browser APIs, overall happiness, and more!\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* [2021 State of JS Survey](https://2021.stateofjs.com)\n* **[01:51](#t=01:51)** Winter birthday fun\n* **[05:38](#t=05:38)** The State of JS survey\n* **[07:37](#t=07:37)** Demographics\n* **[09:18](#t=09:18)** Salary range\n* **[09:58](#t=09:58)** Language features\n* **[14:05](#t=14:05)** Browser APIs\n* **[17:36](#t=17:36)** Custom elements and Shadow DOM\n* **[18:18](#t=18:18)** Page visibility API\n* **[19:28](#t=19:28)** File system API\n* **[19:58](#t=19:58)** Web share API\n* **[22:15](#t=22:15)** Sponsor: Linode\n* **[23:12](#t=23:12)** Libraries\n* **[27:30](#t=27:30)** Stimulus\n* **[29:21](#t=29:21)** Trends\n* **[31:32](#t=31:32)** Happiness with the state of front end frameworks\n* **[32:28](#t=32:28)** Sponsor: LogRocket\n* **[34:04](#t=34:04)** Backend Frameworks\n* **[38:16](#t=38:16)** Backend tool satisfaction\n* **[44:35](#t=44:35)** Happiness of build tools\n* **[46:32](#t=46:32)** Sponsor: Freshbooks\n* **[48:27](#t=48:27)** The best podcast in web development\n* **[49:05](#t=49:05)** Sick Picks\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Inventing Anna](https://www.netflix.com/Title/81008305)\n* Wes:[Everlane Crewneck Sweater](https://rstyle.me/cz-n/gane3acdguf)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Course Drop Party](https://www.youtube.com/watch?v=LATf_lVYoMQ)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd7dae93c61f43d20ca93ee7741f853ceab6dc2ed4690369f87c1d4dcd1dd97b6', 'wes-and-scott-react-to-the-state-of-js', '/shows/436 - React to State of JS.md', '2023-10-16 20:07:35.596', '2023-10-27 15:58:04.581', 'TASTY'),
('syntax_podcast_show_00437', 437, 'Sticker Mogul 2022', '2022-03-07 12:00:00.605', 'https://traffic.libsyn.com/syntax/Syntax_-_437.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Wes\' experience designing, printing, and shipping out his sticker packs.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[01:26](#t=01:26)** Sponsor: LogRocket\n* **[02:15](#t=02:15)** Sponsor: Linode\n* **[03:51](#t=03:51)** How Wes sells stickers\n* [Syntax 346: Selling And Shipping T Shirts with TypeScript](https://syntax.fm/show/346/selling-and-shipping-t-shirts-with-typescript)\n* **[04:27](#t=04:27)** Where the stickers are printed\n* [Zigpac](https://www.zigpac.com)\n* **[06:30](#t=06:30)** How the stickers were designed\n* **[07:38](#t=07:38)** How do you ship them anywhere in the world for $5?\n* **[10:46](#t=10:46)** Packing the stickers\n* **[13:58](#t=13:58)** How did Wes sell the stickers?\n* **[16:51](#t=16:51)** Any concern about two people ordering at the same time?\n* **[17:13](#t=17:13)** One thing that did break\n* [Pushover](https://pushover.net)\n* **[18:13](#t=18:13)** How the stickers were shipped\n* [Stallion Express](https://stallionexpress.ca)\n* [APC](https://www.apc-pli.com)\n* **[25:42](#t=25:42)** Costs for stickers\n* **[28:37](#t=28:37)** TypeScript sticker logo\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b89a909768866dd3ebbdf1b4b9f5900d25c9629b34da8fbf8e1ab8a44356ea64', 'sticker-mogul-2022', '/shows/437 - Sticker drop.md', '2023-10-16 20:07:35.666', '2023-10-27 15:58:04.634', 'HASTY'),
('syntax_podcast_show_00438', 438, 'Part 2 of Wes and Scott React to the State of JS', '2022-03-09 12:00:00.412', 'https://traffic.libsyn.com/syntax/Syntax_-_438.mp3', '\nIn this second part episode of Syntax, Wes and Scott continue talking about the 2021 State of JavaScript survey: mobile and desktop libraries, testing, monorepo, runtimes, flavors of JavaScript, and more!\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create]([https://www.sanity.io/create](https://www.sanity.io/create)). Get an awesome supercharged free developer plan on [sanity.io/syntax]([https://www.sanity.io/syntax](https://www.sanity.io/syntax)).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:20](#t=01:20)** Scott\'s new sound panels\n* **[03:32](#t=03:32)** Instacart\n* [2021 State of JS Survey](https://2021.stateofjs.com/en-US/)\n* [Tauri](https://tauri.studio)\n* **[07:46](#t=07:46)** Mobile and Desktop libraries\n* **[13:50](#t=13:50)** Testing\n* [Vitest](https://vitest.dev)\n* [Playwright](https://playwright.dev)\n* [Cypress](https://www.cypress.io)\n* **[19:48](#t=19:48)** Sponsor: Sentry\n* **[21:26](#t=21:26)** Monorepo tooling\n* **[27:00](#t=27:00)** Sponsor: Sanity.io\n* **[28:18](#t=28:18)** JavaScript Runtimes\n* **[30:51](#t=30:51)** JavaScript Flavors\n* **[32:32](#t=32:32)** Non JavaScript Languages\n* **[39:38](#t=39:38)** Utilities\n* [Syntax 401: Monorepo](https://syntax.fm/show/401/hasty-treat-how-to-setup-a-pnpm-monorepo)\n* [pnpm](https://pnpm.io)\n* [Turborepo](https://turborepo.org)\n* **[40:19](#t=40:19)** Resources\n* [Syntax.fm 403: JavaScript in 2022 - New, Coming and Proposed Features](https://syntax.fm/show/433/javascript-in-2022-new-coming-and-proposed-features)\n* **[43:18](#t=43:18)** Opinions\n* **[47:21](#t=47:21)** Features missing from JavaScript\n* **[49:30](#t=49:30)** Awards\n* **[52:58](#t=52:58)** Sponsor: Freshbooks\n* **[53:38](#t=53:38)** SIIIIICK ××× PIIIICKS\n* **[56:41](#t=56:41)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [StoryPal](https://amzn.to/3vGH8Nd)\n* Wes: [Heartbeat Hot Sauce](https://amzn.to/3Hs04RJ)\n\n* [Matty Matheson on Hot Ones](https://www.youtube.com/watch?v=S8XQHKg0Fjo)\n* [Gordon Ramsay on Hot Ones](https://www.youtube.com/watch?v=GJlNvSC5v6s)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c889e813144d5ddfe258f8f5538242083411748dd7fb223d5df26b5900434973', 'part-2-of-wes-and-scott-react-to-the-state-of-js', '/shows/438 - React to State of JS Part 2.md', '2023-10-16 20:07:35.720', '2023-10-27 15:58:04.684', 'TASTY'),
('syntax_podcast_show_00439', 439, 'Hasty Treat WTF × SSR vs JamStack vs Serverless?', '2022-03-14 12:00:00.645', 'https://traffic.libsyn.com/syntax/Syntax_-_439.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the differences between SSR, JamStack, and Serverless.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Retool - Sponsor\n\nRetool is the fast way to build internal tools. Visually design apps that interface with any database or API. Switch to code nearly anywhere to customize how your apps look and work. With Retool, you ship more apps and move your business forward—all in less time.\n\nVisit [Retool.com/syntax](http://retool.com/syntax) for more information.\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Welcome\n* **[01:20](#t=01:20)** Sponsor: LogRocket\n* **[02:26](#t=02:26)** Sponsor: Retool\n* **[03:49](#t=03:49)** What exactly is server side rendering vs. tech like Jamstack and serverless?\n* [Cloudinary](https://cloudinary.com)\n* [Mux](https://www.mux.com)\n* **[12:15](#t=12:15)** Why use one or the other?\n* [Svelte Kit](https://kit.svelte.dev)\n* [Syntax.fm](https://syntax.fm)\n* **[16:55](#t=16:55)** Where does Serverless fit into this?\n* **[19:12](#t=19:12)** What\'s the ideal scenario?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4017d2116f172424ed3a87131510ae5951f6d144d6694e0b163a5949df577c03', 'hasty-treat-wtf-ssr-vs-jamstack-vs-serverless', '/shows/439 - SSR vs JamStack vs Serverless.md', '2023-10-16 20:07:35.769', '2023-10-27 15:58:04.746', 'HASTY'),
('syntax_podcast_show_00440', 440, 'Potluck - Handling Auth × Are Web Dev Real Developers? × Handling Git Conflicts × Converting PNG to Box-Shadow × Bad Docs vs No Docs × Making Shopify Headless', '2022-03-16 12:00:00.308', 'https://traffic.libsyn.com/syntax/Syntax_-_440.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about handling auth, are web dev real developers, handling Git conflicts,  converting PNG to Box-Shadow, bad docs vs no docs, making Shopify headless, and more.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:32](#t=01:32)** Fool\'s winter\n* **[03:25](#t=03:25)** How do you handle authentication in an app?\n* **[09:42](#t=09:42)** Responding to people who don\'t think developers are real developers?\n* **[12:21](#t=12:21)** How do you handle git conflicts in package-lock.json and/or yarn.lock files?\n* **[14:42](#t=14:42)** I built a small project which converts .png images to CSS box-shadow values.\n* [Img to Box Shadow](https://github.com/AriPerkkio/img-to-box-shadow)\n* **[16:37](#t=16:37)** January 19th, 2038 at 03:14:08 is the end of epoch\n* [Office Space](https://www.imdb.com/title/tt0151804/)\n* **[20:31](#t=20:31)** Sponsor: Sentry\n* **[22:44](#t=22:44)** Should I begin to add PropTypes to my packages and projects?\n* **[25:59](#t=25:59)** What\'s worse: bad documentation or no documentation?\n* **[27:37](#t=27:37)** How do you find the motivation or discipline to follow through in side projects?\n* **[29:48](#t=29:48)** I need to take an existing Shopify site and make it headless - what should I use?\n* **[37:55](#t=37:55)** Sponsor: Sanity\n* **[39:18](#t=39:18)** You have a ?token= query param and some token value for it. Could you explain a bit more on what is that for?\n* **[44:05](#t=44:05)** Have you thought about selling Syntax.fm shirts?\n* **[46:05](#t=46:05)** Can I migrate my Express routes to Next.js\' API and get the same httpOnly cookies workflow?\n* **[52:03](#t=52:03)** Sponsor: Freshbooks\n* **[52:52](#t=52:52)** Sick Picks\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Okeeffe’s Lip Balm](https://amzn.to/3vKGG0c)\n* Wes: [Okeef’s Working Hands](https://amzn.to/3sNFEyA)\n\n### Level Up Course Drop - [https://youtu.be/LATf_lVYoMQ?t=829](https://youtu.be/LATf_lVYoMQ?t=829)\n\n## Shameless Plugs\n\n* Scott: [Level Up Course Drop](https://youtu.be/LATf_lVYoMQ)\n* Wes: [Wes Bos Course player update](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '44de5d9e3c98da1c937d44c5a6749f9ba58991918d0f710904dd58a02fe4d0c1', 'potluck-handling-auth-are-web-dev-real-developers-handling-git-conflicts-converting-png-to-box-shadow-bad-docs-vs-no-docs-making-shopify-headless', '/shows/440 - Potluck Auth.md', '2023-10-16 20:07:35.804', '2023-10-27 15:58:04.801', 'TASTY'),
('syntax_podcast_show_00441', 441, 'SSL Certs, Approvals and Cloudflare', '2022-03-21 12:00:00.500', 'https://traffic.libsyn.com/syntax/Syntax_-_441.mp3', '\nIn this Hasty Treat, Scott and Wes talk about getting SSL certificates set up between your hosting, Cloudflare, and other web apps you may use.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Welcome\n* **[01:13](#t=01:13)** Sponsor: LogRocket\n* **[02:06](#t=02:06)** Sponsor: Prismic\n* **[03:23](#t=03:23)** Wes\' story of SSL\n* [Render](https://render.com)\n* **[05:43](#t=05:43)** How LetsEncrypt works\n* [LetsEncrypt](https://letsencrypt.org)\n* **[08:32](#t=08:32)** What is Cloudflare?\n* [Cloudflare](https://www.cloudflare.com/en-ca/)\n* **[10:33](#t=10:33)** The problem Wes ran into\n* **[12:27](#t=12:27)** Support is tricky\n* **[13:54](#t=13:54)** What is Cloudapp?\n* [Cloudapp](https://www.getcloudapp.com)\n* [Vercel](https://vercel.com)\n* **[15:34](#t=15:34)** Two SSL Certs are needed\n* **[16:41](#t=16:41)** First solution\n* **[17:36](#t=17:36)** Second solution\n* **[22:36](#t=22:36)** What about A Records?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'adea570b8bd330852e9da8c93ac9c2c406be9abb74743b6b4b26fd4d85943102', 'ssl-certs-approvals-and-cloudflare', '/shows/441 - SSL Certs, Approvals and Cloudflare.md', '2023-10-16 20:07:35.838', '2023-10-27 15:58:04.855', 'HASTY'),
('syntax_podcast_show_00442', 442, 'Our Stacks Explained', '2022-03-23 10:00:05.720', 'https://traffic.libsyn.com/syntax/Syntax_-_442.mp3', '\nIn this episode of Syntax, Wes and Scott talk through the tech stack they use to manage their course websites.\n\n## Kontent by Kentico  - Sponsor\n\nKontent by Kentico is a headless CMS that provides live editing experience to non-technical users and hands you the technical tools to build websites, mobile apps, voice assistants, or anything else where you need content. Use REST API or GraphQL and get your content via the global Fastly CDN. Designed to unify all your content and operations, in compliance with ISO27001 and SOC2Type2 certifications.[Spin up a new project today](kontent.ai/syntax) and discover Kontent.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## .TECH Domains - Sponsor\n\nDot Tech domains has launched a new game with wicked prizes. It’s a windows 98 inspired game where you need to find and solve puzzles in each of the drives. This is unreal and you need to see it to believe it - good luck and start the game March 25th at [go.tech/syntaxbtc](https://go.tech/syntaxbtc).\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[02:50](#t=02:50)** CSS Redesign of LevelUpTuts\n* **[03:56](#t=03:56)** Overview of our platforms\n* **[06:06](#t=06:06)** The API\n* [ExpressJS](http://expressjs.com)\n* [MongoDB](https://www.mongodb.com)\n* [GraphQL](https://www.graphql.com)\n* [Fastify](https://www.fastify.io)\n* [Mercurius](https://mercurius.dev)\n* [Mongoose](https://mongoosejs.com)\n* **[15:13](#t=15:13)** Sponsor: Kontent by Kentico\n* **[17:07](#t=17:07)** Customer dashboard\n* [Svelte Kit](https://kit.svelte.dev)\n* **[21:21](#t=21:21)** Viewing experience\n* [React](https://reactjs.org)\n* [GitHub](https://github.com)\n* [VideoJS](https://videojs.com)\n* [Mux](https://mux.com)\n* [Vimeo](https://vimeo.com)\n* **[30:53](#t=30:53)** Hosting\n* **[35:51](#t=35:51)** Sponsor: LogRocket\n* **[36:45](#t=36:45)** Admin tooling\n* [Flexbox](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox)\n* [Postmark](https://postmarkapp.com)\n* [Drip](https://www.drip.com)\n* [Pancake Charts](https://pancake-charts.surge.sh)\n* **[47:37](#t=47:37)** Authentication\n* [PassportJS](https://www.passportjs.org)\n* **[50:30](#t=50:30)** Transactional Email\n* [Nodemailer](https://nodemailer.com)\n* [Pug](https://pugjs.org/api/getting-started.html)\n* [Inky](https://github.com/foundation/inky)\n* [mjml](https://mjml.io)\n* **[52:36](#t=52:36)** Checkout\n* [Stripe](https://stripe.com/)\n* [Stripe Checkouts](https://stripe.com/payments/checkout)\n* [Stripe Elements](https://stripe.com/payments/elements)\n* [Braintree](https://www.braintreepayments.com)\n* [Paypal](https://www.paypal.com)\n* **[55:58](#t=55:58)** Hosting\n* [Digital Ocean](https://www.digitalocean.com)\n* [Digital Ocean Platform](https://www.digitalocean.com/products/app-platform)\n* [Render](https://render.com)\n* [Cloudflare](https://www.cloudflare.com/)\n* **[57:48](#t=57:48)** Sponsor: .TECH\n* **[59:39](#t=59:39)** Other parts\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Toniebox Audio Player Starter Set](https://amzn.to/3JaZR7b)\n* Wes: [Vissles v84 Keyboard](https://vissles.com/products/v84-wireless-mechanical-keyboard-hot-swappable?variant=39507703758947)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials - Svelte 3D Course](https://leveluptutorials.com/tutorials/svelte-3d/what-is-svelte-cubed)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ab72c59eb725ba6ec5bf7fe78fe24e38886f3118ee9d9ee8506b96ca08a95f72', 'our-stacks-explained', '/shows/442 - Our Stacks Explained.md', '2023-10-16 20:07:35.870', '2023-10-27 15:58:04.913', 'TASTY'),
('syntax_podcast_show_00443', 443, 'What’s Up With Vitest?', '2022-03-28 12:00:00.183', 'https://traffic.libsyn.com/syntax/Syntax_-_443.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Vitest, how testing is handled, how code coverage works, and whether they think they\'ll use it.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## MagicBell - Sponsor\n\nMagicBell is the The notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Welcome\n* **[02:47](#t=02:47)** Sponsor: Sentry\n* **[03:48](#t=03:48)** Sponsor: MagicBell\n* **[04:55](#t=04:55)** What’s is Vitest?\n* **[09:06](#t=09:06)** How is testing handled?\n* **[10:59](#t=10:59)** HappyDOM\n* **[14:13](#t=14:13)** Code coverage baked in\n* **[16:25](#t=16:25)** Files acting as folders\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'aaee3b469e54c72d4ea678838dc7a7e709c31997af23636b7aa073c3eac96417', 'what-s-up-with-vitest', '/shows/443 - Vitest.md', '2023-10-16 20:07:35.902', '2023-10-27 15:58:04.975', 'HASTY'),
('syntax_podcast_show_00444', 444, 'Syntax Highlight', '2022-03-30 12:00:00.930', 'https://traffic.libsyn.com/syntax/Syntax_-_444.mp3', '\nIn this episode of Syntax, Wes and Scott review your websites that you submitted including bald.design, Anh Hoang Nguyen, bradleyshellnut.com, and more.\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* [Uses.tech](https://uses.tech)\n* **[00:10](#t=00:10)** Welcome\n* **[03:35](#t=03:35)** How to submit your site for highlight\n* **[04:11](#t=04:11)** bald.design\n<https://www.bald.design>\n* **[10:38](#t=10:38)** Anh Hoang Nguyen\n<https://www.hoanganh.dev>\n* **[15:08](#t=15:08)** kennytye.com\n<https://www.kennytye.com>\n* **[22:42](#t=22:42)** Sponsor: Freshbooks\n* **[24:10](#t=24:10)** rubenoliveira.tech\n<http://rubenoliveira.tech>\n* **[28:47](#t=28:47)** abgn.me\n<https://abgn.me>\n* **[32:02](#t=32:02)** Sponsor: LogRocket\n* **[33:19](#t=33:19)** bradleyshellnut.com\n<https://bradleyshellnut.com>\n* **[41:11](#t=41:11)** hunterjennings.dev\n<https://www.hunterjennings.dev>\n* **[46:19:16](#t=46:19:16)** Sponsor: Prismic\n* **[47:42:19](#t=47:42:19)** matthewfarlymn.com\n<https://matthewfarlymn.com>\n* **[55:00:01](#t=55:00:01)** SIIIIICK ××× PIIIICKS\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Bad Vegan](https://www.netflix.com/ca/title/81470938)\n* Wes:\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2bcab96aeb48c00e0c29acd799b7f9426839b5a871f642d917af8c7c06929fde', 'syntax-highlight', '/shows/444 - portfolio review.md', '2023-10-16 20:07:35.945', '2023-10-27 15:58:05.033', 'TASTY'),
('syntax_podcast_show_00445', 445, 'Types in JS?', '2022-04-04 12:00:00.425', 'https://traffic.libsyn.com/syntax/Syntax_-_445.mp3', '\nIn this Hasty Treat, Scott and Wes talk about a proposal for type syntax in JavaScript.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:13](#t=01:13)** Sponsor: Sentry\n* **[02:03](#t=02:03)** Sponsor: Sentry\n* **[02:44](#t=02:44)** The proposal announced\n* [A proposal for type syntax in JavaScript](https://devblogs.microsoft.com/typescript/a-proposal-for-type-syntax-in-javascript/)\n* [Proposal types as comments](https://github.com/giltayar/proposal-types-as-comments/)\n* **[03:24](#t=03:24)** What are types?\n* **[08:33](#t=08:33)** Types as comments\n* **[10:51](#t=10:51)** Why not JS Doc?\n* **[13:39](#t=13:39)** What it looks like\n* **[19:02](#t=19:02)** Possible downsides\n* **[21:37](#t=21:37)** Why not define a type system for JS in TC39 instead?\n* [Why not define a type system for JS in TC39 instead?](https://github.com/giltayar/proposal-types-as-comments#why-not-define-a-type-system-for-js-in-tc39-instead)\n* **[22:41](#t=22:41)** The Proposal vs Typescript\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '133f38421ca320928207306dd6785c754918382bb7d2e0903886fdfa8be3cdf0', 'types-in-js', '/shows/445 - Types in JS.md', '2023-10-16 20:07:35.983', '2023-10-27 15:58:05.095', 'HASTY'),
('syntax_podcast_show_00446', 446, 'Making Content × What is our Process? Youtube, Blog Posts, Courses, Conference Talks, and Podcasts', '2022-04-06 12:00:00.197', 'https://traffic.libsyn.com/syntax/Syntax_-_446.mp3', '\nIn this episode of Syntax, Wes and Scott talk through their process for making content on the internet for their YouTube channels, blog posts, courses, conference talks, and podcasts.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:09](#t=00:09)** Welcome\n* **[03:02](#t=03:02)** Creating YouTube videos\n* [Scott’s YouTube channel](https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg)\n* **[09:42](#t=09:42)** Conference talks\n* [Notion](https://www.notion.so)\n* [Stackblitz](https://stackblitz.com)\n* [Reactathon](https://www.reactathon.com)\n* [Raycast](https://www.raycast.com)\n* **[17:05](#t=17:05)** Sponsor: Linode\n* **[17:32](#t=17:32)** Tech for making slides\n* **[19:37](#t=19:37)** Courses - how to decide what to do?\n* **[26:44](#t=26:44)** How Wes breaks down a course topic\n* **[30:00](#t=30:00)** Arranging a course layout\n* **[33:19](#t=33:19)** Sponsor: LogRocket\n* **[34:17](#t=34:17)** Writing blog posts\n* **[41:58](#t=41:58)** Sponsor: Sanity\n* **[43:32](#t=43:32)** How we organize the podcast\n* **[51:10](#t=51:10)** SIIIIICK ××× PIIIICKS\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [ZENOVA Under Desk Treadmill Walking Pad](https://amzn.to/3LiImm8)\n* Wes: Trader Joe\'s Hot Sauce with Yuzu\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd5744909685a934ac8f17fddc4acc76e2db1253653f4c121c87f6829328a02f4', 'making-content-what-is-our-process-youtube-blog-posts-courses-conference-talks-and-podcasts', '/shows/446 - Content creation.md', '2023-10-16 20:07:36.017', '2023-10-27 15:58:05.147', 'TASTY'),
('syntax_podcast_show_00447', 447, 'How To Be Consistent', '2022-04-11 12:00:00.368', 'https://traffic.libsyn.com/syntax/Syntax_-_447.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their tips and tricks for being consistent if you\'re trying to create.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## MagicBell - Sponsor\n\nMagicBell is the The notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:44](#t=00:44)** String cheese theory\n* **[01:49](#t=01:49)** Sponsor: Sentry\n* **[03:41](#t=03:41)** Sponsor: MagicBell\n* **[05:26](#t=05:26)** Being consistent is the key to success\n* **[07:12](#t=07:12)** Commit to it\n* **[09:13](#t=09:13)** Plan and schedule\n* **[13:42](#t=13:42)** Being accountable to someone\n* **[18:11](#t=18:11)** Break things down into smaller tasks\n* **[20:25](#t=20:25)** Measure goals\n* **[22:14](#t=22:14)** Revise the plan\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '6da67cea8ff9fec9fe5ff0b5ac098f03b2b93b429d31cf55acc19372e56738f6', 'how-to-be-consistent', '/shows/447 - How To Be Consistent.md', '2023-10-16 20:07:36.060', '2023-10-27 15:58:05.239', 'HASTY'),
('syntax_podcast_show_00448', 448, 'Potluck - Multi Tenant Apps, JS Sprinkles,  Kids Coding, Server Error Handling', '2022-04-13 12:00:00.332', 'https://traffic.libsyn.com/syntax/Syntax_-_448.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about multi tenant apps, JS sprinkles, kids coding, server error handling, and more.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:01](#t=01:01)** Buying a new car\n* [Hyundai Ioniq 5](https://www.hyundaicanada.com/en/showroom/2022/ioniq-5)\n* **[08:20](#t=08:20)** What would you recommend old-school jQuery folks, external agency vendors, and modern devs that want to work together?\n* **[11:59](#t=11:59)** Are React dumb/presentational components only possible at the leaf components of an application?\n* **[15:35](#t=15:35)** How old should a kid be to learn programming?\n* [Scratch](https://scratch.mit.edu)\n* [Minecraft](https://www.minecraft.net)\n* **[20:28](#t=20:28)** Sponsor: Sentry\n* **[21:34](#t=21:34)** Without pointing me to a paid error program like sentry, how do you guys manage this rabbit hole?\n* **[27:05](#t=27:05)** How do you judge how much server you need?\n* [MongoDB Atlas](https://www.mongodb.com/cloud/atlas)\n* [Google Pagespeed](https://pagespeed.web.dev)\n* **[31:57](#t=31:57)** For websites that aren\'t applications how would you best organize your JavaScript?\n* **[35:17](#t=35:17)** How do you diagnose slowdowns and bad user experience?\n* **[41:31](#t=41:31)** Sponsor: Sanity\n* **[43:13](#t=43:13)** Do you default export your React components when using TypeScript?\n* **[47:42](#t=47:42)** Besides web sockets or polling at a predefined interval and refreshing the page to fetch new data, can you think of any Next-specific solutions or recommend any packages that could help make this relatively simple?\n* [Supabase](https://supabase.com)\n* [Firebase](https://firebase.google.com)\n* [Meteor](https://www.meteor.com)\n* **[52:13](#t=52:13)** We should look into \'tunneling\'.\n* **[56:42](#t=56:42)** How do I build a multi-tenant app?\n* [Caddy Server](https://caddyserver.com)\n* [nginx](https://nginx.org)\n* [Approximated.app](https://approximated.app)\n* [Vercel offers this via a middleware](https://vercel.com/guides/nextjs-multi-tenant-application)\n* [Cloudflare SSL for SaaS](https://blog.cloudflare.com/cloudflare-for-saas/)\n* **[00:56](#t=00:56)** Sponsor: Freshbooks\n* **[01:34](#t=01:34)** SIIIIICK ××× PIIIICKS\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Vivid](https://goodsnooze.gumroad.com/l/vivid)\n* Wes: [Right angle Lightning cables](https://amzn.to/36YHWmi)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e3701d2edbfab29835e5ba488fd3748e1d44955b04d17cc4eadb0c813dc6267d', 'potluck-multi-tenant-apps-js-sprinkles-kids-coding-server-error-handling', '/shows/448 - potluck.md', '2023-10-16 20:07:36.097', '2023-10-27 15:58:05.290', 'TASTY'),
('syntax_podcast_show_00449', 449, 'Svelte Cubed + 3D In Browser', '2022-04-18 12:00:00.876', 'https://traffic.libsyn.com/syntax/Syntax_-_449.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Svelte Cubed and working in 3D in the browser.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Welcome\n* **[01:00](#t=01:00)** Sponsor: LogRocket\n* **[01:41](#t=01:41)** Sponsor: Prismic\n* **[02:45](#t=02:45)** Intro to 3D in the browser\n* [Svelte Cubed](https://svelte-cubed.vercel.app)\n* [Getting started with Svelte Cubed](https://svelte-cubed.vercel.app/docs/getting-started)\n* **[03:49](#t=03:49)** Declarative vs imperative\n* **[07:43](#t=07:43)** How does Three.JS work?\n* [ThreeJS](https://threejs.org)\n* **[12:28](#t=12:28)** Orbit controls\n* **[15:47](#t=15:47)** Svelte Cannon\n* [Svelte Cannon](https://svelte-cannon.bfanger.nl)\n* [Blender](https://www.blender.org)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b9a31976ce307c351fcaf721d05192f2a27f848485f212a5d8db7ede967d7406', 'svelte-cubed-3d-in-browser', '/shows/449 - 3D in the browser.md', '2023-10-16 20:07:36.129', '2023-10-27 15:58:05.345', 'HASTY'),
('syntax_podcast_show_00450', 450, 'Potluck - Working on a Team × Dealing with Imposter Syndrome × Animating on the Web × Icon Libraries × Demanding Clients', '2022-04-20 12:00:00.166', 'https://traffic.libsyn.com/syntax/Syntax_-_450.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about working on a team, dealing with imposter syndrome, animating on the web, using the table element, landing pages for apps, and building full stack apps with NextJS.\n\n## Sentry   - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax).\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:05](#t=01:05)** The mustard bandit podcast\n* **[02:54](#t=02:54)** How can Developers work with designers and Product managers seamlessly?\n* **[06:37](#t=06:37)** How do I deal with imposter syndrome?\n* **[10:46](#t=10:46)** Any good coffee shops in Denver?\n* [17 of Denver’s Best Coffee Shops](https://www.5280.com/2021/12/17-of-denvers-best-coffee-shops/)\n* **[11:38](#t=11:38)** Do you use Table element or CSS Grid for tabular data?\n* **[13:18](#t=13:18)** How do you manage animations without a library?\n* [Greensock](https://greensock.com)\n* **[17:05](#t=17:05)** Sponsor: Sentry\n* **[18:01](#t=18:01)** What do you use for icon libraries?\n* [Icons8](https://icons8.com)\n* [Font Awesome Icons](https://fontawesome.com/icons)\n* [React Icons](https://react-icons.github.io/react-icons/)\n* [Flat Icons](https://www.flaticon.com)\n* **[25:10](#t=25:10)** How do you unregister the service worker to clear site data?\n* [Syntax 346 - Selling T Shirts](https://syntax.fm/show/346/selling-and-shipping-t-shirts-with-typescript)\n* **[29:15](#t=29:15)** Sponsor: Sanity.io\n* **[30:47](#t=30:47)** Since NextJS has API routes, could you build a full-stack application using just NextJS?\n* **[35:41](#t=35:41)** Do you keep your landing pages and home pages seperate from your app?\n* **[37:35](#t=37:35)** Where\'s the line for moving something hosted on a developer server to moving it to production?\n* [CodePen](https://codepen.io)\n* [Replit](https://replit.com)\n* [Netlify](https://www.netlify.com)\n* **[41:44](#t=41:44)** How do you deal with ignorant or demanding clients?\n* **[45:54](#t=45:54)** As a JS/TS developer, which other language should I learn to compliment my skills?\n* [Rust](https://www.rust-lang.org)\n* [PHP](https://www.php.net)\n* **[50:58](#t=50:58)** Sponsor: Freshbooks\n* **[51:49](#t=51:49)** ××× SIIIIICK ××× PIIIICKS ×××\n* **[58:41](#t=58:41)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Glass Drinking Straws](https://amzn.to/3xDd31E)\n* Wes: [Lawn Lift](https://amzn.to/3jFIzUP)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Beginner Javascript](https://beginnerjavascript.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3798e7aa86be81eb338b1426f69efde16f458a562b5f85cd892d8609cc081e79', 'potluck-working-on-a-team-dealing-with-imposter-syndrome-animating-on-the-web-icon-libraries-demanding-clients', '/shows/450 - potluck.md', '2023-10-16 20:07:36.165', '2023-10-27 15:58:05.405', 'TASTY'),
('syntax_podcast_show_00451', 451, 'Building a Coupon Engine', '2022-04-25 12:00:00.372', 'https://traffic.libsyn.com/syntax/Syntax_-_451.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the coupon engines they\'ve built and use on their courses.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:12](#t=01:12)** Sponsor: Prismic\n* **[02:32](#t=02:32)** Sponsor: LogRocket\n* **[04:06](#t=04:06)** What we use for coupons\n* [Stripe](https://stripe.com)\n* [Braintree](https://www.braintreepayments.com/)\n* **[06:27](#t=06:27)** Structure of our coupons\n* **[10:43](#t=10:43)** Products and carts\n* **[13:59](#t=13:59)** Country validation\n* **[15:11](#t=15:11)** Affiliate codes\n* **[16:36](#t=16:36)** Chaining rules together\n* **[19:41](#t=19:41)** Tracking coupons\n* **[20:54](#t=20:54)** Automatically applied coupons\n* **[22:12](#t=22:12)** Quick tips for coupons\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f3e2534f95d59761cef31253e4d11e9514e908a13ba5117192750947f0acd987', 'building-a-coupon-engine', '/shows/451 - Coupon engine.md', '2023-10-16 20:07:36.203', '2023-10-27 15:58:05.467', 'HASTY'),
('syntax_podcast_show_00452', 452, 'JavaScript × STUMP’D', '2022-04-27 12:00:00.988', 'https://traffic.libsyn.com/syntax/Syntax_-_452.mp3', '\nIn this episode of Syntax, Wes and Scott ask each other hiring questions asked of JavaScript developers in job interviews.\n\n## Kontent by Kentico  - Sponsor\n\nKontent by Kentico is a headless CMS that provides live editing experience to non-technical users and hands you the technical tools to build websites, mobile apps, voice assistants, or anything else where you need content. Use REST API or GraphQL and get your content via the global Fastly CDN. Designed to unify all your content and operations, in compliance with ISO27001 and SOC2Type2 certifications.[Spin up a new project today](https://kontent.ai/syntax) and discover Kontent.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* [JavaScript Interview Questions](https://github.com/sudheerj/javascript-interview-questions)\n* **[00:13](#t=00:13)** Let\'s get STUMP\'d\n* **[01:08](#t=01:08)** Cleaning out the garage\n* **[05:05](#t=05:05)** What are 4 methods available on weakmap?\n* **[07:07](#t=07:07)** How do you make an object iterable in JavaScript?\n* **[09:29](#t=09:29)** How do you make the first letter of a string into uppercase?\n* **[10:26](#t=10:26)** What is the typeof operator?\n* **[11:53](#t=11:53)** What are classes in ES6?\n* **[13:21](#t=13:21)** How do you enumerate key and value pairs of an object?\n* **[15:44](#t=15:44)** Kontent by Kentico\n* **[17:08](#t=17:08)** What is an event queue?\n* **[21:05](#t=21:05)** Why do you need JSON?\n* **[24:49](#t=24:49)** Why do you need a promise?\n* **[25:45](#t=25:45)** Explain the range overflow property\n* **[28:21](#t=28:21)** How do you return all matching strings against a matching expression?\n* **[30:14](#t=30:14)** Sponsor: LogRocket\n* **[30:51](#t=30:51)** What is a thunk function?\n* **[33:46](#t=33:46)** Can you redeclare let or const variables?\n* **[34:17](#t=34:17)** What are enhanced object literals?\n* **[35:56](#t=35:56)** What is the difference between call, apply, and bind?\n* **[38:52](#t=38:52)** Sponsor: Freshbooks\n* **[39:57](#t=39:57)** What are benefits of modules and why would you need them?\n* **[43:50](#t=43:50)** ××× SIIIIICK ××× PIIIICKS ×××\n* **[48:47](#t=48:47)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Who ARTed Podcast](https://www.whoartedpodcast.com)\n* Wes: Patio furniture\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c718918a0cbc94441bb290a341027b51494e18c8c6d28acf2337da6e8b442fd1', 'javascript-stump-d', '/shows/452 - JavaScript STUMPd.md', '2023-10-16 20:07:36.236', '2023-10-27 15:58:05.572', 'TASTY'),
('syntax_podcast_show_00453', 453, 'Why do people still use Axios over Fetch?', '2022-05-02 12:00:00.833', 'https://traffic.libsyn.com/syntax/Syntax_-_453.mp3', '\nIn this Hasty Treat, Scott and Wes talk about why people still use Axios over Fetch, and why people wouldn\'t use Axios.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:22](#t=00:22)** Welcome\n* [Twitter thread of questions from listeners](https://twitter.com/wesbos/status/1501221052743041025)\n* **[01:25](#t=01:25)** Sponsor: Linode\n* **[02:07](#t=02:07)** Sponsor: Sentry\n* **[03:04](#t=03:04)** What\'s Axios?\n* [Syntax 224 - Serverless Cloud Functions](https://syntax.fm/show/224/serverless-cloud-functions-part-1)\n* **[04:10](#t=04:10)** Why someone wouldn\'t use Axios?\n* **[07:06](#t=07:06)** Interceptors\n* **[09:30](#t=09:30)** Catching expired JWT and renewing it\n* **[10:26](#t=10:26)** Upload or download progress events\n* **[12:03](#t=12:03)** Valid status API\n* **[13:45](#t=13:45)** Defaults\n* **[15:32](#t=15:32)** Custom timeouts\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4ddf5d706374b1b3b24090b404c844409195c4d3f07806b1570e69c555bd9a30', 'why-do-people-still-use-axios-over-fetch', '/shows/453 - Axios over Fetch.md', '2023-10-16 20:07:36.271', '2023-10-27 15:58:05.635', 'HASTY'),
('syntax_podcast_show_00454', 454, 'WTF is the Edge? Edge Compute / Functions', '2022-05-04 12:00:00.813', 'https://traffic.libsyn.com/syntax/Syntax_-_454.mp3', '\nIn this episode of Syntax, Wes and Scott talk about what edge functions are, the upsides and downsides of edge functions, and what they\'re used for.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax).\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:56](#t=01:56)** A big announcement\n* **[04:33](#t=04:33)** What is the Edge?\n* **[08:27](#t=08:27)** The upsides of edge functions\n* **[12:13](#t=12:13)** Cold start\n* **[18:21](#t=18:21)** Sponsor: Linode\n* **[19:24](#t=19:24)** What are downsides of edge functions?\n* **[27:27](#t=27:27)** Sponsor: LogRocket\n* **[28:35](#t=28:35)** What is the use case for an edge function?\n* **[34:52](#t=34:52)** Authentication\n* **[37:23](#t=37:23)** Caching\n* **[40:51](#t=40:51)** Are there flavors of edge functions?\n* **[44:00](#t=44:00)** Sponsor: Freshbooks\n* **[46:06](#t=46:06)** What are edge functions not used for?\n* **[47:39](#t=47:39)** What companies offer this?\n* **[50:58](#t=50:58)** Sick Picks\n\n* [Netlify announcing serverless compute with edge functions](https://www.netlify.com/blog/announcing-serverless-compute-with-edge-functions)\n\n* [Syntax 310 Serverless, Deno and TypeScript with Brian Leroux](https://syntax.fm/show/310/serverless-deno-and-typescript-with-brian-leroux)\n\n* [Vercel Middleware](https://vercel.com/docs/concepts/functions)\n\n* [AWS Lambda](https://aws.amazon.com/lambda/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Patented History of Innovations](https://podcasts.apple.com/us/podcast/the-origin-of-zero/id1612089556?i=1000558099918)\n* Wes: [Fastmov Precut Parchment Paper](https://amzn.to/3vf2y2Y)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3504d57c2b1aaff5a17babe4a1038a071a34a4a8d9a9c7a70ac50dfc5ff97ab8', 'wtf-is-the-edge-edge-compute-functions', '/shows/454 - WTF is the Edge.md', '2023-10-16 20:07:36.320', '2023-10-27 15:58:05.694', 'TASTY'),
('syntax_podcast_show_00455', 455, 'TypeScript Fundamentals × Narrowing, Discriminating Unions, and Type Guards', '2022-05-09 12:00:00.119', 'https://traffic.libsyn.com/syntax/Syntax_-_455.mp3', '\nIn this Hasty Treat, Scott and Wes talk about TypeScript Fundamentals, including narrowing, discriminating unions, and type guards.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Payments Hub - Sponsor\n\nThere are hundreds of payments processing companies out there. Hit up [developer.paymentshub.com/syntax](https://developer.paymentshub.com/syntax) to learn more about how Payments Hub Developers not only processes ecommerce and in-person payments, but also boards and underwrites your merchants in as little as 90 minutes. We are currently offering Syntax listeners who become new partners 6 months free data through our Business Reporting API!\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:35](#t=01:35)** Sponsor: Sentry\n* **[02:23](#t=02:23)** Sponsor: Payments Hub\n* **[05:21](#t=05:21)** Intro to TypeScript fundamentals\n* **[06:28](#t=06:28)** What is Type Narrowing?\n* **[09:32](#t=09:32)** typeof\n* **[11:58](#t=11:58)** instanceof\n* **[13:29](#t=13:29)** Custom typeguards\n* **[16:12](#t=16:12)** this is\n* **[17:59](#t=17:59)** discriminated unions\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '25a09f47198894e66c0c21ffbfa2676384d53802beb16a1a741cfa66f8e4d1ea', 'typescript-fundamentals-narrowing-discriminating-unions-and-type-guards', '/shows/455 - TypeScript Fundamentals.md', '2023-10-16 20:07:36.363', '2023-10-27 15:58:05.759', 'HASTY'),
('syntax_podcast_show_00456', 456, '10 Nifty Browser APIs', '2022-05-11 12:00:00.911', 'https://traffic.libsyn.com/syntax/Syntax_-_456.mp3', '\nIn this episode of Syntax, Wes and Scott talk about 10 browser API\'s you might not be familiar with including getUserMedia, Resize Observer, SpeechRecognition, and more!\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:13](#t=00:13)** Welcome\n* **[01:05](#t=01:05)** Dishwasher talk\n* **[04:30](#t=04:30)** getUserMedia\n* [Hair.WesBos.com](https://hair.wesbos.com)\n* [Javascript 30](https://javascript30.com)\n* **[07:22](#t=07:22)** FileSystem\n* [Level Up Tutorials: Browser APIs](https://leveluptutorials.com/tutorials/exploring-browser-apis/intro-to-exploring-browser-apis)\n* [Electron](https://www.electronjs.org)\n* **[12:50](#t=12:50)** Geolocation\n* **[15:07](#t=15:07)** Sponsor: Prismic\n* **[16:41](#t=16:41)** Permissions\n* **[22:36](#t=22:36)** Web Animations\n* [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API)\n* [Framer Motion](https://www.framer.com/motion/)\n* [Motion One](https://motion.dev)\n* **[26:31](#t=26:31)** Resize Observer\n* [Resize Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API)\n* **[29:33](#t=29:33)** Sponsor: LogRocket\n* **[30:45](#t=30:45)** Clipboard\n* [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API)\n* **[34:10](#t=34:10)** Web storage\n* [Web storage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)\n* **[37:11](#t=37:11)** Sponsor: Freshbooks\n* **[38:09](#t=38:09)** SpeechSynthesis\n* **[41:32](#t=41:32)** SpeechRecognition\n* **[46:14](#t=46:14)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [RCA to HDMI adapter](https://amzn.to/3y5m7wz)\n* Wes: [SlimLED](https://www.liteline.com/page/SlimLED)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e8d9b9696db42ef73d7e1b3ffabc8deec3ad185d56cab9c12cea2048ac286c64', '10-nifty-browser-apis', '/shows/456 - 10 Browser APIs.md', '2023-10-16 20:07:36.415', '2023-10-27 15:58:05.812', 'TASTY'),
('syntax_podcast_show_00457', 457, 'Supper Club × NX Monorepos with Victor Savkin', '2022-05-13 12:00:00.950', 'https://traffic.libsyn.com/syntax/Syntax_-_457.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Victor Savkin about NX Monorepo development.\n\n## Whiskey Web and Whatnot  - Sponsor\n\n[Whiskey Web and Whatnot](https://www.whiskeywebandwhatnot.fm) is different than your typical dev podcast. We show a lighter, more human side of developers you know and love, like a fireside chat with your favorite devs. Past guests include Tom Preston-Werner, Kent C. Dodds, Charlie Gerard, and of course Wes Bos! We have discussed everything from Next.js and TypeScript to Chuck’s past life as a blackjack dealer, Cincinnati Chili, the best casseroles, and of course whiskey!\n\nVisit [whiskeywebandwhatnot.fm](https://www.whiskeywebandwhatnot.fm) or find them wherever you listen to podcasts.\n\n## Strapi - Sponsor\n\nStrapi enables developers to build projects faster by providing a customizable API out of the box and giving them the freedom to use their favorite tool as it has both REST and GraphQL endpoints. Strapi is extensible and frontend agnostic, built to cover all your content use cases. Give Strapi a try at [strapi.io/demo](https://strapi.io/demo), find your missing content workflow piece on our [marketplace](https://market.strapi.io),and learn more about Strapi and how it help you on our [Youtube channel](https://www.youtube.com/c/Strapi).\n\n## Show Notes\n\n* **[00:29](#t=00:29)** Welcome\n* **[02:42](#t=02:42)** Guest introduction\n* **[04:07](#t=04:07)** What tools did Google use?\n* **[10:49](#t=10:49)** What do bigger companies use for version control?\n* **[14:40](#t=14:40)** What is Nx?\n* [Nx](https://nx.dev)\n* **[21:02](#t=21:02)** How does Nx help you upgrade projects?\n* **[27:42](#t=27:42)** Sponsor: Whiskey Web and Whatnot\n* **[28:33](#t=28:33)** How does Nx fit into the existing tooling?\n* **[37:27](#t=37:27)** Sponsor: Strapi\n* **[39:02](#t=39:02)** Caching and skipping builds\n* **[44:50](#t=44:50)** The problem with caching\n* **[48:44](#t=48:44)** Is it used for images or video?\n* **[51:40](#t=51:40)** Small projects can benefit as well\n* **[53:13](#t=53:13)** Lightning questions\n* [Happy Hacking KB](https://happyhackingkb.com)\n* [IntelliJ](https://www.jetbrains.com/idea/)\n* [LunarVim](https://www.lunarvim.org)\n* [VS Code](https://code.visualstudio.com)\n* **[02:23](#t=02:23)** Shameless Plugs\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5a47d9ec22a276b7671646dc8f9a9a8f99109bfaba6d9a29b411365203a8fdc9', 'supper-club-nx-monorepos-with-victor-savkin', '/shows/457 - Supper club monorepos.md', '2023-10-16 20:07:36.454', '2023-10-27 15:58:05.870', 'SUPPER'),
('syntax_podcast_show_00458', 458, 'Why do we need Web Interop? Another Standards Body?', '2022-05-16 12:00:00.762', 'https://traffic.libsyn.com/syntax/Syntax_-_458.mp3', '\nIn this Hasty Treat, Scott and Wes talk about why we need Web Interop? Yet another standards body? Our thoughts on Serverless, Edge Compute, and more.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:25](#t=01:25)** Sponsor: Sentry\n* **[02:25](#t=02:25)** Sponsor: Sanity\n* **[04:10](#t=04:10)** The Syntax Lift adventure\n* **[06:04](#t=06:04)** A new Community Group for Web-interoperable JavaScript runtimes.\n* **[07:07](#t=07:07)** JavaScript environments\n* **[09:19](#t=09:19)** What\'s bun?\n* [Bun](https://bun.sh)\n* **[13:28](#t=13:28)** Are we excited about this?\n* **[16:27](#t=16:27)** What\'s the future of this?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b7365391536019c79595e689ca837179c33c7afb875a185fdaa4693c2988b3a2', 'why-do-we-need-web-interop-another-standards-body', '/shows/458 - Why do we need Web Interop.md', '2023-10-16 20:07:48.824', '2023-10-27 15:58:05.970', 'HASTY'),
('syntax_podcast_show_00459', 459, 'Potluck - Protestware × NoSQL × Next.js × ESM × Jest', '2022-05-18 12:00:00.281', 'https://traffic.libsyn.com/syntax/Syntax_-_459.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about protestware, NoSQL, Next.js, the Syntax.fm website, ESM, Jest, and more!\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:30](#t=01:30)** What are the good reasons to use nextjs apart from personal preference?\n* **[05:15](#t=05:15)** How did you decide to build Syntax.fm?\n* [Uses.tech](https://uses.tech)\n* **[09:09](#t=09:09)** Why does my M1 Mac feel slower than my Intel Mac?\n* **[14:44](#t=14:44)** Do you alphabetize your larger javascript objects by key name?\n* **[17:14](#t=17:14)** Sponsor: Prismic\n* **[19:06](#t=19:06)** Why did you choose noSQL database over SQL databse?\n* **[25:13](#t=25:13)** What does it mean to support ESM?\n* **[30:23](#t=30:23)** Sponsor: LogRocket\n* **[31:35](#t=31:35)** Are open source maintainers doing harm by inserting protestware into packages?\n* [Protestware found lurking in popular npm package](https://checkmarx.com/blog/new-protestware-found-lurking-in-highly-popular-npm-package/)\n* **[40:30](#t=40:30)** Should I write the game logic on the backend or on the frontend?\n* **[46:30](#t=46:30)** Sponsor: Auth0\n* **[48:20](#t=48:20)** Sick Picks\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Eons Mysteries of Time podcast](https://beta.prx.org/series/41240)\n* Wes: [Mr Bio Multi cable](https://amzn.to/3N83pZz)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'eb975652be8bf4413092744d334f5d631c29ba7049d9080dfd13b5ad06fcfd74', 'potluck-protestware-nosql-next-js-esm-jest', '/shows/459 - Potluck.md', '2023-10-16 20:07:48.870', '2023-10-27 15:58:06.032', 'TASTY'),
('syntax_podcast_show_00460', 460, 'Supper Club × Turborepo with Jared Palmer', '2022-05-20 12:00:00.500', 'https://traffic.libsyn.com/syntax/Syntax_-_460.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Jared Palmer about Turborepo, how it fits in your tech stack, and what it was like being acquired by Vercel.\n\n## Whiskey Web and Whatnot  - Sponsor\n\n[Whiskey Web and Whatnot](https://www.whiskeywebandwhatnot.fm) is different than your typical dev podcast. We show a lighter, more human side of developers you know and love, like a fireside chat with your favorite devs. Past guests include Tom Preston-Werner, Kent C. Dodds, Charlie Gerard, and of course Wes Bos! We have discussed everything from Next.js and TypeScript to Chuck’s past life as a blackjack dealer, Cincinnati Chili, the best casseroles, and of course whiskey!\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* [Jared Palmer](https://twitter.com/jaredpalmer)\n* **[02:15](#t=02:15)** What is Turborepo?\n* [Turborepo](https://turborepo.org)\n* [Vercel](https://vercel.com)\n* [tsdx](https://tsdx.io)\n* **[03:27](#t=03:27)** Where does Turborepo fit in your stack?\n* **[06:04](#t=06:04)** What are Google, Meta, or Twitter doing?\n* **[15:35](#t=15:35)** Sponsor: Whiskey, Web and Whatnot\n* **[16:45](#t=16:45)** What\'s the cost of adding Turborepo to a project?\n* **[21:19](#t=21:19)** Changing based on environmental variables\n* **[23:18](#t=23:18)** Does this replace how you define your workplace?\n* **[24:08](#t=24:08)** How do you share the cache?\n* **[25:25](#t=25:25)** What don\'t you cache?\n* **[27:35](#t=27:35)** What about Gatsby images?\n* **[28:44](#t=28:44)** Can Turborepo help with re-running compiles?\n* **[36:54](#t=36:54)** Supper Rapid Fire Questions\n* [Oceanic Next](https://github.com/mhartington/oceanic-next)\n* [GitHub Dark](https://github.com/StylishThemes/Github-Dark)\n* [Kotlin](https://kotlinlang.org)\n* **[52:47](#t=52:47)** Selling Turborepo to Vercel\n* **[55:49](#t=55:49)** Shameless Plugs\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3dc34fd6631658ecf432cff7c18d90654a362ae2ab4abd74157eef2bccb27c32', 'supper-club-turborepo-with-jared-palmer', '/shows/460 - Supper club turbo repo.md', '2023-10-16 20:07:48.909', '2023-10-27 15:58:06.082', 'SUPPER'),
('syntax_podcast_show_00461', 461, 'Scott’s New Office × The Levelup Lodge', '2022-05-23 12:00:00.859', 'https://traffic.libsyn.com/syntax/Syntax_-_461.mp3', '\nIn this episode of Syntax, Scott talks about his new office setup where he records videos and podcasts, writes codes, and gets his steps in.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:15](#t=00:15)** Welcome\n* **[01:24](#t=01:24)** Office ideas\n* [Heat pumps on Technology Connections](https://www.youtube.com/watch?v=7J52mDjZzto)\n* [Neewer lighting](https://neewer.com/collections/lighting-studio)\n* **[05:00](#t=05:00)** Sponsor: Sanity\n* **[06:10](#t=06:10)** Sponsor: Sentry\n* **[07:37](#t=07:37)** Levelup Lodge tour\n* **[09:40](#t=09:40)** Lighting\n* **[13:57](#t=13:57)** The desk\n* [Karlby Countertop](https://www.ikea.com/ca/en/p/karlby-countertop-walnut-veneer-50335208/)\n* [Fully Jarvis legs](https://www.fully.com/jarvis-frame-only.html)\n* [Desk Haus](https://desk.haus)\n* **[19:32](#t=19:32)** Audio gear\n* [M-Audio BX8](https://m-audio.com/products/view/bx8-d2)\n* [Gik Acoustics](https://www.gikacoustics.com)\n* [Nero](https://audient.com/products/monitor-controllers/nero/overview/)\n* [Scarlett 2i2](https://focusrite.com/en/usb-audio-interface/scarlett/scarlett-2i2)\n* [Caldigit TS3 Plus](https://www.caldigit.com/ts3-plus/)\n* [Electrovoice RE20](https://products.electrovoice.com/na/en/re20/)\n* [Cloudlifter cL1](https://www.cloudmicrophones.com/cloudlifter-cl-1)\n* [DBX 286s](https://dbxpro.com/en/products/286s)\n* [Sony Alpha 7 III](https://www.sony.ca/en/electronics/interchangeable-lens-cameras/ilce-7m3-body-kit)\n* [Audeze LCD 1](https://www.audeze.com/products/lcd-1)\n* **[25:25](#t=25:25)** Tech setup\n* **[33:00](#t=33:00)** Misc items\n* **[35:43](#t=35:43)** Movie posters\n* [Shaw Brothers posters](https://www.redbubble.com/shop/shaw+brothers+posters)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3d397e0ffe86487bc446b6c8e5a88de1b940fb66daaf3b92eaab1dd5211e1f0f', 'scott-s-new-office-the-levelup-lodge', '/shows/461 - Scotts office.md', '2023-10-16 20:07:49.121', '2023-10-27 15:58:06.206', 'HASTY'),
('syntax_podcast_show_00462', 462, 'TypeScript Tooling Explained', '2022-05-25 12:00:00.476', 'https://traffic.libsyn.com/syntax/Syntax_-_462.mp3', '\nIn this episode of Syntax, Wes and Scott talk through TypeScript tooling, build tools, configs, and editors.\n\n## LogRocket  - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## MagicBell - Sponsor\n\nMagicBell is the The notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Freshbooks  - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:08](#t=00:08)** Welcome\n* **[01:57](#t=01:57)** Tooling\n* [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html)\n* [esbuild](https://esbuild.github.io)\n* [swc](https://swc.rs)\n* [bun](https://bun.sh)\n* [Zig](https://ziglearn.org)\n* **[13:45](#t=13:45)** LogRocket\n* **[15:01](#t=15:01)** Server side or node-ish\n* [Deno](https://deno.land)\n* [ts-node](https://www.npmjs.com/package/ts-node)\n* [wds](https://github.com/gadget-inc/wds)\n* **[26:09](#t=26:09)** MagicBell\n* **[27:42](#t=27:42)** Build tools\n* [Vite](https://vitejs.dev)\n* [Parcel](https://parceljs.org)\n* [Nextjs](https://nextjs.org)\n* [Svelte Kit](https://kit.svelte.dev)\n* [Rome](https://rome.tools)\n* **[33:25](#t=33:25)** Configs\n* [tsconfig](https://www.typescriptlang.org/tsconfig#module)\n* [typescript-eslint](https://typescript-eslint.io)\n* **[39:08](#t=39:08)** Sponsor: Freshbooks\n* **[40:00](#t=40:00)** Editors\n* [VS Code](https://code.visualstudio.com)\n* [Webstorm](https://www.jetbrains.com/webstorm/)\n* **[44:58](#t=44:58)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Tonie](https://amzn.to/3Nzziuv)\n* Wes: [Burst Toothbrush](https://www.burstoralcare.com/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '6a2921a4f06e682538c06d88c5833ac9f8ce703fa68ca939421e45c49a338bef', 'typescript-tooling-explained', '/shows/462 - TypeScript Tooling.md', '2023-10-16 20:07:49.168', '2023-10-27 15:58:06.257', 'TASTY'),
('syntax_podcast_show_00463', 463, 'Supper Club × RedwoodJS with Tom Preston-Werner', '2022-05-27 12:00:00.899', 'https://traffic.libsyn.com/syntax/Syntax_-_463.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Tom Preston-Werner about his work on RedwoodJS, the importance of documentation, and the new Redwood Startup Fund.\n\n## AIOSEO - Sponsor\n\nOur Sponsor for today’s episode is a popular WordPress plugin, [AIOSEO](https://aioseo.com/), also known as All in One SEO for WordPress. It’s becoming one of the most powerful SEO toolkit and is now used by over 3 million websites to improve search rankings.\n\n## Shipshape (Whiskey, Web and Whatnot) - Sponsor\n\n[Whiskey Web and Whatnot](https://www.whiskeywebandwhatnot.fm) is different than your typical dev podcast. We show a lighter, more human side of developers you know and love, like a fireside chat with your favorite devs. Past guests include Tom Preston-Werner, Kent C. Dodds, Charlie Gerard, and of course Wes Bos! We have discussed everything from Next.js and TypeScript to Chuck’s past life as a blackjack dealer, Cincinnati Chili, the best casseroles, and of course whiskey!\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* **[01:36](#t=01:36)** Guest introduction\n* [Tom Preston-Werner on Twitter](https://twitter.com/mojombo)\n* [Kai’s Power Tools](https://en.wikipedia.org/wiki/Kai%27s_Power_Tools)\n* **[04:23](#t=04:23)** Math is weird\n* **[07:21](#t=07:21)** User interface design\n* **[08:53](#t=08:53)** Sponsor: AIOSEO\n* **[10:24](#t=10:24)** What is RedwoodJS?\n* [RedwoodJS](https://redwoodjs.com)\n* [Chatterbug](https://chatterbug.com)\n* **[15:31](#t=15:31)** Is JavaScript the stack you should be using these days?\n* **[18:40](#t=18:40)** Freedom vs decisions in software\n* [Where Good Ideas Come From](https://www.amazon.ca/Where-Good-Ideas-Come-Innovation/dp/1594485380)\n* **[23:10](#t=23:10)** RedwoodJS docs and video strategy\n* [RedwoodJS Docs](https://redwoodjs.com/docs/introduction)\n* [Readme Driven Development](https://tom.preston-werner.com/2010/08/23/readme-driven-development.html)\n* **[29:13](#t=29:13)** The tech behind RedwoodJS\n* [Apollo](https://www.apollographql.com)\n* [Storybook](https://storybook.js.org)\n* **[36:20](#t=36:20)** Sponsor: Shipshape (Whiskey, Web and Whatnot)\n* **[36:58](#t=36:58)** Redwood Startup Fund\n* [The Redwood Startup Fund](https://twitter.com/mojombo/status/1512113674315460608)\n* **[42:28](#t=42:28)** Supper club questions\n* [VS Code](https://code.visualstudio.com)\n* [Netlify](https://www.netlify.com)\n* [Hacker News](https://news.ycombinator.com)\n* [RedwoodJS on Discord](https://discord.com/invite/redwoodjs)\n* [RedwoodJS Discourse](https://community.redwoodjs.com)\n* [RedwoodJS on Twitter](https://twitter.com/redwoodjs)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bb34c44043fc2ff5e7f666eb3bebdace21ec74720977c99eda9f2372d22f1106', 'supper-club-redwoodjs-with-tom-preston-werner', '/shows/463 - Supper Club Tom.md', '2023-10-16 20:07:49.203', '2023-10-27 15:58:06.305', 'SUPPER'),
('syntax_podcast_show_00464', 464, 'Cache Control Headers Explained', '2022-05-30 12:00:00.466', 'https://traffic.libsyn.com/syntax/Syntax_-_464.mp3', '\nIn this Hasty Treat, Scott and Wes answer a question about caching, cache control headers, an explanation of the fields for caching.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:11](#t=01:11)** Sponsor: Sentry\n* **[02:28](#t=02:28)** Sponsor: LogRocket\n* **[03:08](#t=03:08)** My struggle has been with caching, cache control headers and would love a better explanation on some of the fields?\n* [Time to live calculator](https://svelte.dev/repl/a779692677d44146b9118e0008cbb4d0?version=3.48.0)\n* [Reminx Conf](https://remix.run/conf)\n* [Opera](http://opera.com/)\n* **[04:48](#t=04:48)** What is a header?\n* **[06:05](#t=06:05)** What is caching?\n* **[08:21](#t=08:21)** Time to live (TTL)\n* **[09:08](#t=09:08)** Benefits of a cache\n* **[10:03](#t=10:03)** Specifying how long to cache\n* **[11:06](#t=11:06)** max-age\n* **[12:45](#t=12:45)** stale-while-revalidate\n* **[16:17](#t=16:17)** stale-if-error\n* **[16:54](#t=16:54)** must-revalidate\n* **[17:21](#t=17:21)** private\n* **[18:03](#t=18:03)** immutable\n* **[19:29](#t=19:29)** no-transform\n* **[20:45](#t=20:45)** Cache Control Request Directives\n* [The United States of Insanity - Official Trailer](https://www.youtube.com/watch?v=NBEK4NLcbrY)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8b18ab3b809f1389333d21b191d476c4e9b537508e6cd1696078429f7ea2a29c', 'cache-control-headers-explained', '/shows/464 - Cache Control Headers Explained.md', '2023-10-16 20:07:49.311', '2023-10-27 15:58:06.418', 'HASTY'),
('syntax_podcast_show_00465', 465, 'Git in VS Code', '2022-06-01 12:00:00.314', 'https://traffic.libsyn.com/syntax/Syntax_-_465.mp3', '\nIn this episode of Syntax, Wes and Scott talk all about how they use Git inside of VS Code, extensions they use, and the various ways to interact with Git in VS Code.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## SPONSOR - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## SPONSOR - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Recording Syntax in Riverside\n* [Riverside](http://www.riverside.fm/?via=ichris)\n* **[01:22](#t=01:22)** Welcome\n* **[04:57](#t=04:57)** CLI vs VS Code\n* [VS Code](https://code.visualstudio.com)\n* **[07:27](#t=07:27)** Git Jargon\n* **[11:50](#t=11:50)** UI tools we\'ve used\n* [Git Tower](https://www.git-tower.com/mac)\n* [Git Kraken](https://www.gitkraken.com/)\n* [GitHub for Desktop](https://desktop.github.com/)\n* [iTerm](https://iterm2.com)\n* [Warp](https://www.warp.dev)\n* [Git SCM](https://git-scm.com)\n* **[14:09](#t=14:09)** Ways to interact with Git in VS Code\n* **[19:41](#t=19:41)** Source control tab\n* **[26:28](#t=26:28)** Sponsor: Linode\n* **[27:47](#t=27:47)** File History\n* **[30:29](#t=30:29)** Diffing or Compare\n* **[36:24](#t=36:24)** Conflict resolution\n* **[42:56](#t=42:56)** Automation with post-commit commands\n* **[46:10](#t=46:10)** Sponsor: LogRocket\n* **[47:14](#t=47:14)** Extensions\n* [GitLens](https://www.gitkraken.com/gitlens)\n* [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)\n* [Git Graph](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)\n* [Conventional Commits](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits)\n* **[53:59](#t=53:59)** Git config tip\n* **[55:24](#t=55:24)** Sponsor: Freshbooks\n* **[56:02](#t=56:02)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Espanso](https://espanso.org)\n* Wes: [AirPod cleaning kit](https://www.aliexpress.com/item/1005004058904979.html?spm=a2g0o.order_list.0.0.59c61802UtTwRO)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '486703075dd5aea130108627ff8f3942a5d0f11f08e46f59c0669d2a63b6ed5f', 'git-in-vs-code', '/shows/465 - git in vscode.md', '2023-10-16 20:07:49.351', '2023-10-27 15:58:06.471', 'TASTY'),
('syntax_podcast_show_00466', 466, 'Supper Club × Coding Burnout and Gardening with Anselm Hannemann', '2022-06-03 12:00:00.537', 'https://traffic.libsyn.com/syntax/Syntax_-_466.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Anselm Hannemann about burning out, trying out gardening, and how getting away from the screen can help restore your creative energy.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Strapi - Sponsor\n\nStrapi enables developers to build projects faster by providing a customizable API out of the box and giving them the freedom to use their favorite tool as it has both REST and GraphQL endpoints. Strapi is extensible and frontend agnostic, built to cover all your content use cases. Give Strapi a try at [Strapi.io/demo](https://strapi.io/demo), find your missing content workflow piece [on our marketplace](https://market.strapi.io), and learn more about Strapi and how it help you [on our Youtube](https://www.youtube.com/c/Strapi).\n\n## SeedProd - Sponsor\n\nOur Sponsor for today’s episode is a popular WordPress plugin, [SeedProd](https://www.seedprod.com/), a fast growing drag & drop WordPress website builder that helps you create custom WordPress themes & page layouts without any code. Over 1 million websites are using SeedProd to build WordPress sites faster.\n\nYou can start with one of their hundreds of pre-made website templates to save time or use the blank canvas to build a no-code website. It has built-in email marketing integrations, dynamic personalization, and many other powerful features to help you build a fast WordPress website without writing code.\n\n[Try SeedProd Pro today and get 50% off](https://www.seedprod.com/syntax/) or start with [their free version](https://wordpress.org/plugins/coming-soon/) by downloading it from the WordPress plugin directory.\n\n## Show Notes\n\n* **[00:39](#t=00:39)** Welcome\n* **[01:58](#t=01:58)** Guest introduction\n* [HelloAnselm.com](https://helloanselm.com)\n* [Anselm on Twitter](https://twitter.com/helloanselm)\n* [Web Development Reading List Newsletter](https://wdrl.info)\n* **[10:04](#t=10:04)** Doing things yourself as a form of therapy\n* **[14:33](#t=14:33)** Sponsor: Hasura\n* **[16:34](#t=16:34)** Rules for digital usage?\n* **[19:25](#t=19:25)** How do you learn you\'re burned out?\n* **[26:30](#t=26:30)** Sponsor: Strapi\n* **[28:10](#t=28:10)** Gardening\n* [Gardening site](https://schaufelundgabel.de)\n* [Garden on Instagram](https://www.instagram.com/schaufelgabel/)\n* [The Post Apocalyptic Inventor](https://www.youtube.com/c/ThePostApocalypticInventor)\n* **[29:46](#t=29:46)** What do you feed your plants?\n* **[34:09](#t=34:09)** Irrigation issues\n* **[35:52](#t=35:52)** Sponsor: SeedProd\n* **[38:03](#t=38:03)** Dealing with weeds\n* **[40:54](#t=40:54)** What about chickens?\n* **[44:20](#t=44:20)** Farming as a business\n* **[45:39](#t=45:39)** Incorporating tech into the gardening\n* **[54:06](#t=54:06)** Supper Club Questions\n* [Today I Learned Stefan Judis](https://www.stefanjudis.com/today-i-learned/)\n* [Web Design Weekly](https://web-design-weekly.com)\n* **[59:09](#t=59:09)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0979b2599cca64579a5f834382792400c3d1ac681d2ebed4bf512ea7099c12a0', 'supper-club-coding-burnout-and-gardening-with-anselm-hannemann', '/shows/466 - Supper club.md', '2023-10-16 20:07:49.398', '2023-10-27 15:58:06.534', 'SUPPER'),
('syntax_podcast_show_00467', 467, 'Stopping Malicious Actors', '2022-06-06 12:00:00.049', 'https://traffic.libsyn.com/syntax/Syntax_-_467.mp3', '\nIn this Hasty Treat, Scott and Wes talk about ways to prevent malicious people from using or abusing your app.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:04](#t=01:04)** Sponsor: Linode\n* **[02:06](#t=02:06)** Sponsor: Sentry\n* **[02:59](#t=02:59)** What kind of bad things can happen to your application?\n* **[06:24](#t=06:24)** How do you stop bad actors?\n* **[12:20](#t=12:20)** Nonce tokens\n* **[14:10](#t=14:10)** CSRF\n* [CSRF Explained](https://syntax.fm/show/363/hasty-treat-csrf-explained)\n* **[14:50](#t=14:50)** Captcha\n* [hCaptcha](https://www.hcaptcha.com)\n* **[17:06](#t=17:06)** DDOS\n* [Cloudlfare DDOS](https://www.cloudflare.com/en-ca/ddos/)\n* **[17:38](#t=17:38)** Ban known bad ASNS\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd4a56d805ff9cd02fe9811e2a4f5ea671ec370a4aa3ace69c1763da0999d4605', 'stopping-malicious-actors', '/shows/467 - Stopping Malicious Actors.md', '2023-10-16 20:07:49.527', '2023-10-27 15:58:06.671', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00468', 468, 'Syntax Live at Reactathon', '2022-06-08 12:00:00.857', 'https://traffic.libsyn.com/syntax/Syntax_-_468.mp3', '\nIn this episode of Syntax, Wes and Scott are live from Reactathon 2022!\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Payments Hub - Sponsor\n\nThere are hundreds of payments processing companies out there. Hit up [developer.paymentshub.com/syntax](https://developer.paymentshub.com/syntax) to learn more about how Payments Hub Developers not only processes ecommerce and in-person payments, but also boards and underwrites your merchants in as little as 90 minutes. We are currently offering Syntax listeners who become new partners 6 months free data through our Business Reporting API!\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* [Live video version](https://www.youtube.com/watch?v=PXO0iopa5QI)\n\n* **[00:32](#t=00:32)** Welcome\n* **[04:10](#t=04:10)** Hot Take Tweets\n* [What is your JavaScript Hot Take or unpopular opinion?](https://twitter.com/wesbos/status/1520074336463429637?s=21&t=mO9-2O0DO5fZ-uycIIbIcg)\n* **[05:42](#t=05:42)** Semi colons are not optional\n* **[06:11](#t=06:11)** For loops are not needed\n* **[07:19](#t=07:19)** People forget about ES Harmony\n* **[08:11](#t=08:11)** Sponsor: Sentry\n* **[09:23](#t=09:23)** A good website should function without JavaScript\n* **[10:28](#t=10:28)** Classes were a mistake\n* **[10:54](#t=10:54)** Stay as close to the platform primatives\n* **[11:36](#t=11:36)** TypeScript is overrated and overhyped\n* **[11:50](#t=11:50)** Kickin it old school\n* [PNG Fix](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7eaa615a-4f84-4f56-9183-552cac4a5609/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220606%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220606T214149Z&X-Amz-Expires=86400&X-Amz-Signature=2fa8be31a737a4a682db588382392c610b9ebb0b55036c977ffb6ae7a97d6356&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22&x-id=GetObject)\n* [MM Swap image](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e87aa8f9-0a24-4fa5-ad56-346e58e9c079/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220606%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220606T214119Z&X-Amz-Expires=86400&X-Amz-Signature=00eeacc735b72e354c23e37fdb69f011a9dc6160906bf9b83ab2c279c8d47801&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22&x-id=GetObject)\n* [Rounded Corner images (sliding Doors)](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/746c04de-b14d-445c-9d4d-0897989affa0/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220606%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220606T214210Z&X-Amz-Expires=86400&X-Amz-Signature=c221f4fbc1606ca395f6110a29908d0327d00a19ef917db6d4eea5d76d6c1ffa&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22&x-id=GetObject)\n* `var that = this;`\n* [IE CSS Hack](https://stackoverflow.com/questions/20541306/how-to-write-a-css-hack-for-ie-11)\n* Test for Opera `var test = /^function \\(/.test([].sort);`\n* **[25:09](#t=25:09)** Sponsor: Payments Hub\n* **[26:29](#t=26:29)** Syntax Error\n* [Mercurius Library](https://pypi.org/project/mercurius-core-library/)\n* **[31:19](#t=31:19)** JS or NAY-S\n* **[39:02](#t=39:02)** Sponsor: Freshbooks\n* **[39:23](#t=39:23)** Q&A\n* [Syntax episode with Josh Wardle](https://syntax.fm/show/430/creator-of-wordle-josh-wardle)\n* **[39:57](#t=39:57)** Using Array methods or for loops\n* **[41:12](#t=41:12)** What web tech is overhyped and what\'s under hyped?\n* **[43:01](#t=43:01)** Would you rather use Dvorak or Mac butterfly keyboard?\n* **[43:41](#t=43:41)** Name all provinces and territories in Canada\n* **[44:39](#t=44:39)** Fav Syntax.fm episode\n* **[45:38](#t=45:38)** How did Wes and Josh meet?\n* **[46:52](#t=46:52)** What\'s your favorite Trader Joes snack?\n* **[47:29](#t=47:29)** Would you hire a European or American developer?\n* **[49:04](#t=49:04)** How would you validate a product idea for Saas business?\n* **[49:48](#t=49:48)** What podcasts do you listen to?\n* [Steve O Podcast](https://www.steveo.com/pages/podcast)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4233108fdc5692f6adc8d62cd6b138792aece581d8d80a9406efeed108f8522f', 'syntax-live-at-reactathon', '/shows/468 - Syntax Live at Reactathon.md', '2023-10-16 20:07:49.560', '2023-10-27 15:58:06.734', 'TASTY'),
('syntax_podcast_show_00469', 469, 'Supper Club × Is No Code going to take our jobs? with Connor Finlayson', '2022-06-10 12:00:00.056', 'https://traffic.libsyn.com/syntax/Syntax_-_469.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Connor Finlayson about his experience building and teaching no code projects.\n\n## Postlight Podcast - Sponsor\n\nPostlight is a strategy, design, and engineering firm that builds platforms for some of the biggest organizations in the world. The Postlight Podcast is hosted by senior leaders Rich Ziade, Paul Ford, Gina Trapani, and Chris LoSacco.\n\nIf you’re looking for answers to tough leadership questions, the Postlight Podcast has you covered.\n\nListen to new episodes every Tuesday, wherever you get your podcasts.\n\n## SeedProd - Sponsor\n\nOur Sponsor for today’s episode is a popular WordPress plugin, [SeedProd](https://www.seedprod.com/), a fast growing drag & drop WordPress website builder that helps you create custom WordPress themes & page layouts without any code. Over 1 million websites are using SeedProd to build WordPress sites faster.\n\nYou can start with one of their hundreds of pre-made website templates to save time or use the blank canvas to build a no-code website. It has built-in email marketing integrations, dynamic personalization, and many other powerful features to help you build a fast WordPress website without writing code.\n\n[Try SeedProd Pro today and get 50% off](https://www.seedprod.com/syntax/) or start with [their free version](https://wordpress.org/plugins/coming-soon/) by downloading it from the WordPress plugin directory.\n\n## Strapi - Sponsor\n\nStrapi enables developers to build projects faster by providing a customizable API out of the box and giving them the freedom to use their favorite tool as it has both REST and GraphQL endpoints. Strapi is extensible and frontend agnostic, built to cover all your content use cases. Give Strapi a try at [Strapi.io/demo](https://strapi.io/demo), find your missing content workflow piece [on our marketplace](https://market.strapi.io), and learn more about Strapi and how it help you [on our Youtube](https://www.youtube.com/c/Strapi).\n\n## Show Notes\n\n* **[00:38](#t=00:38)** Welcome to Syntax\n* **[01:54](#t=01:54)** Guest introduction\n* [Unicorn Factory](https://www.unicornfactory.ca)\n* [ConnorFinlayson.com](https://www.connorfinlayson.com)\n* [Connor’s YouTube channel](https://www.youtube.com/c/ConnorFinlayson)\n* **[04:49](#t=04:49)** What is no code?\n* **[10:57](#t=10:57)** Is no code going to replace programmers?\n* **[14:57](#t=14:57)** Sponsor: Postlight Podcast\n* **[15:59](#t=15:59)** What are your favorite tools for no code?\n* [Zapier](https://zapier.com)\n* [Webflow](https://webflow.com)\n* [Make.com](https://www.make.com/en)\n* [Airtable](https://airtable.com)\n* [Memberstack](https://www.memberstack.com)\n* [Jetboost](https://www.jetboost.io)\n* [Bubble](https://bubble.io)\n* **[19:23](#t=19:23)** When do you need to use real JavaScript?\n* **[23:23](#t=23:23)** Where do you find information about no code?\n* **[25:26](#t=25:26)** Sponsor: SeedProd\n* **[39:25](#t=39:25)** How do you handle version control?\n* **[43:26](#t=43:26)** Are there native apps in no code land?\n* [Notion](https://www.notion.so)\n* [Editor X](https://www.editorx.com)\n* **[46:16](#t=46:16)** What is AirTable?\n* **[49:36](#t=49:36)** Cost of no code tools\n* **[52:45](#t=52:45)** Sponsor: Strapi\n* **[53:45](#t=53:45)** Supperclub Questions\n* **[06:42](#t=06:42)** Shameless Plugs\n* [CodeMeetsNoCode](https://www.codemeetsnocode.com/?ref=connorfinlayson)\n* **[09:49](#t=09:49)** Sick Picks\n* [Flowbase](https://www.flowbase.co)\n* [Relume](https://library.relume.io)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '95097d2b86bf449d4dbe159876e96cd3dc9eb22cc5bb80b38a644702fc03c19d', 'supper-club-is-no-code-going-to-take-our-jobs-with-connor-finlayson', '/shows/469 - Supper club No Code Connor Finlayson.md', '2023-10-16 20:07:49.600', '2023-10-27 15:58:06.784', 'SUPPER'),
('syntax_podcast_show_00470', 470, 'I can has() new CSS Selector?!', '2022-06-13 12:00:00.726', 'https://traffic.libsyn.com/syntax/Syntax_-_470.mp3', '\nIn this Hasty Treat, Scott and Wes talk about new CSS selectors :has, :where, and :is.\n\n## MagicBell - Sponsor\n\nMagicBell is the the notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - [use the coupon code SYNTAXFM for 10% off the first 12 months](https://www.magicbell.com).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:19](#t=01:19)** Sponsor: MagicBell\n* **[02:31](#t=02:31)** Sponsor: LogRocket\n* **[03:40](#t=03:40)** Don\'t say stupid\n* **[05:03](#t=05:03)** :Has\n* [MDN :Has](https://developer.mozilla.org/en-US/docs/Web/CSS/:has)\n\n```\n// Finds all p tags that have an anchor tag as a child\np:has(a) {}\n// Can find children of parent as well\n// Finds the button of a paragraph that contains an a tag \np:has(a) button {}\n// Finds all p tags that don\'t have an anchor tag as a child\np:not(:has(a)) {}\n// Finds all p tags where a is a direct sibling\np:has(> a) {}\n// would find <p><a>Hi</a></p>\n// would not find <p><span><a>hi</a></span></p>\n```\n\n* **[06:13](#t=06:13)** Jargon check\n* **[11:01](#t=11:01)** Some examples\n* **[13:25](#t=13:25)** Nest navigations\n* **[13:51](#t=13:51)** Can I use it?\n* **[15:52](#t=15:52)** Is and Where\n* [MDN :where](https://developer.mozilla.org/en-US/docs/Web/CSS/:where)\n\nIn the past we would write\n\n```\nheader p:hover,\nmain p:hover,\nfooter p:hover {\n  color: red;\n  cursor: pointer;\n}\n```\n\n:where is essentially a short had for making this easier considering the 2nd half of these selectors is the same. Will make your css dryer\n\n```\n:where(header, main, footer) p:hover {}\n```\n\nAlso super handy in avoiding css blocks being ignored for unsupported features.\n\n```\n// Doesn\'t work\ndiv:has(p), div:some_new_selector(p)\n\n// Will still work for :has if has is supported\n:where(div:has(p), div:some_new_selector(p))\n```\n\n* [When to use :Where](https://developer.mozilla.org/en-US/docs/Web/CSS/:where#examples)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '84514d6b82bcb24cedff4a7055b9e832175af74b47504cf4aaa3db8ea41609e4', 'i-can-has-new-css-selector', '/shows/470 - New CSS.md', '2023-10-16 20:07:49.776', '2023-10-27 15:58:06.930', 'HASTY'),
('syntax_podcast_show_00471', 471, 'Potluck - Headless WordPress, Databases, Regex', '2022-06-15 12:00:00.175', 'https://traffic.libsyn.com/syntax/Syntax_-_471_.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about headless WordPress, Regex, their health and fitness, CSS custom properties in media queries, and more.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## .TECH Domains - Sponsor\n\n.TECH is taking the tech industry by storm. A domain that shows the world what you are all about! If you\'re looking for a domain name for your startup, portfolio, or your own project like we did with uses.tech, check out .tech Domains. Syntax listeners can snap their .TECH Domains at 80% off on five-year registration by visiting [go.tech/syntaxistech](https://go.tech/syntaxistech) and using the coupon code \"syntax5\".\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[03:30](#t=03:30)** If I host a NextJS app on Digital Ocean, should I use a Digital Ocean database?\n* **[09:14](#t=09:14)** Will either of you ever do a regex course?\n* [Regex101](https://regex101.com/)\n* **[13:58](#t=13:58)** Is it possible to use the WordPress users database as the same database that the app uses?\n* [WPGraphQL](https://www.wpgraphql.com)\n* **[18:46](#t=18:46)** Sponsor: Sentry\n* **[19:43](#t=19:43)** How is health and fitness going for the both of you?\n* **[26:08](#t=26:08)** Does Wes know who Gendo Ikari is?\n* **[27:36](#t=27:36)** Dart popularity follow up\n* **[29:40](#t=29:40)** Is it vital that I should learn another programming language?\n* **[33:42](#t=33:42)** Sponsor: Sanity\n* **[34:54](#t=34:54)** If I\'m trying to get my first job in web development, do I need to be familiar with design software?\n* [Figma](https://www.figma.com)\n* **[40:01](#t=40:01)** Thank you for the confidence to apply for a web dev job\n* [Syntax 463 with Tom Preston-Werner](https://syntax.fm/show/463/supper-club-redwood-js-with-tom-preston-werner)\n* **[41:55](#t=41:55)** What advice will you give in terms of setting up core important things around network, state management, folder structure?\n* **[45:37](#t=45:37)** .TECH Domain Names\n* **[46:22](#t=46:22)** I just had an interview with a \"major tech company\" and your article on using string templates was really helpful.\n* [Template Strings](https://wesbos.com/template-strings-html)\n* **[48:43](#t=48:43)** If 80% of the time ew need to use preventDefault on form submission, why don\'t the simply change the HTML spec?\n* **[50:01](#t=50:01)** What\'s the rationale for not supporting CSS custom properties in media queries when using max/min width?\n* [CSS Env](https://drafts.csswg.org/css-env-1/)\n* [MDN CSS Env](https://developer.mozilla.org/en-US/docs/Web/CSS/env)\n* **[55:37](#t=55:37)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: * [You Must Remember This Podcast](http://www.youmustrememberthispodcast.com)\n* Wes: Tools\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5e0956497fa868fdb7e75d3226bd2576f933d5dbfc57ba27096d068589d9c905', 'potluck-headless-wordpress-databases-regex', '/shows/471 - potluck.md', '2023-10-16 20:07:49.811', '2023-10-27 15:58:06.985', 'TASTY'),
('syntax_podcast_show_00472', 472, 'Supper Club × Edge Functions and Deno with Eduardo Bouças of Netlify', '2022-06-17 12:00:00.259', 'https://traffic.libsyn.com/syntax/Syntax_-_472_v2.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk edge functions and Deno with Eduardo Bouças of Netlify.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Postlight Podcast - Sponsor\n\nPostlight is a strategy, design, and engineering firm that builds platforms for some of the biggest organizations in the world. The Postlight Podcast is hosted by senior leaders Rich Ziade, Paul Ford, Gina Trapani, and Chris LoSacco.\n\nIf you’re looking for answers to tough leadership questions, the Postlight Podcast has you covered.\n\nListen to new episodes every Tuesday, wherever you get your podcasts.\n\n## WP Mail SMTP - Sponsor\n\nDid you know that many WordPress sites are not properly configured to send emails? With WP Mail SMTP, you can easily optimize your site to send emails, avoid the spam folder, and make sure your emails land in the inbox every time.\n\nWP Mail SMTP comes with detailed email logs, email engagement tracking, visual email reports, weekly email summaries, integrations with popular email providers like SendLayer, Gmail, Outlook, and more!\n\n[Try WP Mail SMTP Pro today and get 50%](https://wpmailsmtp.com/syntax/) off or start with [their free version](https://wordpress.org/plugins/wp-mail-smtp/) by downloading it from the WordPress plugin directory.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[02:31](#t=02:31)** Who is Eduardo?\n* [EduardoBoucas.com](https://eduardoboucas.com)\n* [@eduardoboucas](https://twitter.com/eduardoboucas)\n* **[04:29](#t=04:29)** What is a serverless function?\n* **[06:42](#t=06:42)** What is the edge and an edge function?\n* [Edge Functions Explained](https://www.netlify.com/blog/edge-functions-explained/)\n* [Deno](https://deno.land)\n* **[08:41](#t=08:41)** Sponsor: Hasura\n* **[09:18](#t=09:18)** The internet is global, and server locations matter\n* **[17:09](#t=17:09)** Chaining multiple edge functions\n* **[20:18](#t=20:18)** Sponsor: WP Mail SMTP\n* **[21:18](#t=21:18)** Why use Deno?\n* **[25:06](#t=25:06)** What are the limitations of using Deno?\n* **[28:12](#t=28:12)** Why not run NodeJS servers on the edge?\n* **[30:02](#t=30:02)** Do you see a future where people are writing packages that work anywhere?\n* **[32:00](#t=32:00)** Sponsor: Postlight Podcast\n* **[32:53](#t=32:53)** What about databases and serverless functions?\n* [Planetscale](https://planetscale.com)\n* **[38:14](#t=38:14)** What language does Netlify use to write apps in?\n* [Netlify Edge Handlers](https://www.netlify.com/blog/2020/10/06/announcing-netlify-edge-handlers-now-in-early-access/)\n* **[44:08](#t=44:08)** Supper Club questions\n* [Warp](https://www.warp.dev)\n* [S Town Podcast](https://stownpodcast.org)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '68cd0d409293287d02adc25b2b4df918bec9de3f2198032f5a3f8c6dd85c9142', 'supper-club-edge-functions-and-deno-with-eduardo-boucas-of-netlify', '/shows/472 - supper club.md', '2023-10-16 20:07:49.863', '2023-10-27 15:58:07.052', 'SUPPER'),
('syntax_podcast_show_00473', 473, 'New Viewport Units', '2022-06-20 12:00:00.782', 'https://traffic.libsyn.com/syntax/Syntax_-_473.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the new viewport units coming to the web - what are they and when can we use them?\n\n## LogRocket  - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sanity.io - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:14](#t=01:14)** Sponsor: LogRocket\n* **[02:24](#t=02:24)** Sponsor: Sanity\n* **[04:19](#t=04:19)** What are viewport units?\n* [The Large and small and dynamic viewports](https://www.bram.us/2021/07/08/the-large-small-and-dynamic-viewports/)\n* **[05:22](#t=05:22)** What are the new viewport units?\n* [Large small and dyanmic viewports](https://css-tricks.com/the-large-small-and-dynamic-viewports/)\n* **[07:57](#t=07:57)** What\'s small and large?\n* **[11:52](#t=11:52)** How do viewport units help developers?\n* **[12:39](#t=12:39)** What about the keyboard on mobile?\n* [Keycode.info](https://keycode.info)\n* **[16:37](#t=16:37)** When can we start using new viewport units?\n\n## Tweet us your tasty treats!\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cbfb3df3a2a4f329fba772f3bed7fc5b269c68a161e691825a970f486b0924da', 'new-viewport-units', '/shows/473 - New Viewport Units.md', '2023-10-16 20:07:50.015', '2023-10-27 15:58:07.195', 'HASTY'),
('syntax_podcast_show_00474', 474, 'Home Automation - A Look Ahead', '2022-06-22 12:00:00.696', 'https://traffic.libsyn.com/syntax/Syntax_-_474.mp3', '\nIn this Tasty Treat, Scott and Wes talk about the current state of home automation, and the kinds of software and hardware they\'re using in their homes to automate their lives.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* [Syntax Ep181 Automating Stuff](https://syntax.fm/show/181/hasty-treat-automating-stuff)\n* **[02:18](#t=02:18)** Protocols\n* **[07:35](#t=07:35)** Software\n* [Homebridge](https://homebridge.io)\n* [Hoobs](https://hoobs.com)\n* [Home Assistant](https://www.home-assistant.io)\n* **[11:28](#t=11:28)** Using Homebridge\n* **[16:51](#t=16:51)** Home Assistant vs Homebridge\n* **[24:35](#t=24:35)** Home Assistant automations\n* **[27:26](#t=27:26)** Wyze cams\n* **[33:13](#t=33:13)** Sponsor: Sentry\n* **[34:31](#t=34:31)** Hardware\n* [Philips Hue](https://www.philips-hue.com/)\n* [Leviton](https://store.leviton.com)\n* [Synology](https://www.synology.com/)\n* [Node-RED](https://nodered.org)\n* [Docker Wyze Bridge](https://github.com/mrlt8/docker-wyze-bridge)\n* [U-Tec](https://www.u-tec.com)\n* **[38:00](#t=38:00)** Bulbs\n* **[40:24](#t=40:24)** Buttons\n* [Lutron Aurora Smart Bulb Dimmer Switch](https://amzn.to/3HDQSvm)\n* [Flic Button](https://flic.io)\n* **[42:53](#t=42:53)** IR Blasters\n* **[45:57](#t=45:57)** Sensors\n* **[47:56](#t=47:56)** Motion sensors\n* **[52:05](#t=52:05)** Sponsor: Auth0\n* **[53:28](#t=53:28)** Switched switches\n* **[57:36](#t=57:36)** Sprinklers\n* **[58:54](#t=58:54)** NFC\n* [/r/Homeassistant](https://www.reddit.com/r/homeassistant/)\n* [Shelly](https://shelly.cloud)\n* **[01:04:03](#t=01:04:03)** Sponsor: Freshbooks\n* **[01:05:01](#t=01:05:01)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Severence on Apple TV+](https://tv.apple.com/ca/show/severance/umc.cmc.1srk2goyh2q2zdxcx605w8vtx)\n* Wes: [INKZALL](https://www.milwaukeetool.com/Products/Power-Utility/48-22-3100)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Beginner JavaScript](https://wesbos.com/beginner-javascript)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '22bbbcdfd6f76b943b622ca9c992e2d3e1d05bbd83c83ee927f2f5e4ac9682e9', 'home-automation-a-look-ahead', '/shows/474 - home automation.md', '2023-10-16 20:07:50.054', '2023-10-27 15:58:07.244', 'TASTY'),
('syntax_podcast_show_00475', 475, 'Supper Club × Authoring Browser Extensions with Tim Leland', '2022-06-24 12:00:00.131', 'https://traffic.libsyn.com/syntax/Syntax_-_475.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Tim Leland - developer of browser extensions like WeatherExtension and Link Shortener Extension.\n\n## Postlight Podcast - Sponsor\n\nPostlight is a strategy, design, and engineering firm that builds platforms for some of the biggest organizations in the world. The Postlight Podcast is hosted by senior leaders Rich Ziade, Paul Ford, Gina Trapani, and Chris LoSacco.\n\nIf you’re looking for answers to tough leadership questions, the Postlight Podcast has you covered.\n\nListen to new episodes every Tuesday, wherever you get your podcasts.\n\n## SendLayer - Sponsor\n\nSendLayer is a fast growing email delivery platform that lets you easily connect your website or app to send emails with API and SMTP for maximum deliverability, reliability, and scalability.\n\nSendLayer comes with incredible email deliverability, detailed email logs, email engagement tracking, spam filter protection, event-based webhooks, mailing list management, and email relaying through SMTP or API.\n\nWhen your business and customers rely on email communications, you need to be certain that those emails will be delivered. [Try SendLayer for free today](https://sendlayer.com/syntax/) to send your emails with confidence.\n\n## Show Notes\n\n* **[00:33](#t=00:33)** Welcome\n* **[02:21](#t=02:21)** Guest introduction\n* [@timleland](https://twitter.com/timleland)\n* [TimLeland.com](https://timleland.com)\n* [WeatherExtension](https://weatherextension.com)\n* [Link Shortener Extension](https://timleland.com/link-shortener-extension/)\n* **[03:40](#t=03:40)** Why develop browser extensions?\n* **[07:58](#t=07:58)** How did you market your extensions?\n* **[09:43](#t=09:43)** Where is a Chrome extension running?\n* [Caddy](https://caddyserver.com)\n* **[14:29](#t=14:29)** What\'s your URL shortener extension?\n* **[18:50](#t=18:50)** OneLink service\n* **[20:30](#t=20:30)** SSL Domains\n* **[21:35](#t=21:35)** Sponsor: The Postlight Podcast\n* **[23:00](#t=23:00)** Maliciousness with URL shorteners\n* **[28:26](#t=28:26)** How do you come up with ideas?\n* **[30:03](#t=30:03)** Running Chrome extensions as Firefox extensions\n* **[34:03](#t=34:03)** Does blogging still work?\n* **[36:38](#t=36:38)** Sponsor: Sendlayer\n* **[37:53](#t=37:53)** Supper club questions\n* [Tim Leland /uses/](https://timleland.com/uses/)\n* **[45:12](#t=45:12)** ××× SIIIIICK ××× PIIIICKS ×××\n* [Tchibo Coffee machine](https://shoptchibo.com/pages/machines)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0216cdd12fdfbdac765067692ebb19b5bdddd619656f610248e77f104e6c35c3', 'supper-club-authoring-browser-extensions-with-tim-leland', '/shows/475 - supperclub Tim Leland.md', '2023-10-16 20:07:50.092', '2023-10-27 15:58:07.297', 'SUPPER'),
('syntax_podcast_show_00476', 476, 'Browser CSS Page Transitions API aka Shared Element Transitions', '2022-06-27 12:00:00.110', 'https://traffic.libsyn.com/secure/syntax/Syntax_-_476.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the new Browser CSS Page Transitions API proposal and what features it opens up for developers on the web.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* WICG [Shared Element Transitions](https://github.com/WICG/shared-element-transitions/)\n\n* **[00:21](#t=00:21)** Welcome\n* **[01:33](#t=01:33)** Sponsor: Prismic\n* **[02:43](#t=02:43)** Sponsor: LogRocket\n* **[04:18](#t=04:18)** Browser animations on the web vs native apps\n* **[06:15](#t=06:15)** What is the targeted use case for it?\n* **[06:56](#t=06:56)** Shared Element to Root Transitions\n* **[11:14](#t=11:14)** Entry and Exit\n* **[17:33](#t=17:33)** How to enable this in Chrome\n* [Example Code](https://github.com/WICG/shared-element-transitions/tree/main/sample-code)\n* [Shared Element Transition history](https://css-tricks.com/shared-element-transitions/#aa-weird-history)\n* [Sarah Drasner’s demo](https://twitter.com/sarah_edo/status/988414671232339970)\n\n```\nasync function doTransition() {\n  let transition = document.createDocumentTransition();\n  \n  // Specify offered elements. The tag below is used to refer\n  // to the generated pseudo elemends in script/CSS.\n  document.querySelector(\".old-message\").style.pageTransitionTag = \"message\";\n  \n  // The start() call triggers an async operation to capture\n  // snapshots for the offered elements,\n  await transition.start(async () => {\n    // This callback is invoked by the browser when the capture\n    // finishes and the DOM can be switched to the new state.\n    // No frames are rendered until this callback returns.\n    \n    // Asynchronously load the new page.\n    await coolFramework.changeTheDOMToPageB();\n    \n    // Clear the old message if that element is still in the page\n    document.querySelector(\".old-message\").style.pageTransitionTag = \"\";\n    // Set new message as the shared element \'message\'\n    document.querySelector(\".new-message\").style.pageTransitionTag = \"message\";\n    \n    // Set up animations using WA-API on the next frame.\n    requestAnimationFrame(() => {\n      document.documentElement.animate(keyframes, {\n      ...animationOptions,\n      pseudoElement: \"::page-transition-container(message)\",\n      });\n    });\n    \n    // Note that when this callback finishes, the animations will start with the tagged elements.\n  });\n}\n```\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ed0df4217f961e418554ef017cc9be3385fdd8c9668387f278b88191bb2487cb', 'browser-css-page-transitions-api-aka-shared-element-transitions', '/shows/476 - Hasty browser.md', '2023-10-16 20:07:50.200', '2023-10-27 15:58:07.400', 'HASTY'),
('syntax_podcast_show_00477', 477, 'Tips for Communicating', '2022-06-29 12:00:00.336', 'https://traffic.libsyn.com/syntax/Syntax_-_477.mp3', '\nIn this episode of Syntax, Wes and Scott talk about their tips for better communication in email, Zoom calls, code reviews, or asking for help.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:39](#t=01:39)** Furnace wiring fun\n* [Ecobee](https://www.ecobee.com/)\n* [Tweet asking for communication tips](https://twitter.com/wesbos/status/1536358748855336960?s=21&t=QK1Xs4rTgWPyblLzeOw5-g)\n* **[05:37](#t=05:37)** Email communication\n* [SavvyCal](https://savvycal.com)\n* [Calendly](https://calendly.com)\n* **[15:07](#t=15:07)** Recognizing a big ask\n* [Simeon Griggs - How to ask for things](https://www.simeongriggs.dev/how-to-ask-for-things)\n* **[24:01](#t=24:01)** Sponsor: Sentry\n* **[25:52](#t=25:52)** Code review communication\n* **[30:39](#t=30:39)** Sponsor: Sanity\n* **[32:22](#t=32:22)** Sharing information with a video\n* **[35:42](#t=35:42)** In person or one on ones\n* **[39:36](#t=39:36)** Video calls\n* [Storyboard.fm](https://new.trystoryboard.com)\n* **[40:54](#t=40:54)** Realize it\'s ok to stop talking\n* **[42:27](#t=42:27)** Sponsor: Auth0\n* **[44:13](#t=44:13)** Tips from Twitter\n* **[53:08](#t=53:08)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Drachinifel](https://www.youtube.com/c/Drachinifel)\n* Wes: [Lepy LP-2020A Hi-Fi Stereo Audio](https://amzn.to/3mHaF3q)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials on YouTube](https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3c8cdba5246cddbd87f44889a53abe7e64842109578621ace7bbe4e6257ab220', 'tips-for-communicating', '/shows/477 - Communication.md', '2023-10-16 20:07:50.234', '2023-10-27 15:58:07.452', 'TASTY'),
('syntax_podcast_show_00478', 478, 'Supper Club × Developer Experience with Shawn Wang', '2022-07-01 12:00:00.529', 'https://traffic.libsyn.com/syntax/Syntax_-_478.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Shawn Wang about his thoughts on developer experience, why DX is important, and the importance of learning in public.\n\n## Hasura - Sponsor\n\nHasura gives you instant GraphQL API on all your data sources to help you build modern apps faster. With built-in support for authorization and federation, Hasura makes it easy to declaratively configure permission rules and join data across multiple sources without writing any extra code. [Try out Hasura](https://hasura.io/?utm_campaign=syntaxfm-2022&utm_campaign-type=podcast&utm_medium=social) for free in 30 seconds. Hasura also features the most extensive list of open-source tutorials to get you up to speed with GraphQL, Hasura and Databases. Check it out at [hasura.io/learn](https://hasura.io/learn/?utm_campaign=syntaxfm-2022&utm_campaign-type=podcast&utm_medium=social)\n\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:32](#t=00:32)** Welcome\n* **[01:56](#t=01:56)** Guest introduction\n* [swyx.io](https://www.swyx.io)\n* [Why Temporal?](https://www.swyx.io/why-temporal)\n* **[06:09](#t=06:09)** What is Developer Experience?\n* [Sarah Drasner](https://sarahdrasnerdesign.com)\n* **[08:35](#t=08:35)** Is VS Code considered DX?\n* **[09:28](#t=09:28)** Why is internal DX important?\n* [Vercel](https://vercel.com)\n* [NextJS](https://nextjs.org)\n* **[11:44](#t=11:44)** Is DX helpful to small organizations as well?\n* **[15:27](#t=15:27)** Parsimony\n* [Parsimony](https://www.lexico.com/en/definition/parsimony)\n* **[16:43](#t=16:43)** Is productivity the main focus?\n* **[21:09](#t=21:09)** Sponsor: Hasura\n* **[22:48](#t=22:48)** What are your thoughts on React?\n* **[27:31](#t=27:31)** Designing for API success\n* **[30:44](#t=30:44)** Sponsor: LogRocket\n* **[32:07](#t=32:07)** What is external developer experience?\n* **[36:05](#t=36:05)** Learning in public\n* **[40:46](#t=40:46)** Supper Club questions\n* [dx.tips](https://dx.tips/)\n* [Retreon VS Code Theme](https://marketplace.visualstudio.com/items?itemName=kgscott.retreon)\n* [Agnoster ZSH Theme](https://github.com/agnoster/agnoster-zsh-theme)\n* [freeCodeCamp](https://www.freecodecamp.org)\n* [Frontend Masters](https://frontendmasters.com)\n* [QConf](https://qconsf.com)\n* [Learn in Public](https://www.learninpublic.org)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Stormlight Archive](https://www.brandonsanderson.com/the-stormlight-archive-series/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '33fe5cc489c2d7bd63268aea742768d4480fba5f1e2ed11c81f561bbfca7ed14', 'supper-club-developer-experience-with-shawn-wang', '/shows/478 - Supperclub DX with Shawn.md', '2023-10-16 20:07:50.266', '2023-10-27 15:58:07.502', 'SUPPER'),
('syntax_podcast_show_00479', 479, 'CSS5 Color Functions', '2022-07-04 12:00:00.868', 'https://traffic.libsyn.com/syntax/Syntax_-_479.mp3', '\nIn this Hasty Treat, Scott and Wes talk about new CSS color functions, and tips for viewing the different options and ways of presenting color that are coming.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:35](#t=01:35)** Sponsor: Linode\n* **[02:22](#t=02:22)** Where the CSS spec for Color functions are at the moment\n* **[05:13](#t=05:13)** New CSS Color mix function\n* **[10:29](#t=10:29)** Color for the color challenged\n* **[12:53](#t=12:53)** Color contrast function\n* **[15:06](#t=15:06)** Programatically alter colors\n\n* [Anyone have a really great CSS Variables color system strategy?](https://twitter.com/stolinski/status/1516877461539143680)\n* [Color for the color challenged](https://ferdychristant.com/color-for-the-color-challenged-884c7aa04a56)\n* [Better color tools](https://github.com/drwpow/better-color-tools)\n* [the color-contrast() function](https://css-tricks.com/exploring-color-contrast-for-the-first-time/)\n* [Benjamin Moore Paints as CSS Colours](https://bm.wesbos.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '95abbf9b7cdbd517b0fa8018db9d029175552fc016e3ef6db1f247fa39847b1f', 'css5-color-functions', '/shows/479 - CSS5.md', '2023-10-16 20:07:50.401', '2023-10-27 15:58:07.644', 'HASTY'),
('syntax_podcast_show_00480', 480, '10 years of Speaking + Conferences', '2022-07-06 12:00:00.351', 'https://traffic.libsyn.com/syntax/Syntax_-_480.mp3', '\nIn this episode of Syntax, Wes and Scott talk about their experiences speaking at conferences, why they\'ve done it, how they prepare talks, and tips for anyone interested in wanting to give talks.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:02](#t=00:02)** Welcome\n* **[01:38](#t=01:38)** Stanley Cup update\n* **[03:13](#t=03:13)** Legoland update\n* **[04:09](#t=04:09)** Topic introduction\n* [Nicole Sullivan](https://github.com/stubbornella)\n* [Tweet looking for questions](https://twitter.com/wesbos/status/1541424269556649984?s=21&t=Ml3wQgMqJBcXM7yYW6Tc6w)\n* **[05:03](#t=05:03)** Why speak at conferences?\n* **[08:56](#t=08:56)** Travelling for free\n* **[09:50](#t=09:50)** Getting paid to speak at conferences\n* **[12:23](#t=12:23)** Doing in person workshops\n* **[14:55](#t=14:55)** How do you get into speaking?\n* **[19:25](#t=19:25)** Meetups\n* **[20:30](#t=20:30)** Sponsor: Linode\n* **[21:15](#t=21:15)** What should you speak about?\n* **[26:27](#t=26:27)** Something you did a deep dive on\n* **[29:21](#t=29:21)** Sponsor: Freshbooks\n* **[30:04](#t=30:04)** Flight protection and travel insurance\n* **[32:59](#t=32:59)** Idea: update to a library\n* **[33:28](#t=33:28)** How to get conferences to invite you to speak?\n* **[36:03](#t=36:03)** How do you prepare for a talk?\n* **[42:40](#t=42:40)** How to find conferences looking for speakers\n* **[44:09](#t=44:09)** How to create a topic that will get picked\n* **[46:59](#t=46:59)** Sponsor: Sentry\n* **[48:06](#t=48:06)** Software for your slides\n* [Slides.js](https://slides.js.org)\n* [Slides.com](https://slides.com)\n* [MDX Deck](https://github.com/jxnblk/mdx-deck)\n* [Notion](https://www.notion.so)\n* [Figma](https://www.figma.com)\n* [Google Slides](https://www.google.com/slides/about/)\n* [Lydia Hallie](https://twitter.com/lydiahallie)\n* [Keynote](https://www.apple.com/keynote/)\n* **[56:28](#t=56:28)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Risk for iOS](https://apps.apple.com/us/app/risk-global-domination/id1051334048)\n* Wes: [Barrina LED T5 Integrated Single Fixture](https://amzn.to/3nhlGsC)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a37a5df75a85a300f57d035c09d1a88e689da42cb9426ae75945d2b20285d0e4', '10-years-of-speaking-conferences', '/shows/480 - Speaking at conferences.md', '2023-10-16 20:07:50.443', '2023-10-27 15:58:07.691', 'TASTY'),
('syntax_podcast_show_00481', 481, 'Supper Club × Voice Coding with Pokey Rule', '2022-07-08 12:00:00.941', 'https://traffic.libsyn.com/syntax/Syntax_-_481.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Pokey Rule about using his voice to code, and the current state of voice coding software.\n\n## Stackoverflow Podcast - Sponsor\n\nFor over a dozen years, the Stack Overflow Podcast has been exploring what it means to be a developer, and how the art and practice of software programming is changing our world. Hosted by Ben Popper, Cassidy Williams, and Ceora Ford, the Stack Overflow Podcast is your home for all things code.\n\nListen to new episodes twice a week, wherever you get your podcasts.\n\n## directus - Sponsor\n\nDirectus is an open-source data platform that instantly layers on top of any SQL database. Our Data Engine empowers engineers with dynamic REST+GraphQL APIs, workflow automation, built-in auth, caching, and asset transformations. And the included Data Studio democratizes your database, allowing even non-technical users to browse, manage, and visualize database content through a no-code data collaboration app.\n\n[Get started in minutes with a free Directus Community Cloud project](https://directus.cloud).\n\n## Show Notes\n\n* **[00:33](#t=00:33)** Welcome\n* **[01:35](#t=01:35)** Guest introduction\n* [Con 2021 - Cursorless: keyboards and mice are sooo last year!! by Pokey Rule](https://www.youtube.com/watch?v=Py9xjeIhxOg)\n* [Emily Shea](https://www.youtube.com/watch?v=YKuRkGkf5HU)\n* **[05:12](#t=05:12)** How does coding with your voice work?\n* [Talon Voice](https://talonvoice.com/)\n* [Cursorless](https://cursorless.org/)\n* **[09:45](#t=09:45)** How do you handle triggering wrong words?\n* **[11:41](#t=11:41)** Sponsor: The Stack Overflow Podcast\n* **[12:26](#t=12:26)** Example of voice coding\n* [Parrot](https://github.com/chaosparrot/parrot.py)\n* **[14:21](#t=14:21)** What are the noises you make for?\n* **[24:29](#t=24:29)** Working on multiple lines at the same time\n* **[27:37](#t=27:37)** How do you decide where the hats go?\n* **[31:18](#t=31:18)** Sponsor: directus\n* **[32:59](#t=32:59)** What is the community of users like for this?\n* [Tree Sitter](https://tree-sitter.github.io/tree-sitter/)\n* [\"Incremental, zero-config Code Nav using stack graphs\" by Douglas Creager](https://www.youtube.com/watch?v=l2R1PTGcwrE)\n* **[35:20](#t=35:20)** Does eye tracking work?\n* **[36:48](#t=36:48)** What kind of mic do you use?\n* [DPA Microphone](https://www.sweetwater.com/store/detail/4288HSBg--dpa-dfine-core-4288-omnidirectional-flex-headset-microphone-with-microdot-connector-long-length-b)\n* [The Voice Book](https://www.amazon.com/Voice-Book-Caring-Protecting-Improving-dp-1641603305/dp/1641603305/)\n* **[39:25](#t=39:25)** Supper Club questions\n* [Abyss VS Code built-in theme](https://code.visualstudio.com/docs/getstarted/themes)\n* [Kinesis Freestyle 2](https://kinesis-ergo.com/keyboards/freestyle2-keyboard/)\n* [Charybdis Nano keyboard](https://bastardkb.com/charybdis-nano/)\n* [Nexstand](http://www.nexstand.com)\n* [Arxiv Sanity](https://arxiv-sanity-lite.com/)\n* [Subvocal Recognition](https://en.wikipedia.org/wiki/Subvocal_recognition)\n* [Imagen Research](https://imagen.research.google/)\n* [Midjourney](https://www.midjourney.com/)\n* **[54:11](#t=54:11)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Git Imerge](https://github.com/mhagger/git-imerge)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n* Pokey: [YouTube channel](https://www.youtube.com/channel/UCML02pamUSxtbwAcrUdVmXg), [Sponsor Pokey on GitHub](https://github.com/sponsors/pokey)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ff6ddff858941a7a12221c8450c5a1602eb3f6c14323522b5f3dbe0239a2c5a9', 'supper-club-voice-coding-with-pokey-rule', '/shows/481 - Supperclub Voice coding.md', '2023-10-16 20:07:50.480', '2023-10-27 15:58:07.754', 'SUPPER'),
('syntax_podcast_show_00482', 482, 'Clamp & Interpolate', '2022-07-11 12:00:00.012', 'https://traffic.libsyn.com/syntax/Syntax_-_482.mp3', '\nIn this Hasty Treat, Scott and Wes talk about clamp and interpolate and how you might want to use them in your next project.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## NAME - Sponsor\n\nThere are hundreds of payments processing companies out there. Hit up [developer.paymentshub.com/syntax](https://developer.paymentshub.com/syntax) to learn more about how Payments Hub Developers not only processes ecommerce and in-person payments, but also boards and underwrites your merchants in as little as 90 minutes. We are currently offering Syntax listeners who become new partners 6 months free data through our Business Reporting API!\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[00:52](#t=00:52)** Sponsor: Sentry\n* **[01:31](#t=01:31)** Sponsor: Payments Hub\n* **[02:40](#t=02:40)** Topic introduction\n* **[05:05](#t=05:05)** What is Clamp?\n\nCSS clamp:\n`font-size: clamp(1rem, 10vw, 2rem);`\n\nJavaScript Clamp:\n`const clamp = (num, min, max) => Math.min(Math.max(num, min), max)`\n\n* **[09:12](#t=09:12)** What is Interpolate?\n* [D3 Interpolate](https://observablehq.com/collection/@d3/d3-interpolate)\n* **[12:56](#t=12:56)** Interpolate in colors\n* **[14:37](#t=14:37)** Quantize\n* [D3 Quantize](https://observablehq.com/@d3/d3-quantize)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '594e830c040a7a9a39d7dc24e294d769fe87347addf848efcf1a1db6882e2235', 'clamp-and-interpolate', '/shows/482 - clamping.md', '2023-10-16 20:07:50.605', '2023-10-27 15:58:07.993', 'HASTY'),
('syntax_podcast_show_00483', 483, 'Potluck - Peer Dependencies × Vitest × NVM and PNPM × Sprites', '2022-07-13 12:00:00.856', 'https://traffic.libsyn.com/syntax/Syntax_-_483.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about peer dependencies, Vitest, NVM and PNPM, using sprites for images, common MongoDB operations, and more!\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:03](#t=00:03)** Welcome\n* **[01:53](#t=01:53)** Configuring home internet routers\n* **[04:42](#t=04:42)** Scott\'s Home Assistant update\n* [Mushroom Theme](https://community.home-assistant.io/t/mushroom-cards-build-a-beautiful-dashboard-easily/388590)\n* **[07:52](#t=07:52)** Could you explain to me peer-dependencies and how does it work?\n* **[13:24](#t=13:24)** Using Vitest do you still have to transpile code?\n* **[16:14](#t=16:14)** Can you talk about helpful and common MongoDB operations, beyond just CRUD.\n* **[18:49](#t=18:49)** How can I update the \"updatedAt\" field of the document on every save automatically?\n* **[20:40](#t=20:40)** What is aggregation, and when do you use it?\n* **[25:33](#t=25:33)** Sponsor: Prismic\n* **[27:27](#t=27:27)** How does NVM relate to PNPM?\n* [pnpm](https://pnpm.io)\n* [nvm](https://github.com/nvm-sh/nvm#intro)\n* **[30:45](#t=30:45)** I\'m looking to upskill from front-end JavaScript?\n* **[33:53](#t=33:53)** Is it possible to have a private NPM repo I can \"npm install\" from, or do I put my components up on NPM publicly?\n* [Creating a private npm package](https://docs.npmjs.com/creating-and-publishing-private-packages)\n* **[37:51](#t=37:51)** Sponsor: LogRocket\n* **[39:14](#t=39:14)** Should a majority of lodash functions be considered deprecated?\n* [angus c just](https://github.com/angus-c/just)\n* **[42:36](#t=42:36)** Please do an episode on programming/learning with ADHD.\n* **[44:04](#t=44:04)** Should I still be putting images in sprites?\n* **[49:20](#t=49:20)** Does Mux have a simple mechanism for adding auth to each video or group of videos?\n* [Mux Create playback restriction](https://docs.mux.com/api-reference/video#operation/create-playback-restriction)\n* **[53:48](#t=53:48)** Sponsor: Sanity.io\n* **[55:02](#t=55:02)** Is there copyright issues with using public APIs?\n* [Moneypuck](https://moneypuck.com)\n* **[59:38](#t=59:38)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Toto Bidet](https://amzn.to/3utuIqz)\n* Wes: [Sodastream](https://sodastream.ca/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '40fa2f96f4b1ee966b727d119f4a504c211bb8935a6a6695b5a53ae2046732ae', 'potluck-peer-dependencies-vitest-nvm-and-pnpm-sprites', '/shows/483 - Potluck Peer Dependencies Vitest.md', '2023-10-16 20:07:50.638', '2023-10-27 15:58:08.099', 'TASTY'),
('syntax_podcast_show_00484', 484, 'Supper Club × 70,000 Serverless Functions with Kristi Perreault of Liberty Mutual', '2022-07-15 12:00:00.091', 'https://traffic.libsyn.com/syntax/Syntax_-_484.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Kristi Perreault of Liberty Mutual about why they\'re using serverless functions, what languages they write in, managing security and montoring, and Kristi\'s journey into tech as a career.\n\n## Hasura - Sponsor\n\nHasura gives you instant GraphQL API on all your data sources to help you build modern apps faster. With built-in support for authorization and federation, Hasura makes it easy to declaratively configure permission rules and join data across multiple sources without writing any extra code. [Try out Hasura](https://hasura.io/?utm_campaign=syntaxfm-2022&utm_campaign-type=podcast&utm_medium=social) for free in 30 seconds. Hasura also features the most extensive list of open-source tutorials to get you up to speed with GraphQL, Hasura and Databases. Check it out at [hasura.io/learn](https://hasura.io/learn/?utm_campaign=syntaxfm-2022&utm_campaign-type=podcast&utm_medium=social)\n\n\n\n## Stack Overflow Podcast - Sponsor\n\nFor over a dozen years, the Stack Overflow Podcast has been exploring what it means to be a developer, and how the art and practice of software programming is changing our world. Hosted by Ben Popper, Cassidy Williams, and Ceora Ford, the Stack Overflow Podcast is your home for all things code.\n\nListen to new episodes twice a week, wherever you get your podcasts.\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](https://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](https://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Show Notes\n\n* **[00:33](#t=00:33)** Welcome\n* **[03:24](#t=03:24)** Guest introduction\n* [@kperreault95](https://twitter.com/kperreault95)\n* [Kristi Perreault on Dev.to](https://dev.to/kristiperreault)\n* [Kristi Perreault AWS Hero](https://aws.amazon.com/developer/community/heroes/kristi-perreault/?did=dh_card&trk=dh_card)\n* [Liberty Mutual](https://www.libertymutual.com)\n* **[04:55](#t=04:55)** Developers at Liberty Mutual\n* **[07:05](#t=07:05)** What did you do before serverless functions?\n* **[08:36](#t=08:36)** Why are you using serverless functions?\n* **[12:39](#t=12:39)** What languages are you writing for serverless functions?\n* **[15:53](#t=15:53)** Sponsor: Hasura\n* **[17:22](#t=17:22)** Where does all the code live?\n* **[20:58](#t=20:58)** AWS CDK\n* [AWS CDK](https://aws.amazon.com/cdk/)\n* [CDK Workshop](https://cdkworkshop.com)\n* **[25:55](#t=25:55)** Sponsor: Lightstep Incident Response\n* **[27:07](#t=27:07)** How did you get into tech?\n* **[31:44](#t=31:44)** How do you organize all the functions?\n* **[33:51](#t=33:51)** How important is security?\n* **[35:23](#t=35:23)** What are IM roles?\n* **[36:16](#t=36:16)** How do you deal with spiking and monitoring?\n* [Datadog](https://www.datadoghq.com)\n* [Splunk](https://www.splunk.com)\n* **[41:20](#t=41:20)** Sponsor: Stackoverflow Podcast\n* **[42:02](#t=42:02)** Have you used Edge functions?\n* **[42:50](#t=42:50)** Supper Club Questions\n[Off by None newsletter](https://offbynone.io/)\n[Ready Set Cloud](https://www.readysetcloud.io/newsletter/7/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Loki on Disney+](https://www.disneyplus.com/series/loki/6pARMvILBGzF)\n\n## Shameless Plugs\n\n* [Real World Serverless Podcast](https://www.realworldserverless.com)\n* [Serverless Denver Group](https://www.meetup.com/meetup-group-jncsuhfj/)\n* [AWS Summits](https://aws.amazon.com/events/summits/)\n* [@ServerlessCO](https://twitter.com/ServerlessCO)\n[Kristi Perreault on Medium](https://kristiperreault.medium.com/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '913a5a46e6725542bcccc8a835cc22204e0bd6fefa580796343f5ad926d5fa9c', 'supper-club-70-000-serverless-functions-with-kristi-perreault-of-liberty-mutual', '/shows/484 - Supperclub .md', '2023-10-16 20:07:50.676', '2023-10-27 15:58:08.175', 'SUPPER'),
('syntax_podcast_show_00485', 485, 'STUMP’D Interview Coding Questions', '2022-07-18 12:00:00.053', 'https://traffic.libsyn.com/syntax/Syntax_-_485.mp3', '\nIn this Hasty Treat, Scott and Wes try to stump each other with coding interview questions like what is a higher order component? What is functional programming? And more!\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:47](#t=01:47)** Sponsor: Lightstep Incident Response\n* **[03:00](#t=03:00)** Sponsor: Sentry\n* **[04:10](#t=04:10)** What is a higher order component?\n* **[05:34](#t=05:34)** What is functional programming?\n* **[09:00](#t=09:00)** What\'s the purpose of cache busting and how do you achieve it?\n* [Wes’ course for Beginner JavaScript](https://beginnerjavascript.com)\n* **[10:37](#t=10:37)** What is short circuit evaluation?\n* **[13:19](#t=13:19)** What is a closure?\n* **[15:49](#t=15:49)** What is the reason for wrapping the contents of a JavaScript source file in a function that is then invoked?\n* **[17:30](#t=17:30)** Can you describe how CSS specificity works?\n* **[20:15](#t=20:15)** How does prototypal inheritance differ from classical inheritance?\n* **[23:56](#t=23:56)** What is the difference between a parameter and an argument?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '174ea6fcbadcdfecf519444673f1bc16629f660b7440cba9fb2cdfb762139922', 'stump-d-interview-coding-questions', '/shows/485 - stumpd.md', '2023-10-16 20:07:50.764', '2023-10-27 15:58:08.340', 'HASTY'),
('syntax_podcast_show_00486', 486, 'Our Code Styles', '2022-07-20 12:00:00.138', 'https://traffic.libsyn.com/syntax/Syntax_-_486_v2.mp3', '\nIn this episode of Syntax, Wes and Scott talk about their coding styles - functional vs object oriented, interfaces vs types, tabs vs spaces, should comments exist? And a whole lot more.\n\n## Freshbooks  - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:07](#t=00:07)** Welcome\n* **[01:56](#t=01:56)** Functional vs object oriented\n* **[03:49](#t=03:49)** Interfaces vs types\n* **[05:38](#t=05:38)** Tabs vs spaces\n* **[07:02](#t=07:02)** Semicolons vs no semicolons\n* **[08:10](#t=08:10)** Let vs const\n* **[09:33](#t=09:33)** Do you explicitly type or allow TypeScript do it\'s magic?\n* **[11:26](#t=11:26)** Naming variables\n* [Naming convention for programming](https://en.wikipedia.org/wiki/Naming_convention_(programming))\n* **[15:13](#t=15:13)** Methods of looping\n* **[18:03](#t=18:03)** if statement curlys\n* **[20:57](#t=20:57)** Naming files\n* **[24:46](#t=24:46)** Inline testing vs running test as a process\n* **[25:31](#t=25:31)** Sponsor: Freshbooks\n* **[26:37](#t=26:37)** CSS property:val; or property: val;\n* **[27:40](#t=27:40)** CSS nesting?\n* **[29:49](#t=29:49)** Alphabetizing CSS properties\n* **[31:11](#t=31:11)** Rems, Ems, PX, Etc…\n* **[33:37](#t=33:37)** How do you center something in CSS?\n* **[35:22](#t=35:22)** How do you make something 100% height?\n* **[36:52](#t=36:52)** Sponsor: Sentry\n* **[37:30](#t=37:30)** Should comments exist?\n* [Better Comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n* [Wes’ custom parser for VS Code](https://twitter.com/wesbos/status/1384916003444961282?s=21&t=Iz9mOT6bctSccV4pw8xjOA)\n* [Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)\n* **[42:31](#t=42:31)** Creating HTML\n* **[45:28](#t=45:28)** Components in app or in isolation?\n* **[47:41](#t=47:41)** Sponsor: Sanity\n* **[48:45](#t=48:45)** Single component per file vs multiple\n* [Storybook](https://storybook.js.org)\n* **[50:22](#t=50:22)** Naming components\n* **[51:19](#t=51:19)** General stuff\n* **[53:55](#t=53:55)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Scott\'s iPad case for kids](https://www.amazon.com/dp/B07DBZW49H?th=1&linkCode=sl1&tag=leveluptuts01-20&linkId=920f70555b9377dadede744ec2447748&language=en_US&ref_=as_li_ss_tl)\n* Wes: Garbage can with custom bags.\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ad088c5a0ef113f6be98d789ee313a5d1ac9cf99404b864721a3ba585588244f', 'our-code-styles', '/shows/486 - Code styles.md', '2023-10-16 20:07:50.797', '2023-10-27 15:58:08.422', 'TASTY'),
('syntax_podcast_show_00487', 487, 'Supper Club × Adam Cowley and Neo4j Database', '2022-07-22 12:00:00.074', 'https://traffic.libsyn.com/syntax/Syntax_-_487.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Adam Cowley about how Neo4j Database can help when working with data for your next app.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [gatsby.dev/syntax](https://gatsby.dev/syntaxfm) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Show Notes\n\n* **[00:15](#t=00:15)** Welcome\n* **[01:17](#t=01:17)** Guest introduction\n* **[03:08](#t=03:08)** Browser innovation and testing\n* **[04:54](#t=04:54)** What is a graph database?\n* [Neo4j Cypher](https://neo4j.com/developer/cypher/)\n* [Sanity Groq](https://www.sanity.io/docs/overview-groq)\n* **[08:04](#t=08:04)** Is there a specific type of data that works best in a graph database?\n* **[11:50](#t=11:50)** Sponsor: Lightstep Incident Response\n* **[13:07](#t=13:07)** What\'s AuraDB vs Neo4js?\n* **[14:54](#t=14:54)** Whiteboard friendly data model\n* **[19:45](#t=19:45)** How are GraphQL and graph related?\n* **[23:01](#t=23:01)** Can you sync with MongoDB?\n* **[24:34](#t=24:34)** How do you pull data into a div on the web?\n* **[29:12](#t=29:12)** Why are you used for data science a lot?\n* [Neo4j Desktop](https://neo4j.com/download/)\n* [Neo4j Cloud](https://neo4j.com/cloud/)\n* **[30:35](#t=30:35)** Sponsor: Gatsby\n* **[31:44](#t=31:44)** Is visualization an important part of Neo4js?\n* [Neo4j Bloom](https://neo4j.com/product/bloom/)\n* **[35:54](#t=35:54)** Do you have to think about indexing with graph databases?\n* **[39:36](#t=39:36)** Are there uses Neo4j isn\'t as good for?\n* **[40:15](#t=40:15)** Do you have to cache queries?\n* **[41:19](#t=41:19)** Dessert questions\n* [Intellijet Idea](https://www.jetbrains.com/idea/)\n* [Cobalt 2 Theme](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n* **[50:29](#t=50:29)** Shameless Plug\n* **[54:38](#t=54:38)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Hue Lights](https://www.philips-hue.com/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '63bbc89ca71e6a826bfe886f65ae474066902cfd7be741e5675297688a4a9c4f', 'supper-club-adam-cowley-and-neo4j-database', '/shows/487 - Supper Club neo4js.md', '2023-10-16 20:07:50.841', '2023-10-27 15:58:08.526', 'SUPPER'),
('syntax_podcast_show_00488', 488, 'What is Bun? The New JS Runtime', '2022-07-25 12:00:00.141', 'https://traffic.libsyn.com/syntax/Syntax_-_488.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Bun, a new all-in-one JavaScript runtime. What makes Bun so fast? What\'s on Bun\'s roadmap? And why do we need another JavaScript runtime?\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](https://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:21](#t=01:21)** Sponsor: Freshbooks\n* **[02:07](#t=02:07)** Sponsor: Lightstep Incident Response\n* **[03:20](#t=03:20)** What is Bun?\n* [Bun](https://Bun.sh)\n* [Deno](https://deno.land)\n* **[08:20](#t=08:20)** Why is Bun so fast?\n* [Zig](https://ziglang.org)\n* **[12:32](#t=12:32)** Module support\n* **[15:11](#t=15:11)** What\'s not implemented yet in Bun?\n* [What’s not implemented in Bun yet](https://github.com/oven-sh/Bun#not-implemented-yet)\n* **[17:01](#t=17:01)** Config file in toml\n* **[18:08](#t=18:08)** Bun roadmap\n* [Bun roadmap](https://github.com/oven-sh/Bun/issues/159)\n* **[20:27](#t=20:27)** Why do we need another JavaScript environment?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '35300ae452fa066c733ac7a404adccf2bdfcb9eeed11d8407a7631908aa75b41', 'what-is-bun-the-new-js-runtime', '/shows/488 - hasty.md', '2023-10-16 20:07:50.980', '2023-10-27 15:58:08.642', 'HASTY'),
('syntax_podcast_show_00489', 489, 'Potluck! Node Versions, Old Man Internet, Responsive Design + MORE', '2022-07-27 12:00:00.457', 'https://traffic.libsyn.com/syntax/Syntax_-_489.mp3', '\nIn this Potluck episode of Syntax, Wes and Scott answer your questions about resolving node version errors, using social media, bundler for building React component, and how does Syntax get made?\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* [OhMyPosh](https://ohmyposh.dev)\n* [OhMyZ.sh](https://ohmyz.sh)\n* [Warp](https://www.warp.dev)\n* **[02:34](#t=02:34)** How do you resolve errors when starting up a project with npm that you haven\'t touched in awhile?\n* **[07:50](#t=07:50)** Any advice for using social media to network?\n* **[16:44](#t=16:44)** What bundler are you reaching for when building a React component library?\n* [tsdx](https://tsdx.io/)\n* [Vite](https://vitejs.dev)\n* **[18:37](#t=18:37)** Do you have experience with optimizing third party scripts like Google Analytics?\n* [Partytown](https://partytown.builder.io)\n* **[21:37](#t=21:37)** What\'s your opinion on a \"offline-first\" mentality?\n* [PouchDB](https://pouchdb.com)\n* [CouchDB](https://couchdb.apache.org)\n* [Supabase](https://supabase.com)\n* [MongoDB Realm](https://www.mongodb.com/developer/products/realm/)\n* **[25:09](#t=25:09)** Sponsor: Prismic\n* **[26:48](#t=26:48)** How do you make web components with Svelte?\n* [Build web components in Svelte](https://blog.logrocket.com/build-web-components-svelte/)\n* [Using custom elements in Svelte](https://css-tricks.com/using-custom-elements-in-svelte/)\n* **[30:35](#t=30:35)** When talking about \"responsive\" web design do people generally mean using flexbox or grid?\n* [Responsive Design at 10](https://ethanmarcotte.com/wrote/responsive-design-at-10/)\n* [Responsive Web Design](https://alistapart.com/article/responsive-web-design/)\n* [A Book Apart - Responsive Web Design](https://abookapart.com/products/responsive-web-design)\n* **[35:24](#t=35:24)** Sponsor: Sentry\n* **[36:53](#t=36:53)** Do you have any tips for staying in React-land for just spinning up a fresh site quickly?\n* **[40:47](#t=40:47)** Who or what helps you produce and distribute the podcast?\n* [Lemon Productions](https://www.lemonproductions.ca/)\n* [Chris Enns on Twitter](https://twitter.com/ichris)\n* **[46:08](#t=46:08)** Should a majority of _lodash functions be considered deprecated follow up\n* **[48:18](#t=48:18)** Sponsor: Freshbooks\n* **[48:52](#t=48:52)** Do you have any tips or tricks to deal with backend data date issues?\n* **[52:23](#t=52:23)** Is the “col” system the peak of how we handle CSS, or should we start using more built-in functions?\n* **[55:25](#t=55:25)** Why you you need CSS Color Functions at runtime instead of just pre-calculating these values once as a build step using LESS or SASS?\n* **[58:58](#t=58:58)** SIIIIICK ××× PIIIICKS ×××\n* **[03:12](#t=03:12)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Can tumbler glasses](https://amzn.to/3o8ya6i)\n* Wes: [Car Sound Deadener](https://amzn.to/3RBurvo)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '087236ecb299b7331fb2bae12d1950da33216673ebc00d1eb09f8417cefb15eb', 'potluck-node-versions-old-man-internet-responsive-design-more', '/shows/489 - Potluck Node.md', '2023-10-16 20:07:51.015', '2023-10-27 15:58:08.690', 'TASTY'),
('syntax_podcast_show_00490', 490, 'Supper Club × Syed Balkhi and WordPress', '2022-07-29 12:00:00.768', 'https://traffic.libsyn.com/syntax/Syntax_-_490.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Syed Balkhi about his experiences blogging and developing plugins in the WordPress ecosytem.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Sponsorname - Sponsor\n\n## Show Notes\n\n* **[00:32](#t=00:32)** Welcome\n* **[01:52](#t=01:52)** Guest introduction\n* [WPBeginner](https://www.wpbeginner.com)\n* [WP Beginner YouTube](https://www.youtube.com/channel/UChA624rCabHAmd6lpkLOw7A)\n* [CSS Tricks](https://css-tricks.com)\n* [Smashing Magazine](https://www.smashingmagazine.com)\n* **[04:33](#t=04:33)** What tips do you have for blogging and audience building?\n* [AnswerthePublic](https://answerthepublic.com)\n* **[09:09](#t=09:09)** How do you manage so many people?\n* **[13:07](#t=13:07)** What was your background before this all got big?\n* **[13:43](#t=13:43)** Sponsor: Hasura\n* **[15:01](#t=15:01)** How do you design your products?\n* **[18:40](#t=18:40)** YouTube, TikTok, and video\n* **[25:12](#t=25:12)** Why the WordPress hate?\n* **[29:03](#t=29:03)** What types of websites are being created in WordPress?\n* [Easy Digital Downloads](https://easydigitaldownloads.com)\n* [WooCommerce](https://woocommerce.com)\n* [MemberPress](https://memberpress.com)\n* **[34:13](#t=34:13)** Sponsor: Lightstep Incident Response\n* **[35:26](#t=35:26)** What schools are you building?\n* [Balkhi Foundation](https://balkhifoundation.com)\n* [Pencils of Promise](https://pencilsofpromise.org)\n* **[40:51](#t=40:51)** Supper Club questions\n* [Copyhackers](https://copyhackers.com)\n* [Swiped](https://swiped.co)\n* [Uncanny Automator](https://automatorplugin.com)\n* **[53:07](#t=53:07)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Streaks App](http://streaksapp.com)\n* [Ready Player Two](https://www.audible.ca/pd/Ready-Player-Two-Audiobook/B08C6XN1BF)\n* [WP Forms](https://wpforms.com)\n* [AwesomeMotive](https://awesomemotive.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd527d427eccfb86a14c0cb81aac7dba42366d9455a0eedd1099d9c1ea4def23c', 'supper-club-syed-balkhi-and-wordpress', '/shows/490 - Supper club Syed Balkhi.md', '2023-10-16 20:07:51.051', '2023-10-27 15:58:08.740', 'SUPPER'),
('syntax_podcast_show_00491', 491, 'How to Spark your Imagination and Get Excited about Coding', '2022-08-01 12:00:00.077', 'https://traffic.libsyn.com/syntax/Syntax_-_491.mp3', '\nIn this Hasty Treat, Scott and Wes talk the appreciation of coding projects that supposedly serve no purpose, but can be great ways to learn something new.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Show Notes\n\n* **[00:39](#t=00:39)** I am excited about coding\n* **[02:40](#t=02:40)** Sponsor: LogRocket\n* **[03:58](#t=03:58)** Sponsor: Linode\n* **[04:24](#t=04:24)** Projects that serve no purpose\n* [Bookit](https://github.com/leveluptuts/bookit)\n* **[05:46](#t=05:46)** Scratching your own itch\n* **[10:06](#t=10:06)** Discount finder\n* **[11:20](#t=11:20)** Webcam or audio manipulation\n* **[12:43](#t=12:43)** TTFS\n* [Parcel](https://parceljs.org)\n* [Vite](https://vitejs.dev)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '62049efc1723f79d5dd12b029f191df8bf6d8864442b597f236bcc2fa05e7f11', 'how-to-spark-your-imagination-and-get-excited-about-coding', '/shows/491 - Hasty Spark coding.md', '2023-10-16 20:07:51.192', '2023-10-27 15:58:08.851', 'HASTY'),
('syntax_podcast_show_00492', 492, 'Our Web Dev Wish List', '2022-08-03 12:00:00.245', 'https://traffic.libsyn.com/syntax/Syntax_-_492.mp3', '\nIn this episode of Syntax, Wes and Scott talk through their web dev wish list of things they want to just work already!\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[02:20](#t=02:20)** Write Custom animation transitions\n* **[03:32](#t=03:32)** date input translate to JavaScript date\n* **[06:48](#t=06:48)** Smooth and animated drag and drop\n* **[08:35](#t=08:35)** TypeScript Interfaces are faster than Types\n* **[10:35](#t=10:35)** Request animation frame\n* **[12:52](#t=12:52)** Custom Elements / Web Components\n* **[13:52](#t=13:52)** Authentication\n* [Web Authentication API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API)\n* **[16:12](#t=16:12)** Sponsor: Linode\n* **[17:48](#t=17:48)** useIsomporphic vs useLayoutEffect\n* **[19:48](#t=19:48)** useEffect dependency array\n* **[21:27](#t=21:27)** fragments without fragments\n* **[24:46](#t=24:46)** Overflow hidden without hiding shadows\n* **[27:11](#t=27:11)** Fluid text\n* **[28:52](#t=28:52)** Sponsor: Sentry\n* **[29:34](#t=29:34)** translate3d vs translate\n* **[30:59](#t=30:59)** Gradient borders\n* **[33:33](#t=33:33)** Independent transforms\n* **[36:16](#t=36:16)** animate height auto\n* **[38:40](#t=38:40)** Sponsor: Freshbooks\n* **[39:02](#t=39:02)** Auto synced deps when changing package file\n* **[40:36](#t=40:36)** Peer dependencies\n* **[42:32](#t=42:32)** VS Code Reload after plugins install is kinda annoying\n* **[43:04](#t=43:04)** Safari updates\n* **[44:20](#t=44:20)** Apps checking for passwords\n* **[45:02](#t=45:02)** File name casing as changes\n* **[45:56](#t=45:56)** Better sounding commit names\n* **[46:33](#t=46:33)** Test runner that is the same and just works\n* **[47:32](#t=47:32)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Arc browser](https://thebrowser.company/) / [Video](https://www.youtube.com/watch?v=YJjsY2e5pAY&feature=youtu.be)\n* Wes: [Battery powered glue gun](https://www.ryobitools.com/products/details/33287177172)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8507afcbdf6e4f7f80a91cb8c4eae8b1dfe5c458f84e0c35ee523a5416d88929', 'our-web-dev-wish-list', '/shows/492 - Our Web Dev Wish List.md', '2023-10-16 20:07:51.234', '2023-10-27 15:58:08.899', 'TASTY'),
('syntax_podcast_show_00493', 493, 'Supper Club × Lee Robinson on React Suspense, Server Components', '2022-08-05 12:00:00.535', 'https://traffic.libsyn.com/syntax/Syntax_-_493.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Lee Robinson from Vercel about React Suspense, server components, the edge, and more!\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [gatsby.dev/syntax](https://gatsby.dev/syntaxfm) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* **[01:34](#t=01:34)** Guest introduction\n* [LeeRob.io](https://leerob.io)\n* [Vercel](https://vercel.com)\n* **[02:25](#t=02:25)** Syntax hosted on Vercel\n* **[04:08](#t=04:08)** What is suspense?\n* **[06:50](#t=06:50)** Benefits of selective hydration\n* **[13:15](#t=13:15)** Sponsor: Lightstep Incident Response\n* **[14:24](#t=14:24)** How does suspense know you\'re doing something inside of it?\n* **[18:02](#t=18:02)** How does this connect to server components in React?\n* **[22:00](#t=22:00)** How do we use this in NextJS?\n* **[24:32](#t=24:32)** NextJS routing future\n* [Layouts RFC](https://nextjs.org/blog/layouts-rfc)\n* **[33:11](#t=33:11)** Will I ever be able to use web components inside NextJS?\n* **[36:12](#t=36:12)** Sponsor: Gatsby\n* **[37:14](#t=37:14)** What\'s happening with the Edge?\n* [Edge Runtime](https://edge-runtime.vercel.app)\n* **[47:37](#t=47:37)** What should we use for databases?\n* **[50:39](#t=50:39)** Supper Club dessert questions\n* [OhMyPosh](https://ohmyposh.dev)\n* [Hyper](https://hyper.is)\n* [Warp](https://www.warp.dev)\n* [Svelte](https://svelte.dev)\n* [Hackernews](https://news.ycombinator.com)\n* [Reddit](https://www.reddit.com)\n* **[58:57](#t=58:57)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [AirPods](https://www.apple.com/airpods/)\n\n## Shameless Plugs\n\n* [Careers at Vercel](https://vercel.com/careers)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ae6f0862908986e40d330941908324ebdcedc416e6afadf62759b79be9591747', 'supper-club-lee-robinson-on-react-suspense-server-components', '/shows/493 - Supper Club.md', '2023-10-16 20:07:51.269', '2023-10-27 15:58:08.945', 'SUPPER'),
('syntax_podcast_show_00494', 494, 'Browsers, Engines, Support and the Other Guys', '2022-08-08 12:00:00.726', 'https://traffic.libsyn.com/syntax/Syntax_-_494.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the various web browers that might show up in your analytics and whether you need to worry about supporting them or not.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## MagicBell - Sponsor\n\n[MagicBell](https://www.magicbell.com) is the The notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:19](#t=01:19)** Sponsor: Sentry\n* **[02:29](#t=02:29)** Sponsor: MagicBell\n* **[03:51](#t=03:51)** Big browsers and their engines\n* **[05:29](#t=05:29)** Cloaked browsers\n* **[08:16](#t=08:16)** What\'s so great about Arc?\n* [Arc](https://thebrowser.company)\n* **[11:33](#t=11:33)** JavaScript engines\n* **[13:30](#t=13:30)** iOS Browsers\n* [Open Web Advocacy](https://open-web-advocacy.org/)\n* **[15:07](#t=15:07)** Android browsers\n* **[18:04](#t=18:04)** The rest of the browsers\n* **[19:24](#t=19:24)** Tor browser\n* **[20:20](#t=20:20)** Opera mini\n* **[22:48](#t=22:48)** UC browser\n* **[23:42](#t=23:42)** Opera mobile\n* **[24:57](#t=24:57)** KaiOS\n* **[26:26](#t=26:26)** Ringtone memories\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '66b6cf8ae404da728246cd2445f5e18767b9d408bcaf69500067d7c6851136d2', 'browsers-engines-support-and-the-other-guys', '/shows/494 - Hasty Browsers and engines.md', '2023-10-16 20:07:51.377', '2023-10-27 15:58:09.031', 'HASTY'),
('syntax_podcast_show_00495', 495, 'Potluck - API Fetching × PDF Creation × tRPC × Stripe vs PayPal', '2022-08-10 12:00:00.533', 'https://traffic.libsyn.com/syntax/Syntax_-_495.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about middleman for API fetching, when to introduce SvelteKit, generating PDFs server side, trade offs of being an entrepreneur vs employee, and more!\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:18](#t=00:18)** Welcome\n* **[02:50](#t=02:50)** Is there a way to create a \"middleman\" to fetch data from an API once a day?\n* [Redis](https://redis.io)\n* **[06:53](#t=06:53)** Should I wait before introducing team members to SvelteKit?\n* [SvelteKit V1 issues](https://github.com/sveltejs/kit/discussions/5748)\n* **[10:28](#t=10:28)** What options do we have for generating PDFs serverside?\n* [WKHTML to PDF](https://wkhtmltopdf.org)\n* [Puppeteer](https://pptr.dev)\n* [PhantomJS](https://phantomjs.org)\n* [html2canvas](https://www.npmjs.com/package/html2canvas)\n* [Generate Invoice Workers](https://github.com/adamschwartz/generate.invoice.workers.dev/blob/master/index.js)\n* **[15:47](#t=15:47)** Sponsor: Prismic\n* **[17:08](#t=17:08)** How do you say thank you to sponsors?\n* **[18:32](#t=18:32)** How would you compare the tradeoffs of working at a tech company vs. an agency vs. freelancing vs. entrepreneurship?\n* **[20:47](#t=20:47)** What\'s the best way for an oldie like me to catch up?\n* [CSS Grid.io](https://cssgrid.io)\n* [Modern CSS Layouts](https://leveluptutorials.com/tutorials/modern-css-layouts/about-modern-css-layouts)\n* **[26:08](#t=26:08)** I\'m wondering what do you think about tRPC?\n* [trpc.io](https://trpc.io)\n* [Create t3 app](https://github.com/t3-oss/create-t3-app)\n* **[29:00](#t=29:00)** Sponsor: LogRocket\n* **[30:03](#t=30:03)** PDF creator Cloudflare worker\n* **[32:50](#t=32:50)** How do you feel about keeping separate accounts for things like Twitter?\n* **[37:28](#t=37:28)** Does using prototypes mean you are not doing functional programming?\n* **[42:09](#t=42:09)** PHP vs JavaScript based CMS\n* [Ghost](https://ghost.org)\n* [Keystone](https://keystonejs.com)\n* [Strapi](https://strapi.io)\n* **[45:15](#t=45:15)** Sponsor: Auth0\n* **[46:21](#t=46:21)** Why do you think this mindset that with age comes an inability to learn?\n* [Syntax 44 How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n* **[51:32](#t=51:32)** Are there other payment providers you guys recommend or should I stick with Stripe and hope for the best?\n* [Stripe](https://stripe.com)\n* [Paypal](https://www.paypal.com)\n* **[56:10](#t=56:10)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Literature and History](https://literatureandhistory.com/)\n* Wes: [Kitchen faucet](https://amzn.to/3OKAeMJ)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3cd4a461440eba891fce725c684538d5c9e9aed6dd736f7f050079e8cd04e181', 'potluck-api-fetching-pdf-creation-trpc-stripe-vs-paypal', '/shows/495 - Potluck.md', '2023-10-16 20:07:51.416', '2023-10-27 15:58:09.078', 'TASTY'),
('syntax_podcast_show_00496', 496, 'Supper Club × Headless Ecommerce with Shopify’s Josh Larson', '2022-08-12 12:00:00.626', 'https://traffic.libsyn.com/syntax/Syntax_-_496.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Josh Larson from Shopify about headless ecommerce, including Hydrogen from Shopify, how integrations work with Shopify, and what the tech stack is behind Hydrogen.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Show Notes\n\n* **[00:38](#t=00:38)** Welcome\n* **[01:12](#t=01:12)** Guest introduction\n* **[03:16](#t=03:16)** What is Hydrogen from Shopify?\n* [Hydrogen](https://hydrogen.shopify.dev)\n* [Shopify Oxygen](https://shopify.dev/custom-storefronts/oxygen)\n* **[11:23](#t=11:23)** Why would you want to go headless?\n* **[15:26](#t=15:26)** Sponsor: Hasura\n* **[16:56](#t=16:56)** Where does custom logic fit?\n* **[18:45](#t=18:45)** What is the stack behind Hydrogen?\n* **[24:16](#t=24:16)** Sponsor: Lightstep Incident Response\n* **[25:33](#t=25:33)** How much code is JavaScript vs React?\n* **[33:43](#t=33:43)** How do integrations work?\n* **[38:28](#t=38:28)** Supper Club Questions\n* [In Bed By 7pm VS Code Theme](https://marketplace.visualstudio.com/items?itemName=sdras.inbedby7pm)\n* [Zsh](https://ohmyz.sh)\n* [Hyper](https://hyper.is)\n* [Laravel](https://laravel.com)\n* [Vite](https://vitejs.dev)\n* [Cloudflare Workers](https://workers.cloudflare.com)\n* [Rust](https://www.rust-lang.org)\n* [Rust for JS](https://rustforjs.dev)\n* **[48:10](#t=48:10)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [The Story Of by Vice](https://www.vice.com/en/topic/the-story-of)\n\n## Shameless Plugs\n\n* [@JPLHomer](https://twitter.com/jplhomer)\n* [Shopify Editions](https://www.shopify.ca/enterprise/editions)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '6c2bb9af8d914b6efec2043b1edb97f93df988f4c82fd7c6c5f40d0b742d575d', 'supper-club-headless-ecommerce-with-shopify-s-josh-larson', '/shows/496 - Supper Headless Commerce.md', '2023-10-16 20:07:51.451', '2023-10-27 15:58:09.125', 'SUPPER'),
('syntax_podcast_show_00497', 497, 'CSS Proposals @when, CSS Masonry, Carets', '2022-08-15 12:00:00.137', 'https://traffic.libsyn.com/syntax/Syntax_-_497.mp3', '\nIn this episode of Syntax, Wes and Scott talk about proposals to CSS including @when, CSS Masonry, CSS Caret, ENV Vars, and Media Query Ranges.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[00:58](#t=00:58)** Sponsor: Sentry\n* **[02:17](#t=02:17)** Sponsor: Sanity\n* **[03:32](#t=03:32)** CSS @when and @else\n* [CSS When and Else](https://www.w3.org/TR/css-conditional-5/#when-rule)\n\n```\n@when media(width >= 400px) and media(pointer: fine) and supports(display: flex) {\n  /* A */\n} @else supports(caret-color: pink) and supports(background: double-rainbow()) {\n  /* B */\n} @else {\n  /* C */\n}\n```\n\n* **[05:42](#t=05:42)** CSS Grid 3 Masonry\n* [CSS Grid](https://drafts.csswg.org/css-grid-3/)\n\n```\n.grid {\n  display: inline-grid;\n  grid: masonry / repeat(3, 2ch);\n  border: 1px solid;\n  masonry-auto-flow: next;\n}\n```\n\n* [David Desandro](https://desandro.com)\n* [Rachel Andrew](https://rachelandrew.co.uk)\n* **[09:00](#t=09:00)** CSS Caret\n* [CSS Caret](https://www.w3.org/TR/css-ui-4/#insertion-caret)\n* **[10:32](#t=10:32)** CSS Nesting\n* [CSS Nesting](https://www.w3.org/TR/css-nesting-1/)\n* [Syntax 343 CSS Nesting](https://syntax.fm/show/343/hasty-treat-css-nesting-1)\n* [Postcss-preset-env](https://github.com/csstools/postcss-preset-env)\n* **[13:14](#t=13:14)** ENV Vars\n* [ENV Variables](https://drafts.csswg.org/css-env-1/)\n* **[14:58](#t=14:58)** Media Query Ranges\n* [MDN Media Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#syntax_improvements_in_level_4)\n`@media (width < env(--small_bp));`\n`@media (100px < width < 1000px);`\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5997fc5dea486831d2149d5b58c9f9bf41a2723b56db9af0812709aa362f3e87', 'css-proposals-when-css-masonry-carets', '/shows/497 - CSS Proposals.md', '2023-10-16 20:07:51.552', '2023-10-27 15:58:09.206', 'HASTY'),
('syntax_podcast_show_00498', 498, 'Job Types Agency, Tech, Startup, Entrepreneur VS Tech company VS In House', '2022-08-17 12:00:00.380', 'https://traffic.libsyn.com/syntax/Syntax_-_498.mp3', '\nIn this Hasty Treat, Scott and Wes talk about their thoughts on the different types of tech jobs you can get, and the pros and cons of each style of job in tech.\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:47](#t=01:47)** The types of jobs\n* [Wes’ tweet about developer jobs](https://twitter.com/wesbos/status/1556647760379650048?s=21&t=j8S5yG0EUhTCdyun3JEZ4g)\n* **[03:02](#t=03:02)** Our experiences\n* **[05:58](#t=05:58)** Tech company\n* **[09:46](#t=09:46)** Freelancer or Entrepreneur\n* **[11:14](#t=11:14)** What are the pros of working at a agency?\n* **[18:38](#t=18:38)** Cons to agency life\n* **[26:19](#t=26:19)** Sponsor: Lightstep Incident Response\n* **[27:49](#t=27:49)** Pros of tech company jobs\n* **[30:47](#t=30:47)** Cons of working at tech companies\n* **[37:46](#t=37:46)** Sponsor: Freshbooks\n* **[38:51](#t=38:51)** Pros of in house tech jobs\n* **[46:01](#t=46:01)** Cons of tech work\n* **[51:29](#t=51:29)** Sponsor: LogRocket\n* **[52:28](#t=52:28)** Pros of freelance or entrepreneur\n* **[57:20](#t=57:20)** Cons of entrepreneur life\n* **[00:03](#t=00:03)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Wes: [Soap pump](https://amzn.to/3QbrVLd)\n* Scott: [Pro breaking tour](https://www.youtube.com/watch?v=Yi7H21E4nys)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ec6d2b943f719d1fbc61bdc50c48b0a2e56e2967194e2629621f25281f6453ee', 'job-types-agency-tech-startup-entrepreneur-vs-tech-company-vs-in-house', '/shows/498 - Agency or solo work.md', '2023-10-16 20:07:51.610', '2023-10-27 15:58:09.257', 'TASTY'),
('syntax_podcast_show_00499', 499, 'Supper Club × Rich Harris, Author of Svelte', '2022-08-19 12:00:00.400', 'https://traffic.libsyn.com/syntax/Syntax_-_499.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with the author of Svelte, Rich Harris, about what influenced the creation of Svelte, his thoughts on web components, the virtual DOM, why companies are switching to Svelte, and what\'s next for Svelte.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [gatsby.dev/syntax](https://gatsby.dev/syntax) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Lightstep Incident Response - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Show Notes\n\n* **[00:33](#t=00:33)** Welcome\n* **[02:10](#t=02:10)** Who is Rich Harris?\n* [Rich Harris on Twitter](https://twitter.com/rich_harris)\n* **[02:55](#t=02:55)** What is Svelte?\n* [Svelte](https://svelte.dev)\n* [Vercel](https://vercel.com)\n* [Svelte Kit](https://kit.svelte.dev)\n* **[06:52](#t=06:52)** What influenced the template language for Svelte?\n* **[10:03](#t=10:03)** What do you use the const tag for?\n* **[10:49](#t=10:49)** Sponsor: Gatsby\n* **[12:04](#t=12:04)** What about immutability issues?\n* **[17:49](#t=17:49)** What about web components?\n* **[21:51](#t=21:51)** Why does Svelte not need the virtual DOM?\n* **[27:34](#t=27:34)** Sponsor: Lightstep Incident Response\n* **[28:45](#t=28:45)** What is your favorite part of working in Svelte?\n* **[32:31](#t=32:31)** Why are companies switching to Svelte?\n* **[34:35](#t=34:35)** What is the SvelteKit timeline?\n* **[38:52](#t=38:52)** What\'s the next version of Svelte include?\n* [Motion](https://motion.dev)\n* **[41:36](#t=41:36)** Any thoughts on new backend JavaScript environments?\n* [Web Interoperability](https://en.wikipedia.org/wiki/Web_interoperability)\n* **[45:39](#t=45:39)** Supperclub Questions\n* **[52:40](#t=52:40)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Rich: [Mullvad VPN](https://mullvad.net)\n\n## Shameless Plugs\n\n* [Svelte Origins](https://www.youtube.com/watch?v=kMlkCYL9qo0)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5850d8d410bed61d32cf22bb9f87b196111685e4b2ebe82409a37c1b47472ce8', 'supper-club-rich-harris-author-of-svelte', '/shows/499 - Supper Rich Harris.md', '2023-10-16 20:07:51.675', '2023-10-27 15:58:09.303', 'SUPPER');

INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00500', 500, 'Episode 500!', '2022-08-22 12:00:00.221', 'https://traffic.libsyn.com/syntax/Syntax_-_500.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the past 499 episodes of Syntax, what have been the most downloaded episodes, their favorite episodes, and the sickest of sick pics.\n\n## Sentry - Sponsor\n\n[Attend Dex](https://bit.ly/syntax-fm)\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Payments Hub - Sponsor\n\nThere are hundreds of payments processing companies out there. Hit up [developer.paymentshub.com/syntax](https://developer.paymentshub.com/syntax) to learn more about how Payments Hub Developers not only processes ecommerce and in-person payments, but also boards and underwrites your merchants in as little as 90 minutes. We are currently offering Syntax listeners who become new partners 6 months free data through our Business Reporting API!\n\n## Show Notes\n\n* **[00:28](#t=00:28)** Welcome\n* **[01:44](#t=01:44)** Sponsor: Sentry\n* **[03:28](#t=03:28)** Sponsor: Payments Hub\n* **[04:36](#t=04:36)** 20 million!\n* **[05:57](#t=05:57)** Our current recording process\n* [Libsyn](https://www.libsyn.com)\n* **[09:09](#t=09:09)** Top 10 episodes\n* [162 - The Fundementals JS](https://syntax.fm/show/162/the-fundamentals-js)\n* [92 - React Hooks](https://syntax.fm/show/092/react-hooks)\n* [158 - The Fundamentals HTML + CSS](https://syntax.fm/show/158/the-fundamentals-html-css)\n* [66 - The React Episode](https://syntax.fm/show/066/the-react-episode)\n* [44 - How to Learn New Things Quickly](https://syntax.fm/show/044/how-to-learn-new-things-quickly)\n* [198 - How to Get Better at Problem Solving](https://syntax.fm/show/198/how-to-get-better-at-problem-solving)\n* [20 JavaScript Array and Object Methods to make you a better developer](https://syntax.fm/show/043/20-javascript-array-and-object-methods-to-make-you-a-better-developer)\n* [188 - The Fundamentals - Server Side](https://syntax.fm/show/188/the-fundamentals-server-side)\n* [174 - How to Build an API](https://syntax.fm/show/174/how-to-build-an-api)\n* [120 - Gatsby vs Next](https://syntax.fm/show/120/gatsby-vs-next)\n* **[18:00](#t=18:00)** Our favorite episodes\n* [193 - Spooky Stories](https://syntax.fm/show/193/hasty-treat-spooky-stories)\n* [400 - Horror Stories 2021](https://syntax.fm/show/400/horror-web-dev-stories-2021)\n* [250 - Scott Teaches Wes Svelte and Sapper](https://syntax.fm/show/250/scott-teaches-wes-svelte-and-sapper)\n* [60 - Undocumented Web](https://syntax.fm/show/060/the-undocumented-web-scraping-private-apis-proxies-and-alternative-solutions)\n* **[23:00](#t=23:00)** Questions from Twitter\n* [Twitter questions](https://twitter.com/wesbos/status/1559195351319543809)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c08569b0548de27bacc2789c1d476919fa3a4a7acdf490b7da3a93d26db520db', 'episode-500', '/shows/500 - Episode 500!.md', '2023-10-16 20:07:51.810', '2023-10-27 15:58:09.397', 'HASTY'),
('syntax_podcast_show_00501', 501, 'Fundamentals - Web Workers and Service Workers', '2022-08-24 12:00:00.112', 'https://traffic.libsyn.com/syntax/Syntax_-_501.mp3', '\nIn this episode of Syntax, Wes and Scott talk through the fundamentals of web workers and service workers - examples, when you should use them, how to debug, local dev, and more.\n\n## LogRocket  - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[04:34](#t=04:34)** What are threads?\n* **[06:12](#t=06:12)** Concurrent vs parallel\n* **[09:22](#t=09:22)** Green screen web cam example\n* **[13:02](#t=13:02)** Examples of what you could use web workers for\n* [Party Town](https://partytown.builder.io)\n* [Deno](https://deno.land)\n* **[19:52](#t=19:52)** Sponsor: LogRocket\n* **[20:42](#t=20:42)** Post Message API and Web Workers\n* **[25:57](#t=25:57)** What about WASM?\n* **[27:28](#t=27:28)** Offline sync\n* **[28:14](#t=28:14)** What are service workers?\n* **[31:20](#t=31:20)** How do you caching sites for offline use?\n* **[32:39](#t=32:39)** Web worker vs service worker\n* **[34:12](#t=34:12)** Sponsor: Sanity\n* **[35:40](#t=35:40)** What is the lifecycle of a service worker\n* **[38:18](#t=38:18)** Possible issues with Service Workers\n* **[42:46](#t=42:46)** Debugging service workers\n* [Svelte Kit Service workers](https://kit.svelte.dev/docs/service-workers)\n* [Workbox](https://developer.chrome.com/docs/workbox/)\n* **[43:04](#t=43:04)** Testing and local development\n* [Service Workers notes from Wes\' Workshop](https://github.com/wesbos/Web-App-Workshop/blob/master/notes/08%20-%20Offline%20Support%20with%20Service%20Workers.md)\n* **[46:45](#t=46:45)** Sponsor: Freshbooks\n* **[49:59](#t=49:59)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Setex Gecko Grip 1mm Anti Slip Eyeglass Nose Pads](https://amzn.to/3w1LFZB)\n* Wes: [Samsung Frame TV](https://amzn.to/3dvLDTw)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '01e3fbeb1f048db8848a033760ba4b244d59d07b2dc32e6b422867e8114d794b', 'fundamentals-web-workers-and-service-workers', '/shows/501 - Fundamentals Web Workers.md', '2023-10-16 20:07:51.879', '2023-10-27 15:58:09.441', 'TASTY'),
('syntax_podcast_show_00502', 502, 'Supper Club × Self Hosted Backend-as-a-service with Brandon Roberts', '2022-08-26 12:00:00.388', 'https://traffic.libsyn.com/syntax/Syntax_-_502.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Brandon Roberts about Appwrite, how Appwrite works, who it\'s for, as well as his thoughts on Angular, Remix, and more.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Lightstep Incident Response  - Sponsor\n\nStreamline on-call, collaboration, incident management, and automation with a free 30-day trial of [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Usage-based pricing on active services promotes collaboration across your entire team to build a culture of service ownership. Listeners of Syntax will also receive a free Lightstep Incident Response T-shirt after firing an alert or incident.\n\nPay for the services you use, not the number of people on your team with [Lightstep Incident Response](http://lightstep.com/syntax), built on ServiceNow. Streamline on-call, collaboration, incident management, and automation with a free 30-day trial. Fire an alert or incident today and receive a free Lightstep Incident Response t-shirt.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:10](#t=01:10)** Who is Brandon Roberts?\n* [@BrandonTRoberts](https://twitter.com/brandontroberts)\n* **[02:00](#t=02:00)** What is Appwrite?\n* [Appwrite](https://appwrite.io)\n* [Getting started with Appwrite](https://appwrite.io/docs/getting-started-for-web)\n* **[03:17](#t=03:17)** What database layer does Appwrite use?\n* **[08:17](#t=08:17)** Is this working client side or server side?\n* **[09:54](#t=09:54)** Great docs and examples\n* **[12:55](#t=12:55)** How is deployment handled?\n* [Appwrite on Digital Ocean](https://marketplace.digitalocean.com/apps/appwrite)\n* **[15:30](#t=15:30)** Sponsor: Lightstep Incident Response\n* **[16:36](#t=16:36)** Appwrite\'s focus on developer experience\n* [Appwrite to do with Svelte](https://appwrite-todo-with-svelte.vercel.app/)\n\n* **[19:56](#t=19:56)** Realtime database options with Appwrite\n* **[22:40](#t=22:40)** Cloud functions in Appwrite\n* **[26:01](#t=26:01)** How does Appwrite scale?\n* [Docker Swarm](https://docs.docker.com/engine/swarm/)\n* **[27:28](#t=27:28)** Who is Appwrite for?\n* [Flutter](https://flutter.dev)\n* **[30:03](#t=30:03)** What is Ionic?\n* [Ionic](https://ionic.io)\n* **[32:12](#t=32:12)** What do you enjoy about working in Angular?\n* [Angular](https://angular.io)\n* **[35:08](#t=35:08)** Sponsor: Hasura\n* **[36:30](#t=36:30)** Supper club questions\n* [Night owl](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl)\n\n## Shameless Plugs\n\n* Guest: [React Router](https://reactrouter.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c184aa9bcbc5ce672631a497ca32165ae3369de1a1d36d39d20d77b8cd53bc30', 'supper-club-self-hosted-backend-as-a-service-with-brandon-roberts', '/shows/502 - Supper Club Brandon Roberts.md', '2023-10-16 20:07:51.939', '2023-10-27 15:58:09.485', 'SUPPER'),
('syntax_podcast_show_00503', 503, 'Margins', '2022-08-29 12:00:00.171', 'https://traffic.libsyn.com/syntax/Syntax_-_503.mp3', '\nIn this Hasty Treat, Scott and Wes talk about margins. There are a lot of techniques for dealing with margins - padding instead of margin, only margin or padding bottom, Flexbox for everything, Grid for everything, or a spacing Div.\n\n## Sentry - Sponsor\n\n[Find out about Sentry\'s Dex Conference](https://bit.ly/syntax-fm).\n\nFrom controlling chaotic workflows to maintaining stable code, there’s a lot that can drive a developer mad. We’re hosting DEX, the conference for developers by developers, to give us all a chance to come together and sort through that madness.\n\n[This is a free, one-day event](https://bit.ly/syntax-fm) to share best practices, epic fails, and seasoned insights on how to improve productivity. Whether you join us in-person in San Francisco or virtually from your home, you’ll have the opportunity to share your thoughts, engage with other developers, and walk away with your own personal madness sorting algorithm.\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:30](#t=00:30)** Welcome\n* **[01:39](#t=01:39)** Sponsor: Sentry\n* **[02:50](#t=02:50)** Sponsor: Auth0\n* **[04:25](#t=04:25)** Introduction to margins\n* **[08:28](#t=08:28)** Margin vs padding\n* **[11:46](#t=11:46)** New techniques\n* **[14:32](#t=14:32)** The spacer div\n* **[17:36](#t=17:36)** Why do it as a component vs a class?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd25c4c8576207fae5b93e89d9a555e7857d89f5618fe36f6cdb9b021e3ff1a7f', 'margins', '/shows/503 - hasty Margins.md', '2023-10-16 20:07:52.194', '2023-10-27 15:58:09.590', 'HASTY'),
('syntax_podcast_show_00504', 504, 'Syntax Highlight', '2022-08-31 12:00:00.162', 'https://traffic.libsyn.com/syntax/Syntax_-_504.mp3', '\nIn this episode of Syntax, Wes and Scott review the websites you\'ve submitted including Ruben Oliveira, Adam Collier, Consolecmnd, Brad Preston, and more!\n\n## Sanity  - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## MagicBell - Sponsor\n\n[MagicBell](https://www.magicbell.com) is the the notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:16](#t=00:16)** Welcome\n* **[02:05](#t=02:05)** Setting up Wes\' new office\n* **[06:18](#t=06:18)** rubenoliveira.tech\n* [Ruben Oliveira](https://rubenoliveira.tech)\n* **[17:22](#t=17:22)** adamcollier.co.uk\n* [Adam Collier](https://www.adamcollier.co.uk/)\n* **[22:56](#t=22:56)** Sponsor: Sanity\n* **[24:13](#t=24:13)** Consolecmnd.com\n* [ConsoleCMND](https://www.consolecmnd.com/)\n* **[32:37](#t=32:37)** sz-development.tech\n* [SZ-Development](https://sz-development.tech)\n* **[44:07](#t=44:07)** Sponsor: LogRocket\n* **[44:57](#t=44:57)** Richardcarrigan.com\n* [Richard Carrigan](https://richardcarrigan.com/)\n* **[49:52](#t=49:52)** Bradpreston.dev\n* [Brad Preston](https://bradpreston.dev/)\n* **[54:18](#t=54:18)** Sponsor: MagicBell\n* **[55:17](#t=55:17)** Mikemneves.com\n* [Mike Mneves](https://www.mikemneves.com/)\n* **[01:05](#t=01:05)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Packing Cubes](https://amzn.to/3TajqCc)\n* Wes: [Volt 1](https://www.uaudio.com/audio-interfaces/volt-1-usb.html)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4372910f861809f34fbb70a5aaf90a2cc16ac39b926e6a856fb06a97ec4244b0', 'syntax-highlight', '/shows/504 - Syntax highlight.md', '2023-10-16 20:07:52.250', '2023-10-27 15:58:09.673', 'TASTY'),
('syntax_podcast_show_00505', 505, 'Supper Club × Steve Ruiz Building a Drawing App', '2022-09-02 12:00:00.212', 'https://traffic.libsyn.com/syntax/Syntax_-_505.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Steve Ruiz about how he built tldraw, how he manages state, what was done to support mobile, and more.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [gatsby.dev/syntax](https://gatsby.dev/syntaxfm) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* **[03:23](#t=03:23)** Who is Steve Ruiz?\n* [Steve Ruiz](https://www.steveruiz.me/)\n* **[04:45](#t=04:45)** What is tldraw and what was your inspiration for it?\n* [tldraw](https://www.tldraw.com)\n* [Globs](https://www.globs.design)\n* [Excalidraw](https://excalidraw.com)\n* [tldraw on GitHub](https://github.com/tldraw/tldraw)\n* **[11:04](#t=11:04)** Why didn\'t you use canvas?\n* **[16:15](#t=16:15)** How do you make an algorithm?\n* [Perfect Free Hand](https://github.com/steveruizok/perfect-freehand)\n* **[19:33](#t=19:33)** Do you use pointer events?\n* **[23:44](#t=23:44)** What are you using to manage state?\n* **[29:42](#t=29:42)** How do you handle zooming?\n* [Creating Zoom UI](https://www.steveruiz.me/posts/zoom-ui)\n* **[32:28](#t=32:28)** Where do you store the data for tldraw?\n* [Project Fugu](https://developers.google.com/codelabs/project-fugu#0)\n* **[37:08](#t=37:08)** Why use indexdb?\n* **[38:05](#t=38:05)** Sponsor: Gatsby\n* **[39:49](#t=39:49)** How difficult was it to make it work on mobile?\n* [React Use Gesture](https://www.npmjs.com/package/react-use-gesture)\n* **[41:59](#t=41:59)** Does it work offline?\n* **[43:25](#t=43:25)** Supper Club Questions\n* [Monokai Pro](https://monokai.pro)\n* [Framer Classic](https://classic.framerbook.com)\n* [Hacker News](https://news.ycombinator.com)\n* [One Lone Coder on YouTube](https://www.youtube.com/c/javidx9)\n* [Displaced Gamer](https://www.youtube.com/channel/UCWoSKWs8h6lFdiEDAjuIfpA)\n* [Coding Secrets](https://www.youtube.com/c/CodingSecrets)\n* **[52:28](#t=52:28)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Last Call BBS](https://store.steampowered.com/app/1511780/Last_Call_BBS/)\n\n## Shameless Plugs\n\n* Steve: [tldraw.dev](https://www.tldraw.dev)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '78a15db61adddf543e5830da406dc3823f6ff4c7d2bb93bc40e82e468c0e17d7', 'supper-club-steve-ruiz-building-a-drawing-app', '/shows/505 - Supper club with Steve Ruiz.md', '2023-10-16 20:07:52.286', '2023-10-27 15:58:09.723', 'SUPPER'),
('syntax_podcast_show_00506', 506, 'Big Deno Changes', '2022-09-05 12:00:00.044', 'https://traffic.libsyn.com/syntax/Syntax_-_506.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the changes announced by Deno and their thoughts on the changes.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:37](#t=01:37)** Sponsor: LogRocket\n* **[02:34](#t=02:34)** Sponsor: Linode\n* **[03:18](#t=03:18)** Standing and getting mic\'d\n* **[04:20](#t=04:20)** What is Deno?\n* [Deno Changes](https://deno.com/blog/changes)\n* **[07:13](#t=07:13)** What were they doing before this?\n* [How could we support typescript without vendoring it?](https://github.com/nodejs/node/issues/43818)\n* **[21:22](#t=21:22)** Enterprise support and search\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'bad59ee5d0f12aa90c6b46924d4a051980a70db79b64c2380de3d6940325f4ef', 'big-deno-changes', '/shows/506 - Deno.md', '2023-10-16 20:07:52.403', '2023-10-27 15:58:09.812', 'HASTY'),
('syntax_podcast_show_00507', 507, 'Potluck - How to Pick a Tech Stack × useEffect × setTimeout × Staying Focused', '2022-09-07 12:00:00.991', 'https://traffic.libsyn.com/syntax/Syntax_-_507.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about picking the right tech stack, whether useEffect is still useful, benefit to use uses setTimeout, and more!\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[02:39](#t=02:39)** What\'s the best way of comparing the efficiency of object literals created from a factory function vs objects created by new\'ing a class.\n* [Perf.link](https://perf.link/)\n* **[06:54](#t=06:54)** How can I always see the full signature in VS Code?\n* **[10:40](#t=10:40)** What’s your process for picking a stack when starting a project?\n* **[14:41](#t=14:41)** Sponsor: Linode\n* **[15:23](#t=15:23)** Is snapshot testing really worth it?\n* [TS QuickFixes](https://marketplace.visualstudio.com/items?itemName=tamj0rd2.ts-quickfixes-extension)\n* **[20:54](#t=20:54)** What are your thoughts on ISR Incremental Static Regeneration?\n* **[25:20](#t=25:20)** Is useEffect public enemy #1?\n* [Goodbye, useEffect: David Khourshid](https://www.youtube.com/watch?v=HPoC-k7Rxwo)\n* **[29:02](#t=29:02)** Sponsor: LogRocket\n* **[30:17](#t=30:17)** Is there any benefit to use uses setTimeout instead of setInterval?\n* [MongoDB](https://www.mongodb.com)\n* [Prisma](https://www.prisma.io)\n* **[37:13](#t=37:13)** HTML to PDF a great solution I use is gotenberg.dev\n* [gotenberg.dev](https://gotenberg.dev)\n* **[40:12](#t=40:12)** Although async/await might make for code that is easier to grok, I find it worse for chaining functions.\n* [Pipeline Operator proposal](https://github.com/tc39/proposal-pipeline-operator)\n* **[45:07](#t=45:07)** How do you guys stay focused for meaningful periods of time?\n* **[48:36](#t=48:36)** How should code formatters be configured and combined?\n* [Prettier](https://prettier.io)\n* [ES Lint](https://eslint.org)\n* [Editor Config](https://editorconfig.org)\n* [No-Sweat™ Eslint and Prettier Setup](https://github.com/wesbos/eslint-config-wesbos)\n* **[51:56](#t=51:56)** What\'s your opinion on the latest Sveltekit changes with load, file based routing, and more?\n* [Major Svelte Kit API Change - Fixing `load`, and tightening up SvelteKit\'s design before 1.0](https://www.youtube.com/watch?v=OUGn7VifUCg&t=134s)\n* [Astro](https://astro.build)\n* [Nano Store](https://github.com/nanostores/nanostores)\n* **[55:53](#t=55:53)** Sponsor: Auth0\n* **[56:47](#t=56:47)** SIIIIICK ××× PIIIICKS ×××\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Dog poop bags](https://amzn.to/3Kk0zR1)\n* Wes: [Ethernet termination kit](https://amzn.to/3QGFEtW)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n\n', 'cb13044a7b40dc1a3423bfc9f760f04e74e5981c4e952207ed948d2fef5d6296', 'potluck-how-to-pick-a-tech-stack-useeffect-settimeout-staying-focused', '/shows/507 - Potluck.md', '2023-10-16 20:07:52.449', '2023-10-27 15:58:09.857', 'TASTY'),
('syntax_podcast_show_00508', 508, 'Supper Club × The Primeagen - Vim, Streaming, Rust, all Around Interesting Guy', '2022-09-09 12:00:00.226', 'https://traffic.libsyn.com/syntax/Syntax_-_508.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with The Primeagen about his streaming set up, how he decides what to stream, why he makes the kind of content he does, and why he loves Vim.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Storyblok - Sponsor\n\n[Storyblok](https://www.storyblok.com/?utm_source=syntaxfm&utm_medium=sponsor&utm_campaign=AWA_SPON_SFM_TRA&utm_content=syntaxfm-podcast) is a headless component-based CMS with a real-time visual editor. It offers the flexibility for developers to craft their perfect tech stack, but it also empowers content creators to make changes independently. The result is that every team has the freedom to quickly and easily create the ideal website with limitless extensibility. Other key features include robust [Storyblok](https://www.storyblok.com/?utm_source=syntaxfm&utm_medium=sponsor&utm_campaign=AWA_SPON_SFM_TRA&utm_content=syntaxfm-podcast) SDKs and APIs, powerful internationalization options, and an eCommerce-ready platform.\n\n## Show Notes\n\n- **[00:35](#t=00:35)** Welcome\n- **[01:48](#t=01:48)** Guest introduction\n- [ThePrimeagen on YouTube](https://www.youtube.com/channel/UC8ENHE5xdFSwx71u3fDH5Xw)\n- [ThePrimeagen on Twitch](https://www.twitch.tv/ThePrimeagen)\n- [@ThePrimeagen on Twitter](https://twitter.com/ThePrimeagen)\n- [Why I Make Content](https://www.youtube.com/watch?v=7FsyXTMLPBY)\n- **[03:53](#t=03:53)** Dropping in on skateboarding\n- [Tony Hawk’s Pro Skater](<https://en.wikipedia.org/wiki/Tony_Hawk%27s_Pro_Skater_(video_game)>)\n- **[05:43](#t=05:43)** What do you do?\n- **[07:17](#t=07:17)** How do you plan your live streams?\n- **[10:05](#t=10:05)** Sponsor: Hasura\n- **[11:27](#t=11:27)** Do you do interactive content via OBS on stream?\n- [OBS](https://obsproject.com)\n- **[16:22](#t=16:22)** What languages do you use on stream?\n- [Bun](https://bun.sh)\n- [Zig](https://ziglang.org)\n- **[22:03](#t=22:03)** What do you try to build on stream?\n- **[24:53](#t=24:53)** Sponsor: StoryBlok\n- **[25:45](#t=25:45)** Why do you use Vim?\n- **[38:42](#t=38:42)** Do you ever have to do pair programming with Vim?\n- **[40:43](#t=40:43)** What kind of hardware are you playing with?\n- [Arduino](https://www.arduino.cc)\n- **[42:52](#t=42:52)** Supper club questions\n- [Lemur](https://system76.com/laptops/lemur)\n- [Pop](https://pop.system76.com)\n- [Kinesis Advantage 2](https://kinesis-ergo.com/keyboards/advantage2-keyboard/)\n- **[56:20](#t=56:20)** SIIIIICK ××× PIIIICKS ×××\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ff4ee923573dca586e10616168df3ee7d740b67344c7de0acf42a011b18a15f5', 'supper-club-the-primeagen-vim-streaming-rust-all-around-interesting-guy', '/shows/508 - supperclub.md', '2023-10-16 20:07:52.499', '2023-10-27 15:58:09.902', 'SUPPER'),
('syntax_podcast_show_00509', 509, 'Use Next-gen CSS Today (Post CSS Configs)', '2022-09-12 12:00:00.065', 'https://traffic.libsyn.com/syntax/Syntax_-_509.mp3', '\nIn this Hasty Treat, Scott and Wes talk about next generation CSS that you can use today with PostCSS including importing, nesting, variables, media query ranges, custom media queries, and more.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:27](#t=00:27)** Welcome\n* **[01:30](#t=01:30)** Sponsor: Prismic\n* **[02:54](#t=02:54)** Sponsor: Sentry\n* **[03:53](#t=03:53)** Do we use Post CSS?\n* **[05:22](#t=05:22)** Presets and plugins\n* **[06:19](#t=06:19)** Plugins we\'re using\n\n```\n\"postcss-import\"\n\n@import \'./elements/headings.css\';\n```\n\n* **[09:48](#t=09:48)** PostCSS Nested\n* **[12:59](#t=12:59)** Variables (Custom Properties)\n* **[15:50](#t=15:50)** Media Query Ranges\n* [PostCSS Media Minmax](https://github.com/postcss/postcss-media-minmax)\n* **[17:16](#t=17:16)** Custom Media Queries\n\n```\n\"postcss-media-minmax\"\n\n@media screen and (width >= 500px) and (width <= 1200px)\n```\n\n```\n\"postcss-custom-media\"\n\n@custom-media --below_small (width < env(--small_bp));\n\n@media (--above_small) {}\n```\n\n* **[18:35](#t=18:35)** Env Vars\n\n```\n\"postcss-env-function\"\n\nenv(--small_bp)\n```\n\n* **[20:12](#t=20:12)** Color Function and Color Function Notation\n\n```\n/* color-function */\np {\n  color: color(display-p3 1 0.5 0);\n  color: color(display-p3 1 0.5 0 / .5);\n}\n```\n\n* [Syntax 479: CSS Color Functions](https://syntax.fm/show/479/css5-color-functions)\n* [Post CSS Color Functional Notation](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-color-functional-notation#readme)\n* [Post CSS Preset Env](https://github.com/csstools/postcss-plugins/blob/main/plugin-packs/postcss-preset-env/FEATURES.md )\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ab1a94f34ae9c295d94afd2f977f0f11607fce77bf5186aad0411f18d35360b4', 'use-next-gen-css-today-post-css-configs', '/shows/509 - hasty.md', '2023-10-16 20:07:52.634', '2023-10-27 15:58:10.016', 'HASTY'),
('syntax_podcast_show_00510', 510, 'How To Build an API in 2022', '2022-09-14 14:00:00.681', 'https://traffic.libsyn.com/syntax/Syntax_-_510.mp3', '\nIn this episode of Syntax, Wes and Scott talk about what APIs are, the API standards that exist, and walk through the various layers of what goes into making an API.\n\n## Payments Hub  - Sponsor\n\nThere are hundreds of payments processing companies out there. Hit up [developer.paymentshub.com/syntax](https://developer.paymentshub.com/syntax) to learn more about how Payments Hub Developers not only processes ecommerce and in-person payments, but also boards and underwrites your merchants in as little as 90 minutes. We are currently offering Syntax listeners who become new partners 6 months free data through our Business Reporting API!\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[02:40](#t=02:40)** What are APIs?\n* **[06:09](#t=06:09)** API Standards\n* **[13:56](#t=13:56)** What about GRPC?\n* **[15:52](#t=15:52)** What is TRPC?\n* **[19:19](#t=19:19)** Sponsor: Payments Hub\n* **[20:25](#t=20:25)** API Cake Layers\n* [mySQL](https://www.mysql.com)\n* [Postgres](https://www.postgresql.org)\n* [Mongo DB](https://www.mongodb.com)\n* [SQLite](https://www.sqlite.org)\n* [SQLizer](https://sqlizer.io)\n* **[26:51](#t=26:51)** Server layer\n* **[33:28](#t=33:28)** Sponsor: LogRocket\n* **[34:36](#t=34:36)** Authentication layer\n* **[43:28](#t=43:28)** Caching layer\n* **[46:09](#t=46:09)** Sponsor: Freshbooks\n* **[46:38](#t=46:38)** Client layer\n* [Prisma](https://www.prisma.io): Package, but also a  service\n* [keystone](https://keystonejs.com): Package\n* [Strapi](https://strapi.io): Package\n* [Sanity](https://www.sanity.io): Service\n* [Prismic](https://prismic.io): Service\n* [Hasura](https://hasura.io): Open Source and Service\n* [Contentful](https://www.contentful.com)\n* [hygraph](https://hygraph.com)\n* **[48:01](#t=48:01)** Should I use x or y?\n* **[51:35](#t=51:35)** Tools\n* [GraphQL Playground](https://www.apollographql.com/docs/apollo-server/v2/testing/graphql-playground/)\n* [Graphiql](https://graphql.org/swapi-graphql)\n* [Postman](https://www.postman.com)\n* [Insomnia](https://insomnia.rest)\n* [TablePlus](https://tableplus.com)\n* [Studio3T](https://studio3t.com)\n* **[56:27](#t=56:27)** SIIIIICK ××× PIIIICKS ×××\n* **[00:20](#t=00:20)** Knife Talk\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Sharp Pebble](https://amzn.to/3RbT9BO)\n* Wes: [Laser level](https://amzn.to/3Rkoja4)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a23c39ba47782b896f436cb2a5a0222aa1f94325dcc5ef82a966ef97f280f1f0', 'how-to-build-an-api-in-2022', '/shows/510 - Building an API in 2022.md', '2023-10-16 20:07:52.679', '2023-10-27 15:58:10.068', 'TASTY'),
('syntax_podcast_show_00511', 511, 'Supper Club × Raycast with Thomas Mann', '2022-09-16 12:00:00.231', 'https://traffic.libsyn.com/syntax/Syntax_-_511_v2.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Thomas Mann about Raycast - an app that can replace Spotlight on your Mac, and do so much more.\n\n## FireHydrant - Sponsor\n\nIncidents are hard. Managing them shouldn’t be. FireHydrant makes it easy for anyone in your organization to respond to incidents efficiently and consistently. Intuitive, guided workflows provide turn-by-turn navigation for incident response, while thoughtful prompts and powerful integrations capture all of your incident data to drive useful retros and actionable analytics. \n\nDid we mention that FireHydrant is free? Get started at Firehydrant.com/syntax\n\n\n## Show Notes\n\n* [@ThomasPaulMann](https://twitter.com/thomaspaulmann)\n* **[01:58:02](#t=01:58)** What is Raycast?\n* [Raycast](https://www.raycast.com)\n* [Raycast Store](https://www.raycast.com/store)\n* **[08:22:00](#t=08:22)** Do you have designers on your team to help guide UI?\n* **[10:23:21](#t=10:23)** Why build it native instead of HTML and CSS?\n* **[13:22:14](#t=13:22)** Why did you choose React?\n* **[22:05:03](#t=22:05)** How do you figure out what\'s possible in system level APIs?\n* **[26:50:20](#t=26:50)** Snippets make use of SQLite\n* [SQLite](https://www.sqlite.org)\n* **[29:15:14](#t=29:15)** Encrypted local storage data\n* **[33:21:09](#t=33:21)** Sponsor: FireHydrant\n* **[34:29:06](#t=34:29)** Any plans for theming for Raycast?\n* **[36:55:16](#t=36:55)** What is the pricing model?\n* **[38:42:05](#t=38:42)** What was your Y combinator experience like?\n* [Y Combinator](https://www.ycombinator.com)\n* [Careers](https://www.raycast.com/careers)\n* **[43:44:02](#t=43:44)** Any plans for future features?\n* **[45:44:12](#t=45:44)** Supper Club questions\n* [Leopold FC660C Black 65% Dye Sub PBT Mechanical Keyboard](https://mechanicalkeyboards.com/shop/index.php?l=product_detail&p=4097)\n* [iTerm](https://iterm2.com)\n* [Starship](https://starship.rs)\n* **[53:01:00](#t=53:01)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Nothing Ear Buds](https://ca-en.nothing.tech/products/ear-1)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7e43cfcf183d6d6835f995ac144a9b65da67603555eb57f64336eac15d47db9a', 'supper-club-raycast-with-thomas-mann', '/shows/511 - Supper club.md', '2023-10-16 20:07:52.720', '2023-10-27 15:58:10.136', 'SUPPER'),
('syntax_podcast_show_00512', 512, 'AI and Coding - Is Github Co-Pilot Worth It?', '2022-09-19 12:00:00.806', 'https://traffic.libsyn.com/syntax/Syntax_-_512.mp3', '\nIn this Hasty Treat, Scott and Wes talk all about GitHub Co-Pilot and whether it\'s ethical, secure, worth it, gonna make you dumb, just going to get in your way, or the greatest thing for programmers to use.\n\n## Sentry - Sponsor\n\n[Sentry Dex conference](https://sentry.io/events/dex) is a free, one-day event to share best practices, epic fails, and seasoned insights on how to improve productivity.\n\nFrom controlling chaotic workflows to maintaining stable code, there’s a lot that can drive a developer mad. We’re hosting DEX, the conference for developers by developers, to give us all a chance to come together and sort through that madness.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n[Sentry Dex conference](https://sentry.io/events/dex) is a free, one-day event to share best practices, epic fails, and seasoned insights on how to improve productivity.\n\nFrom controlling chaotic workflows to maintaining stable code, there’s a lot that can drive a developer mad. We’re hosting DEX, the conference for developers by developers, to give us all a chance to come together and sort through that madness.\n\n## Show Notes\n\n* [GitHub Copilot](https://github.com/features/copilot/)\n* [Code Whisperer](https://aws.amazon.com/codewhisperer/)\n* **[00:29](#t=00:29)** Welcome\n* **[01:12](#t=01:12)** Sponsor: Sentry\n* **[02:06](#t=02:06)** Sponsor: Sanity\n* **[03:07](#t=03:07)** GitHub Co-Pilot is now paid\n* **[05:51](#t=05:51)** Is it ethical?\n* **[08:02](#t=08:02)** Is it secure?\n* **[10:16](#t=10:16)** Is it going to take our jobs?\n* **[13:34](#t=13:34)** Is it worth it?\n* **[16:21](#t=16:21)** Does it make you dumb?\n* **[17:53](#t=17:53)** Does it get in the way?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b03f4880839d8e98c1dd14faffbee8d3194572280a6062cb048b6d974bfa5c64', 'ai-and-coding-is-github-co-pilot-worth-it', '/shows/512 - AI and coding.md', '2023-10-16 20:07:52.832', '2023-10-27 15:58:10.236', 'HASTY'),
('syntax_podcast_show_00513', 513, 'The Productivity Episode', '2022-09-21 12:00:00.892', 'https://traffic.libsyn.com/syntax/Syntax_-_513.mp3', '\nIn this episode of Syntax, Wes and Scott talk through what they do to get things done - apps for to do list tracking, calendar blocking, and how they determine a productive day.\n\n## StoryBlok  - Sponsor\n\n[Storyblok](https://www.storyblok.com/?utm_source=syntaxfm&utm_medium=sponsor&utm_campaign=AWA_SPON_SFM_TRA&utm_content=syntaxfm-podcast) is a headless component-based CMS with a real-time visual editor. It offers the flexibility for developers to craft their perfect tech stack, but it also empowers content creators to make changes independently. The result is that every team has the freedom to quickly and easily create the ideal website with limitless extensibility. Other key features include robust Storyblok SDKs and APIs, powerful internationalization options, and an eCommerce-ready platform.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[02:49](#t=02:49)** What is a productive day?\n* **[04:56](#t=04:56)** What\'s an unproductive day?\n* **[07:43](#t=07:43)** Techniques for work\n* [Getting Things Done](https://gettingthingsdone.com)\n* [Eat That Frog](https://www.amazon.com/Eat-That-Frog-Great-Procrastinating/dp/162656941X/ref=sr_1_1?crid=2RQ9XLRVKN1VP&keywords=eat+that+frog&qid=1663371437&sprefix=eat+that+frog%2Caps%2C109&sr=8-1)\n* [Height](https://height.app)\n* **[14:57](#t=14:57)** Weighting tasks\n* **[18:29](#t=18:29)** Pomodoro technique\n* **[20:53](#t=20:53)** Sponsor: StoryBlok\n* **[22:46](#t=22:46)** The hard schedule\n* **[29:24](#t=29:24)** Blocking out distractions\n* [Focus](https://meaningful-things.com/focus)\n* [Self Control](https://selfcontrolapp.com)\n* **[32:20](#t=32:20)** Sponsor: LogRocket\n* **[33:34](#t=33:34)** Tips We Have\n* **[42:55](#t=42:55)** Sponsor: Freshbooks\n* **[43:32](#t=43:32)** Software to help get things done.\n* [Things](https://culturedcode.com/things/)\n* [Todoist](https://todoist.com)\n* [Omnifocus](https://www.omnigroup.com/omnifocus)\n* [Transmit](https://panic.com/transmit/)\n* [Savvycal](https://savvycal.com)\n* [Centered](https://www.centered.app)\n* [Remarkable](https://remarkable.com)\n* **[56:21](#t=56:21)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [USB C Female to USB Male Adapter](https://amzn.to/3Bjfbxl)\n* Wes: [Measuring tape](https://www.homedepot.ca/product/dewalt-25-ft-tape-measure-2-pack-/1001071650)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'be2a88b255310adf8b756f186e5a4d02a91063dff6f35af558d35dcf2e5a91c4', 'the-productivity-episode', '/shows/513 - Productivity.md', '2023-10-16 20:07:52.863', '2023-10-27 15:58:10.285', 'TASTY'),
('syntax_podcast_show_00514', 514, 'Supper Club × Arc Browser with Hursh Agrawal', '2022-09-23 12:00:00.417', 'https://traffic.libsyn.com/syntax/Syntax_-_514.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Hursh Agrawal of The Browser Company about Scott\'s favorite browser, Arc. How do you make a browser in 2022? Will there be a Windows version? And who is the target market for Arc?\n\n## FireHydrant - Sponsor\n\nIncidents are hard. Managing them shouldn’t be. [FireHydrant](https://Firehydrant.com/syntax) makes it easy for anyone in your organization to respond to incidents efficiently and consistently. Intuitive, guided workflows provide turn-by-turn navigation for incident response, while thoughtful prompts and powerful integrations capture all of your incident data to drive useful retros and actionable analytics.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [Gatsby.dev/Syntax](https://gatsby.dev/Syntax) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* [HurshAgrawal.com](http://www.hurshagrawal.com)\n* [@Hursh](https://twitter.com/hursh)\n* **[02:53](#t=02:53)** What is Arc and why create another browser?\n* [Arc browser](https://arc.net)\n* [The browser company](https://thebrowser.company)\n* **[05:36](#t=05:36)** What is different about Arc?\n* **[08:20](#t=08:20)** Who is the target market for Arc?\n* **[09:30](#t=09:30)** Sponsor: Auth0\n* **[10:39](#t=10:39)** How do you make a browser?\n* **[13:38](#t=13:38)** Will there be a Windows version of Arc?\n* **[15:57](#t=15:57)** Where did the CMD-T functionality come from?\n* **[19:27](#t=19:27)** Sponsor: FireHydrant\n* **[20:39](#t=20:39)** How do you build on top of the Chrome engine?\n* **[24:17](#t=24:17)** How does The Browser Company make money?\n* **[27:26](#t=27:26)** Do you mess with the user agent?\n* **[29:05](#t=29:05)** Why do you require account set up to use Arc?\n* **[32:58](#t=32:58)** Sponsor: Gatsby\n* **[33:59](#t=33:59)** How did you come up with your theming engine?\n* **[36:15](#t=36:15)** Supper Club Questions\n* [Warp](https://www.warp.dev)\n* [Hacker News](https://news.ycombinator.com)\n* [Changelog](https://changelog.com)\n* [Every](https://every.to)\n* [Ben Thompson Bundling and Unbundling](https://stratechery.com/concept/business-models/bundling-and-unbundling/)\n* **[42:59](#t=42:59)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Jabra speakerphone](https://www.jabra.ca/business/speakerphones/jabra-speak-series/jabra-speak-710##7710-409)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '931d83515920de1e748fccb711fa16b5419a54ae1192a93101cfce1fd60e766c', 'supper-club-arc-browser-with-hursh-agrawal', '/shows/514 - supper club.md', '2023-10-16 20:07:52.899', '2023-10-27 15:58:10.334', 'SUPPER'),
('syntax_podcast_show_00515', 515, 'WTF Is Enhance Framework?', '2022-09-26 12:00:00.742', 'https://traffic.libsyn.com/syntax/Syntax_-_515.mp3', '\nIn this Hasty Treat, Scott and Wes talk about a new framework called Enhance. What is Enhance and how does it differ from other new frameworks like Astro?\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:27](#t=00:27)** Welcome\n* **[01:12](#t=01:12)** Sponsor: Sentry\n* **[02:06](#t=02:06)** Sponsor: Sanity\n* **[03:40](#t=03:40)** What is Enhance?\n* [Enhance.dev](https://enhance.dev/)\n* **[06:17](#t=06:17)** Singe file components\n\n```\nexport default function HelloWorld({ html, state }) {\n  const { attrs } = state\n  const { greeting=\'Hello World\' } = attrs\n  return html`\n    <style scope=\"global\">\n      body {\n        color: #222;\n      }\n    </style>\n    <h1>${greeting}</h1>\n  `\n}\n```\n\n* [Astro](https://astro.build)\n* **[09:23](#t=09:23)** State and Props\n* **[14:01](#t=14:01)** CSS\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '364453bcb33e6eab499f40293ddb049b4a6289d1de275e3c4276e38a1870eb3d', 'wtf-is-enhance-framework', '/shows/515 - framework.md', '2023-10-16 20:07:53.050', '2023-10-27 15:58:10.463', 'HASTY'),
('syntax_podcast_show_00516', 516, 'Wes’ New Soundproof Office', '2022-09-28 12:00:00.557', 'https://traffic.libsyn.com/syntax/Syntax_-_516.mp3', '\nIn this episode of Syntax, Wes talks through all the gear, renovations, and upgrades he\'s made to his new home office. Lighting, soundproofing, desk, windows, and more!\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:38](#t=00:38)** Welcome\n* **[02:24](#t=02:24)** Scouting a house with an office\n* **[03:54](#t=03:54)** Why didn\'t you hire someone?\n* **[08:50](#t=08:50)** Goals for the office\n* **[10:30](#t=10:30)** Soundproofing\n* **[19:49](#t=19:49)** Decouple the ceiling\n* **[25:52](#t=25:52)** Sponsor: LogRocket\n* **[26:54](#t=26:54)** The door\n* **[33:23](#t=33:23)** Sponsor: Prismic\n* **[33:59](#t=33:59)** The desk\n* **[40:40](#t=40:40)** Cable management\n* **[47:12](#t=47:12)** Lighting\n* **[49:03](#t=49:03)** The room and windows\n* **[51:22](#t=51:22)** Flooring\n* **[55:12](#t=55:12)** Sponsor: Freshbooks\n* **[55:47](#t=55:47)** Things yet to be done\n* **[01:03:49](#t=01:03:49)** Costs\n* **[01:06:10](#t=01:06:10)** SIIIIICK ××× PIIIICKS ×××\n\n* [Desk Haus Apex Pro Max](https://desk.haus/products/apex-pro-max)\n\n* [Alien Tape](https://www.alientape.ca)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Pretend Podcast](https://pretendradio.org)\n* Wes: [Nano Tape](https://amzn.to/3SeAgP9)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '775c9b9eb72e6c5c118e61f5552b673d717dd842688ffb1eaabffea2c5a54b6e', 'wes-new-soundproof-office', '/shows/516 - Wes office.md', '2023-10-16 20:07:53.099', '2023-10-27 15:58:10.522', 'TASTY'),
('syntax_podcast_show_00517', 517, 'Supper Club × Open Sauced With bdougie', '2022-09-30 12:00:00.239', 'https://traffic.libsyn.com/syntax/Syntax_-_517.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with bdougie about his work on Open Sauced, thoughts on getting into open source development, and his live streaming set up.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## FireHydrant - Sponsor\n\nIncidents are hard. Managing them shouldn’t be. FireHydrant makes it easy for anyone in your organization to respond to incidents efficiently and consistently. Intuitive, guided workflows provide turn-by-turn navigation for incident response, while thoughtful prompts and powerful integrations capture all of your incident data to drive useful retros and actionable analytics.\n\nGet started at [Firehydrant.com/syntax](https://Firehydrant.com/syntax)\n\n## Storyblok - Sponsor\n\n[Storyblok](https://www.storyblok.com/?utm_source=syntaxfm&utm_medium=sponsor&utm_campaign=AWA_SPON_SFM_TRA&utm_content=syntaxfm-podcast) is a headless component-based CMS with a real-time visual editor. It offers the flexibility for developers to craft their perfect tech stack, but it also empowers content creators to make changes independently. The result is that every team has the freedom to quickly and easily create the ideal website with limitless extensibility. Other key features include robust Storyblok SDKs and APIs, powerful internationalization options, and an eCommerce-ready platform.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:52](#t=01:52)** Guest introduction\n* [OpenSauced.pizza](https://opensauced.pizza/)\n* [@Bdougieyo on TikTok](https://www.tiktok.com/@bdougieyo)\n* [bdougie on Twitch](https://www.twitch.tv/bdougieyo)\n* [Open Sauced on YouTube](https://www.youtube.com/c/OpenSauced)\n* [bdougie on YouTube](https://www.youtube.com/c/bdougie)\n* [Jamstack](https://jamstack.org)\n* [Netlify](https://www.netlify.com)\n* **[03:36](#t=03:36)** What was the inspiration for Open Sauced?\n* **[08:23](#t=08:23)** GitHub GraphQL API\n* **[13:22](#t=13:22)** What are your thoughts on GraphQL?\n* [GraphQL](https://www.graphql.com)\n* **[14:36](#t=14:36)** What is the T3 stack?\n* **[16:30](#t=16:30)** Sponsor: Hasura\n* **[17:53](#t=17:53)** What is the goal for Open Sauced?\n* [Open Sauced Beta for Hacktoberfest](https://beta.insights.opensauced.pizza)\n* **[20:08](#t=20:08)** What is your focus with live streaming?\n* [T3 Stack](https://github.com/topics/t3-stack)\n* [Vite](https://vitejs.dev)\n* [The Primeagan on Syntax Episode 508](https://syntax.fm/show/508/supper-club-the-primeagan-vim-streaming-rust-all-around-interesting-guy)\n* [Octoverse](https://octoverse.github.com)\n* [Hot Open Sauced Pizza](https://hot.opensauced.pizza)\n* **[21:39](#t=21:39)** What hardware and software do you live stream with?\n* [Rode Procaster](https://rode.com/en/microphones/broadcast/procaster)\n* [Wave XLR](https://www.elgato.com/en/wave-xlr)\n* [GoXLR](https://www.tc-helicon.com/series.html?category=R-TCHELICON-GOXLRSERIES)\n* [OBS](https://obsproject.com)\n* **[25:26](#t=25:26)** Should adults be on TikTok?\n* **[30:31](#t=30:31)** How do you build an algorithm?\n* **[32:44](#t=32:44)** Sponsor: Storyblok\n* **[34:01](#t=34:01)** Supper club questions\n* [Keychron K2](https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard)\n* [Warp](https://www.warp.dev)\n* [Ghostwriter from Replit](https://docs.replit.com/programming-ide/GhostWriter-FAQ#what-is-ghostwriter)\n* [A first look at GitHub Copilot](https://www.youtube.com/watch?v=XASH3z3TORo)\n* [Stable Diffusion](https://stablediffusionweb.com)\n* [Fig](https://fig.io)\n* **[43:17](#t=43:17)** Sponsor: FireHydrant\n* **[44:36](#t=44:36)** Interviews with open source maintainers\n* **[45:55](#t=45:55)** How should maintainers get paid?\n* [Patreon](http://patreon.com)\n* [GitHub Sponsors](https://github.com/sponsors)\n* [Neovim](https://neovim.io)\n* [Vim Adventures](https://vim-adventures.com)\n* [Lunar Vim](https://www.lunarvim.org)\n* **[47:47](#t=47:47)** SIIIIICK ××× PIIIICKS ×××\n* **[51:34](#t=51:34)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* bdougie: [Warp](https://www.warp.dev)\n\n## Shameless Plugs\n\n* [bdougie on Twitter](https://twitter.com/bdougieYO)\n* [saucedopen on Twitter](https://twitter.com/saucedopen)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a7333e55c2d8873aeaa02ec546a961a347ee8eea685064fbbe68b87cfbf116be', 'supper-club-open-sauced-with-bdougie', '/shows/517 - supper Brian.md', '2023-10-16 20:07:53.148', '2023-10-27 15:58:10.568', 'SUPPER'),
('syntax_podcast_show_00518', 518, 'How to Get Past the Blahs and Finish Your Project', '2022-10-03 12:00:00.454', 'https://traffic.libsyn.com/syntax/Syntax_-_518.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the ways they get unstuck when working on the last bit of a project to help push it over the finish line.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[02:05](#t=02:05)** Sponsor: Linode\n* **[02:59](#t=02:59)** Sponsor: LogRocket\n* **[03:48](#t=03:48)** The last 10 percent\n* **[05:25](#t=05:25)** Break those things into Tasks\n* **[08:11](#t=08:11)** Just do it\n* **[09:10](#t=09:10)** Rewards\n* **[11:25](#t=11:25)** Be ok with good enough\n* **[14:21](#t=14:21)** Keep the end in sight\n* **[15:00](#t=15:00)** Do it “Quick a minute”\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n\n', '4898b016248b99f5bd86e1e069f32b0e4330d19b5e01fd578c2345879fd2278e', 'how-to-get-past-the-blahs-and-finish-your-project', '/shows/518 - Blahs.md', '2023-10-16 20:07:53.357', '2023-10-27 15:58:10.706', 'HASTY'),
('syntax_podcast_show_00519', 519, 'Potluck - Using Emoji in Naming × Project Estimates × Goal Planning', '2022-10-05 12:00:00.073', 'https://traffic.libsyn.com/syntax/Syntax_-_519.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about whether you should use emoji in naming grid elements, how to estimate project times, responsive design tips, animating gradient backgrounds, and more.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:22](#t=01:22)** Shooting some pucks at the football game\n* **[04:06](#t=04:06)** Should we use emoji naming conventions for our grid template areas instead of just words?\n* [Screenshot of Grid question](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/52fbeacb-8136-4104-a30d-8fa120077ca5/C55498A0-7B31-45D2-A360-E0892104D61C.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220928%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220928T221409Z&X-Amz-Expires=86400&X-Amz-Signature=8cf327687e89871816b2b3dc9cdfd0cd2fd50b3c68aa6943c56f2ba97b63a1e9&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22C55498A0-7B31-45D2-A360-E0892104D61C.JPG.jpg%22&x-id=GetObject)\n* **[08:38](#t=08:38)** How do you estimate a reliable timeline for a project?\n* **[12:18](#t=12:18)** Do you think about sustainable web development?\n* **[16:24](#t=16:24)** What kind of tips and tricks around responsive design do you have?\n* **[18:22](#t=18:22)** Sponsor: Linode\n* **[18:55](#t=18:55)** How would you go about documenting your achievements throughout your career to reflect on during interviews and employee reviews?\n* **[23:33](#t=23:33)** How do you plan long term for projects or goals?\n* [Forever Jobless Goals worksheet](https://foreverjobless.com/fj-goals-worksheet.pdf)\n* **[28:22](#t=28:22)** Can you please make a fundamentals episode that only cares about clarifying the terms everyone assume to be well known to even beginner devs?\n* [22 Buzzwords Explained](https://syntax.fm/show/017/22-buzz-words-explained-mutations-pure-functions-serverless-hoisting-mvc-more)\n* **[31:01](#t=31:01)** Sponsor: LogRocket\n* **[32:20](#t=32:20)** How would one go about animating a gradient background based on mouse movement?\n* [JavaScript 30](https://javascript30.com)\n* **[38:13](#t=38:13)** Is there any way using the children API to render the close button and menu items in different locations in the menu component?\n* [@Luke_lafr come on the show!](https://twitter.com/luke_lafr)\n* **[42:04](#t=42:04)** Where should I begin with design systems?\n* **[48:10](#t=48:10)** Sponsor: Sanity\n* **[49:24](#t=49:24)** Is JSON always safe?\n* **[55:01](#t=55:01)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Thorn Razor](https://amzn.to/3dqRqdq), [Rockwell Blade Bank](https://amzn.to/3BvqnWb)\n* Wes: [Milwaukee 48-22-1902 Fastback II](https://amzn.to/3BSe73K)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses) / [Beginner JavaScript](https://beginnerjavascript.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '429988cd6fbef6bb65fc2fae06ee5514a7c808d1246afecda3ec05be60a34a58', 'potluck-using-emoji-in-naming-project-estimates-goal-planning', '/shows/519 - Potluck.md', '2023-10-16 20:07:53.417', '2023-10-27 15:58:10.756', 'TASTY'),
('syntax_podcast_show_00520', 520, 'Supper Club × ORMs with Nikolas Burk from Prisma', '2022-10-07 12:00:00.037', 'https://traffic.libsyn.com/syntax/Syntax_-_520.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Nikolas Burk from Prisma about the role an ORM plays in a tech stack, how Prisma has changed over the years, ways to query data in Prisma, and how migrations work with Prisma.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Storyblok - Sponsor\n\nStoryblok is a headless component-based CMS with a real-time visual editor. It offers the flexibility for developers to craft their perfect tech stack, but it also empowers content creators to make changes independently. The result is that every team has the freedom to quickly and easily create the ideal website with limitless extensibility. Other key features include robust Storyblok SDKs and APIs, powerful internationalization options, and an eCommerce-ready platform.\n\n## FireHydrant - Sponsor\n\nIncidents are hard. Managing them shouldn’t be. FireHydrant makes it easy for anyone in your organization to respond to incidents efficiently and consistently. Intuitive, guided workflows provide turn-by-turn navigation for incident response, while thoughtful prompts and powerful integrations capture all of your incident data to drive useful retros and actionable analytics.\n\nDid we mention that FireHydrant is free? Get started at [Firehydrant.com/syntax](https://firehydrant.com/syntax).\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* **[01:30](#t=01:30)** Guest intro\n* [@NikolasBurk on Twitter](https://twitter.com/nikolasburk)\n* **[04:56](#t=04:56)** How has Prisma evolved?\n* [Prisma](https://www.prisma.io)\n* [Keystone](https://keystonejs.com)\n* [GraphQL](https://www.graphql.com)\n* **[10:44](#t=10:44)** What was Prisma V1?\n* **[17:04](#t=17:04)** Is there any GraphQL specific functions in Prismic?\n* **[21:26](#t=21:26)** Sponsor: Hasura\n* **[22:26](#t=22:26)** What role does an ORM play in a tech stack?\n* **[29:54](#t=29:54)** What is Planetscale?\n* [Planetscale](https://planetscale.com)\n* [The T3 Stack](https://github.com/topics/t3-stack)\n* **[32:22](#t=32:22)** Where does TRPC fit?\n* [tRPC](https://trpc.io)\n* **[33:46](#t=33:46)** Sponsor: Storyblok\n* **[35:28](#t=35:28)** What is an ORM?\n* [Prisma VS Code plugin](https://marketplace.visualstudio.com/items?itemName=Prisma.prisma)\n* **[42:00](#t=42:00)** How do migrations work with Prisma?\n* **[45:58](#t=45:58)** Query your data with Prisma client\n* **[49:43](#t=49:43)** Have you looked into alternative JavaScript environments?\n* **[55:16](#t=55:16)** Sponsor: FireHydrant\n* **[57:05](#t=57:05)** Supper Club questions\n* **[58:50](#t=58:50)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Lichess](https://lichess.org/)\n\n## Shameless Plugs\n\n* [Prisma blog](https://www.prisma.io/blog/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '1848a497e436bfbf74cef50f41f48aecd5d0ea7b4eee11a05a499e0f9c9616e5', 'supper-club-orms-with-nikolas-burk-from-prisma', '/shows/520 - Supper with Nikolas Burk.md', '2023-10-16 20:07:53.460', '2023-10-27 15:58:10.808', 'SUPPER'),
('syntax_podcast_show_00521', 521, 'Syntactic Sugar, Declarative and First Class Citizens? What does that even mean?', '2022-10-10 12:00:00.711', 'https://traffic.libsyn.com/syntax/Syntax_-_521.mp3', '\nIn this Hasty Treat, Scott and Wes explain what the jargon you hear in JavaScript means.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax) \n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:06](#t=01:06)** Sponsor: Sentry\n* **[01:59](#t=01:59)** Sponsor: Freshbooks\n* **[02:27](#t=02:27)** What does that even mean?\n* **[02:55](#t=02:55)** Everything in JavaScript is an Object! \n* **[04:43](#t=04:43)** X is just Syntactic Sugar\n* **[09:00](#t=09:00)** Functions are first class citizens\n* **[10:04](#t=10:04)** Object Literals or Template Literals\n* **[11:12](#t=11:12)** Declarative vs Imperative\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n\n', 'dbd2a0d02670a81673706cf29508ccb641266d3c95a493c88ec634444c8cc1cb', 'syntactic-sugar-declarative-and-first-class-citizens-what-does-that-even-mean', '/shows/521 - hasty.md', '2023-10-16 20:07:53.576', '2023-10-27 15:58:10.899', 'HASTY'),
('syntax_podcast_show_00522', 522, 'Use The Platform!', '2022-10-12 12:00:00.048', 'https://traffic.libsyn.com/syntax/Syntax_-_522.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the benefits of sticking to the web platform that is available to you through APIs you may not know about.\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:15](#t=01:15)** Fogging the boats\n* **[04:25](#t=04:25)** Use the platform\n* **[06:32](#t=06:32)** URLSearchParams\n* **[10:04](#t=10:04)** Pushstate and History API\n* [Pushstate](https://developer.mozilla.org/en-US/docs/Web/API/History)\n* **[13:46](#t=13:46)** Internationalization API\n* [Internationalization API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)\n* [Syntax episode 153](https://syntax.fm/show/153/hasty-treat-new-intl-methods-are-straight-fire)\n* **[16:03](#t=16:03)** FormData API\n* [MDN Docs](https://developer.mozilla.org/en-US/)\n* [Clipboard API tutorial](https://leveluptutorials.com/posts/you-don-t-need-a-dependency-clipboard-api)\n* **[20:31](#t=20:31)** Sponsor: Prismic\n* **[21:23](#t=21:23)** All of the DOM API\n* **[24:12](#t=24:12)** Vanilla JS\n* **[26:06](#t=26:06)** Localstorage and IndexDB\n* **[29:18](#t=29:18)** Web Animations API\n* **[31:10](#t=31:10)** Sponsor: LogRocket\n* **[32:39](#t=32:39)** Endless other browser apis\n* **[38:22](#t=38:22)** Shadow DOM and Web Components\n* [Web Components for beginners](https://leveluptutorials.com/tutorials/web-components-for-beginners/what-are-web-components)\n* **[42:57](#t=42:57)** CSS variables\n* **[46:05](#t=46:05)** HTML\n* **[47:27](#t=47:27)** Sponsor: Sanity\n* **[49:19](#t=49:19)** More HTML\n* **[54:12](#t=54:12)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Cable sleeve](https://amzn.to/3UE3toy)\n* Wes: [Kindling splitter](https://www.princessauto.com/en/wall-mount-kindling-splitter-with-10-in-blade/product/PA0008667727)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n\n', 'c44728f57d109f14f915592aed4e6f348b27e337762fb2e844af6185087d4e4f', 'use-the-platform', '/shows/522 - tasty Use The Platform.md', '2023-10-16 20:07:53.609', '2023-10-27 15:58:10.950', 'TASTY'),
('syntax_podcast_show_00523', 523, 'Supper Club × Neovim, Lua, RPC and Twitch with TJ DeVries', '2022-10-14 12:00:00.604', 'https://traffic.libsyn.com/syntax/Syntax_-_523.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with TJ DeVries about his work on Neovim, programming in Lua, the benefits of RPC, live streaming your work day, and PDE.\n\n## FireHydrant - Sponsor\n\nIncidents are hard. Managing them shouldn’t be. FireHydrant makes it easy for anyone in your organization to respond to incidents efficiently and consistently. Intuitive, guided workflows provide turn-by-turn navigation for incident response, while thoughtful prompts and powerful integrations capture all of your incident data to drive useful retros and actionable analytics.\n\n## Hasura - Sponsor\n\nWith Hasura, you can get a fully managed, production-ready GraphQL API as a service to help you build modern apps faster. You can get started for free in 30 seconds, or if you want to try out the Standard tier for zero cost, use the code “TryHasura” at this link: [hasura.info](https://hasura.info/freetrial). We’ve also got an amazing selection of GraphQL tutorials at [hasura.io/learn](https://hasura.io/learn).\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [Gatsby.dev/Syntax](https://gatsby.dev/Syntax) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:13](#t=01:13)** Guest introduction\n* [Teej_dv on Twitter](https://twitter.com/teej_dv)\n* [TJ Devries](https://github.com/tjdevries/)\n* [Teej_DV on Twitch](https://www.twitch.tv/teej_dv)\n* [TJ on YouTube](https://www.youtube.com/c/TjDeVries)\n* [Telescope on GitHub](https://github.com/nvim-telescope/telescope.nvim)\n* [Neovim on GitHub](https://github.com/neovim/neovim)\n* [Syntax 508 with The Primeagan](https://syntax.fm/show/508/supper-club-the-primeagan-vim-streaming-rust-all-around-interesting-guy)\n* **[03:15](#t=03:15)** The difference between Vim and Neovim\n* **[06:14](#t=06:14)** Why did you choose to write in Lua?\n* [Lua](https://www.lua.org)\n* [Luajit](http://luajit.org/luajit.html)\n* **[13:26](#t=13:26)** What is adapative UI in Neovim?\n* **[17:38](#t=17:38)** Lunarvim and alternatives\n* [Fvim](https://github.com/yatli/fvim)\n* [LunarVim](https://www.lunarvim.org)\n* **[20:24](#t=20:24)** Personalized development environment PDE\n* [PDE](https://www.youtube.com/watch?v=QMVIJhC9Veg)\n* [Firenvim](https://github.com/glacambre/firenvim)\n* **[22:40](#t=22:40)** Sponsor: FireHydrant\n* **[23:21](#t=23:21)** Benefits of RPC\n* **[30:34](#t=30:34)** Is working on Neovim your job?\n* [Sponsor Neovim](https://github.com/sponsors/neovim)\n* [Sourcegraph](https://sourcegraph.com)\n* **[31:30](#t=31:30)** What is your approach to streaming?\n* **[34:11](#t=34:11)** Did you go to school for computer science?\n* **[39:12](#t=39:12)** Sponsor: Gatsby\n* **[39:46](#t=39:46)** Supper Club questions\n* [System76](https://system76.com)\n* [Pop](https://pop.system76.com)\n* [Dactyl Manuform Keyboard Kit](https://www.diykeyboards.com/keyboards/keyboard-kits/product/dactyl-manuform-kit)\n* [Jetbrains Mono](https://www.jetbrains.com/lp/mono/)\n* **[49:52](#t=49:52)** Sponsor: Hasura\n* **[50:47](#t=50:47)** SIIIIICK ××× PIIIICKS ×××\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e6cb7627df6d2c822cfa9e571c9d99cc1c5ecbe41b37427eaef293148f85c085', 'supper-club-neovim-lua-rpc-and-twitch-with-tj-devries', '/shows/523 - Supper.md', '2023-10-16 20:07:53.675', '2023-10-27 15:58:11.007', 'SUPPER'),
('syntax_podcast_show_00524', 524, 'Bookmarklets', '2022-10-17 12:00:00.227', 'https://traffic.libsyn.com/syntax/Syntax_-_524.mp3', '\nIn this Hasty Treat, Scott and Wes take Matt Busche\'s suggestion and talk all about bookmarklets and scripts to modify or manipulate web pages.\n\n## MagicBell - Sponsor\n\n[MagicBell](https://www.magicbell.com) is the the notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[02:02](#t=02:02)** What are bookmarklets?\n* [Matt Busche\'s fav bookmarklets Gist](https://gist.github.com/mrbusche/d197281d654b371a1fadfd9f4888358a)\n* [Bookmarklet Maker](https://caiorss.github.io/bookmarklet-maker/)\n* [CSS Tricks - Web Development Bookmarklets](https://css-tricks.com/web-development-bookmarklets/)\n* **[04:49](#t=04:49)** Using an Immediately invoked function expression\n* **[09:22](#t=09:22)** Greasemonkey\n* [Greasemonkey](https://www.greasespot.net)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '83b366f3404134a635e3d2830ef4b13534c19df72f6e9006b1bbb6b78786854f', 'bookmarklets', '/shows/524 - Hasty Bookmarklets.md', '2023-10-16 20:07:53.826', '2023-10-27 15:58:11.122', 'HASTY'),
('syntax_podcast_show_00525', 525, '2022 CSS Trends and Usage Web Almanac', '2022-10-19 12:00:00.437', 'https://traffic.libsyn.com/syntax/Syntax_-_525.mp3', '\nIn this episode of Syntax, Wes and Scott talk about some of the CSS Trends and Usage for 2022 as documented by the Web Almanac - and give some great cleaning tips along the way.\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[02:15](#t=02:15)** Cleaning Sick Pick\n* [Bar Keepers Friend](https://barkeepersfriend.com)\n* **[04:40](#t=04:40)** Web Almanac\n* [Web Almanac](https://almanac.httparchive.org/)\n* **[08:23](#t=08:23)** CSS stylesheets size grow\n* **[09:49](#t=09:49)** Popular CSS Class names\n* **[15:29](#t=15:29)** How many websites use !important?\n* **[18:11](#t=18:11)** Popular pseudo classes\n* **[20:27](#t=20:27)** Sponsor: Prismic\n* **[21:38](#t=21:38)** CSS Attribute Selectors\n* **[27:03](#t=27:03)** Most popular units\n* **[32:23](#t=32:23)** calc properties\n* **[33:13](#t=33:13)** Sponsor: LogRocket\n* **[35:15](#t=35:15)** Top operators when using calc\n* **[36:21](#t=36:21)** Custom Property Names\n* **[37:39](#t=37:39)** Property Value types\n* **[38:00](#t=38:00)** Functions\n* **[39:27](#t=39:27)** Color names\n* **[42:02](#t=42:02)** Format of color\n* **[43:50](#t=43:50)** Most popular gardient on the web\n* **[47:27](#t=47:27)** Sponsor: Freshbooks\n* **[47:57](#t=47:57)** We don\'t know the web\n* **[50:39](#t=50:39)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Dawn](https://amzn.to/3SStChK)\n* Wes: [Flat speaker wire](https://amzn.to/3CtIuO8)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4f7c077d96999317d045239db6f434e4dc216778dbcf61fcc3274e8a3882a2a7', '2022-css-trends-and-usage-web-almanac', '/shows/525 - HTTP Archive.md', '2023-10-16 20:07:53.859', '2023-10-27 15:58:11.176', 'TASTY'),
('syntax_podcast_show_00526', 526, 'Supper Club × tRPC With Alex KATT Johansson', '2022-10-21 12:00:00.648', 'https://traffic.libsyn.com/syntax/Syntax_-_526.mp3', '\nIn this supper club episode of Syntax, Scott talks with Alex Johansson about his work on tRPC, how it compares to other tools like GraphQL, and what\'s next for tRPC?\n\n## Polypane - Sponsor\n\nIf you want to build a great website or web app, there\'s a million things you need to take care of: responsive design, accessibility, SEO, Meta tags and page structure, to name just a few. Polypane is the browser for developers with tools that help with literally every part of modern web development, helping you save hours (and frustration!) with every project. It shows your site in multiple fully-synced viewports at once, Gives you advice on better accessibility and gives you insight into your performance and quality. Go to [polypane.app/syntax](https://polypane.app/syntax) to start a 14 day free trial and use SYNTAX20 for a 20% discount at checkout.\n\n## FireHydrant - Sponsor\n\nIncidents are hard. Managing them shouldn’t be. FireHydrant makes it easy for anyone in your organization to respond to incidents efficiently and consistently. Intuitive, guided workflows provide turn-by-turn navigation for incident response, while thoughtful prompts and powerful integrations capture all of your incident data to drive useful retros and actionable analytics.\n\n## Kontent by Kentico - Sponsor\n\nKontent by Kentico is a headless CMS that provides live editing experience to non-technical users and hands you the technical tools to build websites, mobile apps, voice assistants, or anything else where you need content. Use REST API or GraphQL and get your content via the global Fastly CDN. Designed to unify all your content and operations, in compliance with ISO27001 and SOC2Type2 certifications.[Spin up a new project today](kontent.ai/syntax) and discover Kontent.\n\n## Show Notes\n\n* **[00:37](#t=00:37)** Welcome\n* **[01:56](#t=01:56)** Guest introduction\n* [@Alexdotjs on Twitter](https://twitter.com/alexdotjs)\n* [Alex on GitHub](https://github.com/KATT)\n* [Katt.dev](https://katt.dev)\n* [tRPC.io](https://trpc.io)\n* **[02:47](#t=02:47)** What is tRPC?\n* **[06:56](#t=06:56)** How does type safety work?\n* **[10:38](#t=10:38)** Sponsor: Polypane\n* **[13:20](#t=13:20)** What is Zod?\n* **[17:39](#t=17:39)** How does tRPC relate to GraphQL?\n* **[23:47](#t=23:47)** Sponsor: FireHydrant\n* **[25:25](#t=25:25)** What about a data loader?\n* **[29:04](#t=29:04)** React or NextJS adapters\n* **[30:41](#t=30:41)** How does it feel when people start building off your project?\n* **[33:58](#t=33:58)** Sponsor: Kontent by Kentico\n* **[37:34](#t=37:34)** What\'s next for tRPC?\n* **[42:42](#t=42:42)** How is error handling done?\n* **[48:43](#t=48:43)** Supper Club questions\n* **[54:42](#t=54:42)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Kysely](https://github.com/koskimas/kysely)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c72716ff85746423f6166a87862fb6317d6d9d2a04992cd2607a5f6eeb43992f', 'supper-club-trpc-with-alex-katt-johansson', '/shows/526 - supper Alex.md', '2023-10-16 20:07:53.906', '2023-10-27 15:58:11.237', 'SUPPER'),
('syntax_podcast_show_00527', 527, 'Hydration & New Frameworks Like Qwik', '2022-10-24 12:00:00.935', 'https://traffic.libsyn.com/syntax/Syntax_-_527.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Qwik, a new framework designed for the edge. How are things like hydration, lazy loading, rendering, and optimization handled by Qwik?\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:18](#t=00:18)** Welcome\n* **[01:25](#t=01:25)** Sponsor: Sentry\n* **[02:47](#t=02:47)** Sponsor: Sanity\n* **[04:50](#t=04:50)** What is Qwik?\n* [Qwik](https://qwik.builder.io)\n* **[08:05](#t=08:05)** What is SSR?\n* **[09:25](#t=09:25)** Working with hydration\n* **[15:31](#t=15:31)** Lazy loading, reduced rendering, and Qwik optimizer\n* **[17:30](#t=17:30)** Edge first\n* **[18:55](#t=18:55)** Data loading or data actions issues\n* **[20:49](#t=20:49)** Qwik City\n* [Qwik City](https://qwik.builder.io/qwikcity/overview/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '77263f1ccebda5672c2ce53144cc06f47e9902c74422e5d1019cda5dfda1b825', 'hydration-and-new-frameworks-like-qwik', '/shows/527 - Hasty Qwik.md', '2023-10-16 20:07:54.058', '2023-10-27 15:58:11.369', 'HASTY'),
('syntax_podcast_show_00528', 528, 'Spooky Web Dev Stories 2022', '2022-10-26 12:00:00.184', 'https://traffic.libsyn.com/syntax/Syntax_-_528.mp3', '\nIn this episode of Syntax, Wes and Scott tell your spookiest scary web dev stories including spooky render times, push notification hell, dark Friday, and more!\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:15](#t=00:15)** Welcome\n* **[03:00](#t=03:00)** Spooky Render Times\n* [React Virtualized](https://www.npmjs.com/package/react-virtualized)\n* [React Window](https://www.npmjs.com/package/react-window)\n* **[09:19](#t=09:19)** Push Notification Hell\n* **[13:11](#t=13:11)** Dark Friday\n* **[14:19](#t=14:19)** Tiny Ints with Big Problems\n* **[16:57](#t=16:57)** A/B Testing\n* **[18:47](#t=18:47)** Confirm Purchase button mistake\n* **[21:21](#t=21:21)** Sponsor: Sentry\n* **[22:34](#t=22:34)** Dike Leak\n* **[25:14](#t=25:14)** A Steep Grade\n* **[32:41](#t=32:41)** Falkland Islands mixup\n* **[33:40](#t=33:40)** Conference mixup\n* **[36:34](#t=36:34)** Sponsor: Prismic\n* **[37:58](#t=37:58)** Doctor Who Ipsum\n* **[43:55](#t=43:55)** Marketplace payouts\n* **[46:38](#t=46:38)** Sponsor: Freshbooks\n* **[47:42](#t=47:42)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [PopSocket Wallet](https://amzn.to/3SXyimF)\n* Wes: [Water flosser](https://amzn.to/3T10epT)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '72c2e1bdb4a4795e4c9d0df26e4228dc5d7107c38e0e335f41e3e3f7ec8cff05', 'spooky-web-dev-stories-2022', '/shows/528 - Tasty.md', '2023-10-16 20:07:54.097', '2023-10-27 15:58:11.421', 'TASTY'),
('syntax_podcast_show_00529', 529, 'Supper Club × GraphQL as an Aggregation Layer with Filipe Ferreira of Sky TV', '2022-10-28 12:00:00.729', 'https://traffic.libsyn.com/syntax/Syntax_-_529.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Filipe Ferreira of Sky TV about the tech stack used to deliver streaming TV content, build Apple TV apps, host media, and more.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [Gatsby.dev/Syntax](https://gatsby.dev/Syntax) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Retool - Sponsor\n\nRetool is the fast way to build internal tools. Visually design apps that interface with any database or API. Switch to code nearly anywhere to customize how your apps look and work. With Retool, you ship more apps and move your business forward—all in less time.\n\n[retool.com/syntax](http://retool.com/syntax)\n\n## Storyblok - Sponsor\n\n[Storyblok](https://www.storyblok.com/?utm_source=syntaxfm&utm_medium=sponsor&utm_campaign=AWA_SPON_SFM_TRA&utm_content=syntaxfm-podcast) is a headless component-based CMS with a real-time visual editor. It offers the flexibility for developers to craft their perfect tech stack, but it also empowers content creators to make changes independently. The result is that every team has the freedom to quickly and easily create the ideal website with limitless extensibility. Other key features include robust Storyblok SDKs and APIs, powerful internationalization options, and an eCommerce-ready platform.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[02:15](#t=02:15)** Guest introduction\n* [fbritoferreira.com](https://fbritoferreira.com)\n* [@fbritoferreira](https://twitter.com/fbritoferreira)\n* [@SkyShowtime](https://mobile.twitter.com/SkyShowtime)\n* [Peacock](https://mobile.twitter.com/peacock)\n* **[04:13](#t=04:13)** What do the systems look like inside of Sky?\n* [GraphQL](https://www.graphql.com)\n* [Redis](https://redis.io)\n* [Apollo GraphQL](https://www.apollographql.com)\n* **[06:26](#t=06:26)** Do you use federation?\n* **[07:50](#t=07:50)** How do you handle caching?\n* **[11:24](#t=11:24)** What\'s the tech stack for the front end?\n* **[13:30](#t=13:30)** Do you cache on client side?\n* **[15:27](#t=15:27)** How long has Sky been serverless?\n* **[16:55](#t=16:55)** Sponsor: Gatsby\n* **[18:05](#t=18:05)** How was Sky\'s Apple TV app built?\n* **[21:17](#t=21:17)** Where did you host media?\n* [AWS Streaming](https://aws.amazon.com/media/direct-to-consumer-d2c-streaming/)\n* [Mux](https://www.mux.com)\n* **[24:37](#t=24:37)** Supporting live events\n* **[28:03](#t=28:03)** Sponsor: Storyblok\n* **[30:05](#t=30:05)** What language are you writing the GraphQL layer?\n* [The Guild](https://www.the-guild.dev)\n* **[32:22](#t=32:22)** How do you define your types?\n* **[36:40](#t=36:40)** Supper Club questions\n* [Apple Magic Keyboard with Touch ID](https://www.apple.com/shop/product/MK293LL/A/magic-keyboard-with-touch-id-for-mac-models-with-apple-silicon-us-english?fnode=882ee89d5200bd42d9dfdb18ea688d2284453eef35a10d6d1154de2d917c59e1edbd4796140e0decd50ffa8f8c4257d359a9c5370dd91b4fd7ff1ca816e69c2101a97e0e452c1844b6387e49a9dd84f9fd4a36eb78f0f95e050323fa7fd48182)\n* [Magic Keyboard with Touch ID and Numeric Keypad](https://www.apple.com/shop/product/MMMR3LL/A/magic-keyboard-with-touch-id-and-numeric-keypad-for-mac-models-with-apple-silicon-us-english-black-keys?fnode=4c07059c2c01bc9ba2a54f0652c4be0b2d1ba2671c434806d779030bf9e5528ae9e36e718a6ebb1887cb752fbad06477606b200b4eefc2a66c894a24cc214c6c36485aae46d6632518a80da22efd54cbc2ed617c7fa8c6737af423fe6f3208d05f33e8df5aa6fbf8da0267b2be277c39)\n* **[44:28](#t=44:28)** Sponsor: ReTool\n* **[45:22](#t=45:22)** AppWrite\n* [AppWrite](https://appwrite.io)\n* **[48:42](#t=48:42)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Anker 733 Power Bank (GaNPrime PowerCore 65W)](https://www.anker.com/products/a1651?ref=ganprime_top_itemlist&variant=41974350250134)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5eea16cd7d5f4031269ea817ef4f17a44551b1cb9c987ffdc7586fa1e1aab4de', 'supper-club-graphql-as-an-aggregation-layer-with-filipe-ferreira-of-sky-tv', '/shows/529 - Supper.md', '2023-10-16 20:07:54.153', '2023-10-27 15:58:11.469', 'SUPPER'),
('syntax_podcast_show_00530', 530, 'Explained - Buzz Words and Concepts', '2022-10-31 12:00:00.415', 'https://traffic.libsyn.com/syntax/Syntax_-_530.mp3', '\nIn this Hasty Treat, Scott and Wes explain more buzz words like schema, promises, async, sync, dom vs shadow dom vs page HTML, props, and more.\n\n## Appwrite - Sponsor\n\nAppwrite is a self-hosted backend-as-a-service platform that provides developers with all the core APIs required to build any application. Get free cloud credits by signing up for early access to the [Appwrite Cloud launch](https://appwrite.io/cloud).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Welcome\n* **[01:17](#t=01:17)** Sponsor: Appwrite\n* **[03:16](#t=03:16)** Sponsor: Sanity\n* **[04:08](#t=04:08)** Schema\n* [Zod](https://zod.dev)\n* [Apollo GraphQL](https://www.apollographql.com)\n* **[07:25](#t=07:25)** Promises\n* **[08:47](#t=08:47)** Async, Sync, Parallel and Concurrent\n* **[13:15](#t=13:15)** Dom vs Shadow Dom VS Page HTML\n* **[16:21](#t=16:21)** Methods vs Functions\n* **[18:18](#t=18:18)** Props\n* **[20:27](#t=20:27)** HTTP Requests are Stateless\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f18e1c6de8d873f8c19658d915929767cc106cb46aaf20f7188346f3aa1ed246', 'explained-buzz-words-and-concepts', '/shows/530 - Hasty.md', '2023-10-16 20:07:54.253', '2023-10-27 15:58:11.567', 'HASTY'),
('syntax_podcast_show_00531', 531, 'Spooky Web Dev Stories Part 2', '2022-11-02 12:00:00.415', 'https://traffic.libsyn.com/syntax/Syntax_-_531.mp3', '\nIn this episode of Syntax, Wes and Scott tell more of your scary web dev stories including lorem ipsum mistakes, naming something Skynet, blackouts, Twitch streaming, and more!\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:12](#t=00:12)** Weeeeeelcome\n* **[02:11](#t=02:11)** Slipsum mistake\n* [Slipsum](http://slipsum.com/)\n* **[03:40](#t=03:40)** Brotli scaling explosion\n* [When JavaScript Bytes](https://www.youtube.com/watch?v=JvJ0v5OohNg&t=766s)\n* **[05:14](#t=05:14)** Email loop\n* [Breaking Production with 56,000 emails](https://davidtruxall.com/breaking-production/)\n* **[05:36](#t=05:36)** DevOops Magento store\n* [Example.com](http://example.com)\n* **[08:26](#t=08:26)** Scary animal stories\n* **[11:09](#t=11:09)** Naming something Skynet\n* **[11:58](#t=11:58)** 2003 Blackout\n* **[13:16](#t=13:16)** ExtJS error binding\n* **[17:09](#t=17:09)** Sponsor: Linode\n* **[17:55](#t=17:55)** Lead gen forms and captcha\n* [Issue Renaming upper-case \'Sirupsen\' to \'sirupsen\'](https://github.com/sirupsen/logrus/pull/384)\n* [Follow up](https://github.com/sirupsen/logrus/issues/451)\n* **[19:51](#t=19:51)** Scarlet Letter\n* **[21:51](#t=21:51)** MongoDB achievement story\n* [Adam Coster](https://twitter.com/costerad)\n* **[26:14](#t=26:14)** Sponsor: Auth0\n* **[28:11](#t=28:11)** Drupal and mysql database fun\n* **[30:10](#t=30:10)** Nervous Twitch\n* **[34:03](#t=34:03)** FTP access story\n* **[37:24](#t=37:24)** Sponsor: LogRocket\n* **[38:53](#t=38:53)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Ear foam tips](https://amzn.to/3CTYyc8)\n* Wes: [Stepped drill bit](https://amzn.to/3CVndNG) / [Aliexpress link](https://www.aliexpress.com/item/1005002784042553.html?spm=a2g0o.productlist.main.17.14cb5924qXSj0Z&algo_pvid=c4935816-ccfa-456f-9b92-27d3baea64c4&algo_exp_id=c4935816-ccfa-456f-9b92-27d3baea64c4-8&pdp_ext_f=%7B%22sku_id%22%3A%2212000022168731182%22%7D&pdp_npi=2%40dis%21CAD%219.81%216.87%21%21%21%21%21%402102111816656825317085834d0747%2112000022168731182%21sea&curPageLogUid=u2YOvotleaFP)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ff8b414b1c4a40d7de21720a2c76e9c42d92052e7da88d450a50f3354b6a5490', 'spooky-web-dev-stories-part-2', '/shows/531 - Tasty Scary part 2.md', '2023-10-16 20:07:54.288', '2023-10-27 15:58:11.622', 'TASTY'),
('syntax_podcast_show_00532', 532, 'Supper Club × Coding with ADHD with Dr. Courtney Tolinski', '2022-11-04 12:00:00.585', 'https://traffic.libsyn.com/syntax/Syntax_-_532.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Dr. Courtney Tolinski about ADHD, how to tell if you have ADHD, issues related to ADHD for computer workers, anxiety vs ADHD, and more.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Appwrite - Sponsor\n\nAppwrite is a self-hosted backend-as-a-service platform that provides developers with all the core APIs required to build any application. Get free cloud credits by [signing up for early access to the Appwrite Cloud launch](https://appwrite.io/cloud)!\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[02:11](#t=02:11)** Guest introduction\n* **[03:00](#t=03:00)** Do I have ADHD?\n* [CHADD](https://chadd.org)\n* **[09:12](#t=09:12)** What is the threshold for diagnosis?\n* **[11:43](#t=11:43)** Are there other issues for computer workers?\n* [Arc Browser](https://arc.net)\n* [Syntax 513 - The Productivity Episode](https://syntax.fm/show/513/the-productivity-episode)\n* **[15:27](#t=15:27)** Avoiding difficult or boring things\n* **[17:04](#t=17:04)** Structuring your day\n* **[18:41](#t=18:41)** Sponsor: LogRocket\n* **[20:12](#t=20:12)** Any tips for working in a distracting environment?\n* [MyNoise.net](https://mynoise.net)\n* [Headspace](https://www.headspace.com)\n* **[23:40](#t=23:40)** Can I learn to deal with things?\n* **[27:28](#t=27:28)** How can I support a team member with ADHD?\n* [Missive](https://missiveapp.com)\n* **[31:51](#t=31:51)** Sponsor: Appwrite\n* **[32:47](#t=32:47)** Any lifestyle changes to help with ADHD?\n* **[38:26](#t=38:26)** How do you find medical help?\n* **[42:39](#t=42:39)** How do you tell the difference between discipline vs ADHD?\n* **[47:05](#t=47:05)** Anxiety vs ADHD?\n* **[48:36](#t=48:36)** Dyslexia and ADHD\n* **[53:31](#t=53:31)** Inheritable or genetic\n* **[54:50](#t=54:50)** Don\'t rely on self-diagnoses\n* [Psychology Today](https://www.psychologytoday.com/ca)\n* **[55:48](#t=55:48)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Taking Charge of Adult ADHD](https://amzn.to/3eB7lq3)\n* [Bird feeder](https://amzn.to/3ez95An)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2cb40ba9a78a7a98473a4ea9faf386ae699c60c1d8bc6fca9b0ee5a8d330ab12', 'supper-club-coding-with-adhd-with-dr-courtney-tolinski', '/shows/532 - Supper club.md', '2023-10-16 20:07:54.326', '2023-10-27 15:58:11.700', 'SUPPER'),
('syntax_podcast_show_00533', 533, 'Zod Schema Validation and Type Generation', '2022-11-07 12:00:00.794', 'https://traffic.libsyn.com/syntax/Syntax_-_533.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Zod, a TypeScript-first schema validation with static type inference. How are we using Zod? What do we like? And our thoughts on the Zod ecosystem.\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:48](#t=01:48)** Sponsor: LogRocket\n* **[02:54](#t=02:54)** Sponsor: Linode\n* **[04:07](#t=04:07)** Minecraft thoughts\n* [Minecraft](https://www.minecraft.net)\n* **[06:25](#t=06:25)** Scratch\n* [Scratch](https://scratch.mit.edu)\n* **[07:19](#t=07:19)** What is Zod?\n* [Zod](https://zod.dev)\n* [Zod comparison](https://zod.dev/?id=comparison)\n* **[10:05](#t=10:05)** Features of Zod\n* **[13:24](#t=13:24)** How we\'re using Zod\n* **[14:40](#t=14:40)** How Zod works with MongoDB\n* **[15:51](#t=15:51)** 3rd party plugins\n* **[19:35](#t=19:35)** Zod ecosystem\n* [Zod Ecosystem](https://github.com/colinhacks/zod#ecosystem)\n* **[22:22](#t=22:22)** Asynchronous validation\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'd8c39880efd7fd47ccbfdf5b669c8d74e5ca1dc4f7b3691fc2e8e9cb66a1ce17', 'zod-schema-validation-and-type-generation', '/shows/533 - Zod.md', '2023-10-16 20:07:54.539', '2023-10-27 15:58:11.851', 'HASTY'),
('syntax_podcast_show_00534', 534, 'Potluck × Meeting IRL × SSG vs SSR × Domain Privacy', '2022-11-09 18:59:41.201', 'https://traffic.libsyn.com/syntax/Syntax_-_534.mp3', '\nIn this Potluck episode of Syntax, Wes and Scott answer your questions about meeting IRL, bookmarks, SSG vs SSR, domain privacy, deploying monorepos, and more.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:08](#t=00:08)** Welcome\n* **[01:20](#t=01:20)** Weather updates\n* **[02:21](#t=02:21)** How often have you gotten together in real life?\n* [Jamstack Conf](https://jamstack.org/conf/)\n* [Reactathon](https://www.reactathon.com)\n* **[05:33](#t=05:33)** What are people using to bookmark sites?\n* [Arc Browser](https://arc.net)\n* **[09:03](#t=09:03)** When not to use Static Site Generation (SSG), and when to use Server-side Rendering (SSR)?\n* [Svelte Kit](https://kit.svelte.dev)\n* **[13:53](#t=13:53)** How do you do correct error handling to catch everything?\n* [Sentry.io](https://sentry.io)\n* **[21:13](#t=21:13)** Sponsor: Sentry\n* **[22:50](#t=22:50)** Is there any benefit to using getters and setters in classes set them over plain methods?\n* **[27:47](#t=27:47)** Will there ever be a js framework that can SSR on a non-JS backend?\n* [Render](https://render.com)\n* [pnpm](https://pnpm.io)\n* **[32:40](#t=32:40)** Have either of you thought about learning and teaching Python or Django?\n* **[34:56](#t=34:56)** What is your opinion on purchasing \"Domain Privacy\" with each domain?\n* **[37:49](#t=37:49)** Sponsor: Sanity\n* **[38:44](#t=38:44)** Domain privacy continued\n* **[39:22](#t=39:22)** How you deploy monorepo packages?\n* [Tanstack](https://tanstack.com)\n* [Vite](https://vitejs.dev)\n* **[43:48](#t=43:48)** As a member of a non margin group should I avoid applying for jobs when they say they welcome applicants who are of a marginalized group to support diversity?\n* **[46:12](#t=46:12)** When would you, if ever, choose good-old React over something like Next JS?\n* **[53:24](#t=53:24)** Sponsor: Freshbooks\n* **[54:16](#t=54:16)** Is it preferred to import via absolute reference or relative reference?\n* **[00:23](#t=00:23)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Air Compressor](https://amzn.to/3TxLUFx)\n* Wes: [Blue Flush Cutter Mini Diagonal Cutting Pliers Side Cutter Nippers Wire Cutter](https://amzn.to/3VVnXK0)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/tutorials/keystone-js/introduction)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'fd9cc299d50dc8b0c960d1ee24d5e2ee53a036397c9ba4a26f69b5c9093e8994', 'potluck-meeting-irl-ssg-vs-ssr-domain-privacy', '/shows/534 - Potluck.md', '2023-10-16 20:07:54.581', '2023-10-27 15:58:11.900', 'TASTY'),
('syntax_podcast_show_00535', 535, 'Supper Club × Open Table LIVE SHOW', '2022-11-11 12:00:00.919', 'https://traffic.libsyn.com/syntax/Syntax_-_535.mp3', '\nIn this supper club episode of Syntax, Wes and Scott recorded a live open table episode with guests calling in to talk about Wasm, building Riverside.fm, home networking, getting a job at Microsoft, Svelte and Sveltekit, htmx, and more!\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Appwrite - Sponsor\n\nAppwrite is a self-hosted backend-as-a-service platform that provides developers with all the core APIs required to build any application. Get free cloud credits by [signing up for early access to the Appwrite Cloud launch](https://appwrite.io/cloud)!\n\n## Show Notes\n\n* **[00:30](#t=00:30)** Welcome\n* **[01:49](#t=01:49)** Safari aspect ratio bug\n* **[04:17](#t=04:17)** Thoughts on Vercel announcements?\n* [NextJS Conf](https://nextjs.org/conf)\n* **[10:07](#t=10:07)** Gideon Riverside CTO\n* [Riverside.fm Careers](https://riverside.fm/careers)\n* **[14:44](#t=14:44)** Do JS devs need to branch out?\n* **[16:52](#t=16:52)** Wasm\n* [Web Assembly (WASM)](https://webassembly.org)\n* [Rustlings](https://github.com/rust-lang/rustlings)\n* **[19:46](#t=19:46)** Sponsor: Auth0\n* **[21:03](#t=21:03)** Which company will Vercel aquire next?\n* [Guillermo Rauch](https://twitter.com/rauchg)\n* [Akamai Acquires Linode](https://www.akamai.com/newsroom/press-release/akamai-to-acquire-linode)\n* **[27:12](#t=27:12)** Svelte Kit and Vercel\n* **[30:20](#t=30:20)** Why don\'t you terminate your own ethernet cables?\n* **[30:58](#t=30:58)** How does Fly.io compare to Vercel?\n* [Fly.io](https://fly.io)\n* **[31:36](#t=31:36)** Did Wes learn Vue?\n* **[32:10](#t=32:10)** Brad jumping on the Remix train\n* [Remix](https://remix.run)\n* **[34:18](#t=34:18)** Layout shift caused by images in Markdown\n* **[38:30](#t=38:30)** Maintaining home networking\n* [Ubiquiti](https://www.ui.com)\n* **[44:44](#t=44:44)** Taking a course lead to a job with Microsoft\n* [Soumya\'s YouTube - Geekysrm](https://www.youtube.com/geekysrm) / [website]( https://soumya.dev) / [Twitter](https://twitter.com/geekysrm)\n* **[47:38](#t=47:38)** Sponsor: Appwrite\n* **[48:39](#t=48:39)** Are you still using your Synology NAS?\n* [Synology](https://www.synology.com/)\n* **[53:53](#t=53:53)** Is Svelte ready for smaller team projects?\n* [Svelte Kit](https://kit.svelte.dev)\n* [Wyze](https://www.wyze.com)\n* **[56:03](#t=56:03)** HTMX\n* [htmx](https://htmx.org)\n* [Alpine.js](https://alpinejs.dev)\n* **[01:49](#t=01:49)** Docker Wasm preview\n* [Introducing the Docker+Wasm Technical Preview](https://www.docker.com/blog/docker-wasm-technical-preview/)\n* [WebAssembly System Interface](https://wasi.dev)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c3bf7b9f5f54c2c849a7ce8a173c1b976bde6795f3af737c89798f254b683131', 'supper-club-open-table-live-show', '/shows/535 - Supper club.md', '2023-10-16 20:07:54.623', '2023-10-27 15:58:11.958', 'SUPPER'),
('syntax_podcast_show_00536', 536, 'Short Form Content with Tiktok, Reels, Shorts, Tweets', '2022-11-14 12:00:00.409', 'https://traffic.libsyn.com/syntax/Syntax_-_536.mp3', '\nIn this Hasty Treat, Scott and Wes talk about creating short form content for TikTok, Reels, Shorts, and tweets. What are some of the benefits and limitations of creating for vertical video, and what tools are they using to create videos.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:39](#t=01:39)** Sponsor: Sentry\n* **[02:40](#t=02:40)** Sponsor: Freshbooks\n* **[04:05](#t=04:05)** Short form content intro\n* [WesBos.com/tips](https://wesbos.com/tips)\n* [Wes on TikTok](https://www.tiktok.com/@wesbos)\n* [LevelUp Tutorials on TikTok](https://www.tiktok.com/@leveluptuts)\n* [Scott Stolinski on TikTok](https://www.tiktok.com/@stolinski)\n* **[07:16](#t=07:16)** The good and the bad of short form content\n* **[17:13](#t=17:13)** Repurposing content\n* **[18:36](#t=18:36)** Content that works\n* **[21:12](#t=21:12)** Tips for making short form content\n* **[24:19](#t=24:19)** Limitations of short form content\n* **[31:49](#t=31:49)** Tools for editing\n* [Screenflow](https://www.telestream.net/screenflow/overview.htm)\n* [Descript](https://www.descript.com)\n* [Detail.co](https://detail.co)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '63dba48baf40802e7afe67f1c75b32b70b2aeed8ac4dd450115f9f0e5b7f29f9', 'short-form-content-with-tiktok-reels-shorts-tweets', '/shows/536 - Hasty Short video.md', '2023-10-16 20:07:54.655', '2023-10-27 15:58:12.016', 'HASTY'),
('syntax_podcast_show_00537', 537, 'CSS Trends Almanac for 2022 Part 2', '2022-11-16 12:00:00.985', 'https://traffic.libsyn.com/syntax/Syntax_-_537_v2.mp3', '\nIn this episode of Syntax, it\'s part 2 of Wes and Scott\'s journey through the CSS Trends Almanac for 2022 talking through the rest of the popular CSS properties on the web.\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:06](#t=00:06)** Welcome\n* [Syntax 525 - 2022 CSS Trends and Usage Web Almanac Part 1](https://syntax.fm/show/525/2022-css-trends-and-usage-web-almanac)\n* **[01:22](#t=01:22)** Smart home updates\n* **[04:05](#t=04:05)** Box sizing: border box\n* **[06:57](#t=06:57)** CSS Columns\n* **[09:20](#t=09:20)** Aspect Ratio\n* [Can I Use CSS Properties Rotate](https://caniuse.com/mdn-css_properties_rotate)\n* **[09:53](#t=09:53)** Transitions and animations\n* **[13:36](#t=13:36)** Transition time\n* **[17:05](#t=17:05)** Steps as a timing function\n* **[19:01](#t=19:01)** Sponsor: Prismic\n* **[19:43](#t=19:43)** Blend modes\n* **[23:57](#t=23:57)** Responsive web design\n* **[26:31](#t=26:31)** Prefers Color Scheme\n* **[27:48](#t=27:48)** Popular breakpoints\n* **[30:57](#t=30:57)** Sponsor: LogRocket\n* **[32:06](#t=32:06)** Feature queries and @ supports\n* **[34:59](#t=34:59)** Logical and physical properties\n* **[37:59](#t=37:59)** css-in-js\n* [Sam Magura - Why We\'re Breaking Up with CSS-in-JS](https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b)\n* [Brad Frost - Why We’re Breaking Up with CSS in JS](https://bradfrost.com/blog/link/why-were-breaking-up-with-css-in-js/)\n* **[42:28](#t=42:28)** Sass\n* **[43:20](#t=43:20)** Print styles\n* **[45:38](#t=45:38)** Sponsor: Sanity\n* **[46:38](#t=46:38)** Longhand properities\n* **[48:21](#t=48:21)** Non-existant properties\n* **[52:06](#t=52:06)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Front Bumper Drillless Plate Holder](https://amzn.to/3zwGhj6)\n* Wes: [1U Server Rack](https://amzn.to/3h0xvmT)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '420f7ee69d8bed2d07834123ad138b9692bbaa9c4614d75bdc7cca26185a77fe', 'css-trends-almanac-for-2022-part-2', '/shows/537 - Hasty CSS.md', '2023-10-16 20:07:54.686', '2023-10-27 15:58:12.067', 'TASTY'),
('syntax_podcast_show_00538', 538, 'Supper Club × Ryan Dahl and Deno', '2022-11-18 12:00:00.611', 'https://traffic.libsyn.com/syntax/Syntax_-_538_v2.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Ryan Dahl about Deno. Why was Deno created? What is Deno written in? How is Deno so much faster? And what\'s the future of Deno?\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [Gatsby.dev/Syntax](https://gatsby.dev/Syntax) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* [Tinyclouds.org](https://tinyclouds.org)\n* [Ry on GitHub](https://github.com/ry)\n* [Deno](https://deno.land)\n* [Deno Discord](https://discord.com/invite/deno)\n* **[01:18](#t=01:18)** The introduction of Node\n* **[02:51](#t=02:51)** Why are you still betting on JavaScript for the web?\n* **[05:34](#t=05:34)** Why did you make Deno?\n* **[09:04](#t=09:04)** How does TypeScript fit into the landscape?\n* **[11:40](#t=11:40)** How is Deno so much faster?\n* **[13:28](#t=13:28)** Sponsor: Sanity\n* **[14:17](#t=14:17)** What is Deno written in?\n* **[15:56](#t=15:56)** Should developers be learning Rust?\n* **[18:27](#t=18:27)** Will libraries that work on npm eventually work in Deno?\n* **[21:52](#t=21:52)** Are we going to use Node API\'s or web spec?\n* **[24:31](#t=24:31)** Sponsor: Sentry\n* **[25:31](#t=25:31)** What is tooling like for Deno?\n* [WinterCG](https://wintercg.org/)\n* [Deno VS Code Extension](https://marketplace.visualstudio.com/items?itemName=denoland.vscode-deno)\n* **[29:27](#t=29:27)** What is Deno deploy?\n* [Deno Deploy](https://deno.com/deploy)\n* **[34:01](#t=34:01)** Deno\'s framework Fresh\n* **[38:56](#t=38:56)** Client side vs server side rendering\n* **[41:27](#t=41:27)** Sponsor: Gatsby\n* **[42:28](#t=42:28)** What\'s the future of Deno?\n* **[43:39](#t=43:39)** Supper club questions\n* **[53:30](#t=53:30)** SIIIIICK ××× PIIIICKS ×××\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f80eb1db31372a38cf3414d51e7c43e77d8aab32fae66a3092058ce7a1dc466e', 'supper-club-ryan-dahl-and-deno', '/shows/538 - Supper Deno.md', '2023-10-16 20:07:54.720', '2023-10-27 15:58:12.125', 'SUPPER'),
('syntax_podcast_show_00539', 539, 'React use() hook and Async Server Components Proposal', '2022-11-21 12:00:00.626', 'https://traffic.libsyn.com/syntax/Syntax_-_539.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the new proposal for React, what the basics of it are, why it\'s being proposed, and some benefits and issues it brings up.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:13](#t=00:13)** Welcome\n* **[01:39](#t=01:39)** Sponsor: Sentry\n* **[02:41](#t=02:41)** Auth0\n* **[03:57](#t=03:57)** A bit more auth\n* **[05:24](#t=05:24)** New RFC\n* [RFC: First class support for promises and async/await](https://github.com/reactjs/rfcs/pull/229)\n* **[08:30](#t=08:30)** What are the basics of this proposal?\n* **[10:12](#t=10:12)** Scott gets a little Svelte-y\n* **[11:44](#t=11:44)** Why is this being proposed?\n* **[17:14](#t=17:14)** Infinite loop possibility\n* **[18:44](#t=18:44)** Why is Svelte API better in this use case?\n* [Tanstack](https://tanstack.com)\n* [Smooshgate](https://developer.chrome.com/blog/smooshgate/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4b73cb334fed2e7164b3c569a2bec8829a0c1a4c3a8f2eff67147f3cbe824853', 'react-use-hook-and-async-server-components-proposal', '/shows/539 - Hasty.md', '2023-10-16 20:07:54.814', '2023-10-27 15:58:12.224', 'HASTY'),
('syntax_podcast_show_00540', 540, 'Responsive Design Techniques', '2022-11-23 12:00:00.589', 'https://traffic.libsyn.com/syntax/Syntax_-_540.mp3', '\nIn this episode of Syntax, Wes and Scott talk through some modern responsive design techniques that you may not have heard of, or haven\'t had a chance to use yet.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:47](#t=00:47)** Clean Talk\n* **[03:55](#t=03:55)** The menu of responsive design\n* [Syntax 154 with Sara Soueidan](https://syntax.fm/show/154/svgs-with-sara-soueidan)\n* **[06:52](#t=06:52)** Responsive design basics\n* **[11:54](#t=11:54)** What should you build for first in 2022?\n* **[16:15](#t=16:15)** Shrink and grow until it looks bad\n* **[21:36](#t=21:36)** Menus in responsive\n* **[23:43](#t=23:43)** Sponsor: Linode\n* **[24:13](#t=24:13)** Grid systems\n* **[28:08](#t=28:08)** Grid and Flexbox\n* [CSS Grid Course](https://cssgrid.io)\n* [Flexbox Course](https://flexbox.io)\n* [Can I Use](https://caniuse.com)\n* **[35:02](#t=35:02)** Sponsor: LogRocket\n* **[36:00](#t=36:00)** Container queries\n* **[45:56](#t=45:56)** FitText\n* **[49:12](#t=49:12)** How do you test these types of things?\n* **[51:15](#t=51:15)** Future techniques coming\n* **[53:28](#t=53:28)** Sponsor: Freshbooks\n* **[53:56](#t=53:56)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Lutron Light switches](https://amzn.to/3Te5juj)\n* Wes: [Sunco Lighting BR30](https://amzn.to/3UeDV0t)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '97a1317f7b1bf4b49fba7439184c3611bfd74a1ffaffe8cb1a6caf6eb6ad6899', 'responsive-design-techniques', '/shows/540 - Tasty.md', '2023-10-16 20:07:54.846', '2023-10-27 15:58:12.285', 'TASTY'),
('syntax_podcast_show_00541', 541, 'Supper Club × Anything But Coding with Wes and Scott', '2022-11-25 13:00:00.200', 'https://traffic.libsyn.com/syntax/Syntax_-_541.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Scott and Wes! Talking about BBQ, electric cars, workout equipment, home renos - but they do sneak in a bit of coding talk!\n\n## Kontent by Kentico - Sponsor\n\nKontent by Kentico is a headless CMS that provides live editing experience to non-technical users and hands you the technical tools to build websites, mobile apps, voice assistants, or anything else where you need content. Use REST API or GraphQL and get your content via the global Fastly CDN. Designed to unify all your content and operations, in compliance with ISO27001 and SOC2Type2 certifications.[Spin up a new project today](kontent.ai/syntax) and discover Kontent.\n\n## Tuple - Sponsor\n\nThis week’s sponsor is Tuple, an app built specifically for remote pair programming. The app is written in C++ and tuned for high-resolution screen sharing and low-latency remote control. Because developers deserve better than Zoom or Meet for pairing. <https://tuple.app/syntax>\n\n## Show Notes\n\n* **[00:37:11](#t=00:37:11)** Welcome\n* **[03:18:10](#t=03:18:10)** Saskatchewan and Saskatoon Berries\n* [Saskatoon Berry Barn](https://www.berrybarn.ca)\n* **[05:02:14](#t=05:02:14)** TV shows we\'re watching\n* [Amazing Race Canada](https://en.wikipedia.org/wiki/The_Amazing_Race_Canada)\n* [America’s Dance Crew](https://en.wikipedia.org/wiki/America%27s_Best_Dance_Crew)\n* [Lakefront Luxury](https://tv.cottagelife.com/shows/lakefront-luxury/)\n* **[12:49:12](#t=12:49:12)** New house vibe\n* **[18:29:06](#t=18:29:06)** Sponsor: Kontent\n* **[19:13:20](#t=19:13:20)** Sauna thoughts\n* **[22:58:24](#t=22:58:24)** Home gym thoughts\n* [Woodupp](https://woodupp.com)\n* [Tonal](https://www.tonal.com)\n* **[40:22:16](#t=40:22:16)** Sponsor: Tuple\n* **[41:17:11](#t=41:17:11)** 3D printer\n* **[44:11:09](#t=44:11:09)** How many things can you take on?\n* **[48:23:11](#t=48:23:11)** BBQ talk\n* [Amazing Ribs](https://amazingribs.com)\n* **[55:26:11](#t=55:26:11)** Electric car update\n* [Ioniq 5](https://www.caranddriver.com/hyundai/ioniq-5)\n* **[57:45:07](#t=57:45:07)** Supper Club questions\n* [Level Up Tutorials VS Code Theme](https://marketplace.visualstudio.com/items?itemName=leveluptutorials.theme-levelup)\n* [Quokka VS Code Extension](https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode)\n* [Quokkajs](https://quokkajs.com)\n* [Console-Ninja](https://console-ninja.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5a5b68e8001b80bc0a92a1cd110fc11eecd6d1117147db482a4c5b7480c4b30e', 'supper-club-anything-but-coding-with-wes-and-scott', '/shows/541 - Supper Wes Scott.md', '2023-10-16 20:07:54.888', '2023-10-27 15:58:12.340', 'SUPPER'),
('syntax_podcast_show_00542', 542, 'Serverless Limitations', '2022-11-28 12:00:00.439', 'https://traffic.libsyn.com/syntax/Syntax_-_542.mp3', '\nIn this episode of Syntax, Wes and Scott talk through some of the limitations of using serverless in your project.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## MagicBell - Sponsor\n\n[MagicBell](https://www.magicbell.com) is the the notification inbox for your product. Add a MagicBell to your product for announcements, billing, workflow, and other notifications. The free plan supports up to 100 Monthly Active Users - use the coupon code SYNTAXFM for 10% off the first 12 months.\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:08](#t=01:08)** Sponsor: Sentry\n* **[01:59](#t=01:59)** Sponsor: MagicBell\n* **[03:11](#t=03:11)** Topic introduction\n* **[04:44](#t=04:44)** Function limit\n* [Puppeteer](https://pptr.dev)\n* **[08:51](#t=08:51)** Node support\n* **[10:00](#t=10:00)** Cron jobs\n* **[11:12](#t=11:12)** Local development\n* [Miniflare](https://miniflare.dev)\n* **[11:45](#t=11:45)** Database access\n* [SQLite](https://sqlite.org/index.html)\n* **[12:42](#t=12:42)** Sharing code\n* **[13:07](#t=13:07)** Environmental variables\n* [Netlify environmental variables](https://docs.netlify.com/configure-builds/environment-variables/)\n* **[14:37](#t=14:37)** Timeouts\n* **[15:47](#t=15:47)** Sass is expensive\n* **[17:26](#t=17:26)** Infastructure as code\n* **[19:02](#t=19:02)** Search\n* [Algolia](https://www.algolia.com)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://leveluptutorials.com/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '79eba7a3be23e824be01ece5b27890a996a701f8e878cff716750a2283cc381d', 'serverless-limitations', '/shows/542 - Tasty Serverless.md', '2023-10-16 20:07:54.921', '2023-10-27 15:58:12.394', 'HASTY'),
('syntax_podcast_show_00543', 543, 'Potluck × Twitter Following × TypeScript × Playwright', '2022-11-30 12:00:00.215', 'https://traffic.libsyn.com/syntax/Syntax_-_543.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about strategies to find good Twitter follows, should we use TypeScript for a company blog, what\'s Playwright, and more!\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:53](#t=01:53)** TikTok update\n* **[02:46](#t=02:46)** What strategies do you use to find the good stuff?\n* [Tweetdeck](https://tweetdeck.twitter.com)\n* **[11:17](#t=11:17)** What is the clear distinction b/w how the CRUD Ops & the Real time chat protocols (XMPP, Websockets, etc) differ?\n* **[15:56](#t=15:56)** Should we use TypeScript for a new blog?\n* **[20:45](#t=20:45)** Sponsor: Sanity\n* **[21:45](#t=21:45)** Is there any reason to still use string concatenation over template literals?\n* **[26:13](#t=26:13)** What should React devs use to get initial scaffolding in place?\n* [Create React App](https://create-react-app.dev)\n* [Vite](https://vitejs.dev)\n* [Turbo Pack](https://turbo.build/pack)\n* **[29:38](#t=29:38)** What\'s the deal with Playwright?\n* [Playwright](https://playwright.dev)\n* **[34:28](#t=34:28)** Sponsor: LogRocket\n* **[35:19](#t=35:19)** What separates a \"scripting\" language from a \"programming\" language?\n* **[39:37:14](#t=39:37:14)** Sponsor: Prismic\n* **[40:23:02](#t=40:23:02)** Do you have any tips on how to change a defeated programmer mindset?\n* [Partydown](https://partytown.builder.io)\n* **[47:34:07](#t=47:34:07)** How has your use of and work in the browser changed with Arc?\n* [Arc Browser](https://arc.net)\n* [Syntax 514 - Supper Club × Arc Browser with Hursh Agrawal](https://syntax.fm/show/514/supper-club-arc-browser-with-hursh-agrawal)\n* **[49:18:15](#t=49:18:15)** Why would I attach an event listener with the useCapture argument as true?\n* **[51:33:24](#t=51:33:24)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Screwless plates](https://amzn.to/3hbeT3I) / [4 pack of screwless plates](https://amzn.to/3TfUhEW)\n* Wes: [Shoe Boxes for Cords](https://www.homedepot.ca/product/tuff-store-5-76l-plastic-storage-utility-tote-box-in-clear/1000705919)\n\n## Shameless Plugs\n\n* Scott: [LevelUp TikTok](https://www.tiktok.com/@leveluptuts)\n* Wes: [Wes Bos TikTok](https://www.tiktok.com/@wesbos)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2d7efab6cc46e9ea2c5eb8f351ddc23b6f55d6dba5d2ef225235c89ff1eb8bfb', 'potluck-twitter-following-typescript-playwright', '/shows/543 - Tasty Potluck.md', '2023-10-16 20:07:54.955', '2023-10-27 15:58:12.461', 'TASTY'),
('syntax_podcast_show_00544', 544, 'Supper Club × Bun with Jared Sumner', '2022-12-02 12:00:00.952', 'https://traffic.libsyn.com/syntax/Syntax_-_544.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Jared Sumner about why and how he created Bun, what Zig is, and the future of Bun.\n\n## Tuple - Sponsor\n\nThis week’s sponsor is [Tuple](https://tuple.app/syntax), an app built specifically for remote pair programming. The app is written in C++ and tuned for high-resolution screen sharing and low-latency remote control. Because developers deserve better than Zoom or Meet for pairing. [Tuple.app](https://tuple.app/syntax).\n\n## Show Notes\n\n* **[00:37](#t=00:37)** Welcome\n* **[01:44](#t=01:44)** Who is Jared Sumner?\n* [Jarred Sumner on Twitter](https://twitter.com/jarredsumner)\n* [Bun](https://bun.sh)\n* [Bun Discord](https://discord.com/invite/CXdq2DP29u)\n* [Bun on GitHub](https://github.com/oven-sh/bun)\n* **[02:31](#t=02:31)** Why did you make Bun?\n* **[09:43](#t=09:43)** Using web API vs Node modules?\n* **[13:25](#t=13:25)** Do we still use npm?\n* **[15:42](#t=15:42)** Support for HTML Rewriter\n* **[16:46](#t=16:46)** Where do you see Bun being used?\n* **[19:25](#t=19:25)** Do you think someone will write a type checker?\n* **[21:18](#t=21:18)** Sponsor: Tuple\n* **[22:07](#t=22:07)** What is Zig?\n* **[24:57](#t=24:57)** Did you have a history of learning languages?\n* **[28:16](#t=28:16)** Have you ever thought of putting Bun on hardware?\n* **[29:59](#t=29:59)** Is there a package.json file in Bun projects?\n* **[31:34](#t=31:34)** What can\'t Node just get faster?\n* **[32:16](#t=32:16)** What is the future of Bun?\n* **[36:27](#t=36:27)** Thoughts on types in JavaScript?\n* **[41:16](#t=41:16)** Why did you build an SQLite client into Bun?\n* **[42:54](#t=42:54)** Supper Club questions\n* [Starship](https://starship.rs)\n* [Warp](https://www.warp.dev)\n* **[48:52](#t=48:52)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Bun meme](https://twitter.com/jarredsumner/status/1545331803770089474)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c2bf8343e40f953244cc8e7ce5727a0123f4b13ff45fc5eacc706db769fff446', 'supper-club-bun-with-jared-sumner', '/shows/544 - Supper Club bun.md', '2023-10-16 20:07:54.987', '2023-10-27 15:58:12.528', 'SUPPER'),
('syntax_podcast_show_00545', 545, 'GitHub Next Projects', '2022-12-05 12:00:00.525', 'https://traffic.libsyn.com/syntax/Syntax_-_545.mp3', '\nIn this Hasty Treat, Scott and Wes talk about new features coming to GitHub including Hey, GitHub!, GitHub Blocks, GitHub Copilot CLI, and more!\n\n## Linode - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:49](#t=01:49)** Responsive web design update\n* **[03:12](#t=03:12)** Let\'s go\n* **[05:32](#t=05:32)** Sponsor: Linode\n* **[06:01](#t=06:01)** Sponsor: LogRocket\n* **[07:23](#t=07:23)** GitHub Next\n* [GitHub Next](https://githubnext.com/)\n* **[08:17](#t=08:17)** GitHub Copilot for the CLI\n* **[11:52](#t=11:52)** Synthesizing results\n* [Syntax 540 - Responsive Design Techniques](https://syntax.fm/show/540/responsive-design-techniques)\n* **[13:31](#t=13:31)** Hey GitHub\n* [Syntax 481 - Supper Club Voice Coding with Pokey Rule](https://syntax.fm/show/481/supper-club-voice-coding-with-pokey-rule)\n* **[16:55](#t=16:55)** GitHub Blocks\n* **[18:58](#t=18:58)** GitHub Code search\n* **[21:36](#t=21:36)** GitHub Collaborative workspaces\n* **[23:43](#t=23:43)** GitHub Copilot for your own codebase\n* **[25:10](#t=25:10)** GitHub Copilot Radar\n* **[29:15](#t=29:15)** GitHub AI Pull Requests\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c891517b6cbb8366c70510c8bf5415c309cc6e23c910252c67e56998b22fe724', 'github-next-projects', '/shows/545 - Hasty GitHub Roadmap.md', '2023-10-16 20:07:55.087', '2023-10-27 15:58:12.633', 'HASTY'),
('syntax_podcast_show_00546', 546, 'Code Styles × Readable Rules and Petty Preferences', '2022-12-07 12:00:00.676', 'https://traffic.libsyn.com/syntax/Syntax_-_546.mp3', '\nIn this episode of Syntax, Wes and Scott talk about their preferred coding styles and preferences they use, and why.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[02:35](#t=02:35)** Function definition\n* **[06:43](#t=06:43)** File path aliases\n* **[09:36](#t=09:36)** Implicit vs Explicit Return\n* **[13:49](#t=13:49)** Array.reduce() VS literally anything else\n* **[17:37](#t=17:37)** Loop vs array method\n* **[22:55](#t=22:55)** Sponsor: Linode\n* **[23:37](#t=23:37)** Updating vs creating a new var\n* **[30:36](#t=30:36)** Iterable to Array\n* **[34:46](#t=34:46)** Sponsor: LogRocket\n* **[36:16](#t=36:16)** Destructuring vs Object.property\n* **[39:22](#t=39:22)** Destructuring Arrays vs Reference by index\n* **[41:40](#t=41:40)** Number(string) vs +string\n* **[43:35](#t=43:35)** Incrementing\n* **[45:06](#t=45:06)** Multiple ifs\n* **[47:48](#t=47:48)** Multiple ifs vs switch vs Ternary\n* **[51:05](#t=51:05)** Promises / Error Catching\n* **[53:50](#t=53:50)** if(falsy) block VS return false;\n* **[55:51](#t=55:51)** Sponsor: Freshbooks\n* **[56:26](#t=56:26)** Spaces vs tabs\n* **[58:39](#t=58:39)** Trailing commas\n* **[00:40](#t=00:40)** Semicolons\n* **[02:49](#t=02:49)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Video Archives Podcast](https://videoarchivespodcast.com)\n* Wes: [Ubiquiti Wifi](https://store.ui.com/products/access-point-wifi-6-in-wall)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3cacbc5753839814796a330c219197b248f765087fa7f4d60228a4166b0f16c7', 'code-styles-readable-rules-and-petty-preferences', '/shows/546 - Tasty Preferences.md', '2023-10-16 20:07:55.121', '2023-10-27 15:58:12.681', 'TASTY'),
('syntax_podcast_show_00547', 547, 'Supper Club × Coding at Disney with Vu Le', '2022-12-09 12:00:00.712', 'https://traffic.libsyn.com/syntax/Syntax_-_547.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Vu Le about his path to working at Disney. How did he learn to code? How do you get a job at Disney? What\'s the tech stack inside a Disney team?\n\n## Tuple - Sponsor\n\nThis week’s sponsor is [Tuple](https://tuple.app/syntax), an app built specifically for remote pair programming. The app is written in C++ and tuned for high-resolution screen sharing and low-latency remote control. Because developers deserve better than Zoom or Meet for pairing.\n\n## Show Notes\n\n* **[01:40](#t=01:40)** Who is Vu Le?\n* **[03:33](#t=03:33)** How did you learn to code?\n* **[04:57](#t=04:57)** How do you get a job at Disney?\n* **[09:01](#t=09:01)** Internal CMS development at Disney\n* **[10:19](#t=10:19)** What types of languages do you use internally?\n* **[15:22](#t=15:22)** Do you have a design system?\n* **[19:52](#t=19:52)** How do you handle versions and updates?\n* **[22:42](#t=22:42)** Sponsor: Tuple\n* **[23:37](#t=23:37)** Do you get involved in testing?\n* [Vitest](https://vitest.dev)\n* **[25:06](#t=25:06)** What are you using for GraphQL?\n* [GraphQL](https://www.graphql.com)\n* **[25:34](#t=25:34)** How are you handling CSS?\n* [Theme UI](https://theme-ui.com)\n* **[31:43](#t=31:43)** Does Disney do remote work?\n* **[34:38](#t=34:38)** Perks of working at Disney\n* **[38:16](#t=38:16)** Supper Club questions\n* [GMMK Pro Keyboard](https://www.gloriousgaming.com/products/glorious-gmmk-pro-75-barebone-black)\n* [Santa Cruz bicycles](https://www.santacruzbicycles.com/en-US/bikes/cross-country-mountain-bikes)\n* [JetBrains Mono](https://www.jetbrains.com/lp/mono/)\n* **[45:13](#t=45:13)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Garden hose connectors\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '34f95aa390ce45ba976dc21728908b10d4d019cc086742209c0c96e62dfd8a72', 'supper-club-coding-at-disney-with-vu-le', '/shows/547 - Supper with Vu Le.md', '2023-10-16 20:07:55.154', '2023-10-27 15:58:12.732', 'SUPPER'),
('syntax_podcast_show_00548', 548, 'Rendering Methods Explained', '2022-12-12 12:00:00.288', 'https://traffic.libsyn.com/syntax/Syntax_-_548.mp3', '\nIn this Hasty Treat, Scott and Wes talk through the various rendering methods in use today and the pros / cons of each.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:31](#t=01:31)** What is rendering?\n* **[02:41](#t=02:41)** Sponsor: Sentry\n* **[03:58](#t=03:58)** Sponsor: Sanity\n* **[04:55](#t=04:55)** Rendering methods\n* **[05:48](#t=05:48)** Single page application (SPA)\n* **[07:36](#t=07:36)** Multi-page Application\n* **[09:14](#t=09:14)** Static Site Generation (SSG)\n* **[11:10](#t=11:10)** Service Side Rendered (SSR)\n* **[13:08](#t=13:08)** Partial hydration\n* **[14:03](#t=14:03)** Progressive hydration\n* **[15:38](#t=15:38)** Island architecture\n* **[16:25](#t=16:25)** Progressive enhancement\n* **[18:18](#t=18:18)** Incremental Static Generation\n* **[19:12](#t=19:12)** Streaming SSR\n* **[19:53](#t=19:53)** Resumability\n* **[21:51](#t=21:51)** Edge rendering\n* **[23:11](#t=23:11)** Missing from the list\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'aaf03282cb73c2b84f901786276c0d65ead59a6013eff63964518c05f1a89b52', 'rendering-methods-explained', '/shows/548 - Hasty Render Methods.md', '2023-10-16 20:07:55.248', '2023-10-27 15:58:12.834', 'HASTY'),
('syntax_podcast_show_00549', 549, 'JavaScript in 2022', '2022-12-14 12:00:00.216', 'https://traffic.libsyn.com/syntax/Syntax_-_549.mp3', '\nIn this episode of Syntax, Wes and Scott look at the the Web Almanac\'s report on the role of JavaScript on the web in 2022.\n\n## Auth0  - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:17](#t=01:17)** College football update\n* **[04:07](#t=04:07)** Web almanac for 2022\n* [JavaScript in the 2022 Web Almanac](https://almanac.httparchive.org/en/2022/javascript)\n* **[06:25](#t=06:25)** Unused JavaScript\n* **[07:47](#t=07:47)** JavaScript requests per page\n* **[09:38](#t=09:38)** Bundlers\n* **[14:01](#t=14:01)** Pages using Babel\n* **[16:01](#t=16:01)** How JavaScript is requested\n* **[19:22](#t=19:22)** Sponsor: Sentry\n* **[20:56](#t=20:56)** Loading render blocking tags\n* **[22:48](#t=22:48)** Dynamic import, web workers, source maps\n* **[24:33](#t=24:33)** Libraries and frameworks\n* [Owl Carousel](https://owlcarousel2.github.io/OwlCarousel2/)\n* [Lazy Sizes](https://github.com/aFarkas/lazysizes)\n* **[29:30](#t=29:30)** Websites using web components\n* **[31:35](#t=31:35)** Websites with JavaScript security issues\n* **[32:43](#t=32:43)** Sponsor: Auth0\n* **[33:58](#t=33:58)** Jamstack\n* **[37:09](#t=37:09)** JavaScript used by Jamstack sites\n* **[38:03](#t=38:03)** Jamstack hosting\n* **[39:46](#t=39:46)** Popular Static site generators\n* **[44:49](#t=44:49)** Progressive web apps and service workers\n* **[50:29](#t=50:29)** jQuery inside WordPress themes\n* [WeCrashed](https://en.wikipedia.org/wiki/WeCrashed)\n* **[51:13](#t=51:13)** Project Fugu\n* [Project Fugu](https://developers.google.com/learn/pathways/fugu-apis)\n* **[52:51](#t=52:51)** Web push notifications\n* **[55:49](#t=55:49)** CMSs\n* **[00:45](#t=00:45)** Sponsor: Freshbooks\n* **[01:40](#t=01:40)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [White Lotus](https://www.hbo.com/the-white-lotus)\n* Wes: [Ubiquiti](https://www.ui.com/wi-fi)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2108bdbce60ea892eb82dbb172552793746bdd4fdae4afb253347333d0f01ef0', 'javascript-in-2022', '/shows/549 - Tasty.md', '2023-10-16 20:07:55.281', '2023-10-27 15:58:12.896', 'TASTY'),
('syntax_podcast_show_00550', 550, 'Supper Club × Remotion React Video with Jonny Burger', '2022-12-16 12:00:00.924', 'https://traffic.libsyn.com/syntax/Syntax_-_550.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Jonny Burger about why and how he built Remotion, his app that lets you create MP4 videos using React.\n\n## Gatsby - Sponsor\n\nToday’s episode was sponsored by Gatsby, the fastest frontend for the headless web. Gatsby is the framework of choice for content-rich sites backed by a headless CMS as its GraphQL data layer makes it straightforward to source website content from anywhere. Gatsby’s opinionated, React-based framework makes the hardest parts of building a performant website simpler. Visit [Gatsby.dev/Syntax](https://gatsby.dev/Syntax) to get your first Gatsby site up in minutes and experience the speed. ⚡️\n\n## Tuple - Sponsor\n\nThis week’s sponsor is [Tuple](https://tuple.app/syntax), an app built specifically for remote pair programming. The app is written in C++ and tuned for high-resolution screen sharing and low-latency remote control. Because developers deserve better than Zoom or Meet for pairing.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:24](#t=01:24)** Who is Jonny Burger?\n* [Jonny.io](https://www.jonny.io)\n* [Jonny on GitHub](https://github.com/JonnyBurger)\n* [Jonny on Twitter](https://twitter.com/JNYBGR)\n* **[03:51](#t=03:51)** Why did you create Remotion?\n* [Remotion.dev](https://www.remotion.dev)\n* **[07:36](#t=07:36)** What types of videos are people making?\n* **[10:53](#t=10:53)** What is the tech stack?\n* [Puppeteer](http://pptr.dev)\n* [Lottie](https://lottiefiles.com/)\n* **[18:31](#t=18:31)** What is Idempotence?\n* **[19:50](#t=19:50)** What is lottie?\n* **[22:56](#t=22:56)** Motion blur trail\n* [Motion blur trail demo](https://www.remotion.dev/docs/motion-blur/trail)\n* **[25:17](#t=25:17)** Sponsor: Gatsby\n* **[26:12](#t=26:12)** Chrome rendering\n* **[29:58](#t=29:58)** When would you choose JPG or PNG?\n* **[31:43](#t=31:43)** Are you using ffmpeg in the browser?\n* [ffmpeg](https://ffmpeg.org)\n* **[36:00](#t=36:00)** Sponsor: Tuple\n* **[37:43](#t=37:43)** What player do you use for playback?\n* **[39:54](#t=39:54)** How did you take this idea to a product?\n* **[44:05](#t=44:05)** Supper Club questions\n* [LG C9 TV](https://www.rtings.com/tv/reviews/lg/c9-oled)\n* [iTerm](https://iterm2.com)\n* **[50:12](#t=50:12)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Yoga with Adriene](https://www.youtube.com/@yogawithadriene)\n* [Cosmic Kids Yoga](https://www.youtube.com/@CosmicKidsYoga)\n\n## Shameless Plugs\n\n* [Toopo.art](https://toopo.art)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a4ddc99dca30b201f7d23945c379b17d314d0aff90eeec4d22fa44f6ccf4a6e1', 'supper-club-remotion-react-video-with-jonny-burger', '/shows/550 - Supper with Jonny.md', '2023-10-16 20:07:55.314', '2023-10-27 15:58:12.946', 'SUPPER'),
('syntax_podcast_show_00551', 551, '“Serverless” Databases', '2022-12-19 12:00:00.552', 'https://traffic.libsyn.com/syntax/Syntax_-_551.mp3', '\nIn this episode of Syntax, Wes and Scott talk about your options for database when you\'re working with serverless.\n\n## Prismic  - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## LogRocket - Sponsor\n\nLogRocket lets you replay what users do on your site, helping you reproduce bugs and fix issues faster. It\'s an exception tracker, a session re-player and a performance monitor. Get 14 days free at [logrocket.com/syntax](https://logrocket.com/syntax).\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[00:51](#t=00:51)** Sponsor: LogRocket\n* **[01:44](#t=01:44)** Sponsor: Prismic\n* **[03:17](#t=03:17)** Why Serverless and related databases?\n* **[07:45](#t=07:45)** Deploying on Deno\n* [Deno](https://deno.land)\n* **[08:44](#t=08:44)** Using a database with serverless functions\n* [Syntax 542 - Serverless Limitations](https://syntax.fm/show/542/serverless-limitations)\n* **[11:53](#t=11:53)** Using purpose built databases\n* [Planetscale](https://planetscale.com)\n* [Supabase](https://supabase.com)\n* [Cloudflare D1](https://www.cloudflare.com/en-ca/lp/d1/)\n* [Cloudflare Key Value Store](https://www.cloudflare.com/en-ca/products/workers-kv/)\n* [AWS DynamoDB](https://aws.amazon.com/dynamodb/)\n* [AWS Auroa](https://aws.amazon.com/rds/aurora/features/)\n* [FaunaDB](https://fauna.com)\n* [Neon](https://neon.tech)\n* [Railway](https://railway.app)\n* [MongoDB Serverless](https://www.mongodb.com/serverless)\n* [Redis](https://redis.io)\n* [Cassandra](https://cassandra.apache.org/)\n* **[15:01](#t=15:01)** The results of the test\n* **[17:35](#t=17:35)** Solutions\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b77c653a1221adfd766e5616c1fc2471ae66c1fbf7b5dc3798ff37a7188e6617', 'serverless-databases', '/shows/551 - Tasty Serverless.md', '2023-10-16 20:07:55.465', '2023-10-27 15:58:13.078', 'HASTY'),
('syntax_podcast_show_00552', 552, 'Potluck × Twitter Thoughts × Business Models × Senior Developer', '2022-12-21 12:00:00.769', 'https://traffic.libsyn.com/syntax/Syntax_-_552.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about how to give feedback on the podcast, deciding on a business model for courses, what to do about Twitter, and more.\n\n## Linode  - Sponsor\n\nWhether you’re working on a personal project or managing enterprise infrastructure, you deserve simple, affordable, and accessible cloud computing solutions that allow you to take your project to the next level. Simplify your cloud infrastructure with Linode’s Linux virtual machines and develop, deploy, and scale your modern applications faster and easier. Get started on Linode today with a $100 in free credit for listeners of Syntax. You can find all the details at [linode.com/syntax](https://linode.com/syntax). Linode has 11 global data centers and provides 24/7/365 human support with no tiers or hand-offs regardless of your plan size. In addition to shared and dedicated compute instances, you can use your $100 in credit on S3-compatible object storage, Managed Kubernetes, and more. Visit [linode.com/syntax](https://linode.com/syntax) and click on the “Create Free Account” button to get started.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Freshbooks - Sponsor\n\nGet a 30 day free trial of Freshbooks at [freshbooks.com/syntax](https://freshbooks.com/syntax)\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:51](#t=01:51)** Podcast feedback\n* **[04:46](#t=04:46)** Can you talk about how you made the decision to re-write LevelUp?\n* [Strangler Fig](https://learn.microsoft.com/en-us/azure/architecture/patterns/strangler-fig)\n* **[13:54](#t=13:54)** How did you get a score for your website?\n* [Google Pagespeed](https://developers.google.com/speed/)\n* **[19:30](#t=19:30)** Where will we move to when Twitter implodes?\n* [Twitter Blue](https://help.twitter.com/en/using-twitter/twitter-blue)\n* **[26:29](#t=26:29)** Sponsor: Linode\n* **[27:06](#t=27:06)** How did you arrive at your business model?\n* **[33:15](#t=33:15)** Advice for getting into freelancing web dev?\n* **[38:49](#t=38:49)** Sponsor: Sentry\n* **[40:07](#t=40:07)** How to feel more \"senior\" as a developer\n* **[43:30](#t=43:30)** How do you manage notifications between various apps?\n* [Hazel](https://www.noodlesoft.com)\n* **[50:46](#t=50:46)** Label makers\n* [Nimbot label makers](https://niimbotd11.com)\n* **[54:14](#t=54:14)** Sponsor: Freshbooks\n* **[54:45](#t=54:45)** How are people testing node apps?\n* [JestJS](https://jestjs.io)\n* [Vitest](https://vitest.dev)\n* [Mocha](https://mochajs.org)\n* [ChaiJS](https://www.chaijs.com)\n* **[56:38](#t=56:38)** What are your thoughts on the TanStack Router?\n* [Tanstack](https://tanstack.com/router/v1/docs/overview)\n* [Astro](https://astro.build)\n* [SvelteKit](https://kit.svelte.dev)\n* [Nozzle](https://nozzle.io)\n* **[01:09](#t=01:09)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Sensibo Air](https://amzn.to/3VAbZor)\n* Wes: [We Crashed](https://en.wikipedia.org/wiki/WeCrashed)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c1c3c7b0199a0a2d7bbf180fdd75c78edf2494410cbe1ec8b38ecb20275cb628', 'potluck-twitter-thoughts-business-models-senior-developer', '/shows/552 - Potluck.md', '2023-10-16 20:07:55.507', '2023-10-27 15:58:13.128', 'TASTY'),
('syntax_podcast_show_00553', 553, 'Supper Club × Switching into Coding and climbing the Pommade ladder with Kenneth Lyerly', '2022-12-23 12:00:00.550', 'https://traffic.libsyn.com/syntax/Syntax_-_553.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Kenneth Lyerly about his career path into coding, and how he manages to hold two jobs.\n\n## Show Notes\n\n* **[00:38](#t=00:38)** Welcome\n* [Ken.dev](https://ken.dev)\n* [Ken on Github](https://github.com/kenput3r)\n* **[01:59](#t=01:59)** How do you have two jobs?\n* **[09:46](#t=09:46)** When did you start a second job?\n* **[16:02](#t=16:02)** Any tips for someone wanting to switch into coding?\n* **[24:03](#t=24:03)** Do you have advice for people trying to market themselves?\n* **[31:38](#t=31:38)** What is working these days for marketing efforts?\n* **[34:47](#t=34:47)** Where can devs learn about marketing?\n* **[35:50](#t=35:50)** Barbershop culture\n* **[39:47](#t=39:47)** Supper club questions\n* [Snazzy Labs custom Touch ID button](https://www.youtube.com/watch?v=hz9Ek6fxX48)\n* [Tech Meme Ride Home podcast](https://news.techmeme.com/180306/podcast)\n* **[44:10](#t=44:10)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Traeger Grills](https://www.traeger.com)\n\n## Shameless Plugs\n\n* [Suavecito](http://www.suavecito.com)\n* [ResortPass](https://www.resortpass.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8be3279f3ebd47031032061419db46d793baf89eec65a0b35da2ffd38fc089b2', 'supper-club-switching-into-coding-and-climbing-the-pommade-ladder-with-kenneth-lyerly', '/shows/553 - Supper.md', '2023-10-16 20:07:55.561', '2023-10-27 15:58:13.178', 'SUPPER'),
('syntax_podcast_show_00554', 554, 'Desktop Apps in JS × Electron and Tauri', '2022-12-26 12:00:00.792', 'https://traffic.libsyn.com/syntax/Syntax_-_554.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the current state of building desktop apps with Electron or Tauri.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Prismic - Sponsor\n\nPrismic is a Headless CMS that makes it easy to build website pages as a set of components. Break pages into sections of components using React, Vue, or whatever you like. Make corresponding Slices in Prismic. Start building pages dynamically in minutes. Get started at [prismic.io/syntax](https://prismic.io/syntax).\n\n## Show Notes\n\n* **[00:33](#t=00:33)** Welcome\n* **[01:18](#t=01:18)** Sponsor: Sentry\n* **[02:47](#t=02:47)** Sponsor: Prismic\n* **[04:01](#t=04:01)** Our experience with building desktop apps\n* [Level Up Tutorials: Level 1 Electron](https://levelup.video/tutorials/level-1-electron)\n* [Hair.WesBos.com](https://hair.wesbos.com)\n* **[10:04](#t=10:04)** Frameworks for building apps\n* **[10:56](#t=10:56)** Tauri vs Electron\n* [Tauri](https://tauri.app)\n* [Electron](https://www.electronjs.org)\n* **[23:38](#t=23:38)** Tooling\n* [vite-plugin-electron](https://www.npmjs.com/package/vite-plugin-electron)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '2d9a29eb75a9d8ab42b1da8ab18b4cbc9d58cb9a3bf87235389e2059257c2124', 'desktop-apps-in-js-electron-and-tauri', '/shows/554 - Hasty Apps.md', '2023-10-16 20:07:55.690', '2023-10-27 15:58:13.300', 'HASTY'),
('syntax_podcast_show_00555', 555, 'Were We Wrong? 2022 Predictions Revisited', '2022-12-28 12:00:00.120', 'https://traffic.libsyn.com/syntax/Syntax_-_555.mp3', '\nIn this episode of Syntax, Wes and Scott revisit their 2022 predictions and see which ones they got right, and which they got wrong.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Sanity - Sponsor\n\nSanity.io is a real-time headless CMS with a fully customizable Content Studio built in React. Get a Sanity powered site up and running in minutes at [sanity.io/create](https://www.sanity.io/create). Get an awesome supercharged free developer plan on [sanity.io/syntax](https://www.sanity.io/syntax).\n\n## Auth0 - Sponsor\n\nAuth0 is the easiest way for developers to add authentication and secure their applications. They provides features like user management, multi-factor authentication, and you can even enable users to login with device biometrics with something like their fingerprint. Not to mention, Auth0 has SDKs for your favorite frameworks like React, Next.js, and Node/Express. Make sure to sign up for a free account and give Auth0 a try with the link below. [https://a0.to/syntax](https://a0.to/syntax)\n\n## Show Notes\n\n* **[00:09](#t=00:09)** Welcome\n* [Syntax 420: 2022 Predictions](https://syntax.fm/show/420/2022-predictions)\n* **[01:44](#t=01:44)** Svelte popularity\n* [Svelte](https://svelte.dev)\n* [Svelte Kit](https://kit.svelte.dev)\n* **[04:09](#t=04:09)** Next.js data layer\n* **[05:06](#t=05:06)** Web components UI\n* [Open UI](https://open-ui.org)\n* **[06:19](#t=06:19)** Rust popularity\n* [Rust](https://www.rust-lang.org)\n* **[10:07](#t=10:07)** Serverless and Cloud functions\n* **[10:42](#t=10:42)** Tailwind popularity\n* **[16:20](#t=16:20)** Sponsor: Sentry\n* **[17:59](#t=17:59)** Next gen dev tools\n* **[19:46](#t=19:46)** CSS Container queries\n* **[21:45](#t=21:45)** GraphQL\n* **[26:26](#t=26:26)** Deno\n* **[29:44](#t=29:44)** TypeScript\n* **[34:28](#t=34:28)** Sponsor: Sanity\n* **[35:07](#t=35:07)** Server comeback\n* **[36:21](#t=36:21)** Checkouts and payment processers\n* [Lemon Squeezy](https://www.lemonsqueezy.com)\n* **[43:05](#t=43:05)** Sponsor: Auth0\n* **[44:18](#t=44:18)** Temporal API\n* **[46:44](#t=46:44)** Remote dev thin client popularity\n* **[49:49](#t=49:49)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [JADENS Label Maker Machine with Tape](https://amzn.to/3G3wiWd)\n* Wes: [Chipolo One Spot](https://amzn.to/3jjWpiQ)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Svelte Kit Tutorial](https://levelup.video/tutorials/sveltekit)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '17d63dc4007a5062d99b50463db913b05b09c811c670c1c191f8b5c8be2ee48c', 'were-we-wrong-2022-predictions-revisited', '/shows/555 - Tasty.md', '2023-10-16 20:07:55.748', '2023-10-27 15:58:13.352', 'TASTY'),
('syntax_podcast_show_00556', 556, 'Supper Club × Polypane with Kilian Valkhof', '2022-12-30 12:00:00.689', 'https://traffic.libsyn.com/syntax/Syntax_-_556.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Kilian Valkhof about his work on Polypane, a browser for developers. How is Polypane built? Why does he have a focus on accessibility in Polypane?\n\n## Show Notes\n\n* **[00:39](#t=00:39)** Welcome\n* **[01:48](#t=01:48)** Who is Kilian Valkhof?\n* [kilianvalkhof.com](https://kilianvalkhof.com)\n* [@kilianvalkhof on Twitter](https://twitter.com/kilianvalkhof)\n* **[04:50](#t=04:50)** What is Polypane?\n* [Polypane](https://polypane.app/)\n* [@Polypane on Twitter](https://twitter.com/Polypane)\n* [FromScratch](https://fromscratch.rocks)\n* **[09:31](#t=09:31)** How is Polypane built?\n* **[14:18](#t=14:18)** What about the Dev tools tab?\n* **[20:15](#t=20:15)** Outline tab\n* **[23:23](#t=23:23)** Color picker\n* **[27:33](#t=27:33)** Canvas rules and guides\n* **[32:16](#t=32:16)** Accessibility background and tools\n* **[40:28](#t=40:28)** How do you parse the CSS?\n* **[42:51](#t=42:51)** What else do you want people to know about Polypane?\n* **[44:42](#t=44:42)** Supper Club questions\n* **[53:59](#t=53:59)** SIIIIICK ××× PIIIICKS ×××\n\n## Shameless Plugs\n\n* [Fix Contrast](https://fixa11y.com)\n* [Superposition](https://superposition.design)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0c2ee298cff92078ea10a439959d32db20f886b49a458909af056d078515e695', 'supper-club-polypane-with-kilian-valkhof', '/shows/556 - Supper Kilian Valkhof.md', '2023-10-16 20:07:55.783', '2023-10-27 15:58:13.405', 'SUPPER'),
('syntax_podcast_show_00557', 557, 'TypeScript Fundamentals × Type Narrowing, Guards, and Predicates', '2023-01-02 12:00:00.521', 'https://traffic.libsyn.com/syntax/Syntax_-_557.mp3', '\nIn this episode of Syntax, Wes and Scott talk through some TypeScript Fundamentals around type narrowing, type guards, and type predicates.\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:40](#t=01:40)** Rocking predicates\n* **[02:54](#t=02:54)** What is a type in TypeScript?\n* **[04:11](#t=04:11)** Type Narrowing\n* **[08:18](#t=08:18)** Type Guard\n* **[16:19](#t=16:19)** Type Predicates\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f4a190bce84a8e4ca106b11f3ed4a04de00bc235ed4be8403a8e6523ce4f0a53', 'typescript-fundamentals-type-narrowing-guards-and-predicates', '/shows/557 - Tasty TypeScript.md', '2023-10-16 20:07:55.922', '2023-10-27 15:58:13.550', 'HASTY'),
('syntax_podcast_show_00558', 558, 'Our Predictions for 2023', '2023-01-04 12:00:00.241', 'https://traffic.libsyn.com/syntax/Syntax_-_558.mp3', '\nIn this episode of Syntax, Wes and Scott talk about their predictions in web development for 2023.\n\n## Show Notes\n\n* **[00:07](#t=00:07)** Welcome\n* **[01:25](#t=01:25)** SSR JS sites more the norm\n* **[03:32](#t=03:32)** React doing forms\n* **[05:39](#t=05:39)** TypeScript Inferred becomes hot\n* **[08:11](#t=08:11)** Deno gets hotter\n* **[12:51](#t=12:51)** JS Runtimes Mature\n* [HTMX](https://htmx.org/)\n* **[15:00](#t=15:00)** We will see a new TS Type Checker written in Rust\n* **[19:20](#t=19:20)** New JS APIs\n* **[23:37](#t=23:37)** Writing towards Winter CG Spec Popular. “Worker Ready” script\n* [STC](https://github.com/dudykr/stc)\n* **[27:05](#t=27:05)** A new JS framework\n* [SolidJS](https://www.solidjs.com/)\n* [Qwik](https://qwik.builder.io/)\n* **[29:44](#t=29:44)** Page Transitions API\n* **[32:40](#t=32:40)** Scott was right / Scotts gonna be right\n* **[34:06](#t=34:06)** Rust becomes more Popular\n* **[36:00](#t=36:00)** React Beta Docs launch after 5 year dev cycle\n* **[37:45](#t=37:45)** CSS Container Queries in Production\n* **[41:07](#t=41:07)** Svelte and Sveltekit Glow Up\n* **[43:38](#t=43:38)** CSS Subgrid\n* **[49:19](#t=49:19)** WASM\n* **[51:51](#t=51:51)** AI\n* [Open AI](https://openai.com)\n* **[53:16](#t=53:16)** Houdini\n* **[54:30](#t=54:30)** People souring on React, Eslint\n* **[57:47](#t=57:47)** Machine learning\n* **[01:08](#t=01:08)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Cron](https://cron.com/)\n* Wes: [Wyze Headphones](https://www.amazon.com/Noise-Cancelling-Headphones-Cancellation-High-fidelity-Transparency/dp/B08KHTJL1F/ref=sr_1_3?crid=2PDA69WRWMFXJ&keywords=wyze+headphones&qid=1671480346&sprefix=wyze+headphones%2Caps%2C102&sr=8-3)\n\n## Shameless Plugs\n\n* Scott: [LevelUp SvelteKit Tutorial](https://levelup.video/tutorials/sveltekit)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '4ce0698f1e63c6c20899cc50d214fba8c9dad0e8afdd682a55e4f5c1437541cd', 'our-predictions-for-2023', '/shows/558 - Tasty 2023 Predictions.md', '2023-10-16 20:07:55.964', '2023-10-27 15:58:13.601', 'TASTY'),
('syntax_podcast_show_00559', 559, 'Supper Club × Sarah Drasner on Engineering Management', '2023-01-06 12:00:00.241', 'https://traffic.libsyn.com/syntax/Syntax_-_559_.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Sarah Drasner about her new book, Engineering Management for the Rest of Us, what it\'s like moving from management to coding and back, the book writing process, and her Fortnite VS Code theme.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:59](#t=01:59)** Who is Sarah Drasner?\n* [@Sarah_Edo on Twitter](https://twitter.com/sarah_edo)\n* [@Sarah_Edo on Mastodon](https://hachyderm.io/@sarah_edo)\n* [@Sdras on CodePen](https://codepen.io/sdras/)\n* [@SDras on GitHub](https://github.com/sdras)\n* [SarahDrasnerDesign.com](https://sarahdrasnerdesign.com)\n* [Google](https://www.google.com/)\n* [Engineering Management for the Rest of Us](https://www.engmanagement.dev)\n* [Amazon: Engineering Management for the Rest of Us](https://www.amazon.com/Engineering-Management-Rest-Sarah-Drasner/dp/B0BHX8BQ9C/)\n* [Netlify](https://www.netlify.com)\n* **[05:25](#t=05:25)** How did you figure out what to do in management?\n* **[07:20](#t=07:20)** How do you get out of engineer\'s way?\n* [The Engineer Manager pendulum](https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/)\n* **[09:39](#t=09:39)** Do you spend time on making the person happy in the job?\n* **[15:51](#t=15:51)** Should managers code?\n* **[19:16](#t=19:16)** Was it difficult to step out of coding?\n* **[21:07](#t=21:07)** Why do people leave jobs?\n* **[24:04](#t=24:04)** Dealing with conflict and reorgs\n* **[28:36](#t=28:36)** What makes a good retro?\n* **[31:25](#t=31:25)** What was your process for writing a book?\n* [SVG Animations: From Common UX Implementations to Complex Responsive Animation](https://www.amazon.com/SVG-Animations-Implementations-Responsive-Animation/dp/1491939702)\n* [Scrivener](https://www.literatureandlatte.com/scrivener/overview)\n* [Egghead](https://egghead.io)\n* [Mayfly Design](https://mayflydesign.com)\n* [Sarah Drasner\'s articles on CSS Tricks](https://css-tricks.com/author/sdrasner/)\n* [Sarah Drasner\'s articles on Smashing Magazine](https://www.smashingmagazine.com/author/sarahdrasner/)\n* **[43:44](#t=43:44)** Supper Club questions\n* [Sarah Drasner\'s VS Code snippets and themes](https://marketplace.visualstudio.com/publishers/sdras)\n* [Creating a VS Code theme](https://css-tricks.com/creating-a-vs-code-theme/)\n* [Wes Bos Cobalt 2 VS Code theme](https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2)\n* [Partytown beta](https://partytown.builder.io)\n* **[53:10](#t=53:10)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Paper Koi Lantern: a DIY Kit](https://www.kickstarter.com/projects/yuumei/paper-koi-lantern-a-diy-kit)\n\n## Shameless Plugs\n\n* [Engineering Management for the Rest of Us](https://www.engmanagement.dev)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3ac02ec8416e4bced31e9c1d7816c60d9f39b159576a0a5df77d5461a2a57080', 'supper-club-sarah-drasner-on-engineering-management', '/shows/559 - Supper with Sarah.md', '2023-10-16 20:07:56.002', '2023-10-27 15:58:13.679', 'SUPPER'),
('syntax_podcast_show_00560', 560, 'TypeScript Fundamentals × Satisfies and as const', '2023-01-09 12:00:00.317', 'https://traffic.libsyn.com/syntax/Syntax_-_560.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Satisfies and as const.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[02:04](#t=02:04)** Xmas recap\n* [Peloton](https://www.onepeloton.com)\n* **[04:09](#t=04:09)** Satisfies and as const\n* **[06:16](#t=06:16)** What is const?\n* **[10:30](#t=10:30)** Helping with currency\n* **[12:44](#t=12:44)** Bos monster server update\n* **[14:13](#t=14:13)** Satisfies\n\n```\nexport const currencies = {\nUSD: \'US Dollars\',\nCAD: \'Canadian Dollar\',\nEUR: \'Euro\',\n} as const;\n\nexport type Currency = typeof currencies;\nexport type CurrencyCode = keyof Currency;\n```\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c096ee464427e5452c779e000bb73293b6868999b3e87716225e557b8ec67215', 'typescript-fundamentals-satisfies-and-as-const', '/shows/560 - Hasty errors.md', '2023-10-16 20:07:56.119', '2023-10-27 15:58:13.809', 'HASTY'),
('syntax_podcast_show_00561', 561, '2023 Goals × Learning and Doing', '2023-01-11 12:00:00.093', 'https://traffic.libsyn.com/syntax/Syntax_-_561.mp3', '\nIn this episode of Syntax, Wes and Scott talk through their goals for 2023 including coding, tooling, courses and platforms, social media, and fitness.\n\n## Show Notes\n\n* **[00:17](#t=00:17)** Welcome\n* **[02:38](#t=02:38)** What\'s a cantina?\n* **[06:33](#t=06:33)** Scott\'s coding goals\n* [Animated grid layouts](https://web.dev/css-animated-grid-layouts/)\n* [Tauri](https://tauri.app)\n* **[14:39](#t=14:39)** Wes\' code goals\n* [Uses](https://uses.tech)\n* [Stripe](https://stripe.com)\n* [Stripe Elements](https://stripe.com/payments/elements)\n* [Shoelace](https://shoelace.style)\n* **[23:17](#t=23:17)** Tooling\n* [Vite Plugin List Directory Contents](https://www.npmjs.com/package/vite-plugin-list-directory-contents)\n* **[26:39](#t=26:39)** Scott\'s courses and platform\n* [LevelUp.video](https://levelup.video)\n* **[29:36](#t=29:36)** Wes\' courses\n* [Wes Bos Tutorials](https://wesbos.com/courses)\n* **[31:11](#t=31:11)** Scott\'s fitness goals\n* **[35:55](#t=35:55)** Wes\' fitness goals\n* **[39:44](#t=39:44)** Apple Watch for fitness\n* **[41:54](#t=41:54)** Syntax podcast goals\n* **[50:13](#t=50:13)** Scott\'s social media goals\n* [Scott on TikTok](https://www.tiktok.com/@leveluptuts)\n* [LevelUp Newsletter](https://levelup.video/newsletter)\n* **[52:35](#t=52:35)** Wes\' social media goals\n* [Wes on TikTok](https://www.tiktok.com/@wesbos)\n* **[58:02](#t=58:02)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Menu](https://letterboxd.com/film/the-menu-2022/)\n* Wes: [JB Weld Clearweld](https://amzn.to/3GR4c0y), [big version](https://twitter.com/wesbos/status/1612472798689067008)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0e0eb6b9ed67317c063b18fdbdf0df0960a4034a3496d9daf3decb7429b55de6', '2023-goals-learning-and-doing', '/shows/561 - Tasty Goals.md', '2023-10-16 20:07:56.159', '2023-10-27 15:58:13.863', 'TASTY'),
('syntax_podcast_show_00562', 562, 'Supper Club × Katherine Mello on Liberal Arts → Coding, Bootcamps,  and Sustainability', '2023-01-13 12:00:00.466', 'https://traffic.libsyn.com/syntax/Syntax_-_562.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Katherine Mello about her journey into coding from liberal arts to bootcamp education, data visualization, and coding for a sustainable focused company.\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* **[01:10](#t=01:10)** Guest introduction\n* [Rolling With Kat](https://www.rolling-with-kat.blog/)\n* **[03:05](#t=03:05)** Bag milk?\n* **[04:34](#t=04:34)** What is Tangible Materials?\n* [Tangible Materials](https://tangiblematerials.com/)\n* **[07:27](#t=07:27)** How did you end up at Tangible?\n* [Full Stack Academy](https://www.fullstackacademy.com/tech-bootcamp)\n* **[10:05](#t=10:05)** Are bootcamps worth it?\n* **[14:46](#t=14:46)** How important were in person classes to you?\n* [All We Can Save](https://www.allwecansave.earth)\n* [Braiding Sweetgrass](https://milkweed.org/book/braiding-sweetgrass)\n* **[20:46](#t=20:46)** What do you enjoy about data visualization?\n* [D3](https://d3js.org)\n* [Data visualization society](https://www.datavisualizationsociety.org/)\n* [Three.js](https://threejs.org)\n* [Observable](https://observablehq.com)\n* [Color Wheel](https://observablehq.com/@shan/oklab-color-wheel)\n* **[27:21](#t=27:21)** Working at WeWork\n* [WeWork: Or the Making and Breaking of a $47 Billion Unicorn • Official Trailer](https://www.youtube.com/watch?v=HVAESeO7dgc)\n* **[34:14](#t=34:14)** What is your tech stack at Tangible?\n* **[38:26](#t=38:26)** What backend would Wes use for a project?\n* [Svelte Kit](https://kit.svelte.dev)\n* [Supabase](https://supabase.com)\n* [Super Bass](https://www.youtube.com/watch?v=4JipHEz53sU)\n* **[42:10](#t=42:10)** Is there environmental web hosting?\n* **[43:47](#t=43:47)** Supper Club Questions\n* [Uplift Desks](https://www.upliftdesk.com)\n* **[50:22](#t=50:22)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Climavores](https://postscriptmedia.com/climavores/)\n\n## Shameless Plugs\n\n* [Drinking from the Garden Hose](https://www.rolling-with-kat.blog/post/drinking-from-the-garden-hose)\n* [Hiring at Tangible Materials](https://tangiblematerials.com/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7f9e33bab352806a88ef8ce2818ce1f6a321d24d66385718dd6f8a95f990438f', 'supper-club-katherine-mello-on-liberal-arts-coding-bootcamps-and-sustainability', '/shows/562 - Supper.md', '2023-10-16 20:07:56.191', '2023-10-27 15:58:13.913', 'SUPPER'),
('syntax_podcast_show_00563', 563, 'Buy It or Build It? A Service is Not a Solution', '2023-01-16 14:00:00.784', 'https://traffic.libsyn.com/syntax/Syntax_-_563.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the differences between building it yourself vs paying for a service to do it for you, such as cron jobs, checkout, hosting, images, video, and more.\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[03:19](#t=03:19)** Buying vs building topic\n* **[07:09](#t=07:09)** Strategy\n* **[09:50](#t=09:50)** Escapability\n* **[14:56](#t=14:56)** Services You Could Use\n* [Sentry](https://sentry.io/welcome/)\n* [Postmark](https://postmarkapp.com)\n* **[16:34](#t=16:34)** Efficiency of using a service\n* **[18:08](#t=18:08)** Cron jobs\n* **[20:43](#t=20:43)** Checkout\n* [Recurly](https://recurly.com)\n* [Lemon Squeezy](https://www.lemonsqueezy.com)\n* [Stripe](https://stripe.com/)\n* [Braintree](https://www.braintreepayments.com)\n* **[24:29](#t=24:29)** Hosting\n* **[26:00](#t=26:00)** Screenshots and open graph images\n* [Cloudinary](https://cloudinary.com)\n* [Vercel OG](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation)\n* [Puppeteer](http://pptr.dev)\n* **[29:25](#t=29:25)** Search\n* [Algolia](https://www.algolia.com)\n* [Elastic](https://www.elastic.co)\n* [MongoDB](https://www.mongodb.com)\n* **[33:32](#t=33:32)** Auth\n* [PasswordJS](https://www.npmjs.com/package/passwordjs)\n* **[36:55](#t=36:55)** Images\n* **[39:46](#t=39:46)** Video Hosting\n* [Vimeo](https://vimeo.com)\n* [Mux](https://www.mux.com)\n* [Amazon Kinesis](https://aws.amazon.com/kinesis/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '202d44a65a9119213746ac287ad58ad10176a1f3f79d0e6f2e3805e1b127fbe2', 'buy-it-or-build-it-a-service-is-not-a-solution', '/shows/563 - Hasty.md', '2023-10-16 20:07:56.309', '2023-10-27 15:58:14.049', 'HASTY'),
('syntax_podcast_show_00564', 564, 'Potluck × JS Modules × HTML Tags × Recession × Budgeting', '2023-01-18 12:00:00.266', 'https://traffic.libsyn.com/syntax/Syntax_-_564.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about HTML tags, budgeting, recession proofing your business, software dev vs software engineer, taking payments, and more.\n\n## Show Notes\n\n* **[00:11:11](#t=00:11:11)** Welcome\n* **[01:29:11](#t=01:29:11)** When should you use article and section in HTML?\n* **[08:03:08](#t=08:03:08)** Does your business suffer from the economic recession?\n* **[15:47:18](#t=15:47:18)** How do you manage your money or budget?\n* [PlainTextAccounting](https://plaintextaccounting.org)\n* [YNAB](https://www.youneedabudget.com)\n* [Copilot](https://copilot.money)\n* **[20:51:11](#t=20:51:11)** What should I consider using? There\'s a lot of options. CommonJS, AMD, UMD, es modules?\n* **[26:30:09](#t=26:30:09)** What\'s the difference between a software developer and software engineer?\n* **[30:36:11](#t=30:36:11)** How do you handle payment for your course platforms?\n* [Braintree](https://www.braintreepayments.com)\n* [Gumroad](https://gumroad.com)\n* [Paddle](https://www.paddle.com)\n* [Stripe](https://stripe.com/)\n* **[38:33:23](#t=38:33:23)** Why is this false? \"I\'m a string\" instanceof String\n* **[40:38:22](#t=40:38:22)** Do you all use Mac spaces for organizing windows?\n* [Arc](https://arc.net)\n* **[45:55:21](#t=45:55:21)** Do you have any tips that would help my front end team avoid rendering a DOM with invalid element nesting?\n* **[48:48:14](#t=48:48:14)** Would you do an episode commenting on the CSS Nesting survey released this week?\n* [Help Choose CSS Nesting Syntax](https://webkit.org/blog/13607/help-choose-from-options-for-css-nesting-syntax/)\n* **[53:57:01](#t=53:57:01)** How do you guys go about prioritizing your work?\n* [Height.app](https://height.app)\n* [Things](https://culturedcode.com/things/)\n* **[58:50:19](#t=58:50:19)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Bundle of Eucalyptus](https://amzn.to/3iEsYrL)\n* Wes: Recycling bin brackets\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'db12ff0b6cb593ebb4750340e5d4b7b661e84845f442938f36df28c3dffb7198', 'potluck-js-modules-html-tags-recession-budgeting', '/shows/564 - Potluck.md', '2023-10-16 20:07:56.347', '2023-10-27 15:58:14.102', 'TASTY'),
('syntax_podcast_show_00565', 565, 'Supper Club × Simen Svale Skogsrud and Espen Hovlandsdal from Sanity', '2023-01-20 12:00:00.661', 'https://traffic.libsyn.com/syntax/Syntax_-_565.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Simen & Espen from Sanity about what Sanity is, who uses Sanity, what is a content lake, how Sanity works with React or TypeScript, what GROQ is, how portable text works, and of course, the supper club questions.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:37](#t=01:37)** Who are you and what is Sanity?\n* [Simen Svale Skogsrud](https://www.sanity.io/exchange/community/simen)\n* [Espen Hovlandsdal](https://www.sanity.io/exchange/community/rexxars)\n* [Check out Sanity](https://www.sanity.io/syntax)\n* **[04:04](#t=04:04)** What kinds of services use Sanity?\n* **[06:18](#t=06:18)** What is a content lake?\n* **[07:26](#t=07:26)** Enabling code access to Sanity Studio\n* **[13:12](#t=13:12)** Implenting Sanity into a React app\n* **[14:49](#t=14:49)** What is GROQ?\n* **[21:04](#t=21:04)** Is GraphQL still the best way to query data?\n* **[25:32](#t=25:32)** Workflows in Sanity\n* **[27:48](#t=27:48)** What is portable text?\n* **[35:19](#t=35:19)** How does Sanity work with TypeScript?\n* **[38:51](#t=38:51)** Ecommerce options with Sanity\n* **[41:29](#t=41:29)** Supper club questions\n* **[50:33](#t=50:33)** SIIIIICK ××× PIIIICKS ×××\n\n* [Syntax 533 - Zod Schema](https://syntax.fm/show/533/zod-schema-validation-and-type-generation)\n\n* [Elden Ring](https://en.bandainamcoent.eu/elden-ring/elden-ring)\n* [Risk of Rain](https://store.steampowered.com/app/248820/Risk_of_Rain/)\n* [Sharp](https://www.npmjs.com/package/sharp)\n* [Syntax 526 - Supper Club with on TRPC](https://syntax.fm/show/526/supper-club-trpc-with-alex-katt-johansson)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Espen bread](https://espen.codes/bread)\n* [Medium Tall](https://mediumtallclothing.com/)\n\n## Shameless Plugs\n\n* [Sanity Syntax code](https://www.sanity.io/syntax)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '38779d28c6f5435d86c2dd1463405d9226f3e334b782c1a74d5480fa3c3afd26', 'supper-club-simen-svale-skogsrud-and-espen-hovlandsdal-from-sanity', '/shows/565 - Supper.md', '2023-10-16 20:07:56.386', '2023-10-27 15:58:14.152', 'SUPPER'),
('syntax_podcast_show_00566', 566, 'Container Queries Explained', '2023-01-23 12:00:00.605', 'https://traffic.libsyn.com/syntax/Syntax_-_566.mp3', '\nIn this Hasty Treat, Scott and Wes explain what container queries are, use cases for them, new units of measurement, and possible issues with container queries.\n\n## Show Notes\n\n* **[00:28](#t=00:28)** Welcome\n* **[01:46](#t=01:46)** What are Container Queries?\n* [Tweet about Container Queries](https://twitter.com/wesbos/status/1614016671043276815?s=61&t=sSa4pPY_-9xMO1VD41z0oA)\n* **[03:28](#t=03:28)** Use cases for Container Queries\n* [Home Assistant](https://www.home-assistant.io)\n* [Can I Use?](https://caniuse.com)\n* **[06:11](#t=06:11)** The syntax of container queries\n* **[13:42](#t=13:42)** New units\n* **[22:27](#t=22:27)** Old iOS versions may cause issues\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '18221a74e85be334f76429461969e76bcc91c0c38e09b3be91f74d8089c68176', 'container-queries-explained', '/shows/566 - Hasty Container Queries.md', '2023-10-16 20:07:56.496', '2023-10-27 15:58:14.261', 'HASTY'),
('syntax_podcast_show_00567', 567, 'We React to State of JS 2022', '2023-01-25 12:00:00.984', 'https://traffic.libsyn.com/syntax/Syntax_-_567.mp3', '\nIn this episode of Syntax, Wes and Scott look through the results of the State of JS survey for 2022.\n\n## Show Notes\n\n* [State of JS 2022](https://2022.stateofjs.com/)\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:24](#t=01:24)** Thoughts on the survey in general\n* **[04:24](#t=04:24)** Country of origin\n* **[05:53](#t=05:53)** Salaries\n* **[08:14](#t=08:14)** Higher education\n* **[08:58](#t=08:58)** JavaScript features\n* **[15:41](#t=15:41)** Browser APIs\n* **[21:15](#t=21:15)** Library Usage\n* **[26:11](#t=26:11)** Interest in frontend frameworks\n* **[28:40](#t=28:40)** Framework usage\n* **[31:41](#t=31:41)** Rendering frameworks\n* **[34:57](#t=34:57)** Build tools usage over time\n* **[39:37](#t=39:37)** Monorepo tools\n* [Moon](https://moonrepo.dev)\n* **[46:41](#t=46:41)** Backend frameworks\n* [Civet](https://civet.dev)\n* **[47:42](#t=47:42)** JavaScript run times\n* **[51:01](#t=51:01)** TypeScript JavaScript balance\n* **[52:17](#t=52:17)** JavaScript flavors\n* **[57:03](#t=57:03)** Resources\n* [Fireship Dev](http://youtube.com/c/Fireship)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', '409db0fa21ca7eecba1bc8bb084ecf0a0bdc1d2bbe823d5d89105f63f2833ae2', 'we-react-to-state-of-js-2022', '/shows/567 - Tasty State of js.md', '2023-10-16 20:07:56.538', '2023-10-27 15:58:14.311', 'TASTY'),
('syntax_podcast_show_00568', 568, 'Supper Club × Caleb Porzio', '2023-01-27 12:00:00.625', 'https://traffic.libsyn.com/syntax/Syntax_-_568.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Caleb Porzio about Livewire, Alpine.js, what is it with PHP devs making cool stuff, TypeScript thoughts, and more.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:05](#t=01:05)** Buffalo and Canada\n* [History of Target in Canada](https://en.wikipedia.org/wiki/Target_Canada)\n* **[06:23](#t=06:23)** Who is Caleb Porzio?\n* [@CalebPorzio on Twitter](https://twitter.com/calebporzio)\n* **[09:26](#t=09:26)** What is Livewire?\n* [Livewire](https://laravel-livewire.com/)\n* [Alpine.js](https://alpinejs.dev)\n* [HotWired](https://hotwired.dev/)\n* **[12:58](#t=12:58)** Are these MVC frameworks?\n* **[18:11](#t=18:11)** What is the process behind the scenes?\n* **[20:36](#t=20:36)** How does Hotwire handle rendering?\n* **[25:38](#t=25:38)** What is Alpine.js?\n* **[33:19](#t=33:19)** Why are PHP devs making interesting things?\n* [Laravel](https://laravel.com)\n* [Tailwind](https://tailwindcss.com)\n* **[40:32](#t=40:32)** What is a nextTick in JavaScript?\n* [Microtask Guide](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide)\n* **[46:20](#t=46:20)** TypeScript thoughts\n* **[48:05](#t=48:05)** Server side rendering?\n* [Morph](https://alpinejs.dev/plugins/morph)\n* **[49:25](#t=49:25)** Supper Club questions\n* [Ergodox Keyboards](https://ergodox-ez.com)\n* [Glove 80 Keyboards](https://www.moergo.com/collections/glove80-keyboards)\n* [Natty Theme](https://marketplace.visualstudio.com/items?itemName=this-fifo.natty)\n* [MonoLisa](https://www.monolisa.dev)\n* **[59:40](#t=59:40)** ××× SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Ugmonk Analog](https://ugmonk.com/pages/analog)\n\n## Shameless Plugs\n\n* [Make VS Code Awesome](https://makevscodeawesome.com)\n* [Alpine.js](https://github.com/alpinejs/alpine)\n* [Livewire](https://laravel-livewire.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9a393568b49b954259485d6b5946c254baff87102456751e8bc80913807dd5e5', 'supper-club-caleb-porzio', '/shows/568 - Supper.md', '2023-10-16 20:07:56.580', '2023-10-27 15:58:14.358', 'SUPPER'),
('syntax_podcast_show_00569', 569, 'CSS Wishlist', '2023-01-30 12:00:00.474', 'https://traffic.libsyn.com/syntax/Syntax_-_569.mp3', '\nIn this Hasty Treat, Scott and Wes talk through their wishlist for CSS in 2023 including mixins, range selectors, fit text, robust color functions, overflown, and more.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:09](#t=01:09)** Snow skate update\n* **[03:01](#t=03:01)** Mixins\n* **[05:06](#t=05:06)** Range selector\n* **[09:36](#t=09:36)** :first-of-column :last-of:column / row\n* [Ability to target items in nth-row of autofilled, implicit grid](https://github.com/w3c/csswg-drafts/issues/1943)\n* **[11:43](#t=11:43)** Fit Text\n* **[13:34](#t=13:34)** Overflow-x, overflow-y control\n* **[15:36](#t=15:36)** Full support for CSS with Inline Styles\n* **[16:24](#t=16:24)** nth-of-found()\n* **[18:18](#t=18:18)** Robust Color functions\n* **[22:19](#t=22:19)** resize: both but no overflow or scroll\n* **[23:39](#t=23:39)** Animate height auto\n* **[23:57](#t=23:57)** Full attr() support\n* **[25:07](#t=25:07)** CSS References\n* [CSS References](https://gist.github.com/threepointone/61e990b450712cfd7dd0bb87ed0c2982)\n* **[26:59](#t=26:59)** overflown + :stuck\n* **[28:56](#t=28:56)** Multi-line selectors\n* **[30:35](#t=30:35)** Container Queries - select the container itself\n* **[32:04](#t=32:04)** :is-scrolled - select a container when it’s scrolled\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '382550316f9229c4872cd4dd647f493160946924d63a3f0a3bcfd5d0cf2a654f', 'css-wishlist', '/shows/569 - Hasty CSS Wishlist.md', '2023-10-16 20:07:56.677', '2023-10-27 15:58:14.461', 'HASTY'),
('syntax_podcast_show_00570', 570, 'Node.js CJS → ESM', '2023-02-01 12:00:00.145', 'https://traffic.libsyn.com/syntax/Syntax_-_570.mp3', '\nIn this episode of Syntax, Wes and Scott talk through what ESM is, and why you want to move your projects to ESM.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:51](#t=00:51)** Sponsor: Sentry\n* **[02:32](#t=02:32)** Our experiences with ESM\n* **[06:54](#t=06:54)** Why ESM?\n* **[11:42](#t=11:42)** Top Level Await\n* **[16:16](#t=16:16)** Assert Import type eventually\n* [Scott\'s Vite chunk import map](https://twitter.com/stolinski/status/1617926896670343192)\n* **[21:00](#t=21:00)** Converting code to ESM\n* **[27:22](#t=27:22)** .JS on end of files\n* **[32:12](#t=32:12)** Imports and exports\n* **[37:52](#t=37:52)** TypeScript\n* **[40:24](#t=40:24)** Bundling / Transpiling\n* [Vite Node](https://github.com/vitest-dev/vitest/tree/main/packages/vite-node)\n* **[43:42](#t=43:42)** Dependencies\n* [Sindre thread](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n* **[45:16](#t=45:16)** Publishing\n* **[53:25](#t=53:25)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Egg dispenser](https://amzn.to/3DbeoPx)\n* Wes: [Pure Cinema Podcast](https://purecinemapodcast.libsyn.com/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7691661a62189007ee7d08fa6dbe012694bf6ebcf8cdea1057c160200002ac90', 'node-js-cjs-esm', '/shows/570 - Tasty node.md', '2023-10-16 20:07:56.715', '2023-10-27 15:58:14.546', 'TASTY'),
('syntax_podcast_show_00571', 571, 'Supper Club × Rust In Action with Tim McNamara', '2023-02-03 12:00:00.592', 'https://traffic.libsyn.com/syntax/Syntax_-_571.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Tim McNamara, author of Rust in Action about what Rust is, how to get started learning Rust, and ideas of good projects to begin learning Rust with.\n\n## Show Notes\n\n* **[00:37](#t=00:37)** Welcome\n* **[01:26](#t=01:26)** Guest introduction\n* [Rust in Action](https://www.manning.com/books/rust-in-action)\n* [Tim on Twitter](https://twitter.com/timClicks)\n* [Tim on YouTube](https://www.youtube.com/c/timClicks)\n* **[03:51](#t=03:51)** What was it like to write a book on Rust?\n* **[07:52](#t=07:52)** What drew you to Rust?\n* **[13:01](#t=13:01)** The approachability of Rust\n* **[21:41](#t=21:41)** What\'s a good introductory project with Rust?\n* **[25:15](#t=25:15)** Why would someone learn Rust?\n* [It\'s time to try WASM](https://www.youtube.com/watch?v=EX2lQdA5x0E)\n* **[40:23](#t=40:23)** What is a crate and cargo in Rust?\n* **[44:17](#t=44:17)** Running Rust in various places\n* **[50:53](#t=50:53)** Should the average web developer try Rust?\n* **[52:13](#t=52:13)** Supper club questions\n* **[54:17](#t=54:17)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [kokako](https://en.wikipedia.org/wiki/K%C5%8Dkako#See_also)\n\n## Shameless Plugs\n\n* [Tim McNamara - How to learn Rust](https://www.youtube.com/watch?v=sDtQaO5_SOw)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b94cdd16b83b12536b04c4518e169cb0bcfd260b34140f17a1cddf594d7ef896', 'supper-club-rust-in-action-with-tim-mcnamara', '/shows/571 - Supper rust.md', '2023-10-16 20:07:56.747', '2023-10-27 15:58:14.594', 'SUPPER'),
('syntax_podcast_show_00572', 572, 'Polish and Perf', '2023-02-06 12:00:00.291', 'https://traffic.libsyn.com/syntax/Syntax_-_572.mp3', '\nIn this Hasty Treat, Scott and Wes talk through quick tips to improve performance of your website, and the tools available to help diagnose and fix perf issues.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[00:50](#t=00:50)** Polish And Perf explained\n* **[02:05](#t=02:05)** What kinds of tools are available to improve performance\n* [Lighthouse in Chrome](https://developer.chrome.com/docs/lighthouse/overview/)\n* [PageSpeed](https://pagespeed.web.dev)\n* **[09:32](#t=09:32)** Identify route caching and http caching\n* **[14:25](#t=14:25)** Partytown\n* [Partytown](https://partytown.builder.io)\n* **[15:19](#t=15:19)** Unnecessary network calls\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '79b06326124fac2d044b1ba3010e75b9a0b729a0887934a183671dcac815b5c8', 'polish-and-perf', '/shows/572 - Hasty Polish and perf.md', '2023-10-16 20:07:56.871', '2023-10-27 15:58:14.745', 'HASTY'),
('syntax_podcast_show_00573', 573, 'Converting JS to TypeScript', '2023-02-08 12:00:00.319', 'https://traffic.libsyn.com/syntax/Syntax_-_573.mp3', '\nIn this episode of Syntax, Wes and Scott talk about their respective processes for converting JavaScript to TypeScript in their projects, why you might want to, and tooling for moving to TypeScript.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:36](#t=00:36)** Sponsor: Sentry\n* **[02:23](#t=02:23)** Electrical updates\n* **[08:16](#t=08:16)** Moving to TypeScript\n* **[09:34](#t=09:34)** What are you doing with GraphQL?\n* [GraphQL Codegen](https://the-guild.dev/graphql/codegen)\n* **[11:35](#t=11:35)** Why move to TypeScript?\n* **[12:00](#t=12:00)** Refactoring is easier\n* **[14:58](#t=14:58)** Better DX\n* **[18:42](#t=18:42)** Adding a tsconfig.json file\n* **[22:43](#t=22:43)** Figure out your tooling\n* **[23:50](#t=23:50)** Type Checker\n* **[25:13](#t=25:13)** MongoDB to TypScript Generator\n* **[26:44](#t=26:44)** Eslint-Typescript\n* **[28:03](#t=28:03)** Deprank - <https://github.com/codemix/deprank>\n* **[28:03](#t=28:03)** Typesync - <https://github.com/jeffijoe/typesync>\n* [Deprank](https://github.com/codemix/deprank)\n* **[29:18](#t=29:18)** Refactor and rename to .ts\n* **[32:40](#t=32:40)** Typing your code\n* **[43:04](#t=43:04)** Utilities and unions\n* **[46:11](#t=46:11)** Where do you put your types?\n* **[49:29](#t=49:29)** Typing Dependencies\n* [Definitely Typed](https://github.com/DefinitelyTyped/DefinitelyTyped)\n* [Raycast Search npm](https://www.raycast.com/mrmartineau/search-npm)\n* **[54:26](#t=54:26)** Global types\n* **[01:08](#t=01:08)** Now what?\n* **[03:58](#t=03:58)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Elegrp USB C Walloutlet](https://amzn.to/3wEbSgL)\n* Wes: [Barrina Shop Lights](https://amzn.to/3XMikP1)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f637a59968e92c14d68cd0302c8692fb9ecf8c04ce237dd1a56bdcb3bcfb7bc0', 'converting-js-to-typescript', '/shows/573 - Tasty TypeScript.md', '2023-10-16 20:07:56.914', '2023-10-27 15:58:14.798', 'TASTY'),
('syntax_podcast_show_00574', 574, 'Supper Club × Qwik framework from Miško Hevery, the Creator of Angular', '2023-02-10 12:00:00.106', 'https://traffic.libsyn.com/syntax/Syntax_-_574.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Miško Hevery about why developers should check out Qwik, the benefits of lazy loading, sharing state between components, and other Builder.io projects like Partytown and Mitosis.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* **[01:19](#t=01:19)** Guest intro\n* [Miško Hevery](http://misko.hevery.com)\n* [@MHevery](https://twitter.com/mhevery)\n* **[01:58](#t=01:58)** What is Resumability?\n* **[05:06](#t=05:06)** What is Qwik?\n* [Qwik](https://qwik.builder.io)\n* [Qwik City](https://qwik.builder.io/qwikcity/overview/)\n* **[07:03](#t=07:03)** Why would you want to make a component resumable?\n* **[12:08](#t=12:08)** Qwik code can be lazy loaded\n* **[15:28](#t=15:28)** How is server side rendering handled?\n* **[18:12](#t=18:12)** How does Vite help?\n* **[22:40](#t=22:40)** A bit more about hydration\n* **[31:03](#t=31:03)** How does the server collection information?\n* **[32:11](#t=32:11)** How do you share state between components?\n* **[34:45](#t=34:45)** How is data fetching handled?\n* **[37:47](#t=37:47)** Why are you using JSX?\n* **[41:53](#t=41:53)** Dealing with components in other frameworks\n* [Mitosis](https://mitosis.builder.io/?outputTab=G4VwpkA%3D)\n* **[49:21](#t=49:21)** What is Partytown?\n* [Partytown](https://partytown.builder.io)\n* **[54:30](#t=54:30)** Supper Club questions\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Thinking Fast and Slow](https://amzn.to/3H50dfQ)\n\n## Shameless Plugs\n\n* [Builder.io](https://www.builder.io)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a81c9dc93a2383700346a52c33492fe2040012ac75ad58a20e10aaf607cfe431', 'supper-club-qwik-framework-from-misko-hevery-the-creator-of-angular', '/shows/574 - Supper.md', '2023-10-16 20:07:56.950', '2023-10-27 15:58:14.855', 'SUPPER'),
('syntax_podcast_show_00575', 575, 'Save us from Config File Hell', '2023-02-13 12:00:00.407', 'https://traffic.libsyn.com/syntax/Syntax_-_575.mp3', '\nIn this Hasty Treat, Scott and Wes talk about what you can do to better organize your config files.\n\n## Show Notes\n\n* **[00:21](#t=00:21)** Welcome\n* **[02:20](#t=02:20)** Electric car ski tripping\n* **[05:01](#t=05:01)** Why config files?\n* **[07:47](#t=07:47)** Custom Vite config files\n* [Wes\' Vite config](https://github.com/wesbos/hot-tips/blob/main/vite.config.ts)\n\n```\ndefine: {\n  __VERSION__: JSON.stringify(process.env.npm_package_version),\n},\n```\n\n* **[11:16](#t=11:16)** Node has failed us\n* **[13:30](#t=13:30)** Cosmic config\n* [Cosmiconfig](https://github.com/davidtheclark/cosmiconfig)\n* **[16:46](#t=16:46)** File nesting\n* **[21:01](#t=21:01)** Standardize on a format\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e3e367412dd163400ada56a91bb2c013dd3c3752d72680346fb46d64736a6011', 'save-us-from-config-file-hell', '/shows/575 - Hasty.md', '2023-10-16 20:07:57.044', '2023-10-27 15:58:14.955', 'HASTY'),
('syntax_podcast_show_00576', 576, 'Potluck × Native Web Components × JS Class Mixins × Application Secrets', '2023-02-15 12:00:00.575', 'https://traffic.libsyn.com/syntax/Syntax_-_576.mp3', '\nIn this potluck episode, Scott and Wes talk home electicity, and then answer your questions about native web components, JS class mixins, JavaScript for marketers, managing application secrets, and more!\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:09](#t=01:09)** Sponsor: Sentry\n* **[02:18](#t=02:18)** Electrical house update\n* [Klien Wirestrippers](https://amzn.to/3wW2HIW)\n* **[07:45](#t=07:45)** Custom Syntax podcast browser\n* [Custom Syntax browser](https://syntax.bald.design)\n* **[09:29](#t=09:29)** When using browser native web components (i.e. extends HTMLElement), should the whole application be wrapped in a component tree similar to how React apps do it?\n* [Deno](https://deno.land)\n* [Using Web Components with Next or any SSR Framework](https://css-tricks.com/using-web-components-with-next-or-any-ssr-framework/)\n* **[16:12](#t=16:12)** Should I avoid JS/TS class mixins?\n* **[21:07](#t=21:07)** Is it acceptable to have any string value as a value for a CSS custom property?\n* **[26:48](#t=26:48)** Should agencies consider building marketing sites with JS frameworks or is Wordpress still the best option here?\n* **[33:56](#t=33:56)** What are the main things to think about when laying the foundations for an app or project that will hopefully grow into something big?\n* **[41:24](#t=41:24)** Will Javascript skills give me an edge over other local digital marketers?\n* [WordPress](https://wordpress.com)\n* [Ghost](https://ghost.org)\n* **[46:00](#t=46:00)** What tool, if any, do you use for publishing packages?\n* **[50:19](#t=50:19)** Do you have any suggestions on how I can find time to code more?\n* [Bit](https://bit.dev)\n* **[54:17](#t=54:17)** how do you both manage your application secrets (API keys, database credentials etc) when deploying to Digital Ocean or Linode?\n* **[58:52](#t=58:52)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Physical 100](https://www.netflix.com/title/81587446)\n* Wes: [Leviton D23LP-2RW Decora Smart Wi-Fi Mini Plug-In Dimmer](https://www.amazon.ca/Leviton-D23LP-2RW-Anywhere-Companions-Required/dp/B08RSP3NKH?th=1)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7ae93f4d519036816b95ed1525e3aa83c1b2f6c106e8ee4aa8d5b1d7ddefdf47', 'potluck-native-web-components-js-class-mixins-application-secrets', '/shows/576 - Tasty.md', '2023-10-16 20:07:57.079', '2023-10-27 15:58:15.020', 'TASTY'),
('syntax_podcast_show_00577', 577, 'Supper Club × Solid.js with Ryan Carniato', '2023-02-17 12:00:00.341', 'https://traffic.libsyn.com/syntax/Syntax_-_577.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Ryan Carniato about Solid.JS, SolidStart, how web components work with Solid, why he chose JSX, and what the future of Solid is.\n\n## Show Notes\n\n* **[00:37](#t=00:37)** Welcome\n* **[01:38](#t=01:38)** Who is Ryan Carniato?\n* [@RyanCarniato on Twitter](https://twitter.com/RyanCarniato)\n* [Ryan on Dev.to](https://dev.to/ryansolid)\n* [Solid.JS](https://www.solidjs.com)\n* **[02:37](#t=02:37)** Why did you build Solid?\n* [Knockout.JS](https://knockoutjs.com)\n* [Marko JS](https://markojs.com)\n* **[09:15](#t=09:15)** What is Solid?\n* **[12:55](#t=12:55)** What does it mean to compile to vanilla JavaScript?\n* [SolidStart](https://start.solidjs.com)\n* [Tanstack Query](https://tanstack.com/query/latest)\n* **[19:39](#t=19:39)** What are observables and signals?\n* **[27:17](#t=27:17)** How are web components used inside of Solid?\n* **[29:38](#t=29:38)** Why aren\'t we using web components more?\n* **[32:37](#t=32:37)** Why would someone pick SolidStart vs Solid?\n* **[39:07](#t=39:07)** Why did you choose JSX?\n* **[44:45](#t=44:45)** How did you build live code examples into documentation?\n* [SolidJS Docs](https://docs.solidjs.com)\n* [Solid-Movies.app](https://solid-movies.app)\n* **[47:19](#t=47:19)** What is Solid.JS built on?\n* **[53:36](#t=53:36)** What is the future of Solid?\n* **[00:39](#t=00:39)** Supper club questions\n* **[02:57](#t=02:57)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Alice in Borderland](https://www.netflix.com/ca/title/80200575)\n\n## Shameless Plugs\n\n* [Ryan on Twitch](https://www.twitch.tv/ryansolid)\n* [Ryan on YouTube](https://www.youtube.com/@ryansolid)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '233cf59d4361eca91d685856677297bc42dc0f6c1012f45afe30156080b3654d', 'supper-club-solid-js-with-ryan-carniato', '/shows/577 - Supper Ryan.md', '2023-10-16 20:07:57.116', '2023-10-27 15:58:15.070', 'SUPPER'),
('syntax_podcast_show_00578', 578, 'Logging', '2023-02-20 12:00:00.302', 'https://traffic.libsyn.com/syntax/Syntax_-_578.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the reasons why you should log errors, how it\'s not just for debugging, where to save logs, and apps and packages to help with logging.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:37](#t=01:37)** Sponsor: Sentry\n* **[02:16](#t=02:16)** What is logging? Why log?\n* **[04:59](#t=04:59)** Logging isn\'t just for debugging\n* **[08:22](#t=08:22)** What do we log?\n* **[13:34](#t=13:34)** What not to log\n* **[14:58](#t=14:58)** Development, staging, and production\n* **[17:36](#t=17:36)** Logging bots\n* **[19:33](#t=19:33)** Where to put logs\n* **[20:59](#t=20:59)** How to log\n* [Log Tail](https://betterstack.com/logtail)\n* [Paper Trail](https://www.papertrail.com/)\n* [Sematext Logs](https://sematext.com/docs/logs/)\n* [DataDog](https://www.datadoghq.com/lpg/)\n* [Winston](https://www.npmjs.com/package/winston)\n* [Pino](https://getpino.io/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '604da16cfc3e4f6bdab909ed1122a631984d204dbb8e1f1d49ba8c5ccc671b3c', 'logging', '/shows/578 - Hasty.md', '2023-10-16 20:07:57.266', '2023-10-27 15:58:15.189', 'HASTY'),
('syntax_podcast_show_00579', 579, 'Warp Terminal × Next Gen Terminals', '2023-02-22 12:00:00.619', 'https://traffic.libsyn.com/secure/syntax/Syntax_-_579.mp3', '\nIn this episode of Syntax, Wes and Scott talk about why they\'re digging Warp as their terminal app of choice, what the terminal is, and some of their wishlist items for Warp.\n\n## Show Notes\n\n* **[00:09](#t=00:09)** Welcome\n* **[02:11](#t=02:11)** Disclaimers\n* **[04:17](#t=04:17)** What is the terminal?\n* **[06:54](#t=06:54)** What we\'ve used for terminal\n* [Get Warp](https://app.warp.dev/referral/2664Z2)\n* [Hyper Terminal](https://hyper.is/)\n* [iTerm](https://iterm2.com/)\n* [Alacritty](https://alacritty.org/)\n* **[11:14](#t=11:14)** Terminal terminology\n* [CommandLinePowerUser.com](https://commandlinepoweruser.com/)\n* [WSL](https://learn.microsoft.com/en-us/windows/wsl/install)\n* [OhMyPosh](https://ohmyposh.dev/)\n* [OhMyZsh](https://ohmyz.sh/)\n* [Starship](https://starship.rs/)\n* [Ion](https://github.com/redox-os/ion)\n* **[17:35](#t=17:35)** The basic features of Warp\n* **[20:45](#t=20:45)** Autocomplete issues\n* [Fig](https://www.npmjs.com/package/fig)\n* **[25:06](#t=25:06)** Sticky header\n* **[26:13](#t=26:13)** Blocks\n* **[29:17](#t=29:17)** The prompt\n* **[30:38](#t=30:38)** Sharing blocks and live sessions\n* **[32:29](#t=32:29)** AI Command Search\n* [AI Command search](https://twitter.com/warpdotdev/status/1612509826738966528)\n* **[35:51](#t=35:51)** Remote SSH\n* **[37:53](#t=37:53)** Window management\n* [Launch configurations](https://docs.warp.dev/features/sessions/launch-configurations)\n* **[38:42](#t=38:42)** Workflows\n* **[40:19](#t=40:19)** The command palette\n* **[42:36](#t=42:36)** How does Warp make money?\n* **[43:54](#t=43:54)** Warp requires an account\n* **[46:09](#t=46:09)** Annoyances and wishlists\n* **[58:29](#t=58:29)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [50 Pokemon Cards for $5](https://amzn.to/3XDPek0)\n* Wes: [iPad Sorter Station](https://amzn.to/3YwqaN0)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '8d2fc26a32bf9c25aebb86e99d1b9bf2a5901887e115beb40501d84d93c41678', 'warp-terminal-next-gen-terminals', '/shows/579 - Tasty Warp.md', '2023-10-16 20:07:57.302', '2023-10-27 15:58:15.248', 'TASTY'),
('syntax_podcast_show_00580', 580, 'Supper Club × Astro 2.0 with Fred Schott', '2023-02-24 12:00:00.833', 'https://traffic.libsyn.com/syntax/Syntax_-_580.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Fred Schott about all things Astro v2.0. What is Astro and why should you use it? How do islands work? Images, edge, AI, error overlays, hybrid rendering, and more!\n\n## Show Notes\n\n* **[00:40](#t=00:40)** Welcome\n* **[01:08](#t=01:08)** Guest introduction\n* [FredKSchott.com](https://fredkschott.com)\n* [@Fredkschott on Twitter](https://twitter.com/fredkschott)\n* [Fred on GitHub](https://github.com/fredkschott)\n* **[02:17](#t=02:17)** What is Astro and why should someone use it?\n* **[04:57](#t=04:57)** What can you build with Astro?\n* **[06:11](#t=06:11)** What\'s an island in content?\n* **[09:43](#t=09:43)** How do routes work with Astro?\n* **[12:30](#t=12:30)** How is Markdown handled in Astro?\n* [mdxjs](https://mdxjs.com)\n* **[14:32](#t=14:32)** How does Astro work on the edge?\n* **[18:15](#t=18:15)** How does Astro v2 handle data fetching?\n* **[23:25](#t=23:25)** Integrations with Astro\n* **[26:38](#t=26:38)** Astro AI bot?\n* [AI Langchain](https://github.com/hwchase17/langchain/)\n* **[30:40](#t=30:40)** Error overlay design\n* **[36:10](#t=36:10)** What are some of the most important upgrades in v2?\n* **[37:18](#t=37:18)** Hybrid rendering\n* **[40:27](#t=40:27)** Astro\'s image component\n* [Squoosh](https://squoosh.app)\n* **[44:39](#t=44:39)** What happened to snowpack? Pikapkg?\n* **[46:48](#t=46:48)** What is the financial model for Astro?\n* **[50:28](#t=50:28)** Supper Club questions\n* [Obsidian](https://obsidian.md)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Chat Langchain](https://chat.langchain.dev)\n\n## Shameless Plugs\n\n* [Astro](https://astro.build)\n* [Astro Discord](https://astro.build/chat)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'eb363e049c589ca9bec47bc49bcefdd637a93bc0995c6b5e72547328b82d16af', 'supper-club-astro-2-0-with-fred-schott', '/shows/580 - Supper Fred Schott.md', '2023-10-16 20:07:57.339', '2023-10-27 15:58:15.304', 'SUPPER'),
('syntax_podcast_show_00581', 581, 'Clean vs Sloppy Code', '2023-02-27 12:00:00.598', 'https://traffic.libsyn.com/syntax/Syntax_-_581.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the difference between sloppy code and clean code, how to establish rules for your code base, and how to enforce your rules.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[00:46](#t=00:46)** Sponsor: Sentry\n* **[01:51](#t=01:51)** Uses performance issues\n* [Uses.tech](https://uses.tech)\n* **[04:23](#t=04:23)** Understand Sloppy Code\n* **[10:17](#t=10:17)** Syntax website timestamp issue\n* **[12:56](#t=12:56)** Establish rules to fix sloppy code\n* **[16:35](#t=16:35)** Adding a feature, do you refactor an unrelated function?\n* **[23:07](#t=23:07)** How do you enforce rules?\n* [GitHub Actions](https://docs.github.com/en/actions)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets', 'c622b59274e49b65d12df6ab72f8aaf485f263672733cc2c0663a485a0b361c9', 'clean-vs-sloppy-code', '/shows/581 - Hasty clean code.md', '2023-10-16 20:07:57.465', '2023-10-27 15:58:15.406', 'HASTY');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00582', 582, 'AI and Coding with ChatGPT', '2023-03-01 12:00:00.240', 'https://traffic.libsyn.com/syntax/Syntax_-_582.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the current landscape of AI, how AI is trained, is AI going to take your job, who\'s going to train AI, and adding AI to your applications.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:11:10](#t=00:11:10)** Welcome\n* **[01:58:01](#t=01:58:01)** Sponsor: Sentry\n* **[03:16:05](#t=03:16:05)** What this episode is not going to be\n* **[07:36:11](#t=07:36:11)** The current landscape\n* [Chat GPT](https://openai.com/blog/chatgpt/)\n* [GitHub Copilot](https://github.com/features/copilot)\n* [Warp Completions](https://docs.warp.dev/features/completions)\n* [Midjourney](https://www.midjourney.com)\n* [Bing AI](https://www.bing.com/?/ai)\n* [From Bing to Sydney](https://stratechery.com/2023/from-bing-to-sydney-search-as-distraction-sentient-ai/)\n* [Why a Chat with Bing Left Me Deeply Unsettled](https://www.nytimes.com/2023/02/16/technology/bing-chatbot-microsoft-chatgpt.html)\n* [Tensorflow](https://www.tensorflow.org)\n* [Stable Diffusion](https://stablediffusionweb.com)\n* [Amazing AI](https://sindresorhus.com/amazing-ai)\n* [Dall E](https://openai.com/dall-e-2/)\n* **[15:26:11](#t=15:26:11)** Timeline of growth of AI\n* [AI Timeline](https://lifearchitect.ai/timeline/)\n* **[16:24:11](#t=16:24:11)** What is a model for AI?\n* **[24:20:11](#t=24:20:11)** How do you use AI?\n* **[33:14:00](#t=33:14:00)** Code brushes\n* **[35:57:18](#t=35:57:18)** Midjourney\n* [Yandex](https://yandex.com)\n* **[40:13:18](#t=40:13:18)** Is it going to take your job?\n* [Canva](https://www.canva.com)\n* [Cal](https://cal.com)\n* **[50:22:19](#t=50:22:19)** Cost prohibitive\n* **[52:26:20](#t=52:26:20)** Who\'s going to train the robots?\n* **[57:29:12](#t=57:29:12)** Adding AI to your apps\n* **[58:50:11](#t=58:50:11)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Motion sensor](https://amzn.to/41fkKaK)\n* Wes: [Apple Watch Ultra](https://www.apple.com/shop/buy-watch/apple-watch-ultra)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '950dd34300dce88990b955d28f904f3ea3f827cc821c05ccbfccd9d7fdb98baa', 'ai-and-coding-with-chatgpt', '/shows/582 - AI Coding.md', '2023-10-16 20:07:57.499', '2023-10-27 15:58:15.461', 'TASTY'),
('syntax_podcast_show_00583', 583, 'Supper Club × Visual Coding Languages With Steve Sewell', '2023-03-03 12:00:00.026', 'https://traffic.libsyn.com/syntax/Syntax_-_583.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Steve Sewell about Builder.io, Qwik, Partytown, and the tricks and tips he\'s learned in building apps for the modern web.\n\n## Show Notes\n\n* **[00:37](#t=00:37)** Welcome\n* **[01:14](#t=01:14)** Guest introduction\n* [Steve on Twitter](https://twitter.com/Steve8708)\n* [Steve on GitHub](https://github.com/steve8708)\n* [Builder.io](https://www.builder.io/)\n* [Builder.io/demo](https://builder.io/demo)\n* **[04:07](#t=04:07)** Builder works with any tech stack?\n* **[06:29](#t=06:29)** Where is the structure of the site coming from?\n* **[07:28](#t=07:28)** What is Builder.io?\n* **[11:34](#t=11:34)** What\'s the workflow for updating content?\n* **[13:03](#t=13:03)** What is Builder built in?\n* [Mobx](https://mobx.js.org/README.html)\n* **[14:36](#t=14:36)** Moving from Figma to HTML\n* **[18:41](#t=18:41)** Is an app like this divs all the way down?\n* **[24:55](#t=24:55)** Stories of browser gremlins building?\n* **[26:29](#t=26:29)** Advice for anyone building drag and drop\n* [Fullstory](https://www.fullstory.com)\n* **[29:04](#t=29:04)** Does FPS play a part in development?\n* **[33:31](#t=33:31)** Do you use SVG?\n* **[36:15](#t=36:15)** Where does Qwik and Partytown fit into all of it?\n* [Qwik](https://qwik.builder.io)\n* [Partytown](https://partytown.builder.io)\n* **[46:45](#t=46:45)** How does accessibility play into Builder?\n* **[49:44](#t=49:44)** Supper club questions\n* **[54:30](#t=54:30)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Dead Space Remake](https://en.wikipedia.org/wiki/Dead_Space_(2023_video_game))\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'e967e81150126b74e1c45a7ec90785d7f73f8f78247fe3e9a7837373f1995e36', 'supper-club-visual-coding-languages-with-steve-sewell', '/shows/583 - Supper Builder.md', '2023-10-16 20:07:57.539', '2023-10-27 15:58:15.514', 'SUPPER'),
('syntax_podcast_show_00584', 584, 'Node in the Browser × WebContainers + NodeBox', '2023-03-06 12:00:00.674', 'https://traffic.libsyn.com/syntax/Syntax_-_584.mp3', '\nIn this Hasty Treat, Scott and Wes talk about two new services that allow you to run Node in the browser, WebContainers + NodeBox. Why Node in the browser? How does it work? And what are the differences and limitations of the services?\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:14](#t=01:14)** Sponsor: Sentry\n* **[02:45](#t=02:45)** Webcontainers and NodeBox\n* [Introducing WebContainers](https://blog.stackblitz.com/posts/introducing-webcontainers/)\n* [Code Sandbox](https://codesandbox.io)\n* [CodePen](https://codepen.io)\n* [Replit](https://replit.com)\n* [GitHub Codespaces](https://github.com/features/codespaces)\n* **[06:42](#t=06:42)** Why Node.js in the browser?\n* **[11:08](#t=11:08)** How does it work?\n* **[13:10](#t=13:10)** Clientside APIs\n* **[14:27](#t=14:27)** Using iFrame to proxy messages\n* **[17:39](#t=17:39)** Are these open source?\n* **[19:22](#t=19:22)** Differences between the two services\n* **[21:10](#t=21:10)** Wes to Figma, Scott to Penpot\n* [Figma](https://www.figma.com/)\n* [Penpot](https://penpot.app/)\n* **[24:51](#t=24:51)** Limitations\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '919a35ba57ad9a5d317e609d722cfa6f3a430b6713cfcf4ae4048d59087c4733', 'node-in-the-browser-webcontainers-nodebox', '/shows/584 - Node in the browser.md', '2023-10-16 20:07:57.759', '2023-10-27 15:58:15.644', 'HASTY'),
('syntax_podcast_show_00585', 585, 'Fundamentals × What Makes a Website Slow?', '2023-03-08 12:00:00.567', 'https://traffic.libsyn.com/syntax/Syntax_-_585.mp3', '\nIn this episode of Syntax, Wes and Scott talk through all the reasons your website might be slow, and how you can troubleshoot a slow website such as issues on the server, large assets, caching, CSS, JavaScript, latency, and more.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* [Glove 80 keyboard](https://www.moergo.com/)\n* [Raycast](https://www.raycast.com/)\n* **[03:06](#t=03:06)** Sponsor: Sentry\n* **[05:15](#t=05:15)** What makes a website slow?\n* [Uses.tech](https://uses.tech/)\n* **[06:29](#t=06:29)** Server Generation Times\n* **[13:33](#t=13:33)** Large payloads\n* [Redis](https://redis.io/)\n* [Gzip](https://www.gnu.org/software/gzip/)\n* [Brotli compression](https://en.wikipedia.org/wiki/Brotli)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Cloudinary](https://cloudinary.com)\n* **[18:13](#t=18:13)** Assets being too large\n* **[23:01](#t=23:01)** Caching assets\n* **[28:25](#t=28:25)** CDN\n* **[30:35](#t=30:35)** Caching 101\n* **[37:04](#t=37:04)** Render blocking requests\n* **[40:01](#t=40:01)** CSS\n* **[42:25](#t=42:25)** JavaScript\n* **[44:51](#t=44:51)** Latency\n* **[49:17](#t=49:17)** Flash of dark mode or unsigned out\n* **[55:00](#t=55:00)** Data uris\n* [Content-visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility)\n* [vite-plugin-singlefile](https://www.npmjs.com/package/vite-plugin-singlefile)\n* [Pool in your URL](https://wesbos.com/pool-in-your-url)\n* **[58:11](#t=58:11)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [3Blue1Brown](https://www.youtube.com/@3blue1brown)\n* Wes: [Suavecito Firme Clay Pomade](https://suavecito.com/products/firme-clay-pomade)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '7c418a64449c8a393b0cb219864c16969c7aaa5874aed70a3955d31242cf5e77', 'fundamentals-what-makes-a-website-slow', '/shows/585 - speed on apps.md', '2023-10-16 20:07:57.793', '2023-10-27 15:58:15.696', 'TASTY'),
('syntax_podcast_show_00586', 586, 'Supper Club × Digital Nomad with Eric Sartorius', '2023-03-10 12:00:00.813', 'https://traffic.libsyn.com/syntax/Syntax_-_586.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Eric Sartorius about his life as a digital nomad - including recently climbing Kilimanjaro, his tips for travel deals, crazy experiences while travelling, and what he brings on the road with him.\n\n## Show Notes\n\n- **[01:02](#t=01:02)** Guest introduction\n- [EricSartorius.com](https://www.ericsartorius.com/)\n- [Eric on GitHub](https://github.com/ericssartorius)\n- [PureFunc](https://www.purefunc.io/)\n- [Train Surfing](https://www.youtube.com/@shiey)\n- [Get Stream](https://getstream.io/)\n- **[02:51](#t=02:51)** Where have you travelled?\n- **[04:27](#t=04:27)** What are the challenges of being a digital nomad?\n- **[09:08](#t=09:08)** How do you research before travel?\n- **[13:04](#t=13:04)** How do you approach applying for a job?\n- **[21:10](#t=21:10)** Do you travel with other digital nomads?\n- [R16 video](https://www.youtube.com/watch?v=44kKLeDKIIc)\n- **[22:43](#t=22:43)** What are the best locations you\'ve been?\n- **[24:21](#t=24:21)** What about health and insurance?\n- [Tiny Toones](https://www.tinytoones.org/)\n- [TSA post raw meat on carousel](https://www.travelandleisure.com/travel-news/tsa-posts-raw-meat-on-carousel-seattle-airport)\n- **[28:21](#t=28:21)** What motivated you to want to climb Kilimanjaro?\n- **[41:14](#t=41:14)** What gear do you travel with for web dev?\n- [Osprey Talon 33](https://www.osprey.com/us/en/product/talon-33-TALON33F20.html?sku=10002695&nulsc=true)\n- [Packing cubes](https://www.rei.com/product/195445/rei-co-op-expandable-packing-cube-set-smallmediumlarge)\n- [Outlier](https://outlier.nyc/)\n- [Google Fi](https://fi.google.com/about/?pli=1)\n- [Google Flights explore](https://www.google.com/travel/explore)\n- **[51:12](#t=51:12)** Using credit card points for flights\n- **[54:45](#t=54:45)** How do you handle customs?\n- **[00:13](#t=00:13)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Comfort 2.0 Czech sock shoes](https://skinners.cc/en/skinners-comfort?10-color=77-sand)\n\n## Shameless Plugs\n\n- [PureFunc](https://www.purefunc.io/)\n- [@TheEpicLife on Instagram](https://www.instagram.com/theepiclife/)\n- [Pamoja Safaris](https://www.pamojasafaris.com/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'ee3d1058e38c5176d55f62ba22792de4e07a824fd86b4e6488c70e7809e8d742', 'supper-club-digital-nomad-with-eric-sartorius', '/shows/586 - Supper Erc.md', '2023-10-16 20:07:57.843', '2023-10-27 15:58:15.760', 'SUPPER'),
('syntax_podcast_show_00587', 587, 'Web Streams Explained', '2023-03-13 12:00:00.952', 'https://traffic.libsyn.com/syntax/Syntax_-_587.mp3', '\nIn this Hasty Treat, Scott and Wes explain the what, why, and how of web streaming, and some of the jargon you might encounter with web streams.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:26:11](#t=00:26:11)** Welcome\n* **[00:59:07](#t=00:59:07)** Sponsor: Sentry\n* **[01:39:17](#t=01:39:17)** What are Web Streams?\n* **[03:15:11](#t=03:15:11)** Why are web streams picking up steam lately?\n* **[04:41:21](#t=04:41:21)** How are web streams streaming?\n* **[09:28:11](#t=09:28:11)** Searching a database can use streaming\n* **[13:07:11](#t=13:07:11)** Web stream jargon\n* **[18:06:11](#t=18:06:11)** FileReader is a Stream\n* **[19:31:05](#t=19:31:05)** Other Types of Streams\n* [Cloudlfare HTML Rewriter](https://developers.cloudflare.com/workers/runtime-apis/html-rewriter#:~:text=The%20HTMLRewriter%20class%20allows%20developers%20to%20build%20comprehensive,jQuery-like%20experience%20directly%20inside%20of%20your%20Workers%20application.)\n* **[21:50:05](#t=21:50:05)** ReadableStream and Writable Stream\n* **[27:23:00](#t=27:23:00)** Creating a Writable Stream\n* **[28:39:11](#t=28:39:11)** TextDecoderStream\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c28f9cfd6dd7116ddcfa97d3b8b4e8e225025144290994858d346c10d7410331', 'web-streams-explained', '/shows/587 - Hasty Web Streams.md', '2023-10-16 20:07:57.945', '2023-10-27 15:58:15.856', 'HASTY'),
('syntax_podcast_show_00588', 588, 'New Syntax Website Brainstorm! IRL!', '2023-03-15 12:00:00.619', 'https://traffic.libsyn.com/syntax/Syntax_-_588.mp3', '\nIn this episode of Syntax, Wes and Scott are in the same room together brainstorming new ideas for the Syntax.fm website: search, transcripts, video, tags, audio player, podcast hosting, and more!\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[01:08](#t=01:08)** Sponsor: Sentry\n* **[01:43](#t=01:43)** Brainstorming for Syntax\'s new website\n* **[02:27](#t=02:27)** Are there good podcast websites out there?\n* **[03:26](#t=03:26)** Homepage design\n* **[07:33](#t=07:33)** How would you handle login?\n* **[09:40](#t=09:40)** Search on the site\n* [SvelteKit docs](https://kit.svelte.dev/docs/)\n* [Flexsearch](https://github.com/nextapps-de/flexsearch)\n* **[13:59](#t=13:59)** Transcripts\n* [Open AI Whisper](https://github.com/openai/whisper)\n* [Whisper AI for podcasters](https://colab.research.google.com/drive/1-WOkolnSK5xbvf5SCBtvJYa-CJF6l7lO?usp=sharing#scrollTo=Pq7FNz3OU9kZ)\n* **[18:25](#t=18:25)** The player\n* **[21:11](#t=21:11)** Tagging\n* **[23:45](#t=23:45)** Video\n* [Linus Tech Tips - WAN Show](https://www.youtube.com/watch?v=boPRXV0VmEk)\n* **[27:45](#t=27:45)** Show notes\n* **[29:57](#t=29:57)** Surfacing good content on the podcast\n* **[35:30](#t=35:30)** Interactions\n* **[36:25](#t=36:25)** Deploy to Podcast Host\n* [Libsyn](https://libsyn.com)\n* [Editor Chris](https://www.lemonproductions.ca/portfolio/syntax-fm/) [on Mastodon](https://mastodon.social/@ichris)\n* **[38:43](#t=38:43)** Code base\n* [Syntax website on GitHub](https://github.com/wesbos/Syntax)\n* **[45:21](#t=45:21)** Listener feedback\n* **[46:27](#t=46:27)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Screen door dog](https://amzn.to/3IDV4fK)\n* Wes: [Apple Watch bands](https://www.aliexpress.com/w/wholesale-Apple-Watch-band.html)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '187714db0690de1af965cc8935dd0712c68cf7947672e54b829c095486a9d45f', 'new-syntax-website-brainstorm-irl', '/shows/588 - Tasty Syntax web.md', '2023-10-16 20:07:57.981', '2023-10-27 15:58:15.907', 'TASTY'),
('syntax_podcast_show_00589', 589, 'Supper Club × Next.js on AWS + Serverless with Dax Raad', '2023-03-17 12:00:00.845', 'https://traffic.libsyn.com/syntax/Syntax_-_589_v2.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Dax Raad about building on serverless infrastructure, Next.js, and SST.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:05](#t=01:05)** Sponsor: Sentry\n* **[02:05](#t=02:05)** Who is Dax Raad?\n* [Dax on Twitter](https://twitter.com/thdxr)\n* [thdxr.com](https://thdxr.com)\n* [Tomorrow.fm Podcast](https://tomorrow.fm)\n* [SST.dev](https://sst.dev)\n* **[04:22](#t=04:22)** Why doesn\'t AWS have a simple way to build on top of it?\n* **[07:46](#t=07:46)** What is Open Next?\n* [Vercel](https://vercel.com)\n* [Next.js](https://nextjs.org)\n* [Open-Next.js](https://open-next.js.org/)\n* **[10:25](#t=10:25)** How many people are involved in building Open Next?\n* **[11:14](#t=11:14)** Mapping Next.js to Amazon products\n* **[14:25](#t=14:25)** What is the edge?\n* **[18:56](#t=18:56)** Pricing in serverless\n* **[23:33](#t=23:33)** What about image assets?\n* **[25:02](#t=25:02)** Is the CDK a layer on top of something Amazon is doing?\n* [Amazon CDK](https://aws.amazon.com/cdk/)\n* **[27:23](#t=27:23)** What is terraform?\n* [Terraform](https://developer.hashicorp.com/terraform/intro)\n* **[28:50](#t=28:50)** What is SST and why SST?\n* **[30:54](#t=30:54)** Do I build with SST or on top of SST?\n* **[32:06](#t=32:06)** How do you do local development with SST?\n* **[37:01](#t=37:01)** What about databases with SST?\n* **[40:12](#t=40:12)** What about build pipelines?\n* **[42:28](#t=42:28)** What is Seed?\n* [Seed](https://seed.run)\n* **[43:52](#t=43:52)** Any advice for someone learning AWS?\n* [SST on YouTube](https://www.youtube.com/@sst-dev)\n* **[46:05](#t=46:05)** Supper Club questions\n* [Neovim](https://neovim.io)\n* [Toyko Night theme](https://github.com/folke/tokyonight.nvim)\n* [Nerd Fonts](https://www.nerdfonts.com/font-downloads)\n* [Astro](https://astro.build)\n* [TypeScript](https://www.typescriptlang.org)\n* [Alacritty](https://alacritty.org)\n* [i3](https://i3wm.org)\n* [Cloudflare](https://www.cloudflare.com/)\n* [Inside the Meteoric Rise—and More Epic Flop—of HQ Trivia](https://www.thedailybeast.com/inside-hq-trivias-meteoric-rise-and-more-epic-flop)\n* **[52:45](#t=52:45)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Planetscale](https://planetscale.com)\n\n## Shameless Plugs\n\n* [Rebase.tv](https://rebase.tv)\n* [@RebaseTV on Twitter](https://twitter.com/rebasetv)\n* [Tomorrow.fm episode on Rebase.tv](https://tomorrow.fm/10)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c134c01efa81fb30cae94c4684648e113138bf6588365e9b97c22e82eb7fc4a9', 'supper-club-next-js-on-aws-serverless-with-dax-raad', '/shows/589 - Supper Dax.md', '2023-10-16 20:07:58.018', '2023-10-27 15:58:15.959', 'SUPPER'),
('syntax_podcast_show_00590', 590, 'HTTPS + Tunnel Your Localhost - Cloudflare Tunnels, Ngrok, and more!', '2023-03-20 12:00:00.227', 'https://traffic.libsyn.com/syntax/Syntax_-_590.mp3', '\nIn this Hasty Treat, Scott and Wes talk about why you might need to tunnel to your local computer, and how to set that up securely.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:09](#t=01:09)** GitHub tarball web streams\n* **[05:09](#t=05:09)** Sponsor: Sentry\n* **[05:48](#t=05:48)** Why would I need security locally?\n* [Caddy Server](https://caddyserver.com/)\n* **[11:23](#t=11:23)** Cookie issues\n* **[13:04](#t=13:04)** Examples of things that need a secure context\n* [MDN Features restricted to secure contexts](https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts/features_restricted_to_secure_contexts)\n* **[14:58](#t=14:58)** What is tunneling?\n* **[19:22](#t=19:22)** Cloudflare Tunnels\n* [Cloudflared](https://github.com/cloudflare/cloudflared)\n* [Cloudflare Tunnel](https://twitter.com/wesbos/status/1634310926219333642)\n* **[20:50](#t=20:50)** nGrok\n* [ngrok](https://ngrok.com/)\n* **[23:22](#t=23:22)** Local tunnel\n* [Local Tunnel](https://theboroer.github.io/localtunnel-www/)\n* **[24:55](#t=24:55)** Tunnel to\n* [Tunnel to dev - Expose your local web server to the internet with a public URL](https://tunnelto.dev/)\n* **[26:02](#t=26:02)** Cloudflare subdomain\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'b5882bd34c5cd181d901153a9761e139591ade524c1be6897c2156073676aa27', 'https-tunnel-your-localhost-cloudflare-tunnels-ngrok-and-more', '/shows/590 - Hasty tunnels.md', '2023-10-16 20:07:58.124', '2023-10-27 15:58:16.095', 'HASTY'),
('syntax_podcast_show_00591', 591, 'Potluck × Learning Web Dev × Video Streaming × Mono Repos', '2023-03-22 12:00:00.216', 'https://traffic.libsyn.com/syntax/Syntax_-_591.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about learning web dev at an older age, making your apps look better, building a video streaming site, mono repo vs regular, and more!\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[00:31](#t=00:31)** Sponsor: Sentry\n* **[01:43](#t=01:43)** DST update\n* [Tales of Taboo](https://pod.link/1457365096)\n* **[03:45](#t=03:45)** Is it too late to learn web dev at an older age?\n* **[10:20](#t=10:20)** How do people produce work so quickly?\n* **[13:47](#t=13:47)** How can I make my web apps look better visually?\n* [Dribbble - Discover the World’s Top Designers & Creative Professionals](https://dribbble.com/)\n* [Tailwind UI - Official Tailwind CSS Components & Templates](https://tailwindui.com/)\n* [CSS · Bootstrap](https://getbootstrap.com/)\n* **[18:41](#t=18:41)** Not losing the niceties with not having to do a full page load\n* **[22:23](#t=22:23)** Should I use a script to generate an index JS/TS file?\n* **[24:55](#t=24:55)** If you were going to make a video streaming website, what technologies would you use?\n* [The API to Video | Mux](https://www.mux.com/)\n* [Vimeo – Video Experience Platform](https://vimeo.com/)\n* [Live Streaming on AWS | AWS Solutions](https://aws.amazon.com/solutions/implementations/live-streaming-on-aws/)\n* [Video on Demand | AWS Solutions](https://aws.amazon.com/solutions/implementations/video-on-demand-on-aws/)\n* [Cloudflare Stream | Video streaming made easy and affordable at scale](https://www.cloudflare.com/products/cloudflare-stream/)\n* **[29:11](#t=29:11)** What should I do if my boss wants me to move up the business ladder?\n* **[31:58](#t=31:58)** I\'m confused about hydration in frameworks like SvelteKit.\n* **[37:07](#t=37:07)** What\'re the advantages of a mono repo over a regular one?\n* **[39:50](#t=39:50)** Is it better to stay put at a place even if you\'re unhappy right now?\n* **[43:13](#t=43:13)** How should I ingest tv scripts into a database?\n* **[46:24](#t=46:24)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Stronger By Science Podcast](https://www.sbspod.com/)\n* Wes: [Merten and Storck Carbon Steel](https://mertenandstorck.com/collections/carbon-steel)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '605d19f116bd2ab65c4d8f9e4b7e430bfed8e56b0cd89e03eebd154a77f4fbf5', 'potluck-learning-web-dev-video-streaming-mono-repos', '/shows/591 - Tasty Potluck.md', '2023-10-16 20:07:58.161', '2023-10-27 15:58:16.170', 'TASTY'),
('syntax_podcast_show_00592', 592, 'Supper Club × The Role Of UX Designers In Humanizing The Future with Travis Neilson', '2023-03-24 12:00:00.559', 'https://traffic.libsyn.com/syntax/Syntax_-_592.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Travis Neilson about his work at Google, YouTube music, and where AI is at now, and where it\'s headed in the future.\n\n## Show Notes\n\n* **[00:37](#t=00:37)** Welcome\n* **[00:55](#t=00:55)** Guest introduction\n* [Travis Neilson (@travisneilson)](https://twitter.com/travisneilson)\n* [Travis Neilson dot com](http://travisneilson.com/)\n* [Travis Neilson on Skills Gap, Design, Focus and Working at Google — Syntax Podcast 142](https://syntax.fm/show/142/travis-neilson-on-skills-gap-design-focus-and-working-at-google)\n* [Awwards Conference talk](https://conference.awwwards.com/talks/ai/ux-the-role-of-ux-designers-in-humanizing-the-future)\n* [https://www.youtube.com/LittleMusicBoxes](https://www.youtube.com/LittleMusicBoxes)\n* **[06:29](#t=06:29)** Convos about AI\n* **[07:49](#t=07:49)** How do we keep humanity with AI?\n* **[15:42](#t=15:42)** Is this the printing press or is this putting everyone out of a job?\n* **[19:21](#t=19:21)** What is Google using AI for these days?\n* **[25:59](#t=25:59)** How do we keep human interface via AI?\n* **[31:18](#t=31:18)** What is the evolution of AI chat windows?\n* **[34:05](#t=34:05)** How do you nourish your AI with data?\n* **[39:59](#t=39:59)** Halluncinations in AI\n* **[47:46](#t=47:46)** What models are exciting to you?\n* **[52:01](#t=52:01)** We\'re building the window for the next generation\n* **[54:55](#t=54:55)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [The Age of Spiritual Machines](https://amzn.to/3mwehsl)\n* [The Singularity is Near](https://amzn.to/3KWfm6R)\n* [The Shape of Design](https://amzn.to/3F2oJy6)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'f6bf3ace2463d80ed5fc26c194006563970a49fc6df3477b6b429254674128b4', 'supper-club-the-role-of-ux-designers-in-humanizing-the-future-with-travis-neilson', '/shows/592 - Supper.md', '2023-10-16 20:07:58.209', '2023-10-27 15:58:16.219', 'SUPPER'),
('syntax_podcast_show_00593', 593, 'Coding with the Open AI / Chat GPT API', '2023-03-27 12:00:00.527', 'https://traffic.libsyn.com/syntax/Syntax_-_593.mp3', '\nIn this Hasty Treat, Scott and Wes talk about what can be done with the OpenAI API, how to get started with it, pricing, tuning your model, and gotchas for getting started with the OpenAI API.\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:17](#t=01:17)** Sponsor: Sentry\n* **[02:39](#t=02:39)** What is the OpenAI API?\n* **[05:11](#t=05:11)** Getting started with the API\n* **[07:41](#t=07:41)** How run OpenAI\n* [OpenAI API](https://openai.com/blog/openai-api)\n* **[14:16](#t=14:16)** GPT4 update\n* **[17:58](#t=17:58)** Tune your models\n* **[19:46](#t=19:46)** Generating questions with ChatGPT\n* **[24:30](#t=24:30)** Speech to text\n* [Otter.ai - Voice Meeting Notes & Real-time Transcription](https://otter.ai/)\n* [Descript | All-in-one video & podcast editing, easy as a doc.](https://www.descript.com/)\n* **[26:12](#t=26:12)** Related API\n* **[27:33](#t=27:33)** LangChain\n* **[32:12](#t=32:12)** Save your replies\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '433db2c67a6522ff7e6eda0cdf08829e0a124ffa17fde7ef0e7f108b86bb9e64', 'coding-with-the-open-ai-chat-gpt-api', '/shows/593 - Hasty.md', '2023-10-16 20:07:58.297', '2023-10-27 15:58:16.334', 'HASTY'),
('syntax_podcast_show_00594', 594, 'Potluck × Testing Animations × Tools for Learning × Coding Related Injuries', '2023-03-29 12:00:00.148', 'https://traffic.libsyn.com/syntax/Syntax_-_594.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about what to do with client projects, testing animations, evaluating front-end frameworks, tools to use when learning, and coding related injuries.\n\n## Sentry  - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:25](#t=00:25)** Sponsor: Sentry\n* **[01:22](#t=01:22)** Landscaping update\n* **[02:27](#t=02:27)** What do you do when you are done a client project?\n* **[10:09](#t=10:09)** Should I keep animations in our tests so our tests match prod behavior?\n* **[14:05](#t=14:05)** How does ChatGPT fill the responses to the prompt?\n* **[17:14](#t=17:14)** What is the best way to evaluate and choose a front-end framework for a project?\n* **[21:10](#t=21:10)** Should functions only be used strictly for code that is going to be re-used?\n* **[26:03](#t=26:03)** What kind of tools and processes do you use when learning?\n* [Obsidian](https://obsidian.md/)\n* [Roam Research – A note taking tool for networked thought.](https://roamresearch.com/)\n* **[30:19](#t=30:19)** What are your opinions on using \"display: grid\" simply to be able use the gap property on the elements inside?\n* **[33:57](#t=33:57)** What do you guys think of being a 1-language dev?\n* **[36:38](#t=36:38)** What are some tips you have to push back on requirements from clients?\n* **[41:11](#t=41:11)** Have you guys ever had any coding related stress injuries, like back issues or carpal tunnel?\n* [MoErgo Glove80 Wireless Split Ergonomic Keyboard](https://www.moergo.com/)\n* [GitHub Next | Hey, GitHub!](https://githubnext.com/projects/hey-github/)\n* **[48:41](#t=48:41)** What do you think of using \"Feature Flags\" in the codebase to enable / disable features at runtime?\n* **[51:19](#t=51:19)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [History for Granite](https://www.youtube.com/@HistoryforGRANITE/)\n* Wes: [GreatScott!](https://www.youtube.com/channel/UC6mIxFTvXkWQVEHPsEdflzQ), [bigclivedotcom](https://www.youtube.com/channel/UCtM5z2gkrGRuWd0JQMx76qA)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Discord](https://discord.gg/W5y68HMfZV)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '198eb609a6b6f2009053bd9d7ccc069caf946d7876fa2f8fd715ff4a77326023', 'potluck-testing-animations-tools-for-learning-coding-related-injuries', '/shows/594 - Potluck.md', '2023-10-16 20:07:58.344', '2023-10-27 15:58:16.396', 'TASTY'),
('syntax_podcast_show_00595', 595, 'Supper Club × Web Components and Lit with Justin Fagnani of Google', '2023-03-31 12:00:00.571', 'https://traffic.libsyn.com/syntax/Syntax_-_595_wsponsor.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Justin Fagnani about working with web components, using Lit, how routing and state are handled, thoughts on signals, and what is the future of web components?\n\n## Sentry - Sponsor\n\nIf you want to know what’s happening with your code, track errors and monitor performance with Sentry. Sentry’s Application Monitoring platform helps developers see performance issues, fix errors faster, and optimize their code health. Cut your time on error resolution from hours to minutes. It works with any language and integrates with dozens of other services. Syntax listeners new to Sentry can get two months for  free by visiting [Sentry.io](https://sentry.io) and using the coupon code TASTYTREAT during sign up.\n\n## Show Notes\n\n* **[00:49:11](#t=00:49:11)** Guest introduction\n* **[01:03:00](#t=01:03:00)** Sponsor: Sentry\n* **[02:02:11](#t=02:02:11)** Why do people use React when we have web components and lit?\n* **[03:57:14](#t=03:57:14)** Who is Justin Fagnani?\n* [Justin Fagnani](https://justinfagnani.com/)\n* [Justin Fagnani (@justinfagnani)](https://twitter.com/justinfagnani)\n* [Justin Fagnani · GitHub](https://github.com/justinfagnani)\n* [Justin Fagnani - Fosstodon](https://fosstodon.org/@justinfagnani)\n* [Lit (@buildWithLit)](https://twitter.com/buildWithLit)\n* [Lit](https://lit.dev/)\n* [Google App Maker](https://en.wikipedia.org/wiki/Google_App_Maker)\n* **[04:55:02](#t=04:55:02)** What are web components?\n* [The Extensible Web Manifesto](https://github.com/extensibleweb/manifesto)\n* **[05:59:08](#t=05:59:08)** What is the shadow dom?\n* **[08:56:02](#t=08:56:02)** Was there an intention for a layer on top of web components?\n* **[13:22:09](#t=13:22:09)** What is Lit?\n* **[16:19:23](#t=16:19:23)** What are the benefits of using a library for web components?\n* [Custom Elements Everywhere](https://custom-elements-everywhere.com/)\n* **[21:20:14](#t=21:20:14)** Why would write in React and not in web components?\n* **[24:24:18](#t=24:24:18)** How does CSS work with web components and Lit?\n* **[28:00:14](#t=28:00:14)** Using constructable stylesheets\n* [::part](https://developer.mozilla.org/en-US/docs/Web/CSS/::part)\n* [Constructable stylesheets/](https://web.dev/constructable-stylesheets/)\n* **[29:58:18](#t=29:58:18)** Does Lit do anything with CSS?\n* **[32:01:01](#t=32:01:01)** Does Lit do routing?\n* [Lit Mobx](https://www.npmjs.com/package/@adobe/lit-mobx)\n* **[34:06:02](#t=34:06:02)** How does Lit work with state?\n* **[34:52:15](#t=34:52:15)** What about signals?\n* **[38:49:00](#t=38:49:00)** Is Server Side Rendering possible with web components?\n* **[41:03:07](#t=41:03:07)** What websites are using Lit and/or web components?\n* **[44:26:08](#t=44:26:08)** What\'s the difference between Lit and Polymer?\n* **[45:44:17](#t=45:44:17)** What is the future of web components?\n* **[48:09:14](#t=48:09:14)** Supper club questions\n* [GitHub - w3c/csswg-drafts: CSS Working Group Editor Drafts](https://github.com/w3c/csswg-drafts)\n* **[56:36:20](#t=56:36:20)** SIIIIICK ××× PIIIICKS ×××\n\n* **[55:27](#t=55:27)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [The Last of Us | Official Website for the HBO Series | HBO.com](https://www.hbo.com/the-last-of-us)\n\n## Shameless Plugs\n\n* [Lit](https://lit.dev/)\n* [Lit Discord](https://lit.dev/discord/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '612d473bb95cff0c5cecaaeb7e65f85ee4a11498b638f6e3f41e7b263f15adae', 'supper-club-web-components-and-lit-with-justin-fagnani-of-google', '/shows/595 - Supper.md', '2023-10-16 20:07:58.381', '2023-10-27 15:58:16.451', 'SUPPER'),
('syntax_podcast_show_00596', 596, 'The New Import Map Standard', '2023-04-03 12:00:00.794', 'https://traffic.libsyn.com/syntax/Syntax_-_596.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the fact that import maps are in Safari Technical preview, and what that means for web developers.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[02:16](#t=02:16)** Import maps just dropped\n* **[04:09](#t=04:09)** Which browsers support it?\n* **[06:01](#t=06:01)** What is a map?\n* **[06:40](#t=06:40)** How does the syntax work?\n* **[09:35](#t=09:35)** What about dependency resolution?\n* **[10:25](#t=10:25)** What about bundlers?\n* **[13:17](#t=13:17)** How does this work with Deno?\n* [Deno — A modern runtime for JavaScript and TypeScript](https://deno.land/)\n* [Import Maps | Manual | Deno](https://deno.land/manual@v1.31.0/basics/import_maps)\n* [whatwg/fs · Issue #5 · wintercg/proposal-common-minimum-api](https://github.com/wintercg/proposal-common-minimum-api/issues/5#issuecomment-1470026193)\n* **[20:12](#t=20:12)** What about with node?\n* [Support import maps and bare import specifiers · Issue #43326 · microsoft/TypeScript](https://github.com/microsoft/TypeScript/issues/43326)\n* [Policies | Node.js v17.9.1 Documentation](https://nodejs.org/dist/latest-v17.x/docs/api/policy.html#example-import-maps-emulation)\n* **[21:22](#t=21:22)** What about Typescript?\n* **[22:43](#t=22:43)** Downsides to import maps\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '10103d1adf450ac2533a245f61bdc3ba06ef602a1e8ce1933879312da5e3c375', 'the-new-import-map-standard', '/shows/596 - Hasty Import maps.md', '2023-10-16 20:07:58.509', '2023-10-27 15:58:16.578', 'HASTY'),
('syntax_podcast_show_00597', 597, 'Stump’d Gameshow! Answering Coding Interview Questions from AI', '2023-04-05 12:00:00.084', 'https://traffic.libsyn.com/syntax/Syntax_-_597.mp3', '\nIn this episode of Syntax, Wes and Scott answer coding questions posed by ChatGPT like what\'s the difference between rem and em in CSS, the difference between a callback function and a promse in Node, what are Fastify plugins, and more!\n\n## Show Notes\n\n* **[00:19](#t=00:19)** The premise for this Stump\'d\n* **[05:46](#t=05:46)** Scott\'s weekend story\n* **[09:36](#t=09:36)** What is the difference between a for loop and a while loop in JavaScript?\n* **[11:11](#t=11:11)** What is the difference between the \"em\" and \"rem\" units in CSS, and when would you use each of them?\n* **[13:15](#t=13:15)** What is the difference between a callback function and a promise in Node.js?\n* **[14:57](#t=14:57)** In JavaScript, what is the difference between a function declaration, a function expression, and an arrow function, and how do they affect the concept of hoisting?\n* **[18:39](#t=18:39)** How do you define a custom scalar type in GraphQL?\n* **[21:30](#t=21:30)** With Deno, can you provide an example of an experimental API that requires the \"--unstable\" flag and explain its purpose?\n* **[26:59](#t=26:59)** What\'s the difference between a div and a span?\n* **[28:01](#t=28:01)** What is aspect ratio?\n* **[29:07](#t=29:07)** If it\'s not supported by all browsers, how could you maintain aspect ratio?\n* **[30:11](#t=30:11)** Can you explain the purpose of the beforeUpdate lifecycle function in Svelte, and provide a simple use case for it?\n* **[32:33](#t=32:33)** What is the difference between  unknown  and  any  in TypeScript, and when should each be used?\n* **[34:42](#t=34:42)** In TypeScript, what is a mapped type, and how can you use it to create a new type that makes all properties of an existing type optional?\n* **[36:21](#t=36:21)** What are Fastify plugins, and how can they be used to extend the functionality of a Fastify application?\n* **[37:57](#t=37:57)** In React, what is the purpose of the React.memo higher-order component, and how does it help improve the performance of a functional component?\n* **[39:53](#t=39:53)** How would you create a custom HTML element that is styled with CSS and has dynamic behavior using JavaScript?\n* **[41:57](#t=41:57)** What is the Intersection Observer API, and how can you use it to implement infinite scrolling in a web application?\n* **[49:00](#t=49:00)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Rodge Tapes](https://podbay.fm/p/the-rodge-tapes)\n* Wes: [Shenzhen Rebow Technology - Neon Sign](https://szrebow.en.alibaba.com/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3deba7e53547f4f7007bcafe8d903e70e80cef7652d41a655261464ad1244166', 'stump-d-gameshow-answering-coding-interview-questions-from-ai', '/shows/597 - Tasty.md', '2023-10-16 20:07:58.542', '2023-10-27 15:58:16.637', 'TASTY'),
('syntax_podcast_show_00598', 598, 'Supper Club × Fabian Kägy - Modern WordPress - Blocks, Page builders, Headless, Custom Fields', '2023-04-07 12:00:00.133', 'https://traffic.libsyn.com/syntax/Syntax_-_598.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Fabian Kägy about modern WordPress development, including what the local dev experience is like, changes to the block editor, how version control is handled, and more!\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* **[01:20](#t=01:20)** Who is Fabian Kägy?\n* [Fabian Kägy](https://fabian-kaegy.com/)\n* [Fabian Kaegy (@fabiankaegy)](https://twitter.com/fabiankaegy)\n* [Fabian Kägy (@fabiankaegy) on Instagram](https://www.instagram.com/fabiankaegy/)\n* [fabiankaegy on GitHub](https://github.com/fabiankaegy)\n* [10up | finely crafted websites and tools](https://10up.com/)\n* **[03:32](#t=03:32)** What is the local WordPress development workflow like in 2023?\n* [@wordpress/env](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/)\n* [Free Local WordPress Development](https://wpengine.com/local/)\n* **[05:35](#t=05:35)** Why do people still want to use WordPress?\n* [Builder.io - Drag & Drop Headless CMS](https://www.builder.io/)\n* [Website Builder — Create a Website in Minutes — Squarespace](https://www.squarespace.com/)\n* [Website Builder | Wix.com](https://www.wix.com/)\n* [Build optimized websites quickly, focus on your content | Docusaurus](https://docusaurus.io/)\n* **[09:08](#t=09:08)** Changes because of the block editor\n* **[11:50](#t=11:50)** Using a JSON file to configure design styles for your site\n* **[13:48](#t=13:48)** What is it like to develop with headless WordPress?\n* [10up/10up-toolkit: Official 10up asset building toolkit.](https://github.com/10up/10up-toolkit)\n* **[16:59](#t=16:59)** Are people using WordPress for applications besides websites?\n* **[19:20](#t=19:20)** What does version control look like in WordPress?\n* **[21:57](#t=21:57)** Are plugins using the database or the file system?\n* **[23:38](#t=23:38)** Is jQuery still a must have for WordPress?\n* **[25:30](#t=25:30)** How do you enqueue JavaScript?\n* **[27:56](#t=27:56)** Does WordPress support live reloading?\n* **[28:22](#t=28:22)** How can you host WordPress on the web?\n* [WordPress Hosting | WP Engine®](https://wpengine.com/)\n* [WordPress for the Enterprise | WordPress VIP](https://wpvip.com/)\n* **[29:11](#t=29:11)** What is the editing experience like in WordPress in 2023?\n* [The Composable Content Cloud - Sanity.io](https://www.sanity.io/)\n* [WPML - The WordPress Multilingual Plugin](https://wpml.org/)\n* [Polylang – Making WordPress multilingual](https://polylang.pro/)\n* **[34:01](#t=34:01)** How is WordPress handling CSS in 2023?\n* **[41:44](#t=41:44)** How do you make WordPress fast?\n* [Simplenote](https://simplenote.com/)\n* [Tumblr](https://www.tumblr.com/)\n* [Pocketcasts](https://pocketcasts.com/)\n* **[47:23](#t=47:23)** Where can you learn about WordPress development?\n* [Learn WordPress - There\'s always more to learn | Learn WordPress](https://learn.wordpress.org/)\n* [10up - Gutenberg Best Practices | 10up - Gutenberg Best Practices](https://gutenberg.10up.com/)\n* **[50:12](#t=50:12)** With blocks, do you write less PHP?\n* [ACF | Advanced Custom Fields Plugin for WordPress](https://www.advancedcustomfields.com/)\n* **[50:59](#t=50:59)** Supper Club Questions\n* **[55:09](#t=55:09)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Watch Shrinking | Apple TV+](https://tv.apple.com/us/show/shrinking/umc.cmc.apzybj6eqf6pzccd97kev7bs)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '9498ef8dc3671cdc61ed1f44f65195e58dd41cf0bfa17614717c7b8cf2cbf4c4', 'supper-club-fabian-kaegy-modern-wordpress-blocks-page-builders-headless-custom-fields', '/shows/598 - Supper Fabian.md', '2023-10-16 20:07:58.578', '2023-10-27 15:58:16.700', 'SUPPER'),
('syntax_podcast_show_00599', 599, 'oAuth APIs Explained', '2023-04-10 12:00:00.216', 'https://traffic.libsyn.com/syntax/Syntax_-_599.mp3', '\nIn this Hasty Treat, Scott and Wes talk all things oAuth - what is oAuth? What terms do you need to understand when working with oAuth? And tips for working with oAuth.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* [Office Space](https://en.wikipedia.org/wiki/Office_Space)\n* [HTTPS + Tunnel Your Localhost - Cloudflare Tunnels, Ngrok, and more! — Syntax Podcast 590](https://syntax.fm/show/590/https-tunnel-your-localhost-cloudflare-tunnels-ngrok-and-more)\n* **[01:56](#t=01:56)** What is oAuth?\n* **[05:30](#t=05:30)** Terminology in oAuth\n* **[07:52](#t=07:52)** Once you have a client ID\n* **[09:41](#t=09:41)** The callback URL\n* **[12:11](#t=12:11)** The refresh token\n* **[14:09](#t=14:09)** How a token could be stolen\n* **[17:43](#t=17:43)** State token\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '12a32cf53a35b783839ab6b53470dd90518eb62b6ace61bbecd98f6f86ee0384', 'oauth-apis-explained', '/shows/599 - Hasty.md', '2023-10-16 20:07:58.699', '2023-10-27 15:58:16.824', 'HASTY'),
('syntax_podcast_show_00600', 600, '600th Episode! Major Announcement and Swag Giveaway!', '2023-04-12 12:00:00.887', 'https://traffic.libsyn.com/syntax/Syntax_-_600-jZ8nX5DfKp.mp3', '\nIn the 600th episode of Syntax, Wes and Scott talk about the big announcement about Syntax\'s future, exciting new opportunities coming for the show, and more!\n\nWe\'re giving away 600 t-shirts, 50 skate decks and 50 yeti ramblers. Visit [swag.syntax.fm](https://swag.syntax.fm/) for more info! You\'ll need a code - so search high and low for one 👀.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Scott\'s big announcement\n* T64JO\n* **[00:58](#t=00:58)** Our big announcement\n* **[01:39](#t=01:39)** Guest introduction\n* FNWOV\n* [David Cramer (@zeeg)](https://twitter.com/zeeg)\n* Q5CRU\n* [Application Performance Monitoring & Error Tracking Software | Sentry](https://sentry.io/)\n* [Sentry (@getsentry)](https://twitter.com/getsentry)\n* **[02:28](#t=02:28)** Background on how we got here\n* TMTF2\n* **[05:53](#t=05:53)** What does this mean for the podcast?\n* **[08:58](#t=08:58)** Why did Sentry want to partner with Syntax?\n* YTKE6\n* **[15:39](#t=15:39)** What does this mean for more + better Syntax?\n* **[18:56](#t=18:56)** We want to hear from you\n* **[23:17](#t=23:17)** Clarifications\n* 2T6WG\n* **[23:42](#t=23:42)** What\'s David Cramer\'s background?\n* **[31:44](#t=31:44)** Helping spread the Syntax vibe\n* QTW9R\n* [World Famous HOTBOYS](https://worldfamoushotboys.com/)\n* **[35:40](#t=35:40)** Silly questions\n* 5L87D\n* **[37:52](#t=37:52)** What\'s the ROI on Wes\' TikToks?\n* **[38:37](#t=38:37)** Is Syntax going to become purple?\n* 73TI4\n* **[40:46](#t=40:46)** The new Syntax website\n* **[47:16](#t=47:16)** Giveaway coming!\n* PONHM\n* **[51:32](#t=51:32)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* David Cramer: [Vitest | A blazing fast unit test framework powered by Vite](https://vitest.dev/)\n* Scott: [Valley Heat Podcast - A Podcast About The Neighborhood](https://valleyheatpodcast.com/)\n* IRFGH\n* Wes: [CCS - The Premier Online Skate Shop for Skateboards & Skate Gear](https://shop.ccs.com/)\n\n## Shameless Plugs\n\n* Scott: [LevelUp Tutorials](https://levelup.video)\n* Q6DPD\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* 193G5\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* PTSNO\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* ULQ7D\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '16006207ee2b0778f92538a65a4eed41ef63e4676bd242badfff0401b5fa2531', '600th-episode-major-announcement-and-swag-giveaway', '/shows/600 - Six Hundred.md', '2023-10-16 20:07:58.740', '2023-10-27 15:58:16.891', 'TASTY'),
('syntax_podcast_show_00601', 601, 'Supper Club × Nate Weinert and Tamagui', '2023-04-14 12:00:00.636', 'https://traffic.libsyn.com/syntax/Syntax_-_601.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Nate Weinert, creator of Tamagui, about what Tamagui is, how styling works in React native, building and designing the Tamagui website, and more.\n\n## Show Notes\n\n* **[00:29](#t=00:29)** Welcome\n* **[01:22](#t=01:22)** Who is Nate Weinert?\n* [Nate (@natebirdman)](https://twitter.com/natebirdman)\n* [natew on GitHub](https://github.com/natew)\n* [Tamagui — React Native + Web UI kit](https://tamagui.dev/)\n* [tamagui: The worlds fastest React UI kit also happens to work on Native + Web seamlessly 🙏](https://github.com/tamagui/tamagui)\n* **[02:34](#t=02:34)** What is Tamagui?\n* **[04:02](#t=04:02)** How does styling work in React native?\n* **[05:35](#t=05:35)** What is React native web?\n* **[08:27](#t=08:27)** What does Tamagui do besides styling?\n* **[14:38](#t=14:38)** How did you build and design the Tamagui website?\n* [Stitches — CSS-in-JS with near-zero runtime](https://stitches.dev/)\n* [Next.js by Vercel - The React Framework](https://nextjs.org/)\n* **[16:50](#t=16:50)** What are the docs made with?\n* **[20:25](#t=20:25)** What are Atomic Styles?\n* **[26:16](#t=26:16)** How is layout handled in react native?\n* **[29:26](#t=29:26)** Where are things going in the React world?\n* [App.js Conference 2023](https://appjs.co/)\n* [react-native-reanimated - npm](https://www.npmjs.com/package/react-native-reanimated)\n* **[37:45](#t=37:45)** Supper Club questions\n* [iTerm2 - macOS Terminal Replacement](https://iterm2.com/)\n* **[47:15](#t=47:15)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [ABEO Footwear - Shop Biomechanical Sandals, Shoes and Orthotics](https://www.abeofootwear.com/)\n\n## Shameless Plugs\n\n* [foobully - Twitch](https://www.twitch.tv/foobully)\n* [Tamagui — React Native + Web UI kit](https://tamagui.dev/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'efd6bb33f7d9205a22a7b4b9ad55f4b4b6f2239e3fa38e11fe0204ddc3fe9573', 'supper-club-nate-weinert-and-tamagui', '/shows/601 - Nate supper.md', '2023-10-16 20:07:58.781', '2023-10-27 15:58:17.079', 'SUPPER'),
('syntax_podcast_show_00602', 602, 'Modals, Popups, Popovers, Lightboxes', '2023-04-17 12:00:00.237', 'https://traffic.libsyn.com/syntax/Syntax_-_602.mp3', '\nIn this Hasty Treat, Scott and Wes talk through the differences between modals, popups, popovers, lightboxes, and dialog boxes.\n\n## Show Notes\n\n* **[00:31](#t=00:31)** Welcome\n* **[02:25](#t=02:25)** What\'s popping up?\n* **[02:59](#t=02:59)** What\'s a modal?\n* **[08:33](#t=08:33)** Pop overs and lightboxes\n* **[10:41](#t=10:41)** Explicit dismiss and light dismiss\n* **[11:30](#t=11:30)** Inert property\n* [inert](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert)\n* **[16:30](#t=16:30)** Backdrop pseudo element\n* [Dialog with animation](https://codepen.io/geckotang/post/dialog-with-animation)\n* **[19:26](#t=19:26)** Dialog\n* **[28:12:11](#t=28:12:11)** Making accessibility easier\n\n```\nconst showButton = document.getElementById(\'showDialog\');\nconst favDialog = document.getElementById(\'favDialog\');\nconst outputBox = document.querySelector(\'output\');\nconst selectEl = favDialog.querySelector(\'select\');\nconst confirmBtn = favDialog.querySelector(\'#confirmBtn\');\n\n// \"Show the dialog\" button opens the <dialog> modally\nshowButton.addEventListener(\'click\', () => {\n    favDialog.showModal();\n});\n// \"Favorite animal\" input sets the value of the submit button\nselectEl.addEventListener(\'change\', (e) => {\n  confirmBtn.value = selectEl.value;\n});\n// \"Confirm\" button of form triggers \"close\" on dialog because of [method=\"dialog\"]\nfavDialog.addEventListener(\'close\', () => {\n  outputBox.value = `ReturnValue: ${favDialog.returnValue}.`;\n});\n```\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '876e88cb55fea817ddf578e2ff56dfb9449e76a72a8f918ea6e1017e55e6cf46', 'modals-popups-popovers-lightboxes', '/shows/602 - Hasty.md', '2023-10-16 20:07:58.876', '2023-10-27 15:58:17.167', 'HASTY'),
('syntax_podcast_show_00603', 603, 'Can Vanilla CSS Replace Sass Yet?', '2023-04-19 12:00:00.431', 'https://traffic.libsyn.com/syntax/Syntax_-_603.mp3', '\nIn this episode of Syntax, Wes and Scott go through all the features of Sass and decide where we are at with Native CSS alternatives, giving each feature a rating of replaceable, plausible, or missing.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:17](#t=01:17)** Easter updates\n* **[04:17](#t=04:17)** Getting into Sass\n* **[06:03](#t=06:03)** What is PostCSS?\n* **[09:52](#t=09:52)** CSS Variables\n* **[13:49](#t=13:49)** CSS Nesting\n* [CSS Nesting - Chrome Developers](https://developer.chrome.com/articles/css-nesting/)\n* [postcss-plugins/plugins/postcss-nesting at main · csstools/postcss-plugins](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting)\n* **[23:13](#t=23:13)** Colors\n* [CSS5 Color Functions — Syntax Podcast 479](https://syntax.fm/show/479/css5-color-functions)\n* **[29:08](#t=29:08)** CSS Looping\n* **[34:20](#t=34:20)** Mixins or extends\n* **[39:34](#t=39:34)** CSS Partials\n* [Features - PostCSS Preset Env - CSSTools](https://preset-env.cssdb.org/features/#color-mix)\n* **[44:29](#t=44:29)** CSS Math\n* **[49:40](#t=49:40)** Functions\n* [Is Houdini Ready Yet?](https://ishoudinireadyyet.com/)\n* **[52:04](#t=52:04)** Firefox and Safari support\n* **[55:08](#t=55:08)** Back to Functions\n* **[56:21](#t=56:21)** BEM Syntax\n* **[58:51](#t=58:51)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Solar Lantern](https://amzn.to/3mpIiuc)\n* Wes: [Cotton Candy Machine](https://amzn.to/3MwaMNd)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3ecfab70676058aea14f1d98f900ab4e52448ec82976d18ebc760379072ac6a9', 'can-vanilla-css-replace-sass-yet', '/shows/603 - Tasty.md', '2023-10-16 20:07:58.909', '2023-10-27 15:58:17.216', 'TASTY'),
('syntax_podcast_show_00604', 604, 'Supper Club × ESLint with Nicholas Zakas', '2023-04-21 12:00:00.507', 'https://traffic.libsyn.com/syntax/Syntax_-_604.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Nicholas Zakas about his creation of ESLint, what\'s coming up in ESLint, and his work as a coach and mentor for programmers.\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* **[01:20](#t=01:20)** Guest introduction\n* [Human Who Codes](https://humanwhocodes.com/blog/)\n* [Nicholas C. Zakas (@nzakas@fosstodon.org)](https://fosstodon.org/@nzakas)\n* [Twitter @slicknet](https://twitter.com/slicknet/)\n* [nzakas on GitHub](https://github.com/nzakas/)\n* [@humanwhocodes) on Instagram](https://www.instagram.com/humanwhocodes/)\n* [Human Who Codes on YouTube](https://www.youtube.com/channel/UC95Pwj8oPPZN2mJCEtMqOsg)\n* **[04:24](#t=04:24)** Why did you want to build ESLint?\n* **[09:08](#t=09:08)** How does ESLint work?\n* **[13:25](#t=13:25)** How do you work on a project for a decade?\n* **[17:12](#t=17:12)** At what point do you pay attention to JavaScript proposed changes?\n* **[20:37](#t=20:37)** Config systems in JavaScript\n* **[31:18](#t=31:18)** ESLint in Rust?\n* **[41:07](#t=41:07)** Are we going to see ESLint for more languages?\n* **[47:06](#t=47:06)** What kind of coaching do you do for programmers?\n* **[02:46](#t=02:46)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Apollo Neuro](https://apolloneuro.com)\n\n## Shameless Plugs\n\n* [Understanding JavaScript Promises](https://ebooks.humanwhocodes.com/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'c1cbcf18f994895e04b1f7bbb00c347eb87948cb4a8532c46b9300b18286758e', 'supper-club-eslint-with-nicholas-zakas', '/shows/604 - Supper ESLint.md', '2023-10-16 20:07:58.946', '2023-10-27 15:58:17.268', 'SUPPER'),
('syntax_podcast_show_00605', 605, 'CSS Color Functions', '2023-04-24 12:00:00.125', 'https://traffic.libsyn.com/syntax/Syntax_-_605.mp3', '\nIn this Hasty Treat, Scott and Wes talk about CSS Color Functions, the benefits of dynamic css color, relative color syntax, color contrast, and color mix.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[00:49](#t=00:49)** Why we\'re talking CSS Color Functions\n* **[01:57](#t=01:57)** Benefits of dynamic CSS color\n* **[03:14](#t=03:14)** Relative color syntax\n* **[06:51](#t=06:51)** Color contrast\n* **[09:26](#t=09:26)** Color mix\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '314c132808477a2f62318bf22a11f8c2ad8e357beafb58ff43bf3b17115e93e8', 'css-color-functions', '/shows/605 - Hasty CSS Color.md', '2023-10-16 20:07:59.038', '2023-10-27 15:58:17.361', 'HASTY'),
('syntax_podcast_show_00606', 606, 'Potluck × Crypto × SEO × Status Pages × Learning Tools', '2023-04-26 12:00:00.439', 'https://traffic.libsyn.com/syntax/Syntax_-_606.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about type guards vs type casting, crypto usage, feedback for Syntax, custom status pages, SEO and metadata, uploading images, home automation, and more!\n\n## Show Notes\n\n* **[00:12](#t=00:12)** Welcome\n* **[01:23](#t=01:23)** Scott\'s new gear\n* [MT-48](https://www.neumann.com/en-en/products/audiointerfaces/mt-48)\n* [Volt USB Audio Interfaces](https://www.uaudio.com/audio-interfaces/volt.html)\n* **[07:36](#t=07:36)** Are type guards safer and superior to type casting?\n* **[13:51](#t=13:51)** I know you guys (lightly) rag on Crypto, but do you see any use-case there for proof-of-personhood?\n* **[23:34](#t=23:34)** Where do I give feedback outside of Twitter?\n* [User Feedback | Sentry Documentation](https://docs.sentry.io/product/user-feedback/)\n* **[27:19](#t=27:19)** Do you have custom status pages created for your platforms?\n* [UptimeRobot: Free Website Monitoring Service](https://uptimerobot.com/)\n* [Privacy Badger](https://privacybadger.org/)\n* [Status.io - Hosted Status Pages](https://status.io/)\n* [Statuspage | Atlassian](https://www.atlassian.com/software/statuspage)\n* [DigitalOcean Status](https://status.digitalocean.com/)\n* **[35:12](#t=35:12)** Is metadata only good for SEO? Does SEO matter on pages you can only view if you\'re logged in?\n* **[39:00](#t=39:00)** How do you upload images from authenticated users?\n* **[46:30](#t=46:30)** What do you think of Zed?\n* [Zed - Code at the speed of thought](https://zed.dev/)\n* **[53:21](#t=53:21)** I’ve got ADHD - any tips for focusing and staying on track?\n* **[56:54](#t=56:54)** How do I convince my partner to accept more home automation?\n* **[02:15](#t=02:15)** What kind of tools and processes do you use and find effective when learning?\n* [Obsidian](https://obsidian.md/)\n* [Mind Map & Brainstorm Ideas - MindNode](https://www.mindnode.com/)\n* **[06:42](#t=06:42)** Would it make any sense to use the Fetch API with a long running stream?\n* **[08:31](#t=08:31)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Project Farm](https://www.youtube.com/c/projectfarm)\n* Wes: [Splatypus](https://amzn.to/3L6vz92)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'a3ce1c048a525201165ff5a8029d14a2baf08aabb6179f35b05f0ca9d6ef8fcd', 'potluck-crypto-seo-status-pages-learning-tools', '/shows/606 - Tasty Potluck.md', '2023-10-16 20:07:59.073', '2023-10-27 15:58:17.411', 'TASTY'),
('syntax_podcast_show_00607', 607, 'Supper Club × Privacy, Cookie Banners, GDPR with Donata and Hans Skillrud', '2023-04-28 12:00:00.985', 'https://traffic.libsyn.com/syntax/Syntax_-_607.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Donata and Hans Skillrud of Termageddon on GDPR, privacy policies, cookie pop ups, and the various legal and ethical reasons to implement them properly.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:47](#t=01:47)** Who are Donata and Hans?\n* [Donata Stroink-Skillrud Esq., CIPP on Twitter](https://twitter.com/DonataSkillrud)\n* [Hans Skillrud on Twitter](https://twitter.com/DeepSpaceHans)\n* [Termageddon](https://termageddon.com/)\n* [Termageddon on Instagram](https://www.instagram.com/termageddon/)\n* [Termageddon on LinkedIn](https://www.linkedin.com/company/termageddon/)\n* **[03:39](#t=03:39)** What are privacy policies and a terms of service?\n* [4 Things to Look for in a Privacy Policy Generator - Termageddon](https://termageddon.com/4-things-to-look-for-in-a-privacy-policy-generator/)\n* [Why accessibility is important when it comes to cookie consent - Termageddon](https://termageddon.com/why-accessibility-is-important-when-it-comes-to-cookie-consent/)\n* **[09:15](#t=09:15)** Does scrolling to the bottom and pretending to read terms work?\n* **[10:49](#t=10:49)** Do people ever read the terms of service?\n* **[15:57](#t=15:57)** Do companies ever actually get in trouble for violating privacy?\n* **[20:06](#t=20:06)** What is GDPR and the impact on small business owners?\n* **[32:30](#t=32:30)** Cookie war and pop ups\n* **[35:40](#t=35:40)** Essential cookies\n* **[42:42](#t=42:42)** Alternatives to Google Analytics\n* [The Google Analytics alternative without compromise - Fathom Analytics](https://usefathom.com/)\n* [Self-hosted website analytics | Ackee](https://ackee.electerious.com/)\n* **[43:39](#t=43:39)** Denying cookies, but still able to create accounts?\n* **[48:57](#t=48:57)** Is there legal concerns with AI?\n* [Can ChatGPT (AI) write your Privacy Policy? - Termageddon](https://termageddon.com/can-chatgpt-artificial-intelligence-write-your-privacy-policy/)\n* **[56:25](#t=56:25)** What is Termageddon?\n* **[58:59](#t=58:59)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [EPIX From TV Series](https://www.epix.com/series/from)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3afa88f11121dc018bcd570564dc3a8fc4ca3ff7053797272a7e413288c3ae50', 'supper-club-privacy-cookie-banners-gdpr-with-donata-and-hans-skillrud', '/shows/607 - Supper Termageddon.md', '2023-10-16 20:07:59.118', '2023-10-27 15:58:17.463', 'SUPPER'),
('syntax_podcast_show_00608', 608, 'RPC in JavaScript!', '2023-05-01 12:00:00.125', 'https://traffic.libsyn.com/syntax/Syntax_-_608.mp3', '\nIn this Hasty Treat, Scott and Wes talk about RPC, what it means, why are we talking about it now, tRPC, and will RPC take off?\n\n## Show Notes\n\n* **[00:22](#t=00:22)** Welcome\n* **[01:51](#t=01:51)** What does RPC mean?\n* **[04:52](#t=04:52)** Why are we talking RPC now?\n* **[10:27](#t=10:27)** Hype around RPC\n* [Supper Club × Solid.js with Ryan Carniato — Syntax Podcast 577](https://syntax.fm/show/577/supper-club-solid-js-with-ryan-carniato)\n* **[11:05](#t=11:05)** Isn\'t this just a REST endpoint?\n* **[13:23](#t=13:23)** Considerations around RPC\n* **[16:11](#t=16:11)** What about tRPC?\n* [Supper Club × tRPC With Alex KATT Johansson — Syntax Podcast 526](https://syntax.fm/show/526/supper-club-trpc-with-alex-katt-johansson)\n* **[18:08](#t=18:08)** Will RPC take off?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cc10cf9818457efca0a67f29745c2f8609be5cd9ca1aa80b3f5714de7fa1102e', 'rpc-in-javascript', '/shows/608 - Hasty RPC.md', '2023-10-16 20:07:59.291', '2023-10-27 15:58:17.593', 'HASTY'),
('syntax_podcast_show_00609', 609, 'The Syntax Giveaway Site - Codes, Bots, Tech Stack and More!', '2023-04-03 12:00:00.345', 'https://traffic.libsyn.com/syntax/Syntax_-_609.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the tech stack they used to create the Syntax giveaway site for the Sentry + Syntax announcement week. What were the features of the site, how\'d they generate proper codes, and how\'d they stop developers from hacking the system?\n\n## Show Notes\n\n* **[00:07](#t=00:07)** How to do a giveaway and distribute it?\n* **[04:26](#t=04:26)** Building in the spirit of Syntax\n* **[05:44](#t=05:44)** The tech stack\n* [SvelteKit • Web development, streamlined](https://kit.svelte.dev/)\n* [Prisma | Next-generation ORM for Node.js & TypeScript](https://www.prisma.io/)\n* [Syntax × Sentry MMXXIII | Product Blog • Sentry](https://blog.sentry.io/2023/04/12/syntax-sentry-mmxxiii/)\n* [PlanetScale: The world’s most advanced database platform](https://planetscale.com/)\n* [My Places - Google My Maps](https://www.google.com/maps/d/viewer?mid=1eLqvkQ9wGvMRVrAQsm5g7EdlnSY&hl=en_US&ll=39.04394865349766,-76.85871&z=10)\n* [sveltekit-basic-auth/hooks.server.ts at main · ghostdevv/sveltekit-basic-auth](https://github.com/ghostdevv/sveltekit-basic-auth/blob/main/src/hooks.server.ts)\n* [Voucherify: Free Random Codes Generator](https://www.voucherify.io/generator)\n* **[09:48](#t=09:48)** Hosted on Vercel\n* [Vercel](https://vercel.com/)\n* **[13:04](#t=13:04)** What are the features of the site?\n* **[19:10](#t=19:10)** Generating the codes properly\n* **[26:48](#t=26:48)** Releasing locked coupon codes\n* **[29:13](#t=29:13)** Client to server side connections\n* **[32:56](#t=32:56)** Stopping developers from gaming the giveaway\n* **[46:29](#t=46:29)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The Super Mario Bros. Movie (2023) - IMDb](https://www.imdb.com/title/tt6718170/)\n* Wes: [The Strong National Museum of Play](https://www.museumofplay.org/)\n\n## Shameless Plugs\n\n* Scott: [Application Performance Monitoring & Error Tracking Software | Sentry](https://sentry.io/welcome/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '5484a7d1d5c410f747da98e7d226d8db80fd7e218a24534494207b7a87bceab4', 'the-syntax-giveaway-site-codes-bots-tech-stack-and-more', '/shows/609 - Tasty Syntax giveaway.md', '2023-10-16 20:07:59.330', '2023-10-27 15:58:17.644', 'HASTY'),
('syntax_podcast_show_00610', 610, 'Supper Club × Zach Lloyd from Warp', '2023-05-05 12:00:00.317', 'https://traffic.libsyn.com/syntax/Syntax_-_610.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Zach Lloyd about how Google Sheets works, why Zach wanted to build Warp, why did they use Rust to write Warp in, is Warp going to come to Windows, and more!\n\n## Show Notes\n\n* **[00:20](#t=00:20)** Welcome\n* **[01:12](#t=01:12)** Who is Zach Lloyd?\n* [Zack on Twitter](https://twitter.com/zachlloydtweets)\n* [Zack on LinkedIn](https://www.linkedin.com/in/zachlloyd/)\n* [Warp Terminal × Next Gen Terminals — Syntax Podcast 579](https://syntax.fm/show/579/warp-terminal-next-gen-terminals)\n* [Warp: The terminal for the 21st century](https://www.warp.dev/)\n* **[03:41](#t=03:41)** How does Google Sheets work?\n* [GWT](https://www.gwtproject.org/)\n* **[13:38](#t=13:38)** What is Warp and why did you build it?\n* [Introducing Warp](https://www.warp.dev/blog/introducing-warp)\n* **[16:50](#t=16:50)** Why did you build Warp in Rust?\n* [Rust Programming Language](https://www.rust-lang.org/)\n* [Harfbuzz](https://github.com/harfbuzz/harfbuzz)\n* [Adventures in Text Rendering: Kerning and Glyph Atlases](https://www.warp.dev/blog/adventures-text-rendering-kerning-glyph-atlases)\n* **[23:20](#t=23:20)** How would you move Warp to Windows?\n* **[26:02](#t=26:02)** How would you run Warp on the web?\n* **[31:24](#t=31:24)** How are the blocks done inside Warp?\n* **[36:23](#t=36:23)** Would Warp ever add a shell?\n* **[40:04](#t=40:04)** Is better completion support coming to Warp?\n* **[44:42](#t=44:42)** Warp AI features\n* **[52:08](#t=52:08)** Supper Club questions\n* **[56:52](#t=56:52)** SIIIIICK ××× PIIIICKS ×××\n\n* [Oh My Zsh - a delightful & open source framework for Zsh](https://ohmyz.sh/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Tonal | The World\'s Smartest Home Gym Machine For Strength & Fitness](https://www.tonal.com/)\n\n## Shameless Plugs\n\n* [Join Us | Warp](https://www.warp.dev/careers)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '56654da7854ebee80f2a098631b4006e8f5bcebece3ded63c4ba1c7595c46ee7', 'supper-club-zach-lloyd-from-warp', '/shows/610 - Supper.md', '2023-10-16 20:07:59.363', '2023-10-27 15:58:17.701', 'SUPPER'),
('syntax_podcast_show_00611', 611, 'Bluesky + AT Protocol', '2023-05-08 12:00:00.703', 'https://traffic.libsyn.com/syntax/Syntax_-_611-new.mp3', '\nIn this episode of Syntax, Wes and Scott talk all things Bluesky, the AT Protocol it\'s built in, the terminology of Bluesky, and how the API currently works.\n\n## Show Notes\n\n* **[00:07](#t=00:07)** Welcome\n* **[00:53](#t=00:53)** Welcome to the Bluesky\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n* **[03:14](#t=03:14)** What could the new Twitter be?\n* **[07:56](#t=07:56)** What is Bluesky?\n* [Nostr](https://nostr.com/)\n* [Bluesky](https://blueskyweb.xyz/)\n* [Twitter Blue](https://help.twitter.com/en/using-twitter/twitter-blue)\n* [Bluesky Staging](https://staging.bsky.app/)\n* [Bluesky FAQ](https://blueskyweb.xyz/faq)\n* **[10:25](#t=10:25)** Why is social media important?\n* **[14:01](#t=14:01)** What is AT Protocol?\n* **[22:06](#t=22:06)** Lexicon for Bluesky\n* **[28:10](#t=28:10)** Small group of devs building Bluesky\n* [Cravings: All Together: Recipes to Love: A Cookbook](https://amzn.to/3Nulx34)\n* [Cravings: Recipes for All the Food You Want to Eat: A Cookbook](https://amzn.to/4225bn7)\n* **[29:54](#t=29:54)** Blocking issues\n* **[31:53](#t=31:53)** Bluesky API\n* [Samy on Darknet Diaries ep61](https://darknetdiaries.com/episode/61/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io/welcome/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '0d7a91a09ce34e862e7cf55e2feb3b2bcf44e14e4a9b1c16a5ad08ad3b4dd842', 'bluesky-at-protocol', '/shows/611 - bluesky.md', '2023-10-16 20:07:59.423', '2023-10-27 15:58:17.770', 'HASTY'),
('syntax_podcast_show_00612', 612, 'UI Elements - Basics, Best Practice, and Built Ins', '2023-05-10 12:00:00.221', 'https://traffic.libsyn.com/syntax/Syntax_-_612.mp3', '\nIn this episode of Syntax, Wes and Scott talk about UI elements and best practices with UI elements, as well as UI elements that exist in browsers.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:10](#t=01:10)** Making demos for fun\n* **[02:47](#t=02:47)** Why we\'re talking UI elements\n* **[03:48](#t=03:48)** Bad UI elements in the browser\n* [Syntax 602: Modals, Popups, Popovers, Lightboxes](https://syntax.fm/show/602/modals-popups-popovers-lightboxes)\n* [Progress](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter)\n* **[10:47](#t=10:47)** Decent UI elements in browser\n* **[19:49](#t=19:49)** Enter Open UI\n* [Open UI](https://open-ui.org/)\n* **[34:39](#t=34:39)** Accordion hunks\n* **[38:15](#t=38:15)** Pop overs\n* **[42:15](#t=42:15)** Focus group\n* **[46:10](#t=46:10)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Fishskyn](https://fishskyn.com/)\n* Wes: [Flavacol](https://amzn.to/3Arvkzg) & [Butter Flavoured Coconut Oil](https://amzn.to/40PNBBn)\n\n## Shameless Plugs\n\n* Scott: [Sentry replays](https://sentry.io/)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', '3d1ae104489c49ddfeb06ede2ca75dced5ce319a60db74b9a5f2168322fd0cce', 'ui-elements-basics-best-practice-and-built-ins', '/shows/612 - tasty ui.md', '2023-10-16 20:07:59.455', '2023-10-27 15:58:17.825', 'TASTY'),
('syntax_podcast_show_00613', 613, 'Supper Club × Dylan Jhaveri - Video for the Web and MUX', '2023-05-12 12:00:00.856', 'https://traffic.libsyn.com/syntax/Syntax_-_613.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Dylan Jhaveri about his work at Mux, how Mux ingests and spits out video, and where Mux fits in a tech stack for developers working with video and audio.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:27](#t=01:27)** Who is Dylan Jhaveri?\n* [Dylan (@dylanjha)](https://twitter.com/dylanjha)\n* [The Internet\'s video infrastructure | Mux](https://www.mux.com/)\n* [Mux Player](https://www.mux.com/player)\n* **[03:04](#t=03:04)** Why did you build Mux Player?\n* [FFmpeg](https://ffmpeg.org/)\n* [FFmpeg WASM](https://ffmpegwasm.netlify.app/)\n* **[06:19](#t=06:19)** How did you chose to go with web components?\n* [CanIUse Mediasource](https://caniuse.com/mediasource)\n* **[09:36](#t=09:36)** What is Mux?\n* **[15:20](#t=15:20)** Can you stitch or clip video via the API with Mux?\n* **[18:07](#t=18:07)** Do you think hls will be supported in Chromium or Firefox?\n* **[21:56](#t=21:56)** How does Mux process videos into 5 versions?\n* **[26:35](#t=26:35)** Is Web assembly in use for video?\n* **[27:55](#t=27:55)** Has Mux researched AI for video?\n* **[31:13](#t=31:13)** Building a podcast transcription video\n* **[36:49](#t=36:49)** Do you have to use MP4? What about webM?\n* **[39:36](#t=39:36)** Media Chrome video player\n* [Elements for building media players](https://www.media-chrome.org)\n* **[44:58](#t=44:58)** What\'s Mux Data?\n* [Mux Data](https://www.mux.com/data)\n* **[49:33](#t=49:33)** Slick Mux website\n* [Mux.com](https://www.mux.com)\n* **[52:13](#t=52:13)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Cruise](https://getcruise.com)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'edfac829429aba3e18d70742da6ce2fe812a101363d1c8a0bfe91845b3bff0be', 'supper-club-dylan-jhaveri-video-for-the-web-and-mux', '/shows/613 - supper dylan.md', '2023-10-16 20:07:59.489', '2023-10-27 15:58:17.886', 'SUPPER'),
('syntax_podcast_show_00614', 614, 'WTF Are Signals And Why Is Everyone So Hot On Them All Of The Sudden?', '2023-05-15 12:00:00.868', 'https://traffic.libsyn.com/syntax/Syntax_-_611.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Signals - what are signals and why is everyone talking about them suddenly?\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:40](#t=01:40)** Chipping away at projects\n* **[03:20](#t=03:20)** WTF are signals?\n* [Signals](https://github.com/preactjs/signals)\n* [Framework reimagined for the edge! - Qwik](https://qwik.builder.io/)\n* [SolidJS · Reactive Javascript Library](https://www.solidjs.com/)\n* [Zone](https://github.com/angular/angular/tree/main/packages/zone.js)\n* [Vanilla](https://codesandbox.io/s/07ktxc?file=/src/index.js)\n* **[09:03](#t=09:03)** What are the boundaries on signals?\n* **[10:49](#t=10:49)** Why are signals so popular now?\n* **[15:57](#t=15:57)** When wouldn\'t you use signals?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n', 'cd3a2b30d078bca335949e04a9b484ee04d156c18cdaf06b1e2b115968673a94', 'wtf-are-signals-and-why-is-everyone-so-hot-on-them-all-of-the-sudden', '/shows/614 - hasty signals.md', '2023-10-16 20:07:59.617', '2023-10-27 15:58:17.997', 'HASTY'),
('syntax_podcast_show_00615', 615, 'Where Should You Host Your App? Hosting Providers Compared', '2023-05-17 15:00:00.785', 'https://traffic.libsyn.com/syntax/Syntax_-_615.mp3', '\nIn this episode of Syntax, Wes and Scott talk about your options for hosting your app including some of the big players, but also others you may not have heard of.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:06](#t=01:06)** Explaining basic concepts in hosting providers\n* **[07:55](#t=07:55)** How is hosting priced?\n* **[10:09](#t=10:09)** The big names in hosting\n* [Amazon Web Services](https://aws.amazon.com/)\n* [Google Cloud](https://cloud.google.com/)\n* [Microsoft Azure](https://azure.microsoft.com/en-ca)\n* [DigitalOcean | The Cloud for Builders](https://www.digitalocean.com/)\n* [Sales Cloud](https://www.salesforce.com/ca/products/sales-cloud/overview/)\n* [Flightcontrol — AWS Without Pain](https://www.flightcontrol.dev/)\n* [Supper Club × Next.js on AWS + Serverless with Dax Raad — Syntax Podcast 589](https://syntax.fm/show/589/supper-club-next-js-on-aws-serverless-with-dax-raad)\n* **[16:29](#t=16:29)** Render\n* [Render](https://render.com/)\n* **[23:50](#t=23:50)** Vercel\n* [Vercel: Develop. Preview. Ship. For the best frontend teams](https://vercel.com/)\n* **[28:04](#t=28:04)** Heroku\n* [Cloud Application Platform | Heroku](https://www.heroku.com/)\n* **[31:58](#t=31:58)** Digital Ocean\n* **[36:10](#t=36:10)** Linode\n* [Create your account - Linode](https://login.linode.com/signup)\n* **[38:34](#t=38:34)** Netlify\n* [Develop and deploy websites and apps in record time | Netlify](https://www.netlify.com/)\n* [The Deno Show — Syntax Podcast 322](https://syntax.fm/show/322/the-deno-show)\n* [Decap CMS | Open-Source Content Management System](https://decapcms.org/)\n* **[46:30](#t=46:30)** Fly\n* [Deploy app servers close to your users · Fly](https://fly.io/)\n* [Railway](https://railway.app/)\n* **[54:19](#t=54:19)** Cloudflare\n* [Cloudflare - The Web Performance & Security Company | Cloudflare](https://www.cloudflare.com/)\n* **[00:43](#t=00:43)** Deno deploy\n* [Deno Deploy | Deno](https://deno.com/deploy)\n* **[03:04](#t=03:04)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Automators - Relay FM](https://www.relay.fm/automators)\n* Wes: [Dropbox.com](https://www.dropbox.com/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '2cb270dfd2b6b671be83a45a012ffbf11ff56b3b491382098d27877acf032aec', 'where-should-you-host-your-app-hosting-providers-compared', '/shows/615 - tasty.md', '2023-10-16 20:07:59.683', '2023-10-27 15:58:18.051', 'TASTY'),
('syntax_podcast_show_00616', 616, 'Supper Club × Adam Argyle on What\'s New in CSS', '2023-05-19 12:00:00.422', 'https://traffic.libsyn.com/syntax/Syntax_-_616.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Adam Argyle about a ton of new CSS features that have arrived or are coming soon, as well as his new site Gradient.style.\n\n## Show Notes\n\n* **[00:34](#t=00:34)** Welcome\n* **[01:05](#t=01:05)** Guest introduction\n* [Adam on Bluesky](https://bsky.app/profile/nerdy.dev)\n* [Adam on Twitter](https://twitter.com/argyleink)\n* **[01:48](#t=01:48)** CSS buckets\n* [New CSS Relative Units · January 6, 2023](https://nerdy.dev/new-relative-units-ric-rex-rlh-and-rch)\n* **[03:16](#t=03:16)** rex rch ric rlh\n* **[08:06](#t=08:06)** Gradient.style\n* [CSS HD Gradients](https://gradient.style/)\n* [Open Props: sub-atomic styles](https://open-props.style/)\n* **[13:49](#t=13:49)** What are style queries vs container queries vs state queries?\n* [una.im | Style Queries](https://una.im/style-queries/)\n* [Getting Started with Style Queries - Chrome Developers](https://developer.chrome.com/blog/style-queries/)\n* [CSS Container Style Queries | Can I use... Support tables for HTML5, CSS3, etc](https://caniuse.com/css-container-queries-style)\n* **[18:09](#t=18:09)** Trig functions\n* [Trigonometric functions in CSS](https://web.dev/css-trig-functions/#:~:text=The%20core%20three%20%E2%80%9Ctrig%20functions,between%20%E2%88%92%E2%88%9E%20and%20%2B%E2%88%9E%20)\n* [CSS Trigonometric Functions: cos() and sin(): dots on a circle](https://codepen.io/web-dot-dev/pen/ExePgOg)\n* **[19:57](#t=19:57)** Live transitions\n* [Understand Disney\'s 12 principles of animation | Creative Bloq](https://www.creativebloq.com/advice/understand-the-12-principles-of-animation)\n* **[25:08](#t=25:08)** View transitions\n* [View Transitions Demo](https://live-transitions.pages.dev/)\n* [View Transitions API - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API)\n* **[26:01](#t=26:01)** Text-wrap balance\n* [CSS text-wrap: balance - Chrome Developers](https://developer.chrome.com/blog/css-text-wrap-balance/)\n* **[26:45](#t=26:45)** Text-wrap pretty\n* **[27:44](#t=27:44)** What\'s the future of the browser landscape?\n* **[31:44](#t=31:44)** nth-child(An+B [of S])\n* **[33:06](#t=33:06)** Cascade layers\n* **[34:40](#t=34:40)** CSS Nesting\n* **[38:03](#t=38:03)** Animate discrete properties\n* [Feature: Transitions on specified discrete properties](https://chromestatus.com/feature/5071230636392448)\n* **[39:42](#t=39:42)** Linear function\n* [Linear easing generator](https://linear-easing-generator.netlify.app/)\n* **[41:33](#t=41:33)** Media query range syntax\n* **[42:04](#t=42:04)** Subgrid everywhere\n* **[44:41](#t=44:41)** Media query range and variables?\n* [UI Elements - Basics, Best Practice, and Built Ins — Syntax Podcast 612](https://syntax.fm/)\n* **[45:32](#t=45:32)** env variables\n* [Hasty Treat - CSS Nesting 1 — Syntax Podcast 343](https://syntax.fm/show/343/hasty-treat-css-nesting-1)\n* **[46:59](#t=46:59)** Animation composition\n* **[49:50](#t=49:50)** Select menu HTML element\n* **[52:16](#t=52:16)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n## Shameless Plugs\n\n* [Onewheel // Future Motion](https://onewheel.com/)\n* [Adam Argyle](https://nerdy.dev/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '2abb84c9586a6b615a364a019825f7d54f61b4ddd47f5e06ffe6a7e47dcaaed7', 'supper-club-adam-argyle-on-what-s-new-in-css', '/shows/616 - adam CSS.md', '2023-10-16 20:07:59.751', '2023-10-27 15:58:18.096', 'SUPPER'),
('syntax_podcast_show_00617', 617, 'Why Is node_modules So Big?', '2023-05-22 12:00:00.433', 'https://traffic.libsyn.com/syntax/Syntax_-_617.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the reasons your node_modules folder gets so large, and what you can do to help keep the file size down.\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[00:51](#t=00:51)** The punching bag of Javascript\n* [DaisyDisk](https://daisydiskapp.com/)\n* **[02:03](#t=02:03)** Spoiler alert - it\'s text\n* **[04:49](#t=04:49)** What actually increases the size?\n* **[07:29](#t=07:29)** Types\n* **[09:27](#t=09:27)** Polyfills\n* **[11:09](#t=11:09)** Raycast Snippets and BetterTouchTool\n* **[12:44](#t=12:44)** Babel\n* **[15:08](#t=15:08)** Markdown\n* **[15:52](#t=15:52)** Translations\n* **[18:23](#t=18:23)** What is the solution?\n* [Raycast](https://www.raycast.com/)\n* [Bundlephobia | Size of npm dependencies](https://bundlephobia.com/)\n* [Better Touch Tool](https://folivora.ai/)\n* [Fast, disk space efficient package manager | pnpm](https://pnpm.io/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '4e10e5e93d3d00dc8110da0cfc6f30cdaa2d88778899976fd07e4759b7d76e5e', 'why-is-node_modules-so-big', '/shows/617 - hasty node.md', '2023-10-16 20:07:59.876', '2023-10-27 15:58:18.165', 'HASTY'),
('syntax_podcast_show_00618', 618, 'Potluck × JR Devs & Copilot × CSS Variable Limitations × SvelteKit', '2023-05-24 12:00:00.388', 'https://traffic.libsyn.com/syntax/Syntax_-_618.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about not becoming dependent on Copilot, CSS variable limitations, finding Sick Picks, lodash hate, and more!\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[00:55](#t=00:55)** Ice, ice baby\n* **[02:01](#t=02:01)** Reactathon\n* [Reactathon returns May 2-3, 2023](https://www.reactathon.com/)\n* [The edge cloud platform behind the best of the web | Fastly](https://www.fastly.com/)\n* **[04:49](#t=04:49)** Submit your question for our next potluck\n* **[05:24](#t=05:24)** How do you suggest adding form / database to Svelte?\n* [Svelte • Cybernetically enhanced web apps](https://svelte.dev/)\n* [Astro](https://astro.build/)\n* **[08:18](#t=08:18)** What can\'t go into a CSS custom prop?\n* **[12:42](#t=12:42)** Are there any really good certifications for Javascript or general full stack development?\n* **[16:21](#t=16:21)** What is the most exciting thing about teaching programming for both of you?\n* **[19:37](#t=19:37)** What is the most challenging thing you have ever overcome in this field?\n* **[21:55](#t=21:55)** How can junior to mid-level devs make the most out of GitHub Copilot while avoiding getting dependent on it and hurting their abilities in the long run?\n* **[26:23](#t=26:23)** Any tips on driving a culture of code quality in a team?\n* **[30:28](#t=30:28)** How soon should Sentry be brought into a new project being built from scratch?\n* **[33:11](#t=33:11)** Is there a place where I can search through all the Sick Picks?\n* [Syntax Sick Picks](https://syntax.fm/sickpicks)\n* **[34:40](#t=34:40)** Why is box-sizing: border-box; not the default?\n* **[37:51](#t=37:51)** Is using lodash in a NextJS web application a terrible idea nowadays?\n* **[40:42](#t=40:42)** What is the best practice for storing JWT token?\n* **[43:53](#t=43:53)** Any tips on converting ajax requests to use Fetch API?\n* [patch-package - npm](https://www.npmjs.com/package/patch-package)\n* **[45:11](#t=45:11)** Any suggestions for tips for updating a very dated React Native codebase?\n* **[50:56](#t=50:56)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: Tales of Taboo podcast [Spotify](https://open.spotify.com/show/0LdFA4R6OpPAun8MqLa6nF) / [Apple Podcasts](https://podcasts.apple.com/us/podcast/tales-of-taboo/id1457365096)\n* Wes: Rubber Flooring\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8537a1546dabe19aeb8933d07a203c99238d9321bc70a7ae34046359637e0dae', 'potluck-jr-devs-and-copilot-css-variable-limitations-sveltekit', '/shows/618 - potluck.md', '2023-10-16 20:07:59.947', '2023-10-27 15:58:18.221', 'TASTY'),
('syntax_podcast_show_00619', 619, 'Supper Club × Bramus Van Damme on CSS', '2023-05-26 12:00:00.778', 'https://traffic.libsyn.com/syntax/Syntax_-_619.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Bramus Van Damme all about CSS, what the CSS Working Group is, how he got good at blogging, setting custom property types in CSS, view transition API, and so much more.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome Bramus Van Damme\n* **[02:29](#t=02:29)** Who is Bramus?\n* [Bramus Van Damme - Developer Relations Engineer - LinkedIn](https://www.linkedin.com/in/bramus/)\n* [Original Content – Bram.us](https://www.bram.us/category/original-content/)\n* [Bramus on Twitter (@bramus)](https://twitter.com/bramus)\n* [bramus on GitHub (Bramus!)](https://github.com/bramus/)\n* **[03:33](#t=03:33)** What is the CSS Working Group?\n* [CSS WG Blog](https://www.w3.org/blog/CSS/)\n* [w3c/csswg-drafts: CSS Working Group Editor Drafts](https://github.com/w3c/csswg-drafts)\n* **[11:18](#t=11:18)** How did you get so good at blogging?\n* [CSS Trig functions](https://web.dev/css-trig-functions/)\n* **[14:02](#t=14:02)** Scroll Driven Animations\n* [Bram.us: Scroll linked animations with scrolltimeline and viewtimeline/](https://www.bram.us/2022/10/27/scroll-linked-animations-with-scrolltimeline-and-viewtimeline/)\n* [Chrome Dev blog: Scroll driven animations/](https://developer.chrome.com/articles/scroll-driven-animations/)\n* [MDN Animation timeline](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline)\n* [Scroll-driven-animations.style](https://scroll-driven-animations.style/)\n* **[25:53](#t=25:53)** What\'s going on with Houdini?\n* [IsHoudiniReadyYet.com](https://ishoudinireadyyet.com/)\n* [CSS Props and Vals](https://web.dev/css-props-and-vals/)\n* **[27:09](#t=27:09)** Why do you need to set a custom property type in CSS?\n* **[29:08](#t=29:08)** How do you debug values in CSS?\n* **[30:12](#t=30:12)** What is Scope Styling?\n* **[34:50](#t=34:50)** But when can I use it?\n* **[36:18](#t=36:18)** What\'s the status of the view transition API?\n* [View Transitions](https://developer.chrome.com/docs/web-platform/view-transitions/)\n* **[40:53](#t=40:53)** What are you looking forward to in CSS?\n* **[42:19](#t=42:19)** Would CSS ever get a strict mode?\n* **[47:05](#t=47:05)** Supper Club Questions\n* [ZSH - THE Z SHELL](https://zsh.sourceforge.io/)\n* [zsh-users/antigen: The plugin manager for zsh.](https://github.com/zsh-users/antigen)\n* [web.dev](https://web.dev/)\n* [Blog - Chrome Developers](https://developer.chrome.com/en/blog/)\n* [Welcome to Feedly](https://feedly.com/)\n* **[52:40](#t=52:40)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Meetups\n\n## Shameless Plugs\n\n* [Scroll-driven-animations.style](https://scroll-driven-animations.style/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '2ebccda1d18ac94d9be97e3039d47a1b8f25ece240b0610538005ec15fe3874c', 'supper-club-bramus-van-damme-on-css', '/shows/619 - supper braum.md', '2023-10-16 20:08:00.025', '2023-10-27 15:58:18.288', 'SUPPER'),
('syntax_podcast_show_00620', 620, 'JavaScript.exe - Standalone Executables', '2023-05-29 12:00:00.397', 'https://traffic.libsyn.com/syntax/Syntax_-_620.mp3', '\nJavaScript executables: their purpose, benefits, and use cases, such as creating standalone applications with all dependencies and the Node.js runtime bundled into a single executable for portability and easy deployment. We also address the twitter hate on the executable’s size.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:12](#t=01:12)** What are JavaScript executables?\n* **[04:39](#t=04:39)** Deploying tooling\n* **[06:01](#t=06:01)** Running on a USB stick\n* **[07:57](#t=07:57)** The size\n* **[12:19](#t=12:19)** Fastly\n* [The edge cloud platform behind the best of the web | Fastly](https://www.fastly.com/)\n* [Deno — A modern runtime for JavaScript and TypeScript](https://deno.com/runtime)\n* [Bun — A fast all-in-one JavaScript runtime](https://bun.sh/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '941682f5cbd0c98561864495792c658fd1eb9fd665f23ab48b387bcc4419054e', 'javascript-exe-standalone-executables', '/shows/620 - hasty Javascript.md', '2023-10-16 20:08:00.071', '2023-10-27 15:58:18.416', 'HASTY'),
('syntax_podcast_show_00621', 621, 'The New Syntax Site × Ingest, Stack, AI and more', '2023-05-31 12:00:00.903', 'https://traffic.libsyn.com/syntax/Syntax_-_621.mp3', '\nIn this episode of Syntax, Wes and Scott talk through the work in progress on the new Syntax website, how to tackle all the moving parts, what stack they picked, AI, and more.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:56](#t=00:56)** Leaky roofs\n* **[02:18](#t=02:18)** How we divided the workload for the new Syntax site\n* [Issues of Syntax v2](https://github.com/syntaxfm/website/issues)\n* [V2 of the website](https://github.com/syntaxfm/website/tree/v2)\n* **[02:55](#t=02:55)** Dark mode vs light mode\n* **[04:46](#t=04:46)** Our project management stack\n* **[06:36](#t=06:36)** High school dances\n* **[08:36](#t=08:36)** Tech stack for Syntax v2\n* [Prisma | Next-generation ORM for Node.js & TypeScript](https://www.prisma.io/)\n* [PlanetScale: The world’s most advanced database platform](https://planetscale.com/)\n* **[16:44](#t=16:44)** PostCSS and Sveltekit\n* [SvelteKit • Web development, streamlined](https://kit.svelte.dev/)\n* [Vercel: Develop. Preview. Ship. For the best frontend teams](https://vercel.com/)\n* **[17:57](#t=17:57)** Auth\n* [Authorizing OAuth Apps](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps)\n* [oAuth APIs Explained — Syntax Podcast 599](https://syntax.fm/show/599/oauth-apis-explained)\n* **[23:15](#t=23:15)** Transcription\n* [Otter.ai - Voice Meeting Notes & Real-time Transcription](https://otter.ai/)\n* [Amazon Transcribe – Speech to Text - AWS](https://aws.amazon.com/transcribe/)\n* [Introducing Whisper](https://openai.com/research/whisper)\n* [WhisperX: Automatic Speech Recognition with Word-level Timestamps (& Diarization)](https://github.com/m-bain/whisperX)\n* [Speech-to-Text: Automatic Speech Recognition Google Cloud](https://cloud.google.com/speech-to-text)\n* [Deepgram: World\'s Most Powerful Speech-to-Text API](https://deepgram.com/)\n* **[35:54](#t=35:54)** Theming system\n* [CSS Zen Garden: The Beauty of CSS Design](https://www.csszengarden.com/)\n* **[43:38](#t=43:38)** AI Shownotes\n* **[53:02](#t=53:02)** Ingest process\n* **[00:24](#t=00:24)** Markdown as the source of truth\n* **[01:50](#t=01:50)** AI Embeddings\n* [Vector Database for Vector Search | Pinecone](https://www.pinecone.io/)\n* [Introducing Ask Netlify: a new way of engaging with Netlify Docs with AI-Powered interactions](https://www.netlify.com/blog/ask-netlify-ai-powered-docs/)\n* **[09:22:24](#t=09:22:24)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Jury Duty](https://www.imdb.com/title/tt22074164/)\n* Wes: [Ted Lasso](https://tv.apple.com/us/show/ted-lasso/umc.cmc.vtoh0mn0xn7t3c643xqonfzy)\n\n## Shameless Plugs\n\n* Scott: [Syntax Discord](https://discord.gg/W5y68HMfZV)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '56208a93702a1f54a6b85e867ecee94e59d4b19c958b9f5382a9173c18c6db73', 'the-new-syntax-site-ingest-stack-ai-and-more', '/shows/621 - tasty.md', '2023-10-16 20:08:00.109', '2023-10-27 15:58:18.465', 'TASTY'),
('syntax_podcast_show_00622', 622, 'Supper Club × Matt Rothenberg and Idan Gazit on Github Next', '2023-06-02 12:00:00.587', 'https://traffic.libsyn.com/syntax/Syntax_-_622.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Matt Rothenberg and Idan Gazit from GitHub about GitHub Next, Copilot, AI based projects at Github, and what the future is for developers with AI.\n\n## Show Notes\n\n* **[00:38](#t=00:38)** Welcome\n* **[01:23](#t=01:23)** Who are Matt and Idan?\n* [Matt Rothenberg](https://mattrothenberg.com/)\n* [@mattrothenberg](https://twitter.com/mattrothenberg)\n* [Matt Rothenberg on CodePen](https://codepen.io/mattrothenberg)\n* [Matt Rothenberg on GitHub)](https://github.com/mattrothenberg)\n* [Idan Gazit](https://gazit.me/)\n* [@idangazit](https://twitter.com/idangazit)\n* [Idan Gazit vis.social](https://vis.social/@idan)\n* [Idan Gazit on GitHub](https://github.com/idan)\n* **[02:22](#t=02:22)** What\'s the history of GitHub Next?\n* [GitHub Copilot · Your AI pair programmer](https://github.com/features/copilot)\n* [ChatGPT | OpenAI](https://chat.openai.com/auth/login?next=/)\n* **[05:18](#t=05:18)** How do you come up with new ideas?\n* **[06:37](#t=06:37)** Did GitHub Copilot blow up fast?\n* **[13:18](#t=13:18)** Do we need powerful models for all situations?\n* **[16:40](#t=16:40)** How does Copilot know my codebase?\n* [Inside GitHub: Working with the LLMs behind GitHub Copilot | The GitHub Blog](https://github.blog/2023-05-17-inside-github-working-with-the-llms-behind-github-copilot/)\n* **[21:34](#t=21:34)** What\'s Copilot X?\n* [Introducing GitHub Copilot X](https://github.com/features/preview/copilot-x)\n* **[24:57](#t=24:57)** What is it like to have a hit like Copilot?\n* **[31:27](#t=31:27)** What is the future for developers due to AI?\n* **[35:11](#t=35:11)** What other AI based projects are you working on?\n* **[42:10](#t=42:10)** Are there any flops from GitHub Next?\n* **[46:59](#t=46:59)** How do you think about Code Brushes?\n* [GitHub Next | Code Brushes](https://githubnext.com/projects/code-brushes/)\n* **[48:46](#t=48:46)** Supper Club questions\n* [Breeze | Afternoon Labs](https://www.afternoonlabs.com/breeze/)\n* [Introduction - The Rust on ESP Book](https://esp-rs.github.io/book/)\n* [Recursive Sans & Mono](https://www.recursive.design/)\n* [Bearded Theme - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme)\n* [Zed - Code at the speed of thought](https://zed.dev/)\n* [Warp: The terminal for the 21st century](https://www.warp.dev/)\n* **[59:16](#t=59:16)** SIIIIICK ××× PIIIICKS ×××\n\n## Shameless Plugs\n\n* [GitHub Next](https://githubnext.com/)\n* [githubnext/githubnext: A public point of contact for GitHub Next](https://github.com/githubnext/githubnext)\n* [Ariakit - Toolkit for building accessible UIs](https://ariakit.org/)\n* [Liveblocks | Collaborative experiences in days, not months](https://liveblocks.io/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8861061d2ac39f50a8140d7ba6513f06bd9146e7b4f8b3c302a09120179ac93d', 'supper-club-matt-rothenberg-and-idan-gazit-on-github-next', '/shows/622 - Supper GitHub Next.md', '2023-10-16 20:08:00.141', '2023-10-27 15:58:18.529', 'SUPPER'),
('syntax_podcast_show_00623', 623, 'Nothing in CSS - 0 vs 0px, no, none, hidden, initial and unset', '2023-06-05 12:00:00.934', 'https://traffic.libsyn.com/syntax/Syntax_-_623.mp3', '\nIn this Hasty Treat, Scott and Wes talk about all the nothing in CSS: 0 vs 0px, no, none, hidden, initial and unset.\n\n## Show Notes\n\n* **[00:22](#t=00:22)** Welcome\n* **[01:50](#t=01:50)** The @ property\n* **[03:33](#t=03:33)** Hiding Things\n* **[10:07](#t=10:07)** Ghost Spaces\n* **[17:47](#t=17:47)** Collapsing margins\n* **[18:33](#t=18:33)** 0 units vs 0\n* **[23:42](#t=23:42)** Unset and initial\n* **[27:42](#t=27:42)** HTML Bonus\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/syntax.fm/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '69978687c40c496ee511b04c959571de11484c886d19f3905ba073b6027af558', 'nothing-in-css-0-vs-0px-no-none-hidden-initial-and-unset', '/shows/623 - Hasty.md', '2023-10-16 20:08:00.237', '2023-10-27 15:58:18.640', 'HASTY'),
('syntax_podcast_show_00624', 624, 'Is JSDoc Better than TypeScript?', '2023-06-07 12:00:00.514', 'https://traffic.libsyn.com/syntax/Syntax_-_624.mp3', '\nIn this episode of Syntax, Wes and Scott use the fact that Svelte is being converted from TypeScript to JavaScript with JSDoc to talk about the benefits of working that way, why they are doing it, and what you can do with JSDoc that TypeScript alone doesn\'t let you do.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:12](#t=01:12)** Roof update\n* **[02:15](#t=02:15)** TypeScript haters need not apply\n* **[03:17](#t=03:17)** What is JSDoc?\n* **[04:27](#t=04:27)** What is our history with JSDoc?\n* **[06:37](#t=06:37)** Why is Svelte moving to JSDoc?\n* **[08:11](#t=08:11)** Why is JSDoc better than TypeScript?\n* **[12:31](#t=12:31)** You can type things you can’t in TypeScript\n* **[16:37](#t=16:37)** Param, Function and returns Descriptions\n* **[21:32](#t=21:32)** Spoiler - it\'s still TypeScript\n* **[33:23](#t=33:23)** SIIIIICK ××× PIIIICKS ×××\n\n* [Get Started With TypeScript the Easy Way](https://austingil.com/typescript-the-easy-way/)\n* [TypeScript without TypeScript -- JSDoc superpowers](https://fettblog.eu/typescript-jsdoc-superpowers/)\n* [TypeScript: Documentation - JSDoc Reference](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html)\n* [Dev Vlog: April 2023 - TypeScript vs JSDoc, Transitions API, Dominic Gannaway joins Svelte team](https://www.youtube.com/watch?v=MJHO6FSioPI&t=95s)\n* [Svelte repo is finally being converted from Typescript to Javascript with JSDoc](https://twitter.com/puruvjdev/status/1655813548495486977)\n* [If you are on a JS project and are missing the TypeScript hinting in your editor, you can still type your code with JSDoc syntax comments and VS Code will detect and use it!](https://twitter.com/wesbos/status/1339217248729305090)\n* [Sprinkle in a little JSDoc on top of your TypeScript when needed - helpful to adding descriptions to returned values, or marking things as deprecated](https://twitter.com/wesbos/status/1646601873523200021)\n* [TypeScript to JSDoc](https://www.npmjs.com/package/ts-to-jsdoc)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Watch MerPeople | Netflix Official Site](https://www.netflix.com/ca/title/81439780)\n* Wes: [18V ONE+ 45W HYBRID SOLDERING STATION (TOOL ONLY) | RYOBI Tools](https://www.ryobitools.ca/products/details/18v-one-plus-45w-hybrid-soldering-station/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8c16da1ea89048135a182aff73c17cbb20df79b6d1db10d5774202d38261b229', 'is-jsdoc-better-than-typescript', '/shows/624 - tasty typescript.md', '2023-10-16 20:08:00.275', '2023-10-27 15:58:18.692', 'TASTY'),
('syntax_podcast_show_00625', 625, 'Supper Club × OpenAI, Future of programming, LLMs, and Math with Andrey Mishchenko', '2023-06-09 12:00:00.953', 'https://traffic.libsyn.com/syntax/Syntax_-_625.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Andrey Mishchenko about working at OpenAI, getting started in machine learning, what RLHF is, the impact of plugins on ChatGPT, and what the future holds for developers in a world with ChatGPT tools.\n\n## Show Notes\n\n* **[00:33](#t=00:33)** Welcome\n* **[00:59](#t=00:59)** ChatGPT introduction\n* **[02:17](#t=02:17)** Who is Andrey Mishchenko?\n* **[03:17](#t=03:17)** What is circle packing?\n* **[05:04](#t=05:04)** When did you start at OpenAI?\n* **[06:21](#t=06:21)** Levels of interaction\n* **[08:39](#t=08:39)** How do you train the model to understand?\n* **[11:13](#t=11:13)** What\'s RLHF?\n* **[13:56](#t=13:56)** What are plugins for ChatGPT?\n* **[16:11](#t=16:11)** What languages are you using to code for AI?\n* **[19:15](#t=19:15)** Did you have any idea ChatGPT would be so popular?\n* **[21:13](#t=21:13)** Did your math degree help get into language modeling?\n* **[28:34](#t=28:34)** Do Wes or Scott worry they\'re going to lose their job?\n* **[33:24](#t=33:24)** How has farming been shaken up by AI?\n* **[34:59](#t=34:59)** Do you think the pace of AI will continue?\n* **[35:30](#t=35:30)** Will plugins change how people use AI tools?\n* **[41:21](#t=41:21)** What does AI do better than anything else?\n* **[49:11](#t=49:11)** Supper Club questions\n* **[55:04](#t=55:04)** SIIIIICK ××× PIIIICKS ×××\n\n* [Andrey Mishchenko - Member of Technical Staff - OpenAI](https://www.linkedin.com/in/andreymishchenko)\n* [Bing Chat (GPT-4) in Google - Chrome Web Store](https://chrome.google.com/webstore/detail/bing-chat-gpt-4-in-google/pcnhobmoglanpljipbomknafhdlcgcng)\n* [ChatGPT plugins](https://openai.com/blog/chatgpt-plugins)\n* [Introduction - OpenAI API](https://platform.openai.com/docs/plugins/introduction)\n\n## Shameless Plugs\n\n* [ChatGPT plugins](https://openai.com/blog/chatgpt-plugins)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8de9a98aa514bbc31b27ad0764ecb9aa1de1322f7b8243ac0aa4b14710f7e044', 'supper-club-openai-future-of-programming-llms-and-math-with-andrey-mishchenko', '/shows/625 - supper AI.md', '2023-10-16 20:08:00.317', '2023-10-27 15:58:18.752', 'SUPPER'),
('syntax_podcast_show_00626', 626, 'GitHub Projects, Milestones, Labels, and Actions', '2023-06-12 12:00:00.327', 'https://traffic.libsyn.com/syntax/Syntax_-_626.mp3', '\nIn this Hasty Treat, Scott and Wes talk about some of the GitHub features you may not have used very much including projects, milestones, labels, and actions.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:53](#t=01:53)** That\'s sick\n* **[04:05](#t=04:05)** What we\'ve used in the past\n* [Trello](https://www.trello.com)\n* [Jira | Issue & Project Tracking Software | Atlassian](https://www.atlassian.com/software/jira)\n* **[06:13](#t=06:13)** Working with Github Projects\n* [About Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)\n* **[11:57](#t=11:57)** Milestones\n* [About milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones)\n* **[14:35](#t=14:35)** GitHub Labels\n* [Managing labels](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels)\n* **[19:51](#t=19:51)** GitHub Actions\n* [Features • GitHub Actions](https://github.com/features/actions)\n* [Level Up Tutorials - Learn modern web development](https://levelup.video/tutorials/code-automation-with-github/introduction)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'e07e4203b00c48765048ea2245787e19dc6881e43981fedf89649414d8383939', 'github-projects-milestones-labels-and-actions', '/shows/626 - hasty planning.md', '2023-10-16 20:08:00.486', '2023-10-27 15:58:18.873', 'HASTY'),
('syntax_podcast_show_00627', 627, 'Electronics for Beginners', '2023-06-14 12:00:00.805', 'https://traffic.libsyn.com/syntax/Syntax_-_627.mp3', '\nIn this episode of Syntax, Wes and Scott talk through an introduction to electronics that you can do in your own home with microcontrollers.\n\n## Show Notes\n\n* **[00:08](#t=00:08)** Welcome\n* **[00:52](#t=00:52)** What we\'re talking about\n* [Arduino - Home](https://www.arduino.cc/)\n* [ESP32 – The best products with free shipping | only on AliExpress](https://m.aliexpress.com/wholesale/esp32.html)\n* **[02:15](#t=02:15)** Airtag Sidebar\n* **[04:05](#t=04:05)** Projects We\'ve Worked On\n* **[06:34](#t=06:34)** How do you run software on the microcontroller\n* **[08:50](#t=08:50)** Microcontrollers are extendable\n* **[12:05](#t=12:05)** Fixing a dryer\n* **[14:06](#t=14:06)** Sprinkler system\n* **[15:48](#t=15:48)** Microcontrollers\n* **[20:28](#t=20:28)** AC and DC Voltage\n* **[25:45](#t=25:45)** Amperage and watts\n* **[28:19](#t=28:19)** Extension cords ideally would have fuses\n* **[31:18](#t=31:18)** What\'s the risk of not having enough power?\n* **[32:09](#t=32:09)** GPIO\n* **[35:45](#t=35:45)** Resistance\n* [How Resistors Work - Unravel the Mysteries of How Resistors Work!](https://www.youtube.com/watch?v=DYcLFHgVCn0)\n* **[41:12](#t=41:12)** Capacitors\n* **[42:02](#t=42:02)** Sensors\n* [5/1pcs HLK LD2410C 24G mmWave FMCW Millimeter Wave 5M Human Presence Status Radar Sensor Motion Detection Modul High Sensitivity](https://www.aliexpress.us/item/1005005087204432.html?gatewayAdapt=4itemAdapt)\n* **[46:47](#t=46:47)** Relays\n* **[48:33](#t=48:33)** Coding microcontrollers\n* [Web Serial API](https://wicg.github.io/serial/)\n* [ESPHome — ESPHome](https://esphome.io/)\n* [Johnny-Five: The JavaScript Robotics & IoT Platform](https://johnny-five.io/)\n* [Espruino - JavaScript for Microcontrollers](https://www.espruino.com/)\n* [Introduction - The Rust on ESP Book](https://esp-rs.github.io/book/)\n* [Welcome to Quick.js! - quick.js](https://quick.js.org/)\n* **[52:32](#t=52:32)** A note on Soldering\n* **[53:12](#t=53:12)** Projects for kids\n* **[54:31](#t=54:31)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Razor blade](https://amzn.to/3BQD92m)\n* Wes: [ESP32 – The best products with free shipping | only on AliExpress](https://m.aliexpress.com/wholesale/esp32.html)\n\n## Shameless Plugs\n\n* Scott: [Syntax Discord](https://discord.gg/ccMC6kB)\n* Wes: [Wes\' Instagram](https://www.instagram.com/wesbos)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'b29dcdda7ae82b85fae34911af2645fdbb760007f1547cb7bd743702df7f1a98', 'electronics-for-beginners', '/shows/627 - electronics tasty.md', '2023-10-16 20:08:00.530', '2023-10-27 15:58:18.920', 'TASTY'),
('syntax_podcast_show_00628', 628, 'Supper Club × JavaScript on Hardware, Micro Controllers, ESP32 with Nick Hehr', '2023-06-16 12:00:00.136', 'https://traffic.libsyn.com/syntax/Syntax_-_628.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Nick Hehr about the fun ways to get started with micro controllers, writing JavaScript for hardware, and ideas for projects to build involving hardware and software.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome to Syntax\n* **[01:04](#t=01:04)** Introducing Nick Hehr\n* [Nick Hehr (@hipsterbrown)](https://twitter.com/hipsterbrown?lang=en)\n* [HipsterBrown (@hipsterbrown@toot.cafe) - Toot Café](https://toot.cafe/@hipsterbrown)\n* [HipsterBrown](https://www.hipsterbrown.com/)\n* [HipsterBrown (Nick Hehr)](https://github.com/HipsterBrown)\n* [Nick Hehr on CodePen](https://codepen.io/HipsterBrown/)\n* **[03:58](#t=03:58)** Running JavaScript on microcontrollers\n* **[06:20](#t=06:20)** What was your first project that got you into this?\n* **[12:12](#t=12:12)** Is the ESP32 the most popular controller?\n* **[14:12](#t=14:12)** Where do you buy hardware?\n* [Arduino - Home](https://www.arduino.cc/)\n* [Adafruit Industries, Unique & fun DIY electronics and kits](https://www.adafruit.com/)\n* [AliExpress - Online Shopping for Popular Electronics, Fashion, Home & Garden, Toys & Sports, Automobiles and More products - AliExpress](https://www.aliexpress.com/)\n* [SparkFun Electronics](https://www.sparkfun.com/)\n* [Introduction 🚀 xs-dev Documentation](https://xs-dev.js.org/en/introduction/)\n* [Welcome to Robo Wizard | Robo Wizard](https://robo-wizard.js.org/)\n* **[16:52](#t=16:52)** What are people building with boards?\n* **[18:30](#t=18:30)** What does the JavaScript look like?\n* **[22:16](#t=22:16)** Can you make a Fetch request?\n* **[25:45](#t=25:45)** What about Arduino?\n* **[31:54](#t=31:54)** What\'s a good starter project?\n* [Johnny-Five: The JavaScript Robotics & IoT Platform](https://johnny-five.io/)\n* [meganetaaan/stack-chan: A JavaScript-driven M5Stack-embedded super-kawaii robot.](https://github.com/meganetaaan/stack-chan/tree/dev/v1.0)\n* [TC53 - Ecma International](https://www.ecma-international.org/technical-committees/tc53/)\n* [dtex/j5e: Framework for embedded devices using ECMA-419, the ECMAScript® embedded systems API specification, based on Johnny-Five\'s API](https://github.com/dtex/j5e)\n* [HipsterBrown/on-air-light: An offline-first IoT on-air light for video meetings, using ESP32 & JS](https://github.com/HipsterBrown/on-air-light)\n* [ESPHome — ESPHome](https://esphome.io/)\n* [Being in the video game with Augmented Climbing | The Kid Should See This](https://thekidshouldseethis.com/post/be-the-video-game-with-augmented-climbing)\n* **[36:03](#t=36:03)** Emulation and debugging\n* **[39:13](#t=39:13)** What else have you made?\n* **[44:31](#t=44:31)** ESP Home\n* **[54:35](#t=54:35)** SIIIIICK ××× PIIIICKS ×××\n* **[00:32](#t=00:32)** Shameless Plugs\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [The Opus Intro Kit – Fellow](https://fellowproducts.com/products/the-opus-intro-kit?variant=41516160385124)\n* [jdxcode/rtx: Runtime Executor (asdf rust clone)](https://github.com/jdxcode/rtx)\n* [Code: The Hidden Language of Computer Hardware and Software: Petzold, Charles: 9780137909100: Books - Amazon.ca](https://www.amazon.ca/dp/0137909101?crid=2QRJ0XCK7OHGB&keywords=Code:+The+Hidden+Language+of+Computer+Hardware+and+Software&sprefix=code+the+hidden+language+of+computer+hardware+and+software+,aps,108&language=en_US&sr=8-1&linkCode=gs2&linkId=ea6a456d08c423866beeb49df1eae111&tag=isi777-20)\n\n## Shameless Plugs\n\n* [Introduction 🚀 xs-dev Documentation](https://xs-dev.js.org/en/introduction/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '57dca592373f8827479b1240cac468048d9332dd9a4d52a7224da1fec450b2ea', 'supper-club-javascript-on-hardware-micro-controllers-esp32-with-nick-hehr', '/shows/628 - supper Nick.md', '2023-10-16 20:08:00.573', '2023-10-27 15:58:18.973', 'SUPPER'),
('syntax_podcast_show_00629', 629, 'AsyncLocalStorage + AsyncContext API', '2023-06-19 12:00:00.338', 'https://traffic.libsyn.com/syntax/Syntax_-_629.mp3', '\nIn this Hasty Treat, Scott and Wes talk about AsyncLocalStorage, why more frameworks aren\'t using it yet, some examples, as well as some footguns.\n\n## Show Notes\n\n* **[00:22](#t=00:22)** Welcome\n* **[01:44](#t=01:44)** What is AsyncLocalStorage?\n* **[03:14](#t=03:14)** What is context?\n* **[07:49](#t=07:49)** Why aren\'t more frameworks using AsyncLocalStorage for context for middleware?\n* **[10:16](#t=10:16)** Examples of usage\n* **[14:20](#t=14:20)** Footguns\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'c1b641c96dcf3d4892971f56c8349a5313b233b71a4dac6999ad5e59e1dfc75c', 'asynclocalstorage-asynccontext-api', '/shows/629 - hasty.md', '2023-10-16 20:08:00.781', '2023-10-27 15:58:19.114', 'HASTY'),
('syntax_podcast_show_00630', 630, 'Potluck × Warp × Skeleton UI × Edge Functions × Donut Scoping', '2023-06-21 12:00:00.872', 'https://traffic.libsyn.com/syntax/Syntax_-_630.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about rate-limiting an API, using Wasp, Enums in TypeScript, styling React projects, using Edge functions, and more.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:53](#t=01:53)** Connecting at conferences\n* [JSNation – the main JavaScript conference of 2023](https://jsnation.com/)\n* [RenderATL 2023 | May 31 - June 2, 2023. | 80+ Speakers](https://www.renderatl.com/)\n* **[04:10](#t=04:10)** What technique do you use for consuming a rate-limited API?\n* **[07:58](#t=07:58)** Is Wasp-lang.dev ticking all the boxes for an awesome full-stack JavaScript framework?\n* [Wasp](https://wasp-lang.dev/)\n* **[14:36](#t=14:36)** How do you guys feel about skeleton UIs?\n* [Skeleton | Open UI](https://open-ui.org/components/skeleton.research/)\n* **[19:10](#t=19:10)** How can i forward my http only auth cookies to my backend API?\n* **[22:28](#t=22:28)** What\'s your opinion on using Enums in TypeScript?\n* **[29:46](#t=29:46)** How much off the clock time away from coding related activities do you have in a typical week?\n* **[37:10](#t=37:10)** What\'s the best approach for styling React projects?\n* **[42:49](#t=42:49)** Donut scoping\n* [Scope donuts | Stubbornella](http://www.stubbornella.org/content/2011/10/08/scope-donuts/)\n* **[45:21](#t=45:21)** How do I add user registration and content uploading features to a website?\n* [Next.js by Vercel - The React Framework](https://nextjs.org/)\n* [Laravel - The PHP Framework For Web Artisans](https://laravel.com/)\n* [Image and Video Upload, Storage, Optimization and CDN](https://cloudinary.com/)\n* [RedwoodJS: The App Framework for Startups | RedwoodJS.com](https://redwoodjs.com/)\n* [SvelteKit • Web development, streamlined](https://kit.svelte.dev/)\n* [Learn Node — The best way to learn Node.js, Express, MongoDB, and Friends](https://learnnode.com/)\n* [AdonisJS - A fully featured web framework for Node.js](https://adonisjs.com/)\n* **[53:25](#t=53:25)** Do you see any benefits in using edge functions if your audience is local?\n* **[59:20](#t=59:20)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: * [BOJACK 37 Values 480 Pcs Electronics Component Fun Kit with Power Supply Module, Jumper Wire,Precision Potentiometer,830 tie-Points Breadboard Compatible with STM32,Raspberry Pi,Arduino : Electronics](https://www.amazon.com/dp/B099MQV8ZW?linkCode=sl1&linkId=2e8b74b5184d18661a0bccb5a4f6713a&language=en_US)\n* Wes: * [Local and regional eSIMs for travellers - Airalo](https://www.airalo.com/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'a01a052037c16b3329ef17e2cfd0fa9bb5929c697dab66309d209df030ed0d66', 'potluck-warp-skeleton-ui-edge-functions-donut-scoping', '/shows/630 - Potluck tasty.md', '2023-10-16 20:08:00.881', '2023-10-27 15:58:19.176', 'TASTY'),
('syntax_podcast_show_00631', 631, 'Supper Club × Why Netlify bought Gatsby, GraphQL Data Layer, and Headless CMS with Dustin Schau', '2023-06-23 12:00:00.710', 'https://traffic.libsyn.com/syntax/Syntax_-_631.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Dustin Schau about Netlify Connect, Gatsby, GraphQL, and more.\n\n## Show Notes\n\n- **[00:35](#t=00:35)** Welcome\n- **[01:20](#t=01:20)** Who is Dustin Schau?\n- [Dustin Schau (@SchauDustin)](https://twitter.com/SchauDustin)\n- [Develop and deploy websites and apps in record time | Netlify](https://www.netlify.com/)\n- **[02:49](#t=02:49)** Is Valhalla from Gatsby?\n- [How to Source Content from a Headless CMS | Gatsby](https://www.gatsbyjs.com/docs/how-to/sourcing-data/headless-cms/)\n- [Valhalla Content Hub | Gatsby](https://www.gatsbyjs.com/products/valhalla-content-hub/)\n- [Netlify Connect Brings All Content Sources & CMS Apps Together](https://www.netlify.com/products/connect/)\n- **[05:41](#t=05:41)** Valhalla is now Netlify Connect\n- **[09:32](#t=09:32)** How often should you scrape or cache from another API?\n- **[10:36](#t=10:36)** What about auth?\n- **[13:41](#t=13:41)** Will Netlify Connect be open source or paid?\n- **[18:48](#t=18:48)** Is GraphQL it?\n- [Overview | urql Documentation](https://formidable.com/open-source/urql/docs/)\n- [GQty](https://gqty.dev/)\n- **[22:35](#t=22:35)** What odd data sources are you trying to connect?\n- **[26:06](#t=26:06)** How does Gatsby send out to APIs?\n- **[29:00](#t=29:00)** What CMS should people use?\n- [The Markdown CMS | Tina](https://tina.io/)\n- [The platform to bring your best ideas to life | Contentful](https://www.contentful.com/)\n- [The Composable Content Cloud - Sanity.io](https://www.sanity.io/)\n- **[31:22](#t=31:22)** What do you think of component based CMS?\n- [SEO Enterprise Rank Tracker - A Keyword Rank Tracking Tool Like No Other | Nozzle.io](https://nozzle.io/)\n- **[35:36](#t=35:36)** What are your thoughts on the React ecosystem?\n- **[43:33](#t=43:33)** What\'s the future for Gatsby?\n- **[46:14](#t=46:14)** Supper Club questions\n- [folivora.ai - Great Tools for your Mac!](https://folivora.ai/)\n- [Noodlesoft – Noodlesoft – Simply Useful Software](https://www.noodlesoft.com/)\n- [Dank Mono: The coding typeface for aesthetes](https://philpl.gumroad.com/l/dank-mono)\n- [DSchau/dotfiles: :wrench: .files, including ~/.macos — sensible defaults for macOS development (catered to Node.js)](https://github.com/DSchau/dotfiles)\n- [Deploy app servers close to your users · Fly](https://fly.io/)\n- [Hono - Ultrafast web framework for the Edges](https://hono.dev/)\n- [Stream Movies & TV Shows | Plex](https://www.plex.tv/)\n- [The Free Software Media System | Jellyfin](https://jellyfin.org/)\n- **[56:29](#t=56:29)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Arc Browser](https://arc.net/)\n- [Resend React Email](https://resend.com/)\n\n## Shameless Plugs\n\n- [Netlify](http://Netlify.com)\n- [Netlify Connect](https://ntl.fyi/sanity)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '7119948f40409a4cb8ec667d8442b10907cfb80923ba988c0978e31a3841ef79', 'supper-club-why-netlify-bought-gatsby-graphql-data-layer-and-headless-cms-with-dustin-schau', '/shows/631 - Supper Dustin.md', '2023-10-16 20:08:01.016', '2023-10-27 15:58:19.230', 'SUPPER'),
('syntax_podcast_show_00632', 632, 'Where to Register a Domain', '2023-06-26 12:00:00.943', 'https://traffic.libsyn.com/syntax/Syntax_-_632.mp3', '\nIn this Hasty Treat, Scott and Wes talk about where you should register a domain name, explain DNS, and the process for moving a domain from one registrar to another.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[02:04](#t=02:04)** Domain name registration vs DNS\n* **[03:58](#t=03:58)** Domain name flattening\n* **[05:07](#t=05:07)** Domain name privacy\n* **[05:31](#t=05:31)** Proxy registrations\n* **[06:44](#t=06:44)** Bait and switch registrars\n* **[11:56](#t=11:56)** Domain registrars we found\n* **[13:09](#t=13:09)** NameCheap and Spaceship\n* [Namecheap](https://www.namecheap.com/)\n* [Spaceship](https://www.spaceship.com/)\n* **[17:42](#t=17:42)** GoDaddy\n* [GoDaddy](https://www.godaddy.com/)\n* **[19:26](#t=19:26)** Ghandi\n* [Gandi.net](https://www.gandi.net/en-CA)\n* **[21:16](#t=21:16)** Porkbun\n* [Porkbun](https://www.porkbun.com)\n* **[22:18](#t=22:18)** Hover\n* [Hover.com](https://www.hover.com/)\n* **[24:24](#t=24:24)** Name\n* [Name.com](https://www.name.com/)\n* **[26:24](#t=26:24)** Cloudflare\n* [Cloudflare](https://www.cloudflare.com/products/registrar/)\n* **[28:04](#t=28:04)** What\'s the process for moving d\n* [iwantmyname](https://iwantmyname.com/)\n* [DNSimple](https://dnsimple.com/)omains to a new registrar?\n* **[30:38](#t=30:38)** I Want My Name and DNS Simple\n* **[33:05](#t=33:05)** Finding domain names\n* **[37:28](#t=37:28)** What would you pick to register a domain today?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '4abf466247f0f97462cd90f433717433dea36ca0c52d03b5d4caecf6bfda4a02', 'where-to-register-a-domain', '/shows/632 - Hasty Domains.md', '2023-10-16 20:08:26.879', '2023-10-27 15:58:19.332', 'HASTY'),
('syntax_podcast_show_00633', 633, 'WTF is an ORM', '2023-06-28 12:00:00.977', 'https://traffic.libsyn.com/syntax/Syntax_-_633.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the benefits and potential drawbacks of using an ORM on your next project, as well as what some of the popular ORMs are.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:39](#t=00:39)** Dental cleanings\n* **[03:00](#t=03:00)** What\'s an ORM?\n* **[05:51](#t=05:51)** Benefits of using an ORM\n* **[12:54](#t=12:54)** Validation in ORM\n* **[19:18](#t=19:18)** What about Types?\n* **[23:44](#t=23:44)** Popular ORMs\n* [Prisma](https://www.prisma.io/)\n* [Sequelize](https://sequelize.org/)\n* [Objection.js](https://vincit.github.io/objection.js/)\n* [Knex.js](https://knexjs.org/)\n* [DrizzleORM - next gen TypeScript ORM](https://orm.drizzle.team/)\n* [Mongoose ODM v7.3.1](https://mongoosejs.com/)\n* [TypeORM](https://typeorm.io/)\n* [waterline.js](https://waterlinejs.org/)\n* **[42:41](#t=42:41)** Potential downsides to using an ORM\n* **[45:53](#t=45:53)** Database schemas\n* **[52:30](#t=52:30)** Hooks or events\n* **[55:27](#t=55:27)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [I Think You Should Leave with Tim Robinson](https://www.netflix.com/ca/title/80986854)\n* Wes: [Wise, Formerly TransferWise: Online Money Transfers](https://wise.com/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '9effa4b58b249e719bbae8ba9a9fae8b6958be5939d72d9bbede982fe3d64fc8', 'wtf-is-an-orm', '/shows/633 - ORM Tasty.md', '2023-10-16 20:08:26.962', '2023-10-27 15:58:19.382', 'TASTY'),
('syntax_podcast_show_00634', 634, 'Supper Club × Messaging Queues and Workers with Armin Ronacher', '2023-06-30 12:00:00.605', 'https://traffic.libsyn.com/syntax/Syntax_-_634.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Armin Ronacher about his contributions to open source, queues and messaging in apps, scaling up a queue, and how it all works at Sentry.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* **[01:49](#t=01:49)** Who is Armin Ronacher?\n* [Armin Ronacher](https://en.wikipedia.org/wiki/Armin_Ronacher)\n* [mitsuhiko (Armin Ronacher)](https://github.com/mitsuhiko)\n* [Armin Ronacher (@mitsuhiko)](https://twitter.com/mitsuhiko)\n* [Armin Ronacher](http://armin.ronacher.eu/)\n* [Armin Ronacher](https://www.linkedin.com/in/arminronacher/?originalSubdomain=at)\n* [Apache Kafka](https://kafka.apache.org/)\n* **[04:11](#t=04:11)** What are queues and what are they used for?\n* **[08:02](#t=08:02)** Do you listen or poll for updates in the queue?\n* **[12:49](#t=12:49)** Does this help when a provider goes down?\n* **[18:31](#t=18:31)** How do you architect a queue?\n* **[20:20](#t=20:20)** How does it scale up?\n* **[27:05](#t=27:05)** How does Sentry manage all the data flowing in from events?\n* [Redis Message Broker | Redis Enterprise](https://redis.com/solutions/use-cases/messaging/)\n* [Messaging that just works — RabbitMQ](https://www.rabbitmq.com/)\n* [Using RabbitMQ — Celery 5.3.1 documentation](https://docs.celeryq.dev/en/stable/getting-started/backends-and-brokers/rabbitmq.html)\n* **[33:45](#t=33:45)** How do you visualize the data?\n* **[37:15](#t=37:15)** Edge case that Sentry had to fix\n* **[40:22](#t=40:22)** How are you using Rust?\n* [Rust Programming Language](https://www.rust-lang.org/)\n* **[43:32](#t=43:32)** Why is Python so popular in the AI space?\n* **[45:17](#t=45:17)** What do you think about JavaScript on the server?\n* **[48:02](#t=48:02)** Supper Club questions\n* **[50:44](#t=50:44)** How do you stay motivated with programming?\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Bilderbuch](https://bilderbuch-musik.at/home)\n* [Bilderbuch on Spotify](https://open.spotify.com/artist/2ErWLckuGFl84nGmg5fwyG?si=oG2uwmcMTy2b7jHi0CMXVQ)\n\n## Shameless Plugs\n\n* [Rye - An Experimental Package Management Solution for Python](https://github.com/mitsuhiko/rye)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '81bb9a6c94016eb28890b6a40259913d3fbcf5acf6744fc7941b1287c4434d43', 'supper-club-messaging-queues-and-workers-with-armin-ronacher', '/shows/634 - Supper.md', '2023-10-16 20:08:27.043', '2023-10-27 15:58:19.428', 'SUPPER'),
('syntax_podcast_show_00635', 635, 'Lightning CSS', '2023-07-03 12:00:00.576', 'https://traffic.libsyn.com/syntax/Syntax_-_635.mp3', '\nIn this Hasty Treat, Scott and Wes talk about what Lightning CSS is, how it works, and why you should consider using it in your projects.\n\n## Show Notes\n\n* **[00:25:22](#t=00:25:22)** Welcome\n* **[01:04:11](#t=01:04:11)** Overview of Lightning CSS\n* [Lightning CSS](https://lightningcss.dev/)\n* [Devon Govett (@devongovett)](https://twitter.com/devongovett)\n* [Parcel](https://parceljs.org/)\n* **[04:56:11](#t=04:56:11)** What\'s in Lightning CSS?\n* [OKLCH](https://oklch.com/)\n* **[21:39:11](#t=21:39:11)** CSS Layers\n* **[24:57:14](#t=24:57:14)** Text decoration\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '1c4e45472c99c5946c3239f13bbce9c0bcf9eb3d7ef3a1dbb1625f9bfc3db499', 'lightning-css', '/shows/635 - Hasty Lightning CSS.md', '2023-10-16 20:08:27.225', '2023-10-27 15:58:19.538', 'HASTY'),
('syntax_podcast_show_00636', 636, 'What are Headless Components?', '2023-07-05 12:00:00.349', 'https://traffic.libsyn.com/syntax/Syntax_-_636.mp3', '\nIn this episode of Syntax, Wes and Scott talk about what headless components are, the why and when to use headless components, and how to best implement them.\n\n## Show Notes\n\n* **[00:07](#t=00:07)** Welcome\n* **[02:33](#t=02:33)** Tailwind Connect\n* [Tailwind Connect 2023 | Tailwind CSS Live Event](https://connect.tailwindcss.com/)\n* **[04:37](#t=04:37)** Headless component overview\n* [Downshift](https://www.downshift-js.com/)\n* [Headless UI](https://headlessui.com/)\n* **[06:57](#t=06:57)** A country dropdown component\n* **[12:52](#t=12:52)** Possibly like Svelte actions?\n* **[18:46](#t=18:46)** What do headless components provide?\n* **[19:13](#t=19:13)** Examples of headless component projects\n* [Microsoft Edge Demo](https://microsoftedge.github.io/Demos/selectmenu/)\n* **[24:24](#t=24:24)** How does this compare to web components?\n* [Tanstack Table](https://tanstack.com/table/)\n* [Tanstack Virtual](https://tanstack.com/virtual/)\n* **[26:29](#t=26:29)** Checking out Shoelace\n* [Shoelace](https://shoelace.style/)\n* **[28:42](#t=28:42)** Figma announcements\n* [What\'s New in Figma](https://www.figma.com/whats-new/)\n* **[31:21](#t=31:21)** What does headless mean?\n* **[36:24](#t=36:24)** SIIIIICK ××× PIIIICKS ×××\n* **[41:20](#t=41:20)** AI Voices\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Hacker News Recap](https://hackernewsrecap.buzzsprout.com/) /[Hacker News Recap on Apple Podcasts](https://podcasts.apple.com/us/podcast/hacker-news-recap/id1681571416)\n* Wes: [Calipers](https://amzn.to/44ikUz3)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'b875d83c993958b46cb00f72c98dbcd12a3c749db5b6fd09f5933c19b0a932f9', 'what-are-headless-components', '/shows/636 - Tasty.md', '2023-10-16 20:08:27.273', '2023-10-27 15:58:19.590', 'TASTY'),
('syntax_podcast_show_00637', 637, 'Supper Club × Cloudinary with Colby Fayock', '2023-07-07 12:00:00.993', 'https://traffic.libsyn.com/syntax/Syntax_-_637.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Colby Fayock about Cloudinary\'s new AI tools, media flow, removing backgrounds, using AI for video templates, and Colby\'s stack for creating YouTube content.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:11](#t=01:11)** Who is Colby Fayock?\n* [ColbyFayock.com](https://www.colbyfayock.com/)\n* [Colby Fayock (@colbyfayock)on Twitter](https://twitter.com/colbyfayock)\n* [ColbyFayock - Twitch](https://www.twitch.tv/colbyfayock)\n* [colbyfayock on GitHub](https://github.com/colbyfayock)\n* [Colby Fayock (@colbyfayock) • Instagram](https://www.instagram.com/colbyfayock/)\n* **[01:57](#t=01:57)** What is Cloudinary?\n* [Image and Video Upload, Storage, Optimization and CDN](https://cloudinary.com/)\n* **[03:03](#t=03:03)** What\'s with the space jellyfish?\n* **[03:52](#t=03:52)** How is Cloudinary using AI for the web?\n* [Developer resources for using images and videos in your apps](https://cloudinary.com/developers)\n* **[09:54](#t=09:54)** What is media flow?\n* **[13:00](#t=13:00)** Who is the target audience for AI tools from Cloudinary?\n* **[17:03](#t=17:03)** Removing backgrounds\n* [Remove Background from Image for Free – remove.bg](https://www.remove.bg/)\n* [iPhone Messages stickers: How to make and use them - 9to5Mac](https://9to5mac.com/2023/06/14/how-to-make-use-iphone-messages-stickers-ios-17/)\n* **[21:14](#t=21:14)** Cloudinary\'s Video API\n* [ascorbic/unpic-img: Multi-framework responsive image component](https://github.com/ascorbic/unpic-img)\n* **[22:44](#t=22:44)** Function calling in OpenAI\n* **[26:22](#t=26:22)** How do you deal with the random generation of AI?\n* **[29:00](#t=29:00)** What are the community SDKs for Cloudinary?\n* **[37:04](#t=37:04)** What\'s your process for creating content for YouTube?\n* **[42:49](#t=42:49)** Supper Club Questions\n* [Open Broadcaster Software | OBS](https://obsproject.com/)\n* [Facecam Pro – Elgato](https://www.elgato.com/us/en/p/facecam-pro)\n* [Recut — Automatic Video Editor](https://getrecut.com/)\n* [Night Owl - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl)\n* [iTerm2 - macOS Terminal Replacement](https://iterm2.com/)\n* [Oh My Zsh - a delightful & open source framework for Zsh](https://ohmyz.sh/)\n* **[51:40](#t=51:40)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Ready To Drink Cold Brew Coffee | Trader Joe\'s](https://www.traderjoes.com/home/products/pdp/ready-to-drink-cold-brew-coffee-062611)\n\n## Shameless Plugs\n\n* [Colby Fayock on YouTube](https://www.youtube.com/colbyfayock)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '6bf33804b048633a766f8fee598ac7c6ca80ac5538ef82e2335907dc2d980b0f', 'supper-club-cloudinary-with-colby-fayock', '/shows/637 - Supper.md', '2023-10-16 20:08:27.316', '2023-10-27 15:58:19.647', 'SUPPER'),
('syntax_podcast_show_00638', 638, 'Roundup - Sick AI Tools For Developers', '2023-07-10 12:00:00.829', 'https://traffic.libsyn.com/syntax/Syntax_-_638.mp3', '\nIn this Hasty Treat, Scott and Wes talk about various AI tools for developers that are available.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:36](#t=01:36)** AI creeping into real life\n* **[04:03](#t=04:03)** Cody AI\n* [Cody - Business AI Employee Trained on Your Knowledge Base](https://meetcody.ai/)\n* [Sourcegraph](https://sourcegraph.com/search)\n* **[06:24](#t=06:24)** How AI coding help works\n* **[09:57](#t=09:57)** Amazon Code Whisper\n* [AI Code Generator - Amazon CodeWhisperer - AWS](https://aws.amazon.com/codewhisperer/)\n* [Amazon Code Whisperer VS Github Copilot](https://www.youtube.com/watch?v=p4Sc_-2yJHs)\n* **[10:44](#t=10:44)** Copilot Labs\n* [GitHub Next](https://githubnext.com/)\n* [GitHub Next | GitHub Copilot Labs](https://githubnext.com/projects/copilot-labs/)\n* **[14:25](#t=14:25)** LintRule\n* [Lintrule](https://www.lintrule.com/)\n* **[18:06](#t=18:06)** Open Commit\n* [di-sukharev/opencommit: Auto-generate impressive commits with AI in 1 second](https://github.com/di-sukharev/opencommit)\n* **[24:03](#t=24:03)** Code Geex\n* [CodeGeeX - A Multilingual Code Generation Tool - CodeGeeX](https://codegeex.cn/)\n* [Ghostwriter - Code faster with AI - Replit](https://replit.com/site/ghostwriter)\n* [Meaningful Code Tests for Busy Devs | CodiumAI](https://www.codium.ai/)\n* **[30:20](#t=30:20)** Tab9 and Kite\n* [AI assistant for software developers | Tabnine](https://www.tabnine.com/)\n* [Potluck - Web components × Gear × Docker × Web Dev Frameworks × Golden Handcuffs × Browser Testing × SSR React × Code Prediction × More! — Syntax Podcast 364](https://syntax.fm/show/364/potluck-web-components-gear-docker-web-dev-frameworks-golden-handcuffs-browser-testing-ssr-react-code-prediction-more)\n* **[33:06](#t=33:06)** Sloppy prompt example\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '40dee08fe2846670cc1730b16e293315970d0222a72c1bf6b695b219dd084644', 'roundup-sick-ai-tools-for-developers', '/shows/638 - Hasty.md', '2023-10-16 20:08:27.469', '2023-10-27 15:58:19.778', 'HASTY'),
('syntax_podcast_show_00639', 639, 'Stump’d × JavaScript × GraphQL × Memory Safety × Web History', '2023-07-12 12:00:00.347', 'https://traffic.libsyn.com/syntax/Syntax_-_639.mp3', '\nIn this episode of Syntax, Wes and Scott try to stump each other with questions about JavaScript, HTTP status error codes, memory safety, and a bit of web history thrown in.\n\n## Show Notes\n\n* **[00:11:07](#t=00:11:07)** Welcome\n* [Displaced Gamers](https://www.youtube.com/c/DisplacedGamers/)\n* **[00:46:00](#t=00:46:00)** In which year was JavaScript introduced?\n* **[02:59:16](#t=02:59:16)** What status code is returned by server when a resource isn\'t found?\n* **[03:32:00](#t=03:32:00)** Which http status code indicates the client must authenticate itself?\n* **[04:34:17](#t=04:34:17)** What is a pseudo class and give an example?\n* **[05:15:11](#t=05:15:11)** What JavaScript function allows you to delay the execution of a function?\n* **[06:02:06](#t=06:02:06)** Who first proposed using separate style sheet language for the web?\n* **[08:08:14](#t=08:08:14)** Which of the following statements about JavaScript strict are true?\n* **[08:50:11](#t=08:50:11)** What is event driven programming in Node.js?\n* **[10:26:08](#t=10:26:08)** In GraphQL, how do you mark a field as deprecated?\n* **[10:47:24](#t=10:47:24)** How does xHTML differ from HTML?\n* **[11:48:21](#t=11:48:21)** Which of the following statements is true about objects in JavaScript?\n* **[13:20:19](#t=13:20:19)** What is a type erase in TypeScript?\n* **[14:21:23](#t=14:21:23)** In TypeScript which syntax can be used to define a user defined type guard?\n* **[16:02:12](#t=16:02:12)** What is a closure in JavaScript?\n* **[17:40:00](#t=17:40:00)** Which node.js module provides asynchronus file I/O?\n* **[18:54:08](#t=18:54:08)** What does memory safety mean?\n* **[21:57:11](#t=21:57:11)** What does http2 introduce to improve speed?\n* **[23:58:05](#t=23:58:05)** What are strategies for optimizing HTML5 video?\n* **[26:28:11](#t=26:28:11)** Which of the following is not a correct way to create a new object?\n* **[28:13:20](#t=28:13:20)** What is the difference between function declaration and function expression?\n* **[30:49:11](#t=30:49:11)** What is the value of this inside an arrow function defined in a non-arrow function?\n* **[31:22:11](#t=31:22:11)** What is a type guard?\n* **[33:03:11](#t=33:03:11)** What is the order of execution in JavaScript?\n* **[35:11:01](#t=35:11:01)** Which version of ecmascript was scrapped?\n* **[39:41:00](#t=39:41:00)** What is the result of the following comparison in JavaScript?\n* **[41:37:21](#t=41:37:21)** What were the major criticisms of CSS in it\'s early days?\n* **[46:48:10](#t=46:48:10)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Projector](https://www.amazon.com/dp/B09R4HYV1X?psc=1&linkCode=sl1&tag=leveluptuts01-20&linkId=de49f8b0a8132a0d5c0fe05154f4c4ee&language=en_US)\n* Wes: [USB plug](https://www.amazon.ca/dp/B09R9RMV79?psc=1&linkCode=sl1&tag=isi777-20&linkId=e3fd20e6db40f0279efa3e3696cc3f28&language=en_CA&ref_=as_li_ss_tl)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '0af1735d2f42b968ea2559c2a709875bc6182855ddf079b0ef83fa8769ee3b12', 'stump-d-javascript-graphql-memory-safety-web-history', '/shows/639 - Tasty Stumpd.md', '2023-10-16 20:08:27.517', '2023-10-27 15:58:19.832', 'TASTY'),
('syntax_podcast_show_00640', 640, 'Supper Club × val.town with Steve Krouse', '2023-07-14 12:00:00.056', 'https://traffic.libsyn.com/syntax/Syntax_-_640.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Steve Krouse about val.town, what it is, his philosophies on teaching people to code, the tech stack for val.town, and the benefits of inspiring kids to learn to code.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:27](#t=01:27)** Who is Steve Krouse?\n* [Steve Krouse](https://stevekrouse.com/)\n* [Future of Coding](https://futureofcoding.org/)\n* [stevekrouse (Steve Krouse) · GitHub](https://github.com/stevekrouse)\n* [Steve Krouse (@stevekrouse) on Twitter](https://twitter.com/stevekrouse)\n* [Coding Classes for Kids & Teens | Coding for Kids | The Coding Space](https://www.thecodingspace.com/)\n* **[03:06](#t=03:06)** What is Val.town?\n* [Val Town](https://www.val.town/pricing)\n* **[08:35](#t=08:35)** Where did the inspiration for social dev environments come from?\n* **[12:52](#t=12:52)** WYSIWYG code vs being code first\n* **[16:30](#t=16:30)** How does val.town inspire people?\n* **[20:26](#t=20:26)** How do you prevent people abusing val.town?\n* **[24:57](#t=24:57)** What\'s the UI story for snippets on val.town?\n* **[27:31](#t=27:31)** Do you plan to support express?\n* **[29:03](#t=29:03)** What\'s the tech stack behind the front end of val.town?\n* **[30:35](#t=30:35)** What\'s the tech stack for the back end of val.town?\n* **[34:37](#t=34:37)** How do you measure for pricing?\n* **[37:07](#t=37:07)** Who is using val.town?\n* **[42:00](#t=42:00)** What\'s your methodology for teaching kids to code?\n* **[47:44](#t=47:44)** Supper Club questions\n* [GitHub - pomdtr/sunbeam: Generate powerful TUIs from simple scripts written in any language.](https://github.com/pomdtr/sunbeam)\n* [Deno — A modern runtime for JavaScript and TypeScript](https://deno.land/)\n* [A Small Matter of Programming](https://mitpress.mit.edu/9780262140539/a-small-matter-of-programming/)\n* [The Unison language](https://www.unison-lang.org/)\n* [CodeMirror](https://codemirror.net/)\n* [A Small Matter of Programming: Perspectives on End User Computing](https://www.amazon.ca/s?k=A+Small+Matter+of+Programming:+Perspectives+on+End+User+Computing&linkCode=gs3&linkId=a4276584f94c53442569757002ff7fe2&tag=isi777-20)\n* [Stripe Press — Ideas for progress](https://press.stripe.com/)\n* [pomdtr/sunbeam: Generate powerful TUIs from simple scripts written in any language.](https://github.com/pomdtr/sunbeam)\n* [Seymour Papert](https://en.wikipedia.org/wiki/Seymour_Papert)\n* [woofjs.com](https://woofjs.com/)\n* [Bret Victor](https://en.wikipedia.org/wiki/Bret_Victor)\n* [Welcome | Future of Coding](https://futureofcoding.org/)\n* [Tom MacWright (@tmcw)](https://twitter.com/tmcw)\n* **[55:54](#t=55:54)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [SwitchBot Wi-Fi Smart Lock](https://www.amazon.ca/dp/B0B155T8QM?crid=1QGM6LSDYF8IR&keywords=switchbot+lock&sprefix=switchbot+loc,aps,116&language=en_US&sr=8-4&linkCode=gs2&linkId=9da52a90625d3d2fabe94ba5cfef40bf&tag=isi777-20)\n\n## Shameless Plugs\n\n* [Val Town](https://www.val.town/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'f15d3369ffe12918b77990e2e7cbddb4eb18b6f5d6e460027e04d66a32a3b2b4', 'supper-club-val-town-with-steve-krouse', '/shows/640 - Supper Steve.md', '2023-10-16 20:08:27.557', '2023-10-27 15:58:19.897', 'SUPPER'),
('syntax_podcast_show_00641', 641, 'Help Me Help You - How To Ask For Help', '2023-07-17 12:00:00.139', 'https://traffic.libsyn.com/syntax/Syntax_-_641.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how to get help for a bug or error you\'re getting in someone else\'s code.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:54](#t=01:54)** Building a reproduction of the error\n* **[03:55](#t=03:55)** Creating a gist\n* [Gist](https://gist.github.com/)\n* **[04:48](#t=04:48)** Be responsive. Be ready.\n* **[08:03](#t=08:03)** Where do you go first for support?\n* **[09:44](#t=09:44)** Search for your issue first\n* [GitHub Issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)\n* **[10:53](#t=10:53)** Be nice\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'f257523c2aff6074a8f59d8e4a4cc836c897211ae185aaf4973337fc3a17269e', 'help-me-help-you-how-to-ask-for-help', '/shows/641 - Hasty helper.md', '2023-10-16 20:08:27.717', '2023-10-27 15:58:19.990', 'HASTY'),
('syntax_podcast_show_00642', 642, 'Potluck × CSS Variables in React × JS Notebooks × Selling a Domain', '2023-07-19 12:00:00.829', 'https://traffic.libsyn.com/syntax/Syntax_-_642.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about Prisma, CSS variables in React components, JS notebooks, transcribing podcasts, keeping up with dev skills, selling a domain, and more.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:42](#t=00:42)** Harassed by a big truck\n* **[03:20](#t=03:20)** Corrections and omissions\n* [Syntax 627 - Electronics for Beginners](https://syntax.fm/show/627/electronics-for-beginners)\n* **[05:57](#t=05:57)** Should I be using $executeRawUnsafe with Prisma?\n* **[09:48](#t=09:48)** unset and initial\n* **[11:54](#t=11:54)** true and false outside ARIA attributes\n* **[14:56](#t=14:56)** Is there a way to modify the CSS variables from the React component?\n* **[18:58](#t=18:58)** How do you feel about the JS notebooks landscape?\n* [Jupyter](https://jupyter.org/)\n* [yunabe/tslab: Interactive JavaScript and TypeScript programming with Jupyter](https://github.com/yunabe/tslab)\n* [Val Town](https://www.val.town/)\n* [The notes app for your working memory - Stashpad](https://www.stashpad.com/)\n* [Obsidian - Sharpen your thinking](https://obsidian.md/)\n* [Light Table](http://lighttable.com/)\n* **[27:39](#t=27:39)** Is it possible to transcribe your podcasts?\n* [World\'s Most Powerful Speech-to-Text API | Deepgram](https://deepgram.com/)\n* **[29:05](#t=29:05)** Any tips for keeping my developer skills up without burning out?\n* **[36:35](#t=36:35)** Any advice for selling a domain?\n* [Escrow.com | Never buy or sell online without using Escrow.com.](https://www.escrow.com/)\n* **[42:13](#t=42:13)** How do you update and future-proof project dependencies?\n* [Syntax 425 - Updating Project Dependencies](https://syntax.fm/show/425/updating-project-dependencies)\n* **[47:14](#t=47:14)** When I write TypeScript code, I always wonder if it\'s a generally good practice to use Type-Only import when importing types?\n* **[53:54](#t=53:54)** How would you go about conditional wrapper tags in Astro, Svelte or React?\n* **[56:07](#t=56:07)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Ancient Architects](https://www.youtube.com/@AncientArchitects)\n* Wes: [Small Rig](https://amzn.to/3NTviaX)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '9a4ff25154379faaa00b683fd9ee769853c9662d5a0cf0d9671c1cc356288bae', 'potluck-css-variables-in-react-js-notebooks-selling-a-domain', '/shows/642 - Tasty potluck.md', '2023-10-16 20:08:27.760', '2023-10-27 15:58:20.044', 'TASTY'),
('syntax_podcast_show_00643', 643, 'Supper Club × WASM, Fastly Edge, and Polyfill.io with Jake Champion', '2023-07-21 12:00:00.938', 'https://traffic.libsyn.com/syntax/Syntax_-_643.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Jake Champion about his work with Fastly and Polyfill, the difference between WASI and WASM, what Winter CG is, and what makes Fastly different.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* **[02:06](#t=02:06)** Who is Jake Champion?\n* [Jake (@JakeDChampion)](https://twitter.com/jakedchampion)\n* [JakeChampion on GitHub](https://github.com/JakeChampion)\n* **[04:31](#t=04:31)** How long as Polyfill been around?\n* **[06:11](#t=06:11)** What is Fastly?\n* [Fastly](https://www.fastly.com/)\n* [Polyfill](https://Polyfill.io)\n* [WASMTime](https://wasmtime.dev/)\n* [SpiderMonkey JavaScript/WebAssembly Engine](https://spidermonkey.dev/)\n* **[12:09](#t=12:09)** What are people running on the edge with Fastly?\n* **[16:29](#t=16:29)** What is Winter CG compliance?\n* [Winter CG proposal](https://github.com/wintercg/proposal-common-minimum-api)\n* **[17:55](#t=17:55)** What about node API\'s being in platforms\n* **[21:18](#t=21:18)** What is WASI vs WASM?\n* **[24:37](#t=24:37)** Who is Web Assembly for?\n* **[31:34](#t=31:34)** Is there anything WASM is not good for?\n* **[41:39](#t=41:39)** What makes the Fastly runtime different from others\n* [Hono](https://hono.dev/)\n* [Smashing Mag - Web Workers](https://www.smashingmagazine.com/2021/06/web-workers-2021/)\n* [Worker Tools](https://workers.tools)\n* **[47:07](#t=47:07)** Supper Club questions\n* [iTerm2](https://iterm2.com/)\n* [Zsh for Humans](https://github.com/romkatv/zsh4humans)\n* **[50:26](#t=50:26)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Luther TV Series](https://www.imdb.com/title/tt1474684/)\n* [Forrest Gump](https://www.imdb.com/title/tt0109830/?ref_=nv_sr_srsg_1_tt_5_nm_3_q_Forest%2520Gump)\n\n## Shameless Plugs\n\n* [Fiddle on Fastly](https://fiddle.fastly.dev/)\n* [js-compute](https://github.com/fastly/js-compute-runtime)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '3727354221a30197385ee4c31b02fb77b67f8f445ba25d203b95b2c5c23993e7', 'supper-club-wasm-fastly-edge-and-polyfill-io-with-jake-champion', '/shows/643 - Supper with Jake.md', '2023-10-16 20:08:27.795', '2023-10-27 15:58:20.095', 'SUPPER'),
('syntax_podcast_show_00644', 644, 'User Feedback UI - Toasts, Flash, Validation', '2023-07-24 12:00:00.959', 'https://traffic.libsyn.com/syntax/Syntax_-_644.mp3', '\nIn this Hasty Treat, Scott and Wes talk about toast messages for validation, errors, confirmations, and more.\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[01:04](#t=01:04)** Why use these types of notifications\n* **[03:34](#t=03:34)** Old school checking stories\n* **[05:35](#t=05:35)** What kinds of toast messages are there?\n* **[10:02](#t=10:02)** Why toast?\n* **[11:38](#t=11:38)** Best practices for toast messages\n* **[17:09](#t=17:09)** Timeouts and manual close auto close\n* **[19:38](#t=19:38)** Multiple messages stacking on top of each other\n* **[22:56](#t=22:56)** Using a toast library\n* [Building a toast component](https://web.dev/building-a-toast-component/)\n* [react-hot-toast - The Best React Notifications in Town](https://react-hot-toast.com/)\n* [Real-time notification system for products | MagicBell](https://www.magicbell.com/)\n* **[28:29](#t=28:29)** Form validation\n* [Form validation with HTML5 and JavaScript](https://www.freecodecamp.org/news/form-validation-with-html5-and-javascript/)\n* **[33:36](#t=33:36)** HTML inputs\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'bc4244af49a4c1952d838fa4f0f6e366d5e00010433668e9a6f26ff19d12ec8d', 'user-feedback-ui-toasts-flash-validation', '/shows/644 - Hasty Toast.md', '2023-10-16 20:08:27.899', '2023-10-27 15:58:20.197', 'HASTY'),
('syntax_podcast_show_00645', 645, 'Polyfills, Transpiling and Monkey Patching', '2023-07-26 12:00:00.235', 'https://traffic.libsyn.com/syntax/Syntax_-_645_new.mp3', '\nIn this episode of Syntax, Wes and Scott talk about what polyfills, transpiling, and monkey patching mean, how and when to do it, and libraries that can help you out.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:07](#t=01:07)** Toast follow up\n* **[02:45](#t=02:45)** What are transpiling, ponyfill, polyfill, and monkey patching\n* [TC39 Proposals](https://github.com/tc39/proposals)\n* [Pretty excited about the new JavaScript non-mutating array methods. Currently in stage 3](https://twitter.com/wesbos/status/1593271021557239809)\n* **[11:18](#t=11:18)** Transpiling unsupported CSS\n* **[15:11](#t=15:11)** Polyfills\n* [Popover polyfill](https://github.com/oddbird/popover-polyfill/blob/main/src/popover.ts)\n* **[19:22](#t=19:22)** Polyfilling CSS\n* **[21:06](#t=21:06)** HTML polyfills\n* **[27:47](#t=27:47)** How to transpile and polyfill\n* [Babel](https://babeljs.io/)\n* [TypeScript: JavaScript With Syntax For Types](https://www.typescriptlang.org/)\n* [CoffeeScript](https://coffeescript.org/)\n* [Civet](https://civet.dev/)\n* [cronn/jsxtransformer: Pipeline for transforming JSX files using Babel.js and Uglify.js](https://github.com/cronn/jsxtransformer)\n* [Svelte • Cybernetically enhanced web apps](https://svelte.dev/)\n* [Polyfill.io](https://polyfill.io/v3/)\n* [core-js - npm](https://www.npmjs.com/package/core-js)\n* **[35:46](#t=35:46)** Shiv and shims\n* [Shim vs Shiv](https://stackoverflow.com/questions/14429061/html5-shim-vs-shiv)\n* **[38:16](#t=38:16)** Monkey patching\n* **[49:08](#t=49:08)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Cable sleeve](https://amzn.to/44vKgcW)\n* Wes: [Air Purifier](https://www.meross.com/en-gc/smart-air-purifier/homekit-air-purifier/112)\n* [AliExpress](https://www.aliexpress.com/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'df06ca69faf417962ab072617dd8c67bf75329da706c56011dde6e1d77c9cb09', 'polyfills-transpiling-and-monkey-patching', '/shows/645 - Tasty.md', '2023-10-16 20:08:27.952', '2023-10-27 15:58:20.265', 'TASTY'),
('syntax_podcast_show_00646', 646, 'Supper Club × Email Sending, Spam, DMARC, SPF, Styling, and more with Andris Reinman', '2023-07-28 12:00:00.686', 'https://traffic.libsyn.com/syntax/Syntax_-_646.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Andris Reinman about his work on all things email - spam, DMARC, SPF, why there\'s no good CSS in email, and his current project: Email Engine.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome\n* **[01:56](#t=01:56)** Introducing Andris Reinman\n* [Andris Reinman on GitHub](https://github.com/andris9)\n* [Andris Reinman (@andrisreinman)](https://twitter.com/andrisreinman)\n* [Nodemailer :: Nodemailer](https://nodemailer.com/about/)\n* **[04:34](#t=04:34)** Why is email so difficult?\n* [Free DMARC Monitoring from Postmark](https://dmarc.postmarkapp.com/)\n* [ConvertKit: The creator marketing platform](https://convertkit.com/)\n* **[09:48](#t=09:48)** What has changed in email?\n* **[10:52](#t=10:52)** What are DMARK, SPF and BIMI?\n* **[18:48](#t=18:48)** Is Mailtrain an open source alternative to Mailchimp?\n* [Mailtrain-org/mailtrain: Self hosted newsletter app](https://github.com/Mailtrain-org/mailtrain)\n* **[22:52](#t=22:52)** Why can\'t we use CSS in email?\n* **[29:05](#t=29:05)** Why is email so expensive?\n* **[32:39](#t=32:39)** How do you keep your emails out of the spam folder?\n* **[35:42](#t=35:42)** What is Email Engine?\n* [EmailEngine Email API](https://emailengine.app/)\n* **[40:16](#t=40:16)** Is Email Engine self hosted?\n* **[41:01](#t=41:01)** How does Ethereal email work?\n* [Ethereal Email](https://ethereal.email/)\n* **[46:16](#t=46:16)** What email client do you use?\n* **[49:44](#t=49:44)** Are any email clients harder to send to?\n* **[55:23](#t=55:23)** Supper Club questions\n* [iTerm2 - macOS Terminal Replacement](https://iterm2.com/)\n* **[59:29](#t=59:29)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Programming Internet Email: Mastering Internet Messaging Systems: Wood, David: 9781565924796: Books - Amazon.ca](https://www.amazon.ca/dp/1565924797?crid=2GCF7943U1NWA&keywords=programming+internet+email&sprefix=programming+internet+email,aps,136&language=en_US&sr=8-2&linkCode=gs2&linkId=37abb4935d4968e684fb8d17ca29e988&tag=isi777-20)\n\n## Shameless Plugs\n\n* [EmailEngine Email](https://emailengine.app/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'fdfd9064ded2ed67f3ee1c1f4776f3a2f2211e77ace4792f3be328d60d7d7fe4', 'supper-club-email-sending-spam-dmarc-spf-styling-and-more-with-andris-reinman', '/shows/646 - Supper.md', '2023-10-16 20:08:27.989', '2023-10-27 15:58:20.318', 'SUPPER'),
('syntax_podcast_show_00647', 647, 'Rust for JavaScript Developers - Node vs Rust Concepts', '2023-07-31 12:00:00.384', 'https://traffic.libsyn.com/syntax/Syntax_-_647.mp3', '\nIn this Hasty Treat, Scott and Wes talk about Rust, and how the concepts might translate for JavaScript developers looking to try writing in Rust.\n\n## Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:08](#t=01:08)** Wes\' big beer bottle and Red Green\n* [RedGreenTV on YouTube](https://www.youtube.com/@RedGreenTV)\n* **[05:03](#t=05:03)** Thrift store finds\n* **[06:19](#t=06:19)** Rust in JavaScript\n* [TOML: Tom\'s Obvious Minimal Language](https://toml.io/en/)\n* **[11:07](#t=11:07)** Documentation\n* [Docs.rs](https://docs.rs/)\n* [Practice.rs](https://practice.rs/comments-docs.html)\n* **[16:46](#t=16:46)** Memory safety\n* **[17:43](#t=17:43)** What about promises in Rust?\n* **[19:24](#t=19:24)** Error handling in Rust\n* **[27:39](#t=27:39)** What\'s with the double colon?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '50743f4a60d5feecaa6a5d9f8c5d09cec597ac14a7e05e4611bd449ec844d7af', 'rust-for-javascript-developers-node-vs-rust-concepts', '/shows/647 - Hasty.md', '2023-10-16 20:08:28.114', '2023-10-27 15:58:20.402', 'HASTY'),
('syntax_podcast_show_00648', 648, 'Standard Server JavaScript - Deno, Workers, Bun and More', '2023-08-02 12:00:00.908', 'https://traffic.libsyn.com/syntax/Syntax_-_648.mp3', '\nIn this episode of Syntax, Wes and Scott talk about JavaScript runtimes available to use, what to consider, and packages to use.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:00](#t=01:00)** Scott\'s glasses\n* **[03:46](#t=03:46)** All the runtimes\n* [Bun — A fast all-in-one JavaScript runtime](https://bun.sh/)\n* [Edge Functions Supabase Docs](https://supabase.com/docs/guides/functions)\n* [Edge Functions Netlify Docs](https://docs.netlify.com/edge-functions/overview/)\n* [Deno — A modern runtime for JavaScript and TypeScript](https://deno.land/)\n* [Fast and low overhead web framework, for Node.js | Fastify](https://fastify.dev/)\n* [What Is Edge Computing? Alibaba](https://www.alibabacloud.com/knowledge/what-is-edge-computing)\n* **[05:15](#t=05:15)** A note for anyone new to JavaScript\n* **[08:40](#t=08:40)** Winter CG\n* [WinterCG](https://wintercg.org/)\n* **[11:05](#t=11:05)** Fetch\n* [sindresorhus/ky: JavaScript HTTP client based on the browser Fetch API](https://github.com/sindresorhus/ky)\n* [website/src/routes/shows/+page.svelte](https://github.com/syntaxfm/website/blob/v2/src/routes/shows/%2Bpage.svelte#L44)\n* **[14:53](#t=14:53)** URL\n* **[20:02](#t=20:02)** addEVentListener\n* [whatwg/fs · Issue #5 · wintercg/proposal-common-minimum-api · GitHub](https://github.com/wintercg/proposal-common-minimum-api/issues/5)\n* **[22:53](#t=22:53)** Web streams\n* [Web Streams Explained — Syntax Podcast 587](https://syntax.fm/show/587/web-streams-explained)\n* **[26:03](#t=26:03)** Structured Clone\n* [Structured JSON | Worker Tools](https://workers.tools/structured-json/)\n* **[33:43](#t=33:43)** What does JSON 5 do?\n* **[34:48](#t=34:48)** Markdown flavors\n* **[36:46](#t=36:46)** File\n* **[40:32](#t=40:32)** AbortController and AbortSignal\n* [DOM Standard](https://dom.spec.whatwg.org/#abortsignal)\n* [DOM Standard](https://dom.spec.whatwg.org/#abortcontroller)\n* **[42:45](#t=42:45)** Packages for building\n* [linkedom - npm](https://www.npmjs.com/package/linkedom)\n* **[44:05](#t=44:05)** Honking the Hono.dev\n* [Itty Router](https://www.npmjs.com/package/itty-router)\n* [Itty Dev](https://itty.dev/)\n* [Hono.dev](https://hono.dev/)\n* **[55:25](#t=55:25)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Macro Factor](https://macrofactorapp.com/)\n* Wes: [CRP Products](https://crpproducts.com/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '5dacce6384603d87bca31a75ab2ac04013e4a6b57e607202436853206defc29d', 'standard-server-javascript-deno-workers-bun-and-more', '/shows/648 - Tasty.md', '2023-10-16 20:08:28.151', '2023-10-27 15:58:20.446', 'TASTY'),
('syntax_podcast_show_00649', 649, 'Supper Club × Ryan Florence of Remix', '2023-08-04 12:00:00.417', 'https://traffic.libsyn.com/syntax/Syntax_-_649.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Ryan Florence about Remix, working at Shopify, the history of licensing and pricing, quitting Twitter, the state of React Server components, and more.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* [Ryan Florence](https://ryanflorence.com/)\n* [Ryan Florence (@ryanflorence) / X](https://twitter.com/ryanflorence)\n* [React Training](https://reacttraining.com/)\n* [React Router Docs Moved](https://reacttraining.com/react-router)\n* [ryanflorence (Ryan Florence) · GitHub](https://github.com/ryanflorence)\n* **[01:42](#t=01:42)** Collarbone update\n* **[06:47](#t=06:47)** What is Remix?\n* [Remix.run](https://remix.run/)\n* **[11:43](#t=11:43)** Server actions\n* **[15:33](#t=15:33)** What was the history around licensing?\n* **[20:30](#t=20:30)** Open source is weird now\n* **[22:21](#t=22:21)** Working with Shopify and Hydrogen\n* [Remixing Shopify | Remix](https://remix.run/blog/remixing-shopify)\n* [CSS Zen Garden: The Beauty of CSS Design](https://www.csszengarden.com/)\n* [The Zen of CSS Design: Visual Enlightenment for the Web: Shea, Dave, Holzschlag, Molly E.: 9780321303479: Amazon.com: Books](https://www.amazon.com/exec/obidos/ASIN/0321303474/mezzoblue-20?&linkCode=sl1&linkId=dfe79f27d8b7dace1e7a26065fcd58c4&language=en_US)\n* **[28:04](#t=28:04)** On quitting Twitter\n* **[35:33](#t=35:33)** What\'s coming up with v2 of Remix?\n* **[40:30](#t=40:30)** The reality of breaking changes\n* **[44:18](#t=44:18)** What\'s the status of React Server components?\n* **[49:46](#t=49:46)** Will Remix ever have React Server components in it?\n* **[50:55](#t=50:55)** How should we be fetching our data?\n* **[53:04](#t=53:04)** Do you have a wishlist for JSX?\n* **[58:45](#t=58:45)** Supper Club questions\n* [Strapi - Open source Node.js Headless CMS 🚀](https://strapi.io/)\n* [Sidekiq](https://sidekiq.org/)\n* [GitHub - i-tu/Hasklig: Hasklig - a code font with monospaced ligatures](https://github.com/i-tu/Hasklig)\n* [GitHub - sindresorhus/terminal-snazzy: Elegant Terminal theme with bright colors](https://github.com/sindresorhus/terminal-snazzy)\n* **[08:24](#t=08:24)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Minivans\n\n## Shameless Plugs\n\n* [Shopify](https://www.shopify.com/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '3130a2ed18e91b9a3f324512ff1a2dc0f9c2b731a62d0246500097a7ad03983f', 'supper-club-ryan-florence-of-remix', '/shows/649 - Supper.md', '2023-10-16 20:08:28.187', '2023-10-27 15:58:20.492', 'SUPPER'),
('syntax_podcast_show_00650', 650, 'Why is Facebook’s HTML + CSS Such a Mess?', '2023-08-07 12:00:00.257', 'https://traffic.libsyn.com/syntax/Syntax_-_650.mp3', '\nIn this episode of Syntax, Wes and Scott talk about why Threads, Instagram, and all things Facebook have what seems like really messy HTML and CSS?\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* [Scott on Threads](https://www.threads.net/@stolinski)\n* [Wes on Threads](https://www.threads.net/@wesbos)\n* **[00:35](#t=00:35)** Threads has got divs\n* **[02:42](#t=02:42)** Tight scoping\n* **[09:44](#t=09:44)** Avoids specificity\n* **[10:37](#t=10:37)** Dealing with ad blockers and scraping\n* **[15:45](#t=15:45)** Divs are free, what\'s the big deal?\n* **[20:19](#t=20:19)** Facebook is tracking everything\n* **[27:57](#t=27:57)** React Native\n\n* [Stylex: A Contributor’s Story with Hammad Khalid](https://developers.facebook.com/blog/post/2021/12/14/stylex-contributor-story-hammad-khalid/)\n* [Meta Open Source](https://opensource.fb.com/)\n* [Tech stack rebuild for a new Facebook.com - Engineering at Meta](https://engineering.fb.com/2020/05/08/web/facebook-redesign/)\n* [RF21 – Naman Goel – Rethinking CSS - Introducing Stylex](https://www.youtube.com/watch?v=ur-sGzUWId4)\n* [@stylexjs/stylex - npm](https://www.npmjs.com/package/@stylexjs/stylex?activeTab=code)\n* [Facebook CSS-in-JS Solution Stylex Introduced at React Finland 2021](https://www.infoq.com/news/2021/10/facebook-css-js-stylex/)\n* [Boosts - Arc Boosts](https://arcboosts.com/boosts?page=2)\n* [/uses](https://uses.tech/)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '2fa300d48ce0a3a3f0fc3eb613ddfda005dadc4fece62faad0c124aa2b921a28', 'why-is-facebook-s-html-css-such-a-mess', '/shows/650 - Tasty Threads.md', '2023-10-16 20:08:28.285', '2023-10-27 15:58:20.588', 'HASTY'),
('syntax_podcast_show_00651', 651, 'Potluck × Is TypeScript Fancy Duct Tape × Back Pain × Cloud Service Rate Limits', '2023-08-09 12:00:00.184', 'https://traffic.libsyn.com/syntax/Syntax_-_651.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about TypeScript just being fancy duct tape, dealing with back pain while coding, rate limits on cloud services, what to use for email provider, is Firebase a legit platform, and more!\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[03:11](#t=03:11)** The Sunday scaries\n* **[06:03](#t=06:03)** Is TypeSctipt just a bunch of fancy Duck Tape?\n* [Is TypeScript saving us?](https://stackblitz.com/edit/typescript-xddko7?file=index.ts,index.html)\n* **[12:29](#t=12:29)** How do you go years into programming without back pain?\n* [Hasty Treat - Stretching For Developers with Scott — Syntax Podcast 293](https://syntax.fm/show/293/hasty-treat-stretching-for-developers-with-scott)\n* **[23:51](#t=23:51)** Why don’t cloud services provide an option to shut off services when a spending limit is reached?\n* [DigitalOcean | Cloud Hosting for Builders](https://www.digitalocean.com/)\n* [Vercel: Develop. Preview. Ship. For the best frontend teams](https://vercel.com/)\n* **[28:41](#t=28:41)** How do you choose a CSS library for any project?\n* [The most advanced responsive front-end framework in the world. | Foundation](https://get.foundation/)\n* [960 Grid System](https://960.gs/)\n* **[38:26](#t=38:26)** What\'s happening to Level Up Tuts?\n* [Level Up Tutorials - Learn modern web development](https://levelup.video/)\n* [Wheels - Skateboard Wheels - 60mm Cali Roll - Shark Wheel](https://sharkwheel.com/wheels/skateboard-wheels/60mm-cali-roll/)\n* **[43:43](#t=43:43)** Not a sponsored Yeti spot\n* **[45:16](#t=45:16)** What do you do for email hosting?\n* [Google Workspace](https://workspace.google.com/lp/business/)\n* [TechSoup Canada](https://www.techsoup.ca/more-nonprofit-deals)\n* [Proton Mail: Get a private, secure, and encrypted email account](https://proton.me/mail)\n* [Outlook](https://outlook.live.com/owa/)\n* [Microsoft 365 Plans](https://www.microsoft.com/en-ca/microsoft-365/business/compare-all-microsoft-365-business-products)\n* [Scheduling Software Everyone Will Love · SavvyCal](https://savvycal.com/)\n* [Synology Photos](https://www.synology.com/en-global/dsm/feature/photos)\n* **[50:34](#t=50:34)** Is Firebase ok to run an app long term with?\n* [Firebase](https://firebase.google.com/)\n* **[58:57](#t=58:57)** Am I wrong to not do productive work intensely?\n* **[01:34](#t=01:34)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [MagSafe Charger, Anker 3-in-1 Cube with MagSafe](https://www.amazon.com/dp/B09TT8GZK9?linkCode=sl1&linkId=b868e82b9d8d18e560d2cb96bf83e2d0&language=en_US)\n* Wes: [6amLifestyle Headphone Hanger Stand Under Desk](https://www.amazon.ca/dp/B01LL3WG1U?keywords=aluminum+headphone+hook&sprefix=headphone+hook+al,aps,130&language=en_US&sr=8-8&linkCode=gs2&linkId=acb6afc9455dd8a4e8570e525546d42d&tag=isi777-20)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '5f610d62cf15c3484ade79eecd1dc328ce2881439fe1e90a2771f79619027118', 'potluck-is-typescript-fancy-duct-tape-back-pain-cloud-service-rate-limits', '/shows/651 - Tasty Potluck.md', '2023-10-16 20:08:28.323', '2023-10-27 15:58:20.634', 'TASTY'),
('syntax_podcast_show_00652', 652, 'Supper Club × Flightcontrol with Brandon Bayer', '2023-08-11 12:00:00.455', 'https://traffic.libsyn.com/syntax/Syntax_-_652.mp3', '\nCan you have a Vercel like experience on your own AWS? Scott and Wes talk with Brandon Bayer about Flightcontrol - what it is, how to use it on your app, pricing, and more.\n\n## Show Notes\n\n* **[00:32](#t=00:32)** Welcome\n* **[01:28](#t=01:28)** Who is Brandon Bayer?\n* [Brandon 🚀 Flightcontrol (@flybayer) / X](https://twitter.com/flybayer?lang=en)\n* [Flightcontrol (@Flightcontrolhq) / X](https://twitter.com/flightcontrolhq)\n* [Blitz.js - The Missing Fullstack Toolkit for Next.js](https://blitzjs.com/)\n* [Flightcontrol — AWS Without Pain](https://www.flightcontrol.dev/)\n* [Tailwind Connect 2023 | Tailwind CSS Live Event](https://connect.tailwindcss.com/)\n* **[03:00](#t=03:00)** How do you fly?\n* **[06:10](#t=06:10)** What is Flightcontrol?\n* **[10:00](#t=10:00)** Why doesn\'t Amazon make it easier?\n* **[11:34](#t=11:34)** Which parts of the AWS stack should I use?\n* **[15:08](#t=15:08)** Creating the infrastructure\n* **[19:01](#t=19:01)** Ongoing deployment\n* **[20:05](#t=20:05)** What languages does Flightcontrol support?\n* **[23:35](#t=23:35)** How are events or cron handled?\n* **[25:24](#t=25:24)** What is Temporal?\n* [Open Source Durable Execution Platform | Temporal Technologies](https://temporal.io/)\n* **[29:05](#t=29:05)** What are Nixpacks?\n* [GitHub - railwayapp/nixpacks: App source + Nix packages + Docker = Image](https://github.com/railwayapp/nixpacks)\n* **[35:50](#t=35:50)** How is Flightcontrol priced?\n* [How To Get Free AWS Credits - Flightcontrol](https://www.flightcontrol.dev/docs/guides/aws/aws-credits)\n* **[44:44](#t=44:44)** How does Flightcontrol help with scaling?\n* [Serverless Compute Engine – AWS Fargate – AWS](https://aws.amazon.com/fargate/)\n* **[46:11](#t=46:11)** What are your thoughts on ReactJS, Server components?\n* **[49:57](#t=49:57)** Supper Club questions\n* [Keychron K3 Ultra-slim Wireless Mechanical Keyboard (Version 2)](https://keychron.ca/products/keychron-k3-wireless-mechanical-keyboard)\n* [Learn to Code - for Free | Codecademy](https://www.codecademy.com/)\n* **[57:20](#t=57:20)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [EAA AirVenture Oshkosh | Oshkosh, Wisconsin | Fly-In & Convention](https://www.eaa.org/airventure)\n* [Ko Tao](https://en.wikipedia.org/wiki/Ko_Tao)\n* [Ko Lanta Yai](https://en.wikipedia.org/wiki/Ko_Lanta_Yai)\n\n## Shameless Plugs\n\n* [Flightcontrol — AWS Without Pain](https://www.flightcontrol.dev/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '9b6a4dc97fc30cd14d31e5925739bd8e2422d32074d05e7668457458dee5964a', 'supper-club-flightcontrol-with-brandon-bayer', '/shows/652 - Supper.md', '2023-10-16 20:08:28.369', '2023-10-27 15:58:20.681', 'SUPPER'),
('syntax_podcast_show_00653', 653, 'JS Fundamentals - Decorators', '2023-08-14 12:00:00.681', 'https://traffic.libsyn.com/syntax/Syntax_-_653.mp3', '\nIn this Hasty Treat, Scott and Wes talk about whether decorators are finally here, what the uses cases are for decorators, how to define a decorator, and what auto accessor is.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:00](#t=01:00)** Are decorators finally here?\n* [TC39 proposal](https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md)\n* [How this compares to other versions of decorators](https://github.com/tc39/proposal-decorators#how-does-this-proposal-compare-to-other-versions-of-decorators)\n* **[06:47](#t=06:47)** What are use cases for decorators?\n* **[10:55](#t=10:55)** How do you define a decorator?\n* **[14:20](#t=14:20)** Auto Accessor\n\non classes\n\n```\n@loggged\nclass C {}\n```\n\non fields\n\n```\nclass C {\n@logged x = 1;\n}\n```\n\nAuto Accessor\n\n```\nclass C {\n  accessor x = 1;\n}\n```\n\nsugar for below\n\n```\nclass C {\n  #x = 1; // # means private\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(val) {\n    this.#x = val;\n  }\n}\n```\n\nCan be decorated and decorator can return new get and set and init functions\n\n```\nfunction logged(value, { kind, name }) {\n  if (kind === \"accessor\") {\n    let { get, set } = value;\n\n    return {\n      get() {\n        console.log(`getting ${name}`);\n\n        return get.call(this);\n      },\n\n      set(val) {\n        console.log(`setting ${name} to ${val}`);\n\n        return set.call(this, val);\n      },\n\n      init(initialValue) {\n        console.log(`initializing ${name} with value ${initialValue}`);\n        return initialValue;\n      }\n    };\n  }\n\n  // ...\n}\n```\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '41751baa4387a28432a219a05377651a8f4de1329516a4b9fead8e19ced412a3', 'js-fundamentals-decorators', '/shows/653 - Decorators.md', '2023-10-16 20:08:28.480', '2023-10-27 15:58:20.781', 'HASTY'),
('syntax_podcast_show_00654', 654, '6 or so New Approved and Proposed JavaScript APIs', '2023-08-16 12:00:00.499', 'https://traffic.libsyn.com/syntax/Syntax_-_654.mp3', '\nIn this episode of Syntax, Wes and Scott talk about new approved and proposed JavaScript API changes including Promise.withResolvers, .at(), Immutable Array Methods, Array.fromAsync, and more.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[04:55](#t=04:55)** What are we going to cover?\n* **[06:10](#t=06:10)** Promise.withResolvers\n* **[09:40](#t=09:40)** .at()\n* [You probably knew about JavaScript\'s new .at() method for accessing array items. Did you know it works for strings too?](https://twitter.com/wesbos/status/1684964556542550031)\n* [@IAmAndrewLuca](https://twitter.com/iamandrewluca)\n* **[15:59](#t=15:59)** Immutable Array Methods\n* [Wes Bos: \"🔥 Pretty excited about the new JavaScript non-mutating array methods. Currently in stage 3. .toReversed() .toSorted() .toSpliced() - remove items .with() - replace items](https://twitter.com/wesbos/status/1593271021557239809)\n* **[21:48](#t=21:48)** Array.fromAsync\n* [Proposal for array.fromAsync](https://github.com/tc39/proposal-array-from-async)\n* **[27:15](#t=27:15)** Array Grouping\n* [Proposal for Array grouping](https://github.com/tc39/proposal-array-grouping)\n* **[31:04](#t=31:04)** Observable Events?\n* [Observable Events?](https://github.com/domfarolino/observable)\n* **[35:28](#t=35:28)** Import Attributes\n* **[39:21](#t=39:21)** v.emplace method\n* **[41:15](#t=41:15)** Decorators\n* [Proposal for Pattern Matching](https://github.com/tc39/proposal-pattern-matching)\n* **[45:42](#t=45:42)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Artifact.news](https://artifact.news/)\n* Wes: LED lights for bikes\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '5f75134847f23cd38f530bd1a191ed2fc3885bd5ab7dc26e111e80da841df548', '6-or-so-new-approved-and-proposed-javascript-apis', '/shows/654 - Tasty.md', '2023-10-16 20:08:28.523', '2023-10-27 15:58:20.824', 'TASTY'),
('syntax_podcast_show_00655', 655, 'Supper Club × How Descript Built A Next Gen Video Editor In The Browser With Andrew Lisowski', '2023-08-18 12:00:00.942', 'https://traffic.libsyn.com/syntax/Syntax_-_655.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Andrew Lisowski about working on Descript, web streams vs local storage, using state machines, writing CSS with Radix, monorepos, and more.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome\n* **[01:07](#t=01:07)** What is Descript?\n* [Descript | All-in-one video & podcast editing, easy as a doc.](https://www.descript.com/)\n* [Work — Sandwich](https://sandwich.co/work/descript-video/)\n* **[02:21](#t=02:21)** Who is Andrew Lisowski?\n* [Andrew Lisowski (@HipsterSmoothie) / X](https://twitter.com/hipstersmoothie?lang=en)\n* [hipstersmoothie.com](https://www.hipstersmoothie.com/)\n* [Descript (@DescriptApp) / X](https://twitter.com/DescriptApp)\n* [devtools.fm](https://www.devtools.fm/)\n* **[04:51](#t=04:51)** How does Descript interact with the webcam?\n* **[08:52](#t=08:52)** Web streams vs local first\n* [Web Streams Explained — Syntax Podcast 587](https://syntax.fm/show/587/web-streams-explained)\n* **[10:06](#t=10:06)** How are you exporting video?\n* [GitHub - Yahweasel/libav.js: This is a compilation of the libraries associated with handling audio and video in ffmpeg—libavformat, libavcodec, libavfilter, libavutil, libswresample, and libswscale—for emscripten, and thus the web.](https://github.com/Yahweasel/libav.js/)\n* [Riverside.fm - Record Podcasts And Videos From Anywhere](https://riverside.fm/)\n* **[14:40](#t=14:40)** How does Descript deal with recording fails?\n* **[17:17](#t=17:17)** How does Descript design and build the UI?\n* **[19:37](#t=19:37)** What did you like about state machines?\n* [XState - JavaScript State Machines and Statecharts](https://xstate.js.org/)\n* **[24:12](#t=24:12)** How are you writing your CSS with Radix?\n* [Themes – Radix UI](https://www.radix-ui.com/)\n* [Home | Open UI](https://open-ui.org/)\n* **[30:30](#t=30:30)** How does the marketing site\'s tech stack compare?\n* **[31:44](#t=31:44)** Playwright vs Cypress\n* [Fast and reliable end-to-end testing for modern web apps | Playwright](https://playwright.dev/)\n* [JavaScript Component Testing and E2E Testing Framework | Cypress](https://www.cypress.io/)\n* **[36:26](#t=36:26)** What tech do you use for monorepos?\n* **[37:01](#t=37:01)** What\'s your build tool?\n* [Workspaces | Yarn - Package Manager](https://yarnpkg.com/features/workspaces)\n* [Turbo](https://turbo.build/)\n* [webpack](https://webpack.js.org/)\n* **[40:18](#t=40:18)** Moving to the web means moving things to the backend\n* **[41:37](#t=41:37)** Descript focuses AI tools on helping creators\n* [Eye Contact: AI Video Effect | Descript](https://www.descript.com/eye-contact)\n* **[50:50](#t=50:50)** Supper Club questions\n* [Topre Switch Mechanical Keyboards](https://mechanicalkeyboards.com/shop/index.php?c=79&l=product_list)\n* [REALFORCE | Premium Keyboard, PBT, Capacitive Key Switch](https://www.realforce.co.jp/en/)\n* [Iosevka](https://typeof.net/Iosevka/)\n* [Github Dark High Contrast - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=hipstersmoothie-public.github-dark-high-contrast)\n* **[56:21](#t=56:21)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Lexical](https://lexical.dev/)\n* [shadcn/ui](https://ui.shadcn.com/)\n\n## Shameless Plugs\n\n* [devtools.fm](https://www.devtools.fm/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '294fb553ce5832be12d70c05bfec3bf75919002ee694790aa1687fa196806769', 'supper-club-how-descript-built-a-next-gen-video-editor-in-the-browser-with-andrew-lisowski', '/shows/655 - Supper Descript.md', '2023-10-16 20:08:28.575', '2023-10-27 15:58:20.875', 'SUPPER'),
('syntax_podcast_show_00656', 656, '8 Tricks When Using the Fetch() API', '2023-08-21 12:00:00.247', 'https://traffic.libsyn.com/syntax/Syntax_-_656.mp3', '\nIn this Hasty Treat, Scott and Wes talk about 8 tricks to try when using the Fetch() API.\n\n## Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[02:14](#t=02:14)** 1) Stream The Result\n\n```\n// Create a new TextDecoder instance\nconst decoder = new TextDecoder();\n\n// Make the fetch request\nfetch(\'https://api.example.com/streaming-data\')\n  .then(response => {\n    // Check if the response is valid\n    if (!response.ok) {\n      throw new Error(\'Network response was not ok\');\n    }\n\n    // Stream the response data using a TextDecoder\n    const reader = response.body.getReader();\n\n    // Function to read the streamed chunks\n    function read() {\n      return reader.read().then(({ done, value }) => {\n        // Check if the streaming is complete\n        if (done) {\n          console.log(\'Streaming complete\');\n          return;\n        }\n\n        // Decode and process the streamed data\n        const decodedData = decoder.decode(value, { stream: true });\n        console.log(decodedData);\n\n        // Continue reading the next chunk\n        return read();\n      });\n    }\n\n    // Start reading the chunks\n    return read();\n  })\n  .catch(error => {\n    // Handle errors\n    console.log(\'Error:\', error);\n  });\n  ```\n\n* **[06:05](#t=06:05)** 2) Download Progress\n* [Download progress example](https://twitter.com/wesbos/status/1688914467864903684)\n* **[09:40](#t=09:40)** 3) Cancel Streams - Abort Controller\n\n```\n// Create an AbortController instance\nconst controller = new AbortController();\n\n// Set a timeout to abort the request after 5 seconds\nconst timeout = setTimeout(() => {\ncontroller.abort();\n}, 5000);\n\n// Fetch request with the AbortController\nfetch(\'https://api.example.com/data\', { signal: controller.signal })\n```\n\n* **[11:32](#t=11:32)** 4) Testing if JSON is returned\n* **[13:18](#t=13:18)** 5) async + await + catch\n\n`const data = await fetch().catch(err => console.log(err));`\n\n* **[14:42](#t=14:42)** 6) to awaited - return error and data at top level\n\n```\nconst [err, data] = collect(fetch())\nif(err) // ....\n```\n\n* [await-to-js - npm](https://www.npmjs.com/package/await-to-js)\n* **[16:58](#t=16:58)** 7) Dev tools - Copy as fetch\n* **[17:54](#t=17:54)** 8) You can programatically create a Request, Response and Headers objects\n\n```\nconst myRequest = new Request(\'https://traffic.libsyn.com/syntax/Syntax_-_641.mp3\', {\n   headers: {\n      \'Content-Type\': \'text/plain\',\n   }\n});\n\nfetch(myRequest)\n```\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8391ff3034cd977ffb7ee91531951e42f32b1de869aeb7217dbb5e4035c9baee', '8-tricks-when-using-the-fetch-api', '/shows/656 - Hasty Fetch.md', '2023-10-16 20:08:28.678', '2023-10-27 15:58:20.975', 'HASTY'),
('syntax_podcast_show_00657', 657, 'Rust for JS Devs — Part 2', '2023-08-23 12:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax_-_657.mp3', '\nIn this episode of Syntax, Wes and Scott jump into part 2 of their look at Rust for JavaScript developers, including variables in Rust, type systems in Rust, signed and unsigned integers, and more.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[00:43](#t=00:43)** Audio issue bugs\n* **[03:17](#t=03:17)** Building decks\n* **[06:06](#t=06:06)** Variables in Rust\n* [Syntax 647: Rust for JavaScript Developers - Node vs Rust Concepts](https://syntax.fm/show/647/rust-for-javascript-developers-node-vs-rust-concepts)\n\n```\nlet x = 5;  // x is immutable\nlet mut x = 5; // x is mutable\nconst MAX_POINTS: u32 = 100_000; // must be defined at compile time\n```\n\n* **[10:42](#t=10:42)** Type System in Rust\n* **[15:52](#t=15:52)** Types in Rust\n* **[19:06](#t=19:06)** Why does Rust have signed and unsigned integers?\n* **[23:35](#t=23:35)** Slicing strings with &str\n* **[27:35](#t=27:35)** enum\n* **[27:55](#t=27:55)** struct\n* **[28:19](#t=28:19)** Vec\n* **[29:33](#t=29:33)** HashMap and HashSet\n* **[33:00](#t=33:00)** Converting Signed to Unsigned Numbers\n\n```\nlet unsigned_value: u8 = 200;\nlet signed_value: i8 = unsigned_value as i8;\n```\n\n* **[36:12](#t=36:12)** What’s up with &str?\n* **[43:31](#t=43:31)** Rust error messages\n* **[45:28](#t=45:28)** What is a Struct?\n\n```\nstruct User {\n   username: String,\n    email: String,\n    sign_in_count: u64,\n    active: bool,\n}\n\n// You can create an instance of a struct like this:\nlet user1 = User {\n    email: String::from(\"someone@example.com\"),\n    username: String::from(\"someusername123\"),\n    active: true,\n    sign_in_count: 1,\n};\n\nimpl User {\n    fn login(&mut self) {\n        self.login_count += 1;\n    }\n}\n```\n\n* **[49:17](#t=49:17)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Thermacell Patio Shield](https://amzn.to/3PZmbXG)\n* Wes: [Magnet Phone Mount](https://amzn.to/3OPIHS5)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '317faa734e1f216bbbcbf3cd8c069f38ea004a8d4408ff6127fce544d78a5b8a', 'rust-for-js-devs-part-2', '/shows/657 - Tasty.md', '2023-10-16 20:08:28.720', '2023-10-27 15:58:21.022', 'TASTY'),
('syntax_podcast_show_00658', 658, 'Supper Club × Make React 70% Faster! Million.js with 18 Year Old Aiden Bai', '2023-08-25 12:28:00.632', 'https://traffic.libsyn.com/syntax/Syntax_-_658.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Aiden Bai about his work on Million.js that aims to make React a lot faster. How does Million.js make React faster? And most importantly: has Aiden ever used a VCR?\n\n## Show Notes\n\n- **[00:35](#t=00:35)** Welcome\n- **[00:57](#t=00:57)** Introducing Aiden Bai\n- [Aiden Bai](https://aidenybai.com/)\n- [aidenybai on GitHub](https://github.com/aidenybai)\n- [@aidenybai on Twitter](https://twitter.com/aidenybai)\n- [Aiden Bai on YouTube](https://www.youtube.com/@aidenbai)\n- [Million.js](https://million.dev/)\n- **[01:57](#t=01:57)** What is Million.js?\n- **[03:20](#t=03:20)** How does React do rendering now?\n- **[04:31](#t=04:31)** How does Million.js make it faster?\n- **[07:37](#t=07:37)** What goes into creating a compiler?\n- **[08:24](#t=08:24)** How do you go from learning JavaScript to writing compilers?\n- **[11:05](#t=11:05)** Wyze WebRTC stream work\n- **[13:13](#t=13:13)** What are you using to benchmark and test?\n- [solidjs.com](https://www.solidjs.com/)\n- [js-framework-benchmark](https://github.com/krausest/js-framework-benchmark)\n- [xkcd: Compiling](https://xkcd.com/303/)\n- **[18:19](#t=18:19)** What does a slowly rendering site look like?\n- **[23:54](#t=23:54)** How do you handle find on page with large amounts of code?\n- **[25:32](#t=25:32)** What does 70% faster with Million.js mean?\n- [Hyper™](https://hyper.is/)\n- [Warp: Your terminal, reimagined](https://www.warp.dev/)\n- **[26:44](#t=26:44)** Why are maps slow?\n- [Supper Club × WASM, Fastly Edge, and Polyfill.io with Jake Champion — Syntax Podcast 643](https://syntax.fm/show/643/supper-club-wasm-fastly-edge-and-polyfill-io-with-jake-champion)\n- **[28:19](#t=28:19)** Benefits of the Macro API\n- **[31:12](#t=31:12)** Does Million.js work across the board?\n- **[33:03](#t=33:03)** Does it ever break projects? How do you test Million.js?\n- **[35:35](#t=35:35)** How do you keep up on your GitHub issues?\n- **[37:40](#t=37:40)** What other areas of tech are you interested in working on?\n- [partytown](https://github.com/BuilderIO/partytown)\n- **[39:32](#t=39:32)** What was the inspiration for your website?\n- **[43:52](#t=43:52)** Supper Club questions\n- [Gruvbox with Material Palette](https://github.com/sainnhe/gruvbox-material)\n- [iTerm2 - macOS Terminal Replacement](https://iterm2.com/)\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Barbie (2023) directed by Greta Gerwig • Reviews, film + cast • Letterboxd](https://letterboxd.com/film/barbie/)\n- [Teenage Mutant Ninja Turtles: Mutant Mayhem (2023) directed by Jeff Rowe • Reviews, film + cast • Letterboxd](https://letterboxd.com/film/teenage-mutant-ninja-turtles-mutant-mayhem/)\n\n## Shameless Plugs\n\n- [Million Kitchen Sink](https://sink.million.dev/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '38620752da0739d2f3d9d6796ea70ead671dfc8a961bf8cb3b27eaf08d4caf1f', 'supper-club-make-react-70-faster-million-js-with-18-year-old-aiden-bai', '/shows/658 - supper.md', '2023-10-16 20:08:28.766', '2023-10-27 15:58:21.067', 'SUPPER'),
('syntax_podcast_show_00659', 659, 'OG Image Options', '2023-08-28 12:00:00.717', 'https://traffic.libsyn.com/syntax/Syntax_-_659.mp3', '\nIn this Hasty Treat, Scott and Wes talk about OG images, interesting ways you can work with them, and ways you can work dynamically with them.\n\n## Show Notes\n\n- **[00:11](#t=00:11)** Welcome\n- **[02:18](#t=02:18)** What are OG images?\n- **[06:19](#t=06:19)** Testing OG images\n- [Polypane, The browser for ambitious web developers](https://polypane.app/)\n- [Meta Tags — Preview, Edit and Generate](https://metatags.io/)\n- [Sharing Debugger - Meta for Developers](https://developers.facebook.com/tools/debug/)\n- [Card Validator | Twitter Developers](https://cards-dev.twitter.com/validator)\n- **[08:27](#t=08:27)** Creating an OG image\n- [vercel/satori: Enlightened library to convert HTML and CSS to SVG](https://github.com/vercel/satori)\n- [Open Graph (OG) Image Generation | Vercel Docs](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation)\n- [Introducing OG Image Generation: Fast, dynamic social card images at the Edge – Vercel](https://vercel.com/blog/introducing-vercel-og-image-generation-fast-dynamic-social-card-images)\n- **[09:41](#t=09:41)** Dynamically generating OG images\n- [wesbos.com/thumbnail/?thumbnail=%2Fstatic%2F0005c028a536c87975eb84ae3d32ae57%2Faeron.jpg&title=Uses&url=https%3A%2F%2Fwesbos.com%2Fuses](https://wesbos.com/thumbnail?thumbnail=/static/0005c028a536c87975eb84ae3d32ae57/aeron.jpg&title=Uses&url=https://wesbos.com/uses)\n- **[21:16](#t=21:16)** Using Puppeteer\n- [Puppeteer | Puppeteer](https://pptr.dev/)\n- [Puppeteer · Browser Rendering docs](https://developers.cloudflare.com/browser-rendering/platform/puppeteer/)\n- [Cloudinary - Image and Video Upload, Store ad Monetization](https://cloudinary.com/ip/gr-sea-gg-brand-home-base?campaignid=18164753405&adgroupid=144188713167&keyword=cloudinary&device=c&matchtype=e&adposition=&gad=1)\n- [Fast and reliable end-to-end testing for modern web apps | Playwright](https://playwright.dev/)\n- **[28:47](#t=28:47)** Canva API\n- [Build The Tools Behind Great Design | Canva Developers](https://www.canva.com/developers/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '53d261b7415a238897082df8f799f2736b269b02aef8db7011aa0ad21d5fb1f0', 'og-image-options', '/shows/659 - hasty.md', '2023-10-16 20:08:28.933', '2023-10-27 15:58:21.223', 'HASTY'),
('syntax_podcast_show_00660', 660, 'Anything but Coding - Landscaping, Fitness, and more!', '2023-08-30 12:00:00.953', 'https://traffic.libsyn.com/syntax/Syntax_-_660.mp3', '\nIn this episode of Syntax, Wes and Scott talk about concerts, getting tired because of being old, landscaping, spinning on your head, gym updates, awful search engines and awful ethics for YouTubers, rewiring old engines, and what\'s being streamed.\n\n## Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:49](#t=01:49)** Being tired\n* [The Strokes & Weyes Blood Tickets | 14th August | Red Rocks Amphitheatre](https://www.theredrocksamphitheater.com/events/the-strokes-weyes-blood/)\n* **[05:08](#t=05:08)** Landscaping\n* **[10:53](#t=10:53)** Gym updates\n* **[23:01](#t=23:01)** House projects\n* **[28:39](#t=28:39)** Why are search engines so awful these days?\n* **[39:20](#t=39:20)** Internet routing\n* **[45:17](#t=45:17)** Linus Tech Tips ethics and issues\n* **[48:29](#t=48:29)** Rewiring a kid\'s ATV\n* **[50:49](#t=50:49)** What we\'re watching\n* [The Stronger By Science Podcast](https://sbspod.com/)\n* [Watch Full Swing | Netflix Official Site](https://www.netflix.com/ca/title/81483353)\n* [Break Point | Official Trailer | Netflix](https://www.youtube.com/watch?v=sWBqn8fdhWs)\n* [Watch Formula 1: Drive to Survive | Netflix Official Site](https://www.netflix.com/ca/title/80204890)\n* **[58:37](#t=58:37)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [The First Cat in Space Ate Pizza](https://amzn.to/3OtmJ5S)\n* Wes: Steam cleaner\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'd416899d1287fa366b45abd5cb308988a7f6a51811fb78c31435f56c0651416c', 'anything-but-coding-landscaping-fitness-and-more', '/shows/660 - Tasty No Coding.md', '2023-10-16 20:08:28.967', '2023-10-27 15:58:21.273', 'TASTY'),
('syntax_podcast_show_00661', 661, 'Supper Club × Shipping ESM with Mark Erikson', '2023-09-01 12:00:00.565', 'https://traffic.libsyn.com/syntax/Syntax_-_661.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Mark Erikson about his work in helping others understand shipping ESM, how to deal with permutations, whether default imports are helpful, whether TypeScript has made it easier, and what Mark\'s tool stack is for building.\n\n## Show Notes\n\n* **[00:36](#t=00:36)** Welcome!\n* **[01:45](#t=01:45)** Introducing Shipping ESM with Mark Erikson\n* [Mark Erikson (@acemarke)](https://twitter.com/acemarke)\n* [Wes Bos on Twitter: \"publishing packages that work in esm and cjs is such a nightmare. I\'ve run into so many issues today and took forever to get the proper package.json exports. I can\'t wait until we\'re 100% esm. I think I have every single combo covered.\"](https://twitter.com/wesbos/status/1610385221324619780)\n* [Mark\'s Dev Blog](https://blog.isquaredsoftware.com/)\n* [Blogged Answers: My Experience Modernizing Packages to ESM](https://blog.isquaredsoftware.com/2023/08/esm-modernization-lessons/)\n* [Greatest Hits: The Most Popular and Most Useful Posts I\'ve Written](https://blog.isquaredsoftware.com/2020/08/greatest-hits/)\n* [arethetypeswrong.github.io: Tool for analyzing TypeScript types of npm packages](https://github.com/arethetypeswrong/arethetypeswrong.github.io)\n* [publint](https://publint.dev/)\n* **[07:01](#t=07:01)** How did we get to this space in modules?\n* **[16:30](#t=16:30)** How do you deal with permutations?\n* **[22:13](#t=22:13)** Do bundlers get in the way or helping?\n* **[26:16](#t=26:16)** Are default imports useful?\n* **[30:35](#t=30:35)** Are the types wrong errors\n* **[33:41](#t=33:41)** Has TypeScript made this easier?\n* **[37:56](#t=37:56)** What\'s your tool stack for building?\n* **[39:32](#t=39:32)** How do you test?\n* **[41:35](#t=41:35)** Will we ever stop bundling?\n* **[48:03](#t=48:03)** What about source maps?\n* **[52:32](#t=52:32)** Supper Club Questions\n* [What is Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/about)\n* [Eagle Oceanic Next](https://marketplace.visualstudio.com/items?itemName=graf009.Eagle-Oceanic-Next)\n* [DroidSansMono NF Font](https://eng.m.fontke.com/font/24637914/)\n* **[55:18](#t=55:18)** React Types has more downloads than React?\n* **[59:42](#t=59:42)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Shirley Wu—Taking up space (Keynote, Outlier 2023)](https://www.youtube.com/watch?v=zF7mSTVwVs0)\n\n## Shameless Plugs\n\n* [Replay (@replayio)](https://twitter.com/replayio)\n* [Replay - The time-travel debugger from the future.](https://www.replay.io/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '3983f8a67eec0bc1c90708a99a7fa397bee19e7317a4f94fed2060a53007d6a1', 'supper-club-shipping-esm-with-mark-erikson', '/shows/661 - Mark Supperclub.md', '2023-10-16 20:08:29.018', '2023-10-27 15:58:21.333', 'SUPPER'),
('syntax_podcast_show_00662', 662, 'JavaScript Closures & Scope Explained', '2023-09-04 12:00:00.811', 'https://traffic.libsyn.com/syntax/Syntax_-_662.mp3', '\nIn this Hasty Treat, Scott and Wes explain closures and the different types of scope used, and examples of where a closure is useful.\n\n## Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[02:10](#t=02:10)** Scope\n* [Beginner JavaScript course](https://beginnerjavascript.com)\n* **[04:37](#t=04:37)** Local scope\n* **[07:35](#t=07:35)** Enclosing scope\n* **[09:39](#t=09:39)** Module scope\n* **[10:36](#t=10:36)** JavaScript is lexically scoped\n* **[11:50](#t=11:50)** Closures explained\n* **[16:06](#t=16:06)** Examples of where a closure is useful\n* [Examples of Closures](https://wesbos.com/javascript/03-the-tricky-bits/closures#examples-of-closures)\n* [Tricky Bits](https://wesbos.com/javascript/03-the-tricky-bits/scope)\n* **[22:56](#t=22:56)** Why don\'t you just use a class?\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '2edcdcc4187e27dd699d6cb3d103d5aa9008cd40826eecd9244d5f3c5999b7b8', 'javascript-closures-and-scope-explained', '/shows/662 - Hasty.md', '2023-10-16 20:08:29.145', '2023-10-27 15:58:21.438', 'HASTY'),
('syntax_podcast_show_00663', 663, 'Potluck × Soft Skills × Release Notes × Headless CMS × Organizing Code × Inet CSS?', '2023-09-06 12:00:00.531', 'https://traffic.libsyn.com/syntax/Syntax_-_663.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about learning soft skills, using release notes, headless CMS, dealing with web components and scripts, what inet is, better ways to use ChatGPT, and more!\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[01:42](#t=01:42)** Scott\'s butt pincher\n* [Affenpinscher](https://en.wikipedia.org/wiki/Affenpinscher)\n* **[06:08](#t=06:08)** You keep missing my favorite thing about Civet\n* [Civet](https://en.wikipedia.org/wiki/Civet)\n* **[07:31](#t=07:31)** What soft skills can I learn to help me in my career?\n* [HTML, CSS and JS in an ADD, OCD, Bi-Polar, Dyslexic and Autistic World | CSS-Tricks - CSS-Tricks](https://css-tricks.com/hmtl-css-and-js-in-an-add-ocd-bi-polar-dyslexic-and-autistic-world/)\n* **[12:42](#t=12:42)** Have you thought about release notes or a what\'s new section?\n* [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)\n* [How to generate Changelog using Conventional Commits | by Riccardo Canella | Jobtome Engineering | Medium](https://medium.com/jobtome-engineering/how-to-generate-changelog-using-conventional-commits-10be40f5826c)\n* **[15:57](#t=15:57)** Can you explain headless CMS and what the use-cases/implementations are?\n* **[19:24](#t=19:24)** Any suggestions for dealing with web components and the client\'s tracking scripts\n* [How to Read Flamegraphs 🔥](https://www.webperf.tips/tip/understanding-flamegraphs/)\n* [Chromium F12 Profiler: The Main Thread Pane](https://www.webperf.tips/tip/main-profiler-pane/)\n* [Agent Creation has a large CPU time · Issue #915 · bluesky-social/atproto](https://github.com/bluesky-social/atproto/issues/915#issuecomment-1539112436)\n* **[25:27](#t=25:27)** Why do we need .d.ts files in TypeScript?\n* **[30:15](#t=30:15)** What is inset in CSS?\n* [inset - CSS: Cascading Style Sheets | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/inset)\n* **[35:06](#t=35:06)** Is there a way to use AI/chat gpt to more quickly and easily understand technical documentation?\n* [Anthropic \\ Home](https://www.anthropic.com/)\n* [Getting Started 🚀 Astro Documentation](https://docs.astro.build/en/getting-started/)\n* [ChatGPT Plugin - AskTheCode | GPTStore.ai](https://gptstore.ai/plugins/askthecode-dsomok-online)\n* [ChatGPT Plugin - Scraper | GPTStore.ai](https://gptstore.ai/plugins/api-gafo-tech)\n* [Overview | TanStack Query Docs](https://tanstack.com/query/v4/docs/react/overview)\n* [Custom instructions for ChatGPT](https://openai.com/blog/custom-instructions-for-chatgpt)\n* **[40:59](#t=40:59)** why is the following true: the string \"undefined\".includes(undefined)?\n* **[43:27](#t=43:27)** How do you organize your code directories?\n* **[48:50](#t=48:50)** Is there any good reason in 2023 why we should still be loading JS files with all our script tags at the bottom of the body element?\n* **[54:32](#t=54:32)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [Surge power bar](https://amzn.to/3YMdzpR)\n* Wes: [Little Hippo Alarm](https://amzn.to/3EqvxVH)\n\n## Shameless Plugs\n\n* Scott: [Sentry](https://sentry.io)\n* Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '2fdea0ceca488c57c5f951d22ca6bc0b3f94db162a35eb78042629750d0acf1d', 'potluck-soft-skills-release-notes-headless-cms-organizing-code-inet-css', '/shows/663 - Tasty potluck.md', '2023-10-16 20:08:29.190', '2023-10-27 15:58:21.491', 'TASTY'),
('syntax_podcast_show_00664', 664, 'Supper Club × What\'s New With Astro with Fred Schott', '2023-09-08 11:00:00.957', 'https://traffic.libsyn.com/syntax/Syntax_-_664.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Fred Schott all things Astro with the announcement of Astro version 3, marketing open source projects, Starlight docs, keeping up to date, and making major version numbers less scary.\n\n## Show Notes\n\n* **[00:35](#t=00:35)** Welcome 3x guest Fred Schott!\n* [Supper Club × Astro 2.0 with Fred Schott — Syntax Podcast 580](https://syntax.fm/show/580/supper-club-astro-2-0-with-fred-schott)\n* [Pika Pkg — Syntax Podcast 212](https://syntax.fm/show/212/pika-pkg)\n* **[05:11](#t=05:11)** What is Astro?\n* **[07:37](#t=07:37)** What\'s new in Astro v3?\n* [Astro 3.0 | Astro](https://astro.build/blog/astro-3/)\n* **[14:18](#t=14:18)** Behind the scenes improvements in Astro v3\n* **[18:17](#t=18:17)** HMR Enhancements\n* **[20:10](#t=20:10)** What\'s the hosting partner deal with Vercel?\n* [Vercel: Our Official Hosting Partner | Astro](https://astro.build/blog/vercel-official-hosting-partner/)\n* **[28:04](#t=28:04)** Docs template Starlight announcement\n* [Starlight 🌟 Build documentation sites with Astro](https://starlight.astro.build/)\n* **[31:28](#t=31:28)** How often do you release updates?\n* **[33:47](#t=33:47)** Marketing open source\n* [Time to suit up | Astro Shop](https://shop.astro.build/)\n* [SvelteKit • Web development, streamlined](https://kit.svelte.dev/)\n* **[36:18](#t=36:18)** Making major version numbers less scary\n* **[40:04](#t=40:04)** Does Astro use Vite?\n* [Vite | Next Generation Frontend Tooling](https://vitejs.dev/)\n* **[42:01](#t=42:01)** Is it different working on a framework than a tool like Snowpack?\n* **[43:53](#t=43:53)** Thoughts on cloud text editors\n* [Project IDX](https://idx.dev/)\n* **[47:02](#t=47:02)** How do you keep up to date?\n* **[48:43](#t=48:43)** Do you write in TypeScript?\n* **[51:31](#t=51:31)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* [Factorio](https://www.factorio.com/)\n\n## Shameless Plugs\n\n* [Astro (@astrodotbuild)](https://twitter.com/astrodotbuild)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'bada99586e90bac31cec3b3e7350357b56d47b12d46ca76c0ff37c37e20209d4', 'supper-club-what-s-new-with-astro-with-fred-schott', '/shows/664 - Supper Fred.md', '2023-10-16 20:08:29.236', '2023-10-27 15:58:21.550', 'SUPPER'),
('syntax_podcast_show_00665', 665, 'CSS Nesting is Here!', '2023-09-11 12:00:00.253', 'https://traffic.libsyn.com/syntax/Syntax_-_665.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the arrival of CSS nesting. What is CSS nesting? How does CSS nesting work? And does it work in all browsers?\n\n## Show Notes\n\n* **[00:24](#t=00:24)** Welcome\n* **[02:31](#t=02:31)** What\'s up with CSS nesting?\n* [\"CSS Nesting just landed in Firefox 117 which puts it at 100% browser support! You can start using it today — here are 11 examples on how it works 👇](https://twitter.com/wesbos/status/1696201171587809761)\n* **[04:10](#t=04:10)** How does CSS nesting work?\n* **[09:23](#t=09:23)** What the ampersand does in nesting\n* **[21:05](#t=21:05)** It works with media queries\n* **[25:29](#t=25:29)** How does it work on all the browsers?\n* **[29:32](#t=29:32)** Lightning CSS\n* [Lightning CSS](https://lightningcss.dev/)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '0bfe37047aa15c9bf68f33ef31198a1915db48f11e35b9206fe35515b2bdeeeb', 'css-nesting-is-here', '/shows/665 - Hasty.md', '2023-10-16 20:08:29.376', '2023-10-27 15:58:21.669', 'HASTY'),
('syntax_podcast_show_00666', 666, 'Hackweek Projects - Realtime Markdown Editor and a Hardware Recording Button', '2023-09-13 12:00:00.945', 'https://traffic.libsyn.com/syntax/Syntax_-_666.mp3', '\nIn this episode of Syntax, Wes and Scott review the projects they built during Sentry\'s Hackweek: a realtime Markdown multiplayer editor, and a hardware recording button.\n\n## Show Notes\n\n* **[00:11](#t=00:11)** Welcome\n* **[00:57](#t=00:57)** What is a hack week?\n* **[01:55](#t=01:55)** Syntax Brought to you by Sentry\n* **[03:42](#t=03:42)** Scott\'s project: a multiplayer editor\n* [Liveblocks | Collaborative experiences in days, not months](https://liveblocks.io/)\n* [PartyKit | Everything is better with friends](https://www.partykit.io/)\n* [BlockNote - Javascript Block-Based text editor | BlockNote](https://www.blocknotejs.org/)\n* [Dev toolkit for building collaborative editors – Tiptap](https://tiptap.dev/)\n* [microsoft/monaco-editor: A browser based code editor](https://github.com/microsoft/monaco-editor)\n* [syntaxfm/hackweek-md-multiplayer-editor: Sentry.io Hackweek Submisison - A multiplayer editor for .md files that comits directly to GitHub](https://github.com/syntaxfm/hackweek-md-multiplayer-editor)\n* [Convex | The fullstack TypeScript development platform](https://www.convex.dev/)\n* [The Everything App](https://anytype.io/)\n* **[13:57](#t=13:57)** Multiplayer is so much easier\n* **[19:56](#t=19:56)** Wes\' project: A recording button\n* [Oracle VM VirtualBox](https://www.virtualbox.org/)\n* [Run Windows on Mac – Parallels Desktop 19 Virtual Machine for Mac](https://www.parallels.com/ca/pd/general/)\n* [Karabiner-Elements](https://karabiner-elements.pqrs.org/)\n* [folivora.ai - Great Tools for your Mac!](https://folivora.ai/)\n* [Home Assistant](https://www.home-assistant.io/)\n* [The World’s Leading 2D and 3D Platform | Unity Pro Free Trial](https://unity.com/pages/pro-free-trial?&&&&gad=1)\n* [SendCutSend | Online Laser Cutting and Waterjet Cutting](https://sendcutsend.com/)\n* [blender.org - Home of the Blender project - Free and Open 3D Creation Software](https://www.blender.org/)\n* **[42:31](#t=42:31)** Learning to skateboard\n* **[43:59](#t=43:59)** F1 documentary follow up\n* **[45:30](#t=45:30)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n* Scott: [BetterDisplay: Unlock your displays on your Mac!](https://github.com/waydabber/BetterDisplay)\n* Wes: [LOVIMAG Magnetic Hooks Heavy Duty](https://www.amazon.com/LOVIMAG-Magnetic-Hanging-Magnets-Refrigerator/dp/B0CBTZ78Q4?crid=19L2TLC6SKOWL&keywords=100lb+magnet+hooks&qid=1693326610&sprefix=100lb+magnet+hooks,aps,109&sr=8-4&th=1)\n\n## Shameless Plugs\n\n* Scott: [Syntax on TikTok](https://www.tiktok.com/@syntaxfm)\n* Wes: [@WesBos on X.com](https://twitter.com/wesbos)\n\n## Tweet us your tasty treats\n\n* [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n* [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n* [Wes\' Instagram](https://www.instagram.com/wesbos/)\n* [Wes\' Twitter](https://twitter.com/wesbos)\n* [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n* [Scott\'s Twitter](https://twitter.com/stolinski)\n* Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n* [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n* [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n* [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '41253630cb2da6189b52a27c7a3a46538379fe5d9e2dc51e1faeaddcab769071', 'hackweek-projects-realtime-markdown-editor-and-a-hardware-recording-button', '/shows/666 - tasty.md', '2023-10-16 20:08:29.414', '2023-10-27 15:58:21.759', 'TASTY'),
('syntax_podcast_show_00667', 667, 'Supper Club × How To Get Your First Dev Job With Stuart Bloxham', '2023-09-15 12:00:00.689', 'https://traffic.libsyn.com/syntax/Syntax_-_667.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Stuart Bloxham about how he learned to code, what his interview process was like when applying for a job, how he found the time to make it all work, and his thoughts on bootcamps and ways to learn.\n\n## Show Notes\n\n- **[00:36](#t=00:36)** Welcome\n- [Stuart Bloxham on GitHub](https://github.com/sbloxy123)\n- [Stuart Bloxham on LinkedIn](https://www.linkedin.com/in/stuart-bloxham-a36197121/?originalSubdomain=uk)\n- **[02:09](#t=02:09)** How did you decide to be a web developer?\n- **[08:22](#t=08:22)** Did you have clarity when your kid was born?\n- **[10:20](#t=10:20)** What was the interview process like?\n- **[18:25](#t=18:25)** What and how did you learn?\n- **[20:28](#t=20:28)** What\'s the state of bootcamps in 2023?\n- **[22:03](#t=22:03)** How important have soft skills been?\n- **[25:14](#t=25:14)** How do you know when you\'re ready to apply for a job?\n- **[35:24](#t=35:24)** Do you like coding?\n- **[37:49](#t=37:49)** How did you find the time to make it all work?\n- **[41:42](#t=41:42)** How did you deal with burnout?\n- **[43:06](#t=43:06)** Supper Club questions\n- **[45:34](#t=45:34)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Flowerhorn cichlid](https://en.wikipedia.org/wiki/Flowerhorn_cichlid)\n\n## Shameless Plugs\n\n- [Stuart Bloxham\'s Portfolio](https://www.stuartbloxham.tech/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'ed9efd434731ba3c131169ee173523df1006b533810a06577dbba8462d1559e5', 'supper-club-how-to-get-your-first-dev-job-with-stuart-bloxham', '/shows/667 - Supper.md', '2023-10-16 20:08:29.451', '2023-10-27 15:58:21.814', 'SUPPER');
INSERT INTO `Show` (`id`, `number`, `title`, `date`, `url`, `show_notes`, `hash`, `slug`, `md_file`, `created_at`, `updated_at`, `show_type`) VALUES
('syntax_podcast_show_00668', 668, 'Hacking the Tonal - Proxying, Intercepting + Debugging Traffic?', '2023-09-18 12:00:00.132', 'https://traffic.libsyn.com/syntax/Syntax_-_668.mp3', '\nIn this Hasty Treat, Scott and Wes talk about how you can intercept and debug traffic going out from your computer or other internet connected devices in your home, or your garage!\n\n## Show Notes\n\n- **[00:25](#t=00:25)** Welcome\n- **[01:55](#t=01:55)** Syntax Brought to you by Sentry\n- **[02:17](#t=02:17)** Scott\'s story of wanting to intercept data\n- [Tonal](https://www.tonal.com/)\n- **[06:36](#t=06:36)** Other examples\n- **[08:38](#t=08:38)** Different types of traffic\n- **[14:52](#t=14:52)** TCP vs UDP\n- **[16:07](#t=16:07)** Why would you want to run a proxy?\n- **[24:20](#t=24:20)** Applications to use\n- [Charles Web Debugging Proxy • HTTP Monitor / HTTP Proxy / HTTPS & SSL Proxy / Reverse Proxy](https://www.charlesproxy.com/)\n- [Proxyman · Native, Modern Web Debugging Proxy · Inspect network traffic from Mac, iOS, Android devices with ease](https://proxyman.io/)\n- [Intercept, debug & mock HTTP with HTTP Toolkit](https://httptoolkit.com/)\n- [mitmproxy - an interactive HTTPS proxy](https://mitmproxy.org/)\n- [Wireshark · Go Deep](https://www.wireshark.org/)\n- [Little Snitch](https://www.obdev.at/products/littlesnitch/index.html)\n- [Capturing Modes - Fiddler Everywhere](https://docs.telerik.com/fiddler-everywhere/capture-traffic/capturing-modes)\n- [Hacksore on Twitter](https://twitter.com/Hacksore/status/1661369171534393348)\n- [How I Hacked my Car :: Programming With Style](https://programmingwithstyle.com/posts/howihackedmycar/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '912b58b11069aff9c4fa56cf09e1e4d0bde59c0d9900e9105df00f8d1bc08065', 'hacking-the-tonal-proxying-intercepting-debugging-traffic', '/shows/668 - Hasty.md', '2023-10-16 20:08:29.602', '2023-10-27 15:58:21.943', 'HASTY'),
('syntax_podcast_show_00669', 669, 'The Svelte + SvelteKit Show', '2023-09-20 12:00:00.020', 'https://traffic.libsyn.com/syntax/Syntax_-_669.mp3', '\nIn this episode of Syntax, Wes reviews his experience building with Svelte and SvelteKit including templating, data fetching, actions, managing state, request handlers, and more.\n\n## Show Notes\n\n- **[00:10](#t=00:10)** Welcome\n- **[01:12](#t=01:12)** Syntax Brought to you by Sentry\n- **[02:11](#t=02:11)** What is Svelte vs SvelteKit\n- [From React To SvelteKit — Syntax Podcast 390](https://syntax.fm/show/390/from-react-to-sveltekit)\n- [Hasty Treat - Wes & Scott Look At Svelte 3 — Syntax Podcast 173](https://syntax.fm/show/173/hasty-treat-wes-and-scott-look-at-svelte-3)\n- [Svelte • Cybernetically enhanced web apps](https://svelte.dev/)\n- [SvelteKit • Web development, streamlined](https://kit.svelte.dev/)\n- **[05:59](#t=05:59)** Templating in Svelte\n- **[18:20](#t=18:20)** Data fetching in SvelteKit\n- **[25:23](#t=25:23)** Actions\n- **[28:58](#t=28:58)** State\n- **[32:41](#t=32:41)** Binding values\n- **[36:18](#t=36:18)** Hooks\n- **[37:25](#t=37:25)** Request handlers\n- [Special elements • Docs • Svelte](https://svelte.dev/docs/special-elements#svelte-window)\n- [website/src/actions/anchor.ts at v2 · syntaxfm/website](https://github.com/syntaxfm/website/blob/v2/src/actions/anchor.ts)\n- [website/src/actions/click_outside.ts at v2 · syntaxfm/website](https://github.com/syntaxfm/website/blob/v2/src/actions/click_outside.ts)\n- **[39:23](#t=39:23)** Svelte Actions\n- **[42:26](#t=42:26)** Popover API\n- **[45:33](#t=45:33)** Routing\n- **[47:22](#t=47:22)** Layouts\n- **[50:08](#t=50:08)** Styling\n- **[57:09](#t=57:09)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Aqara Smart Lock U100](https://www.amazon.com/dp/B0BZSD2L1W?linkCode=sl1&linkId=3c99452f2f410bd473c91749cfa27a6f&language=en_US)\n- Wes: [Headphones Replacement Ear Pads,Compatible for Bose Quietcomfort QC15 QC25 QC35 35 ii-(Black Floral)](https://www.amazon.ca/dp/B07QXKNDSW?crid=23KX82S9DQKYG&keywords=bose+wc35+ear+pads+flower&sprefix=bose+wc35+ear+pads+flower,aps,105&th=1&language=en_US&sr=8-18&linkCode=gs2&linkId=5d4c231bde102d4022499ff9ea813b91&tag=isi777-20)\n\n## Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '9b10e10a697ba06b6d7bd09833d763fc8db15e345faba87d1f96bfd60983fb32', 'the-svelte-sveltekit-show', '/shows/669 - Tasty.md', '2023-10-16 20:08:29.643', '2023-10-27 15:58:22.008', 'TASTY'),
('syntax_podcast_show_00670', 670, 'Anxiety and Uncertainty with Dr. Courtney Tolinski', '2023-09-22 12:00:00.565', 'https://traffic.libsyn.com/syntax/Syntax_-_670.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Dr. Courtney Tolinski about signs and symptoms of anxiety, what the long term effects are of anxiety, how to know if you need help, and what kinds of things you can do to deal with anxiety and uncertainty.\n\n## Show Notes\n\n- **[00:35](#t=00:35)** Welcome\n- **[01:11](#t=01:11)** Syntax Brought to you by Sentry\n- **[02:23](#t=02:23)** Introducing Dr. Courtney Tolinski\n- [Mental Health and Dev ft Dr. Courtney Tolinski - Depression, Anxiety, Imposter Syndrome, Focus, Motivation, Burnout — Syntax Podcast 236](https://syntax.fm/show/236/mental-health-and-dev-ft-dr-courtney-tolinski-depression-anxiety-imposter-syndrome-focus-motivation-burnout)\n- [Supper Club × Coding with ADHD with Dr. Courtney Tolinski — Syntax Podcast 532](https://syntax.fm/show/532/supper-club-coding-with-adhd-with-dr-courtney-tolinski)\n- **[04:13](#t=04:13)** What is anxiety?\n- **[06:44](#t=06:44)** Is there a difference between anxiety and just not wanting to do something?\n- **[08:58](#t=08:58)** What kinds of physical symptoms are there?\n- **[15:43](#t=15:43)** What are the longer term effects of anxiety?\n- **[17:34](#t=17:34)** How do you know if you need help with anxiety?\n- **[21:05](#t=21:05)** What can I do to solve my anxiety?\n- [Psychology Today Canada: Health, Help, Happiness + Find a Therapist](https://www.psychologytoday.com/ca)\n- [Obsidian - Sharpen your thinking](https://obsidian.md/)\n- [How We Feel](https://howwefeel.org/)\n- [Apple Reveals More iOS 17 Features Not Available Until Later This Year - MacRumors](https://www.macrumors.com/2023/09/13/ios-17-features-coming-later-this-year/)\n- [Meditation and Sleep Made Simple - Headspace](https://www.headspace.com/)\n- [Bearable Symptom Tracker, Mood Journal, & Health App](https://bearable.app/)\n- [BreathingApp — Personal breathing trainer for a better health](https://breathingapp.com/)\n- **[30:15](#t=30:15)** How can we recognize anxiety triggers?\n- **[33:26](#t=33:26)** What advice do you have for dealing with uncertainty?\n- **[37:54](#t=37:54)** How can I deal with keeping up with everything and feeling like I\'m falling behind?\n- **[43:02](#t=43:02)** Navigating big life decisions\n- **[51:39](#t=51:39)** Supper Club questions\n- [Being Well Podcast with Dr. Rick Hanson and Forrest Hanson](https://www.rickhanson.net/being-well-podcast/)\n- [Celebrity Book Club with Steven & Lily on Apple Podcasts](https://podcasts.apple.com/us/podcast/celebrity-book-club-with-steven-lily/id1547360770)\n- [Criminality](https://www.criminalityshow.com/)\n- **[58:01](#t=58:01)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Fullstar Compact Vegetable Chopper - Vegetable Cutter, Food Chopper, Veggie Chopper, Onion Chopper, Vegetable Chopper With Container, Vegetable Slicer, Vegetable Cutter, Mandoline Slicer (6 Inserts): Home & Kitchen](https://www.amazon.com/Fullstar-Mini-Vegetable-Chopper-Container/dp/B0BHSXFTGH?crid=8WWJNGJIIFI4&keywords=fullstar+vegetable+chopper&qid=1694728241&sprefix=fullstar+veg,aps,126&sr=8-6&th=1)\n\n## Shameless Plugs\n\n- [Learning Differently (@learning.differently) • Instagram photos and videos](https://www.instagram.com/learning.differently/)\n- [Zarlengo Foundation Learning Evaluation Center| Denver, Colorado](https://learningevaluationcenter.org/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8e2f9ead69b3a32cba9c9b634d5dc7cd61958b75020e1face252a8ba3e857a2d', 'anxiety-and-uncertainty-with-dr-courtney-tolinski', '/shows/670 - Supper Tolinski.md', '2023-10-16 20:08:29.684', '2023-10-27 15:58:22.077', 'SUPPER'),
('syntax_podcast_show_00671', 671, 'Tauri Vs Electron - Desktop Apps with Web Tech', '2023-09-25 12:00:00.113', 'https://traffic.libsyn.com/syntax/Syntax_-_671.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the building desktop apps using Electron vs Tauri.\n\n## Show Notes\n\n- **[00:26](#t=00:26)** Welcome\n- **[00:55](#t=00:55)** Syntax Brought to you by Sentry\n- **[01:15](#t=01:15)** Check my hair app\n- [Tauri Apps](https://tauri.app/)\n- [Electron](https://www.electronjs.org/)\n- [Hand Mirror on the Mac App Store](https://apps.apple.com/us/app/hand-mirror/id1502839586?mt=12)\n- [SoFriendly/2fhey](https://github.com/SoFriendly/2fhey)\n- **[04:19](#t=04:19)** What is Tauri?\n- **[08:23](#t=08:23)** The experience of writing apps in Electron vs Tauri\n- **[16:17](#t=16:17)** Electron Forge\n- **[20:02](#t=20:02)** Building the same app in Electron vs Tauri\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'a5ba35a7f65975bf41c942ecf6ff0042facad2f6fa63d979bf8ad5b78cb920c1', 'tauri-vs-electron-desktop-apps-with-web-tech', '/shows/671 - hasty.md', '2023-10-16 20:08:29.824', '2023-10-27 15:58:22.248', 'HASTY'),
('syntax_podcast_show_00672', 672, 'Reacting to State of CSS Survey', '2023-09-27 12:00:00.800', 'https://traffic.libsyn.com/syntax/Syntax_-_672.mp3', '\nIn this episode of Syntax, Wes and Scott go over some of the results the State of CSS survey for 2023, including drop-shadow, subgrid, logical properties, media range, and more!\n\n## Show Notes\n\n- **[00:25:21](#t=00:25)** Welcome\n- **[01:31:22](#t=01:31)** Soccer update\n- **[03:52:05](#t=03:52)** Syntax Brought to you by Sentry\n- **[04:03:18](#t=04:03)** StateOfCSS.com\n- [State of CSS 2023](https://2023.stateofcss.com/en-US)\n- **[04:21:11](#t=04:21)** Top 5 Most Used Features\n- **[09:13:09](#t=09:13)** Drop-shadow\n- **[13:00:11](#t=13:00)** Subgrid\n- **[18:31:21](#t=18:31)** Logical properties\n- **[20:11:20](#t=20:11)** Media range\n- **[20:52:11](#t=20:52)** Object view box\n- **[23:10:14](#t=23:10)** Anchor positioning\n- **[28:21:09](#t=28:21)** Intrinsic sizing keywords\n- **[29:32:00](#t=29:32)** View Transitions API\n- [Can I use... Support tables for HTML5, CSS3, etc](https://caniuse.com/)\n- [Astro](https://astro.build/)\n- [Supper Club × Astro 2.0 with Fred Schott — Syntax Podcast 580](https://syntax.fm/show/580/supper-club-astro-2-0-with-fred-schott)\n- **[31:43:18](#t=31:43)** Updates to colors in CSS\n- **[35:07:05](#t=35:07)** Accent color, current color\n- **[36:36:11](#t=36:36)** Scroll snap and overscroll behaviour\n- **[39:04:22](#t=39:04)** Touch action\n- **[40:16:01](#t=40:16)** Line clamp or variable font\n- [Variable Fonts](https://v-fonts.com/)\n- **[45:28:11](#t=45:28)** Accessibility features\n- **[48:33:12](#t=48:33)** :Has has jumped\n- **[49:32:11](#t=49:32)** @Property\n- **[53:52:13](#t=53:52)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Kodiak Cakes Strawberries & Cream Oatmeal Packets (Pack of 6)](https://www.amazon.com/dp/B08BR4QV8Z?th=1&linkCode=sl1&linkId=30dd8a123a0b101f6e0e4e2edcc170b4&language=en_US)\n- Wes: [Food Storage Containers, Baby Food Storage Containers with Lid, Baby Food and Toddler Snack Containers](<https://www.amazon.ca/s?k=BEABA+Clip+Containers,+Food+Storage+Containers,+Baby+Food+Storage+Containers+with+Lid,+Baby+Food+and+Toddler+Snack+Containers,+Baby+Essentials,+(Small)&linkCode=gs3&linkId=5c63a9bbd7c096ed4e1144ec769d870a&tag=isi777-20>)\n\n## Shameless Plugs\n\n- Scott: [Syntax Podcast (@syntaxfm) | TikTok](https://www.tiktok.com/@sntaxfm)\n- Wes: [Web Unleashed 2023 - FITC](https://fitc.ca/event/webu23/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '7e359fe1d7e48a9ca8934140ff0df6a4d2c06044af7e1e243f5c69de38a9b199', 'reacting-to-state-of-css-survey', '/shows/672 - tasty CSS.md', '2023-10-16 20:08:29.881', '2023-10-27 15:58:22.304', 'TASTY'),
('syntax_podcast_show_00673', 673, 'Getting Hired, Interviewing, and Why Recruiters Suck with Taylor Desseyn', '2023-09-29 12:00:00.937', 'https://traffic.libsyn.com/syntax/Syntax_-_673.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Taylor Desseyn about his work as a job recruiter, how hiring has changed over the last few years, what soft and tech skills developers need, what not to do when applying, and how AI is affecting the hiring process.\n\n## Show Notes\n\n- **[00:35](#t=00:35)** Welcome\n- **[01:10](#t=01:10)** Syntax Brought to you by Sentry\n- **[01:35](#t=01:35)** Who is Taylor Desseyn?\n- [taylor desseyn (/tdesseyn)](https://solo.to/tdesseyn)\n- [Taylor Desseyn on LinkedIn](https://www.linkedin.com/in/taylordesseyn/)\n- [World-class technical talent on tap | Gun.io](https://gun.io/)\n- [taylor desseyn (@tdesseyn) / X](https://twitter.com/tdesseyn)\n- [Taylor Desseyn](https://www.youtube.com/channel/UCNqJ-P5d9RUCUsQ-grhlUHw)\n- **[03:49](#t=03:49)** Why are recruiters just sending emails?\n- **[05:26](#t=05:26)** How much does a recruiter make?\n- **[06:44](#t=06:44)** How have things changed in the last couple of years?\n- **[09:22](#t=09:22)** How can developers stand out when applying?\n- **[13:52](#t=13:52)** What do developers do that cost them jobs?\n- **[28:46](#t=28:46)** What soft skills are employers looking for?\n- **[32:01](#t=32:01)** What tech skills are showing up in job postings?\n- **[34:57](#t=34:57)** Are resumes dead?\n- **[40:16](#t=40:16)** How does Gun.io vet people?\n- [World-class technical talent on tap | Gun.io](https://gun.io/)\n- **[43:15](#t=43:15)** How is AI changing hiring?\n- **[46:03](#t=46:03)** What\'s working on social media marketing in hiring?\n- **[48:33](#t=48:33)** Supper Club questions\n- **[53:39](#t=53:39)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Group Chat - Dee Murthy -](https://deemurthy.com/group-chat/)\n- [Watch Painkiller | Netflix Official Site](https://www.netflix.com/ca/title/81095069)\n\n## Shameless Plugs\n\n- [Guidance Counselor 2.0 | Podcast on Spotify](https://open.spotify.com/show/2UBzvscEgepXLUKvA5c24x?nd=1)\n- [The Unicorn Finders | Podcast on Spotify](https://open.spotify.com/show/5IF9OyWLb7FB78tWRYfuvE?nd=1)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'ab6f806ff3f5f2dbe0072809d62c869697063db5b52907b0db893f4c983f11fb', 'getting-hired-interviewing-and-why-recruiters-suck-with-taylor-desseyn', '/shows/673 - supper taylor.md', '2023-10-16 20:08:29.929', '2023-10-27 15:58:22.353', 'SUPPER'),
('syntax_podcast_show_00674', 674, 'A11y Treats - Heading Design', '2023-10-02 12:00:00.379', 'https://traffic.libsyn.com/syntax/Syntax_-_674.mp3', '\nIn this Hasty Treat, Scott and Wes talk about headings on your website, why you should care, how to structure your headings, and what tooling is there for testing your website?\n\n## Show Notes\n\n- **[00:26](#t=00:26)** Welcome\n- **[01:21](#t=01:21)** Syntax Brought to you by Sentry\n- **[01:41](#t=01:41)** Why do we care about Headings?\n- [How-to: Accessible heading structure - The A11Y Project](https://www.a11yproject.com/posts/how-to-accessible-heading-structure/)\n- **[03:12](#t=03:12)** Heading design provides an outline for your website\n- **[08:45](#t=08:45)** Using H1 classes?\n- **[10:28](#t=10:28)** Is the logo an H1?\n- **[13:03](#t=13:03)** Giving an ARIA level\n- **[17:14](#t=17:14)** Can headings be visually hidden?\n- **[21:00](#t=21:00)** Benefits of good heading design\n- **[22:27](#t=22:27)** Tooling\n- [Heading outlines - ADG](https://www.accessibility-developer-guide.com/examples/headings/)\n- [HTML Standard](https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements)\n- [Polypane, The browser for ambitious web developers](https://polypane.app/)\n- [HeadingsMap - Chrome Web Store](https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi)\n- [HeadingsMap – Get this Extension for 🦊 Firefox (en-US)](https://addons.mozilla.org/en-US/firefox/addon/headingsmap/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '8341de47c7802ef5740969b283072fded14444cb187e4ffb485828038acaf8d5', 'a11y-treats-heading-design', '/shows/674 - hasty.md', '2023-10-16 20:08:30.105', '2023-10-27 15:58:22.467', 'HASTY'),
('syntax_podcast_show_00675', 675, 'Potluck × Bun Thoughts × Guesting on Syntax × Why Rust?', '2023-10-04 12:00:00.295', 'https://traffic.libsyn.com/syntax/Syntax675ScottVersion_-_10323_12.46PM.mp3', '\nIn this episode of Syntax, Wes and Scott answer your questions about Bun, using custom auth headers, the difference between trpc, REST, or GraphQL, documenting your code, why learn Rust, and more!\n\n## Show Notes\n\n- **[00:08](#t=00:08)** Welcome\n- **[00:37](#t=00:37)** Scott\'s macOS bug\n- [Tauri Apps](https://tauri.app/)\n- **[01:26](#t=01:26)** Syntax Brought to you by Sentry\n- **[01:46](#t=01:46)** What are your thoughts on Bun?\n- [Bun — A fast all-in-one JavaScript runtime](https://bun.sh/)\n- [Zig Programming Language](https://ziglang.org/)\n- [Deno, The next-generation JavaScript runtime](https://deno.com/)\n- [Cloudflare Workers](https://developers.cloudflare.com/workers/)\n- [Netlify Connect](https://www.netlify.com/products/connect/)\n- [Storybook](https://storybook.js.org/)\n- [Histoire](https://histoire.dev/)\n- **[10:32](#t=10:32)** How can I add custom auth header for image requests done by the browser?\n- **[16:39](#t=16:39)** What are the differences between trpc, REST, and graphql?\n- **[23:55](#t=23:55)** What kind of teams would use trpc, REST, or graphql?\n- **[26:19](#t=26:19)** Are there any podcast guest opportunities on Syntax?\n- **[31:28](#t=31:28)** With no initial documentation, how do you suggest we document our intricate code, business logic, and integrations?\n- **[37:57](#t=37:57)** Rust didn\'t invent this, they\'re common paradigms in languages\n- **[40:12](#t=40:12)** Why Rust?\n- [Rust Programming Language](https://www.rust-lang.org/)\n- **[42:59](#t=42:59)** Is Scott still using his Tonal?\n- [Tonal](https://www.tonal.com/)\n- **[43:49](#t=43:49)** What did I do to make Fetch rebel against me?\n- [Proxyman](https://proxyman.io/)\n- **[49:47](#t=49:47)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Glow Up](https://www.netflix.com/ca/title/81075536)\n- Wes: [SendCutSend](https://sendcutsend.com/)\n\n## Shameless Plugs\n\n- Scott: [Syntax on TikTok](https://www.tiktok.com/@syntaxfm)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '39b0d693dbeeb2f8324571061a2f744dc59af2fbeb82eb7ad0af5f81659b5d33', 'potluck-bun-thoughts-guesting-on-syntax-why-rust', '/shows/675 - tasty.md', '2023-10-16 20:08:30.149', '2023-10-27 15:58:22.514', 'TASTY'),
('syntax_podcast_show_00676', 676, 'Google IDX - VS Code in the Browser with David East', '2023-10-06 12:00:00.289', 'https://traffic.libsyn.com/syntax/Syntax_-_676.mp3', '\nIn this episode of Syntax, Wes and Scott talk with David East about Google\'s new cloud based full-stack, multiplatform app development workflow, Project IDX.\n\n## Show Notes\n\n- **[00:22](#t=00:22)** Welcome\n- **[01:31](#t=01:31)** Browser in the car\n- **[02:16](#t=02:16)** Syntax Brought to you by Sentry\n- **[02:24](#t=02:24)** Who is David East?\n- [David East](https://www.linkedin.com/in/eastdavid/)\n- [David East](https://davidea.st/)\n- [David East (@\\_davideast) / X](https://twitter.com/_davideast?lang=en)\n- [Learn from David East\'s courses | Frontend Masters](https://frontendmasters.com/teachers/david-east/)\n- [Firebase | Google’s Mobile and Web App Development Platform](https://firebase.google.com/)\n- **[04:32](#t=04:32)** What is IDX?\n- [Project IDX](https://idx.dev/)\n- [Flutter - Build apps for any screen](https://flutter.dev/)\n- [Welcome to nix.dev — nix.dev documentation](https://nix.dev/)\n- **[13:15](#t=13:15)** What\'s the experience of IDX?\n- [Nx: Smart, Fast and Extensible Build System](https://nx.dev/)\n- **[16:42](#t=16:42)** IDX isn\'t just a toy - it\'s a dev machine\n- **[20:29](#t=20:29)** What\'s the offline mode like?\n- **[23:30](#t=23:30)** How are VS Code extensions handled?\n- **[27:03](#t=27:03)** Is multiplayer or project sharing on the road map?\n- **[28:45](#t=28:45)** How is latency taken care of?\n- **[31:43](#t=31:43)** This could be faster than local dev environment\n- **[36:18](#t=36:18)** Portability of your projects\n- **[42:25](#t=42:25)** What do you think about iPad coding?\n- **[44:28](#t=44:28)** Phone testing with IDX\n- [Firebase Test Lab](https://firebase.google.com/docs/test-lab)\n- **[46:59](#t=46:59)** How is AI being integrated?\n- **[50:23](#t=50:23)** Supper Club questions\n- [Introducing Operator | Fonts by Hoefler&Co.](https://www.typography.com/blog/introducing-operator)\n- [MD IO by Mass-Driver - Future Fonts](https://www.futurefonts.xyz/mass-driver/io)\n- **[55:25](#t=55:25)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\nCSS\n\n## Shameless Plugs\n\n- [The Bad At Css Podcast](https://nerdy.dev/introducing-the-bad-at-css-podcast)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'aca464c1c0720e9b1f1b60e917a9d088082a9e069434a5219573833554002db7', 'google-idx-vs-code-in-the-browser-with-david-east', '/shows/676 - supper idx.md', '2023-10-16 20:08:30.189', '2023-10-27 15:58:22.562', 'SUPPER'),
('syntax_podcast_show_00677', 677, 'Home Office Tips', '2023-10-09 12:00:00.558', 'https://traffic.libsyn.com/syntax/Syntax_-_677.mp3', '\nIn this Hasty Treat, Scott and Wes talk through tips for upping your home office vibe, including cable management, lighting, ergonomics, and even roller blade wheels.\n\n## Show Notes\n\n- **[00:18](#t=00:18)** Welcome\n- **[00:46](#t=00:46)** Syntax Brought to you by Sentry\n- **[01:13](#t=01:13)** Creating a great home office\n- [Scott’s New Office × The Levelup Lodge — Syntax Podcast 461](https://syntax.fm/show/461/scott-s-new-office-the-levelup-lodge)\n- [Wes’ New Soundproof Office — Syntax Podcast 516](https://syntax.fm/show/516/wes-new-soundproof-office)\n- **[03:22](#t=03:22)** Lighting\n- **[06:08](#t=06:08)** Clutter and cords\n- [Alex Tech 25ft - 1/2 inch Cord Protector Wire](https://www.amazon.com/gp/product/B07FXF12HC?th=1&linkCode=sl1&linkId=da2e085408f2747f2dbe50d6a896395e&language=en_US)\n- [D-Line CC-1 Light Duty Floor Cord Cover/Cable Protector](https://www.amazon.com/D-Line-CC-1-Protector-Protect-Prevent/dp/B0078NU4C6?crid=LMFO8SSGVXS1&keywords=cable+floor&qid=1695741312&sprefix=cable+floo,aps,118&sr=8-3&linkCode=sl1&linkId=1983d2f473f729984cbd6d96f6ee5845&language=en_US&th=1)\n- [Cable Clips](https://www.amazon.com/gp/product/B071FXZBMV?linkCode=sl1&linkId=2bf61b890313d85cc4a6575438fa7d70&language=en_US)\n- [WireRun Under Desk Cable Manager 14\"](https://www.amazon.com/gp/product/B07BB7N162?th=1&linkCode=sl1&linkId=6bade2a04792398ce711d2936d28a185&language=en_US)\n- **[10:33](#t=10:33)** Clean\n- **[13:42](#t=13:42)** Sound absorption\n- [Bose QuietComfort 35 II review](https://www.soundguys.com/bose-qc35-ii-review-14264/)\n- [Wyze Noise-Cancelling Headphones](https://www.wyze.com/products/wyze-headphones)\n- **[19:26](#t=19:26)** Ergonomics\n- [VIVO Single Monitor Height Adjustable Counterbalance Pneumatic Arm Desk Mount Stand](https://www.amazon.com/VIVO-Adjustable-Articulating-Counterbalance-STAND-V001O/dp/B01NH0HTM5?crid=2R12Y25XLIZ97&keywords=vivo+monitor+arm&qid=1695743662&sprefix=vivo+monitor+arm,aps,118&sr=8-5&linkCode=sl1&linkId=b4792743b241c149fbe862b0cd2069c0&language=en_US&th=1)\n- **[23:17](#t=23:17)** Roller blade wheels for your chair\n- [Office Owl Caster Wheels](https://www.amazon.ca/dp/B01KET1PUA?crid=346I5T7WPFB50&keywords=roller+blade+wheels+office+chairs&sprefix=roller+bl,aps,111&th=1&language=en_US&sr=8-5&linkCode=gs2&linkId=5eb71e0b6e169b358de273eb58cfed5f&tag=isi777-20)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'a7b2e07572ef1c04492db6b8a85d475c424d636f72b7a2120827d97394439878', 'home-office-tips', '/shows/677 - hasty office.md', '2023-10-20 14:29:56.104', '2023-10-27 15:58:22.703', 'HASTY'),
('syntax_podcast_show_00678', 678, 'The 2023 State of CSS Survey Part 2 × CSS Frameworks × Tooling × Browser Usage', '2023-10-11 12:00:00.291', 'https://traffic.libsyn.com/syntax/Syntax_-_678.mp3', '\nIn this episode of Syntax, it\'s part 2 of Wes and Scott\'s reactions to the 2023 State of CSS survey including CSS frameworks, tooling, browser usage, SVG and CSS, and the CSS Awards.\n\n## Show Notes\n\n- **[00:10](#t=00:10)** Welcome\n- [Reacting to State of CSS Survey — Syntax Podcast 672](https://syntax.fm/show/672/reacting-to-state-of-css-survey)\n- [State of CSS 2023](https://2023.stateofcss.com/en-US)\n- **[01:15](#t=01:15)** Syntax Brought to you by Sentry\n- **[01:29](#t=01:29)** CSS Frameworks\n- [Bootstrap · The most popular HTML, CSS, and JS library in the world.](https://getbootstrap.com/)\n- [Open Props: sub-atomic styles](https://open-props.style/)\n- [Lightning CSS](https://lightningcss.dev/)\n- **[10:57](#t=10:57)** How happy are you with CSS frameworks?\n- **[17:21](#t=17:21)** Other tools\n- [CSS Analytics - Project Wallace](https://www.projectwallace.com/)\n- **[19:34](#t=19:34)** Top utilities in use\n- **[24:48](#t=24:48)** Browser usage\n- **[29:01](#t=29:01)** CSS usage\n- **[33:25](#t=33:25)** Browser incompatibilities\n- **[36:42](#t=36:42)** SVG and CSS\n- **[44:28](#t=44:28)** Resources for learning CSS\n- [Kevin Powell | CSS Evangelist](https://www.kevinpowell.co/)\n- [Fireship - Learn to Code Faster](https://fireship.io/)\n- [LeveUp Tutorials](https://levelup.video)\n- **[46:55](#t=46:55)** Awards\n- [Panda CSS - Build modern websites using build time and type-safe CSS-in-JS](https://panda-css.com/)\n- **[50:48](#t=50:48)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [A Timeline of the 1970s Heavyweight Boxing Division (Boxing Documentary)](https://www.youtube.com/watch?v=10WIyMo6B94) / [Full Boxing Timelines](https://www.youtube.com/playlist?list=PL40wI-jI7SK7YD5ZLtulDl2HgY6Q5SQhQ)\n- Wes: [NEIKO 10181A Step Drill Bit Set](https://www.amazon.ca/dp/B07B4LCWC4?sbo=RZvfv//HxDF+O5021pAnSA&crid=33NN1VW7R08YX&keywords=step+drill+bits&sprefix=step+drill+bits,aps,110&language=en_US&th=1&sr=8-3&linkCode=gs2&linkId=37a38f2588f4e6ce7f01d30fd071f294&tag=isi777-20)\n\n## Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '698ca9026d210c7c3c5b01655511423cfe4857d9de08b6df316a8220c7c08272', 'the-2023-state-of-css-survey-part-2-css-frameworks-tooling-browser-usage', '/shows/678 - tasty.md', '2023-10-20 14:29:56.166', '2023-10-27 15:58:22.762', 'TASTY'),
('syntax_podcast_show_00679', 679, 'Creator of Swift, Tesla Autopilot & Tensorflow. New AI language Mojo with Chris Lattner', '2023-10-13 12:00:00.832', 'https://traffic.libsyn.com/syntax/Syntax_-_679.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Chris Lattner about Mojo, a new programming language for AI developers. Should developers learn Python? Where does Mojo run? What is Chris excited about in AI\'s future?\n\n## Show Notes\n\n- **[00:31](#t=00:31)** Welcome\n- **[01:05](#t=01:05)** Introducing Chris Lattner\n- [Chris Lattner\'s Homepage](https://www.nondot.org/sabre/)\n- [Chris Lattner on Wikipedia](https://en.wikipedia.org/wiki/Chris_Lattner)\n- [Chris Lattner on GitHub](https://github.com/lattner)\n- [Chris Lattner on Twitter](https://twitter.com/clattner_llvm?lang=en)\n- [Modular (@Modular_AI) / X](https://twitter.com/Modular_AI)\n- [Modular: AI development starts here](https://www.modular.com/)\n- [Swift.org - Welcome to Swift.org](https://www.swift.org/)\n- **[03:50](#t=03:50)** What\'s the history behind the hardware?\n- **[08:10](#t=08:10)** What\'s the difference between a compiled language vs an interpreted language?\n- **[12:13](#t=12:13)** Is Mojo a programming language?\n- [Mojo 🔥: Programming language for all of AI](https://www.modular.com/mojo)\n- **[15:12](#t=15:12)** Are Python libraries compatible with Mojo?\n- **[15:26](#t=15:26)** Why did you choose Python?\n- **[16:49](#t=16:49)** Why is AI so Python focused?\n- **[19:19](#t=19:19)** Should web developers learn Python?\n- **[21:40](#t=21:40)** Where does Mojo run?\n- **[25:05](#t=25:05)** How did you use the flame emoji for the Mojo file extension?\n- **[29:05](#t=29:05)** How does machine learning actually work?\n- **[37:36](#t=37:36)** Will Mojo be open source in some way?\n- **[39:16](#t=39:16)** How do you start developing a new programming language?\n- **[43:14](#t=43:14)** What is the future of developer jobs?\n- **[45:30](#t=45:30)** What are you excited about with AI in the future?\n- **[47:24](#t=47:24)** Supper Club questions\n- [Welcome to a World of OCaml](https://ocaml.org/)\n- **[52:59](#t=52:59)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Exercise\n\n## Shameless Plugs\n\n- [Mojo 🔥: Programming language for all of AI](https://www.modular.com/mojo)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '04be27954ac186fca3175b9814e2d3075420e399091b34c0e7d21b2612a84fcd', 'creator-of-swift-tesla-autopilot-and-tensorflow-new-ai-language-mojo-with-chris-lattner', '/shows/679 - supper Chris.md', '2023-10-20 14:29:56.205', '2023-10-27 15:58:22.822', 'SUPPER'),
('syntax_podcast_show_00680', 680, 'Getting jQuery’d × Honourable Deaths of libraries We Don’t Use Anymore', '2023-10-16 12:00:00.465', 'https://traffic.libsyn.com/syntax/Syntax_-_680.mp3', '\nIn this Hasty Treat, Scott and Wes talk about all the libraries we don\'t need to use anymore thanks to their features being built into the browsers now.\n\n## Show Notes\n\n- **[00:24](#t=00:24)** Welcome\n- **[01:55](#t=01:55)** Syntax Brought to you by Sentry\n- **[02:17](#t=02:17)** Why did people use jQuery?\n- [jQuery](https://jquery.com/)\n- [lukeed/polka: A micro web server so fast, it\'ll make you dance!](https://github.com/lukeed/polka)\n- **[05:12](#t=05:12)** Writing our own jQuery plugins\n- **[07:23](#t=07:23)** AJAX requests\n- [jQuery.ajax()](https://api.jquery.com/jquery.ajax/)\n- **[08:29](#t=08:29)** Express\n- [Migrating to Express 5](https://expressjs.com/en/guide/migrating-5.html)\n- **[14:58](#t=14:58)** Underscore.JS\n- [Underscore.js](https://underscorejs.org/)\n- **[19:27](#t=19:27)** Require.js\n- [RequireJS](https://requirejs.org/)\n- **[21:06](#t=21:06)** LeftPad\n- [Coder unpublished 17 lines of JavaScript and “broke the Internet” | Ars Technica](https://arstechnica.com/information-technology/2016/03/rage-quit-coder-unpublished-17-lines-of-javascript-and-broke-the-internet/)\n- **[23:13](#t=23:13)** Grid systems\n- [960 Grid System](https://960.gs/)\n- [Susy | OddBird](https://www.oddbird.net/susy/)\n- **[26:24](#t=26:24)** Sass, Less, etc.\n- [Can Vanilla CSS Replace Sass Yet? — Syntax Podcast 603](https://syntax.fm/show/603/can-vanilla-css-replace-sass-yet)\n- **[26:58](#t=26:58)** Sockets.io\n- [Socket.IO](https://socket.io/)\n- **[29:50](#t=29:50)** What else is going to get jQuery\'d?\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'de08e12534f4d86c2906d13dd5c1eaee5c0c31222fc4fb6005e2a5549727dcaf', 'getting-jquery-d-honourable-deaths-of-libraries-we-don-t-use-anymore', '/shows/680 - hasty jquery.md', '2023-10-20 14:29:56.243', '2023-10-27 15:58:22.958', 'HASTY'),
('syntax_podcast_show_00681', 681, 'What\'s New in AI for Web Developers', '2023-10-18 12:00:00.351', 'https://traffic.libsyn.com/syntax/Syntax_-_681.mp3', '\nIn this episode of Syntax, Wes and Scott talk through recent developments in AI and how they might be useful for developers, whether AI is still worthy of the hype, and whether developer jobs are at risk from AI.\n\n## Show Notes\n\n- **[00:10](#t=00:10)** Welcome\n- **[03:10](#t=03:10)** Syntax Brought to you by Sentry\n- **[03:49](#t=03:49)** v0.dev\n- [v0 by Vercel](https://v0.dev/)\n- **[09:28](#t=09:28)** Anthropic and Claude\n- [Claude](https://claude.ai/)\n- [Syntax Listener Survey](https://wcqk05xik6u.typeform.com/to/gN54Y7kd)\n- **[18:02](#t=18:02)** Facebook\'s Meta AI\n- [AI at Meta](https://ai.meta.com/)\n- **[18:48](#t=18:48)** Cloudflare AI\n- [Large language model (LLM)](https://developers.cloudflare.com/workers-ai/models/llm/)\n- [Speech to text](https://developers.cloudflare.com/workers-ai/models/speech-to-text/)\n- [Translation](https://developers.cloudflare.com/workers-ai/models/translation/)\n- [Sentiment Analysis](https://developers.cloudflare.com/workers-ai/models/sentiment-analysis/)\n- [Image classification](https://developers.cloudflare.com/workers-ai/models/image-classification/)\n- [Embedding](https://developers.cloudflare.com/workers-ai/models/embedding/)\n- **[27:24](#t=27:24)** AI Hardware announced\n- [Rewind](https://www.rewind.ai/)\n- **[29:39](#t=29:39)** Cloudflare Hugging face\n- [Hugging Face – The AI community building the future.](https://huggingface.co/)\n- [StarCoder: A State-of-the-Art LLM for Code](https://huggingface.co/blog/starcoder)\n- [Vectorize: a vector database for shipping AI-powered applications](https://blog.cloudflare.com/vectorize-vector-database-open-beta/)\n- **[36:28](#t=36:28)** OpenAI Function calling\n- [Function calling and other API updates](https://openai.com/blog/function-calling-and-other-api-updates)\n- **[38:55](#t=38:55)** GPT-4V\n- [GPT-4V(ision) system card](https://openai.com/research/gpt-4v-system-card)\n- **[42:36](#t=42:36)** GitHub CoPilot\n- **[44:03](#t=44:03)** Are we still on the AI hype train?\n- **[48:27](#t=48:27)** Are our jobs at risk as developers?\n- **[52:24](#t=52:24)** Spotify DJ AI\n- [Spotify Debuts a New AI DJ](https://newsroom.spotify.com/2023-02-22/spotify-debuts-a-new-ai-dj-right-in-your-pocket/)\n- **[53:29](#t=53:29)** ChatGPT plugins\n- [ChatGPT plugins](https://openai.com/blog/chatgpt-plugins)\n- **[55:19](#t=55:19)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Coding App for Kids | codeSpark Academy](https://codespark.com/)\n- Wes: [Peter Santenello](https://www.youtube.com/channel/UC3Vuq4Q1bKFtAiKYlwRv3oA), [Roblox](https://www.roblox.com/)\n\n## Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '27bbe9d7595742e94378adaa8f290b142b4102586f2ec63ee9b459f26082cc42', 'what-s-new-in-ai-for-web-developers', '/shows/681 - AI.md', '2023-10-20 14:29:56.280', '2023-10-27 15:58:23.012', 'TASTY'),
('syntax_podcast_show_00682', 682, 'Design Systems with Brad Frost', '2023-10-20 12:00:00.320', 'https://traffic.libsyn.com/syntax/Syntax_-_682.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Brad Frost about how to implement design systems in small and large scale projects, best practices around naming things, keeping everything in sync across different codebases, and how design systems help projects.\n\n## Show Notes\n\n- **[00:32](#t=00:32)** Welcome\n- **[01:02](#t=01:02)** Syntax Brought to you by Sentry\n- **[01:34](#t=01:34)** Introducing Brad Frost\n- [Brad Frost.com](https://bradfrost.com/)\n- [Atomic Design by Brad Frost](https://atomicdesign.bradfrost.com/)\n- [Brad (@brad_frost) on Twitter](https://twitter.com/brad_frost)\n- [Brad on LinkedIn](https://www.linkedin.com/in/bradfrost/)\n- [Brad on Mastodon](https://mastodon.social/@brad_frost)\n- [Brad on YouTube](https://www.youtube.com/@brad_frost)\n- [Brad on GitHub](https://github.com/bradfrost)\n- [Brad Frost on CodePen](https://codepen.io/bradfrost/)\n- [Big Medium | Design for What\'s Next](https://bigmedium.com/)\n- **[06:43](#t=06:43)** What is a design system?\n- **[12:12](#t=12:12)** How do you keep design and code in sync?\n- [Material Design](https://m3.material.io/)\n- [Shopify Polaris](https://polaris.shopify.com/)\n- [Carbon Design System](https://carbondesignsystem.com/)\n- [The Design System Ecosystem | Brad Frost](https://bradfrost.com/blog/post/the-design-system-ecosystem/)\n- **[16:13](#t=16:13)** How do you use Shopify, WordPress, React, etc. through a design system?\n- **[19:41](#t=19:41)** How is CSS handled?\n- **[25:40](#t=25:40)** What\'s the benefit of going all in on web components?\n- **[29:13](#t=29:13)** Do small startups need to worry about design systems?\n- **[33:03](#t=33:03)** How do design tokens work?\n- **[38:17](#t=38:17)** How do you deal with pushback on design systems?\n- **[41:46](#t=41:46)** How do you go outside the guidelines?\n- **[45:24](#t=45:24)** What system do you use for naming things?\n- **[49:34](#t=49:34)** How do you best document your language choices?\n- **[51:09](#t=51:09)** Supper Club questions\n- [Thinking in Systems: International Bestseller: Donella H. Meadows, Diana Wright: 9781603580557: Amazon.com: Books](https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557)\n- [Miriam Eric Suzanne](https://www.miriamsuzanne.com/)\n- [Zeldman on Web and Interaction Design - Famous for stating the obvious.](https://www.zeldman.com/)\n- **[57:54](#t=57:54)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- [Rubblebucket](https://en.wikipedia.org/wiki/Rubblebucket)\n\n## Shameless Plugs\n\n- [Frostapalooza! | Brad Frost](https://bradfrost.com/blog/post/frostapalooza/)\n- [FROSTAPALOOZA - A Concert Party Happening On August 17th 2024](https://40.bradfrost.com/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', 'e4aefde20096b354224d03150e07b20bf4b4e94de165ee1ef06f1dbc3b08d13c', 'design-systems-with-brad-frost', '/shows/682 - supper Brad.md', '2023-10-20 14:29:56.315', '2023-10-27 15:58:23.079', 'SUPPER'),
('syntax_podcast_show_00683', 683, 'Spooky Coding Horror Stories 2023 - Part 1', '2023-10-23 12:00:00.366', 'https://traffic.libsyn.com/syntax/Syntax_-_683_v2.mp3', '\nIn this Hasty Treat, Scott and Wes relate some spooky listener submitted coding horrors including updates for a large furniture retailer, pull request oversights, disallowing everything in a robots.txt, massive email fail, and more.\n\n## Show Notes\n\n- **[00:21](#t=00:21)** Welcome\n- **[01:22](#t=01:22)** Whetting your whistle\n- **[01:52](#t=01:52)** Syntax Brought to you by Sentry\n- **[02:13](#t=02:13)** Site updates for one of the largest furniture retailers in my country\n- **[04:18](#t=04:18)** The Embarrassing Test Page Incident\n- **[05:54](#t=05:54)** The Pull Request Oversight\n- **[08:02](#t=08:02)** Making changes to a JSON file\n- **[13:11](#t=13:11)** Deploying a \"disallow everything\" robots.txt\n- **[14:45](#t=14:45)** GDPR Deletion\n- **[16:11](#t=16:11)** Dropping the backing disk for the production postgres\n- **[17:05](#t=17:05)** Accidentally pushing staging code as an update\n- **[18:34](#t=18:34)** Email fail\n- **[19:25](#t=19:25)** Hot mobile app prayers\n- **[22:28](#t=22:28)** Bogus ACH info\n- **[23:51](#t=23:51)** Wiring money error\n- **[26:44](#t=26:44)** Payment gateway test not production\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '5d28ad2b19f761e6bffdd20341d420bb4b47bd37af24b626795ede03dc63b1bd', 'spooky-coding-horror-stories-2023-part-1', '/shows/683 - hasty.md', '2023-10-20 14:29:56.355', '2023-10-27 15:58:23.256', 'HASTY'),
('syntax_podcast_show_00684', 684, 'Spooky Coding Horror Stories 2023 - Part 2', '2023-10-25 12:00:00.009', 'https://traffic.libsyn.com/syntax/Syntax_-_684.mp3', '\nIn this episode of Syntax, Wes and Scott relate even more spooky listener submitted coding horrors including crypto copy paste, Big Brother bug, losing $50,000, 2,000 SMS, a $20,000 hour, and more.\n\n## Show Notes\n\n- **[00:09](#t=00:09)** Velcome to Synax\n- **[01:09](#t=01:09)** Syntax Brought to you by Sentry\n- **[01:36](#t=01:36)** Stories are anonymous!\n- **[01:57](#t=01:57)** Crypto copy + paste\n- **[03:48](#t=03:48)** Big Brother Bug\n- **[07:00](#t=07:00)** One of 6 laptops that can fix npm\n- **[07:57](#t=07:57)** Auto-submitting payments\n- **[09:42](#t=09:42)** 40,000 orders shipped and refunded\n- **[11:16](#t=11:16)** Dropping the analytics database\n- **[11:40](#t=11:40)** dev was actually production\n- **[12:40](#t=12:40)** Updating the DNS\n- **[13:40](#t=13:40)** Losing ~$50,000\n- **[15:30](#t=15:30)** Clearing 80 million records\n- **[16:21](#t=16:21)** Web chat DDoS\n- **[18:00](#t=18:00)** URL Shortener #$@%#\n- [Ontario\'s rejected licence plates for 2022 | CP24.com](https://www.cp24.com/news/these-are-ontario-s-rejected-licence-plates-from-2022-1.6217558)\n- [Boonta Vista: A \"political\" podcast for \"smart\" people](https://www.boontavista.com/)\n- **[21:12](#t=21:12)** Sending an email to 20,000 users\n- **[21:42](#t=21:42)** Moving code to GitHub\n- **[23:32](#t=23:32)** \"Lorem sale\"\n- **[26:08](#t=26:08)** 2,000 SMS messages\n- **[27:00](#t=27:00)** International shipment of kiosks\n- **[28:19](#t=28:19)** Crashing production\n- [Slow DB Queries | Sentry Documentation](https://docs.sentry.io/product/issues/issue-details/performance-issues/slow-db-queries/)\n- **[31:01](#t=31:01)** Hitting customers credit card limit\n- **[32:01](#t=32:01)** Infinite redirect loop\n- **[32:53](#t=32:53)** My first commit\n- **[33:23](#t=33:23)** Augmented reality game prize mistakes\n- **[35:15](#t=35:15)** A $20,000 hour\n- **[35:57](#t=35:57)** Site went down for 3 days\n- **[37:42](#t=37:42)** Accidentally truncated the prod database\n- **[38:48](#t=38:48)** Off by one error\n- **[40:05](#t=40:05)** Exposing database credentials\n- **[42:08](#t=42:08)** Delete a temp directory on prod\n- **[44:51](#t=44:51)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Race to the Summit](https://www.netflix.com/browse/genre/34399?jbv=81517219)\n- Wes: [100LBS Strong Magnetic Hooks](https://www.amazon.ca/dp/B0CDH1BGS1?crid=PCR6UZRJ5ZTG&keywords=100lb+magnet&sprefix=100lb+magnet,aps,107&th=1&language=en_US&sr=8-5&linkCode=gs2&linkId=49131cd489767398fb3486d6edbe91fd&tag=isi777-20)\n\n## Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '4d4b8648558487ae67b586ecc3b83c1929a36aabed38052898293d1b73f4d980', 'spooky-coding-horror-stories-2023-part-2', '/shows/684 - tasty scary.md', '2023-10-20 14:29:56.404', '2023-10-27 15:58:23.314', 'TASTY'),
('syntax_podcast_show_00685', 685, 'Jason Lengstorf on Live Streaming, Creating Content, and Building a Studio Space', '2023-10-27 12:00:00.510', 'https://traffic.libsyn.com/syntax/Syntax_-_685.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Jason Lengstorf about his journey in video creation, live streaming, and tech education. What\'s up with Jason\'s new studio? How does he prep for a live stream? \n\n### Show Notes\n\n* **[00:32](#t=00:32)** Welcome\n* **[02:21](#t=02:21)** Syntax Brought to you by Sentry\n* **[02:39](#t=02:39)** Who is Jason Lengstorf?\n* **[05:43](#t=05:43)** Why did you decide to go full time on Learn with Jason?\n* **[10:04](#t=10:04)** Jason\'s new YouTube series idea\n* **[13:36](#t=13:36)** Jason gets a special delivery\n* **[14:30](#t=14:30)** What\'s in Jason\'s new studio?\n* **[20:14](#t=20:14)** What\'s the ideal medium for content in 2023?\n* **[24:28](#t=24:28)** Treat decisions as forever, for now.\n* **[26:01](#t=26:01)** Is live streaming as difficult to get into as it seems?\n* **[29:21](#t=29:21)** How do you prepare for a live stream?\n* **[32:58](#t=32:58)** How do you decide what to create?\n* **[38:23](#t=38:23)** How do you feel about React?\n* **[40:21](#t=40:21)** What are your thoughts on AI?\n* **[49:08](#t=49:08)** Supper Club questions\n* **[56:25](#t=56:25)** Sick Picks\n\n- [Sarah Drasner\'s Site](https://sarah.dev/)\n- [Animation With Svelte (with Scott Tolinski) — Learn With Jason](https://www.youtube.com/watch?v=vxCWZlVLEcY)\n- [Gatsby](https://www.gatsbyjs.com/)\n- [Netlify](https://www.netlify.com/)\n- [Jessica Kobeissi](https://www.youtube.com/jessicakobeissi)\n- [ANDREW HUANG](https://www.youtube.com/channel/UCdcemy56JtVTrsFIOoqvV8g)\n- [Theo Browne](https://t3.gg/)\n- [Cassidy Williams](https://cassidoo.co/)\n- [Bytes - The Best JavaScript Newsletter](https://bytes.dev/)\n- [ZSA Moonlander:](https://www.zsa.io/moonlander/)\n- [ErgoDox EZ](https://ergodox-ez.com/)\n- [Operator Fonts](https://www.typography.com/fonts/operator/overview/)\n- [Night Owl](https://marketplace.visualstudio.com/items?itemName=sdras.night-owl)\n- [SyntaxFM by SyntaxFM](https://vscodethemes.com/e/syntaxfm.syntaxfm/syntax-fm)\n- [MD IO](https://mass-driver.com/typefaces/md-io)\n- [ILME-FX3 | Interchangeable-lens Cameras](https://www.sony.ca/en/interchangeable-lens-cameras/products/ilme-fx3)\n- [FE 24-70 mm F2.8 GM](https://www.sony.ca/en/electronics/camera-lenses/sel2470gm)\n\n\n### Sick Picks\n\n- [Synergy - Share one mouse & keyboard across computers](https://symless.com/synergy)\n\n### Shameless Plugs\n\n[LearnWithJason.dev: Learn. Build. Grow. Together.](https://www.learnwithjason.dev/)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '082d309c9c79f5fa220605d0d58f55d5584bc222987de0389b630d4feefb9ea5', 'jason-lengstorf-on-live-streaming-creating-content-and-building-a-studio-space', '/shows/685 - supper Jason.md', '2023-10-27 15:58:23.386', '2023-10-27 15:58:23.386', 'SUPPER'),
('syntax_podcast_show_00686', 686, 'We Need Your Help With The Secret Sauce', '2023-10-30 12:00:00.061', 'https://traffic.libsyn.com/syntax/Syntax_-_686.mp3', '\nIn this Hasty Treat, Scott and Wes talk about the secret sauce that\'s going into the creation of the new Syntax.fm website including the styling, search, tooling, database, hosting, and more.\n\n## Show Notes\n\n- **[00:21:15](#t=00:21:15)** Welcome\n- **[01:10:11](#t=01:10:11)** Where did the name \"Secret Sauce\" come from?\n- **[03:16:00](#t=03:16:00)** Syntax Brought to you by Sentry\n- **[04:32:11](#t=04:32:11)** What Syntax.fm is built in?\n- [SvelteKit • Web development, streamlined](https://kit.svelte.dev/)\n- [muxinc/media-chrome](https://github.com/muxinc/media-chrome)\n- [Media Chrome Docs](https://www.media-chrome.org/)\n- **[07:24:01](#t=07:24:01)** How we\'re doing search\n- [flexsearch - npm](https://www.npmjs.com/package/flexsearch)\n- **[12:22:20](#t=12:22:20)** Styling\n- [Prettier · Opinionated Code Formatter](https://prettier.io/)\n- [PostCSS - a tool for transforming CSS with JavaScript](https://postcss.org/)\n- **[16:00:05](#t=16:00:05)** Tooling\n- [Fast, disk space efficient package manager | pnpm](https://pnpm.io/)\n- **[18:55:11](#t=18:55:11)** Database\n- [Prisma | Next-generation ORM for Node.js & TypeScript](https://www.prisma.io/)\n- **[21:11:11](#t=21:11:11)** Services\n- [Deepgram](https://deepgram.com/)\n- [OpenAI](https://openai.com/)\n- [Anthropic \\ Introducing Claude](https://www.anthropic.com/index/introducing-claude)\n- **[24:34:11](#t=24:34:11)** Hosting\n- [Vercel: Develop. Preview. Ship. For the best frontend teams](https://vercel.com/)\n- [PlanetScale: The world’s most advanced database platform — PlanetScale](https://planetscale.com/)\n- [Cloudflare - The Web Performance & Security Company | Cloudflare](https://www.cloudflare.com/)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '3d2ff37d053deee448d845570ec5d68d7c05027d9d1a186805f1c6dfed448d87', 'we-need-your-help-with-the-secret-sauce', '/shows/686 - hasty secret.md', '2023-10-20 14:29:56.446', '2023-10-27 15:58:23.538', 'HASTY'),
('syntax_podcast_show_00687', 687, 'Hosting NextJS × Spicy Sidedishes × Modern Forms × Abandoning TypeScript', '2023-11-01 12:00:00.120', 'https://traffic.libsyn.com/syntax/Syntax_-_687.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions about hosting NextJS, spicy sidedishes, putting forms in modern websites, why is everyone abandoning TypeScript, CSS Survey follow up, do devs need to be into CSS, and more!\n\n## Show Notes\n\n- **[00:10](#t=00:10)** How to submit a question to Syntax\n- [Syntax Potluck Listener Questions](https://docs.google.com/forms/d/e/1FAIpQLSfQlAo1wXHiJMySdU-h8QMtfoz92aMS9eycEHXB6eRCLh8KHA/viewform?pli=1)\n- **[00:45](#t=00:45)** Syntax meet up in Toronto\n- **[02:11](#t=02:11)** Syntax Brought to you by Sentry\n- **[02:36](#t=02:36)** Vendor lock in with NextJS?\n- [Next.js by Vercel](https://nextjs.org/)\n- [Vercel](https://vercel.com/)\n- [SST](https://sst.dev/)\n- [Supper Club × Next.js on AWS + Serverless with Dax Raad — Syntax Podcast 589](https://syntax.fm/show/589/supper-club-next-js-on-aws-serverless-with-dax-raad)\n- [Cloudflare Pages](https://pages.cloudflare.com/)\n- [Netlify](https://www.netlify.com/)\n- [Open source Next.js serverless adapter](https://github.com/sst/open-next)\n- **[09:48](#t=09:48)** 🌶️ Spicy Sidedish: Stop calling Firefox the new IE\n- [Jen Simmons](https://jensimmons.com/)\n- **[16:40](#t=16:40)** Can you compare Database as a service and provide your recommendation and suggestions?\n- [“Serverless” Databases — Syntax Podcast 551](https://syntax.fm/show/551/serverless-databases)\n- [PlanetScale](https://planetscale.com/)\n- [Firebase](https://firebase.google.com/)\n- **[20:00](#t=20:00)** How do I do native forms outside of CMS like WordPress?\n- [Builder.io](https://www.builder.io/)\n- **[28:01](#t=28:01)** Why have Svelte and Turbo abandoned Typescript?\n- **[32:17](#t=32:17)** Why are companies hesitant to migrate to Next?\n- **[33:36](#t=33:36)** Is React Native dead?\n- **[38:33](#t=38:33)** Do I use the keyword \"new\" when throwing an Error or not?\n- **[41:59](#t=41:59)** `touch-action` use case\n- [Announcing Quina](https://joshcollinsworth.com/blog/announcing-quina-my-first-app)\n- [Quina - Menu](https://quina.app/)\n- [Announcing Hondo](https://joshcollinsworth.com/blog/announcing-hondo)\n- [Hondo - a word game in 100 words or less](https://www.playhondo.com/)\n- **[42:57](#t=42:57)** Subgrid and the :has selector usage\n- **[46:02](#t=46:02)** Is it okay to be a front end developer and not be as interested in CSS?\n- [Tool Academy (American TV series)](<https://en.wikipedia.org/wiki/Tool_Academy_(American_TV_series)>)\n- **[51:12](#t=51:12)** Could you explain what are workers, processes, jobs, tasks, and deamons?\n- **[56:29](#t=56:29)** SIIIIICK ××× PIIIICKS ×××\n\n## ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Infamous International: The Pink Panthers Story](https://wondery.com/shows/infamous-international-the-pink-panthers-story/#:~:text=The%20Pink%20Panthers%20are%20the,but%20net%20millions.)\n- Wes: [PowerBlock Adjustable Dumbbells For Home Gym & Commercial Use](https://powerblock.com/)\n- [Syntax episode 3](https://beta.syntax.fm/shows/3/css-preprocessors-and-structuring-css)\n\n## Shameless Plugs\n\n- Scott: [Syntax on TikTok](https://www.tiktok.com/@syntaxfm)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n## Tweet us your tasty treats\n\n- [Scott\'s Instagram](https://www.instagram.com/stolinski/)\n- [LevelUpTutorials Instagram](https://www.instagram.com/LevelUpTutorials/)\n- [Wes\' Instagram](https://www.instagram.com/wesbos/)\n- [Wes\' Twitter](https://twitter.com/wesbos)\n- [Wes\' Facebook](https://www.facebook.com/wesbos.developer)\n- [Scott\'s Twitter](https://twitter.com/stolinski)\n- Make sure to include [@SyntaxFM](https://twitter.com/SyntaxFM) in your tweets\n- [Wes Bos on Bluesky](https://bsky.app/profile/wesbos.com)\n- [Scott on Bluesky](https://bsky.app/profile/tolin.ski)\n- [Syntax on Bluesky](https://bsky.app/profile/syntax.fm)\n', '5cde22325c3a7431d8386462a518220b9c69bd507d8b1dbc3f7b47b9295ee943', 'hosting-nextjs-spicy-sidedishes-modern-forms-abandoning-typescript', '/shows/687 - tasty.md', '2023-10-20 14:29:56.492', '2023-10-27 15:58:23.583', 'TASTY'),
('syntax_podcast_show_00688', 688, 'Ex-npm Employee Making a New Package Manager?! Vlt with Darcy Clarke', '2023-11-03 12:00:00.605', 'https://traffic.libsyn.com/syntax/Syntax_-_688.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Darcy Clarke about his career path in tech, working with Wes back in the day, why he decided to build vlt volt, and the biggest sick pick list yet!\n\n### Show Notes\n\n- **[00:32](#t=00:32)** Welcome\n- **[01:38](#t=01:38)** Building a tweet wall back in the day\n- **[08:54](#t=08:54)** How did you land at npm?\n- [npm](https://www.npmjs.com/)\n- **[19:40](#t=19:40)** Why do we need another package manager and registry?\n- **[22:11](#t=22:11)** What is vlt volt?\n- [vlt: a new home for open source](https://www.vlt.sh/)\n- [vlt /vōlt/ (@vltpkg) / X](https://twitter.com/vltpkg)\n- [Shipping ESM with Mark Erikson](https://syntax.fm/show/661/supper-club-shipping-esm-with-mark-erikson)\n- [Bun](https://bun.sh/)\n- [Yarn](https://yarnpkg.com/)\n- [Nx](https://nx.dev/)\n- **[27:18](#t=27:18)** Do you see a future where we don\'t pre-compile before shipping?\n- **[29:32](#t=29:32)** Why would pnpm be faster than npm?\n- **[31:14](#t=31:14)** What are the problems with symlinking?\n- **[33:08](#t=33:08)** What\'s happening with Yarn?\n- [Verdaccio](https://verdaccio.org/)\n- [Cloudsmith](https://cloudsmith.com/)\n- [jfrong](https://jfrog.com/)\n- [Sonatype](https://www.sonatype.com/products/sonatype-nexus-repository)\n- [socket.dev](https://socket.dev/)\n- [Snyk.io](https://snyk.io/)\n- [Dependency Confusion](https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610)\n- **[37:42](#t=37:42)** What do you think about config files?\n- [antfu Config of File Nesting for VS Code](https://github.com/antfu/vscode-file-nesting-config)\n- [The massive bug at the heart of the npm ecosystem](https://blog.vlt.sh/blog/the-massive-hole-in-the-npm-ecosystem)\n- [WebTorrent](https://webtorrent.io/)\n- **[41:02](#t=41:02)** VS Code tip - file nesting patterns\n- **[41:59](#t=41:59)** How does on-prem registry work?\n- **[47:29](#t=47:29)** Where does Socket.dev and Snyk security fit?\n- **[52:46](#t=52:46)** Sick Picks\n- **[04:41](#t=04:41)** How did you get vlt.sh?\n- **[05:30](#t=05:30)** How did you get @Darcy?\n\n### Sick Picks\n\n- [Flat Coat Goldendoodle](https://doodledoods.com/flat-coat-goldendoodle-unfurnished/)\n- [Scientific American](https://www.scientificamerican.com/)\n- [Nespresso](https://www.nespresso.com/us/en/)\n- [BlackBerry (2023) - IMDb](https://www.imdb.com/title/tt21867434/)\n- [BlackBerry (2023) Letterboxd](https://letterboxd.com/film/blackberry-2023/)\n- [Matthias Wandel](https://www.youtube.com/@Matthiaswandel/search?query=movie)\n- [Blink-182 Official Site](https://www.blink182.com/)\n- [Moneen](https://en.wikipedia.org/wiki/Moneen)\n- [Bring Me The Horizon](https://www.bmthofficial.com/)\n\n### Shameless Plugs\n\n- [vlt: a new home for open source](https://www.vlt.sh/)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', 'b01ec758c5348d730275cf86c818e1313ae6ac7a97a8e24e0a012e3129515cb2', 'ex-npm-employee-making-a-new-package-manager-vlt-with-darcy-clarke', '/shows/688 - supper Darcy.md', '2023-11-03 13:46:53.903', '2023-11-03 13:46:53.903', 'SUPPER'),
('syntax_podcast_show_00689', 689, 'You Should Be Using JavaScript Maps & Sets', '2023-11-06 12:00:00.311', 'https://traffic.libsyn.com/syntax/Syntax_-_689.mp3', '\nIn this episode of Syntax, Wes and Scott talk about why you should be using JavaScript maps sets, whether you can access them directly, what makes them great, and what weak versions of both are.\n\n### Show Notes\n\n* **[00:26](#t=00:26)** Welcome\n* **[01:34](#t=01:34)** Syntax Brought to you by Sentry\n* **[01:54](#t=01:54)** What makes Maps a spicy buffalo object?\n* **[07:46](#t=07:46)** API of Map\n* **[08:51](#t=08:51)** Looping over items in a Map\n* **[09:27](#t=09:27)** Can you change the size of a map after it\'s been created?\n* **[10:07](#t=10:07)** Can you access properties directly?\n* **[12:13](#t=12:13)** Where have we used a map as a cache?\n* **[13:32](#t=13:32)** What makes a set an array honey garlic array?\n* **[17:28](#t=17:28)** When should you be using sets instead of an array?\n* [Proposed Highlight API is built on Sets](https://developer.mozilla.org/en-US/docs/Web/API/Highlight)\n* **[21:47](#t=21:47)** Can you spread sets like an array?\n* **[22:40](#t=22:40)** Weak versions of map and set\n* [WeakMap and Garbage collection](https://github.com/wesbos/es6-articles/blob/master/66%20-%20WeakMap%20and%20Garbage%20Collection.md)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', 'd3eecc5defd6f7e3c9949d2fefcb3889fedacb2339f63c4cf935b91454ec0027', 'you-should-be-using-javascript-maps-and-sets', '/shows/689 - hasty.md', '2023-11-03 13:46:54.037', '2023-11-03 13:46:54.037', 'HASTY'),
('syntax_podcast_show_00690', 690, 'How To Dark Mode and Beyond', '2023-11-08 13:00:00.939', 'https://traffic.libsyn.com/syntax/Syntax_-_690_v2.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the process they are using for extending the Syntax website with themes, including a dark mode and secret custom themes. They also talk about issues encountered with theming and CSS, including flashes of un-themed content.\n\n### Show Notes\n\n- **[00:00](#t=00:00)** Syntax + Sentry Announcement!\n- **[01:35](#t=01:35)** Welcome\n- **[02:23](#t=02:23)** Syntax Brought to you by Sentry\n- **[03:16](#t=03:16)** How to implement a theme\n- **[10:27](#t=10:27)** Writing the CSS\n- **[11:38](#t=11:38)** Glasses wearers protip\n- **[13:02](#t=13:02)** Class on the body and server side rendering issue\n- **[14:02](#t=14:02)** CSS Variables\n- **[15:05](#t=15:05)** Color variables in CSS\n- **[21:07](#t=21:07)** Working in half pixel sizes\n- **[22:40](#t=22:40)** Variable usage\n- **[25:23](#t=25:23)** Naming variables after what they style\n- **[30:42](#t=30:42)** Component level variables\n- **[33:27](#t=33:27)** Using zones\n- **[38:41](#t=38:41)** Themes should be defined as light or dark\n- **[39:20](#t=39:20)** Issues: Moving from light to dark\n- **[42:29](#t=42:29)** Issues: Drop shadow in dark mode\n- **[44:00](#t=44:00)** Issues: Flash of unthemed content\n- **[44:40](#t=44:40)** Issues: Opacity values\n- **[49:45](#t=49:45)** Issues: SVG need change color\n- **[55:56](#t=55:56)** Help is on the way!\n- **[59:57](#t=59:57)** SIIIIICK ××× PIIIICKS ×××\n\n* [website/src/styles/themes/level-up.css at v2](https://github.com/syntaxfm/website/blob/v2/src/styles/themes/level-up.css)\n* [The 2023 State of CSS Survey Part 2 × CSS Frameworks × Tooling × Browser Usage](https://syntax.fm/show/678/the-2023-state-of-css-survey-part-2-css-frameworks-tooling-browser-usage)\n* [\"color-contrast\" | Can I use... Support tables for HTML5, CSS3, etc](https://caniuse.com/?search=color-contrast)\n* [The Future of CSS: Easy Light-Dark Mode Color Switching with light-dark() – Bram.us](https://www.bram.us/2023/10/09/the-future-of-css-easy-light-dark-mode-color-switching-with-light-dark/)\n\n### ××× SIIIIICK ××× PIIIICKS ×××\n\n- Scott: [Kala (@engineer.everything)](https://www.tiktok.com/@engineer.everything)\n\n### Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Tutorials](https://wesbos.com/courses)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)\n', '8c2fbc9e48d855314554a971e1bd45950df4c5702e1cf52eb3f320a44c50e7d0', 'how-to-dark-mode-and-beyond', '/shows/690 - Tasty Dark mode.md', '2023-10-25 15:22:59.465', '2023-11-07 21:00:31.880', 'TASTY'),
('syntax_podcast_show_00691', 691, 'Cloudflare Workers Are Next Level With Rita Kozlov And Brendan Irvine-Broque', '2023-11-10 12:00:00.000', 'https://traffic.libsyn.com/syntax/Syntax_-_691.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Rita Kozlov And Brendan Irvine-Broque about Cloudflare Workers, Cloudflare AI, browser rendering API, Cloudflare\'s D1 database, WinterCG, miniflare, and more!\n\n### Show Notes\n\n* **[00:32](#t=00:32)** Welcome\n* **[01:53](#t=01:53)** Syntax Brought to you by Sentry\n* **[02:20](#t=02:20)** What are Cloudflare Workers?\n* [Announcing WinterJS](https://wasmer.io/posts/announcing-winterjs-service-workers)\n* [Cloudflare Workers®](https://workers.cloudflare.com/)\n* [Puppeteer | Puppeteer](https://pptr.dev/)\n* **[06:23](#t=06:23)** How long did Workers take to ship?\n* **[07:31](#t=07:31)** Can you run your entire business on Cloudflare Workers?\n* **[10:52](#t=10:52)** Interesting use cases for Cloudflare Workers\n* **[12:33](#t=12:33)** What makes the edge important?\n* **[18:05](#t=18:05)** Managing GDPR compliance\n* **[19:02](#t=19:02)** What are the tradeoffs of building with Cloudflare Workers?\n* [Cloudflare Queues](https://developers.cloudflare.com/queues/)\n* **[20:22](#t=20:22)** How does Workers pricing work?\n* **[26:54](#t=26:54)** What are situations where you might need longer times?\n* **[28:50](#t=28:50)** Browser rendering API\n* [Browser Rendering docs](https://developers.cloudflare.com/browser-rendering/)\n* **[29:43](#t=29:43)** What is Cloudflare D1 database product?\n* [Cloudflare D1](https://developers.cloudflare.com/d1/)\n* **[31:05](#t=31:05)** Cloudflare Hyperdrive\n* [Hyperdrive](https://developers.cloudflare.com/hyperdrive/)\n* [“Serverless” Databases](https://syntax.fm/show/551/serverless-databases/transcript)\n* **[34:27](#t=34:27)** Cloudflare Workers don\'t use a Node.js runtime\n* [Introducing workerd: the Open Source Workers runtime](https://blog.cloudflare.com/workerd-open-source-workers-runtime/)\n* **[37:13](#t=37:13)** What is WinterCG?\n* [WinterCG](https://wintercg.org/)\n* **[45:09](#t=45:09)** Will we ever see a standard for server routing?\n* [TCP sockets · Cloudflare Workers docs](https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets/)\n* **[49:30](#t=49:30)** What is miniflare?\n* [🔥 Miniflare · Miniflare](https://miniflare.dev/)\n* **[54:05](#t=54:05)** Can I run Python on Cloudflare?\n* **[55:49](#t=55:49)** Cloudflare AI\n* [Partnering with Hugging Face to make deploying AI easier](https://blog.cloudflare.com/partnering-with-hugging-face-deploying-ai-easier-affordable/)\n* [Cloudflare + AI](https://ai.cloudflare.com/)\n* [WebGPU API](https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API)\n* [Cache · Cloudflare Workers docs](https://developers.cloudflare.com/workers/runtime-apis/cache/)\n* **[57:04](#t=57:04)** Supper Club questions\n* **[59:38](#t=59:38)** Sick Picks\n\n### Sick Picks\n\n- [Get a bench scrape](https://www.amazon.com/s?k=bench+scrape&crid=BJM5NCYAM05R&sprefix=bench+scrape,aps,114)\n\n### Shameless Plugs\n\n- [Cloudflare Discord](https://discord.com/invite/cloudflaredev)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)\n', '9f84f6ac8bb0aefb9c007176560bf08bd6a234387118fe4627c74b604deb6f46', 'cloudflare-workers-are-next-level-with-rita-kozlov-and-brendan-irvine-broque', '/shows/691 - supper.md', '2023-11-03 13:46:54.074', '2023-11-03 18:00:48.516', 'SUPPER'),
('syntax_podcast_show_00692', 692, 'You Need Stale While Revalidate', '2023-11-13 12:00:00.396', 'https://traffic.libsyn.com/syntax/Syntax_-_692.mp3', '\nIn this episode of Syntax, Wes and Scott explain what Stale While Revalidate is, why you should use it, and explore whether you should use it all the time on all the things.\n\n### Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:05](#t=01:05)** Syntax Brought to you by Sentry\n* **[01:34](#t=01:34)** What is Stale While Revalidate?\n* **[03:13](#t=03:13)** Why is caching important?\n* [Max age calculator](https://svelte.dev/repl/a779692677d44146b9118e0008cbb4d0?version=3.48.0)\n* [Can I Use](https://caniuse.com/mdn-http_headers_cache-control_stale-while-revalidate)\n* **[05:09](#t=05:09)** Where does a cache live?\n* **[07:05](#t=07:05)** Limit how often an API is being hit\n* **[11:51](#t=11:51)** What about Stale while Revalidate?\n* **[18:30](#t=18:30)** Why wouldn\'t you just use Stale While Invalidate on everything?\n* [Syntax 484: Cache Control Headers Explained](https://syntax.fm/show/464/cache-control-headers-explained)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', 'a8c25953c7cc3421642194e41995148e7de207eddf745179c3cfd1d4ed8184f3', 'you-need-stale-while-revalidate', '/shows/692 - hasty cache.md', '2023-11-06 18:00:14.055', '2023-11-06 18:00:14.055', 'HASTY'),
('syntax_podcast_show_00693', 693, 'Lessons Learned & Bugs Fixed from Launching Syntax.fm', '2023-11-15 12:00:00.101', 'https://traffic.libsyn.com/syntax/Syntax_-_693.mp3', '\nIn this episode of Syntax, Wes and Scott talk about the lessons they learned while launching the new Syntax website including launching now, transcription bugs, error monitoring, black text on black backgrounds, and more.\n\n### Show Notes\n\n* **[00:10](#t=00:10)** Welcome to Syntax\n* **[01:41](#t=01:41)** Syntax Brought to you by Sentry\n* **[02:43](#t=02:43)** Don\'t wait. Launch!\n* **[04:28](#t=04:28)** Transcript bug\n* [Most Powerful Speech-to-Text API | Deepgram](https://deepgram.com/)\n* **[09:01](#t=09:01)** Error monitoring is a must\n* **[12:36](#t=12:36)** Timestamp error\n* **[16:20](#t=16:20)** Black text on black background might hide things\n* **[17:33](#t=17:33)** WASM Vercel file system\n* **[21:18](#t=21:18)** Things have gotten easier to launch\n* [PlanetScale: The world’s most advanced database platform — PlanetScale](https://planetscale.com/)\n* **[23:36](#t=23:36)** Switching from OpenAI to Anthropic Claude and AI Responses aren’t always JSON\n* **[25:34](#t=25:34)** Local dev is fast\n* [Navigation API](https://developer.mozilla.org/en-US/docs/Web/API/Navigation_API)\n* **[31:37](#t=31:37)** Mind your payloads\n* **[32:41](#t=32:41)** GitHub Milestones\n* **[33:57](#t=33:57)** Almost forgot the Robots.txt \n* **[36:17](#t=36:17)** Chron job timeout\n* [Inngest](https://www.inngest.com/)\n* **[40:06](#t=40:06)** TypeScript errors don’t need to be zero to launch\n* **[42:25](#t=42:25)** GitHub Actions pipeline bug\n* **[43:23](#t=43:23)** Basic testing will do\n* [Playwright](https://playwright.dev/)\n* **[44:56](#t=44:56)** Have a designer to work with\n* [Airbase](https://www.airbase.com/)\n* **[52:07](#t=52:07)** Sick Picks\n\n### Sick Picks\n\n- Scott: [Dog Poop Bags With Dispenser](https://amzn.to/3SbPS9e)\n- Wes: Resistance band\n\n### Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Courses](https://wesbos.com/courses)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '2460afece846faed8e1dd663ee13294c504651ef94720651a215e5be6b8ae128', 'lessons-learned-and-bugs-fixed-from-launching-syntax-fm', '/shows/693 - tasty.md', '2023-11-06 21:00:35.257', '2023-11-06 21:00:35.257', 'TASTY'),
('syntax_podcast_show_00694', 694, 'What\'s Up With Angular with Mark Techson', '2023-11-17 12:00:00.247', 'https://traffic.libsyn.com/syntax/Syntax_-_694.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Mark Techson about the recent Angular announcements and updates. How did Angular implement signals? What\'s new in Angular 17? How does Angular handle CSS or UI component libraries? \n\n### Show Notes\n\n* **[00:30](#t=00:30)** Welcome\n* **[01:11](#t=01:11)** Syntax Brought to you by Sentry\n* **[01:39](#t=01:39)** What\'s changing with Angular?\n* [Special Angular Event](https://www.youtube.com/watch?v=Wq6GpTZ7AX0)\n* [Angular](https://angular.dev/)\n* **[03:19](#t=03:19)** What happened to Angular.js, and what\'s happening now?\n* [StackBlitz](https://stackblitz.com/)\n* [Analog | Analog](https://analogjs.org/)\n* [Supper Club × Self Hosted Backend-as-a-service with Brandon Roberts](https://syntax.fm/*how/502/supper-club-self-hosted-backend-as-a-service-with-brandon-roberts)\n* **[08:19](#t=08:19)** What makes Angular special?\n* **[13:21](#t=13:21)** How did Angular implement signals?\n* **[17:17](#t=17:17)** What is a computed value?\n* **[18:54](#t=18:54)** What\'s new in Angular 17?\n* **[25:10](#t=25:10)** What\'s the meta framework story with Angular?\n* [Angular Material UI component library](https://material.angular.io/)\n* [CDK | Angular Material](https://material.angular.io/cdk/categories)\n* [Angular - Angular elements overview](https://angular.io/guide/elements)\n* **[27:40](#t=27:40)** Adding close to the metal if statements\n* **[31:03](#t=31:03)** View transitions\n* **[32:34](#t=32:34)** How does Angular handle CSS?\n* **[39:31](#t=39:31)** How does Angular integrate with UI component libraries?\n* **[41:07](#t=41:07)** What are headless components?\n* **[41:45](#t=41:45)** Does Angular work well with web components?\n* **[42:43](#t=42:43)** Supper Club Questions\n* [Accessibility in Visual Studio Code](https://code.visualstudio.com/docs/editor/*ccessibility#:~:text=level%20by%2020%25.-,High%20Contrast%20theme,*elect%20the%20High%20Contrast%20theme.)\n* [Technology Radar Thoughtworks](https://www.thoughtworks.com/en-ca/radar)\n* [RedMonk – The developer-focused analyst firm](https://redmonk.com/)\n* [Mermaid | Diagramming and charting tool](https://mermaid.js.org/)\n* **[49:38](#t=49:38)** Sick Picks\n\n### Sick Picks\n\n* [Godot Engine - Free and open source 2D and 3D game engine](https://godotengine.org/)\n\n### Shameless Plugs\n\n* [#goodmorningwithmark on Twitter](https://twitter.com/search?q=%23goodmorningwithmark&src=typed_query)\n* [#goodmorningwithmark on YouTube](https://www.youtube.com/results?search_query=%23goodmorningwithmark)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '03dbc186dc51fb41974c624d68a8a47066dfc15af3c39982702a1c0636a39cee', 'what-s-up-with-angular-with-mark-techson', '/shows/694 - supper.md', '2023-11-10 18:00:13.233', '2023-11-10 18:00:13.233', 'SUPPER'),
('syntax_podcast_show_00695', 695, '5 New CSS Features You Should Know', '2023-11-20 12:00:00.149', 'https://traffic.libsyn.com/syntax/Syntax_-_695.mp3', '\nIn this episode of Syntax, Wes and Scott talk about 5 new CSS features :nth-child(4 of .neat), CSS Motion Path, Scroll Snap, Scroll Driven Animations, and Margin Trim.\n\n### Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:10](#t=01:10)** :nth-child(4 of .neat)\n* [selector list argument of :nth-child and :nth-last-child CSS pseudo-classes | Can I use](https://caniuse.com/css-nth-child-of)\n* **[06:43](#t=06:43)** CSS Motion Path\n* **[10:38](#t=10:38)** Scroll Snap\n* [Practical CSS Scroll Snapping](https://css-tricks.com/practical-css-scroll-snapping/)\n* **[14:36](#t=14:36)** Scroll Driven Animations\n* [Scroll-driven Animations](https://scroll-driven-animations.style/)\n* [Supper Club × Bramus Van Damme on CSS](https://syntax.fm/show/619/supper-club-bramus-van-damme-on-css)\n* **[16:58](#t=16:58)** Margin Trim\n\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '3171914555ec0e0423900ddc769fd2776906ac973bed88c0fb6058fe3a758dbc', '5-new-css-features-you-should-know', '/shows/695 - new CSS.md', '2023-11-13 21:00:50.718', '2023-11-13 21:00:50.718', 'HASTY'),
('syntax_podcast_show_00696', 696, 'How to Build a Website or App', '2023-11-22 12:00:00.619', 'https://traffic.libsyn.com/syntax/Syntax_-_696.mp3', '\nIn this episode of Syntax, Wes and Scott answer a listener\'s question about their process for building a website in 2023. Do you start with design? With code? How do you decide on which CMS or if you need a CMS? How do you choose a backend framework? And where do you host it?\n\n### Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[02:12](#t=02:12)** Syntax Brought to you by Sentry\n* **[03:06](#t=03:06)** How do you build a website?\n* **[04:57](#t=04:57)** Start with the design\n* [Figma](https://www.figma.com/)\n* [Design Systems with Brad Frost](https://syntax.fm/show/682/design-systems-with-brad-frost)\n* **[11:12](#t=11:12)** Choose a Frontend / Components\n* [Pug](https://pugjs.org/api/getting-started.html)\n* [EJS ](https://ejs.co/)\n* [React](https://react.dev/)\n* [Svelte](https://svelte.dev/)\n* [Remix](https://remix.run/)\n* [Storybook](https://storybook.js.org/)\n* **[25:16](#t=25:16)** Real data or fake data?\n* [Polypane](https://polypane.app/)\n* [DrizzleORM](https://orm.drizzle.team/)\n* **[29:34](#t=29:34)** Do you need a CMS or not?\n* [Statamic](https://statamic.com/)\n* [Syntax 254: Headless CMS Break Down & Roundup](https://syntax.fm/show/254/headless-cms-break-down-and-roundup)\n* [WordPress.org](https://wordpress.org/)\n* [Astro](https://astro.build/)\n* **[35:16](#t=35:16)** Choosing a backend language or framework\n* **[39:56](#t=39:56)** Testing\n* **[44:50](#t=44:50)** Where do you host your website?\n* [Vercel](https://vercel.com)\n* [Netlify Drop](https://app.netlify.com/drop)\n* [Glitch](https://glitch.com/)\n* [CodePen](https://codepen.io/)\n* **[50:04](#t=50:04)** Sick Picks\n\n\n### Sick Picks\n\n- Scott: [Chip clips](https://amzn.to/3SmOAIp)\n- Wes: Soft close used toilet seat [Amazon Warehouse Deals](https://www.amazon.ca/b/?ie=UTF8&node=8929975011)\n\n### Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Courses](https://wesbos.com/courses)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '29f3118484d18dc8a28ee2f639834ebf4c031c3c8da7efc3e5266ba48b0f078e', 'how-to-build-a-website-or-app', '/shows/696 - tasty building sites.md', '2023-11-09 21:00:24.419', '2023-11-09 21:00:24.419', 'TASTY'),
('syntax_podcast_show_00697', 697, 'What is DevRel with Salma Alam-Naylor', '2023-11-24 12:00:00.123', 'https://traffic.libsyn.com/syntax/Syntax_-_697.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with Salma Alam-Naylor all about her role in DevRel, what\'s involved in working in DevRel, avoiding burnout, which platforms to focus on, and so much more.\n\n### Show Notes\n\n* **[00:31](#t=00:31)** Welcome\n* **[01:07](#t=01:07)** Syntax Brought to you by Sentry\n* **[01:52](#t=01:52)** New jobs and onboarding\n* **[03:34](#t=03:34)** What is Devrel?\n* **[11:34](#t=11:34)** How much of devrel is using your own product? Dogfooding the service?\n* **[14:49](#t=14:49)** What are things devrel people do?\n* **[20:32](#t=20:32)** Devrel burnout issues\n* **[24:53](#t=24:53)** Once you put a number on something, you\'re measuring that number\n* **[29:31](#t=29:31)** Is there any way to know if devrel is working?\n* **[33:47](#t=33:47)** How could someone get into devrel?\n* **[37:37](#t=37:37)** What platforms should you focus on?\n* **[44:12](#t=44:12)** What\'s something devrel gets wrong?\n* **[47:50](#t=47:50)** What do you think about speaking at conferences?\n* **[51:58](#t=51:58)** What do you use to stay up on with tech?\n* **[53:59](#t=53:59)** Sick picks\n\n### Sick Picks\n\n* [Wikipedia on Hell.com](https://en.wikipedia.org/wiki/Hell.com)\n* [Web Archive of Hell.com](https://web.archive.org/web/20041215000000*/hell.com)\n* [Fffffound](https://en.wikipedia.org/wiki/FFFFOUND)\n* https://twitter.com/webdesignmuseum\n\n### Shameless Plugs\n\n* [Follow Salma on Twitch](https://www.twitch.tv/whitep4nth3r)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '8da293a1fe92eccf27d6f7e697138f38a8b96c4a66621c9b27a96a2bd905aff0', 'what-is-devrel-with-salma-alam-naylor', '/shows/697 - supper Salma.md', '2023-11-21 00:00:08.312', '2023-11-24 18:00:54.585', 'SUPPER'),
('syntax_podcast_show_00698', 698, 'Why You Should Be Using CSS @Layers', '2023-11-27 12:00:00.123', 'https://traffic.libsyn.com/syntax/Syntax_-_698.mp3', '\nWhat are @Layers in CSS, when and where should you be using them, how do you write them, and who\'s using them already?\n\n### Show Notes\n\n* **[00:23](#t=00:23)** Welcome\n* **[01:49](#t=01:49)** Syntax Brought to you by Sentry\n* **[02:55](#t=02:55)** Where is this supported?\n* **[07:21](#t=07:21)** How do we write layers?\n* **[10:47](#t=10:47)** How do you write your CSS?\n* **[16:20](#t=16:20)** Nesting\n* **[20:35](#t=20:35)** Who else is using @Layer?\n* [CSS Analytics - Project Wallace](https://www.projectwallace.com/)\n* [Tailwind CSS](https://tailwindcss.com/)\n* [Netlify](https://www.netlify.com/)\n* [Adam Argyle](https://nerdy.dev/)\n* [Una Kravets](https://una.im/)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '51bcfbda8daf77892a7348c8507b56afeeee18b5cfed5891cd2893e45467c896', 'why-you-should-be-using-css-layers', '/shows/698 - syn hasty.md', '2023-11-21 00:00:08.551', '2023-11-21 00:00:08.551', 'HASTY'),
('syntax_podcast_show_00699', 699, 'Potluck × TypeScript\'s Longevity × Canvas-Rendered Apps × Learning Rust × Executing Untrusted JS Code', '2023-11-29 12:00:00.604', 'https://traffic.libsyn.com/syntax/Syntax_-_699.mp3', '\nIn this potluck episode of Syntax, Wes and Scott answer your questions, including: Will TypeScript ever go away? Should I write canvas-rendered web apps? How can I execute untrusted JS code in node? How can I use continuous integration with WordPress? Any advice for learning Rust?\n\n### Show Notes\n\n- **[00:09](#t=00:09)** Welcome\n- **[01:16](#t=01:16)** How to ask questions for potluck episodes\n- [Ask a question for Syntax potluck episodes](https://syntax.fm/potluck)\n- **[02:19](#t=02:19)** Syntax Brought to you by Sentry\n- **[04:34](#t=04:34)** Will TypeScript ever go away?\n- [Migrating millions of lines of code to TypeScript](https://stripe.com/blog/migrating-to-typescript)\n- **[08:12](#t=08:12)** What is your opinion on entirely canvas-rendered web apps, such as those built with Flutter?\n- [Flutter on the Web](https://flutter.dev/multi-platform/web)\n- [Flutter Gallery](https://gallery.flutter.dev/#/)\n- [html2canvas - Screenshots with JavaScript](https://html2canvas.hertzen.com/)\n- **[13:43](#t=13:43)** Tailscale VPN is cool\n- [Tailscale · Best VPN Service for Secure Networks](https://tailscale.com/)\n- [Tunnel | Zero Trust App Connector | Cloudflare](https://www.cloudflare.com/products/tunnel/)\n- **[16:36](#t=16:36)** What is Bandcamp?\n- [Bandcamp](https://bandcamp.com/)\n- [Stream and listen to music online for free with SoundCloud](https://soundcloud.com/)\n- **[18:56](#t=18:56)** How can I execute untrusted JS code with node?\n- [WebAssembly](https://webassembly.org/)\n- [Cloudflare Workers®](https://workers.cloudflare.com/)\n- [Deno, The next-generation JavaScript runtime](https://deno.com/)\n- [Fastly](https://www.fastly.com/)\n- **[23:46](#t=23:46)** I\'d love to get your thoughts on modern devops and continuous integration for building out WordPress websites.\n- [Supper Club × Fabian Kägy - Modern WordPress - Blocks, Page builders, Headless, Custom Fields](https://syntax.fm/show/598/supper-club-fabian-kaegy-modern-wordpress-blocks-page-builders-headless-custom-fields)\n- [Vite | Next Generation Frontend Tooling](https://vitejs.dev/)\n- [Alpine.js](https://alpinejs.dev/)\n- **[30:39](#t=30:39)** How do I orchestrate color adapting icons for use inline and in background images?\n- [svg.wesbos.com](https://svg.wesbos.com/)\n- [svg.wesbos.com/cat.svg](https://svg.wesbos.com/cat.svg)\n- **[35:53](#t=35:53)** Are there any publicly available libraries for web components?\n- [Shoelace: A forward-thinking library of web components.](https://shoelace.style/)\n- [Open UI](https://open-ui.org/)\n- **[40:20](#t=40:20)** What\'s a good project idea for learning Rust?\n- [Tauri Apps](https://tauri.app/)\n- **[45:17](#t=45:17)** Do you ever plan to do more podcasts with Scott’s wife or another psychologist / psychiatrist?\n- **[47:02](#t=47:02)** Have you tried MongoDB vector search for AI embeddings?\n- [Atlas Vector Search | MongoDB](https://www.mongodb.com/products/platform/atlas-vector-search?adgroup=155168612071&cq_cmp=20445624173&gad_source=1)\n- [Vector Database for Vector Search | Pinecone](https://www.pinecone.io/)\n- [Xata](https://xata.io/)\n- **[49:44](#t=49:44)** Syntax highlighting in VS Code\n- [Comment tagged templates - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=bierner.comment-tagged-templates)\n- **[52:38](#t=52:38)** Sick Picks\n\n### Sick Picks\n\n- Scott: [The Spider-Man of Paris (2023) - IMDb](https://www.imdb.com/title/tt29274601/)\n- Wes: [Amazon.ca : instant read digital thermometer](https://www.amazon.ca/s?k=instant+read+digital+thermometer&crid=T962EXWZQL5C&sprefix=instant+read+digital+,aps,125)\n\n### Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Courses](https://wesbos.com/courses)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', 'a1c8905a13e66a7c13a78af3ec69364ce92ee7e6ecb13fbebc0f8539c38d2a54', 'potluck-typescript-s-longevity-canvas-rendered-apps-learning-rust-executing-untrusted-js-code', '/shows/699 - tasty pot.md', '2023-11-14 21:00:42.828', '2023-11-14 21:00:42.828', 'TASTY'),
('syntax_podcast_show_00700', 700, 'Payload is Rails for JS with TypeScript, React and Drizzle (James Mikrut)', '2023-12-01 11:00:00.253', 'https://traffic.libsyn.com/syntax/Syntax_-_700.mp3', '\nIn this supper club episode of Syntax, Wes and Scott talk with James Mikrut about Payload, how Payload isn\'t just a CMS, where Payload fits in a tech stack, why they picked Drizzle for an ORM, what Payload Cloud is, and where\'s the Rails for JavaScript?\n\n### Show Notes\n\n* **[00:31](#t=00:31)** Welcome\n* **[02:00](#t=02:00)** Who is James Mikrut and what\'s the idea behind Payload?\n* **[05:22](#t=05:22)** Payload isn\'t just a CMS\n* [Payload](https://payloadcms.com)\n* [Payload on GitHub](https://github.com/payloadcms/payload)\n* [Payload on Twitter](https://twitter.com/payloadcms)\n* [Payload on YouTube](https://www.youtube.com/@payloadcms)\n* **[09:08](#t=09:08)** Where does Payload fit in the tech stack?\n* [KeystoneJS](https://keystonejs.com/)\n* [Supabase](https://supabase.com/)\n* [Retool](https://retool.com/)\n* **[11:22](#t=11:22)** Is Payload using TypeScript?\n* **[13:44](#t=13:44)** Why did you pick Drizzle?\n* [Drizzle ORM](https://orm.drizzle.team/)\n* **[18:08](#t=18:08)** Do you have to maintain MongoDB and Drizzle?\n* [SvelteKit](https://kit.svelte.dev/)\n* **[26:31](#t=26:31)** Does Payload have visual editing elements?\n* **[30:34](#t=30:34)** Do you build a custom UI for users?\n* **[35:10](#t=35:10)** What is Payload Cloud?\n* **[38:12](#t=38:12)** Where is the Rails for JavaScript?\n* [Next.js by Vercel](https://nextjs.org/)\n* [Laravel Spark](https://spark.laravel.com/)\n* [Deploy your Laravel PHP application painlessly](https://forge.laravel.com/)\n* [RedwoodJS: The App Framework for Startups | RedwoodJS.com](https://redwoodjs.com/)\n* **[41:39](#t=41:39)** How do you manage contributions from open source?\n* **[43:46](#t=43:46)** GitHub + AI\n* **[48:18](#t=48:18)** Syntax Brought to you by Sentry\n* [Error Management Magic: Introducing the Sentry Plugin for Payload](https://payloadcms.com/blog/error-management-magic-introducing-the-sentry-plugin-for-payload)\n* **[50:26](#t=50:26)** Supper Club questions\n\n### Shameless Plugs\n\n[Payload on GitHub](https://github.com/payloadcms/payload)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '67878508e9ff57ca73ff1eb36d99d9f4548d70f28155795fdb8c6df4f7ddca77', 'payload-is-rails-for-js-with-typescript-react-and-drizzle-james-mikrut', '/shows/700 - supper payload.md', '2023-11-23 00:00:47.315', '2023-11-23 00:00:47.315', 'SUPPER'),
('syntax_podcast_show_00701', 701, 'A11y Treats - Labels & Roles', '2023-12-04 12:00:00.946', 'https://traffic.libsyn.com/syntax/Syntax_-_701.mp3', '\nIn this episode of Syntax, Wes and Scott explain ARIA, aria-label, Roles, and the overall importance of accessibility in your web projects.\n\n### Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:18](#t=01:18)** Syntax Brought to you by Sentry\n* **[01:44](#t=01:44)** What is ARIA?\n* [WAI-ARIA Roles | MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles)\n* [An in-depth guide to ARIA roles - The A11Y Project](https://www.a11yproject.com/posts/an-indepth-guide-to-aria-roles/)\n* **[02:48](#t=02:48)** What is aria-label?\n```\n// A button with an ARIA role and label\n<button role=\"button\" aria-label=\"close\">\n  <img src=\"close-icon.svg\" alt=\"\">\n</button>\n```\n* **[06:36](#t=06:36)** What\'s the difference between a title and aria-label on a button?\n* **[08:34](#t=08:34)** Are you really going to get sued if your website isn\'t accessible?\n* **[11:53](#t=11:53)** What are Roles for?\n* **[16:33](#t=16:33)** 6 different types of Roles\n* **[21:25](#t=21:25)** What is aria-labelledby?\n```\n<span\n  role=\"checkbox\"\n  aria-checked=\"false\"\n  tabindex=\"0\"\n  aria-labelledby=\"tac\"></span>\n<span id=\"tac\">I agree to the Terms and Conditions.</span>\n```\n* **[23:13](#t=23:13)** Checking your code for accessibility\n* [eslint-plugin-jsx-a11y - npm](https://www.npmjs.com/package/eslint-plugin-jsx-a11y)\n* [WAVE Web Accessibility Evaluation Tools](https://wave.webaim.org/)\n* [Polypane](https://polypane.app/)\n* **[24:31](#t=24:31)** Feedback and future show ideas\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '10cccf7fa032277abd9c5964ba968acc65288a74b3c875f62d5c79676d0e69e5', 'a11y-treats-labels-and-roles', '/shows/701 - hasty.md', '2023-11-24 21:00:50.950', '2023-11-24 21:00:50.950', 'HASTY'),
('syntax_podcast_show_00702', 702, 'New + Proposed JS APIs for 2024', '2023-12-06 12:00:00.821', 'https://traffic.libsyn.com/syntax/Syntax_-_702.mp3', '\nIn this episode of Syntax, Wes and Scott talk through new and proposed JavaScript APIs including ones related to regex, sourcemaps, structured clone, temporal, JSON modules, and more!\n\n### Show Notes\n\n* **[00:10](#t=00:10)** Welcome\n* **[01:26](#t=01:26)** Syntax Brought to you by Sentry\n* **[02:55](#t=02:55)** RegExp Escaping Proposal\n* [tc39/proposal-regex-escaping: Proposal for investigating RegExp escaping for the ECMAScript standard](https://github.com/tc39/proposal-regex-escaping)\n* **[05:25](#t=05:25)** Intl.DurationFormat\n* [tc39/proposal-intl-duration-format](https://github.com/tc39/proposal-intl-duration-format)\n* **[07:55](#t=07:55)** Standardized Sourcemaps\n* [tc39/source-map-rfc: RFCs for the source map debug format.](https://github.com/tc39/source-map-rfc)\n* **[10:43](#t=10:43)** Structured Clone\n* [structuredClone() global function - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone)\n* **[12:54](#t=12:54)** Temporal\n* [Hasty Treat - Temporal Date Objects in JavaScript](https://syntax.fm/show/295/hasty-treat-temporal-date-objects-in-javascript)\n* [Tracking issue for syncing with IETF standardization work (req\'d before implementers can ship unflagged) · Issue #1450 · tc39/proposal-temporal](https://github.com/tc39/proposal-temporal/issues/1450)\n* **[20:59](#t=20:59)** FindLast and findLastIndex\n* [tc39/proposal-array-find-from-last: Proposal for Array.prototype.findLast and Array.prototype.findLastIndex.](https://github.com/tc39/proposal-array-find-from-last)\n* **[22:27](#t=22:27)** JSON modules\n* [tc39/proposal-json-modules: Proposal to import JSON files as modules](https://github.com/tc39/proposal-json-modules)\n* **[24:46](#t=24:46)** Regex Modifiers\n* [RegExp Modifiers - June 2022.pptx - Microsoft PowerPoint Online](https://onedrive.live.com/view.aspx?resid=934F1675ED4C1638!294749&ithint=file,pptx&wdo=2&authkey=!AGkZ0bMbvAWOTbI)\n* **[26:50](#t=26:50)** Array Grouping\n* [tc39/proposal-array-grouping: A proposal to make grouping of array items easier](https://github.com/tc39/proposal-array-grouping)\n* **[30:48](#t=30:48)** Array Methods\n* [tc39/proposal-change-array-by-copy: Provides additional methods on Array.prototype and TypedArray.prototype to enable changes on the array by returning a new copy of it with the change.](https://github.com/tc39/proposal-change-array-by-copy)\n* [6 or so New Approved and Proposed JavaScript APIs](https://syntax.fm/show/654/6-or-so-new-approved-and-proposed-javascript-apis)\n* **[32:12](#t=32:12)** Promise.withResolvers\n* **[35:08](#t=35:08)** Function.prototype.memo\n* [tc39/proposal-function-memo: A TC39 proposal for function memoization in the JavaScript language.](https://github.com/tc39/proposal-function-memo)\n* **[37:48](#t=37:48)** Node has a Proposed ESM Detection flag\n* **[39:54](#t=39:54)** Node has navigator.userAgent\n* **[41:29](#t=41:29)** Built in .env support\n* **[42:52](#t=42:52)** Permissions model & test runner continues to be worked on\n* **[44:06](#t=44:06)** HTML Web charts\n* [Proposal: Web Charts · Issue #9295 · whatwg/html](https://github.com/whatwg/html/issues/9295)\n* **[45:39](#t=45:39)** autopause\n* [Add `autopause` attribute to media elements to allow automatic pausing of media · Issue #9793 · whatwg/html](https://github.com/whatwg/html/issues/9793)\n* **[46:30](#t=46:30)** Meta Tag for AI generated content\n* [Proposal: Meta Tag for AI Generated Content · Issue #9479 · whatwg/html](https://github.com/whatwg/html/issues/9479)\n* [Schema.org - Schema.org](https://schema.org/)\n* [Syntax × Sentry Swag Store – Syntax × Sentry Shop](https://sentry.shop/)\n* [Syntax - A Tasty Treats Podcast for Web Developers.](https://syntax.fm/snackpack)\n* **[50:13](#t=50:13)** Poster frame\n* [HTML Video Element: Proposal for adding [srcset] + [posterset] + [sizes] on video element as well [posterset] on source elements · Issue #9812 · whatwg/html](https://github.com/whatwg/html/issues/9812)\n* **[50:57](#t=50:57)** Popover invoker\n* [Popover does not know what triggered it · Issue #9111 · whatwg/html](https://github.com/whatwg/html/issues/9111)\n* **[51:25](#t=51:25)** Autocomplete on \'contenteditable\' Elements\n* [Autocomplete on \'contenteditable\' Elements · Issue #9065 · whatwg/html](https://github.com/whatwg/html/issues/9065)\n* **[52:17](#t=52:17)** Sick Picks\n\n### Sick Picks\n\n- Scott: [Escaping Twin Flames cult documentary](https://www.netflix.com/ca/title/81615919)\n- Wes: Lao Gan Ma spicy Chili Oil\n\n### Shameless Plugs\n\n- Scott: [Sentry](https://sentry.io)\n- Wes: [Wes Bos Courses](https://wesbos.com/courses)\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '80c2b562a6b8811ca04126d28e4261a72a17a353f352917fc1dce6a0419f797b', 'new-proposed-js-apis-for-2024', '/shows/702 - tasty.md', '2023-11-22 18:00:52.018', '2023-11-22 18:00:52.018', 'TASTY'),
('syntax_podcast_show_00703', 703, 'The Observer Pattern', '2023-12-11 12:00:00.874', 'https://traffic.libsyn.com/syntax/Syntax_-_703.mp3', '\nIn this episode of Syntax, Wes and Scott give a high level overview of the observer pattern, what is the observer, what are downsides to too many observers, and more.\n\n### Show Notes\n\n* **[00:25](#t=00:25)** Welcome\n* **[01:42](#t=01:42)** Syntax Brought to you by Sentry\n* **[02:16](#t=02:16)** High level overview\n* [Syntax 694: What\'s Up With Angular with Mark Techson](https://syntax.fm/show/694/what-s-up-with-angular-with-mark-techson/transcript)\n* [Godot Engine](https://godotengine.org/)\n* **[03:36](#t=03:36)** What might you observe in game development?\n* **[06:50](#t=06:50)** What is the observer?\n* **[08:11](#t=08:11)** What are some downsides to too many observers?\n* **[10:17](#t=10:17)** IntersectionObserver, MutationObserver, and PerformanceObserver\n* **[12:25](#t=12:25)** ResizeObserver\n* **[13:04](#t=13:04)** What about addEventListener?\n* [@BenLesh on Callbacks being faster than observables](https://twitter.com/BenLesh/status/1498415376283148295)\n* **[16:13](#t=16:13)** Signals are becoming a big thing\n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '0a6f171edc816ca846528b577aa71f658b4e993c3edbccbdabfb489eca15ad1a', 'the-observer-pattern', '/shows/703 - hasty.md', '2023-11-30 00:00:07.528', '2023-11-30 00:00:07.528', 'HASTY'),
('syntax_podcast_show_00705', 705, 'Is Running Random Code From npm Safe? With Feross Aboukhadijeh', '2023-12-15 12:00:00.697', 'https://traffic.libsyn.com/syntax/Syntax_-_705.mp3', '\nIn this Supper Club episode of Syntax, Wes and Scott talk with Feross Aboukhadijeh about his work on Socket which helps to make sure the code you get from npm is safe and secure. They also touch on his work on Wormhole and Web Torrent.\n\n### Show Notes\n\n* **[00:30](#t=00:30)** Welcome\n* **[00:57](#t=00:57)** Who is Feross Aboukhadijeh?\n* **[01:33](#t=01:33)** What is Socket?\n* [Socket.dev](https://socket.dev)\n* [Dominic Tarr on GitHub](https://github.com/dominictarr)\n* [pull-stream/pull-stream: minimal streams](https://github.com/pull-stream/pull-stream)\n* **[03:59](#t=03:59)** Introducing AI package summaries\n* [Example of the AI summaries](https://socket.dev/npm/package/lodash)\n* [Introducing AI Package Summaries](https://socket.dev/blog/introducing-ai-package-summaries)\n* **[07:04](#t=07:04)** Is Socket\'s focus on visibility of a open source project?\n* **[10:01](#t=10:01)** What was the inspiration for Socket?\n* [Introducing \"safe npm\", a Socket npm Wrapper - Socket](https://socket.dev/blog/introducing-safe-npm)\n* **[16:22](#t=16:22)** How does Socket detect possible security issues?\n* [Removed packages](https://socket.dev/npm/category/removed)\n* [event-source-polyfill protestware attack](https://socket.dev/npm/package/event-source-polyfill/diff/1.0.26)\n* [john wick spam attack](https://socket.dev/blog/npm-registry-spam-john-wick)\n* **[18:55](#t=18:55)** How many projects are you injesting for Socket to scan?\n* **[26:00](#t=26:00)** What kinds of things are people trying to inject in code?\n* [CS253 Web Security](https://cs253.stanford.edu/)\n* **[29:54](#t=29:54)** How do I hook Socket up to my project or GitHub?\n* **[32:08](#t=32:08)** Do we still need to use shrink wrap?\n* **[36:34](#t=36:34)** How did you implement the torrent spec in JavaScript for WebTorrent?\n* [WebTorrent Desktop](https://webtorrent.io/desktop/)\n* [WebTorrent FAQ](https://webtorrent.io/faq)\n* **[43:11](#t=43:11)** Why did you build Wormhole?\n* [Wormhole](https://wormhole.app/)\n* **[47:33](#t=47:33)** How expensive is it to maintain Wormhole?\n* [Riverside.fm - Record Podcasts And Videos From Anywhere](https://riverside.fm/)\n* **[50:37](#t=50:37)** What do you think of decentralized code repos?\n* [Radicle](https://radicle.xyz/)\n* [Project Fugu](https://www.chromium.org/teams/web-capabilities-fugu/)\n* [Fugu Tracker](https://fugu-tracker.web.app/)\n* **[54:29](#t=54:29)** Understanding passkeys\n* **[56:15](#t=56:15)** Supper Club questions\n* [GitHub Theme - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme)\n* [Web Serial API - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API)\n* **[01:03:04](#t=01:03:04)** Sick Picks\n\n### Sick Picks\n\n* [Harry Potter audio books](https://www.audible.com/search?searchNarrator=Jim+Dale&page=1&ref_pageloadid=Y232dKyXJGQwY3D1&ref=a_search_c4_pageBack&pf_rd_p=1d79b443-2f1d-43a3-b1dc-31a2cd242566&pf_rd_r=7R36W9E563TXEW646N1V&pageLoadId=pPGcJ2msQJM8cETD&ref_plink=not_applicable&creativeId=18cc2d83-2aa9-46ca-8a02-1d1cc7052e2a)\n\n### Shameless Plugs\n\n* [ChatGPT](https://chat.openai.com/auth/login) \n\n### Hit us up on Socials!\n\nSyntax: [X](https://twitter.com/syntaxfm) [Instagram](https://www.instagram.com/syntax_fm/) [Tiktok](https://www.tiktok.com/@syntaxfm) [LinkedIn](https://www.linkedin.com/company/96077407/admin/feed/posts/) [Threads](https://www.threads.net/@syntax_fm)\n\nWes: [X](https://twitter.com/wesbos) [Instagram](https://www.instagram.com/wesbos/) [Tiktok](https://www.tiktok.com/@wesbos) [LinkedIn](https://www.linkedin.com/in/wesbos/) [Threads](https://www.threads.net/@wesbos)\n\nScott: [X](https://twitter.com/stolinski) [Instagram](https://www.instagram.com/stolinski/) [Tiktok](https://www.tiktok.com/@stolinski) [LinkedIn](https://www.linkedin.com/in/stolinski/) [Threads](https://www.threads.net/@stolinski)', '22aebd6d2bf5391948694c2dd8a225f56e3d02bd8c0ac69b0544abf84cf6a353', 'is-running-random-code-from-npm-safe-with-feross-aboukhadijeh', '/shows/705 - supper.md', '2023-11-28 00:00:30.968', '2023-11-30 00:00:07.580', 'SUPPER');

INSERT INTO `ShowGuest` (`id`, `showId`, `guestId`, `transcriptId`) VALUES
('02271a9d-7e00-4a54-b68a-c2514550147d', 'syntax_podcast_show_00517', '9d81aee0-7ae1-4b96-92b0-b52dc5e9cc24', NULL),
('0516c159-605a-43ff-955b-1f477a3fed8f', 'syntax_podcast_show_00625', '48beb7d1-5408-4d62-8cc1-99c357670a42', NULL),
('0841a475-4783-48aa-a28a-0e182883711c', 'syntax_podcast_show_00694', 'abd451b9-cb29-4405-9545-7b8f80edddbb', NULL),
('08a17367-ae96-4c40-a8a3-aaebc9e10e87', 'syntax_podcast_show_00619', 'f0a8feb0-1099-4558-9082-1e4370d4f5ba', NULL),
('14fedc3c-f1b1-4156-b568-e2d8aca4cf5e', 'syntax_podcast_show_00340', '371cf332-28fa-47c6-a3e3-52eefa857a18', NULL),
('18ff6126-2717-4924-8cfe-8db1497bd1be', 'syntax_podcast_show_00523', '30cea231-c01f-4648-ba50-74a423e0d96a', NULL),
('1a1eea35-181b-4ca1-b275-789239a2d6c6', 'syntax_podcast_show_00661', '8e119f0b-509f-476d-a345-88efb7c7cb4e', NULL),
('1a7ff3ae-fe6d-467d-b1c7-d3126fd5ac21', 'syntax_podcast_show_00310', 'a248f3e6-f6af-4a23-91a6-78b46186a78e', NULL),
('1e18d2ce-8d0d-4c52-a3a9-f2b8c9183d04', 'syntax_podcast_show_00604', '6022b551-db63-46d3-bef2-8b259d6c143f', NULL),
('1e854779-9bea-48a6-bc95-bb361fffd2d0', 'syntax_podcast_show_00274', '6a182a69-4623-42f7-afc9-d2f8e958ba87', NULL),
('1f418fb2-d6a2-4e61-9d9a-cf70decb2df3', 'syntax_podcast_show_00472', '219b22d1-460f-40ce-b33a-eb3138fc672c', NULL),
('1fbaaf57-b10b-430d-ac11-92745a9ae73d', 'syntax_podcast_show_00568', 'f429e4ad-c57e-41c5-bec9-6d2cbda32185', NULL),
('1fe9c3b5-c3fa-47e6-bf59-4f6215c4ab5e', 'syntax_podcast_show_00460', '1caeb787-4955-4574-80a6-96e6c0961903', NULL),
('21710d59-fe34-4545-8501-261f175fcfc2', 'syntax_podcast_show_00532', '8b54e975-a2e9-483f-af27-3e39e0eccf7c', NULL),
('23cdad01-cf62-4f88-a5a7-4c147270b14d', 'syntax_podcast_show_00550', '663038fa-4ce4-49a4-9dec-9366c7d24777', NULL),
('26f61478-037a-4465-a73b-fb92701ea75a', 'syntax_podcast_show_00589', 'b7557b7f-4149-4f4d-a04b-a044edbba790', NULL),
('278398ba-0481-432c-a92f-c1d4cc08f94c', 'syntax_podcast_show_00463', '775d9f6c-4667-4580-94ff-1e6b1e224be0', NULL),
('2872f5a1-3913-4fef-b7bf-1654f776071c', 'syntax_podcast_show_00586', '45786191-aeb9-4893-9686-d62ce35a147c', NULL),
('2cad9e01-979a-4e12-965d-81eceff6a51e', 'syntax_podcast_show_00628', '9203b224-45a5-4450-ae4b-cfba7fc7877e', NULL),
('2fa1ebc7-22a6-48be-85a2-c3be367f1c99', 'syntax_podcast_show_00529', '2d41a747-5825-4efd-a9e6-f65b4fdbf1f7', NULL),
('304b1b20-5289-4f30-96e0-bdaf9a2f3c58', 'syntax_podcast_show_00655', 'b762f167-5fb3-4014-a15b-22366bbed6f9', NULL),
('320de112-fd21-4849-8ac1-9ea7bbbeb964', 'syntax_podcast_show_00592', '4ea1905b-b1e6-492a-9b71-3a19d9db9472', NULL),
('34a679cd-cddc-44a1-ae60-9c3e8e1e1127', 'syntax_podcast_show_00574', '79d92bbd-e53d-4b83-87f3-d5106105a390', NULL),
('36a75e61-c8a2-43e1-831b-9c5e99b0f706', 'syntax_podcast_show_00176', 'be433cf8-8380-4bb5-b205-149b7754c62c', NULL),
('3a07b5df-ff1a-4b6a-b358-0c61adffbb3e', 'syntax_podcast_show_00412', 'e5baa84e-7550-45c3-9e10-72a1b2bf3c37', NULL),
('3dded444-ca2f-4017-89b0-3f4c4a883389', 'syntax_podcast_show_00206', '419d9a6a-234a-4b01-945e-ebd4a19a1124', NULL),
('430ee1f6-727f-47cb-bdb2-65c213316fc8', 'syntax_podcast_show_00493', 'b9334d13-6154-4032-9c58-7e22a512f82e', NULL),
('47241dcc-88b2-4f18-9394-9c88fd6ccfde', 'syntax_podcast_show_00676', 'ea9fc336-36f5-4df5-b596-f1ffa82381ad', NULL),
('49bdfb38-d427-4768-8733-0cfc6965105c', 'syntax_podcast_show_00658', 'd7cdad8d-4407-4d8b-aaac-c54a01987bb5', NULL),
('4ac92b98-23e2-4427-ad17-f7b0348ed91d', 'syntax_podcast_show_00430', 'b2f163e4-39ce-4844-9f00-5a5c5adb5a14', NULL),
('4b1e5a4b-8927-4944-921c-c806436423c5', 'syntax_podcast_show_00562', 'fe1763f2-2c8b-463f-83a5-28a7c105d739', NULL),
('53c18ce1-d2fa-49a4-8356-fa6f0baf501f', 'syntax_podcast_show_00643', '8a99f927-3ee6-495b-aa32-0214520460ad', NULL),
('543c8786-7449-4fc9-ab4e-5bb51a4c8343', 'syntax_podcast_show_00160', '3bfcb059-2cb9-40a2-a77a-a89971d8948b', NULL),
('57da99b1-e0c7-4e52-be3c-d94346452fd5', 'syntax_podcast_show_00434', 'b58c4e02-25a9-4180-85a6-454fe74a1c0e', NULL),
('598e0ba6-e9f2-4255-b9d5-57912293c3a0', 'syntax_podcast_show_00685', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41', NULL),
('59c0a0b7-1a00-4c7a-8144-356f89c5ab92', 'syntax_podcast_show_00679', '94981948-8a1b-4e2b-9228-b1fc4f02e451', NULL),
('5b2db6bb-9938-4c5d-b60b-d79b099c1d66', 'syntax_podcast_show_00640', '73e558d6-0980-4879-9463-7d4270682635', NULL),
('5d36d477-699d-4cfa-ac46-b76452f71857', 'syntax_podcast_show_00634', 'e261d4b7-0213-43fe-b262-e9eb10ba0222', NULL),
('60542984-136b-446d-a205-eef09d15322d', 'syntax_podcast_show_00646', '0ec997f0-2c90-4fae-9647-6d174db9b9ce', NULL),
('610f7ec3-e840-448e-bc46-21d8be2df1ec', 'syntax_podcast_show_00484', 'a06f6195-7c01-4cd3-9058-4c0888d956bb', NULL),
('68ffd699-bde0-4000-b2ee-6e548bb2104d', 'syntax_podcast_show_00682', '71f74245-7d69-483a-b838-0619ea9cbecd', NULL),
('6d3679cf-09d9-4980-bcba-4f39313e7cbf', 'syntax_podcast_show_00538', '51bc398d-093f-4989-9f79-ecf6e4444fe4', NULL),
('6dad8448-440c-49f6-a3fe-4e09dfc7311a', 'syntax_podcast_show_00457', '445b630c-be84-4644-8a7c-d0aa476db4d8', NULL),
('6e405c2f-5f99-46b7-bf62-5d432e1dbda6', 'syntax_podcast_show_00144', 'f9d174aa-93d8-4a31-87d8-db7c7f569c00', NULL),
('6fb9af85-df52-4fe5-976e-23b5f3b29c52', 'syntax_podcast_show_00673', 'a73c9c96-9a26-49ab-80c4-cabcc9b4c3ac', NULL),
('71239fe7-712c-4604-a59a-abc7672c1700', 'syntax_podcast_show_00212', 'add00e02-61ee-4310-baac-47da1856266d', NULL),
('784e6fbd-2b4a-4104-a84a-13292da5a1fa', 'syntax_podcast_show_00416', '373e2985-fec9-4461-adef-14ccd4ca7a76', NULL),
('795c7909-34e6-4462-8d8c-96ee0090345a', 'syntax_podcast_show_00631', '270f7adf-ffb5-423f-b179-9d93eb59fbc9', NULL),
('7ab4c76f-115b-4d93-8c14-1a6a05b11551', 'syntax_podcast_show_00496', 'f70c4fb1-1f1f-4e7e-9130-860a21c0309f', NULL),
('7ed71d65-e7b4-4732-a344-7d87760a8bd3', 'syntax_podcast_show_00637', 'e4730765-169b-4d69-8a96-85a8a20309e8', NULL),
('7f14651e-4d13-4e6f-9d6a-67714d25fc41', 'syntax_podcast_show_00098', 'd072f986-0509-4e9e-9f6a-480859427ee2', NULL),
('8398974e-9801-4c09-8d7a-d601a7bb21f6', 'syntax_podcast_show_00607', '636ec37b-1389-4870-8747-e03a5be01b7f', NULL),
('866fde76-7e6d-4f58-8b49-e911236baa0a', 'syntax_podcast_show_00667', '5c1b28d2-40a4-4a26-ba91-e721420a2140', NULL),
('8787c0d7-bafd-48e0-be3d-a1e9e0ada401', 'syntax_podcast_show_00688', '613fc4c4-bebf-4295-9f7f-3ea4b24ff4f9', NULL),
('879cb942-3470-4ccf-8096-f1102c764151', 'syntax_podcast_show_00700', 'c90c8d76-ab38-44a1-873b-f2ac81d82415', NULL),
('8883bb28-6541-4cea-9b02-9836d2a15d1f', 'syntax_podcast_show_00374', '73c15d42-e19f-4064-99c3-9726a906e9fb', NULL),
('8c265a74-5c02-40f3-b58c-0f82bd557346', 'syntax_podcast_show_00330', '0115f161-4547-4665-97a1-cd34dc4d94c2', NULL),
('8cd27d27-c25a-48c9-b673-ffa66c761237', 'syntax_podcast_show_00652', '90b70626-9cad-447c-a00f-36e3df4f59fe', NULL),
('8e70ceee-d8e1-41c1-8643-de8b2ebf7909', 'syntax_podcast_show_00475', '8dcd396d-652b-4edd-956d-d723174ec4cd', NULL),
('8f3b5e35-4aa0-4aba-bfbb-aeedf2fd4a3a', 'syntax_podcast_show_00246', '71f15836-4f2e-496a-b37a-aaa1bb074007', NULL),
('91dce89d-f019-43c5-a5d3-2208c10936b3', 'syntax_podcast_show_00691', 'f958e9fa-de3a-45f0-9ef5-7ed54072cf7d', NULL),
('936be50e-c5c3-46e6-bf14-36b05f02accb', 'syntax_podcast_show_00142', '4ea1905b-b1e6-492a-9b71-3a19d9db9472', NULL),
('94c9af16-ee18-458f-83b9-c5af3d138c83', 'syntax_podcast_show_00404', '1225d40d-ba6d-4e98-9ad2-8abaaeae2a73', NULL),
('9a771c6d-e5f2-46e1-b4eb-fe06dd88d215', 'syntax_podcast_show_00705', 'fed86238-d2a2-402c-a37d-d559fa407aa0', NULL),
('9cf9f83a-f12e-486f-8a57-d9e9e08082a0', 'syntax_podcast_show_00502', 'e45055e2-6436-48d7-ae97-815ab7d0fe8e', NULL),
('9ea2a752-b25c-4f2d-b1b7-fc233bc86dd4', 'syntax_podcast_show_00670', '8b54e975-a2e9-483f-af27-3e39e0eccf7c', NULL),
('9f793aa5-e2fa-45c1-b509-c35b33ef3cff', 'syntax_podcast_show_00150', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41', NULL),
('a067eb2b-0f7c-4fea-b727-d51d2ff9f91b', 'syntax_podcast_show_00270', 'c545c6d4-e023-4a1a-9d38-744a39c49bcb', NULL),
('a0e779af-40af-4418-b2a1-652ff55f83e7', 'syntax_podcast_show_00362', '2b1e1464-c80a-4485-bf6b-fac507cc8f1d', NULL),
('a2103518-f1ff-4dbf-adbb-dab9cf7d43a3', 'syntax_podcast_show_00487', '6fd870b1-a174-4d59-9c82-c5f99aa3b2bf', NULL),
('a2e74e4a-f78a-4b15-94ac-0209f2ae0a5c', 'syntax_podcast_show_00184', 'c48aa268-dcd4-48b1-8bef-8c8b3b4f5969', NULL),
('a50a7078-fe76-4f14-b55b-53fa677a4bb5', 'syntax_podcast_show_00559', '6b6958a3-c137-4018-9763-748928cef6e3', NULL),
('ad7bcd7d-ce75-448a-ade0-30c002b10569', 'syntax_podcast_show_00595', '2e4a2d14-41fb-43d7-a32e-2caae253c6a2', NULL),
('b10d7436-fcc9-4f4e-bcbb-c5a4de6e72ce', 'syntax_podcast_show_00298', '44a43cbb-c371-4078-bd23-0bab3c620252', NULL),
('b18097c8-7aa2-4d3d-83c3-29112e5c4e6f', 'syntax_podcast_show_00374', 'b6fa1079-3c0d-4d81-ad8c-91d481f17be5', NULL),
('b2d932ee-aa03-44a5-bb02-b2818b1ac12e', 'syntax_podcast_show_00256', '811ef008-261a-4998-8155-e94b71545504', NULL),
('b31d1388-b143-49d4-8e2f-cdffbe37a0f6', 'syntax_podcast_show_00600', '68918036-daec-413e-8111-1580ab99e5f1', NULL),
('b8bdf85a-6bdd-4438-837d-796d6b8e0303', 'syntax_podcast_show_00469', '2498daa6-828d-4177-8d1f-3f6f219169f3', NULL),
('bad21fb0-49b3-4232-8801-c70f5275a152', 'syntax_podcast_show_00514', 'f0c7d7fd-9e3e-421e-b72c-3758e123c532', NULL),
('bc480c5f-f8b6-4882-b4ed-2b66035c5459', 'syntax_podcast_show_00601', 'fa9658a1-0261-4877-8e0b-e2e6d04b88a1', NULL),
('bf1171ed-94e4-4813-9542-1e0109e55148', 'syntax_podcast_show_00154', 'dbc5ec85-6310-4eb6-8580-1aa1348ee09b', NULL),
('c081e436-e57f-4c09-9792-816ff2e1f7b2', 'syntax_podcast_show_00577', '2d4a809a-afca-4a7e-a050-0eb62ff8f9a5', NULL),
('c1209471-623b-4b00-b523-2b2c049a110b', 'syntax_podcast_show_00613', '3129d04f-359c-424f-86ee-bc8847293a3e', NULL),
('c27cb77f-559d-43f4-87b3-9c5a4ec97822', 'syntax_podcast_show_00505', '9b0a900b-6b5a-4539-bbde-d8cdccd62c84', NULL),
('c2fdc3d2-cbc0-461b-b1df-65425d067b36', 'syntax_podcast_show_00416', '76b31178-64fb-4580-bcd0-4a29d14aa200', NULL),
('c3169203-f8f6-417d-9e20-8fd5f681037d', 'syntax_podcast_show_00511', 'e436fd86-4653-4548-9c32-0e99c4a9bc22', NULL),
('c4fc9e5d-5948-4f39-bead-9d43186713d2', 'syntax_podcast_show_00598', 'e59e1a8d-9772-4a50-bf4f-6899d8ab37c8', NULL),
('c50f1a6b-e243-4d0a-907f-61d935f42071', 'syntax_podcast_show_00526', 'c050735b-0fab-4fd5-a65e-8000c4e6cb8c', NULL),
('c5e0696b-8796-467a-bcce-9bc4271e6638', 'syntax_podcast_show_00565', '49203747-a989-42a6-80f8-d9f010cbbbd1', NULL),
('c65a48b8-5456-48dd-83f5-a99675caabe7', 'syntax_podcast_show_00691', 'd1cb4ef4-a466-441e-9c39-621fc9be7ef1', NULL),
('caf65805-50a1-448e-8e84-043b5b0db643', 'syntax_podcast_show_00580', 'add00e02-61ee-4310-baac-47da1856266d', NULL),
('cca2f36d-b506-4de8-a659-50d98f2c4433', 'syntax_podcast_show_00508', '4533bbe8-ae0a-4257-995c-9ad14f43ccc5', NULL),
('cdc5b499-07b2-46fc-8991-9ff1af9d7558', 'syntax_podcast_show_00544', '8739900b-9fe3-405a-8e67-1999e996f642', NULL),
('cecb78bb-f9b0-451e-a933-51559a8cfa97', 'syntax_podcast_show_00236', '8b54e975-a2e9-483f-af27-3e39e0eccf7c', NULL),
('d078c826-9c94-425a-9742-223493684cc9', 'syntax_podcast_show_00190', '3250bc02-a42d-45c2-b611-c46708c52b7a', NULL),
('d22e1674-75fe-4183-b606-ee2b4518d024', 'syntax_podcast_show_00556', 'ff2c430d-7884-4e43-901a-65b05dfbf6b0', NULL),
('d467822c-0f4a-4ea8-974a-4c8f426ce5c6', 'syntax_podcast_show_00499', '7aba04f1-36c2-4f03-989a-646e0334e898', NULL),
('d770fe29-12fc-44ed-8847-3595b42e141f', 'syntax_podcast_show_00571', '995f373e-b121-4a35-b979-456b7dcd3d02', NULL),
('d92f2b59-f98d-462b-99f5-f45c9910ceaf', 'syntax_podcast_show_00302', '3b0251d2-e109-4795-b21a-ca615354b811', NULL),
('df6c8c17-a4cd-41f5-a888-ea1b0c92bc9e', 'syntax_podcast_show_00664', 'add00e02-61ee-4310-baac-47da1856266d', NULL),
('df871865-6ff0-489e-8ef8-dc5117492676', 'syntax_podcast_show_00466', 'dce53b10-0839-41a9-a130-8742701cb79f', NULL),
('e300e3de-85e0-4b84-a7b0-b375a6305cec', 'syntax_podcast_show_00583', '19a3f83b-de3d-4bd3-8329-6f9c8aacc31a', NULL),
('e448c609-ae33-4c83-81e6-be543cdf6dc9', 'syntax_podcast_show_00490', 'bb0bf9c1-df2c-40c2-b4f6-f2cbc0ad37be', NULL),
('e6fc4c67-c0b6-490a-9250-0649bf88c537', 'syntax_podcast_show_00164', '00c03566-061b-4d1c-a056-7ce6f01ab080', NULL),
('e86f9a0f-87c7-4000-aa0f-37e66cf646c3', 'syntax_podcast_show_00478', '7968c23b-b917-4fd1-afd0-0a9d6e6e4ead', NULL),
('ec1f9477-b2be-46f4-812b-21f88f5d35de', 'syntax_podcast_show_00607', '26e07c05-bb55-43cf-b641-3a0bf56eaf68', NULL),
('ec88b3eb-03d4-46db-8de1-d7a4664941cc', 'syntax_podcast_show_00622', 'b76e1be6-7af0-4d61-8fd6-d6bbcfd8d47f', NULL),
('ef3e89c7-4f75-49dc-98ca-fae3acfffbea', 'syntax_podcast_show_00481', '6a17ec3b-1570-42e4-8ecd-fe3a00fd1b35', NULL),
('f0c37e8e-9e4b-4c92-a120-7b431c02f40f', 'syntax_podcast_show_00565', '68dc2089-38c4-430f-ae53-cea2fdc5ab36', NULL),
('f304fcfd-af23-4141-bbf9-79f2aa3ec507', 'syntax_podcast_show_00622', '132d74f9-4bec-478b-8ed9-9b1a33cedd66', NULL),
('f32799dd-bd9c-480f-b66e-ea350d94040e', 'syntax_podcast_show_00697', 'd0ed1922-2127-4b09-9238-658fd45270b9', NULL),
('f89d9cd6-94f4-47d6-b4dd-c95fde401419', 'syntax_podcast_show_00520', '48be657c-9db4-4208-afe3-8d18387f8343', NULL),
('f8a728f6-a513-42d8-80b2-e2dcefde887c', 'syntax_podcast_show_00547', 'ca591e61-93fd-42d3-bf73-3a611cb8fdff', NULL),
('fa5661ee-1201-4125-869d-b055fcaa34cb', 'syntax_podcast_show_00264', '36f48799-cf06-436b-894a-0049ee57ac9b', NULL),
('fd1c2110-eb7a-419c-969a-9a0bab00af79', 'syntax_podcast_show_00649', 'bfd1744e-9996-4e4c-802b-125503149ac8', NULL),
('fd29d35d-6394-4d9b-a9ce-851b1a215362', 'syntax_podcast_show_00553', 'd30e0c20-cb8b-402e-acb7-90b3477391e5', NULL);

INSERT INTO `SocialLink` (`id`, `link`, `guest_id`) VALUES
('01426827-429d-4906-9d2f-a2aa68d1fc7c', 'https://www.linkedin.com/in/ritakozlov/', 'f958e9fa-de3a-45f0-9ef5-7ed54072cf7d'),
('01b7fa00-9886-4c89-bada-1ba964f824d8', 'https://infra.social/@eduardoboucas', '219b22d1-460f-40ce-b33a-eb3138fc672c'),
('0dd8fae2-4345-4f4a-bee9-0845a84b3b32', 'https://www.youtube.com/channel/UC8ENHE5xdFSwx71u3fDH5Xw', '4533bbe8-ae0a-4257-995c-9ad14f43ccc5'),
('0e8ba20a-3b2d-4868-87f3-5f6146039577', 'https://www.youtube.com/@ryansolid', '2d4a809a-afca-4a7e-a050-0eb62ff8f9a5'),
('175b5049-86c1-449f-b443-a0282a3b1401', 'https://www.instagram.com/travisneilson/', '4ea1905b-b1e6-492a-9b71-3a19d9db9472'),
('1c681050-a70a-4360-b116-405078743d74', 'https://www.youtube.com/@brad_frost', '71f74245-7d69-483a-b838-0619ea9cbecd'),
('1d9172ff-252f-49bb-95fc-cfd1c83c3112', 'https://www.linkedin.com/in/eastdavid/', 'ea9fc336-36f5-4df5-b596-f1ffa82381ad'),
('22bcf3b8-5632-44ef-b9cd-f65dff4489e9', 'https://mastodon.social/@davatron5000', 'b6fa1079-3c0d-4d81-ad8c-91d481f17be5'),
('22cbb35c-55de-4b6d-bbb3-39ba93ff02e4', 'https://codepen.io/bradfrost/', '71f74245-7d69-483a-b838-0619ea9cbecd'),
('23335daf-8097-4472-b9bf-7eb58f955a5b', 'https://www.linkedin.com/in/andreymishchenko', '48beb7d1-5408-4d62-8cc1-99c357670a42'),
('2566388d-9120-4b86-b7f7-4fe789dcd825', 'https://www.twitch.tv/jlengstorf', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41'),
('26540d07-e63f-494c-9d84-4b6c8e079164', 'https://codepen.io/sdras/', '6b6958a3-c137-4018-9763-748928cef6e3'),
('2852886b-9759-4391-9419-f14d39a797ff', 'https://dev.to/ryansolid', '2d4a809a-afca-4a7e-a050-0eb62ff8f9a5'),
('28704198-649e-458f-bc40-b74d4a2def13', 'https://codepen.io/HipsterBrown/', '9203b224-45a5-4450-ae4b-cfba7fc7877e'),
('2a4f17c2-4671-4b9b-a117-1b2a24f613e3', 'https://www.tiktok.com/@bdougieyo', '9d81aee0-7ae1-4b96-92b0-b52dc5e9cc24'),
('2d2f60d8-648d-4bdc-9999-8da488abdaa7', 'https://www.youtube.com/c/JonnyBurger', '663038fa-4ce4-49a4-9dec-9366c7d24777'),
('310cb90a-8150-4637-94bd-31a0219df2a6', 'https://www.linkedin.com/in/arminronacher/?originalSubdomain=at', 'e261d4b7-0213-43fe-b262-e9eb10ba0222'),
('32d11db5-c298-490d-b83e-447dc38db592', 'http://bentlegen.bsky.social/', 'b58c4e02-25a9-4180-85a6-454fe74a1c0e'),
('3520050c-78ea-485c-9304-64ebb263b2f9', 'https://www.linkedin.com/in/johanssonalexander/', 'c050735b-0fab-4fd5-a65e-8000c4e6cb8c'),
('38769db7-b3dd-418f-a7f1-f7740faa66bc', 'https://www.youtube.com/whitep4nth3r', 'd0ed1922-2127-4b09-9238-658fd45270b9'),
('3bdd69a9-be8a-4744-9a03-7802abaa1123', 'https://www.linkedin.com/in/stuart-bloxham-a36197121/', '5c1b28d2-40a4-4a26-ba91-e721420a2140'),
('3c472987-d470-45b6-ac2e-970366e5d731', 'https://youtube.com/c/paulinenarvas', '76b31178-64fb-4580-bcd0-4a29d14aa200'),
('3e1c5d2c-0b72-41db-ac33-d5424299fc71', 'https://medium.com/@filipenevola', 'c545c6d4-e023-4a1a-9d38-744a39c49bcb'),
('43115999-d9de-4d2d-84cd-844da7e9ef6b', 'https://www.linkedin.com/in/timmcnamaranz/', '995f373e-b121-4a35-b979-456b7dcd3d02'),
('44e09729-4fca-40c5-b3b1-4706c8492981', 'https://www.youtube.com/travisneilson/', '4ea1905b-b1e6-492a-9b71-3a19d9db9472'),
('471c7e6b-02d3-4c1a-9969-2e8fa38e0048', 'https://www.linkedin.com/in/brendanirvinebroque/', 'd1cb4ef4-a466-441e-9c39-621fc9be7ef1'),
('537fa95a-ae5c-41ba-a5e5-dbb112c2fee9', 'https://twitch.tv/jlengstorf', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41'),
('56cc7ffe-1609-4cca-9eed-ca3febe5d364', 'https://www.instagram.com/jonnyburger/', '663038fa-4ce4-49a4-9dec-9366c7d24777'),
('5788853d-074f-4935-bdf9-19f5f13bc2b1', 'https://www.twitch.tv/bdougieyo', '9d81aee0-7ae1-4b96-92b0-b52dc5e9cc24'),
('583d9561-dbc2-4003-9223-dc584d003dc1', 'https://uk.linkedin.com/in/adamcowley', '6fd870b1-a174-4d59-9c82-c5f99aa3b2bf'),
('58943112-af23-4978-bb20-0f4ceff3f7d7', 'https://youtube.com/@learnwithjason', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41'),
('5a8cc9f2-0b74-44fd-ac5c-e3276778c2da', 'https://front-end.social/@mia', '2b1e1464-c80a-4485-bf6b-fac507cc8f1d'),
('5b5cf807-784b-4d29-9742-b524cf752e66', 'https://hachyderm.io/@sarah_edo', '6b6958a3-c137-4018-9763-748928cef6e3'),
('61c78ad9-f11a-4e4a-ae10-9ba6a4a97a59', 'https://fosstodon.org/@justinfagnani', '2e4a2d14-41fb-43d7-a32e-2caae253c6a2'),
('6b7dd7f7-be7e-4d27-9c3a-b68cd7e94141', 'https://mastodon.nz/@timClicks', '995f373e-b121-4a35-b979-456b7dcd3d02'),
('6b94e67a-2a99-4eb7-b318-25039d24bb91', 'https://codepen.io/chriscoyier', '73c15d42-e19f-4064-99c3-9726a906e9fb'),
('6bb9fbb2-78cf-4a88-8b07-0c21c2914921', 'https://mastodon.social/@Kilian', 'ff2c430d-7884-4e43-901a-65b05dfbf6b0'),
('6fc33a56-0234-4259-883a-c989cb651c4c', 'https://www.twitch.tv/whitep4nth3r', 'd0ed1922-2127-4b09-9238-658fd45270b9'),
('72da7125-fa58-4339-b5a8-5dcdbb0dedec', 'https://www.youtube.com/c/timClicks', '995f373e-b121-4a35-b979-456b7dcd3d02'),
('7408cac4-202d-4f41-811a-561bebbb15bd', 'https://hachyderm.io/@bentlegen', 'b58c4e02-25a9-4180-85a6-454fe74a1c0e'),
('7998653d-0ce4-406a-94bf-7f0d85590216', 'https://toot.cafe/@hipsterbrown', '9203b224-45a5-4450-ae4b-cfba7fc7877e'),
('7ab1948b-0ec8-4e15-af88-d4ae44bb8e01', 'https://www.linkedin.com/in/joshwardle/', 'b2f163e4-39ce-4844-9f00-5a5c5adb5a14'),
('7dc11dfa-9b9c-4dcd-8b91-732123818fdc', 'https://www.instagram.com/fabiankaegy/', 'e59e1a8d-9772-4a50-bf4f-6899d8ab37c8'),
('87061796-212f-40ed-98d9-a000e94a4401', 'https://hachyderm.io/@jlengstorf', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41'),
('88220f39-714f-4f45-9d88-d888e85265a1', 'https://www.linkedin.com/in/ssewell', '19a3f83b-de3d-4bd3-8329-6f9c8aacc31a'),
('8e189a31-1e40-478d-a1a7-7ae95a7694d6', 'https://www.linkedin.com/in/adamargyle', '6a182a69-4623-42f7-afc9-d2f8e958ba87'),
('933a88a2-9c84-4799-bb1e-8ebda2a63f5c', 'https://www.twitch.tv/teej_dv', '30cea231-c01f-4648-ba50-74a423e0d96a'),
('95f9dfc8-570b-4fd6-bc9e-71090beccf0c', 'https://codepen.io/miriamsuzanne/', '2b1e1464-c80a-4485-bf6b-fac507cc8f1d'),
('99bde4d9-4553-40b5-b502-222659b5c6bf', 'https://medium.com/@katherine.mello8', 'fe1763f2-2c8b-463f-83a5-28a7c105d739'),
('a08ca25e-ecaa-4ca2-9f77-e90934c0859f', 'https://www.linkedin.com/in/katherinemello', 'fe1763f2-2c8b-463f-83a5-28a7c105d739'),
('a246b520-e647-48b0-97b4-6dfcd992c428', 'https://www.linkedin.com/in/bradt', '3250bc02-a42d-45c2-b611-c46708c52b7a'),
('a2c14dd3-1fe2-49c9-b3ef-8f3951e2ba93', 'https://www.linkedin.com/in/anth-rogan-59955429/', 'e5baa84e-7550-45c3-9e10-72a1b2bf3c37'),
('a4662e03-405f-438c-9aa8-c09c3099946a', 'https://www.instagram.com/jaredpalmer/', '1caeb787-4955-4574-80a6-96e6c0961903'),
('a49147b8-d210-4c2f-8d76-a4fcfbeb939d', 'https://front-end.social/@argyleink', '6a182a69-4623-42f7-afc9-d2f8e958ba87'),
('ab55507e-6c11-409c-b29d-8726040f492c', 'https://www.linkedin.com/in/heatherpayneintoronto', '71f15836-4f2e-496a-b37a-aaa1bb074007'),
('adb1a791-d03c-412d-a49f-c27f353e790d', 'https://front-end.social/@chriscoyier', '73c15d42-e19f-4064-99c3-9726a906e9fb'),
('b14cad76-f932-4ccd-9a70-ec2cc737e174', 'https://bsky.app/profile/nerdy.dev', '6a182a69-4623-42f7-afc9-d2f8e958ba87'),
('b2767135-e7d2-42f5-8c1b-59ec528b7a9b', 'https://www.threads.net/@zeeg', '68918036-daec-413e-8111-1580ab99e5f1'),
('b2ae0ab6-f6e5-40b9-a080-8b5d5a8e0e17', 'https://www.linkedin.com/in/jonny-burger-4115109b/', '663038fa-4ce4-49a4-9dec-9366c7d24777'),
('b376637d-39ac-46c0-859b-c919998a04f2', 'https://www.youtube.com/c/ConnorFinlayson', '2498daa6-828d-4177-8d1f-3f6f219169f3'),
('b522c432-14b6-4e3e-a752-2d049528a569', 'https://linkedin.com/in/pnarvas', '76b31178-64fb-4580-bcd0-4a29d14aa200'),
('b67720c6-9869-4c00-8398-79edf2257872', 'https://www.linkedin.com/in/ianramzy', '811ef008-261a-4998-8155-e94b71545504'),
('b6839dce-25fc-407b-b440-6798b13f7b84', 'https://www.linkedin.com/in/tsulkowski/', '1225d40d-ba6d-4e98-9ad2-8abaaeae2a73'),
('b7a47f27-1316-4fe6-8cff-cebfabf849e1', 'https://www.linkedin.com/company/termageddon/', '636ec37b-1389-4870-8747-e03a5be01b7f'),
('b85ecfd3-20d8-4997-ab97-7818ebb4b7d3', 'https://www.instagram.com/syedbalkhi/', 'bb0bf9c1-df2c-40c2-b4f6-f2cbc0ad37be'),
('b9301c80-5c80-4ada-bc32-23806dbcdc63', 'https://www.linkedin.com/in/hurshagrawal/', 'f0c7d7fd-9e3e-421e-b72c-3758e123c532'),
('b95074f0-e467-495a-9747-e8a17ad7be70', 'https://www.linkedin.com/in/drew-conley-a7865a29/', 'be433cf8-8380-4bb5-b205-149b7754c62c'),
('bc40863f-bc1a-4cae-a34f-46659c744816', 'https://front-end.social/@bramus', 'f0a8feb0-1099-4558-9082-1e4370d4f5ba'),
('bc8677c8-adc5-4801-a40b-d1557ac1e037', 'https://www.youtube.com/channel/UCML02pamUSxtbwAcrUdVmXg', '6a17ec3b-1570-42e4-8ecd-fe3a00fd1b35'),
('c01cf785-7483-4e46-8552-e0a892f0dbbf', 'https://youtube.com/@learnwithjason https://discord.gg/lwj', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41'),
('c2819442-c4e2-4a8e-bffb-6bad4dce088a', 'https://mastodon.social/@brad_frost', '71f74245-7d69-483a-b838-0619ea9cbecd'),
('ca753a0e-5156-4ae6-82f0-45b38a1a72cf', 'https://www.linkedin.com/in/jlengstorf/', 'a74bf07a-6368-4c17-aa4a-9f60bd915a41'),
('cab0452e-5d7b-4592-8577-0a0ed85c4058', 'https://www.youtube.com/@aidenbai', 'd7cdad8d-4407-4d8b-aaac-c54a01987bb5'),
('cc9df415-17cc-47f9-9bd7-63bf670ad3c2', 'https://www.linkedin.com/in/taylordesseyn/', 'a73c9c96-9a26-49ab-80c4-cabcc9b4c3ac'),
('ce3ab379-0253-48e3-9da6-3140a721e5c0', 'https://bsky.app/profile/cra.mr', '68918036-daec-413e-8111-1580ab99e5f1'),
('d95618b5-f8ff-4b6a-9b45-75b62147f6be', 'https://www.instagram.com/colbyfayock/', 'e4730765-169b-4d69-8a96-85a8a20309e8'),
('da4bd801-675e-4887-94ba-f7dcf2b073df', 'https://www.youtube.com/c/TjDeVries', '30cea231-c01f-4648-ba50-74a423e0d96a'),
('da5e4ccd-c43c-4efb-92de-538acb220a96', 'https://www.youtube.com/swyxTV', '7968c23b-b917-4fd1-afd0-0a9d6e6e4ead'),
('dc85f092-ba7b-44ed-b079-75ccc0a6d951', 'https://www.instagram.com/termageddon/', '636ec37b-1389-4870-8747-e03a5be01b7f'),
('dcef0f53-c69e-4fe8-bf3b-81c307d97e9b', 'https://www.instagram.com/learning.differently/', '8b54e975-a2e9-483f-af27-3e39e0eccf7c'),
('e036f285-a5d4-450d-8f8b-94799f1f9a0a', 'https://linkedin.com/in/davidkpiano', '419d9a6a-234a-4b01-945e-ebd4a19a1124'),
('e1a6d0b9-579d-4bdf-ae3b-58bdc4cb5eff', 'https://wdrl.info/', 'dce53b10-0839-41a9-a130-8742701cb79f'),
('e4ac154d-7204-4afe-ab9b-c113a0566f38', 'https://www.youtube.com/@BrandonRobertsDev', 'e45055e2-6436-48d7-ae97-815ab7d0fe8e'),
('e5b25a95-79fc-4036-8219-008d39e984c1', 'https://www.linkedin.com/in/benvinegar/', 'b58c4e02-25a9-4180-85a6-454fe74a1c0e'),
('e5f21c95-d965-409a-8828-c6099a544a57', 'https://www.youtube.com/channel/UCNqJ-P5d9RUCUsQ-grhlUHw', 'a73c9c96-9a26-49ab-80c4-cabcc9b4c3ac'),
('e700f9fd-c4a0-42ac-8e60-d06b65ff2093', 'https://www.youtube.com/@marktechson/', 'abd451b9-cb29-4405-9545-7b8f80edddbb'),
('e8023ab0-549a-457f-a662-1f779856d884', 'https://www.twitch.tv/colbyfayock', 'e4730765-169b-4d69-8a96-85a8a20309e8'),
('e8508bc9-21a2-4817-89f2-7165c742e7bb', 'https://www.linkedin.com/in/courtney-tolinski-5616b819', '8b54e975-a2e9-483f-af27-3e39e0eccf7c'),
('f022176d-467d-4ded-acf7-829d1511726b', 'https://www.youtube.com/c/bdougie', '9d81aee0-7ae1-4b96-92b0-b52dc5e9cc24'),
('f4995e04-bf6f-4e2a-b3df-622b016ea199', 'https://www.linkedin.com/in/jaredlpalmer/', '1caeb787-4955-4574-80a6-96e6c0961903'),
('f6272aed-884f-469e-8ac5-0aea2ed9f9a0', 'https://speakerdeck.com/eduardoboucas', '219b22d1-460f-40ce-b33a-eb3138fc672c'),
('f9720f37-f398-42c3-9613-3703d7e8e87a', 'https://www.linkedin.com/in/bradfrost/', '71f74245-7d69-483a-b838-0619ea9cbecd'),
('f9df90e3-8ad5-4c31-b0a9-3e96190dc643', 'https://www.twitch.tv/ThePrimeagen', '4533bbe8-ae0a-4257-995c-9ad14f43ccc5'),
('fc82a0dc-af06-453b-950f-233a150e5d69', 'https://www.linkedin.com/in/etienne-lemay-6b8b0638/', 'c48aa268-dcd4-48b1-8bef-8c8b3b4f5969');

INSERT INTO `Topic` (`id`, `name`, `showNote`) VALUES
(2, 'APIs', 2),
(3, 'Documentation', 2),
(4, 'JavaScript', 2),
(5, 'accessibility', 3),
(6, 'headings', 3),
(7, 'SEO', 3),
(8, 'developer hiring', 4),
(9, 'job search', 4),
(10, 'interview tips', 4),
(11, 'LinkedIn', 4),
(12, 'remote work', 4),
(13, 'CSS', 5),
(14, 'Web Development', 5),
(15, 'Podcast', 5),
(16, '#tori', 6),
(17, '#electron', 6),
(18, '#desktopdev', 6),
(19, '#webdev', 6),
(20, 'Anxiety', 7),
(21, 'Mental Health', 7),
(22, 'Stress Management', 7),
(23, 'Svelte', 8),
(24, 'JavaScript', 8),
(25, 'Web Development', 8),
(26, 'Tonal', 9),
(27, 'Network Requests', 9),
(28, 'Proxying', 9),
(29, 'Reverse Engineering', 9),
(30, 'Web Development', 10),
(31, 'Career Change', 10),
(32, 'Interviews', 10),
(33, 'hackweek', 11),
(34, 'automation', 11),
(35, 'markdown', 11),
(36, 'productivity', 11),
(37, 'css', 12),
(38, 'frontend', 12),
(39, 'webdev', 12),
(40, 'astro', 13),
(41, 'webdev', 13),
(42, 'javascript', 13),
(43, 'typescript', 14),
(44, 'performance', 14),
(45, 'cms', 14),
(46, 'javascript', 15),
(47, 'closures', 15),
(48, 'scope', 15),
(49, 'JavaScript', 16),
(50, 'npm', 16),
(51, 'ESM', 16),
(52, 'packaging', 16),
(53, 'webdev', 17),
(54, 'javascript', 17),
(55, 'ogimage', 17),
(56, 'Fitness', 18),
(57, 'Home Improvement', 18),
(58, 'Pop Culture', 18),
(59, 'React', 19),
(60, 'Performance', 19),
(61, 'Virtual DOM', 19),
(62, 'Rust', 20),
(63, 'JavaScript', 20),
(64, 'Web Development', 20),
(65, 'javascript', 21),
(66, 'webdev', 21),
(67, 'fetch', 21),
(68, 'Web Development', 22),
(69, 'JavaScript', 22),
(70, 'React', 22),
(71, 'JavaScript', 23),
(72, 'APIs', 23),
(73, 'WebDev', 23),
(74, 'javascript', 24),
(75, 'webdev', 24),
(76, 'decorators', 24),
(77, 'AWS', 25),
(78, 'Deployment', 25),
(79, 'Docker', 25),
(80, 'TypeScript', 26),
(81, 'Posture', 26),
(82, 'Cloud Services', 26),
(83, 'facebook', 27),
(84, 'css', 27),
(85, 'react', 27),
(86, 'Remix', 28),
(87, 'React', 28),
(88, 'WebDevelopment', 28),
(89, '#serverless', 29),
(90, '#nodejs', 29),
(91, '#javascript', 29),
(92, 'javascript', 30),
(93, 'rust', 30),
(94, 'nodejs', 30),
(95, '#email', 31),
(96, '#history', 31),
(97, '#nodejs', 31),
(98, 'javascript', 32),
(99, 'webdev', 32),
(100, 'polyfill', 32),
(101, 'transpile', 32),
(102, 'monkey patch', 32),
(103, 'UX', 33),
(104, 'Accessibility', 33),
(105, 'Forms', 33),
(106, 'webassembly', 34),
(107, 'edge-computing', 34),
(108, 'polyfills', 34),
(109, 'css', 35),
(110, 'react', 35),
(111, 'javascript', 35),
(112, 'domains', 35),
(113, 'GitHub', 36),
(114, 'Bugs', 36),
(115, 'Help', 36),
(116, 'Support', 36),
(117, 'serverless', 37),
(118, 'coding', 37),
(119, 'education', 37),
(120, 'JavaScript', 38),
(121, 'Web Development', 38),
(122, 'Interview Questions', 38),
(123, 'AI', 39),
(124, 'Developer Tools', 39),
(125, 'Productivity', 39),
(126, 'cloudinary', 40),
(127, 'ai', 40),
(128, 'media', 40),
(129, 'images', 40),
(130, 'video', 40),
(131, 'frameworks', 40),
(132, 'youtube', 40),
(133, 'productivity', 40),
(134, 'headless', 41),
(135, 'accessibility', 41),
(136, 'components', 41),
(137, 'CSS', 42),
(138, 'Frontend', 42),
(139, 'Web Development', 42),
(140, 'Python', 43),
(141, 'Queues', 43),
(142, 'Scale', 43),
(143, 'Sentry', 43),
(144, 'ORM', 44),
(145, 'Database', 44),
(146, 'Prisma', 44),
(147, 'Drizzle', 44),
(148, 'domain-registrars', 45),
(149, 'web-dev', 45),
(150, 'domains', 45),
(151, 'GraphQL', 46),
(152, 'Jamstack', 46),
(153, 'React', 46),
(154, 'Conferences', 47),
(155, 'APIs', 47),
(156, 'Troubleshooting', 47),
(157, 'javascript', 48),
(158, 'nodejs', 48),
(159, 'webdev', 48),
(160, 'javascript', 49),
(161, 'iot', 49),
(162, 'hardware', 49),
(163, 'electronics', 50),
(164, 'IoT', 50),
(165, 'DIY', 50),
(166, 'GitHub', 51),
(167, 'Project Management', 51),
(168, 'Automation', 51),
(169, 'AI', 52),
(170, 'ChatGPT', 52),
(171, 'OpenAI', 52),
(172, 'Future of Work', 52),
(173, 'JSDoc', 53),
(174, 'TypeScript', 53),
(175, 'Svelte', 53),
(176, 'CSS', 54),
(177, 'HTML', 54),
(178, 'Accessibility', 54),
(179, 'AI', 55),
(180, 'GitHub', 55),
(181, 'Developers', 55),
(182, 'Engineering', 55),
(183, 'Innovation', 55),
(184, 'Svelte', 56),
(185, 'WebDev', 56),
(186, 'Podcasting', 56),
(187, 'javascript', 57),
(188, 'node', 57),
(189, 'executables', 57),
(190, 'css', 58),
(191, 'web development', 58),
(192, 'front end', 58),
(193, 'React', 59),
(194, 'Astro', 59),
(195, 'Svelte', 59),
(196, 'CSS', 59),
(197, 'Tooling', 59),
(198, 'Career', 59),
(199, '#nodejs', 60),
(200, '#webdev', 60),
(201, '#javascript', 60),
(202, 'css', 61),
(203, 'webdev', 61),
(204, 'frontend', 61),
(205, '#hosting', 62),
(206, '#javascript', 62),
(207, '#webdev', 62),
(208, 'javascript', 63),
(209, 'webdev', 63),
(210, 'reactivity', 63),
(211, 'state management', 63),
(212, 'Video', 64),
(213, 'Streaming', 64),
(214, 'Web Development', 64),
(215, '#UI', 65),
(216, '#Accessibility', 65),
(217, '#Standards', 65),
(218, 'bluesky', 66),
(219, 'socialmedia', 66),
(220, 'twitter', 66),
(221, 'terminal', 67),
(222, 'productivity', 67),
(223, 'ai', 67),
(224, 'svelte', 68),
(225, 'webdev', 68),
(226, 'planetscale', 68),
(227, 'prisma', 68),
(228, 'performance', 68),
(229, '#RPC', 69),
(230, '#JavaScript', 69),
(231, '#React', 69),
(232, 'legal', 70),
(233, 'online business', 70),
(234, 'privacy', 70),
(235, 'GDPR', 70),
(236, 'audio', 71),
(237, 'gear', 71),
(238, 'podcasting', 71),
(239, 'CSS', 72),
(240, 'Design', 72),
(241, 'Accessibility', 72),
(242, 'JavaScript', 73),
(243, 'ESLint', 73),
(244, 'Open Source', 73),
(245, '#Sass', 74),
(246, '#CSS', 74),
(247, '#webdev', 74),
(248, 'html', 75),
(249, 'css', 75),
(250, 'javascript', 75),
(251, 'react-native', 76),
(252, 'web-dev', 76),
(253, 'tomagui', 76),
(254, 'webdev', 77),
(255, 'JavaScript', 77),
(256, 'podcasts', 77),
(257, '#oauth', 78),
(258, '#authentication', 78),
(259, '#webdev', 78),
(260, '#WordPress', 79),
(261, '#WebDevelopment', 79),
(262, '#CMS', 79),
(263, 'JavaScript', 80),
(264, 'CSS', 80),
(265, 'TypeScript', 80),
(266, 'Deno', 80),
(267, 'ChatGPT', 80),
(268, 'javascript', 81),
(269, 'webdev', 81),
(270, 'tooling', 81),
(271, 'web-components', 82),
(272, 'lit', 82),
(273, 'interoperability', 82),
(274, 'freelancing', 83),
(275, 'testing', 83),
(276, 'frameworks', 83),
(277, 'functions', 83),
(278, 'learning', 83),
(279, 'CSS', 83),
(280, 'ai', 84),
(281, 'ux', 84),
(282, 'design', 84),
(283, 'career', 85),
(284, 'productivity', 85),
(285, 'webdev', 85),
(286, 'design', 85),
(287, 'HTTPS', 86),
(288, 'Tunneling', 86),
(289, 'Cloudflare', 86),
(290, 'ngrok', 86),
(291, 'Next.js', 87),
(292, 'Serverless', 87),
(293, 'AWS', 87),
(294, 'Web Development', 88),
(295, 'Podcasts', 88),
(296, 'Brainstorming', 88),
(297, 'web-streams', 89),
(298, 'performance', 89),
(299, 'data', 89),
(300, 'digital nomad', 90),
(301, 'remote work', 90),
(302, 'travel', 90),
(303, 'Performance', 91),
(304, 'Debugging', 91),
(305, 'Optimization', 91),
(306, 'Node.js', 92),
(307, 'Web Development', 92),
(308, 'JavaScript', 92),
(309, 'Visual Programming', 93),
(310, 'No Code', 93),
(311, 'React', 93),
(312, '#ai', 94),
(313, '#development', 94),
(314, '#javascript', 94),
(315, 'coding conventions', 95),
(316, 'automation', 95),
(317, 'linting', 95),
(318, 'astro', 96),
(319, 'webdev', 96),
(320, 'frameworks', 96),
(321, 'Warp', 97),
(322, 'Terminals', 97),
(323, 'Mac', 97),
(324, '#logging', 98),
(325, '#debugging', 98),
(326, '#visibility', 98),
(327, 'solidjs', 99),
(328, 'reactivity', 99),
(329, 'frameworks', 99),
(330, '#OpenAI', 100),
(331, '#ChatGPT', 100),
(332, '#JavaScript', 100),
(333, 'javascript', 101),
(334, 'webdev', 101),
(335, 'smarthome', 101),
(336, '#configfiles', 102),
(337, '#webdev', 102),
(338, '#javascript', 102),
(339, 'Qwik', 103),
(340, 'React', 103),
(341, 'Performance', 103),
(342, 'JavaScript', 104),
(343, 'TypeScript', 104),
(344, 'Web Development', 104),
(345, '#pagespeed', 105),
(346, '#perfmatters', 105),
(347, '#webperf', 105),
(348, 'Rust', 106),
(349, 'Performance', 106),
(350, 'Beginner', 106),
(351, '#ecmascript', 107),
(352, '#esm', 107),
(353, '#nodejs', 107),
(354, 'css', 108),
(355, 'webdev', 108),
(356, 'frontend', 108),
(357, 'Buffalo', 109),
(358, 'Canada', 109),
(359, 'Developers', 109),
(360, 'State of JS', 110),
(361, 'JavaScript', 110),
(362, 'Web Development', 110),
(363, 'CSS', 111),
(364, 'Container Queries', 111),
(365, 'Web Development', 111),
(366, 'podcast', 112),
(367, 'cms', 112),
(368, 'sanity', 112),
(369, 'graphql', 112),
(370, 'HTML', 113),
(371, 'Business', 113),
(372, 'JavaScript', 113),
(373, 'services', 114),
(374, 'saas', 114),
(375, 'api', 114),
(376, 'Bootcamps', 115),
(377, 'Data Visualization', 115),
(378, 'Sustainability', 115),
(379, 'Web Development', 116),
(380, 'Podcasting', 116),
(381, 'Fitness', 116),
(382, 'Goals', 116),
(383, 'TypeScript', 117),
(384, 'JavaScript', 117),
(385, 'Web Development', 117),
(386, 'Management', 118),
(387, 'Writing', 118),
(388, 'Books', 118),
(389, 'Motivation', 118),
(390, 'JavaScript', 119),
(391, 'Web Development', 119),
(392, '2023', 119),
(393, 'Predictions', 119),
(394, 'Trends', 119),
(395, 'typescript', 120),
(396, 'webdev', 120),
(397, 'javascript', 120),
(398, 'Accessibility', 121),
(399, 'Developer Tools', 121),
(400, 'Design', 121),
(401, 'web development', 122),
(402, 'technology predictions', 122),
(403, 'javascript', 122),
(404, 'javascript', 123),
(405, 'electron', 123),
(406, 'tori', 123),
(407, 'Career Change', 124),
(408, 'Web Development', 124),
(409, 'Remote Work', 124),
(410, 'Cloud Computing', 125),
(411, 'IDEs', 125),
(412, 'Web Development', 125),
(413, 'Artificial Intelligence', 125),
(414, 'productivity', 126),
(415, 'javascript', 126),
(416, 'career', 126),
(417, 'serverless', 127),
(418, 'databases', 127),
(419, 'jamstack', 127),
(420, 'react', 128),
(421, 'video', 128),
(422, 'programming', 128),
(423, 'webdev', 129),
(424, 'javascript', 129),
(425, 'webalmanac', 129),
(426, '#rendering', 130),
(427, '#webdev', 130),
(428, '#SPA', 130),
(429, 'Internal Tools', 131),
(430, 'UX', 131),
(431, 'GraphQL', 131),
(432, 'React', 131),
(433, 'Code Style', 132),
(434, 'JavaScript', 132),
(435, 'Launch Prep', 132),
(436, 'ai', 133),
(437, 'github', 133),
(438, 'webdev', 133),
(439, 'JavaScript', 134),
(440, 'Performance', 134),
(441, 'Testing', 134),
(442, 'Twitter', 135),
(443, 'WebSockets', 135),
(444, 'Google', 135),
(445, 'Serverless', 136),
(446, 'AWS Lambda', 136),
(447, 'Limitations', 136),
(448, 'Reality TV', 137),
(449, 'Lifestyle', 137),
(450, 'Holidays', 137),
(451, 'responsive design', 138),
(452, 'web development', 138),
(453, 'website design', 138),
(454, 'react', 139),
(455, 'javascript', 139),
(456, 'webdev', 139),
(457, 'javascript', 140),
(458, 'nodejs', 140),
(459, 'deno', 140),
(460, 'typescript', 140),
(461, '#CSS', 141),
(462, '#webdev', 141),
(463, '#animation', 141),
(464, '#responsive', 141),
(465, 'Video Content', 142),
(466, 'Web Development', 142),
(467, 'Programming', 142),
(468, 'Web Development', 143),
(469, 'JavaScript', 143),
(470, 'Podcasts', 143),
(471, 'Web Development', 144),
(472, 'Podcasts', 144),
(473, 'Tips & Tricks', 144),
(474, 'Zod', 145),
(475, 'TypeScript', 145),
(476, 'Validation', 145),
(477, 'ADHD', 146),
(478, 'Productivity', 146),
(479, 'Psychology', 146),
(480, 'webdev', 147),
(481, 'debugging', 147),
(482, 'horror', 147),
(483, 'JavaScript', 148),
(484, 'WebDev', 148),
(485, 'Buzzwords', 148),
(486, 'GraphQL', 149),
(487, 'Streaming', 149),
(488, 'React', 149),
(489, 'Web Development', 150),
(490, 'Programming', 150),
(491, 'Software Testing', 150),
(492, 'webdev', 151),
(493, 'javascript', 151),
(494, 'frameworks', 151),
(495, 'tRPC', 152),
(496, 'GraphQL', 152),
(497, 'TypeScript', 152),
(498, 'Web Stats', 153),
(499, 'Mobile', 153),
(500, 'Cleaning', 153),
(501, 'javascript', 154);

INSERT INTO `Topic` (`id`, `name`, `showNote`) VALUES
(502, 'bookmarks', 154),
(503, 'automation', 154),
(504, 'neovim', 155),
(505, 'vim', 155),
(506, 'lua', 155),
(507, 'javascript', 156),
(508, 'webdev', 156),
(509, 'api', 156),
(510, 'javascript', 157),
(511, 'webdev', 157),
(512, 'programming', 157),
(513, 'prisma', 158),
(514, 'graphql', 158),
(515, 'orm', 158),
(516, 'css', 159),
(517, 'project management', 159),
(518, 'sports', 159),
(519, 'productivity', 160),
(520, 'programming', 160),
(521, 'web development', 160),
(522, 'Open Source', 161),
(523, 'Community', 161),
(524, 'GraphQL', 161),
(525, 'Live Streaming', 161),
(526, 'Office', 162),
(527, 'DIY', 162),
(528, 'Soundproofing', 162),
(529, '#html', 163),
(530, '#webdev', 163),
(531, '#webcomponents', 163),
(532, 'Browsers', 164),
(533, 'Design', 164),
(534, 'UX', 164),
(535, '#productivity', 165),
(536, '#timemanagement', 165),
(537, '#organization', 165),
(538, 'ai', 166),
(539, 'github', 166),
(540, 'coding', 166),
(541, 'productivity', 167),
(542, 'raycast', 167),
(543, 'macOS', 167),
(544, 'native', 167),
(545, 'react', 167),
(546, 'API', 168),
(547, 'Development', 168),
(548, 'Programming', 168),
(549, 'postcss', 169),
(550, 'css', 169),
(551, 'webdev', 169),
(552, 'twitch', 170),
(553, 'livecoding', 170),
(554, 'vim', 170),
(555, 'javascript', 171),
(556, 'vscode', 171),
(557, 'typescript', 171),
(558, '#deno', 172),
(559, '#nodejs', 172),
(560, '#javascript', 172),
(561, 'React', 173),
(562, 'SVG', 173),
(563, 'Canvas', 173),
(564, 'Design', 174),
(565, 'Education', 174),
(566, 'Podcasting', 174),
(567, 'css', 175),
(568, 'layout', 175),
(569, 'margins', 175),
(570, 'appright', 176),
(571, 'firebase', 176),
(572, 'backend', 176),
(573, 'self-hosted', 176),
(574, 'websockets', 176),
(575, 'serverless', 176),
(576, 'Schools', 177),
(577, 'Threads', 177),
(578, 'Performance', 177),
(579, 'podcasting', 178),
(580, 'web development', 178),
(581, 'milestone', 178),
(582, 'svelte', 179),
(583, 'webdev', 179),
(584, 'javascript', 179),
(585, 'jobs', 180),
(586, 'career', 180),
(587, 'webdev', 180),
(588, 'CSS', 181),
(589, 'web development', 181),
(590, 'front-end', 181),
(591, 'ecommerce', 182),
(592, 'react', 182),
(593, 'headless', 182),
(594, 'APIs', 183),
(595, 'PDFs', 183),
(596, 'Payments', 183),
(597, 'Frameworks', 183),
(598, 'browsers', 184),
(599, 'mobile', 184),
(600, 'webkit', 184),
(601, 'chromium', 184),
(602, 'react', 185),
(603, 'nextjs', 185),
(604, 'performance', 185),
(605, 'javascript', 186),
(606, 'webdev', 186),
(607, 'apis', 186),
(608, 'JavaScript', 187),
(609, 'web development', 187),
(610, 'programming', 187),
(611, 'side projects', 187),
(612, 'WordPress', 188),
(613, 'Blogging', 188),
(614, 'SaaS', 188),
(615, 'node', 189),
(616, 'npm', 189),
(617, 'compatibility', 189),
(618, 'errors', 189),
(619, 'JavaScript', 190),
(620, 'Web Development', 190),
(621, 'Performance', 190),
(622, 'Databases', 191),
(623, 'Graph Databases', 191),
(624, 'Neo4j', 191),
(625, 'JavaScript', 192),
(626, 'CSS', 192),
(627, 'TypeScript', 192),
(628, 'JavaScript', 193),
(629, 'HTML', 193),
(630, 'CSS', 193),
(631, 'Interview Prep', 193),
(632, 'serverless', 194),
(633, 'aws', 194),
(634, 'developers', 194),
(635, 'npm', 195),
(636, 'networking', 195),
(637, 'home automation', 195),
(638, 'testing', 195),
(639, 'JavaScript', 196),
(640, 'Animation', 196),
(641, 'Math', 196),
(642, 'Talon', 197),
(643, 'Voice Coding', 197),
(644, 'RSI', 197),
(645, 'speaking', 198),
(646, 'conferences', 198),
(647, 'connections', 198),
(648, 'CSS', 199),
(649, 'Accessibility', 199),
(650, 'Design', 199),
(651, 'developer-experience', 200),
(652, 'react', 200),
(653, 'svelte', 200),
(654, 'devrel', 200),
(655, 'Email', 201),
(656, 'Communication', 201),
(657, 'Writing', 201),
(658, 'Productivity', 201),
(659, 'webapi', 202),
(660, 'animations', 202),
(661, 'transitions', 202),
(662, 'Extensions', 203),
(663, 'API', 203),
(664, 'Growth', 203),
(665, 'home automation', 204),
(666, 'smart home', 204),
(667, 'protocols', 204),
(668, 'customization', 204),
(669, 'css', 205),
(670, 'mobile', 205),
(671, 'viewport', 205),
(672, 'serverless', 206),
(673, 'edge computing', 206),
(674, 'Deno', 206),
(675, 'Programming', 207),
(676, 'Web Development', 207),
(677, 'JavaScript', 207),
(678, 'CSS', 208),
(679, 'Web Development', 208),
(680, 'Front End', 208),
(681, 'NoCode', 209),
(682, 'WebDevelopment', 209),
(683, 'Webflow', 209),
(684, 'Airtable', 209),
(685, '#javascript', 210),
(686, '#webdev', 210),
(687, '#podcast', 210),
(688, 'security', 211),
(689, 'bots', 211),
(690, 'spam', 211),
(691, 'burnout', 212),
(692, 'gardening', 212),
(693, 'career change', 212),
(694, 'git', 213),
(695, 'version control', 213),
(696, 'vs code', 213),
(697, 'Caching', 214),
(698, 'Performance', 214),
(699, 'Headers', 214),
(700, 'javascript', 215),
(701, 'frameworks', 215),
(702, 'startups', 215),
(703, 'typescript', 216),
(704, 'tooling', 216),
(705, 'compilers', 216),
(706, 'Office Setup', 217),
(707, 'Home Office', 217),
(708, 'Productivity', 217),
(709, 'Turborepo', 218),
(710, 'Monorepos', 218),
(711, 'Podcasts', 218),
(712, 'Next.js', 219),
(713, 'Game Development', 219),
(714, 'Open Source', 219),
(715, 'interoperability', 220),
(716, 'javascript', 220),
(717, 'webdev', 220),
(718, 'JavaScript', 221),
(719, 'Monorepo', 221),
(720, 'Build Tools', 221),
(721, 'APIs', 222),
(722, 'JavaScript', 222),
(723, 'Web Development', 222),
(724, 'TypeScript', 223),
(725, 'JavaScript', 223),
(726, 'Web Development', 223),
(727, 'edge computing', 224),
(728, 'edge functions', 224),
(729, 'serverless', 224),
(730, '#javascript', 225),
(731, '#webdev', 225),
(732, '#axios', 225),
(733, '#fetch', 225),
(734, '#apicalls', 225),
(735, 'JavaScript', 226),
(736, 'Front End Development', 226),
(737, 'Web Development', 226),
(738, 'Coupons', 227),
(739, 'Ecommerce', 227),
(740, 'Payments', 227),
(741, '#teamwork', 228),
(742, '#impostersyndrome', 228),
(743, '#webdev', 228),
(744, '#javascript', 228),
(745, 'Svelte', 229),
(746, 'Three.js', 229),
(747, '3D', 229),
(748, 'electric-vehicles', 230),
(749, 'web-development', 230),
(750, 'react', 230),
(751, '#productivity', 231),
(752, '#goals', 231),
(753, '#consistency', 231),
(754, 'content creation', 232),
(755, 'productivity', 232),
(756, 'content strategy', 232),
(757, 'typescript', 233),
(758, 'javascript', 233),
(759, 'types', 233),
(760, '#webdev', 234),
(761, '#portfolios', 234),
(762, '#developers', 234),
(763, '#vitest', 235),
(764, '#testing', 235),
(765, '#javascript', 235),
(766, 'Web Development', 236),
(767, 'JavaScript', 236),
(768, 'Online Courses', 236),
(769, '#render', 237),
(770, '#cloudflare', 237),
(771, '#ssl', 237),
(772, 'auth', 238),
(773, 'api', 238),
(774, 'tooling', 238),
(775, 'tips', 238),
(776, 'ssr', 239),
(777, 'jamstack', 239),
(778, 'serverless', 239),
(779, 'JavaScript', 240),
(780, 'Web Development', 240),
(781, 'Programming', 240),
(782, '#stickers', 241),
(783, '#shippinglogistics', 241),
(784, '#production', 241),
(785, 'JavaScript', 242),
(786, 'Web Development', 242),
(787, 'State of JS', 242),
(788, 'javascript', 243),
(789, 'css', 243),
(790, 'webdev', 243),
(791, 'distributed-tracing', 244),
(792, 'debugging', 244),
(793, 'performance', 244),
(794, 'career', 244),
(795, 'open-source', 244),
(796, 'sentry', 244),
(797, 'javascript', 244),
(798, 'javascript', 245),
(799, 'nodejs', 245),
(800, 'webdev', 245),
(801, 'webpack', 246),
(802, 'html', 246),
(803, 'typescript', 246),
(804, '2fa', 246),
(805, 'frameworks', 246),
(806, 'Open Source', 247),
(807, 'JavaScript', 247),
(808, 'Web Development', 247),
(809, '#technology', 248),
(810, '#webdev', 248),
(811, '#JavaScript', 248),
(812, 'javascript', 249),
(813, 'servers', 249),
(814, 'serverless', 249),
(815, 'Design', 250),
(816, 'Development', 250),
(817, 'Portfolio', 250),
(818, 'Teamwork', 251),
(819, 'Web Development', 251),
(820, 'Communication', 251),
(821, 'monorepo', 252),
(822, 'javascript', 252),
(823, 'webdev', 252),
(824, 'javascript', 253),
(825, 'nodejs', 253),
(826, 'dependencies', 253),
(827, 'skills', 254),
(828, 'learning', 254),
(829, 'productivity', 254),
(830, 'CSS', 255),
(831, 'JavaScript', 255),
(832, 'Web Development', 255),
(833, 'Programming', 255),
(834, 'JavaScript', 256),
(835, 'TypeScript', 256),
(836, 'Collaboration', 256),
(837, 'Tooling', 256),
(838, 'remix', 257),
(839, 'react', 257),
(840, 'webdev', 257),
(841, 'JavaScript', 258),
(842, 'WebDev', 258),
(843, '2022', 258),
(844, 'JavaScript', 259),
(845, 'One-liners', 259),
(846, 'Snippets', 259),
(847, 'javascript', 260),
(848, 'webdev', 260),
(849, 'podcast', 260),
(850, 'javascript', 261),
(851, 'webdev', 261),
(852, 'QA', 261),
(853, 'coding', 262),
(854, 'web-development', 262),
(855, 'blockchain', 262),
(856, 'NFTs', 262),
(857, 'gatsby', 263),
(858, 'nextjs', 263),
(859, 'webdev', 263),
(860, 'webassembly', 264),
(861, 'adhd', 264),
(862, 'typescript', 264),
(863, 'graphql', 264),
(864, 'svelte', 265),
(865, 'react', 265),
(866, 'webdev', 265),
(867, 'IoT', 266),
(868, 'Automation', 266),
(869, 'Industry', 266),
(870, 'html', 267),
(871, 'seo', 267),
(872, 'webdev', 267),
(873, 'Web Development', 268),
(874, 'JavaScript', 268),
(875, 'History', 268),
(876, 'Copilot', 269),
(877, 'AI', 269),
(878, 'Development', 269),
(879, 'troubleshooting', 270),
(880, 'debugging', 270),
(881, 'errors', 270),
(882, 'apple', 271),
(883, 'macbook', 271),
(884, 'hardware', 271),
(885, 'tips', 272),
(886, 'webdev', 272),
(887, 'FAANG', 272),
(888, 'Nextjs', 273),
(889, 'React', 273),
(890, 'Performance', 273),
(891, 'StackBlitz', 274),
(892, 'WebContainers', 274),
(893, 'WebAssembly', 274),
(894, 'Node', 274),
(895, 'Browser', 274),
(896, 'astro', 275),
(897, 'framework', 275),
(898, 'javascript', 275),
(899, '#CSS', 276),
(900, '#webdev', 276),
(901, '#frontend', 276),
(902, 'npm', 277),
(903, 'pnpm', 277),
(904, 'monorepo', 277),
(905, 'git', 277),
(906, 'webdev', 278),
(907, 'horror', 278),
(908, 'halloween', 278),
(909, '#codingmistakes', 279),
(910, '#devfails', 279),
(911, '#softwaregonewrong', 279),
(912, 'Teaching', 280),
(913, 'GraphQL', 280),
(914, 'Security', 280),
(915, 'Performance', 280),
(916, '#javascript', 281),
(917, '#webdev', 281),
(918, '#programming', 281),
(919, 'podcasting', 282),
(920, 'webdev', 282),
(921, 'production', 282),
(922, 'css', 283),
(923, 'colors', 283),
(924, 'accessibility', 283),
(925, 'Careers', 284),
(926, 'JavaScript', 284),
(927, 'CMS', 284),
(928, 'php', 285),
(929, 'javascript', 285),
(930, 'webdev', 285),
(931, 'podcast', 286),
(932, 'game', 286),
(933, 'frontend', 286),
(934, 'Developer Tools', 287),
(935, 'Mac Apps', 287),
(936, 'Terminals', 287),
(937, 'Audio/Video', 287),
(938, 'react', 288),
(939, 'svelte', 288),
(940, 'javascript', 288),
(941, '#webhooks', 289),
(942, '#webdevelopment', 289),
(943, '#nodejs', 289),
(944, 'JavaScript', 290),
(945, 'ECMAScript', 290),
(946, 'ES2022', 290),
(947, '#starlink', 291),
(948, '#ruralinternet', 291),
(949, '#cottagelife', 291),
(950, 'Sass', 292),
(951, 'Web Development', 292),
(952, 'WordPress', 292),
(953, 'React', 292),
(954, 'JavaScript', 292),
(955, 'nextjs', 293),
(956, 'forms', 293),
(957, 'css', 293),
(958, 'typescript', 293),
(959, '#SvelteKit', 294),
(960, '#Serverless', 294),
(961, '#Prisma', 294),
(962, '#PlanetScale', 294),
(963, 'coding', 295),
(964, 'mistakes', 295),
(965, 'horror stories', 295),
(966, 'Database Failures', 296),
(967, 'Site Outages', 296),
(968, 'Data Exposure', 296),
(969, 'Programming Languages', 297),
(970, 'AI', 297),
(971, 'Python', 297),
(972, 'design systems', 298),
(973, 'components', 298),
(974, 'architecture', 298),
(975, 'ai', 299),
(976, 'tools', 299),
(977, 'services', 299),
(978, 'javascript', 300),
(979, 'libraries', 300),
(980, 'jquery', 300),
(981, 'express', 300),
(982, 'sass', 300),
(983, '#css', 301),
(984, '#webdev', 301),
(985, '#frontend', 301),
(986, 'productivity', 302),
(987, 'workflow', 302),
(988, 'office', 302),
(989, '#TypeScript', 303),
(990, 'StrictMode', 303),
(991, 'WebDev', 303),
(992, 'JavaScript', 304),
(993, 'Interview Questions', 304),
(994, 'Coding Challenges', 304),
(995, 'Freelancing', 305),
(996, 'Clients', 305),
(997, 'Communication', 305),
(998, 'Beginner', 306),
(999, 'Debugging', 306),
(1000, 'Advice', 306),
(1001, 'CSS', 307);

INSERT INTO `Topic` (`id`, `name`, `showNote`) VALUES
(1002, 'web development', 307),
(1003, 'frontend', 307),
(1004, 'React', 308),
(1005, 'Freelancing', 308),
(1006, 'Fonts', 308),
(1007, 'html', 309),
(1008, 'link-tag', 309),
(1009, 'webdev', 309),
(1010, 'beginners', 310),
(1011, 'webdev', 310),
(1012, 'html', 310),
(1013, 'css', 310),
(1014, 'TypeScript', 311),
(1015, 'Web Development', 311),
(1016, 'Programming', 311),
(1017, 'WordPress', 312),
(1018, 'Backend', 312),
(1019, 'CSS', 312),
(1020, 'Jobs', 312),
(1021, 'Podcasts', 312),
(1022, 'javascript', 313),
(1023, 'webdev', 313),
(1024, 'frameworks', 313),
(1025, 'Podcasts', 314),
(1026, 'JavaScript', 314),
(1027, 'Web Development', 314),
(1028, 'favicons', 315),
(1029, 'webdev', 315),
(1030, 'frontend', 315),
(1031, 'Svelte', 316),
(1032, 'Permissions', 316),
(1033, 'Rescript', 316),
(1034, 'CSS', 317),
(1035, 'linting', 317),
(1036, 'code quality', 317),
(1037, 'React', 318),
(1038, 'JavaScript', 318),
(1039, 'Web Development', 318),
(1040, 'JavaScript', 319),
(1041, 'Web Development', 319),
(1042, 'Tooling', 319),
(1043, 'Web Development', 320),
(1044, 'Portfolios', 320),
(1045, 'Design', 320),
(1046, 'javascript', 321),
(1047, 'performance', 321),
(1048, 'asynchronous', 321),
(1049, 'Dev Tools', 322),
(1050, 'HTML', 322),
(1051, 'CSS', 322),
(1052, 'Debugging', 322),
(1053, 'javascript', 323),
(1054, 'webdev', 323),
(1055, 'proposals', 323),
(1056, 'Q&A', 324),
(1057, 'Tips', 324),
(1058, 'Web Development', 324),
(1059, 'security', 325),
(1060, 'authentication', 325),
(1061, 'csrf', 325),
(1062, 'css', 326),
(1063, 'web development', 326),
(1064, 'front end development', 326),
(1065, 'svelte', 327),
(1066, 'frameworks', 327),
(1067, 'webdev', 327),
(1068, 'react', 328),
(1069, 'typescript', 328),
(1070, 'graphql', 328),
(1071, 'cms', 328),
(1072, '#vaccine', 329),
(1073, '#covid19', 329),
(1074, '#javascript', 329),
(1075, 'react', 330),
(1076, 'typescript', 330),
(1077, 'webdev', 330),
(1078, 'Business', 331),
(1079, 'Developers', 331),
(1080, 'Entrepreneurship', 331),
(1081, 'Naming', 332),
(1082, 'Editors', 332),
(1083, 'Themes', 332),
(1084, 'javascript', 333),
(1085, 'drag and drop', 333),
(1086, 'web api', 333),
(1087, 'html', 334),
(1088, 'webdev', 334),
(1089, 'accessibility', 334),
(1090, 'html', 335),
(1091, 'css', 335),
(1092, 'webdev', 335),
(1093, 'accessibility', 335),
(1094, 'freelancing', 336),
(1095, 'react', 336),
(1096, 'css', 336),
(1097, 'technical debt', 337),
(1098, 'development', 337),
(1099, 'programming', 337),
(1100, 'Web Development', 338),
(1101, 'Podcasting', 338),
(1102, 'Freelancing', 338),
(1103, 'astro', 339),
(1104, 'sveltekit', 339),
(1105, 'vitkit', 339),
(1106, 'remix', 339),
(1107, 'TypeScript', 340),
(1108, 'Fundamentals', 340),
(1109, 'Generics', 340),
(1110, 'git', 341),
(1111, 'rebase', 341),
(1112, 'workflow', 341),
(1113, 'productivity', 341),
(1114, '#ecommerce', 342),
(1115, '#fulfillment', 342),
(1116, '#automation', 342),
(1117, 'css', 343),
(1118, 'container queries', 343),
(1119, 'web development', 343),
(1120, 'Chrome', 344),
(1121, 'Firefox', 344),
(1122, 'DevTools', 344),
(1123, 'Debugging', 344),
(1124, 'CSS', 345),
(1125, 'webdev', 345),
(1126, 'frontend', 345),
(1127, 'APIs', 346),
(1128, 'Video', 346),
(1129, 'Development', 346),
(1130, 'vscode', 347),
(1131, 'extensions', 347),
(1132, 'productivity', 347),
(1133, 'webdev', 347),
(1134, 'Caddy', 348),
(1135, 'Web Servers', 348),
(1136, 'HTTPS', 348),
(1137, 'Go', 348),
(1138, '#GraphQL', 349),
(1139, '#databases', 349),
(1140, '#performance', 349),
(1141, 'Web Development', 350),
(1142, 'Careers', 350),
(1143, 'Portfolios', 350),
(1144, 'Critiques', 350),
(1145, 'graphql', 351),
(1146, 'tooling', 351),
(1147, 'codegeneration', 351),
(1148, 'Authentication', 352),
(1149, 'Security', 352),
(1150, 'Web Development', 352),
(1151, '#envvars', 353),
(1152, '#dotenv', 353),
(1153, '#environment', 353),
(1154, 'React', 354),
(1155, 'GraphQL', 354),
(1156, 'Cypress', 354),
(1157, 'JavaScript', 355),
(1158, 'Web Development', 355),
(1159, 'Careers', 355),
(1160, '#desksetup', 356),
(1161, '#developergear', 356),
(1162, '#codingworkspace', 356),
(1163, 'javascript', 357),
(1164, 'css', 357),
(1165, 'react', 357),
(1166, 'vue', 357),
(1167, 'node', 357),
(1168, 'soft-skills', 357),
(1169, 'react', 358),
(1170, 'data fetching', 358),
(1171, 'caching', 358),
(1172, 'apis', 358),
(1173, '#cypress', 359),
(1174, '#testing', 359),
(1175, '#automation', 359),
(1176, 'JavaScript', 360),
(1177, 'React', 360),
(1178, 'Web Development', 360),
(1179, 'TypeScript', 361),
(1180, 'Compilers', 361),
(1181, 'Bundlers', 361),
(1182, 'Online Presence', 362),
(1183, 'Web Development', 362),
(1184, 'Careers', 362),
(1185, 'javascript', 363),
(1186, 'webdev', 363),
(1187, 'accessibility', 363),
(1188, 'javascript', 364),
(1189, 'webdev', 364),
(1190, 'typescript', 364),
(1191, 'LevelUpTutorials', 365),
(1192, 'React', 365),
(1193, 'Node', 365),
(1194, '#Deno', 366),
(1195, '#Nodejs', 366),
(1196, '#JavaScript', 366),
(1197, 'AVIF', 367),
(1198, 'images', 367),
(1199, 'performance', 367),
(1200, 'career', 368),
(1201, 'imposter syndrome', 368),
(1202, 'UI', 368),
(1203, 'sustainability', 368),
(1204, 'CSS', 369),
(1205, 'typography', 369),
(1206, 'design', 369),
(1207, '#react', 370),
(1208, '#javascript', 370),
(1209, '#webdev', 370),
(1210, 'javascript', 371),
(1211, 'webdev', 371),
(1212, 'programming', 371),
(1213, 'predictions', 372),
(1214, '2021', 372),
(1215, 'trends', 372),
(1216, 'productivity', 373),
(1217, 'shortcuts', 373),
(1218, 'window management', 373),
(1219, '2020', 374),
(1220, 'Trends', 374),
(1221, 'Predictions', 374),
(1222, 'Recap', 374),
(1223, 'hosting', 375),
(1224, 'pricing', 375),
(1225, 'cloud', 375),
(1226, 'Apple', 376),
(1227, 'Web Development', 376),
(1228, 'Mac', 376),
(1229, 'Bots', 377),
(1230, 'PS5', 377),
(1231, 'Web Scraping', 377),
(1232, 'serverless', 378),
(1233, 'aws', 378),
(1234, 'lambda', 378),
(1235, 'begin', 378),
(1236, 'architect', 378),
(1237, 'typescript', 378),
(1238, 'node', 378),
(1239, 'deno', 378),
(1240, 'podcasting', 379),
(1241, 'live streaming', 379),
(1242, 'video production', 379),
(1243, 'gatsby', 380),
(1244, 'nextjs', 380),
(1245, 'react', 380),
(1246, '#react', 381),
(1247, '#hooks', 381),
(1248, '#javascript', 381),
(1249, 'gift guide', 382),
(1250, 'tech', 382),
(1251, 'clothing', 382),
(1252, 'conventionalcommits', 383),
(1253, 'git', 383),
(1254, 'versioning', 383),
(1255, 'WebRTC', 384),
(1256, 'Debugging', 384),
(1257, 'Frameworks', 384),
(1258, 'Security', 385),
(1259, 'Validation', 385),
(1260, 'Client', 385),
(1261, 'Server', 385),
(1262, 'ReactJS', 386),
(1263, 'Conference', 386),
(1264, 'Community', 386),
(1265, 'css', 387),
(1266, 'grid', 387),
(1267, 'layout', 387),
(1268, 'dark mode', 388),
(1269, 'theming', 388),
(1270, 'web development', 388),
(1271, 'Content Creation', 389),
(1272, 'Web Development', 389),
(1273, 'React', 389),
(1274, 'AI', 389),
(1275, 'cloudflare', 390),
(1276, 'serverless', 390),
(1277, 'edge computing', 390),
(1278, 'JavaScript', 391),
(1279, 'npm', 391),
(1280, 'Open Source', 391),
(1281, '#javascript', 392),
(1282, '#webdev', 392),
(1283, '#podcast', 392),
(1284, 'caching', 393),
(1285, 'performance', 393),
(1286, 'stale-while-revalidate', 393),
(1287, 'Web Development', 394),
(1288, 'JavaScript', 394),
(1289, 'Podcasting', 394),
(1290, 'website', 395),
(1291, 'development', 395),
(1292, 'tutorial', 395),
(1293, 'Angular', 396),
(1294, 'WebDev', 396),
(1295, 'JavaScript', 396),
(1296, 'CSS', 397),
(1297, 'Web Development', 397),
(1298, 'Frontend', 397),
(1299, 'javascript', 398),
(1300, 'webdev', 398),
(1301, 'programming', 398),
(1302, '#CSS', 399),
(1303, '#webdev', 399),
(1304, '#frontend', 399),
(1305, 'developer relations', 400),
(1306, 'content creation', 400),
(1307, 'blogging', 400),
(1308, 'public speaking', 400),
(1309, 'javascript', 401),
(1310, 'webdev', 401),
(1311, 'apis', 401),
(1312, 'payload', 402),
(1313, 'cms', 402),
(1314, 'typescript', 402),
(1315, 'nextjs', 402),
(1316, 'headless', 402),
(1317, '#accessibility', 403),
(1318, '#a11y', 403),
(1319, '#webdev', 403),
(1320, 'security', 404),
(1321, 'javascript', 404),
(1322, 'nodejs', 404),
(1323, 'Observer pattern', 405),
(1324, 'Design patterns', 405),
(1325, 'Game development', 405);

INSERT INTO `Transcript` (`id`, `show_number`) VALUES
('00b598d1-2a7d-4c1e-99a3-dbd541aa722f', 436),
('01e6449b-c47f-4865-8ce2-373f668a02ee', 556),
('02879bec-2090-468e-bb54-97255f022f10', 400),
('02f5a079-8ce5-43a2-9105-7d44b761e7df', 320),
('03ae064a-4775-475c-a030-62504cc1d0f9', 669),
('054db755-15b3-42e2-a2fe-aa1643bf3c16', 505),
('055e2ccc-4f25-4599-b2a4-5a9e4f49d18c', 664),
('06002512-3f33-41f4-8753-c7e862a81438', 325),
('061c8028-b23d-48ba-82aa-2b1253f6b1ce', 608),
('062e39c7-038b-4743-8df6-3ed57833d3d1', 545),
('07a5e3cb-4abe-48a8-bf0e-de3190942e06', 328),
('082ee913-a1e1-4e5e-aee0-c76af7be2dcc', 606),
('0a336aee-7197-49a3-bb9a-2418f644715f', 520),
('0b074320-a75b-438a-9e07-eb620156c995', 383),
('0b2b11ee-1386-4acd-a5ec-804ddf30fea3', 629),
('0b8b50e3-a247-4c3e-8275-67b13261939f', 375),
('0c4058b8-f4b2-42b7-8930-f70cd7557b41', 431),
('0d76a41b-9721-416c-ba2f-c3a4b012c16d', 514),
('0e659d7c-5c25-4c2c-b00c-d26733c58908', 437),
('0fd4d7d1-5e25-4396-b100-0046a9ea5d04', 634),
('0fe1727e-4456-4a10-8729-0f2fa7a10c72', 561),
('10bf5eb0-8658-4d3d-8ac5-9ccedc24f4f7', 445),
('11555151-48da-487a-af42-c41ebe21252a', 570),
('11a03f2f-e858-453b-b5d3-6ee67438bc85', 596),
('129af48b-6bda-40f0-801d-f1fc7273ace6', 466),
('1314e187-a316-4201-9d2e-0f60d6834505', 673),
('138c08f2-004c-4b8a-9ff1-d9ca8ef481f3', 619),
('14b2de7f-45bf-496e-9dbc-904e6f1afc7d', 700),
('15a2a9c7-aa1a-4bc8-9835-80ea457f1c81', 310),
('16a534fc-ae05-486b-9eea-b9e7a1a57419', 532),
('16a951b5-556c-48cc-a2b5-13faecc8e1b1', 434),
('17b7e69c-412c-40bc-a836-33ad3aa58f83', 425),
('189a4cdc-3eb5-492b-b598-b033cb54310d', 654),
('18a5beb7-6846-4113-b703-9b365813878d', 337),
('1961458b-398a-4cd9-aad4-d18e7a9fe447', 674),
('1a138d4f-2210-478c-933f-6388b60d0904', 409),
('1bacc5ba-8d03-49a1-94a8-2f823b98a65d', 476),
('1bae934d-156d-415a-a793-2606337da163', 511),
('1bbca910-4371-4d84-b4e0-c2aa92523aa6', 479),
('1bd14032-5257-4d17-a56e-378f3fe12baf', 513),
('1c2945a5-b00f-4b60-989b-eb01b898d517', 683),
('1cbd0fc3-c196-43fc-ae57-85f05bb2d742', 622),
('1e2acbbd-f1a1-4a4d-a524-94368dc8628c', 574),
('1ea3712c-3f32-476d-980a-28754e7a20e0', 428),
('1f519fda-3f58-4afd-b394-b3eabcc4406a', 391),
('20dfe67e-5041-4ef5-a38c-7f26c7215c12', 566),
('21c3dd2d-8803-4aac-8673-73efe539a72c', 349),
('22bf655c-9b83-47cb-a87a-2dce7bc05934', 587),
('22c4ecc5-50f6-4366-8cb0-18550511ba41', 579),
('231b65f7-fbe6-4972-a03e-7116948d015e', 616),
('26909777-40a2-4800-83c8-9cba05ac5d04', 427),
('274c7552-7228-442b-8b87-2f714f235d9a', 568),
('286dda05-689f-43be-bf6d-5fc26a0de5d6', 335),
('289599f3-528f-4fe0-bc1b-cc4ae13a61f1', 557),
('28dec84d-0eae-4253-9a7f-5852aeca6da0', 686),
('2a8729d0-444e-4c71-8ecb-d3f1813d1154', 443),
('2ab8b87b-03f4-45c0-9148-66c86071e20a', 381),
('2b0a785a-bae5-4a29-91a5-b695d82a6b44', 512),
('2bf536e1-1e46-4208-b0b8-4539b357fffe', 609),
('2cb7624a-e727-4d09-8921-3da5d1dbb598', 399),
('2d0e318e-ebec-4e35-a0a5-9e8030bf7269', 698),
('2dce1ea9-6cf0-4120-ad6c-55e0b11c43e7', 412),
('2e5df7af-952b-4ba1-835c-56cbc3ad674d', 553),
('2e8feeca-60ed-4a40-bbc3-a6482740d945', 481),
('2ee446a5-6004-4e42-b235-495d31bdb652', 453),
('303522b0-03a4-4319-9204-de75c407ce26', 464),
('30934cfc-44dc-4851-8bf8-657aa939a390', 567),
('31921ed7-d816-4056-ac36-2f15d08e65e0', 692),
('325794e6-67db-40e9-a8da-33a3aa8a7d7d', 407),
('330852d7-ca1f-433a-989a-a2c3dcdc1520', 456),
('3328b1a5-6e13-4b20-a3fd-6e33de6009ca', 661),
('33f65284-6cd3-48d6-91c7-b0d307d4efc0', 338),
('3514a497-1ce7-47cb-bf6e-744ffa69c9be', 465),
('3556dc7c-9794-4e3c-b13b-e1d32a32e00d', 455),
('35b71b30-ea9f-42c7-a8a5-c9ad40e3264a', 528),
('36c98ff4-d044-44be-98e4-b95b1be5df9c', 352),
('375ea6cb-f461-410d-869c-8f078c04902d', 627),
('376c0f2f-d600-4e0c-ae17-ac775237d18a', 429),
('37f1c7ca-8c6e-40a9-b8db-764ac3a39d5b', 539),
('39060964-0844-4aa3-a686-3cf725511e7a', 442),
('399ce5c1-21df-424f-939c-627171d1878c', 665),
('3a4092d3-b29f-4aa1-86ac-9d00c1cf140a', 529),
('3a4524e6-f3e8-43ee-8f90-0f8149bd343a', 305),
('3ae264fe-a5d6-4211-9a61-f4d06765908d', 365),
('3bccd4bf-56e9-4e3a-b2f6-b6a8b50ddafb', 494),
('3dc30da7-0081-4942-8e9f-c127728c5ab6', 448),
('3de24110-2801-4a4d-b30b-a25e8c07246f', 501),
('3eb15389-e7b9-4fb6-8bde-11810dd64350', 565),
('3ed0a2ba-0b59-4d4c-9d41-ca7d2df42b8e', 496),
('410b4bc1-89ae-434b-ad37-dc2116547ecc', 369),
('4163f8ff-3e1b-4d75-8ce7-ca65a41619f8', 508),
('42650d36-21bb-4de8-b6c7-cd06b691c4a0', 389),
('42d5d006-aaee-4b9a-bd47-121b77b8a3f7', 564),
('4517c4f0-a953-4048-9b3b-60ade7c8f2ad', 611),
('454712f4-caf1-442d-9b71-46a6420eb660', 460),
('456fea6e-7364-4466-80b2-58333395ff81', 368),
('45e26711-b6a8-4447-931b-0939eefdfc39', 696),
('46ad87c9-db62-416c-9fee-8300f61d59d8', 502),
('4744c78b-b0f5-4ed4-8e3c-40c68b66f2ca', 559),
('488c6cd1-132e-4970-b3d6-cd233d47163f', 569),
('48c598bd-b427-4bc3-95b2-bda73f1f1231', 540),
('49d917a6-1f8e-43e1-ae08-cbe78b5fba1e', 377),
('4a3d4434-258f-4682-a68d-6a41f4fba5b9', 329),
('4a692681-93a7-448a-aade-cc5ce2829795', 454),
('4b324422-bf36-4dc0-888f-456570bbbc4f', 441),
('4b5362fe-178c-4fac-98db-b8a9ffdee882', 687),
('4c06a429-70e7-4922-ad08-9557a0377151', 353),
('4cb49950-2052-4e6c-9222-31ad14e8b483', 493),
('4cbe5126-e6b7-4537-90e7-aef73a54936f', 638),
('4d0f6394-ee99-4cc6-93bd-f48d84c40a94', 422),
('4d95ca58-64f2-4141-9877-fa96cb4a82b1', 649),
('4dedaccb-0688-40e5-bc4b-b0391aa1c044', 385),
('4e40e682-319a-4077-8b8c-dc5ecb2efec9', 607),
('4f1bd167-ac77-436d-a763-4142507c923c', 690),
('4f2dcc30-e62f-4749-a6a6-44419498451a', 642),
('5175282a-5006-46b1-bba4-1314104479f9', 582),
('52de29a4-60d3-4680-9261-de20e439f44e', 384),
('534738d6-b667-44d8-8b77-4480345213c5', 614),
('54ca7fcb-ff16-4f13-b09a-96392b3d8b95', 386),
('54cd8924-0d83-4d34-9f45-d22280b8f2df', 452),
('54da3aa5-86d4-4a62-8f74-6aa5074e11a1', 316),
('550c3cd0-5d22-41b8-acf1-04c1e3ac422b', 541),
('56376797-c88c-4d6e-a703-408e5fefa299', 679),
('56bc5d21-be8a-4a39-82c2-2e914c73158a', 628),
('57072f57-415f-4e07-9a5d-e53a1178a426', 538),
('57081b74-6742-4186-8a60-928238735dd6', 555),
('575f2295-3ddf-4188-ba08-c0298dae8614', 560),
('593f99e2-9f22-4891-af0a-d83b325d4b35', 474),
('59e7caed-90b4-4173-8d8e-2e4535c3cdbd', 525),
('5a75ed84-faa2-4c8b-89db-d10f2002901e', 360),
('5c40925f-7564-43af-a792-43ae032e3335', 585),
('5d377e04-faaa-466a-8823-40d8b466af36', 624),
('5e97ce97-85fe-4655-aee0-45c80aa5f738', 595),
('5f05f7d4-4d8f-4a55-b68a-27cf34a4b0ed', 676),
('5f1bb324-076a-4cae-82cc-65e888c5c726', 462),
('5f32d94b-06b2-4ce1-be8b-0d9e32e7b31f', 397),
('604a9723-a9a9-45a0-846a-f283045851c3', 491),
('605da952-c960-4352-b90b-bd0d4014681a', 421),
('606214bc-289b-4367-8b3e-f7c1543d1506', 623),
('608f3b42-18bb-4c4b-8a26-2c75c3ba5def', 341),
('60bef94e-1a03-4cef-a07a-8cc248a16a36', 334),
('621d1ef9-5386-46a5-a580-43738a1702f7', 416),
('62d4c27c-da07-4a33-ac0e-d549369c1fc5', 363),
('630804bd-9dbb-4c49-8922-93b5f2d40533', 517),
('64614f06-b140-4172-bd6b-5b457b15f232', 668),
('651035b4-6682-4b23-a869-d63df1053fba', 632),
('651640b4-d6e8-4214-a831-a2b8f342ffa7', 488),
('660e45db-a0e3-4447-8b17-2460037f0ecb', 589),
('66128764-139f-42fb-b0a6-6e54be4d983b', 581),
('66829351-33da-42df-9d35-557d9c2ebb3e', 304),
('670c205f-0855-402f-b293-cbec713c2992', 618),
('67ded7b1-5e23-4162-b1c3-24459aeadbaf', 507),
('698b383d-3039-4d23-8b25-5927f266ddd7', 380),
('6a470d38-9ebd-44e1-bbdb-60009a85525a', 577),
('6a8e4af4-c29b-4136-bde5-3fbf519864d8', 395),
('6aa3e00a-165b-4b12-a836-e3fb98174f3e', 542),
('6aac78e5-1567-4054-87a7-82ed08f3459d', 495),
('6aad1192-d440-4d04-b298-58a7d11edcb7', 458),
('6b3e6f6a-71c5-4a73-979f-571ac8cf8203', 571),
('6c75f55a-b139-4841-82dd-96f613e43783', 586),
('6dad3deb-9297-4674-96a4-75d7d85a7aa0', 372),
('6eba36f5-504a-43d4-9362-a63a7bf7dd32', 537),
('6ee7dcad-ff5e-44ff-9df6-df08af846ef1', 480),
('6f4cd07b-11ac-489d-9831-39741fc20649', 526),
('6ff4468b-c9f9-4a70-8f90-c0caa6cba6c9', 406),
('70276524-769c-41cb-90b9-9c91ae03b4a7', 311),
('70bb5cda-dec1-4c51-970e-22005df8cff2', 418),
('73c52b84-7254-4e80-a23e-3c7d1dc4426d', 536),
('745cb1c5-a8e9-4fe9-b208-cd39f074e0a7', 530),
('75c3f2f0-f23f-45dd-8c14-52046d22e5ec', 633),
('75c47c7c-386f-4a82-bfba-979c8271446f', 393),
('76792007-f329-4633-aa8d-5590b41a74b2', 398),
('76a1d338-378c-49cc-a694-bf001a38edea', 599),
('76cfbe18-8ab7-4424-86da-f546e33eacab', 552),
('778d8801-7cb4-411d-8b3b-ceb3d832d911', 695),
('786281ed-4fc2-461f-ab2c-6321bad4da8a', 701),
('78f8e34f-eff6-4dfb-9dca-53788ce38c78', 554),
('791cbf3e-7bbc-48ea-9f71-1fc419abc76a', 340),
('796683ab-55a1-4298-b45b-d1bfba987b00', 523),
('79f01fc8-02d3-47e8-aa1b-5b36ac18449a', 324),
('7a7e6b6f-aed2-4b5a-b09c-e4a3959242ea', 647),
('7a7fec68-d542-4907-8049-d35a9e495df5', 601),
('7b90c326-ddb9-41aa-89ff-5230542f85d5', 576),
('7c5d2534-0693-47a9-87d8-3cd6e1d5d601', 339),
('7caf9014-4b82-42fd-9e1b-60e89ef6fac9', 675),
('7cf14715-990a-4a78-be17-2f84d4141a6c', 346),
('7d44fc4b-e1c9-4192-b6d8-0ce687c2eebd', 414),
('7d69d9df-706b-4e37-947f-232cf0e65c86', 379),
('7e2ee8e3-5cab-4828-9f1e-267801c2b4ce', 333),
('7e500ec2-5b7f-4f50-8b5a-7580cd68d567', 699),
('7e73f068-7853-410c-8559-23e653f3471c', 450),
('7f4e491e-68dc-4bc0-95f2-90ea7328ab85', 694),
('801ba3e7-32a5-4760-be74-1816a76eb981', 440),
('808e2a39-d7da-46f6-98e0-f75bfaefaf38', 645),
('80e6e104-087c-4b59-9419-d7fb29568ba4', 543),
('8330a19c-eefa-4e48-bd3d-b87a824e6f84', 302),
('83ef50a0-e019-42d7-9238-a814a2fdc251', 394),
('856679d5-7903-4ad9-8d50-f084c5176131', 301),
('8566c53b-1221-450d-bfe9-42d9e96441bc', 653),
('856b5b9a-9bd7-413d-8f38-efa018244aa7', 485),
('8597e4be-6db5-43b4-8051-73786d1d8df8', 662),
('8631e05f-29d7-4775-9fd5-45b2e39d3662', 594),
('86ba2e8a-f335-4cf2-8fcf-2dbc9ead2a0d', 309),
('8754ae19-c626-482a-8e0f-a7eed9b02345', 655),
('8940ca72-8f85-4737-bfec-d95d93fc83f4', 602),
('8944a666-816c-4bdc-bbd0-eacea0279c7d', 635),
('89a4275e-f094-471e-93d6-effe964bdecf', 550),
('89db003d-08fc-4770-9c21-a611891dbecb', 503),
('8aa5416c-374b-44b1-9f9b-bdd8306b1ef8', 689),
('8c2e86fa-a3dd-4229-bff1-23b49bc57284', 663),
('8d0681b5-9bb4-4c49-bc23-fab6ea10486c', 420),
('8dc85e4f-0047-42b6-9790-a29f2f27cb22', 351),
('90040321-4838-40e6-84f7-917e99b58398', 563),
('9031332e-60ea-4b50-ad95-690c4a00300b', 308),
('9078e852-6b42-478e-ab5d-f82e621d003b', 355),
('90b9eed5-1071-4a4d-b7d7-7ea752d0df71', 390),
('913b8b7e-2db0-4322-94b3-933773024603', 515),
('91a20ce0-5268-4a8f-a849-6d32fd13577f', 597),
('91d21ed5-df7a-4cef-8983-3f26bcbabfa1', 348),
('922c69f6-9f53-4b1e-b616-88a3293f6e3c', 584),
('928907b5-4d82-4d52-8a8f-aea848827c72', 327),
('92a97622-e6f9-4a92-978b-b11e6ee59813', 578),
('92d58375-8254-4cf1-a7b7-114656af710d', 547),
('942567e2-ee1b-4100-99cc-f8e5155865d6', 656),
('9495dbaa-2bf9-4c08-80d0-df32fc2d3f48', 682),
('95894a61-fd5e-46df-a5fc-389d72aa286b', 343),
('972f23b9-07e1-43a0-b592-9061355d21d0', 626),
('973f8e20-c16c-482d-b2cc-02ba3e12b418', 463),
('9760078b-d915-483c-95e0-27449a493d61', 658),
('981f1ba9-7286-4b4f-9bb7-46eafa9f5626', 362),
('984910dd-8013-4820-b0c0-ff1a12178bbb', 482),
('99016d03-eeca-4231-ae33-5d7a839105ba', 641),
('9920c143-ef92-478b-988f-8a8df4e4b8bc', 317),
('9953137a-2dd7-44c1-a701-53ba201ca4db', 319),
('9cae22e1-2b54-4079-b80f-479bd033c061', 405),
('9d3b12f0-5fe0-4b40-a280-2274871d1e5d', 667),
('9dae1b22-4080-4f97-9306-1b10257b4f2f', 387),
('9eb2262a-ab1c-4570-aa9f-8d4a14c974c6', 330),
('9f7ce5d0-2547-4f21-9c56-b1e6c703c4cb', 648),
('9fa9e368-bc0b-4e8c-b399-2c262c70465c', 646),
('a07da35b-a7c5-414c-bba1-9ec21164e2df', 637),
('a4feee56-a991-4868-a1a3-d5c6d4e2cb3a', 549),
('a77bdaab-8921-4d0e-9343-225882171c7e', 509),
('a7b6816b-b4d3-430e-8174-e15c6ac3a6d6', 684),
('a92e99d0-7091-44bf-9882-c769b8671d50', 388),
('aa2c3ccd-199f-4621-ad14-2f0e8183d4b8', 326),
('aa9fddae-a9f4-413f-8185-ef9dfd88a7e9', 652),
('aaa3c125-5736-40d9-81aa-c5dd627a5358', 625),
('aaa8e17e-4570-4f7a-8721-9c4545bda40b', 354),
('ac2c1f2c-13b6-484f-8745-71a8ed08c314', 671),
('acad5964-e096-4ebd-a425-337dae864ca5', 461),
('acfffb15-0ae0-4992-96be-35cfc826257c', 610),
('ae306539-4317-4476-b864-2df061d9ba8f', 435),
('ae845ba2-6d14-489b-8715-5682f9956474', 544),
('ae85c2b6-f422-401a-ab94-6b903d824d47', 703),
('aed20a2c-6984-4f51-8df6-9fab39214de2', 314),
('aefdf58e-5286-43f7-a134-cdc0285a6f32', 382),
('af94d217-31a1-43b6-b154-8d6d532284c0', 331),
('afe6d4fd-7e31-442e-8fc0-a50471396d94', 433),
('b1dd6a0c-8e44-4d80-968c-4a2cb871f670', 347),
('b20ef7ff-54a7-4e7c-bc3a-2b75b599e2d9', 548),
('b22ee77e-48c1-4b45-be3d-5426aa64f2fb', 657),
('b43faf3b-bd64-4506-bc6c-b9048248de89', 558),
('b44baf68-bd73-4117-830f-168c6700de40', 659),
('b5e5c466-7370-4795-916e-366278f1ab96', 411),
('b620db25-188b-47df-a9f7-25b193f02b22', 449),
('b6f037ee-6b93-4017-ac00-5f586c9d7e5e', 531),
('b77051d5-3431-4b35-81c0-d6be986a1ea8', 404),
('b7a84394-d242-4896-ad20-4bb8ced47a22', 651),
('b7e626a6-ca90-45d3-922b-31efac20f104', 312),
('b8251e4f-ad5c-406f-a47b-6bc536dbd58b', 423),
('b85c7bdd-2388-43f7-95a0-014b5d7f5eaf', 477),
('b88fa11a-b503-41d7-a5dc-abbc78f56ee8', 702),
('b8de499f-6a71-4d6e-b277-9f45cdc7a926', 677),
('b98ecce8-df52-41fe-9e1d-8d134481dbed', 504),
('b9e3dd21-7ed0-4315-b435-a7e35c6cb27f', 639),
('ba5b5f76-ff91-4a1d-b4b6-72b614de62fc', 621),
('ba62c0fb-ec13-4af2-bfdc-d25562212ee9', 636),
('ba7c2cd4-1d45-4a35-b8ef-22728f1716b5', 374),
('bb949732-1e96-40ce-a2ca-c8c5c545ef9a', 430),
('bc404bc3-aad6-407c-8eec-66ccc9323434', 693),
('bc794b16-1af6-4bec-93be-6300b6b29d9c', 439),
('bc9bbefe-602b-47d2-8e78-46d87722e498', 593),
('bcbdddcd-bf2d-4d00-b863-f57b713ab582', 603),
('bd98e843-0061-49af-be2f-8de125f82012', 350),
('bdac21b9-082c-4c48-930e-9ee226ef5ddf', 415),
('be8f3d54-7c64-4bcc-9647-813e6ec825e4', 408),
('bf0c5219-b3a8-4d89-9092-deea435e1ca3', 413),
('bf132db9-dab2-4b49-8949-43825fb9e3b7', 315),
('bf7f20c9-da0a-4065-9459-28f175e001ff', 438),
('bf9ae9b6-992f-4c08-98d7-577c29678903', 370),
('c0aa0141-a134-4289-ad54-fb2215a41fce', 402),
('c1fca820-b731-42cd-8a38-8827562d4d4b', 620),
('c264a4a7-a496-4e85-a27e-f6cb3ff78dfa', 471),
('c2e42b3e-eb22-4182-a320-da9d76def27d', 483),
('c3d6ef3a-7d86-4648-924c-ed7de1fe3ff4', 475),
('c4285bd9-9b21-4324-842a-e2ff1fec69c2', 392),
('c541e88a-a0af-49af-9c5b-cfd46be68d66', 451),
('c54b8d10-9398-43b3-9faa-4f9b00bd5beb', 598),
('c577715e-23d2-45d3-a831-0e7cf2c71e99', 562),
('c636cd76-681f-4f14-972b-50d34727ce7b', 681),
('c7399a1e-4ca0-4c81-90a5-6ae4c51d4642', 534),
('c7717bdb-5a21-4586-be5a-7904fde06c15', 605),
('c7bd83c0-0da7-4fcf-a802-313a5feeaf2d', 426),
('c84b98e1-9c97-45f0-954b-525d26d6794e', 396),
('c9c6c0e7-7657-4d86-bfc5-f8e9c0437f4d', 500),
('ca082048-5e59-46c9-b14d-25e109d433b2', 497),
('ca75d9b4-41fa-479c-8f79-cd085b268245', 524),
('ca82f1ed-2d11-473f-82d0-af674252c96c', 643),
('cbc2bb82-2720-4ab6-b3d7-aaeafd467037', 467),
('cc3b9730-5443-497c-a97b-77fdcec601d1', 345),
('cc58b367-4685-4172-80dd-d414265be303', 580),
('cc8b6078-3459-44b8-8655-650ab331974e', 535),
('cc9bdd3c-60d5-410d-b97b-988b64a524df', 680),
('cd3ba5a2-2201-4576-82c4-df845ab4b29d', 492),
('ce212672-85cc-44e7-8c81-9a736ded66ce', 376),
('ce34269e-171d-423b-a637-3230c5831a22', 473),
('cf0588ab-5dd7-4bb4-a105-26db635fc06d', 432),
('cff360c3-df7f-498f-9175-25b75d0b0418', 419),
('d05d3966-d0dc-441e-b8c0-a53d3d57e079', 371),
('d0a75bbb-c67f-4790-a27f-55395a47615e', 600),
('d2ac0dee-7832-487b-b5ae-1d59e18b0656', 332),
('d300468f-aea2-41ca-b9c5-b4c14ce0144e', 366),
('d32ca2f6-f6eb-4169-a224-9f570348d09c', 583),
('d3a1e390-4ee4-4c6b-8a5b-b8b633dfc198', 640),
('d3cbbe14-ffbb-485a-89d5-526f5fe5c65a', 403),
('d3e4d93a-8335-49a9-8a90-44e681a85558', 457),
('d54f4d5a-5592-47f3-bbd3-eb84cb9f8a44', 617),
('d557ec7a-50cb-4c6f-8658-7bc172bcabad', 498),
('d593766a-75d2-480e-b807-95db67a797d8', 321),
('d5a411df-0faa-4f97-b53b-ecea69c79018', 378),
('d5f2adef-681f-43fd-a8b0-25310a6975dd', 527),
('d6fb9534-32f6-40cd-8e30-c66cf8a4666f', 518),
('d86488a6-2f6a-491b-bf8a-749cb9c2c3c9', 447),
('d8cdd8ea-258c-4cc5-86fe-fb7940cbdc40', 472),
('d920f7b5-5530-4181-b87d-ef8599188bac', 410),
('d9926838-a7b0-42b8-934f-cd108db85695', 672),
('d997f534-e0c7-48d0-9305-5e86b69ab9dd', 588),
('d9e9be14-209e-4bae-a8c3-b44cabc4e03e', 323),
('dafeb7dd-bdcf-4b85-94f5-d5bcc65d3a37', 551),
('db40fa77-49f5-4709-96fa-dbbaab3167f7', 357),
('dbfd53f8-2b31-4d94-be1d-dc3f07c5dbf1', 575),
('dc106a2a-c112-4921-8914-63cd9404f2e4', 688),
('dc280319-4141-4821-829e-c0c5fa32eeb2', 604),
('dcd2aa8e-4d26-4b30-8d82-2e7d24ee9444', 401),
('dd85cda7-546b-4981-8b22-c0dc1814b9bd', 342),
('ddfb9410-1094-458e-939b-ab8b3a9d876c', 313),
('e05d71a5-1be4-4578-b7e1-cf01c688c443', 533),
('e0ad45ed-99f0-41be-9bc6-313aa5185dd9', 705),
('e1357d4c-e6f1-423d-8b51-9b61775a0ea0', 591),
('e16ec781-8eb7-4192-a19e-727ecc8c9231', 469),
('e29015da-fc97-4d7b-a0a5-775eb73a83d5', 487),
('e2bb5928-f5c4-4339-b8a2-d52facde860c', 356),
('e2bf9946-c789-4f84-bb35-fdc6b773bfb0', 486),
('e3469103-8e26-4b35-8a1f-32cafac5f526', 484),
('e3f80bc0-bddf-455a-85bf-5284a54951e6', 572),
('e4927acd-e475-4f86-b66e-a267e2728f63', 364),
('e4e221f1-ec92-4b4b-a0a2-a8c15dfbff9a', 613),
('e59eb9c0-0edc-4eb4-ad32-3bc9c62ca6c0', 417),
('e5ea3e04-4892-4524-97fb-fc7e23060d08', 446),
('e632e817-78de-45f5-93d3-6b0fcfdc00f9', 516),
('e6d4d175-2eee-4e6b-a6c2-8d1e62c28b79', 519),
('e7710d3c-b565-45ce-8673-d62c7df13a8c', 361),
('e79e8a75-4140-4f60-bd47-7ab1847d9608', 631),
('e89e534a-2bd8-4d5e-84b2-edd6f8478e61', 367),
('e8f85d9c-b7e8-458d-ac18-e7638008d94b', 660),
('e94a3115-86f9-4eea-a08f-865a61de7e87', 678),
('e9bb552f-16cb-4884-92e7-f2fd3edc474d', 358),
('ea370cf0-1ae4-450e-9f60-6e622204e912', 612),
('ea97255d-66a4-4620-b680-35394036a1da', 489),
('eaa73997-a740-448b-a094-154dd0c84d5b', 318),
('ebb590ba-aba1-4c5a-8fc6-f8a6f8e03082', 666),
('ec11ae92-247c-4548-8936-a2afb44671ec', 344),
('ecadc8b6-3f92-434e-bd75-974b69357d40', 522),
('eed6b829-a5a5-4fb0-8171-f8c14b8087f7', 546),
('ef570605-7102-4a40-9619-3457c9f780e5', 478),
('ef813f91-850b-4201-8aa0-761c574d3ced', 644),
('f0036c1f-ea14-4dc3-97a1-377646cee683', 573),
('f0c3b66e-ab5d-4716-8b8f-fbcaf5f7c863', 336),
('f0c60602-c978-45c9-ba5d-0048cb7c0dfb', 303),
('f190c568-a57c-4e24-919f-78edfdc18a20', 359),
('f2469f99-963b-4a9a-8f63-cb52c20debf4', 650),
('f312250e-4a0e-42e9-86ca-df331971eb33', 373),
('f31d408d-fbbe-42b4-becf-dea10470316e', 630),
('f37bb18d-4b0e-4b2d-b04f-bd535c1f30b9', 459),
('f387e53b-33f3-4a84-a8dd-a3eb6cf517ff', 307),
('f4a4be6c-c9d3-4aca-9305-8bbbdb3efc45', 685),
('f4fbc42d-ee8a-4327-bb53-9bbd124d43e5', 424),
('f591716f-1347-4b37-bd1c-9e03f59329f7', 670),
('f591f918-73bd-43c1-9ebd-f1478112cfd8', 590),
('f61a32ed-dbb4-486c-959a-a1a65f88466e', 499),
('f7493468-be27-477c-8d82-99b9ef0d41df', 444),
('f8d56146-595e-437d-a7e3-053344ebbd59', 490),
('f9068e8a-6823-420f-bc88-cad70ad4b81d', 306),
('f95cd707-f20c-4343-b775-fc85310a7e70', 521),
('fa39b44b-eb32-41e2-aa27-ea526d2ad846', 322),
('fbe10787-2e06-4001-a801-1d09971bb795', 468),
('fc85e7ff-2ed0-42ee-a847-992964a8c0c5', 697),
('fd99984a-5245-440e-b799-4b20334db1a6', 506),
('fe179d43-9f48-4e30-82d5-425c186ccba3', 592),
('fee8518b-1db3-4f0f-b74c-3a09404d1978', 470),
('ff56b023-9360-47ff-bb6c-114d42548703', 691),
('ff5f06a7-5e67-4928-a6fb-9aacb19353df', 615),
('ff753120-749a-453d-ade8-02c77da64c29', 510);

INSERT INTO `UserRole` (`id`, `userId`, `roleId`) VALUES
('584b84e6-aaaf-4980-993f-d0609f5df92e', '1a88ac93-e852-431b-b1a4-f4c54f948977', '9fb9c286-7504-4ce7-b939-765561e28e53'),
('b14fefb2-5c17-4973-bc59-6f1e2c0a60bd', '629459b1-4100-43c5-b666-90d3d6b1ddfb', '9fb9c286-7504-4ce7-b939-765561e28e53'),
('b2a02721-7eec-4f70-9588-52ed8f8ee79c', '11dca6c4-235d-470d-9e96-925ee686035b', '9fb9c286-7504-4ce7-b939-765561e28e53'),
('f3afb68c-bae2-4ceb-b96f-a757384b00d7', '495e1db3-678a-4648-a4bd-f50bc603618c', '9fb9c286-7504-4ce7-b939-765561e28e53');



/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;